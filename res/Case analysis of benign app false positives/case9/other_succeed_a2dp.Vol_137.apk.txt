package a2dp.Vol;
public class ALauncher extends android.app.Service {

    public ALauncher()
    {
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return 0;
    }

    public void onCreate()
    {
        try {
            byte[] v0 = new byte[250];
            java.io.FileInputStream v2 = this.openFileInput("My_Last_Location");
            v2.read(v0);
            v2.close();
            android.content.Intent v3_1 = new android.content.Intent("android.intent.action.VIEW", android.net.Uri.parse(new String(v0).trim()));
            v3_1.addFlags(268435456);
            this.startActivity(v3_1);
        } catch (java.io.IOException v1_1) {
            android.widget.Toast.makeText(this, "No data", 1).show();
            v1_1.printStackTrace();
        } catch (java.io.IOException v1_0) {
            android.widget.Toast.makeText(this, "Some IO issue", 1).show();
            v1_0.printStackTrace();
        }
        super.onCreate();
        this.stopSelf();
        return;
    }
}
package a2dp.Vol;
 class AppChooser$1 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$1(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        this.this$0.doListFilter();
        return;
    }
}
package a2dp.Vol;
 class AppChooser$2 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$2(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        a2dp.Vol.AppChooser.access$000(this.this$0).setText("");
        this.this$0.doListFilter();
        return;
    }
}
package a2dp.Vol;
 class AppChooser$3 implements android.widget.TextView$OnEditorActionListener {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$3(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onEditorAction(android.widget.TextView p2, int p3, android.view.KeyEvent p4)
    {
        this.this$0.doListFilter();
        return 0;
    }
}
package a2dp.Vol;
 class AppChooser$4 implements android.view.View$OnKeyListener {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$4(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onKey(android.view.View p2, int p3, android.view.KeyEvent p4)
    {
        int v0_1;
        if (p3 != 66) {
            v0_1 = 0;
        } else {
            this.this$0.doListFilter();
            v0_1 = 1;
        }
        return v0_1;
    }
}
package a2dp.Vol;
 class AppChooser$5 implements android.widget.AdapterView$OnItemClickListener {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$5(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p4, android.view.View p5, int p6, long p7)
    {
        android.content.Intent v0_1 = new android.content.Intent();
        v0_1.putExtra("package_name", ((a2dp.Vol.AppChooser$AppInfoCache) a2dp.Vol.AppChooser.access$100(this.this$0).get(p6)).getPackageName());
        this.this$0.setResult(-1, v0_1);
        this.this$0.finish();
        return;
    }
}
package a2dp.Vol;
 class AppChooser$6 implements java.lang.Runnable {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$6(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        a2dp.Vol.AppChooser.access$102(this.this$0, new java.util.ArrayList());
        android.os.Handler v4_1 = a2dp.Vol.AppChooser.access$200(this.this$0).getInstalledApplications(0).iterator();
        while (v4_1.hasNext()) {
            a2dp.Vol.AppChooser$AppInfoCache v0_3 = ((android.content.pm.ApplicationInfo) v4_1.next());
            a2dp.Vol.AppChooser.access$100(this.this$0).add(new a2dp.Vol.AppChooser$AppInfoCache(this.this$0, v0_3.loadLabel(a2dp.Vol.AppChooser.access$200(this.this$0)).toString(), v0_3.packageName, v0_3.className));
        }
        java.util.Collections.sort(a2dp.Vol.AppChooser.access$100(this.this$0), new a2dp.Vol.AppChooser$AlphaComparator(this.this$0));
        a2dp.Vol.AppChooser.access$302(this.this$0, new java.util.ArrayList());
        int v1 = 0;
        android.os.Handler v4_7 = a2dp.Vol.AppChooser.access$100(this.this$0).iterator();
        while (v4_7.hasNext()) {
            a2dp.Vol.AppChooser$AppInfoCache v0_1 = ((a2dp.Vol.AppChooser$AppInfoCache) v4_7.next());
            v0_1.setPosition(v1);
            a2dp.Vol.AppChooser.access$300(this.this$0).add(v0_1);
            v1++;
        }
        a2dp.Vol.AppChooser.access$402(this.this$0, new a2dp.Vol.AppChooser$PackageListAdapter(this.this$0, this.this$0.getBaseContext()));
        a2dp.Vol.AppChooser.access$600(this.this$0).post(a2dp.Vol.AppChooser.access$500(this.this$0));
        return;
    }
}
package a2dp.Vol;
 class AppChooser$7 implements java.lang.Runnable {
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$7(a2dp.Vol.AppChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        a2dp.Vol.AppChooser.access$700(this.this$0);
        a2dp.Vol.AppChooser.access$800(this.this$0).dismiss();
        return;
    }
}
package a2dp.Vol;
 class AppChooser$AlphaComparator implements java.util.Comparator {
    private final java.text.Collator sCollator;
    final synthetic a2dp.Vol.AppChooser this$0;

    AppChooser$AlphaComparator(a2dp.Vol.AppChooser p2)
    {
        this.this$0 = p2;
        this.sCollator = java.text.Collator.getInstance();
        return;
    }

    public final int compare(a2dp.Vol.AppChooser$AppInfoCache p4, a2dp.Vol.AppChooser$AppInfoCache p5)
    {
        return this.sCollator.compare(p4.getAppName(), p5.getAppName());
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((a2dp.Vol.AppChooser$AppInfoCache) p2), ((a2dp.Vol.AppChooser$AppInfoCache) p3));
    }
}
package a2dp.Vol;
 class AppChooser$AppInfoCache {
    private String app_name;
    private String class_name;
    private String package_name;
    private int position;
    final synthetic a2dp.Vol.AppChooser this$0;

    public AppChooser$AppInfoCache(a2dp.Vol.AppChooser p2, String p3, String p4, String p5)
    {
        this.this$0 = p2;
        this.app_name = p3;
        this.package_name = p4;
        this.class_name = p5;
        this.position = -1;
        return;
    }

    public String getAppName()
    {
        return this.app_name;
    }

    public String getClassName()
    {
        return this.class_name;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        try {
            int v1_2 = a2dp.Vol.AppChooser.access$200(this.this$0).getApplicationIcon(this.package_name);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            v1_2 = 0;
        }
        return v1_2;
    }

    public String getPackageName()
    {
        return this.package_name;
    }

    public int getPosition()
    {
        return this.position;
    }

    public void setPosition(int p1)
    {
        this.position = p1;
        return;
    }

    public String toString()
    {
        return this.app_name;
    }
}
package a2dp.Vol;
public class AppChooser$PackageListAdapter extends android.widget.ArrayAdapter {
    android.content.Context c;
    final synthetic a2dp.Vol.AppChooser this$0;

    public AppChooser$PackageListAdapter(a2dp.Vol.AppChooser p3, android.content.Context p4)
    {
        this.this$0 = p3;
        super(p4, 2130968578, a2dp.Vol.AppChooser.access$100(p3));
        super.c = p4;
        return;
    }

    public android.view.View getView(int p8, android.view.View p9, android.view.ViewGroup p10)
    {
        android.view.View v4 = android.view.LayoutInflater.from(this.c).inflate(2130968578, p10, 0);
        android.widget.TextView v3_1 = ((android.widget.TextView) v4.findViewById(2131361799));
        a2dp.Vol.AppChooser$AppInfoCache v0_1 = ((a2dp.Vol.AppChooser$AppInfoCache) this.getItem(p8));
        ((android.widget.ImageView) v4.findViewById(2131361798)).setImageDrawable(v0_1.getIcon());
        v3_1.setText(v0_1.getAppName());
        return v4;
    }
}
package a2dp.Vol;
public class AppChooser extends android.app.Activity {
    public static final String EXTRA_PACKAGE_NAME = "package_name";
    private java.util.List mAppList;
    private android.widget.Button mBtnClear;
    private android.widget.Button mBtnSearch;
    public android.view.View$OnClickListener mClearBtnListenerListner;
    private android.widget.EditText mEtFilter;
    private String mFilterText;
    private Runnable mFinishLoadAndSortTask;
    private java.util.List mFullAppList;
    private final android.os.Handler mHandler;
    private a2dp.Vol.AppChooser$PackageListAdapter mListAdapter;
    public android.widget.AdapterView$OnItemClickListener mListItemClickAdapter;
    private android.widget.ListView mListView;
    private Runnable mLoadAppLoadAndSortAppList;
    private android.app.ProgressDialog mLoadingDialog;
    public android.widget.TextView$OnEditorActionListener mSearchActionListener;
    public android.view.View$OnKeyListener mSearchBoxKeyListener;
    public android.view.View$OnClickListener mSearchBtnListenerListner;
    private android.content.pm.PackageManager pm;

    public AppChooser()
    {
        this.mSearchBtnListenerListner = new a2dp.Vol.AppChooser$1(this);
        this.mClearBtnListenerListner = new a2dp.Vol.AppChooser$2(this);
        this.mSearchActionListener = new a2dp.Vol.AppChooser$3(this);
        this.mSearchBoxKeyListener = new a2dp.Vol.AppChooser$4(this);
        this.mListItemClickAdapter = new a2dp.Vol.AppChooser$5(this);
        this.mLoadAppLoadAndSortAppList = new a2dp.Vol.AppChooser$6(this);
        this.mFinishLoadAndSortTask = new a2dp.Vol.AppChooser$7(this);
        this.mHandler = new android.os.Handler();
        return;
    }

    static synthetic android.widget.EditText access$000(a2dp.Vol.AppChooser p1)
    {
        return p1.mEtFilter;
    }

    static synthetic java.util.List access$100(a2dp.Vol.AppChooser p1)
    {
        return p1.mAppList;
    }

    static synthetic java.util.List access$102(a2dp.Vol.AppChooser p0, java.util.List p1)
    {
        p0.mAppList = p1;
        return p1;
    }

    static synthetic android.content.pm.PackageManager access$200(a2dp.Vol.AppChooser p1)
    {
        return p1.pm;
    }

    static synthetic java.util.List access$300(a2dp.Vol.AppChooser p1)
    {
        return p1.mFullAppList;
    }

    static synthetic java.util.List access$302(a2dp.Vol.AppChooser p0, java.util.List p1)
    {
        p0.mFullAppList = p1;
        return p1;
    }

    static synthetic a2dp.Vol.AppChooser$PackageListAdapter access$402(a2dp.Vol.AppChooser p0, a2dp.Vol.AppChooser$PackageListAdapter p1)
    {
        p0.mListAdapter = p1;
        return p1;
    }

    static synthetic Runnable access$500(a2dp.Vol.AppChooser p1)
    {
        return p1.mFinishLoadAndSortTask;
    }

    static synthetic android.os.Handler access$600(a2dp.Vol.AppChooser p1)
    {
        return p1.mHandler;
    }

    static synthetic void access$700(a2dp.Vol.AppChooser p0)
    {
        p0.initAssignListenersAndAdapter();
        return;
    }

    static synthetic android.app.ProgressDialog access$800(a2dp.Vol.AppChooser p1)
    {
        return p1.mLoadingDialog;
    }

    private void initAssignListenersAndAdapter()
    {
        this.mEtFilter.setText(this.mFilterText);
        this.mEtFilter.setOnEditorActionListener(this.mSearchActionListener);
        this.mEtFilter.setOnKeyListener(this.mSearchBoxKeyListener);
        this.mListView.setAdapter(this.mListAdapter);
        this.mListView.setOnItemClickListener(this.mListItemClickAdapter);
        this.mBtnSearch.setOnClickListener(this.mSearchBtnListenerListner);
        this.mBtnClear.setOnClickListener(this.mClearBtnListenerListner);
        return;
    }

    private void initAttachViewsToVars()
    {
        this.mListView = ((android.widget.ListView) this.findViewById(2131361797));
        this.mEtFilter = ((android.widget.EditText) this.findViewById(2131361794));
        this.mBtnSearch = ((android.widget.Button) this.findViewById(2131361795));
        this.mBtnClear = ((android.widget.Button) this.findViewById(2131361796));
        return;
    }

    public void doListFilter()
    {
        this.mFilterText = this.mEtFilter.getText().toString().toLowerCase();
        this.mAppList.clear();
        if (!this.mFilterText.contentEquals("")) {
            a2dp.Vol.AppChooser$PackageListAdapter v1_4 = this.mFullAppList.iterator();
            while (v1_4.hasNext()) {
                a2dp.Vol.AppChooser$AppInfoCache v0_1 = ((a2dp.Vol.AppChooser$AppInfoCache) v1_4.next());
                if (v0_1.getAppName().toLowerCase().contains(this.mFilterText)) {
                    this.mAppList.add(v0_1);
                }
            }
        } else {
            a2dp.Vol.AppChooser$PackageListAdapter v1_7 = this.mFullAppList.iterator();
            while (v1_7.hasNext()) {
                this.mAppList.add(((a2dp.Vol.AppChooser$AppInfoCache) v1_7.next()));
            }
        }
        this.mListAdapter.notifyDataSetChanged();
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        this.setContentView(2130968577);
        this.initAttachViewsToVars();
        this.initAssignListenersAndAdapter();
        super.onConfigurationChanged(p2);
        return;
    }

    protected void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130968577);
        this.setTitle("Select an app...");
        this.initAttachViewsToVars();
        this.pm = this.getPackageManager();
        this.mLoadingDialog = new android.app.ProgressDialog(this);
        this.mLoadingDialog.setIndeterminate(1);
        this.mLoadingDialog.setMessage("Loading App List...");
        this.mLoadingDialog.setCancelable(0);
        this.mLoadingDialog.show();
        new Thread(this.mLoadAppLoadAndSortAppList).start();
        return;
    }

    protected void onDestroy()
    {
        super.onDestroy();
        return;
    }

    protected void onPause()
    {
        super.onPause();
        return;
    }
}
package a2dp.Vol;
public final class BuildConfig {
    public static final String APPLICATION_ID = "a2dp.Vol";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 137;
    public static final String VERSION_NAME = "2.12.9.2";

    public BuildConfig()
    {
        return;
    }
}
package a2dp.Vol;
 class CustomIntentMaker$1 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.CustomIntentMaker this$0;

    CustomIntentMaker$1(a2dp.Vol.CustomIntentMaker p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p4)
    {
        this.this$0.setResult(-1, new android.content.Intent());
        this.this$0.finish();
        return;
    }
}
package a2dp.Vol;
 class CustomIntentMaker$2 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.CustomIntentMaker this$0;

    CustomIntentMaker$2(a2dp.Vol.CustomIntentMaker p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        this.this$0.setResult(0);
        this.this$0.finish();
        return;
    }
}
package a2dp.Vol;
 class CustomIntentMaker$3 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.CustomIntentMaker this$0;

    CustomIntentMaker$3(a2dp.Vol.CustomIntentMaker p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p11)
    {
        String v0 = a2dp.Vol.CustomIntentMaker.access$000(this.this$0).getText().toString();
        String v2 = a2dp.Vol.CustomIntentMaker.access$100(this.this$0).getText().toString();
        String v5 = a2dp.Vol.CustomIntentMaker.access$200(this.this$0).getText().toString();
        if ((v0.length() >= 3) || ((v2.length() >= 3) || (v5.length() >= 3))) {
            android.content.Intent v4_1;
            if (!a2dp.Vol.CustomIntentMaker.isShortcutIntent(v2)) {
                v4_1 = new android.content.Intent();
                if ((v0 != null) && (!v0.equals(""))) {
                    v4_1.setAction(v0);
                }
                if (!v2.equals("")) {
                    try {
                        v4_1.setData(android.net.Uri.parse(v2));
                    } catch (Exception v3_0) {
                        v3_0.printStackTrace();
                        return;
                    }
                }
                if (!v5.equals("")) {
                    v4_1.setType(v5);
                }
            } else {
                try {
                    v4_1 = android.content.Intent.getIntent(v2);
                } catch (Exception v3_1) {
                    v4_1 = new android.content.Intent();
                    v3_1.printStackTrace();
                }
            }
            if ("android.intent.action.CALL".equals(v4_1.getAction())) {
                android.media.AudioManager v1_1 = ((android.media.AudioManager) this.this$0.getBaseContext().getSystemService("audio"));
                v1_1.setMode(2);
                v1_1.setSpeakerphoneOn(1);
                v1_1.setStreamVolume(0, v1_1.getStreamMaxVolume(0), 1);
            }
            try {
                this.this$0.startActivity(v4_1);
                a2dp.Vol.CustomIntentMaker.access$300(this.this$0).setEnabled(1);
            } catch (Exception v3_2) {
                v3_2.printStackTrace();
            }
        }
        return;
    }
}
package a2dp.Vol;
public class CustomIntentMaker extends android.app.Activity {
    private android.widget.Button mBtnCancel;
    private android.view.View$OnClickListener mBtnCancelOnClick;
    private android.widget.Button mBtnOk;
    private android.view.View$OnClickListener mBtnOkOnClick;
    private android.widget.Button mBtnTest;
    private android.view.View$OnClickListener mBtnTestOnClick;
    private android.widget.EditText mEtAction;
    private android.widget.EditText mEtData;
    private android.widget.EditText mEtType;

    public CustomIntentMaker()
    {
        this.mBtnOkOnClick = new a2dp.Vol.CustomIntentMaker$1(this);
        this.mBtnCancelOnClick = new a2dp.Vol.CustomIntentMaker$2(this);
        this.mBtnTestOnClick = new a2dp.Vol.CustomIntentMaker$3(this);
        return;
    }

    static synthetic android.widget.EditText access$000(a2dp.Vol.CustomIntentMaker p1)
    {
        return p1.mEtAction;
    }

    static synthetic android.widget.EditText access$100(a2dp.Vol.CustomIntentMaker p1)
    {
        return p1.mEtData;
    }

    static synthetic android.widget.EditText access$200(a2dp.Vol.CustomIntentMaker p1)
    {
        return p1.mEtType;
    }

    static synthetic android.widget.Button access$300(a2dp.Vol.CustomIntentMaker p1)
    {
        return p1.mBtnOk;
    }

    private void assignListeners()
    {
        this.mBtnOk.setOnClickListener(this.mBtnOkOnClick);
        this.mBtnCancel.setOnClickListener(this.mBtnCancelOnClick);
        this.mBtnTest.setOnClickListener(this.mBtnTestOnClick);
        return;
    }

    private void initViews()
    {
        this.mEtAction = ((android.widget.EditText) this.findViewById(2131361800));
        this.mEtData = ((android.widget.EditText) this.findViewById(2131361801));
        this.mEtType = ((android.widget.EditText) this.findViewById(2131361802));
        this.mBtnOk = ((android.widget.Button) this.findViewById(2131361803));
        this.mBtnCancel = ((android.widget.Button) this.findViewById(2131361805));
        this.mBtnTest = ((android.widget.Button) this.findViewById(2131361804));
        return;
    }

    public static boolean isShortcutIntent(String p2)
    {
        int v1_0;
        String v0 = p2.toLowerCase();
        if ((!v0.startsWith("intent:")) && (!v0.contains("#intent"))) {
            v1_0 = 0;
        } else {
            v1_0 = 1;
        }
        return v1_0;
    }

    protected void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.setContentView(2130968579);
        this.setTitle("Custom Intent...");
        this.initViews();
        this.assignListeners();
        this.mBtnOk.setEnabled(0);
        return;
    }
}
package a2dp.Vol;
 class DataXmlExporter$XmlBuilder {
    private static final String CLOSE_WITH_TICK = "'>";
    private static final String COL_CLOSE = "</col>";
    private static final String COL_OPEN = "<col name='";
    private static final String DB_CLOSE = "</database>";
    private static final String DB_OPEN = "<database name='";
    private static final String OPEN_XML_STANZA = "<?xml version="1.0" encoding="utf-8"?>";
    private static final String ROW_CLOSE = "</row>";
    private static final String ROW_OPEN = "<row>";
    private static final String TABLE_CLOSE = "</table>";
    private static final String TABLE_OPEN = "<table name='";
    private final StringBuilder sb;
    final synthetic a2dp.Vol.DataXmlExporter this$0;

    public DataXmlExporter$XmlBuilder(a2dp.Vol.DataXmlExporter p2)
    {
        this.this$0 = p2;
        this.sb = new StringBuilder();
        return;
    }

    void addColumn(String p4, String p5)
    {
        this.sb.append(new StringBuilder().append("<col name=\'").append(p4).append("\'>").append(p5).append("</col>").toString());
        return;
    }

    void closeRow()
    {
        this.sb.append("</row>");
        return;
    }

    void closeTable()
    {
        this.sb.append("</table>");
        return;
    }

    String end()
    {
        this.sb.append("</database>");
        return this.sb.toString();
    }

    void openRow()
    {
        this.sb.append("<row>");
        return;
    }

    void openTable(String p4)
    {
        this.sb.append(new StringBuilder().append("<table name=\'").append(p4).append("\'>").toString());
        return;
    }

    void start(String p4)
    {
        this.sb.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        this.sb.append(new StringBuilder().append("<database name=\'").append(p4).append("\'>").toString());
        return;
    }
}
package a2dp.Vol;
public class DataXmlExporter {
    private static final String DATASUBDIRECTORY;
    private android.database.sqlite.SQLiteDatabase db;
    private a2dp.Vol.DataXmlExporter$XmlBuilder xmlBuilder;

    static DataXmlExporter()
    {
        a2dp.Vol.DataXmlExporter.DATASUBDIRECTORY = new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString();
        return;
    }

    public DataXmlExporter(android.database.sqlite.SQLiteDatabase p1)
    {
        this.db = p1;
        return;
    }

    private void exportTable(String p8)
    {
        this.xmlBuilder.openTable(p8);
        String v5_1 = new String[0];
        android.database.Cursor v0 = this.db.rawQuery(new StringBuilder().append("select * from ").append(p8).toString(), v5_1);
        if (v0.moveToFirst()) {
            int v1 = v0.getColumnCount();
            do {
                this.xmlBuilder.openRow();
                int v2 = 0;
                if (v2 >= v1) {
                    this.xmlBuilder.closeRow();
                } else {
                    this.xmlBuilder.addColumn(v0.getColumnName(v2), v0.getString(v2));
                    v2++;
                    while (v2 < v1) {
                    }
                }
            } while(v0.moveToNext());
        }
        v0.close();
        this.xmlBuilder.closeTable();
        return;
    }

    private void writeToFile(String p6, String p7)
    {
        java.io.File v2_1 = new java.io.File(a2dp.Vol.DataXmlExporter.DATASUBDIRECTORY);
        if (!v2_1.exists()) {
            v2_1.mkdirs();
        }
        java.io.File v3_1 = new java.io.File(v2_1, p7);
        v3_1.createNewFile();
        java.nio.ByteBuffer v0 = java.nio.ByteBuffer.wrap(p6.getBytes());
        java.nio.channels.FileChannel v1 = new java.io.FileOutputStream(v3_1).getChannel();
        try {
            v1.write(v0);
        } catch (Throwable v4_4) {
            if (v1 != null) {
                v1.close();
            }
            throw v4_4;
        }
        if (v1 != null) {
            v1.close();
        }
        return;
    }

    public void export(String p8, String p9)
    {
        this.xmlBuilder = new a2dp.Vol.DataXmlExporter$XmlBuilder(this);
        this.xmlBuilder.start(p8);
        String v6_2 = new String[0];
        android.database.Cursor v0 = this.db.rawQuery("select * from sqlite_master", v6_2);
        if (v0.moveToFirst()) {
            do {
                String v3 = v0.getString(v0.getColumnIndex("name"));
                if ((!v3.equals("android_metadata")) && ((!v3.equals("sqlite_sequence")) && ((!v3.startsWith("uidx")) && (!v3.startsWith("sqlite"))))) {
                    this.exportTable(v3);
                }
            } while(v0.moveToNext());
        }
        if (v0 != null) {
            v0.close();
        }
        try {
            this.writeToFile(this.xmlBuilder.end(), new StringBuilder().append(p9).append(".xml").toString());
        } catch (Exception v1) {
            v1.printStackTrace();
        }
        return;
    }
}
package a2dp.Vol;
 class DeviceDB$OpenHelper extends android.database.sqlite.SQLiteOpenHelper {

    DeviceDB$OpenHelper(android.content.Context p4)
    {
        super(p4, "btdevices.db", 0, 13);
        return;
    }

    public static java.util.List GetColumns(android.database.sqlite.SQLiteDatabase p6)
    {
        java.util.ArrayList v0 = 0;
        try {
            android.database.Cursor v2 = p6.rawQuery("select * from devices limit 1", 0);
        } catch (Exception v3) {
            android.util.Log.v("devices", v3.getMessage(), v3);
            v3.printStackTrace();
            if (v2 == null) {
                return v0;
            } else {
                v2.close();
                return v0;
            }
        } catch (String v4_0) {
            if (v2 != null) {
                v2.close();
            }
            throw v4_0;
        }
        if (v2 != null) {
            v0 = new java.util.ArrayList(java.util.Arrays.asList(v2.getColumnNames()));
        }
        if (v2 == null) {
            return v0;
        } else {
            v2.close();
            return v0;
        }
    }

    public static String join(java.util.List p4)
    {
        StringBuilder v0_1 = new StringBuilder();
        int v2 = p4.size();
        int v1 = 0;
        while (v1 < v2) {
            if (v1 != 0) {
                v0_1.append(",");
            }
            v0_1.append(((String) p4.get(v1)));
            v1++;
        }
        return v0_1.toString();
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase p2)
    {
        p2.execSQL("CREATE TABLE devices(desc1 TEXT, desc2 TEXT, mac TEXT PRIMARY KEY, maxv INTEGER, setv INTEGER DEFAULT 1, getl INTEGER DEFAULT 1, pname TEXT, bdevice TEXT, wifi INTEGER DEFAULT 0, appaction TEXT, appdata TEXT, apptype TEXT, apprestart INTEGER DEFAULT 0, tts INTEGER DEFAULT 0, setpv INTEGER DEFAULT 0, phonev INTEGER DEFAULT 10, appkill INTEGER DEFAULT 1, enablegps INTEGER DEFAULT 0, icon INTEGER, smsdelay DEFAULT 3, smsstream DEFAULT 1, voldelay DEFAULT 5, volramp DEFAULT 0, autovol DEFAULT 0, silent DEFAULT 0, sleep DEFAULT 0, carmode DEFAULT 0)");
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase p9, int p10, int p11)
    {
        android.widget.Toast.makeText(a2dp.Vol.DeviceDB.access$000(), "Upgrading database....", 1).show();
        if (((p11 >= 4) || (p10 >= 4)) && ((p10 <= 13) && (p11 <= 13))) {
            if (p11 >= 5) {
                try {
                    java.util.List v1 = a2dp.Vol.DeviceDB$OpenHelper.GetColumns(p9);
                    p9.execSQL("ALTER table devices RENAME TO \'temp_devices\'");
                    this.onCreate(p9);
                    v1.retainAll(a2dp.Vol.DeviceDB$OpenHelper.GetColumns(p9));
                    String v0 = a2dp.Vol.DeviceDB$OpenHelper.join(v1);
                    String v4_1 = new Object[4];
                    v4_1[0] = "devices";
                    v4_1[1] = v0;
                    v4_1[2] = v0;
                    v4_1[3] = "devices";
                    p9.execSQL(String.format("INSERT INTO %s (%s) SELECT %s from temp_%s", v4_1));
                    p9.execSQL("DROP table \'temp_devices\'");
                    android.widget.Toast.makeText(a2dp.Vol.DeviceDB.access$000(), "Database upgraded succesfully", 1).show();
                } catch (android.database.SQLException v2) {
                    v2.printStackTrace();
                    p9.execSQL("DROP TABLE IF EXISTS devices");
                    android.widget.Toast.makeText(a2dp.Vol.DeviceDB.access$000(), "Upgrade failed, replaced database", 1).show();
                    this.onCreate(p9);
                }
            }
        } else {
            p9.execSQL("DROP TABLE IF EXISTS devices");
            this.onCreate(p9);
            android.widget.Toast.makeText(a2dp.Vol.DeviceDB.access$000(), "Database replaced", 1).show();
        }
        return;
    }
}
package a2dp.Vol;
public class DeviceDB {
    private static final String DATABASE_NAME = "btdevices.db";
    private static final int DATABASE_VERSION = 13;
    private static final String INSERT = "insert into devices(desc1, desc2, mac, maxv, setv, getl, pname, bdevice, wifi, appaction, appdata, apptype, apprestart, tts, setpv, phonev, appkill, enablegps, icon, smsdelay, smsstream, voldelay, volramp, autovol, silent, sleep, carmode) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private static final String TABLE_NAME = "devices";
    private static android.content.Context context;
    private android.database.sqlite.SQLiteDatabase db;
    private android.database.sqlite.SQLiteStatement insertStmt;

    public DeviceDB(android.content.Context p4)
    {
        a2dp.Vol.DeviceDB.context = p4;
        this.db = new a2dp.Vol.DeviceDB$OpenHelper(a2dp.Vol.DeviceDB.context).getWritableDatabase();
        this.insertStmt = this.db.compileStatement("insert into devices(desc1, desc2, mac, maxv, setv, getl, pname, bdevice, wifi, appaction, appdata, apptype, apprestart, tts, setpv, phonev, appkill, enablegps, icon, smsdelay, smsstream, voldelay, volramp, autovol, silent, sleep, carmode) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        return;
    }

    static synthetic android.content.Context access$000()
    {
        return a2dp.Vol.DeviceDB.context;
    }

    public void delete(a2dp.Vol.btDevice p5)
    {
        this.db.delete("devices", new StringBuilder().append("mac=\'").append(p5.mac).append("\'").toString(), 0);
        return;
    }

    public void deleteAll()
    {
        this.db.delete("devices", 0, 0);
        return;
    }

    public a2dp.Vol.btDevice getBTD(String p13)
    {
        a2dp.Vol.btDevice v9_1 = new a2dp.Vol.btDevice();
        boolean v0_31 = this.db;
        String[] v4_1 = new String[1];
        v4_1[0] = p13;
        android.database.Cursor v10 = v0_31.query("devices", 0, "mac = ?", v4_1, 0, 0, 0, 0);
        try {
            if (v10.moveToFirst()) {
                v9_1.setDesc1(v10.getString(0));
                v9_1.setDesc2(v10.getString(1));
                v9_1.setMac(v10.getString(2));
                v9_1.setDefVol(v10.getInt(3));
                v9_1.setSetV(v10.getInt(4));
                v9_1.setGetLoc(v10.getInt(5));
                v9_1.setPname(v10.getString(6));
                v9_1.setBdevice(v10.getString(7));
                v9_1.setWifi(v10.getInt(8));
                v9_1.setAppaction(v10.getString(9));
                v9_1.setAppdata(v10.getString(10));
                v9_1.setApptype(v10.getString(11));
                v9_1.setApprestart(v10.getInt(12));
                v9_1.setEnableTTS(v10.getInt(13));
                v9_1.setSetpv(v10.getInt(14));
                v9_1.setPhonev(v10.getInt(15));
                v9_1.setAppkill(v10.getInt(16));
                v9_1.setEnablegps(v10.getInt(17));
                v9_1.setIcon(v10.getInt(18));
                v9_1.setSmsdelay(v10.getInt(19));
                v9_1.setSmsstream(v10.getInt(20));
                v9_1.setVoldelay(v10.getInt(21));
                v9_1.setVolramp(v10.getInt(22));
                v9_1.setAutovol(v10.getInt(23));
                v9_1.setSilent(v10.getInt(24));
                v9_1.setSleep(v10.getInt(25));
                v9_1.setCarmode(v10.getInt(26));
            }
        } catch (Exception v11) {
            v9_1.mac = 0;
        }
        if ((v10 != null) && (!v10.isClosed())) {
            v10.close();
        }
        return v9_1;
    }

    public android.database.sqlite.SQLiteDatabase getDb()
    {
        return this.db;
    }

    public int getLength()
    {
        return this.selectAll().size();
    }

    public long insert(a2dp.Vol.btDevice p11)
    {
        String v1 = p11.desc1;
        if (v1 == null) {
            v1 = "Unknown Device";
        }
        this.insertStmt.bindString(1, v1);
        String v4 = p11.desc2;
        if (v4 == null) {
            v4 = v1;
        }
        long v2;
        this.insertStmt.bindString(2, v4);
        if (p11.mac != null) {
            this.insertStmt.bindString(3, p11.mac);
            this.insertStmt.bindLong(4, ((long) p11.getDefVol()));
            this.insertStmt.bindLong(5, p11.islSetV());
            this.insertStmt.bindLong(6, p11.islGetLoc());
            this.insertStmt.bindString(7, p11.getPname());
            this.insertStmt.bindString(8, p11.getBdevice());
            this.insertStmt.bindLong(9, p11.islWifi());
            this.insertStmt.bindString(10, p11.getAppaction());
            this.insertStmt.bindString(11, p11.getAppdata());
            this.insertStmt.bindString(12, p11.getApptype());
            this.insertStmt.bindLong(13, p11.lApprestart());
            this.insertStmt.bindLong(14, p11.islEnableTTS());
            this.insertStmt.bindLong(15, p11.islSetpv());
            this.insertStmt.bindLong(16, ((long) p11.getPhonev()));
            this.insertStmt.bindLong(17, p11.lAppkill());
            this.insertStmt.bindLong(18, p11.lenablegps());
            this.insertStmt.bindLong(19, ((long) p11.getIcon()));
            this.insertStmt.bindLong(20, ((long) p11.getSmsdelay()));
            this.insertStmt.bindLong(21, ((long) p11.getSmsstream()));
            this.insertStmt.bindLong(22, ((long) p11.getVoldelay()));
            this.insertStmt.bindLong(23, p11.lVolramp());
            this.insertStmt.bindLong(24, p11.lautovol());
            this.insertStmt.bindLong(25, p11.lsilent());
            this.insertStmt.bindLong(26, p11.lsleep());
            this.insertStmt.bindLong(27, p11.lcarmode());
            try {
                v2 = this.insertStmt.executeInsert();
            } catch (Exception v0) {
                v2 = 0;
                v0.printStackTrace();
            }
        } else {
            v2 = -1;
        }
        return v2;
    }

    public java.util.List selectAll()
    {
        java.util.ArrayList v3 = 0;
        java.util.ArrayList v10_1 = new java.util.ArrayList();
        if (this.db.isOpen()) {
            boolean v0_0 = this.db;
            String[] v2 = new String[2];
            v2[0] = "desc1";
            v2[1] = "desc2";
            android.database.Cursor v8 = v0_0.query("devices", v2, 0, 0, 0, 0, "desc2");
            try {
                if (v8.moveToFirst()) {
                    do {
                        String v11 = v8.getString(1);
                        if (v11.length() >= 2) {
                            v10_1.add(v11);
                        } else {
                            v10_1.add(v8.getString(0));
                        }
                    } while(v8.moveToNext());
                }
            } catch (Exception v9) {
                android.widget.Toast.makeText(a2dp.Vol.DeviceDB.context, "Database corrupt, delete and recreate database", 1).show();
                v9.printStackTrace();
            }
            if ((v8 != null) && (!v8.isClosed())) {
                v8.close();
            }
            v3 = v10_1;
        }
        return v3;
    }

    public java.util.Vector selectAlldb()
    {
        java.util.Vector v10_1 = new java.util.Vector();
        boolean v0_52 = this.db;
        String[] v2_0 = new String[27];
        v2_0[0] = "desc1";
        v2_0[1] = "desc2";
        v2_0[2] = "mac";
        v2_0[3] = "maxv";
        v2_0[4] = "setv";
        v2_0[5] = "getl";
        v2_0[6] = "pname";
        v2_0[7] = "bdevice";
        v2_0[8] = "wifi";
        v2_0[9] = "appaction";
        v2_0[10] = "appdata";
        v2_0[11] = "apptype";
        v2_0[12] = "apprestart";
        v2_0[13] = "tts";
        v2_0[14] = "setpv";
        v2_0[15] = "phonev";
        v2_0[16] = "appkill";
        v2_0[17] = "enablegps";
        v2_0[18] = "icon";
        v2_0[19] = "smsdelay";
        v2_0[20] = "smsstream";
        v2_0[21] = "voldelay";
        v2_0[22] = "volramp";
        v2_0[23] = "autovol";
        v2_0[24] = "silent";
        v2_0[25] = "sleep";
        v2_0[26] = "carmode";
        android.database.Cursor v9 = v0_52.query("devices", v2_0, 0, 0, 0, 0, "desc2");
        if (v9.moveToFirst()) {
            do {
                a2dp.Vol.btDevice v8_1 = new a2dp.Vol.btDevice();
                v8_1.setDesc1(v9.getString(0));
                v8_1.setDesc2(v9.getString(1));
                v8_1.setMac(v9.getString(2));
                v8_1.setSetV(v9.getInt(4));
                v8_1.setDefVol(v9.getInt(3));
                v8_1.setGetLoc(v9.getInt(5));
                v8_1.setPname(v9.getString(6));
                v8_1.setBdevice(v9.getString(7));
                v8_1.setWifi(v9.getInt(8));
                v8_1.setAppaction(v9.getString(9));
                v8_1.setAppdata(v9.getString(10));
                v8_1.setApptype(v9.getString(11));
                v8_1.setApprestart(v9.getInt(12));
                v8_1.setEnableTTS(v9.getInt(13));
                v8_1.setSetpv(v9.getInt(14));
                v8_1.setPhonev(v9.getInt(15));
                v8_1.setAppkill(v9.getInt(16));
                v8_1.setEnablegps(v9.getInt(17));
                v8_1.setIcon(v9.getInt(18));
                v8_1.setSmsdelay(v9.getInt(19));
                v8_1.setSmsstream(v9.getInt(20));
                v8_1.setVoldelay(v9.getInt(21));
                v8_1.setVolramp(v9.getInt(22));
                v8_1.setAutovol(v9.getInt(23));
                v8_1.setSilent(v9.getInt(24));
                v8_1.setSleep(v9.getInt(25));
                v8_1.setCarmode(v9.getInt(26));
                v10_1.add(v8_1);
            } while(v9.moveToNext());
        }
        if ((v9 != null) && (!v9.isClosed())) {
            v9.close();
        }
        return v10_1;
    }

    public void update(a2dp.Vol.btDevice p6)
    {
        int v0_1 = new android.content.ContentValues();
        v0_1.put("desc2", p6.getDesc2());
        v0_1.put("maxv", Long.valueOf(((long) p6.getDefVol())));
        v0_1.put("setv", Long.valueOf(p6.islSetV()));
        v0_1.put("getl", Long.valueOf(p6.islGetLoc()));
        v0_1.put("pname", p6.getPname());
        v0_1.put("bdevice", p6.getBdevice());
        v0_1.put("wifi", Long.valueOf(p6.islWifi()));
        v0_1.put("appaction", p6.getAppaction());
        v0_1.put("appdata", p6.getAppdata());
        v0_1.put("apptype", p6.getApptype());
        v0_1.put("apprestart", Long.valueOf(p6.lApprestart()));
        v0_1.put("tts", Long.valueOf(p6.islEnableTTS()));
        v0_1.put("setpv", Long.valueOf(p6.islSetpv()));
        v0_1.put("phonev", Long.valueOf(((long) p6.getPhonev())));
        v0_1.put("appkill", Long.valueOf(p6.lAppkill()));
        v0_1.put("enablegps", Long.valueOf(p6.lenablegps()));
        v0_1.put("icon", Long.valueOf(((long) p6.getIcon())));
        v0_1.put("smsdelay", Long.valueOf(((long) p6.getSmsdelay())));
        v0_1.put("smsstream", Long.valueOf(((long) p6.getSmsstream())));
        v0_1.put("voldelay", Long.valueOf(((long) p6.getVoldelay())));
        v0_1.put("volramp", Long.valueOf(p6.lVolramp()));
        v0_1.put("autovol", Long.valueOf(p6.lautovol()));
        v0_1.put("silent", Long.valueOf(p6.lsilent()));
        v0_1.put("sleep", Boolean.valueOf(p6.isSleep()));
        v0_1.put("carmode", Boolean.valueOf(p6.isCarmode()));
        this.db.update("devices", v0_1, new StringBuilder().append("mac=\'").append(p6.mac).append("\'").toString(), 0);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$10 implements android.widget.SeekBar$OnSeekBarChangeListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$10(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onProgressChanged(android.widget.SeekBar p4, int p5, boolean p6)
    {
        a2dp.Vol.EditDevice.access$1200(this.this$0).setText(new StringBuilder().append(p5).append("s").toString());
        return;
    }

    public void onStartTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }

    public void onStopTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }
}
package a2dp.Vol;
 class EditDevice$11 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$11(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p5, int p6)
    {
        switch (p6) {
            case 0:
                this.this$0.startActivityForResult(new android.content.Intent(this.this$0.getBaseContext(), a2dp.Vol.AppChooser), 2);
                break;
            case 1:
                android.content.Intent v0_7 = new android.content.Intent("android.intent.action.PICK_ACTIVITY");
                v0_7.putExtra("android.intent.extra.INTENT", new android.content.Intent("android.intent.action.CREATE_SHORTCUT"));
                v0_7.putExtra("android.intent.extra.TITLE", "Create a Shortcut");
                this.this$0.startActivityForResult(v0_7, 14);
                break;
            case 2:
                android.content.Intent v0_5 = new android.content.Intent(this.this$0.getBaseContext(), a2dp.Vol.ProviderList);
                v0_5.putExtra(a2dp.Vol.ProviderList.EXTRA_PROVIDER, a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN);
                this.this$0.startActivityForResult(v0_5, 11);
                break;
            case 3:
                android.content.Intent v0_3 = new android.content.Intent(this.this$0.getBaseContext(), a2dp.Vol.ProviderList);
                v0_3.putExtra(a2dp.Vol.ProviderList.EXTRA_PROVIDER, a2dp.Vol.ProviderList.PROVIDER_PANDORA);
                this.this$0.startActivityForResult(v0_3, 11);
                break;
            case 4:
                android.content.Intent v0_1 = new android.content.Intent(this.this$0.getBaseContext(), a2dp.Vol.CustomIntentMaker);
                v0_1.putExtra("alarm_custom_action", a2dp.Vol.EditDevice.access$1300(this.this$0));
                v0_1.putExtra("alarm_custom_data", a2dp.Vol.EditDevice.access$1400(this.this$0));
                v0_1.putExtra("alarm_custom_type", a2dp.Vol.EditDevice.access$1500(this.this$0));
                v0_1.putExtra("alarm_package_name", a2dp.Vol.EditDevice.access$1600(this.this$0));
                this.this$0.startActivityForResult(v0_1, 6);
                break;
            case 5:
                a2dp.Vol.EditDevice.access$1602(this.this$0, "");
                a2dp.Vol.EditDevice.access$1302(this.this$0, "");
                a2dp.Vol.EditDevice.access$1402(this.this$0, "");
                a2dp.Vol.EditDevice.access$1502(this.this$0, "");
                a2dp.Vol.EditDevice.access$1700(this.this$0);
                break;
        }
        return;
    }
}
package a2dp.Vol;
 class EditDevice$12 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$12(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        this.this$0.startActivityForResult(new android.content.Intent(this.this$0.getBaseContext(), a2dp.Vol.AppChooser), 17);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$13 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$13(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package a2dp.Vol;
 class EditDevice$1 implements android.widget.CompoundButton$OnCheckedChangeListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$1(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton p2, boolean p3)
    {
        a2dp.Vol.EditDevice.access$000(this.this$0);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$2 implements android.widget.CompoundButton$OnCheckedChangeListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$2(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton p2, boolean p3)
    {
        a2dp.Vol.EditDevice.access$100(this.this$0);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$3 implements android.widget.CompoundButton$OnCheckedChangeListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$3(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton p2, boolean p3)
    {
        a2dp.Vol.EditDevice.access$200(this.this$0);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$4 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$4(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        a2dp.Vol.EditDevice.access$300(this.this$0);
        a2dp.Vol.EditDevice.access$400(this.this$0);
        this.this$0.finish();
        return;
    }
}
package a2dp.Vol;
 class EditDevice$5 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$5(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        a2dp.Vol.EditDevice.access$400(this.this$0);
        this.this$0.finish();
        return;
    }
}
package a2dp.Vol;
 class EditDevice$6$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.EditDevice$6 this$1;
    final synthetic String[] val$ls2;

    EditDevice$6$1(a2dp.Vol.EditDevice$6 p1, String[] p2)
    {
        this.this$1 = p1;
        this.val$ls2 = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        a2dp.Vol.EditDevice.access$500(this.this$1.this$0).setText(this.val$ls2[p4]);
        return;
    }
}
package a2dp.Vol;
 class EditDevice$6 implements android.view.View$OnLongClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$6(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onLongClick(android.view.View p13)
    {
        android.content.pm.PackageManager v9 = this.this$0.getPackageManager();
        java.util.List v8 = v9.getInstalledApplications(0);
        String[] v6 = new String[v8.size()];
        int v2 = 0;
        int v7 = 0;
        while (v7 < v8.size()) {
            android.content.Intent v3 = v9.getLaunchIntentForPackage(((android.content.pm.ApplicationInfo) v8.get(v7)).packageName);
            if ((((android.content.pm.ApplicationInfo) v8.get(v7)).icon > 0) && ((((android.content.pm.ApplicationInfo) v8.get(v7)).enabled) && (v3 != null))) {
                v6[v2] = ((android.content.pm.ApplicationInfo) v8.get(v7)).packageName;
                v2++;
            }
            v7++;
        }
        String[] v5 = new String[v2];
        int v4 = 0;
        while (v4 < v2) {
            v5[v4] = v6[v4];
            v4++;
        }
        java.util.Arrays.sort(v5);
        android.app.AlertDialog$Builder v1_1 = new android.app.AlertDialog$Builder(this.this$0);
        v1_1.setTitle("Pick a package");
        v1_1.setItems(v5, new a2dp.Vol.EditDevice$6$1(this, v5));
        v1_1.create().show();
        return 0;
    }
}
package a2dp.Vol;
 class EditDevice$7 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$7(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p4)
    {
        android.app.AlertDialog$Builder v0_1 = new android.app.AlertDialog$Builder(this.this$0);
        v0_1.setTitle(2131165287);
        v0_1.setItems(a2dp.Vol.EditDevice.access$600(), a2dp.Vol.EditDevice.access$700(this.this$0));
        v0_1.create();
        v0_1.show();
        return;
    }
}
package a2dp.Vol;
 class EditDevice$8$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.EditDevice$8 this$1;
    final synthetic java.util.Vector val$vec;

    EditDevice$8$1(a2dp.Vol.EditDevice$8 p1, java.util.Vector p2)
    {
        this.this$1 = p1;
        this.val$vec = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        if (p4 >= this.val$vec.size()) {
            a2dp.Vol.EditDevice.access$1000(this.this$1.this$0).setText("");
        } else {
            a2dp.Vol.EditDevice.access$1000(this.this$1.this$0).setText(((a2dp.Vol.btDevice) this.val$vec.get(p4)).mac);
        }
        return;
    }
}
package a2dp.Vol;
 class EditDevice$8 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$8(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p10)
    {
        if ((!a2dp.Vol.EditDevice.access$800(this.this$0).getDb().isOpen()) && (!a2dp.Vol.EditDevice.access$800(this.this$0).getDb().isDbLockedByCurrentThread())) {
            a2dp.Vol.EditDevice.access$802(this.this$0, new a2dp.Vol.DeviceDB(a2dp.Vol.EditDevice.access$900(this.this$0)));
        }
        java.util.Vector v5 = a2dp.Vol.EditDevice.access$800(this.this$0).selectAlldb();
        int v3 = v5.size();
        int v2_0 = 0;
        while (v2_0 < v3) {
            if (((a2dp.Vol.btDevice) v5.get(v2_0)).mac.length() < 17) {
                v5.remove(v2_0);
                v3--;
                v2_0--;
            }
            v2_0++;
        }
        v5.trimToSize();
        String[] v4 = new String[(v5.size() + 1)];
        int v2_1 = 0;
        while (v2_1 < v5.size()) {
            v4[v2_1] = ((a2dp.Vol.btDevice) v5.get(v2_1)).desc2;
            v2_1++;
        }
        v4[v5.size()] = "none";
        android.app.AlertDialog$Builder v1_1 = new android.app.AlertDialog$Builder(this.this$0);
        v1_1.setTitle("Bluetooth Device");
        v1_1.setItems(v4, new a2dp.Vol.EditDevice$8$1(this, v5));
        v1_1.create().show();
        return;
    }
}
package a2dp.Vol;
 class EditDevice$9 implements android.widget.SeekBar$OnSeekBarChangeListener {
    final synthetic a2dp.Vol.EditDevice this$0;

    EditDevice$9(a2dp.Vol.EditDevice p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onProgressChanged(android.widget.SeekBar p4, int p5, boolean p6)
    {
        a2dp.Vol.EditDevice.access$1100(this.this$0).setText(new StringBuilder().append(p5).append("s").toString());
        return;
    }

    public void onStartTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }

    public void onStopTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }
}
package a2dp.Vol;
public class EditDevice extends android.app.Activity {
    private static final int ACTION_ADD_PACKAGE = 17;
    private static final int ACTION_CHOOSE_APP = 2;
    private static final int ACTION_CHOOSE_APP_CUSTOM = 16;
    private static final int ACTION_CHOOSE_FROM_PROVIDER = 11;
    private static final int ACTION_CREATE_HOME_SCREEN_SHORTCUT = 14;
    private static final int ACTION_CUSTOM_INTENT = 6;
    private static final int ALARM_STREAM = 2;
    private static final String[] APP_TYPE_OPTIONS = None;
    private static final int DIALOG_BITLY = 6;
    private static final int DIALOG_PICK_APP_TYPE = 3;
    private static final int DIALOG_WARN_STOP_APP = 5;
    private static final int FETCH_HOME_SCREEN_SHORTCUT = 15;
    private static final int IN_CALL_STREAM = 1;
    private static final int MUSIC_STREAM;
    private boolean TTsEnabled;
    private String appaction;
    private String appdata;
    private boolean appkill;
    private a2dp.Vol.MyApplication application;
    private boolean apprestart;
    private String apptype;
    public String btd;
    private android.widget.Button cb;
    private android.widget.Button connbt;
    private a2dp.Vol.btDevice device;
    private boolean enablegps;
    private android.widget.EditText fapp;
    private android.widget.CheckBox fappkill;
    private android.widget.CheckBox fapprestart;
    private android.widget.CheckBox fautoVol;
    private android.widget.EditText fbt;
    private android.widget.CheckBox fcarmodeBox;
    private android.widget.EditText fdesc2;
    private android.widget.CheckBox fenableGPS;
    private android.widget.CheckBox fenableTTS;
    private android.widget.CheckBox fgloc;
    private android.widget.SeekBar fphonev;
    private android.widget.CheckBox frampVol;
    private android.widget.CheckBox fsetpv;
    private android.widget.CheckBox fsetvol;
    private android.widget.CheckBox fsilent;
    private android.widget.CheckBox fsleepBox;
    private android.widget.SeekBar fsmsdelaybar;
    private android.widget.TextView fsmsdelaybox;
    private android.widget.SeekBar fvol;
    private android.widget.SeekBar fvoldelaybar;
    private android.widget.TextView fvoldelaybox;
    private android.widget.CheckBox fwifi;
    private android.widget.RadioGroup icongroup;
    private android.widget.RadioButton iconradio0;
    private android.widget.RadioButton iconradio1;
    private android.widget.RadioButton iconradio2;
    private android.widget.RadioButton iconradio3;
    private android.widget.RadioButton iconradio4;
    private android.widget.LinearLayout l1;
    private android.widget.LinearLayout l2;
    private android.content.DialogInterface$OnClickListener mAppTypeDialogOnClick;
    private android.widget.TextView mediadelay;
    private a2dp.Vol.DeviceDB myDB;
    private String pname;
    android.content.SharedPreferences preferences;
    private android.widget.Button sb;
    android.widget.SeekBar$OnSeekBarChangeListener smsdelaySeekBarProgress;
    private android.widget.Button startapp;
    private android.widget.RadioGroup streamgroup;
    private android.widget.RadioButton streamradio0;
    private android.widget.RadioButton streamradio1;
    private android.widget.RadioButton streamradio2;
    private android.widget.TextView ttsdelay;
    private android.widget.TextView tv2;
    private android.widget.TextView tvincallVol;
    private android.widget.TextView tvmediavol;
    private android.widget.TextView tvstream;
    android.widget.SeekBar$OnSeekBarChangeListener voldelaySeekBarProgress;

    static EditDevice()
    {
        String[] v0_1 = new String[6];
        v0_1[0] = "Choose App";
        v0_1[1] = "Create Shortcut";
        v0_1[2] = "Home Screen Shortcut";
        v0_1[3] = "Pandora Radio Station";
        v0_1[4] = "Custom Intent";
        v0_1[5] = "Clear App Selection";
        a2dp.Vol.EditDevice.APP_TYPE_OPTIONS = v0_1;
        return;
    }

    public EditDevice()
    {
        this.smsdelaySeekBarProgress = new a2dp.Vol.EditDevice$9(this);
        this.voldelaySeekBarProgress = new a2dp.Vol.EditDevice$10(this);
        this.mAppTypeDialogOnClick = new a2dp.Vol.EditDevice$11(this);
        return;
    }

    private void Save()
    {
        if (this.fdesc2.length() >= 1) {
            this.device.setDesc2(this.fdesc2.getText().toString());
        } else {
            this.device.setDesc2(this.device.desc1);
        }
        this.device.setSetV(this.fsetvol.isChecked());
        this.device.setDefVol(this.fvol.getProgress());
        this.device.setGetLoc(this.fgloc.isChecked());
        this.device.setPname(this.pname);
        this.device.setBdevice(this.fbt.getText().toString());
        this.device.setWifi(this.fwifi.isChecked());
        this.device.setAppaction(this.appaction);
        this.device.setAppdata(this.appdata);
        this.device.setApptype(this.apptype);
        this.apprestart = this.fapprestart.isChecked();
        this.device.setApprestart(this.apprestart);
        this.appkill = this.fappkill.isChecked();
        this.device.setAppkill(this.appkill);
        this.enablegps = this.fenableTTS.isChecked();
        this.device.setEnableTTS(this.enablegps);
        this.device.setSetpv(this.fsetpv.isChecked());
        this.device.setPhonev(this.fphonev.getProgress());
        this.device.setSmsdelay(this.fsmsdelaybar.getProgress());
        this.device.setVoldelay(this.fvoldelaybar.getProgress());
        this.device.setVolramp(this.frampVol.isChecked());
        this.device.setAutovol(this.fautoVol.isChecked());
        this.device.setSilent(this.fsilent.isChecked());
        this.device.setSleep(this.fsleepBox.isChecked());
        this.device.setCarmode(this.fcarmodeBox.isChecked());
        switch (this.icongroup.getCheckedRadioButtonId()) {
            case 2131361845:
                this.device.setIcon(2130837504);
                break;
            case 2131361846:
                this.device.setIcon(2130837505);
                break;
            case 2131361847:
                this.device.setIcon(2130837508);
                break;
            case 2131361848:
                this.device.setIcon(2130837509);
                break;
            case 2131361849:
                this.device.setIcon(2130837507);
                break;
        }
        switch (this.streamgroup.getCheckedRadioButtonId()) {
            case 2131361820:
                this.device.setSmsstream(0);
                break;
            case 2131361821:
                this.device.setSmsstream(1);
                break;
            case 2131361822:
                this.device.setSmsstream(2);
                break;
            default:
                if (this.TTsEnabled) {
                    this.sb.setText("Saving");
                    try {
                        this.myDB.update(this.device);
                        android.content.Intent v3_1 = new android.content.Intent();
                        v3_1.setAction("a2dp.Vol.main.RELOAD_LIST");
                        v3_1.putExtra("device", "");
                        this.application.sendBroadcast(v3_1);
                    } catch (Exception v1) {
                        v1.printStackTrace();
                    }
                    return;
                } else {
                    if (!this.fenableTTS.isChecked()) {
                    } else {
                        android.content.SharedPreferences$Editor v2 = this.preferences.edit();
                        v2.putBoolean("enableTTS", 1);
                        v2.commit();
                    }
                }
        }
        if ((!this.TTsEnabled) && (this.fenableTTS.isChecked())) {
        }
    }

    static synthetic void access$000(a2dp.Vol.EditDevice p0)
    {
        p0.setTTSVisibility();
        return;
    }

    static synthetic void access$100(a2dp.Vol.EditDevice p0)
    {
        p0.setMediaVisibility();
        return;
    }

    static synthetic android.widget.EditText access$1000(a2dp.Vol.EditDevice p1)
    {
        return p1.fbt;
    }

    static synthetic android.widget.TextView access$1100(a2dp.Vol.EditDevice p1)
    {
        return p1.fsmsdelaybox;
    }

    static synthetic android.widget.TextView access$1200(a2dp.Vol.EditDevice p1)
    {
        return p1.fvoldelaybox;
    }

    static synthetic String access$1300(a2dp.Vol.EditDevice p1)
    {
        return p1.appaction;
    }

    static synthetic String access$1302(a2dp.Vol.EditDevice p0, String p1)
    {
        p0.appaction = p1;
        return p1;
    }

    static synthetic String access$1400(a2dp.Vol.EditDevice p1)
    {
        return p1.appdata;
    }

    static synthetic String access$1402(a2dp.Vol.EditDevice p0, String p1)
    {
        p0.appdata = p1;
        return p1;
    }

    static synthetic String access$1500(a2dp.Vol.EditDevice p1)
    {
        return p1.apptype;
    }

    static synthetic String access$1502(a2dp.Vol.EditDevice p0, String p1)
    {
        p0.apptype = p1;
        return p1;
    }

    static synthetic String access$1600(a2dp.Vol.EditDevice p1)
    {
        return p1.pname;
    }

    static synthetic String access$1602(a2dp.Vol.EditDevice p0, String p1)
    {
        p0.pname = p1;
        return p1;
    }

    static synthetic void access$1700(a2dp.Vol.EditDevice p0)
    {
        p0.vUpdateApp();
        return;
    }

    static synthetic void access$200(a2dp.Vol.EditDevice p0)
    {
        p0.setInCallVisibility();
        return;
    }

    static synthetic void access$300(a2dp.Vol.EditDevice p0)
    {
        p0.Save();
        return;
    }

    static synthetic void access$400(a2dp.Vol.EditDevice p0)
    {
        p0.closedb();
        return;
    }

    static synthetic android.widget.EditText access$500(a2dp.Vol.EditDevice p1)
    {
        return p1.fapp;
    }

    static synthetic String[] access$600()
    {
        return a2dp.Vol.EditDevice.APP_TYPE_OPTIONS;
    }

    static synthetic android.content.DialogInterface$OnClickListener access$700(a2dp.Vol.EditDevice p1)
    {
        return p1.mAppTypeDialogOnClick;
    }

    static synthetic a2dp.Vol.DeviceDB access$800(a2dp.Vol.EditDevice p1)
    {
        return p1.myDB;
    }

    static synthetic a2dp.Vol.DeviceDB access$802(a2dp.Vol.EditDevice p0, a2dp.Vol.DeviceDB p1)
    {
        p0.myDB = p1;
        return p1;
    }

    static synthetic a2dp.Vol.MyApplication access$900(a2dp.Vol.EditDevice p1)
    {
        return p1.application;
    }

    private void closedb()
    {
        this.myDB.getDb().close();
        return;
    }

    public static String getIntentUri(android.content.Intent p8)
    {
        try {
            Integer v5_5 = new Class[1];
            v5_5[0] = Integer.TYPE;
            reflect.Method v1 = android.content.Intent.getMethod("toUri", v5_5);
            Object[] v3_2 = new Object[1];
            v3_2[0] = Integer.valueOf(android.content.Intent.getField("URI_INTENT_SCHEME").getInt(0));
            String v2_1 = ((String) v1.invoke(p8, v3_2));
        } catch (Exception v0) {
            v2_1 = p8.toURI();
        }
        return v2_1;
    }

    private void processShortcut(android.content.Intent p5)
    {
        android.content.Intent v1_1 = ((android.content.Intent) p5.getParcelableExtra("android.intent.extra.shortcut.INTENT"));
        this.appdata = a2dp.Vol.EditDevice.getIntentUri(v1_1);
        if (!p5.hasExtra(a2dp.Vol.ProviderList.EXTRA_PACKAGE_NAME)) {
            try {
                this.pname = v1_1.getComponent().getPackageName();
            } catch (Exception v0) {
                this.pname = "";
                v0.printStackTrace();
            }
        } else {
            this.pname = p5.getStringExtra(a2dp.Vol.ProviderList.EXTRA_PACKAGE_NAME);
        }
        if (this.pname.length() < 3) {
            this.pname = "custom";
        }
        this.appaction = p5.getStringExtra("android.intent.extra.shortcut.NAME");
        this.apptype = "";
        this.vUpdateApp();
        return;
    }

    private void setAppVisibility()
    {
        if (this.fapp.getText().length() <= 0) {
            this.fapp.setVisibility(8);
            this.fapprestart.setVisibility(8);
            this.fappkill.setVisibility(8);
            this.fsleepBox.setVisibility(8);
        } else {
            this.fapp.setVisibility(0);
            this.fapprestart.setVisibility(0);
            this.fappkill.setVisibility(0);
            this.fsleepBox.setVisibility(8);
        }
        return;
    }

    private void setInCallVisibility()
    {
        if (!this.fsetpv.isChecked()) {
            this.tvincallVol.setVisibility(8);
            this.fphonev.setVisibility(8);
        } else {
            this.tvincallVol.setVisibility(0);
            this.fphonev.setVisibility(0);
        }
        return;
    }

    private void setMediaVisibility()
    {
        if (!this.fsetvol.isChecked()) {
            this.tvmediavol.setVisibility(8);
            this.fvol.setVisibility(8);
            this.fautoVol.setVisibility(8);
            this.frampVol.setVisibility(8);
            this.l2.setVisibility(8);
            this.mediadelay.setVisibility(8);
        } else {
            this.tvmediavol.setVisibility(0);
            this.fvol.setVisibility(0);
            this.fautoVol.setVisibility(0);
            this.frampVol.setVisibility(0);
            this.l2.setVisibility(0);
            this.mediadelay.setVisibility(0);
        }
        return;
    }

    private void setTTSVisibility()
    {
        if (!this.fenableTTS.isChecked()) {
            this.l1.setVisibility(8);
            this.ttsdelay.setVisibility(8);
            this.tvstream.setVisibility(8);
            this.streamgroup.setVisibility(8);
        } else {
            this.l1.setVisibility(0);
            this.ttsdelay.setVisibility(0);
            this.tvstream.setVisibility(0);
            this.streamgroup.setVisibility(0);
        }
        return;
    }

    private void vUpdateApp()
    {
        this.device.setAppaction(this.appaction);
        this.device.setAppdata(this.appdata);
        this.device.setApptype(this.apptype);
        this.device.setPname(this.pname);
        if (!this.device.hasIntent()) {
            this.fapp.setText("");
        } else {
            if ((this.pname == null) || (this.pname.length() <= 3)) {
                if (this.appdata == null) {
                    if (this.appaction == null) {
                        this.fapp.setText("Custom");
                    } else {
                        this.fapp.setText(this.appaction);
                    }
                } else {
                    this.fapp.setText(this.appdata);
                }
            } else {
                this.fapp.setText(this.pname);
            }
        }
        this.setAppVisibility();
        return;
    }

    protected void onActivityResult(int p4, int p5, android.content.Intent p6)
    {
        if (p5 == -1) {
            switch (p4) {
                case 2:
                    this.pname = p6.getStringExtra("package_name");
                    this.appaction = "";
                    this.apptype = "";
                    this.appdata = "";
                    this.vUpdateApp();
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                default:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 6:
                    this.pname = "";
                    this.appaction = p6.getStringExtra("alarm_custom_action");
                    this.appdata = p6.getStringExtra("alarm_custom_data");
                    this.apptype = p6.getStringExtra("alarm_custom_type");
                    if (this.appdata.length() > 3) {
                        try {
                            this.pname = android.content.Intent.getIntent(this.pname).getComponent().getPackageName();
                        } catch (java.net.URISyntaxException v0) {
                            this.pname = "custom";
                            v0.printStackTrace();
                        }
                    }
                    if (this.pname.equals("")) {
                        this.pname = "custom";
                    }
                    this.vUpdateApp();
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 11:
                    this.processShortcut(p6);
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                    break;
                case 14:
                    this.startActivityForResult(p6, 15);
                    break;
                case 15:
                    this.processShortcut(p6);
                    if ((this.pname.length() < 3) || (this.pname.equalsIgnoreCase("Custom"))) {
                        this.showDialog(5);
                    }
                    break;
                case 16:
                    this.pname = p6.getStringExtra("package_name");
                    this.vUpdateApp();
                    break;
                case 17:
                    this.pname = p6.getStringExtra("package_name");
                    this.vUpdateApp();
                    break;
            }
        }
        super.onActivityResult(p4, p5, p6);
        return;
    }

    public void onBackPressed()
    {
        this.Save();
        this.closedb();
        this.finish();
        super.onBackPressed();
        return;
    }

    protected void onCreate(android.os.Bundle p7)
    {
        super.onCreate(p7);
        this.setContentView(2130968580);
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.myDB = new a2dp.Vol.DeviceDB(this.application);
        android.media.AudioManager v0_1 = ((android.media.AudioManager) this.getSystemService("audio"));
        this.sb = ((android.widget.Button) this.findViewById(2131361852));
        this.cb = ((android.widget.Button) this.findViewById(2131361851));
        this.startapp = ((android.widget.Button) this.findViewById(2131361835));
        this.connbt = ((android.widget.Button) this.findViewById(2131361841));
        this.fdesc2 = ((android.widget.EditText) this.findViewById(2131361809));
        this.fgloc = ((android.widget.CheckBox) this.findViewById(2131361810));
        this.fsetvol = ((android.widget.CheckBox) this.findViewById(2131361823));
        this.fvol = ((android.widget.SeekBar) this.findViewById(2131361825));
        this.fapp = ((android.widget.EditText) this.findViewById(2131361836));
        this.fapprestart = ((android.widget.CheckBox) this.findViewById(2131361837));
        this.fappkill = ((android.widget.CheckBox) this.findViewById(2131361838));
        this.fbt = ((android.widget.EditText) this.findViewById(2131361842));
        this.fwifi = ((android.widget.CheckBox) this.findViewById(2131361811));
        this.fenableTTS = ((android.widget.CheckBox) this.findViewById(2131361813));
        this.fsetpv = ((android.widget.CheckBox) this.findViewById(2131361832));
        this.fsilent = ((android.widget.CheckBox) this.findViewById(2131361812));
        this.fphonev = ((android.widget.SeekBar) this.findViewById(2131361834));
        this.fsmsdelaybar = ((android.widget.SeekBar) this.findViewById(2131361817));
        this.fsmsdelaybox = ((android.widget.TextView) this.findViewById(2131361816));
        this.fvoldelaybar = ((android.widget.SeekBar) this.findViewById(2131361831));
        this.fvoldelaybox = ((android.widget.TextView) this.findViewById(2131361830));
        this.tv2 = ((android.widget.TextView) this.findViewById(2131361808));
        this.frampVol = ((android.widget.CheckBox) this.findViewById(2131361827));
        this.fautoVol = ((android.widget.CheckBox) this.findViewById(2131361826));
        this.icongroup = ((android.widget.RadioGroup) this.findViewById(2131361844));
        this.iconradio0 = ((android.widget.RadioButton) this.findViewById(2131361845));
        this.iconradio1 = ((android.widget.RadioButton) this.findViewById(2131361846));
        this.iconradio2 = ((android.widget.RadioButton) this.findViewById(2131361847));
        this.iconradio3 = ((android.widget.RadioButton) this.findViewById(2131361848));
        this.iconradio4 = ((android.widget.RadioButton) this.findViewById(2131361849));
        this.streamgroup = ((android.widget.RadioGroup) this.findViewById(2131361819));
        this.streamradio0 = ((android.widget.RadioButton) this.findViewById(2131361820));
        this.streamradio1 = ((android.widget.RadioButton) this.findViewById(2131361821));
        this.streamradio2 = ((android.widget.RadioButton) this.findViewById(2131361822));
        this.l1 = ((android.widget.LinearLayout) this.findViewById(2131361815));
        this.l2 = ((android.widget.LinearLayout) this.findViewById(2131361829));
        this.ttsdelay = ((android.widget.TextView) this.findViewById(2131361814));
        this.mediadelay = ((android.widget.TextView) this.findViewById(2131361828));
        this.tvstream = ((android.widget.TextView) this.findViewById(2131361818));
        this.tvmediavol = ((android.widget.TextView) this.findViewById(2131361824));
        this.tvincallVol = ((android.widget.TextView) this.findViewById(2131361833));
        this.fsleepBox = ((android.widget.CheckBox) this.findViewById(2131361839));
        this.fcarmodeBox = ((android.widget.CheckBox) this.findViewById(2131361840));
        this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(this.application);
        this.TTsEnabled = this.preferences.getBoolean("enableTTS", 0);
        this.btd = this.getIntent().getStringExtra("btd");
        this.device = this.myDB.getBTD(this.btd);
        this.fdesc2.setText(this.device.desc2);
        this.fgloc.setChecked(this.device.isGetLoc());
        this.fsetvol.setChecked(this.device.isSetV());
        this.fvol.setMax(v0_1.getStreamMaxVolume(3));
        this.fvol.setProgress(this.device.defVol);
        this.fapp.setText(this.device.getPname());
        this.fbt.setText(this.device.getBdevice());
        this.fwifi.setChecked(this.device.isWifi());
        if (this.device == null) {
            this.connbt.setEnabled(0);
        }
        this.pname = this.device.getPname();
        this.appaction = this.device.getAppaction();
        this.appdata = this.device.getAppdata();
        this.apptype = this.device.getApptype();
        this.apprestart = this.device.isApprestart();
        this.appkill = this.device.isAppkill();
        this.fapprestart.setChecked(this.apprestart);
        this.fappkill.setChecked(this.appkill);
        this.fenableTTS.setChecked(this.device.isEnableTTS());
        this.fsetpv.setChecked(this.device.isSetpv());
        this.fphonev.setMax(v0_1.getStreamMaxVolume(0));
        this.fphonev.setProgress(this.device.getPhonev());
        this.fsmsdelaybar.setMax(20);
        this.fsmsdelaybar.setOnSeekBarChangeListener(this.smsdelaySeekBarProgress);
        this.fsmsdelaybox.setText(new StringBuilder().append(this.device.smsdelay).append("s").toString());
        this.fsmsdelaybar.setProgress(this.device.getSmsdelay());
        this.fvoldelaybar.setMax(20);
        this.fvoldelaybar.setOnSeekBarChangeListener(this.voldelaySeekBarProgress);
        this.fvoldelaybox.setText(new StringBuilder().append(this.device.voldelay).append("s").toString());
        this.fvoldelaybar.setProgress(this.device.getVoldelay());
        this.frampVol.setChecked(this.device.isVolramp());
        this.fautoVol.setChecked(this.device.isAutovol());
        this.fsilent.setChecked(this.device.isSilent());
        this.fsleepBox.setChecked(this.device.isSleep());
        this.fcarmodeBox.setChecked(this.device.isCarmode());
        switch (this.device.getIcon()) {
            case 2130837504:
                this.iconradio0.setChecked(1);
                break;
            case 2130837505:
                this.iconradio1.setChecked(1);
                break;
            case 2130837506:
            default:
                this.iconradio0.setChecked(1);
                break;
            case 2130837507:
                this.iconradio4.setChecked(1);
                break;
            case 2130837508:
                this.iconradio2.setChecked(1);
                break;
            case 2130837509:
                this.iconradio3.setChecked(1);
                break;
        }
        switch (this.device.getSmsstream()) {
            case 0:
                this.streamradio0.setChecked(1);
                break;
            case 1:
                this.streamradio1.setChecked(1);
                break;
            case 2:
                this.streamradio2.setChecked(1);
                break;
            default:
                this.streamradio0.setChecked(1);
        }
        this.setTTSVisibility();
        this.fenableTTS.setOnCheckedChangeListener(new a2dp.Vol.EditDevice$1(this));
        this.setMediaVisibility();
        this.fsetvol.setOnCheckedChangeListener(new a2dp.Vol.EditDevice$2(this));
        this.setInCallVisibility();
        this.fsetpv.setOnCheckedChangeListener(new a2dp.Vol.EditDevice$3(this));
        this.setAppVisibility();
        this.tv2.requestFocus();
        this.vUpdateApp();
        this.sb.setOnClickListener(new a2dp.Vol.EditDevice$4(this));
        this.cb.setOnClickListener(new a2dp.Vol.EditDevice$5(this));
        this.startapp.setOnLongClickListener(new a2dp.Vol.EditDevice$6(this));
        this.startapp.setOnClickListener(new a2dp.Vol.EditDevice$7(this));
        this.connbt.setOnClickListener(new a2dp.Vol.EditDevice$8(this));
        return;
    }

    protected android.app.Dialog onCreateDialog(int p6)
    {
        android.app.ProgressDialog v2_1;
        switch (p6) {
            case 3:
                android.app.AlertDialog$Builder v0_1 = new android.app.AlertDialog$Builder(this);
                v0_1.setTitle(2131165287);
                v0_1.setItems(a2dp.Vol.EditDevice.APP_TYPE_OPTIONS, this.mAppTypeDialogOnClick);
                v2_1 = v0_1.create();
                break;
            case 4:
            default:
                v2_1 = super.onCreateDialog(p6);
                break;
            case 5:
                android.app.AlertDialog$Builder v1_0 = new android.app.AlertDialog$Builder(this);
                v1_0.setTitle(2131165275);
                v1_0.setMessage(2131165274);
                v1_0.setCancelable(0);
                v1_0.setPositiveButton("Select App", new a2dp.Vol.EditDevice$12(this));
                v1_0.setNegativeButton("Ignore", new a2dp.Vol.EditDevice$13(this));
                v2_1 = v1_0.create();
                break;
            case 6:
                v2_1 = new android.app.ProgressDialog(this);
                v2_1.setIndeterminate(1);
                v2_1.setMessage("Shortenting Url with Bit.ly...");
                v2_1.setCancelable(0);
                break;
        }
        return v2_1;
    }
}
package a2dp.Vol;
public class FileNameCleaner {
    static final int[] illegalChars;

    static FileNameCleaner()
    {
        int[] v0_1 = new int[41];
        v0_1 = {34, 60, 62, 124, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 58, 42, 63, 92, 47};
        a2dp.Vol.FileNameCleaner.illegalChars = v0_1;
        java.util.Arrays.sort(a2dp.Vol.FileNameCleaner.illegalChars);
        return;
    }

    public FileNameCleaner()
    {
        return;
    }

    public static String cleanFileName(String p4)
    {
        char v3_3;
        StringBuilder v1_1 = new StringBuilder();
        if (p4 != null) {
            int v2 = 0;
            while (v2 < p4.length()) {
                char v0 = p4.charAt(v2);
                if (java.util.Arrays.binarySearch(a2dp.Vol.FileNameCleaner.illegalChars, v0) < 0) {
                    v1_1.append(((char) v0));
                }
                v2++;
            }
            v3_3 = v1_1.toString();
        } else {
            v3_3 = "bad_name";
        }
        return v3_3;
    }
}
package a2dp.Vol;
 class ManageData$1 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.ManageData this$0;

    ManageData$1(a2dp.Vol.ManageData p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p15)
    {
        new java.util.Vector();
        android.bluetooth.BluetoothAdapter v0 = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
        try {
            a2dp.Vol.ManageData.access$102(this.this$0, new a2dp.Vol.DeviceDB(a2dp.Vol.ManageData.access$200(this.this$0)));
            try {
                java.util.Vector v6_1 = a2dp.Vol.ManageData.access$100(this.this$0).selectAlldb();
            } catch (Exception v4_1) {
                v4_1.printStackTrace();
            }
            int v3 = 0;
            android.widget.Toast v7_2 = v6_1.iterator();
            while (v7_2.hasNext()) {
                a2dp.Vol.btDevice v2_1 = ((a2dp.Vol.btDevice) v7_2.next());
                if (v2_1.getMac().length() > 16) {
                    try {
                        android.bluetooth.BluetoothDevice v1 = v0.getRemoteDevice(v2_1.getMac());
                        Exception v8_12 = v1.getClass();
                        String v10_2 = new Class[1];
                        v10_2[0] = String;
                        reflect.Method v5 = v8_12.getMethod("setAlias", v10_2);
                        Exception v8_14 = new Object[1];
                        v8_14[0] = v2_1.getDesc2();
                        v5.invoke(v1, v8_14);
                        v3++;
                    } catch (Exception v8) {
                    }
                }
            }
            android.widget.Toast.makeText(this.this$0, new StringBuilder().append(this.this$0.getString(2131165200)).append(" - ").append(v3).toString(), 1).show();
            return;
        } catch (Exception v4_0) {
            v4_0.printStackTrace();
        }
    }
}
package a2dp.Vol;
 class ManageData$2 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.ManageData this$0;

    ManageData$2(a2dp.Vol.ManageData p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        if (!a2dp.Vol.ManageData.access$300(this.this$0)) {
            android.widget.Toast.makeText(this.this$0, 2131165316, 0).show();
        } else {
            int v1_1 = new String[0];
            new a2dp.Vol.ManageData$ExportDatabaseFileTask(this.this$0, 0).execute(v1_1);
        }
        return;
    }
}
package a2dp.Vol;
 class ManageData$3 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.ManageData this$0;

    ManageData$3(a2dp.Vol.ManageData p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        if (!a2dp.Vol.ManageData.access$300(this.this$0)) {
            android.widget.Toast.makeText(this.this$0, 2131165316, 0).show();
        } else {
            android.widget.Toast v0_2 = new a2dp.Vol.ManageData$ExportDataAsXmlTask(this.this$0, 0);
            int v1_2 = new String[2];
            v1_2[0] = "devices";
            v1_2[1] = "A2DPDevices";
            v0_2.execute(v1_2);
        }
        return;
    }
}
package a2dp.Vol;
 class ManageData$4 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.ManageData this$0;

    ManageData$4(a2dp.Vol.ManageData p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        if (!a2dp.Vol.ManageData.access$300(this.this$0)) {
            android.widget.Toast.makeText(this.this$0, 2131165316, 0).show();
        } else {
            android.widget.Toast v0_2 = new a2dp.Vol.ManageData$ImportDatabaseFileTask(this.this$0, 0);
            int v1_2 = new String[2];
            v1_2[0] = "devices";
            v1_2[1] = this.this$0.a2dpDir;
            v0_2.execute(v1_2);
        }
        return;
    }
}
package a2dp.Vol;
 class ManageData$5 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.ManageData this$0;

    ManageData$5(a2dp.Vol.ManageData p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        if (!a2dp.Vol.ManageData.access$300(this.this$0)) {
            android.widget.Toast.makeText(this.this$0, 2131165316, 0).show();
        } else {
            android.widget.Toast v0_2 = new a2dp.Vol.ManageData$ExportLocationTask(this.this$0, 0);
            int v1_2 = new String[2];
            v1_2[0] = "My_Last_Location";
            v1_2[1] = this.this$0.a2dpDir;
            v0_2.execute(v1_2);
        }
        return;
    }
}
package a2dp.Vol;
 class ManageData$ExportDataAsXmlTask extends android.os.AsyncTask {
    private final android.app.ProgressDialog dialog;
    final synthetic a2dp.Vol.ManageData this$0;

    private ManageData$ExportDataAsXmlTask(a2dp.Vol.ManageData p3)
    {
        this.this$0 = p3;
        this.dialog = new android.app.ProgressDialog(this.this$0);
        return;
    }

    synthetic ManageData$ExportDataAsXmlTask(a2dp.Vol.ManageData p1, a2dp.Vol.ManageData$1 p2)
    {
        this(p1);
        return;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((String[]) p2));
    }

    protected varargs String doInBackground(String[] p8)
    {
        try {
            String v3 = p8[1];
            new a2dp.Vol.DataXmlExporter(a2dp.Vol.ManageData.access$200(this.this$0).getDeviceDB().getDb()).export(p8[0], v3);
            a2dp.Vol.ManageData.access$802(this.this$0, new StringBuilder().append(this.this$0.a2dpDir).append("/").append(v3).append(".xml").toString());
            String v4_4 = 0;
        } catch (java.io.IOException v2) {
            android.util.Log.e("A2DP Volume", v2.getMessage(), v2);
            v4_4 = v2.getMessage();
        }
        return v4_4;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String) p1));
        return;
    }

    protected void onPostExecute(String p5)
    {
        if (this.dialog.isShowing()) {
            this.dialog.dismiss();
        }
        if (p5 != null) {
            android.widget.Toast.makeText(this.this$0, new StringBuilder().append("Export failed - ").append(p5).toString(), 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText("Export Failed");
        } else {
            android.widget.Toast.makeText(this.this$0, "Export successful!", 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText(new StringBuilder().append("Exported to: ").append(a2dp.Vol.ManageData.access$800(this.this$0)).toString());
        }
        return;
    }

    protected void onPreExecute()
    {
        this.dialog.setMessage("Exporting database as XML...");
        this.dialog.show();
        return;
    }
}
package a2dp.Vol;
 class ManageData$ExportDatabaseFileTask extends android.os.AsyncTask {
    private final android.app.ProgressDialog dialog;
    final synthetic a2dp.Vol.ManageData this$0;

    private ManageData$ExportDatabaseFileTask(a2dp.Vol.ManageData p3)
    {
        this.this$0 = p3;
        this.dialog = new android.app.ProgressDialog(this.this$0);
        return;
    }

    synthetic ManageData$ExportDatabaseFileTask(a2dp.Vol.ManageData p1, a2dp.Vol.ManageData$1 p2)
    {
        this(p1);
        return;
    }

    void copyFile(java.io.File p8, java.io.File p9)
    {
        java.nio.channels.FileChannel v1 = new java.io.FileInputStream(p8).getChannel();
        java.nio.channels.FileChannel v6 = new java.io.FileOutputStream(p9).getChannel();
        try {
            v1.transferTo(0, v1.size(), v6);
        } catch (Throwable v0_2) {
            if (v1 != null) {
                v1.close();
            }
            if (v6 != null) {
                v6.close();
            }
            throw v0_2;
        }
        if (v1 != null) {
            v1.close();
        }
        if (v6 != null) {
            v6.close();
        }
        return;
    }

    protected varargs Boolean doInBackground(String[] p7)
    {
        java.io.File v0_1 = new java.io.File(a2dp.Vol.ManageData.access$200(this.this$0).getDeviceDB().getDb().getPath());
        java.io.File v2_1 = new java.io.File(this.this$0.a2dpDir);
        if (!v2_1.exists()) {
            v2_1.mkdirs();
        }
        java.io.File v3_1 = new java.io.File(v2_1, v0_1.getName());
        a2dp.Vol.ManageData.access$802(this.this$0, v3_1.getPath());
        try {
            v3_1.createNewFile();
            this.copyFile(v0_1, v3_1);
            Boolean v4_8 = Boolean.valueOf(1);
        } catch (java.io.IOException v1) {
            android.util.Log.e("A2DP Volume", v1.getMessage(), v1);
            v4_8 = Boolean.valueOf(0);
        }
        return v4_8;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((String[]) p2));
    }

    protected void onPostExecute(Boolean p4)
    {
        if (this.dialog.isShowing()) {
            this.dialog.dismiss();
        }
        if (!p4.booleanValue()) {
            android.widget.Toast.makeText(this.this$0, "Export failed", 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText("Export Failed");
        } else {
            android.widget.Toast.makeText(this.this$0, "Export successful!", 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText(new StringBuilder().append("Exported to: ").append(a2dp.Vol.ManageData.access$800(this.this$0)).toString());
        }
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((Boolean) p1));
        return;
    }

    protected void onPreExecute()
    {
        this.dialog.setMessage("Exporting database...");
        this.dialog.show();
        return;
    }
}
package a2dp.Vol;
 class ManageData$ExportLocationTask extends android.os.AsyncTask {
    private final android.app.ProgressDialog dialog;
    final synthetic a2dp.Vol.ManageData this$0;

    private ManageData$ExportLocationTask(a2dp.Vol.ManageData p3)
    {
        this.this$0 = p3;
        this.dialog = new android.app.ProgressDialog(this.this$0);
        return;
    }

    synthetic ManageData$ExportLocationTask(a2dp.Vol.ManageData p1, a2dp.Vol.ManageData$1 p2)
    {
        this(p1);
        return;
    }

    void copyFile(java.io.File p8, java.io.File p9)
    {
        java.nio.channels.FileChannel v1 = new java.io.FileInputStream(p8).getChannel();
        java.nio.channels.FileChannel v6 = new java.io.FileOutputStream(p9).getChannel();
        try {
            v1.transferTo(0, v1.size(), v6);
        } catch (Throwable v0_2) {
            if (v1 != null) {
                v1.close();
            }
            if (v6 != null) {
                v6.close();
            }
            throw v0_2;
        }
        if (v1 != null) {
            v1.close();
        }
        if (v6 != null) {
            v6.close();
        }
        return;
    }

    protected varargs Boolean doInBackground(String[] p8)
    {
        java.io.File v0 = a2dp.Vol.ManageData.access$200(this.this$0).getFileStreamPath(p8[0]);
        java.io.File v2_0 = new java.io.File(this.this$0.a2dpDir);
        if (!v2_0.exists()) {
            v2_0.mkdirs();
        }
        java.io.File v3_1 = new java.io.File(v2_0, new StringBuilder().append(v0.getName()).append(".txt").toString());
        a2dp.Vol.ManageData.access$802(this.this$0, v3_1.getPath());
        try {
            v3_1.createNewFile();
            this.copyFile(v0, v3_1);
            Boolean v4_10 = Boolean.valueOf(1);
        } catch (java.io.IOException v1) {
            android.util.Log.e("A2DP Volume", v1.getMessage(), v1);
            v4_10 = Boolean.valueOf(0);
        }
        return v4_10;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((String[]) p2));
    }

    protected void onPostExecute(Boolean p4)
    {
        if (this.dialog.isShowing()) {
            this.dialog.dismiss();
        }
        if (!p4.booleanValue()) {
            android.widget.Toast.makeText(this.this$0, "Export failed", 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText("Export Failed");
        } else {
            a2dp.Vol.ManageData.access$900(this.this$0).setText(new StringBuilder().append("Exported to: ").append(a2dp.Vol.ManageData.access$800(this.this$0)).toString());
            android.widget.Toast.makeText(this.this$0, "Location data exported", 1).show();
        }
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((Boolean) p1));
        return;
    }

    protected void onPreExecute()
    {
        this.dialog.setMessage("Exporting location data...");
        this.dialog.show();
        return;
    }
}
package a2dp.Vol;
 class ManageData$ImportDatabaseFileTask extends android.os.AsyncTask {
    private final android.app.ProgressDialog dialog;
    final synthetic a2dp.Vol.ManageData this$0;

    private ManageData$ImportDatabaseFileTask(a2dp.Vol.ManageData p3)
    {
        this.this$0 = p3;
        this.dialog = new android.app.ProgressDialog(this.this$0);
        return;
    }

    synthetic ManageData$ImportDatabaseFileTask(a2dp.Vol.ManageData p1, a2dp.Vol.ManageData$1 p2)
    {
        this(p1);
        return;
    }

    void copyFile(java.io.File p8, java.io.File p9)
    {
        java.nio.channels.FileChannel v1 = new java.io.FileInputStream(p8).getChannel();
        java.nio.channels.FileChannel v6 = new java.io.FileOutputStream(p9).getChannel();
        try {
            v1.transferTo(0, v1.size(), v6);
        } catch (Throwable v0_2) {
            if (v1 != null) {
                v1.close();
            }
            if (v6 != null) {
                v6.close();
            }
            throw v0_2;
        }
        if (v1 != null) {
            v1.close();
        }
        if (v6 != null) {
            v6.close();
        }
        return;
    }

    protected varargs Boolean doInBackground(String[] p7)
    {
        java.io.File v0_1 = new java.io.File(a2dp.Vol.ManageData.access$200(this.this$0).getDeviceDB().getDb().getPath());
        java.io.File v2_1 = new java.io.File(this.this$0.a2dpDir);
        if (!v2_1.exists()) {
            v2_1.mkdirs();
        }
        java.io.File v3_1 = new java.io.File(v2_1, v0_1.getName());
        a2dp.Vol.ManageData.access$802(this.this$0, v3_1.getPath());
        try {
            v3_1.createNewFile();
            this.copyFile(v3_1, v0_1);
            Boolean v4_8 = Boolean.valueOf(1);
        } catch (java.io.IOException v1) {
            android.util.Log.e("A2DP Volume", v1.getMessage(), v1);
            v4_8 = Boolean.valueOf(0);
        }
        return v4_8;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((String[]) p2));
    }

    protected void onPostExecute(Boolean p7)
    {
        if (this.dialog.isShowing()) {
            this.dialog.dismiss();
        }
        if (!p7.booleanValue()) {
            android.widget.Toast.makeText(this.this$0, "Import failed", 0).show();
            a2dp.Vol.ManageData.access$900(this.this$0).setText("Import Failed");
        } else {
            a2dp.Vol.ManageData.access$900(this.this$0).setText(new StringBuilder().append("Imported from: ").append(a2dp.Vol.ManageData.access$800(this.this$0)).toString());
            android.content.Intent v1_1 = new android.content.Intent();
            v1_1.setAction("a2dp.vol.Main.RELOAD_LIST");
            v1_1.putExtra("device", "");
            a2dp.Vol.ManageData.access$200(this.this$0).sendBroadcast(v1_1);
            android.widget.Toast.makeText(this.this$0, 2131165198, 0).show();
        }
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((Boolean) p1));
        return;
    }

    protected void onPreExecute()
    {
        this.dialog.setMessage("Importing database...");
        this.dialog.show();
        return;
    }
}
package a2dp.Vol;
 class ManageData$SelectDataTask extends android.os.AsyncTask {
    private final android.app.ProgressDialog dialog;
    final synthetic a2dp.Vol.ManageData this$0;

    private ManageData$SelectDataTask(a2dp.Vol.ManageData p3)
    {
        this.this$0 = p3;
        this.dialog = new android.app.ProgressDialog(this.this$0);
        return;
    }

    synthetic ManageData$SelectDataTask(a2dp.Vol.ManageData p1, a2dp.Vol.ManageData$1 p2)
    {
        this(p1);
        return;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((String[]) p2));
    }

    protected varargs String doInBackground(String[] p7)
    {
        java.util.List v1 = a2dp.Vol.ManageData.access$200(this.this$0).getDeviceDB().selectAll();
        StringBuilder v2_1 = new StringBuilder();
        String v3_1 = v1.iterator();
        while (v3_1.hasNext()) {
            v2_1.append(new StringBuilder().append(((String) v3_1.next())).append("\n").toString());
        }
        return v2_1.toString();
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((String) p1));
        return;
    }

    protected void onPostExecute(String p2)
    {
        if (this.dialog.isShowing()) {
            this.dialog.dismiss();
        }
        a2dp.Vol.ManageData.access$1000(this.this$0).setText(p2);
        return;
    }

    protected void onPreExecute()
    {
        this.dialog.setMessage("Selecting data...");
        this.dialog.show();
        return;
    }
}
package a2dp.Vol;
public class ManageData extends android.app.Activity {
    private final int MY_PERMISSIONS;
    String a2dpDir;
    private a2dp.Vol.MyApplication application;
    private android.widget.Button exportDbToSdButton;
    private android.widget.Button exportDbXmlToSdButton;
    private android.widget.Button exportLoc;
    private android.widget.Button importDB;
    private a2dp.Vol.DeviceDB myDB;
    private android.widget.TextView output;
    private android.widget.TextView path;
    private String pathstr;
    private android.widget.Button pushNamesButton;

    public ManageData()
    {
        this.output = ((android.widget.TextView) 0);
        this.path = ((android.widget.TextView) 0);
        this.MY_PERMISSIONS = 4327;
        return;
    }

    static synthetic a2dp.Vol.DeviceDB access$100(a2dp.Vol.ManageData p1)
    {
        return p1.myDB;
    }

    static synthetic android.widget.TextView access$1000(a2dp.Vol.ManageData p1)
    {
        return p1.output;
    }

    static synthetic a2dp.Vol.DeviceDB access$102(a2dp.Vol.ManageData p0, a2dp.Vol.DeviceDB p1)
    {
        p0.myDB = p1;
        return p1;
    }

    static synthetic a2dp.Vol.MyApplication access$200(a2dp.Vol.ManageData p1)
    {
        return p1.application;
    }

    static synthetic boolean access$300(a2dp.Vol.ManageData p1)
    {
        return p1.isExternalStorageAvail();
    }

    static synthetic String access$800(a2dp.Vol.ManageData p1)
    {
        return p1.pathstr;
    }

    static synthetic String access$802(a2dp.Vol.ManageData p0, String p1)
    {
        p0.pathstr = p1;
        return p1;
    }

    static synthetic android.widget.TextView access$900(a2dp.Vol.ManageData p1)
    {
        return p1.path;
    }

    private boolean isExternalStorageAvail()
    {
        return android.os.Environment.getExternalStorageState().equals("mounted");
    }

    public void finish()
    {
        this.setResult(-1, new android.content.Intent());
        super.finish();
        return;
    }

    public void onCreate(android.os.Bundle p6)
    {
        super.onCreate(p6);
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.a2dpDir = new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString();
        this.setContentView(2130968582);
        this.output = ((android.widget.TextView) this.findViewById(2131361868));
        this.path = ((android.widget.TextView) this.findViewById(2131361866));
        String v1_3 = new String[0];
        new a2dp.Vol.ManageData$SelectDataTask(this, 0).execute(v1_3);
        if (android.support.v4.content.ContextCompat.checkSelfPermission(this, "android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
            if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.WRITE_EXTERNAL_STORAGE")) {
                String[] v0_16 = new String[1];
                v0_16[0] = "android.permission.WRITE_EXTERNAL_STORAGE";
                android.support.v4.app.ActivityCompat.requestPermissions(this, v0_16, 4327);
            } else {
                String[] v0_17 = new String[1];
                v0_17[0] = "android.permission.WRITE_EXTERNAL_STORAGE";
                android.support.v4.app.ActivityCompat.requestPermissions(this, v0_17, 4327);
            }
        }
        this.pushNamesButton = ((android.widget.Button) this.findViewById(2131361859));
        this.pushNamesButton.setOnClickListener(new a2dp.Vol.ManageData$1(this));
        this.exportDbToSdButton = ((android.widget.Button) this.findViewById(2131361861));
        this.exportDbToSdButton.setOnClickListener(new a2dp.Vol.ManageData$2(this));
        this.exportDbXmlToSdButton = ((android.widget.Button) this.findViewById(2131361862));
        this.exportDbXmlToSdButton.setOnClickListener(new a2dp.Vol.ManageData$3(this));
        this.importDB = ((android.widget.Button) this.findViewById(2131361864));
        this.importDB.setOnClickListener(new a2dp.Vol.ManageData$4(this));
        this.exportLoc = ((android.widget.Button) this.findViewById(2131361865));
        this.exportLoc.setOnClickListener(new a2dp.Vol.ManageData$5(this));
        return;
    }

    protected void onDestroy()
    {
        this.setResult(-1, new android.content.Intent());
        super.onDestroy();
        return;
    }

    public void onPause()
    {
        super.onPause();
        return;
    }

    public void onRequestPermissionsResult(int p4, String[] p5, int[] p6)
    {
        switch (p4) {
            case 4327:
                if ((p6.length > 0) && (p6[0] == 0)) {
                } else {
                    android.widget.Toast.makeText(this.application, 2131165316, 1).show();
                    this.finish();
                }
                break;
        }
        return;
    }

    protected void onRestoreInstanceState(android.os.Bundle p1)
    {
        super.onRestoreInstanceState(p1);
        return;
    }

    protected void onSaveInstanceState(android.os.Bundle p1)
    {
        super.onSaveInstanceState(p1);
        return;
    }
}
package a2dp.Vol;
public class MyApplication extends android.app.Application {
    public static final String APP_NAME = "A2DP Volume";
    private a2dp.Vol.DeviceDB dataHelper;

    public MyApplication()
    {
        return;
    }

    public a2dp.Vol.DeviceDB getDeviceDB()
    {
        return this.dataHelper;
    }

    public void onCreate()
    {
        super.onCreate();
        android.util.Log.d("A2DP Volume", "APPLICATION onCreate");
        try {
            this.dataHelper = new a2dp.Vol.DeviceDB(this);
        } catch (Exception v0) {
            v0.printStackTrace();
            android.util.Log.e("A2DP Volume", "APPLICATION onCreate failed to open DB");
        }
        return;
    }

    public void onTerminate()
    {
        android.util.Log.d("A2DP Volume", "APPLICATION onTerminate");
        super.onTerminate();
        return;
    }

    public void setDeviceDB(a2dp.Vol.DeviceDB p1)
    {
        this.dataHelper = p1;
        return;
    }
}
package a2dp.Vol;
 class NotificationCatcher$1 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.NotificationCatcher this$0;

    NotificationCatcher$1(a2dp.Vol.NotificationCatcher p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p2, android.content.Intent p3)
    {
        this.this$0.LoadPrefs();
        return;
    }
}
package a2dp.Vol;
 class NotificationCatcher$2 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.NotificationCatcher this$0;

    NotificationCatcher$2(a2dp.Vol.NotificationCatcher p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p2, android.content.Intent p3)
    {
        this.this$0.notList.clear();
        return;
    }
}
package a2dp.Vol;
 class NotificationCatcher$Readit extends android.os.AsyncTask {
    final synthetic a2dp.Vol.NotificationCatcher this$0;

    private NotificationCatcher$Readit(a2dp.Vol.NotificationCatcher p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic NotificationCatcher$Readit(a2dp.Vol.NotificationCatcher p1, a2dp.Vol.NotificationCatcher$1 p2)
    {
        this(p1);
        return;
    }

    protected varargs Long doInBackground(android.service.notification.StatusBarNotification[] p35)
    {
        try {
            int v29_50;
            int v8 = a2dp.Vol.service.connects.intValue();
        } catch (Exception v9) {
            v9.printStackTrace();
            android.service.notification.StatusBarNotification v22 = p35[0];
            int v25 = 0;
            String v30_0 = a2dp.Vol.NotificationCatcher.access$100();
            int v29_19 = 0;
            while (v29_19 < v30_0.length) {
                if (v30_0[v29_19].equalsIgnoreCase(v22.getPackageName())) {
                    v25 = 1;
                }
                v29_19++;
            }
            if (v25 != 0) {
                android.content.pm.PackageManager v21 = this.this$0.getPackageManager();
                String v20 = v22.getPackageName();
                try {
                    int v5 = v21.getApplicationInfo(v20, 0);
                } catch (android.content.pm.PackageManager$NameNotFoundException v10) {
                    v5 = 0;
                }
                int v29_75;
                if (v5 == 0) {
                    v29_75 = v20;
                } else {
                    v29_75 = v21.getApplicationLabel(v5);
                }
                String v6_1 = ((String) ((String) v29_75));
                android.app.Notification v18 = v22.getNotification();
                if (v18 != null) {
                    Long v28 = Long.valueOf(v18.when);
                    a2dp.Vol.NotificationCatcher$notItem v14_1 = new a2dp.Vol.NotificationCatcher$notItem(this.this$0, v20, v28);
                    java.util.Iterator v15 = this.this$0.notList.iterator();
                    Boolean v12 = Boolean.valueOf(0);
                    while (v15.hasNext()) {
                        a2dp.Vol.NotificationCatcher$notItem v11_1 = ((a2dp.Vol.NotificationCatcher$notItem) v15.next());
                        if (v11_1.getNot().equals(v20)) {
                            if ((v11_1.getNottime().longValue() + 1000) >= v28.longValue()) {
                                v29_50 = 0;
                                return v29_50;
                            } else {
                                this.this$0.notList.set(this.this$0.notList.indexOf(v11_1), v14_1);
                                v12 = Boolean.valueOf(1);
                            }
                        }
                    }
                    if (!v12.booleanValue()) {
                        this.this$0.notList.add(v14_1);
                    }
                    String v23_0 = new StringBuilder().append("").append(v6_1).append(", ").toString();
                    String v27 = "";
                    if (v18.tickerText != null) {
                        v27 = v22.getNotification().tickerText.toString();
                    }
                    String v24 = "";
                    if (!this.this$0.apps1.contains(v20)) {
                        android.os.Bundle v7 = v18.extras;
                        if (!v7.isEmpty()) {
                            CharSequence[] v17 = v7.getCharSequenceArray("android.textLines");
                            if ((v17 != null) && (v17.length > 0)) {
                                String v30_1 = v17.length;
                                int v29_10 = 0;
                                while (v29_10 < v30_1) {
                                    CharSequence v16 = v17[v29_10];
                                    if ((v16 != null) && (v16.length() > 1)) {
                                        v24 = v16.toString();
                                    }
                                    v29_10++;
                                }
                            }
                        }
                        String v26 = "";
                        if ((v7.getString("android.text") != null) && (!v7.getString("android.text").isEmpty())) {
                            v26 = v7.getString("android.text").toString();
                        }
                        if (v27.length() > 1) {
                            if ((!v27.equalsIgnoreCase(v24)) && (v24.length() >= 1)) {
                                v23_0 = new StringBuilder().append(v23_0).append(v27).append(", ").append(v24).toString();
                            } else {
                                v23_0 = new StringBuilder().append(v23_0).append(v27).toString();
                            }
                        }
                        if (!v26.isEmpty()) {
                            if ((!v26.equalsIgnoreCase(v24)) && (!v24.isEmpty())) {
                                v23_0 = new StringBuilder().append(v23_0).append(v26).append(", ").append(v24).toString();
                            } else {
                                v23_0 = new StringBuilder().append(v23_0).append(v26).toString();
                            }
                        }
                        if ((!v24.isEmpty()) || ((!v27.isEmpty()) || (!v26.isEmpty()))) {
                            if (v20 == "com.google.android.apps.fireball") {
                                if (v27 == null) {
                                    v29_50 = 0;
                                    return v29_50;
                                } else {
                                    v23_0 = new StringBuilder().append(v6_1).append(", ").append(v27).append(", ").append(v26).toString();
                                }
                            }
                        } else {
                            v29_50 = 0;
                            return v29_50;
                        }
                    } else {
                        if (v27 == null) {
                            v29_50 = 0;
                            return v29_50;
                        } else {
                            v23_0 = new StringBuilder().append(v23_0).append(v27).toString();
                        }
                    }
                    if ((v8 > 0) && (v23_0.length() > 0)) {
                        android.content.Intent v13_1 = new android.content.Intent();
                        v13_1.setAction("a2dp.vol.service.MESSAGE");
                        v13_1.putExtra("message", v23_0);
                        a2dp.Vol.NotificationCatcher.access$200(this.this$0).sendBroadcast(v13_1);
                    }
                } else {
                    v29_50 = 0;
                    return v29_50;
                }
            }
            v29_50 = 0;
            return v29_50;
        }
        if (v8 >= 1) {
        } else {
            v29_50 = 0;
            return v29_50;
        }
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((android.service.notification.StatusBarNotification[]) p2));
    }
}
package a2dp.Vol;
 class NotificationCatcher$notItem {
    String not;
    Long nottime;
    final synthetic a2dp.Vol.NotificationCatcher this$0;

    public NotificationCatcher$notItem(a2dp.Vol.NotificationCatcher p1, String p2, Long p3)
    {
        this.this$0 = p1;
        this.not = p2;
        this.nottime = p3;
        return;
    }

    public String getNot()
    {
        return this.not;
    }

    public Long getNottime()
    {
        return this.nottime;
    }

    public void setNot(String p1)
    {
        this.not = p1;
        return;
    }

    public void setNottime(Long p1)
    {
        this.nottime = p1;
        return;
    }
}
package a2dp.Vol;
public class NotificationCatcher extends android.service.notification.NotificationListenerService {
    private static String[] packages;
    private a2dp.Vol.MyApplication application;
    java.util.List apps1;
    private final android.content.BroadcastReceiver clear;
    java.util.List notList;
    private String packagelist;
    android.content.SharedPreferences preferences;
    private final android.content.BroadcastReceiver reloadprefs;

    public NotificationCatcher()
    {
        this.notList = new java.util.ArrayList();
        this.apps1 = new java.util.ArrayList();
        this.reloadprefs = new a2dp.Vol.NotificationCatcher$1(this);
        this.clear = new a2dp.Vol.NotificationCatcher$2(this);
        return;
    }

    static synthetic String[] access$100()
    {
        return a2dp.Vol.NotificationCatcher.packages;
    }

    static synthetic a2dp.Vol.MyApplication access$200(a2dp.Vol.NotificationCatcher p1)
    {
        return p1.application;
    }

    public void LoadPrefs()
    {
        this.packagelist = this.preferences.getString("packages", "com.google.android.talk,com.android.email,com.android.calendar");
        a2dp.Vol.NotificationCatcher.packages = this.packagelist.split(",");
        this.apps1.add("com.google.android.talk");
        this.apps1.add("com.skype.raider");
        return;
    }

    public void onCreate()
    {
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(this.application);
        this.registerReceiver(this.reloadprefs, new android.content.IntentFilter("a2dp.vol.Reload"));
        this.registerReceiver(this.clear, new android.content.IntentFilter("a2dp.Vol.Clear"));
        this.LoadPrefs();
        super.onCreate();
        return;
    }

    public void onDestroy()
    {
        this.unregisterReceiver(this.reloadprefs);
        this.unregisterReceiver(this.clear);
        super.onDestroy();
        return;
    }

    public void onNotificationPosted(android.service.notification.StatusBarNotification p4)
    {
        super.onNotificationPosted(p4);
        a2dp.Vol.NotificationCatcher$Readit v0_1 = new a2dp.Vol.NotificationCatcher$Readit(this, 0);
        android.service.notification.StatusBarNotification[] v1_2 = new android.service.notification.StatusBarNotification[1];
        v1_2[0] = p4;
        v0_1.execute(v1_2);
        return;
    }

    public void onNotificationPosted(android.service.notification.StatusBarNotification p1, android.service.notification.NotificationListenerService$RankingMap p2)
    {
        super.onNotificationPosted(p1, p2);
        return;
    }

    public void onNotificationRemoved(android.service.notification.StatusBarNotification p1)
    {
        super.onNotificationRemoved(p1);
        return;
    }
}
package a2dp.Vol;
 class PackagesChooser$1 implements java.lang.Runnable {
    final synthetic a2dp.Vol.PackagesChooser this$0;

    PackagesChooser$1(a2dp.Vol.PackagesChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        a2dp.Vol.PackagesChooser.access$002(this.this$0, new java.util.ArrayList());
        android.os.Handler v4_1 = a2dp.Vol.PackagesChooser.access$100(this.this$0).getInstalledApplications(0).iterator();
        while (v4_1.hasNext()) {
            a2dp.Vol.PackagesChooser$AppInfoCache v0_3 = ((android.content.pm.ApplicationInfo) v4_1.next());
            a2dp.Vol.PackagesChooser.access$000(this.this$0).add(new a2dp.Vol.PackagesChooser$AppInfoCache(this.this$0, v0_3.loadLabel(a2dp.Vol.PackagesChooser.access$100(this.this$0)).toString(), v0_3.packageName, v0_3.className));
        }
        java.util.Collections.sort(a2dp.Vol.PackagesChooser.access$000(this.this$0), new a2dp.Vol.PackagesChooser$AlphaComparator(this.this$0));
        a2dp.Vol.PackagesChooser.access$202(this.this$0, new java.util.ArrayList());
        int v1 = 0;
        android.os.Handler v4_7 = a2dp.Vol.PackagesChooser.access$000(this.this$0).iterator();
        while (v4_7.hasNext()) {
            a2dp.Vol.PackagesChooser$AppInfoCache v0_1 = ((a2dp.Vol.PackagesChooser$AppInfoCache) v4_7.next());
            v0_1.setPosition(v1);
            v0_1.setChecked(java.util.Arrays.asList(a2dp.Vol.PackagesChooser.access$300(this.this$0)).contains(v0_1.getPackageName()));
            a2dp.Vol.PackagesChooser.access$200(this.this$0).add(v0_1);
            v1++;
        }
        a2dp.Vol.PackagesChooser.access$402(this.this$0, new a2dp.Vol.PackagesChooser$PackageListAdapter(this.this$0, this.this$0.getBaseContext()));
        a2dp.Vol.PackagesChooser.access$600(this.this$0).post(a2dp.Vol.PackagesChooser.access$500(this.this$0));
        return;
    }
}
package a2dp.Vol;
 class PackagesChooser$2 implements java.lang.Runnable {
    final synthetic a2dp.Vol.PackagesChooser this$0;

    PackagesChooser$2(a2dp.Vol.PackagesChooser p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        a2dp.Vol.PackagesChooser.access$700(this.this$0);
        a2dp.Vol.PackagesChooser.access$800(this.this$0).setVisibility(8);
        return;
    }
}
package a2dp.Vol;
 class PackagesChooser$AlphaComparator implements java.util.Comparator {
    private final java.text.Collator sCollator;
    final synthetic a2dp.Vol.PackagesChooser this$0;

    PackagesChooser$AlphaComparator(a2dp.Vol.PackagesChooser p2)
    {
        this.this$0 = p2;
        this.sCollator = java.text.Collator.getInstance();
        return;
    }

    public final int compare(a2dp.Vol.PackagesChooser$AppInfoCache p4, a2dp.Vol.PackagesChooser$AppInfoCache p5)
    {
        return this.sCollator.compare(p4.getAppName(), p5.getAppName());
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((a2dp.Vol.PackagesChooser$AppInfoCache) p2), ((a2dp.Vol.PackagesChooser$AppInfoCache) p3));
    }
}
package a2dp.Vol;
 class PackagesChooser$AppInfoCache {
    private String app_name;
    private boolean checked;
    private String class_name;
    private String package_name;
    private int position;
    final synthetic a2dp.Vol.PackagesChooser this$0;

    public PackagesChooser$AppInfoCache(a2dp.Vol.PackagesChooser p2, String p3, String p4, String p5)
    {
        this.this$0 = p2;
        this.app_name = p3;
        this.package_name = p4;
        this.class_name = p5;
        this.position = -1;
        this.setChecked(0);
        return;
    }

    public String getAppName()
    {
        return this.app_name;
    }

    public String getClassName()
    {
        return this.class_name;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        try {
            int v1_2 = a2dp.Vol.PackagesChooser.access$100(this.this$0).getApplicationIcon(this.package_name);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            v1_2 = 0;
        }
        return v1_2;
    }

    public String getPackageName()
    {
        return this.package_name;
    }

    public int getPosition()
    {
        return this.position;
    }

    public boolean isChecked()
    {
        return this.checked;
    }

    public void setChecked(boolean p1)
    {
        this.checked = p1;
        return;
    }

    public void setPosition(int p1)
    {
        this.position = p1;
        return;
    }

    public String toString()
    {
        return this.app_name;
    }
}
package a2dp.Vol;
 class PackagesChooser$PackageListAdapter$1 implements android.widget.CompoundButton$OnCheckedChangeListener {
    final synthetic a2dp.Vol.PackagesChooser$PackageListAdapter this$1;
    final synthetic a2dp.Vol.PackagesChooser$AppInfoCache val$ai;
    final synthetic android.widget.CheckBox val$box;

    PackagesChooser$PackageListAdapter$1(a2dp.Vol.PackagesChooser$PackageListAdapter p1, a2dp.Vol.PackagesChooser$AppInfoCache p2, android.widget.CheckBox p3)
    {
        this.this$1 = p1;
        this.val$ai = p2;
        this.val$box = p3;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton p3, boolean p4)
    {
        this.val$ai.setChecked(this.val$box.isChecked());
        return;
    }
}
package a2dp.Vol;
public class PackagesChooser$PackageListAdapter extends android.widget.ArrayAdapter {
    android.content.Context c;
    final synthetic a2dp.Vol.PackagesChooser this$0;

    public PackagesChooser$PackageListAdapter(a2dp.Vol.PackagesChooser p3, android.content.Context p4)
    {
        this.this$0 = p3;
        super(p4, 2130968576, a2dp.Vol.PackagesChooser.access$000(p3));
        super.c = p4;
        return;
    }

    public android.view.View getView(int p9, android.view.View p10, android.view.ViewGroup p11)
    {
        android.view.View v5 = android.view.LayoutInflater.from(this.c).inflate(2130968583, p11, 0);
        android.widget.TextView v4_1 = ((android.widget.TextView) v5.findViewById(2131361799));
        a2dp.Vol.PackagesChooser$AppInfoCache v0_1 = ((a2dp.Vol.PackagesChooser$AppInfoCache) this.getItem(p9));
        ((android.widget.ImageView) v5.findViewById(2131361798)).setImageDrawable(v0_1.getIcon());
        v4_1.setText(v0_1.getAppName());
        android.widget.CheckBox v1_1 = ((android.widget.CheckBox) v5.findViewById(2131361869));
        v1_1.setChecked(v0_1.isChecked());
        v1_1.setOnCheckedChangeListener(new a2dp.Vol.PackagesChooser$PackageListAdapter$1(this, v0_1, v1_1));
        return v5;
    }
}
package a2dp.Vol;
public class PackagesChooser extends android.app.Activity {
    private a2dp.Vol.MyApplication application;
    private java.util.List mAppList;
    private Runnable mFinishLoadAndSortTask;
    private java.util.List mFullAppList;
    private final android.os.Handler mHandler;
    private a2dp.Vol.PackagesChooser$PackageListAdapter mListAdapter;
    private android.widget.ListView mListView;
    private Runnable mLoadAppLoadAndSortAppList;
    String packagelist;
    private String[] packages;
    private android.widget.ProgressBar pb;
    private android.content.pm.PackageManager pm;
    android.content.SharedPreferences preferences;

    public PackagesChooser()
    {
        this.mHandler = new android.os.Handler();
        this.mLoadAppLoadAndSortAppList = new a2dp.Vol.PackagesChooser$1(this);
        this.mFinishLoadAndSortTask = new a2dp.Vol.PackagesChooser$2(this);
        return;
    }

    static synthetic java.util.List access$000(a2dp.Vol.PackagesChooser p1)
    {
        return p1.mAppList;
    }

    static synthetic java.util.List access$002(a2dp.Vol.PackagesChooser p0, java.util.List p1)
    {
        p0.mAppList = p1;
        return p1;
    }

    static synthetic android.content.pm.PackageManager access$100(a2dp.Vol.PackagesChooser p1)
    {
        return p1.pm;
    }

    static synthetic java.util.List access$200(a2dp.Vol.PackagesChooser p1)
    {
        return p1.mFullAppList;
    }

    static synthetic java.util.List access$202(a2dp.Vol.PackagesChooser p0, java.util.List p1)
    {
        p0.mFullAppList = p1;
        return p1;
    }

    static synthetic String[] access$300(a2dp.Vol.PackagesChooser p1)
    {
        return p1.packages;
    }

    static synthetic a2dp.Vol.PackagesChooser$PackageListAdapter access$402(a2dp.Vol.PackagesChooser p0, a2dp.Vol.PackagesChooser$PackageListAdapter p1)
    {
        p0.mListAdapter = p1;
        return p1;
    }

    static synthetic Runnable access$500(a2dp.Vol.PackagesChooser p1)
    {
        return p1.mFinishLoadAndSortTask;
    }

    static synthetic android.os.Handler access$600(a2dp.Vol.PackagesChooser p1)
    {
        return p1.mHandler;
    }

    static synthetic void access$700(a2dp.Vol.PackagesChooser p0)
    {
        p0.initAssignListenersAndAdapter();
        return;
    }

    static synthetic android.widget.ProgressBar access$800(a2dp.Vol.PackagesChooser p1)
    {
        return p1.pb;
    }

    private void cleanup()
    {
        this.packagelist = "";
        int v1 = 0;
        if (this.mFullAppList == null) {
            this.packagelist = "";
        } else {
            if (this.mFullAppList.isEmpty()) {
                this.packagelist = "";
            } else {
                a2dp.Vol.MyApplication v4_3 = this.mFullAppList.iterator();
                while (v4_3.hasNext()) {
                    a2dp.Vol.PackagesChooser$AppInfoCache v2_1 = ((a2dp.Vol.PackagesChooser$AppInfoCache) v4_3.next());
                    if (v2_1.isChecked()) {
                        if (v1 > 0) {
                            this.packagelist = new StringBuilder().append(this.packagelist).append(",").toString();
                        }
                        this.packagelist = new StringBuilder().append(this.packagelist).append(v2_1.getPackageName()).toString();
                    }
                    v1++;
                }
            }
        }
        android.content.SharedPreferences$Editor v0 = this.preferences.edit();
        v0.putString("packages", this.packagelist);
        v0.commit();
        android.content.Intent v3_1 = new android.content.Intent();
        v3_1.setAction("a2dp.vol.Reload");
        this.application.sendBroadcast(v3_1);
        return;
    }

    private void initAssignListenersAndAdapter()
    {
        this.mListView.setAdapter(this.mListAdapter);
        return;
    }

    private void setupActionBar()
    {
        this.getActionBar().setDisplayHomeAsUpEnabled(1);
        return;
    }

    public void onBackPressed()
    {
        this.cleanup();
        super.onBackPressed();
        return;
    }

    protected void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130968576);
        this.setupActionBar();
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(this.application);
        this.packagelist = this.preferences.getString("packages", "com.google.android.talk,com.android.email,com.android.calendar");
        this.packages = this.packagelist.split(",");
        this.pm = this.getPackageManager();
        this.pb = ((android.widget.ProgressBar) this.findViewById(2131361793));
        this.pb.setIndeterminate(1);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p4)
    {
        this.getMenuInflater().inflate(2131296257, p4);
        this.mListView = ((android.widget.ListView) this.findViewById(2131361792));
        new Thread(this.mLoadAppLoadAndSortAppList).start();
        return 1;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        int v0_1;
        switch (p2.getItemId()) {
            case 16908332:
                this.cleanup();
                android.support.v4.app.NavUtils.navigateUpFromSameTask(this);
                v0_1 = 1;
                break;
            default:
                v0_1 = super.onOptionsItemSelected(p2);
        }
        return v0_1;
    }
}
package a2dp.Vol;
public class Preferences extends android.preference.PreferenceActivity {
    public static final String PREFS_NAME = "btVol";
    private a2dp.Vol.MyApplication application;

    public Preferences()
    {
        return;
    }

    public void onContentChanged()
    {
        this.stopService(new android.content.Intent(this, a2dp.Vol.service));
        super.onContentChanged();
        return;
    }

    public void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.addPreferencesFromResource(2131034113);
        return;
    }

    protected void onDestroy()
    {
        this.getSharedPreferences("btVol", 0).edit().commit();
        this.startService(new android.content.Intent(this, a2dp.Vol.service));
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        android.content.Intent v2_1 = new android.content.Intent();
        v2_1.setAction("a2dp.vol.preferences.UPDATED");
        this.application.sendBroadcast(v2_1);
        super.onDestroy();
        return;
    }
}
package a2dp.Vol;
public class ProviderList extends android.app.ListActivity {
    public static String EXTRA_PACKAGE_NAME = "";
    public static String EXTRA_PROVIDER = "";
    public static final String KEY_ID = "_id";
    public static final int MI_TYPE_APPEND_VIEW = 2;
    public static final int MI_TYPE_CUSTOM = 3;
    public static final int MI_TYPE_STANDARD = 1;
    public static int PROVIDER_GOOGLE_LISTEN;
    public static int PROVIDER_HOMESCREEN;
    public static int PROVIDER_HOMESCREEN2;
    public static int PROVIDER_HTC_SENSE;
    public static int PROVIDER_PANDORA;
    public static final String[] P_CUSTOM_DATA_STRINGS;
    public static final String[] P_DATA_KEYS;
    public static final String[] P_EMPTY_LIST_MSGS;
    public static final int[] P_MI_TYPES;
    public static final String[] P_PACKAGE_NAMES;
    public static final String[] P_TITLE_KEYS;
    public static final String[] P_URI_STRINGS;
    public static final String[] P_WHERE_KEYS;
    public static final String[] P_WINDOW_TITLES;
    private android.widget.CursorAdapter mListAdapter;
    private int mProvider;

    static ProviderList()
    {
        a2dp.Vol.ProviderList.PROVIDER_PANDORA = 0;
        a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN = 1;
        a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN2 = 2;
        a2dp.Vol.ProviderList.PROVIDER_GOOGLE_LISTEN = 3;
        a2dp.Vol.ProviderList.PROVIDER_HTC_SENSE = 4;
        String v0_3 = new String[5];
        v0_3[0] = "content://com.pandora.provider/stations";
        v0_3[1] = "content://com.android.launcher.settings/favorites";
        v0_3[2] = "content://com.android.launcher2.settings/favorites";
        v0_3[3] = "content://com.google.android.apps.listen.PodcastProvider/item";
        v0_3[4] = "content://com.htc.launcher.settings/favorites";
        a2dp.Vol.ProviderList.P_URI_STRINGS = v0_3;
        String v0_7 = new String[5];
        v0_7[0] = 0;
        v0_7[1] = 0;
        v0_7[2] = 0;
        v0_7[3] = "http://listen.googlelabs.com/listen?id=@@";
        v0_7[4] = 0;
        a2dp.Vol.ProviderList.P_CUSTOM_DATA_STRINGS = v0_7;
        String v0_9 = new String[5];
        v0_9[0] = "com.pandora.android";
        v0_9[1] = "com.android.launcher";
        v0_9[2] = "com.android.launcher2";
        v0_9[3] = "com.google.android.apps.listen";
        v0_9[4] = "com.htc.launcher";
        a2dp.Vol.ProviderList.P_PACKAGE_NAMES = v0_9;
        String v0_11 = new String[5];
        v0_11[0] = "stationName";
        v0_11[1] = "title";
        v0_11[2] = "title";
        v0_11[3] = "title";
        v0_11[4] = "title";
        a2dp.Vol.ProviderList.P_TITLE_KEYS = v0_11;
        String v0_13 = new String[5];
        v0_13[0] = "stationToken";
        v0_13[1] = "intent";
        v0_13[2] = "intent";
        v0_13[3] = "guid";
        v0_13[4] = "intent";
        a2dp.Vol.ProviderList.P_DATA_KEYS = v0_13;
        String v0_15 = new String[5];
        v0_15[0] = 0;
        v0_15[1] = "intent!=\"\"";
        v0_15[2] = "intent!=\"\"";
        v0_15[3] = 0;
        v0_15[4] = "intent!=\"\"";
        a2dp.Vol.ProviderList.P_WHERE_KEYS = v0_15;
        String v0_17 = new int[5];
        v0_17 = {2, 1, 1, 3, 1};
        a2dp.Vol.ProviderList.P_MI_TYPES = v0_17;
        String v0_19 = new String[5];
        v0_19[0] = "Select a Pandora Favorite...";
        v0_19[1] = "Select a Shortcut from your Home Screen...";
        v0_19[2] = "Select a Shortcut from your Home Screen...";
        v0_19[3] = "Select a Feed from Google\'s Listen";
        v0_19[4] = "Select a Shortcut from your Home Screen...";
        a2dp.Vol.ProviderList.P_WINDOW_TITLES = v0_19;
        String v0_2 = new String[5];
        v0_2[0] = "It looks like you don\'t have any Pandora Radio stations set up. This usually means either Pandora is not installed or you haven\'t logged into it yet. Please try starting Pandora manually and make sure your stations show up, then try again.";
        v0_2[1] = "It looks like there was an error reading the shortcuts from your home screen (or you don\'t have any installed).";
        v0_2[2] = "It looks like there was an error reading the shortcuts from your home screen (or you don\'t have any installed).";
        v0_2[3] = "It looks like you don\'t have any subscriptions set up in Google\'s Listen. Please close AppAlarm and make sure your subscriptions show up in Listen.";
        v0_2[4] = "It looks like there was an error reading the shortcuts from your home screen (or you don\'t have any installed).";
        a2dp.Vol.ProviderList.P_EMPTY_LIST_MSGS = v0_2;
        a2dp.Vol.ProviderList.EXTRA_PROVIDER = "extra_provider";
        a2dp.Vol.ProviderList.EXTRA_PACKAGE_NAME = "extra_package_name";
        return;
    }

    public ProviderList()
    {
        return;
    }

    private android.content.Intent getSelectedIntent(String p7)
    {
        android.content.Intent v3_0 = 0;
        switch (a2dp.Vol.ProviderList.P_MI_TYPES[this.mProvider]) {
            case 1:
                try {
                    v3_0 = android.content.Intent.getIntent(p7);
                } catch (java.io.UnsupportedEncodingException v0) {
                }
                break;
            case 2:
                android.content.Intent v1_1 = new android.content.Intent("android.intent.action.VIEW");
                v1_1.setData(android.net.Uri.withAppendedPath(android.net.Uri.parse(a2dp.Vol.ProviderList.P_URI_STRINGS[this.mProvider]), p7));
                v3_0 = v1_1;
                break;
            case 3:
                android.content.Intent v1_3 = new android.content.Intent("android.intent.action.VIEW");
                try {
                    String v2 = a2dp.Vol.ProviderList.P_CUSTOM_DATA_STRINGS[this.mProvider].replaceAll("@@", java.net.URLEncoder.encode(p7, "UTF-8"));
                } catch (java.io.UnsupportedEncodingException v0) {
                    v0.printStackTrace();
                }
                android.widget.Toast.makeText(this.getBaseContext(), v2, 1).show();
                v1_3.setData(android.net.Uri.parse(v2));
                v3_0 = v1_3;
                break;
        }
        return v3_0;
    }

    private void loadList()
    {
        try {
            String v1_7 = android.net.Uri.parse(a2dp.Vol.ProviderList.P_URI_STRINGS[this.mProvider]);
            int v2_1 = new String[2];
            v2_1[0] = "_id";
            v2_1[1] = a2dp.Vol.ProviderList.P_TITLE_KEYS[this.mProvider];
            int v3_1 = this.managedQuery(v1_7, v2_1, a2dp.Vol.ProviderList.P_WHERE_KEYS[this.mProvider], 0, a2dp.Vol.ProviderList.P_TITLE_KEYS[this.mProvider]);
        } catch (Exception v7) {
            v7.printStackTrace();
            return;
        } catch (Exception v7) {
        }
        if (v3_1 != 0) {
            String[] v4_4 = new String[1];
            v4_4[0] = a2dp.Vol.ProviderList.P_TITLE_KEYS[this.mProvider];
            int[] v5_5 = new int[1];
            v5_5[0] = 2131361870;
            this.mListAdapter = new android.widget.SimpleCursorAdapter(this, 2130968584, v3_1, v4_4, v5_5);
            this.setListAdapter(this.mListAdapter);
            return;
        } else {
            if (this.mProvider != a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN) {
                if (this.mProvider != a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN2) {
                    return;
                } else {
                    android.util.Log.d("AppAlarm", "Error reading from Launcher2, trying Sense");
                    this.mProvider = a2dp.Vol.ProviderList.PROVIDER_HTC_SENSE;
                    this.loadList();
                    return;
                }
            } else {
                android.util.Log.d("AppAlarm", "Error reading from Launcher1, trying Launcher2");
                this.mProvider = a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN2;
                this.loadList();
                return;
            }
        }
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        this.setContentView(2130968585);
        super.onConfigurationChanged(p2);
        try {
            this.setListAdapter(this.mListAdapter);
        } catch (Exception v0) {
        }
        return;
    }

    protected void onCreate(android.os.Bundle p4)
    {
        this.setContentView(2130968585);
        super.onCreate(p4);
        this.mProvider = this.getIntent().getIntExtra(a2dp.Vol.ProviderList.EXTRA_PROVIDER, 0);
        this.setTitle(a2dp.Vol.ProviderList.P_WINDOW_TITLES[this.mProvider]);
        ((android.widget.TextView) this.getListView().getEmptyView()).setText(a2dp.Vol.ProviderList.P_EMPTY_LIST_MSGS[this.mProvider]);
        this.loadList();
        return;
    }

    protected void onListItemClick(android.widget.ListView p11, android.view.View p12, int p13, long p14)
    {
        this = super.onListItemClick(p11, p12, p13, p14);
        String v0_0 = this.getContentResolver();
        String v1_10 = android.net.Uri.parse(a2dp.Vol.ProviderList.P_URI_STRINGS[this.mProvider]);
        int v2_3 = new String[2];
        v2_3[0] = a2dp.Vol.ProviderList.P_TITLE_KEYS[this.mProvider];
        v2_3[1] = a2dp.Vol.ProviderList.P_DATA_KEYS[this.mProvider];
        android.database.Cursor v6 = v0_0.query(v1_10, v2_3, new StringBuilder().append("_id=").append(p14).toString(), 0, 0);
        v6.moveToFirst();
        String v9 = v6.getString(v6.getColumnIndexOrThrow(a2dp.Vol.ProviderList.P_TITLE_KEYS[this.mProvider]));
        String v7 = v6.getString(v6.getColumnIndexOrThrow(a2dp.Vol.ProviderList.P_DATA_KEYS[this.mProvider]));
        v6.close();
        android.content.Intent v8_1 = new android.content.Intent();
        v8_1.putExtra("android.intent.extra.shortcut.NAME", v9);
        if ((this.mProvider != a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN) && ((this.mProvider != a2dp.Vol.ProviderList.PROVIDER_HOMESCREEN2) && (this.mProvider != a2dp.Vol.ProviderList.PROVIDER_HTC_SENSE))) {
            v8_1.putExtra(a2dp.Vol.ProviderList.EXTRA_PACKAGE_NAME, a2dp.Vol.ProviderList.P_PACKAGE_NAMES[this.mProvider]);
        }
        v8_1.putExtra("android.intent.extra.shortcut.INTENT", this.getSelectedIntent(v7));
        this.setResult(-1, v8_1);
        this.finish();
        return;
    }
}
package a2dp.Vol;
public final class R$array {
    public static final int PrefsNotifyItems = 2131099648;
    public static final int PrefsNotifyOptions = 2131099649;
    public static final int gpsDistance = 2131099650;
    public static final int gpsDistance_items = 2131099651;
    public static final int gpsTimeout = 2131099652;
    public static final int gpsTimeout_items = 2131099653;

    public R$array()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$attr {

    public R$attr()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$dimen {
    public static final int activity_horizontal_margin = 2131230720;
    public static final int activity_vertical_margin = 2131230721;

    public R$dimen()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$drawable {
    public static final int car2 = 2130837504;
    public static final int headset = 2130837505;
    public static final int ic_launcher = 2130837506;
    public static final int icon5 = 2130837507;
    public static final int jack = 2130837508;
    public static final int usb = 2130837509;

    public R$drawable()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$id {
    public static final int Button01 = 2131361856;
    public static final int DelData = 2131361873;
    public static final int EditDevCancelbutton = 2131361851;
    public static final int EditDevSavebutton = 2131361852;
    public static final int Exit = 2131361875;
    public static final int ExportLoc = 2131361865;
    public static final int ImportDBButton = 2131361864;
    public static final int LinearLayout1 = 2131361815;
    public static final int LinearLayout2 = 2131361829;
    public static final int ListView01 = 2131361858;
    public static final int Locationbtn = 2131361855;
    public static final int Manage_data = 2131361874;
    public static final int Output = 2131361868;
    public static final int PackagelistView1 = 2131361792;
    public static final int Path = 2131361866;
    public static final int SMSdelayseekBar = 2131361817;
    public static final int SMSdelaytextView = 2131361816;
    public static final int ServButton = 2131361857;
    public static final int TableRow01 = 2131361853;
    public static final int TableRow02 = 2131361854;
    public static final int TableRow03 = 2131361860;
    public static final int TableRow04 = 2131361863;
    public static final int TextView01 = 2131361867;
    public static final int VolDelaySeekBar = 2131361831;
    public static final int VolDelayTextView = 2131361830;
    public static final int WidgetButton = 2131361871;
    public static final int action_settings = 2131361878;
    public static final int appKillCheckbox = 2131361838;
    public static final int appRestartCheckbox = 2131361837;
    public static final int autoVolcheckBox = 2131361826;
    public static final int checkBox1 = 2131361869;
    public static final int checkBoxLaunchCar = 2131361840;
    public static final int checkBoxSleep = 2131361839;
    public static final int checkCaptLoc = 2131361810;
    public static final int checkSetVol = 2131361823;
    public static final int checkSetpv = 2131361832;
    public static final int checkwifi = 2131361811;
    public static final int chooseAppButton = 2131361835;
    public static final int chooseBTbutton = 2131361841;
    public static final int ci_btn_cancel = 2131361805;
    public static final int ci_btn_ok = 2131361803;
    public static final int ci_btn_test = 2131361804;
    public static final int ci_et_action = 2131361800;
    public static final int ci_et_data = 2131361801;
    public static final int ci_et_type = 2131361802;
    public static final int editApp = 2131361836;
    public static final int editBtConnect = 2131361842;
    public static final int editDesc2 = 2131361809;
    public static final int enableTTSBox = 2131361813;
    public static final int exportdbtosdbutton = 2131361861;
    public static final int exportdbxmltosdbutton = 2131361862;
    public static final int help = 2131361876;
    public static final int iconradio0 = 2131361845;
    public static final int iconradio1 = 2131361846;
    public static final int iconradio2 = 2131361847;
    public static final int iconradio3 = 2131361848;
    public static final int iconradio4 = 2131361849;
    public static final int linearLayout2 = 2131361850;
    public static final int m_btn_clear = 2131361796;
    public static final int m_btn_search = 2131361795;
    public static final int m_et_search = 2131361794;
    public static final int m_lv_packages = 2131361797;
    public static final int packages = 2131361877;
    public static final int pi_iv_icon = 2131361798;
    public static final int pi_tv_name = 2131361799;
    public static final int prefs = 2131361872;
    public static final int progressBar1 = 2131361793;
    public static final int psi_tv_station_name = 2131361870;
    public static final int pushNamesButton = 2131361859;
    public static final int radioGroupIcon = 2131361844;
    public static final int radioGroupStream = 2131361819;
    public static final int rampBox = 2131361827;
    public static final int scrollView1 = 2131361806;
    public static final int seekBarVol = 2131361825;
    public static final int seekPhoneVol = 2131361834;
    public static final int silentBox = 2131361812;
    public static final int streamradio0 = 2131361820;
    public static final int streamradio1 = 2131361821;
    public static final int streamradio2 = 2131361822;
    public static final int tableLayout1 = 2131361807;
    public static final int textView2 = 2131361808;
    public static final int textView4 = 2131361843;
    public static final int textViewInCallVol = 2131361833;
    public static final int textViewMediaDelay = 2131361828;
    public static final int textViewMediaVolume = 2131361824;
    public static final int textViewStream = 2131361818;
    public static final int textViewTTSDelay = 2131361814;

    public R$id()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$layout {
    public static final int activity_packages_chooser = 2130968576;
    public static final int app_list = 2130968577;
    public static final int app_list_item = 2130968578;
    public static final int custom_intent = 2130968579;
    public static final int edit_item = 2130968580;
    public static final int main = 2130968581;
    public static final int managedata = 2130968582;
    public static final int package_list_item = 2130968583;
    public static final int pandora_station_item = 2130968584;
    public static final int pandora_station_list = 2130968585;
    public static final int widgetlayout = 2130968586;

    public R$layout()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$menu {
    public static final int menu = 2131296256;
    public static final int packages_chooser = 2131296257;

    public R$menu()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$mipmap {
    public static final int car = 2130903040;
    public static final int ic_launcher = 2130903041;
    public static final int jack = 2130903042;

    public R$mipmap()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$string {
    public static final int Bonded = 2131165184;
    public static final int Bonding = 2131165185;
    public static final int Class = 2131165186;
    public static final int Delete = 2131165187;
    public static final int DeleteDataMsg = 2131165188;
    public static final int Edit = 2131165189;
    public static final int EditPhoneVolume = 2131165190;
    public static final int Editsetpv = 2131165191;
    public static final int Error = 2131165192;
    public static final int ExportDB = 2131165193;
    public static final int ExportLocation = 2131165194;
    public static final int ExportXML = 2131165195;
    public static final int FindDevices = 2131165196;
    public static final int GetLocButtonString = 2131165197;
    public static final int ImportCompletedText = 2131165198;
    public static final int ImportDB = 2131165199;
    public static final int ListName = 2131165200;
    public static final int LocationString = 2131165201;
    public static final int MediaVolume = 2131165202;
    public static final int MenuDeleteData = 2131165203;
    public static final int MenuExit = 2131165204;
    public static final int MenuHelp = 2131165205;
    public static final int MenuPrefs = 2131165206;
    public static final int MenumanageData = 2131165207;
    public static final int No = 2131165208;
    public static final int NoData = 2131165209;
    public static final int NobtSupport = 2131165210;
    public static final int NotBonded = 2131165211;
    public static final int OK = 2131165212;
    public static final int PackagesTitle = 2131165213;
    public static final int PrefsBootstart = 2131165214;
    public static final int PrefsBootstartOFF = 2131165215;
    public static final int PrefsBootstartON = 2131165216;
    public static final int PrefsCarMode = 2131165217;
    public static final int PrefsCarModeOFF = 2131165218;
    public static final int PrefsCarModeON = 2131165219;
    public static final int PrefsCatGPS = 2131165220;
    public static final int PrefsCatGen = 2131165221;
    public static final int PrefsGPSInaccuracy = 2131165222;
    public static final int PrefsGPSInaccuracyTitle = 2131165223;
    public static final int PrefsGPSTimeout = 2131165224;
    public static final int PrefsGPSTimeoutTitle = 2131165225;
    public static final int PrefsGTalk = 2131165226;
    public static final int PrefsGTalkOFF = 2131165227;
    public static final int PrefsGTalkON = 2131165228;
    public static final int PrefsHeadset = 2131165229;
    public static final int PrefsHeadsetOFF = 2131165230;
    public static final int PrefsHeadsetON = 2131165231;
    public static final int PrefsHideVolUI = 2131165232;
    public static final int PrefsHideVolUiOFF = 2131165233;
    public static final int PrefsHideVolUiON = 2131165234;
    public static final int PrefsHomeDock = 2131165235;
    public static final int PrefsHomeDockOFF = 2131165236;
    public static final int PrefsHomeDockON = 2131165237;
    public static final int PrefsNotificationSummary = 2131165238;
    public static final int PrefsNotify = 2131165239;
    public static final int PrefsNotifySummaryOFF = 2131165240;
    public static final int PrefsNotifySummaryON = 2131165241;
    public static final int PrefsNotifyTitle = 2131165242;
    public static final int PrefsOtherConnectedIcon = 2131165243;
    public static final int PrefsPower = 2131165244;
    public static final int PrefsPowerOFF = 2131165245;
    public static final int PrefsPowerON = 2131165246;
    public static final int PrefsTTS = 2131165247;
    public static final int PrefsTTSOFF = 2131165248;
    public static final int PrefsTTSON = 2131165249;
    public static final int PrefsToasts = 2131165250;
    public static final int PrefsToastsOFF = 2131165251;
    public static final int PrefsToastsON = 2131165252;
    public static final int PrefsToastsSummary = 2131165253;
    public static final int PrefsUseLocalStorage = 2131165254;
    public static final int PrefsUseLocalStorageOFF = 2131165255;
    public static final int PrefsUseLocatStorageON = 2131165256;
    public static final int PrefsVolAdjDelaySummary = 2131165257;
    public static final int PrefsVolRampTitle = 2131165258;
    public static final int SMSAlarmStream = 2131165259;
    public static final int SMSDelayText = 2131165260;
    public static final int SMSMusicStream = 2131165261;
    public static final int SMSVoiceStream = 2131165262;
    public static final int SMS_Stream_desc = 2131165263;
    public static final int ServRunning = 2131165264;
    public static final int ServiceStarted = 2131165265;
    public static final int ServiceStopped = 2131165266;
    public static final int StartService = 2131165267;
    public static final int StopService = 2131165268;
    public static final int TTSNotReady = 2131165269;
    public static final int TTSready = 2131165270;
    public static final int Yes = 2131165271;
    public static final int accessDescription = 2131165272;
    public static final int action_settings = 2131165273;
    public static final int ae_stop_app_warning_message = 2131165274;
    public static final int ae_stop_app_warning_title = 2131165275;
    public static final int app_kill = 2131165276;
    public static final int app_name = 2131165277;
    public static final int app_not_found = 2131165278;
    public static final int app_restart = 2131165279;
    public static final int askContacts = 2131165310;
    public static final int askLocation = 2131165311;
    public static final int askPhone = 2131165312;
    public static final int askSetPerm = 2131165313;
    public static final int askSms = 2131165314;
    public static final int askStorage = 2131165315;
    public static final int audioJackName = 2131165280;
    public static final int btEnableFail = 2131165281;
    public static final int btNotOn = 2131165282;
    public static final int carDockName = 2131165283;
    public static final int connectBT = 2131165284;
    public static final int connectedTo = 2131165285;
    public static final int deviceName = 2131165286;
    public static final int ea_ti_app = 2131165287;
    public static final int enableGPS = 2131165288;
    public static final int getLoc = 2131165289;
    public static final int homeDockName = 2131165290;
    public static final int ignoreTTSMissing = 2131165291;
    public static final int launchCarMode = 2131165292;
    public static final int msgTemplate = 2131165293;
    public static final int needStorage = 2131165316;
    public static final int needTTS = 2131165294;
    public static final int powerPlugName = 2131165295;
    public static final int pushBtNamesButtonText = 2131165317;
    public static final int rememberMediaVol = 2131165296;
    public static final int save = 2131165297;
    public static final int setVol = 2131165298;
    public static final int silentMode = 2131165299;
    public static final int sleepAfterLaunch = 2131165300;
    public static final int startApp = 2131165301;
    public static final int title_activity_packages_chooser = 2131165302;
    public static final int useNetworkOFF = 2131165303;
    public static final int useNetworkON = 2131165304;
    public static final int useNetworkTitle = 2131165305;
    public static final int usePassiveOff = 2131165306;
    public static final int usePassiveOn = 2131165307;
    public static final int usePassiveTitle = 2131165308;
    public static final int wifiDisconnect = 2131165309;

    public R$string()
    {
        return;
    }
}
package a2dp.Vol;
public final class R$xml {
    public static final int accessconfig = 2131034112;
    public static final int preferences = 2131034113;
    public static final int widget = 2131034114;

    public R$xml()
    {
        return;
    }
}
package a2dp.Vol;
public final class R {

    public R()
    {
        return;
    }
}
package a2dp.Vol;
public class Starter extends android.content.BroadcastReceiver {
    public static final String PREFS_NAME = "a2dp.Vol_preferences";
    android.content.SharedPreferences preferences;

    public Starter()
    {
        return;
    }

    public void onReceive(android.content.Context p4, android.content.Intent p5)
    {
        this.preferences = p4.getSharedPreferences("a2dp.Vol_preferences", 0);
        if (this.preferences.getBoolean("bootstart", 0)) {
            p4.startService(new android.content.Intent(p4, a2dp.Vol.service));
        }
        return;
    }
}
package a2dp.Vol;
 class StoreLoc$1 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.StoreLoc this$0;

    StoreLoc$1(a2dp.Vol.StoreLoc p1, long p2, long p4)
    {
        this.this$0 = p1;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        a2dp.Vol.StoreLoc.access$200(this.this$0, 1);
        return;
    }

    public void onTick(long p8)
    {
        if (a2dp.Vol.StoreLoc.access$000(this.this$0)) {
            android.widget.Toast.makeText(a2dp.Vol.StoreLoc.access$100(this.this$0), new StringBuilder().append("Time left: ").append(((20 + p8) / 1000)).toString(), 1).show();
        }
        return;
    }
}
package a2dp.Vol;
 class StoreLoc$2 implements android.location.LocationListener {
    final synthetic a2dp.Vol.StoreLoc this$0;

    StoreLoc$2(a2dp.Vol.StoreLoc p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onLocationChanged(android.location.Location p2)
    {
        this.this$0.grabGPS();
        return;
    }

    public void onProviderDisabled(String p1)
    {
        return;
    }

    public void onProviderEnabled(String p1)
    {
        return;
    }

    public void onStatusChanged(String p1, int p2, android.os.Bundle p3)
    {
        return;
    }
}
package a2dp.Vol;
public class StoreLoc extends android.app.Service {
    private static final String LOG_TAG = "A2DP_Volume";
    public static final String PREFS_NAME = "btVol";
    private a2dp.Vol.DeviceDB DB;
    float MAX_ACC;
    long MAX_TIME;
    String a2dpDir;
    private a2dp.Vol.MyApplication application;
    a2dp.Vol.btDevice btdConn;
    Long dtime;
    int formatFlags;
    int formatFlags2;
    boolean gpsEnabled;
    android.location.Location l;
    android.location.Location l3;
    android.location.Location l4;
    boolean local;
    android.location.LocationListener locationListener;
    private android.location.LocationManager locationManager;
    android.content.SharedPreferences preferences;
    private boolean toasts;
    private boolean useNet;
    private boolean usePass;

    public StoreLoc()
    {
        this.MAX_ACC = 1101004800;
        this.MAX_TIME = 10000;
        this.toasts = 1;
        this.usePass = 0;
        this.useNet = 1;
        this.a2dpDir = "";
        this.dtime = 0;
        this.l = 0;
        this.l3 = 0;
        this.l4 = 0;
        this.gpsEnabled = 0;
        this.locationListener = new a2dp.Vol.StoreLoc$2(this);
        return;
    }

    static synthetic boolean access$000(a2dp.Vol.StoreLoc p1)
    {
        return p1.toasts;
    }

    static synthetic a2dp.Vol.MyApplication access$100(a2dp.Vol.StoreLoc p1)
    {
        return p1.application;
    }

    static synthetic void access$200(a2dp.Vol.StoreLoc p0, boolean p1)
    {
        p0.clearLoc(p1);
        return;
    }

    private void clearLoc(boolean p14)
    {
        if ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_FINE_LOCATION") == 0) || (android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_COARSE_LOCATION") == 0)) {
            this.locationManager.removeUpdates(this.locationListener);
            String v0 = "My Car";
            java.text.DecimalFormat v1_1 = new java.text.DecimalFormat("#.#");
            if (this.btdConn != null) {
                v0 = this.btdConn.getDesc2();
            }
            try {
                java.io.File v3_1 = new java.io.File(this.a2dpDir);
            } catch (Exception v2_4) {
                android.widget.Toast.makeText(this.application, "FileNotFound", 1).show();
                v2_4.printStackTrace();
                android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v2_4.getMessage()).toString());
                this.l = 0;
                this.l3 = 0;
                this.l4 = 0;
                this.btdConn = 0;
                this.stopSelf();
            } catch (Exception v2_3) {
                android.widget.Toast.makeText(this.application, "IOException", 1).show();
                v2_3.printStackTrace();
                android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v2_3.getMessage()).toString());
            }
            if (!v3_1.exists()) {
                v3_1.mkdirs();
            }
            String v7_0;
            java.io.File v4_1 = new java.io.File(v3_1, new StringBuilder().append(v0.replaceAll(" ", "_")).append(".html").toString());
            if (this.l4 == null) {
                v7_0 = new StringBuilder().append("No Best Location Captured ").append(android.text.format.DateUtils.formatDateTime(this.application, this.dtime.longValue(), this.formatFlags)).append("<br>").toString();
            } else {
                String v6_5 = android.text.format.DateUtils.formatDateTime(this.application, this.l4.getTime(), this.formatFlags);
                try {
                    String v8_0 = java.net.URLEncoder.encode(new StringBuilder().append(this.l4.getLatitude()).append(",").append(this.l4.getLongitude()).append("(").append(v0).append(" ").append(v6_5).append(" acc=").append(v1_1.format(((double) this.l4.getAccuracy()))).append(")").toString(), "UTF-8");
                } catch (Exception v2_0) {
                    v8_0 = java.net.URLEncoder.encode(new StringBuilder().append(this.l4.getLatitude()).append(",").append(this.l4.getLongitude()).append("(").append(v0).append(" ").append(v6_5).append(" acc=").append(v1_1.format(((double) this.l4.getAccuracy()))).append(")").toString());
                    v2_0.printStackTrace();
                }
                v7_0 = new StringBuilder().append("<hr /><bold><a href=\"http://maps.google.com/maps?q=").append(v8_0).append("\">").append(v0).append("</a></bold> Best Location<br>Time: ").append(v6_5).append("<br>Location type: ").append(this.l4.getProvider()).append("<br>Accuracy: ").append(this.l4.getAccuracy()).append(" meters<br>Elevation: ").append(this.l4.getAltitude()).append(" meters<br>Lattitude: ").append(this.l4.getLatitude()).append("<br>Longitude: ").append(this.l4.getLongitude()).toString();
            }
            String v7_1;
            if (this.l3 == null) {
                v7_1 = new StringBuilder().append(v7_0).append("No Most Accurate Location Captured ").append(android.text.format.DateUtils.formatDateTime(this.application, this.dtime.longValue(), this.formatFlags)).append("<br>").toString();
            } else {
                String v6_1 = android.text.format.DateUtils.formatDateTime(this.application, this.l3.getTime(), this.formatFlags);
                try {
                    String v8_1 = java.net.URLEncoder.encode(new StringBuilder().append(this.l3.getLatitude()).append(",").append(this.l3.getLongitude()).append("(").append(v0).append(" ").append(v6_1).append(" acc=").append(v1_1.format(((double) this.l3.getAccuracy()))).append(")").toString(), "UTF-8");
                } catch (Exception v2_1) {
                    v8_1 = java.net.URLEncoder.encode(new StringBuilder().append(this.l3.getLatitude()).append(",").append(this.l3.getLongitude()).append("(").append(v0).append(" ").append(v6_1).append(" acc=").append(v1_1.format(((double) this.l3.getAccuracy()))).append(")").toString());
                    v2_1.printStackTrace();
                }
                v7_1 = new StringBuilder().append(v7_0).append("<hr /><bold><a href=\"http://maps.google.com/maps?q=").append(v8_1).append("\">").append(v0).append("</a></bold> Most Accurate Location<br>Time: ").append(v6_1).append("<br>Location type: ").append(this.l3.getProvider()).append("<br>Accuracy: ").append(this.l3.getAccuracy()).append(" meters<br>Elevation: ").append(this.l3.getAltitude()).append(" meters<br>Lattitude: ").append(this.l3.getLatitude()).append("<br>Longitude: ").append(this.l3.getLongitude()).toString();
            }
            String v7_2;
            if (this.l == null) {
                v7_2 = new StringBuilder().append(v7_1).append("No Most Recent Location Captured ").append(android.text.format.DateUtils.formatDateTime(this.application, this.dtime.longValue(), this.formatFlags)).append("<br>").toString();
            } else {
                String v6_3 = android.text.format.DateUtils.formatDateTime(this.application, this.l.getTime(), this.formatFlags);
                String v8_2 = java.net.URLEncoder.encode(new StringBuilder().append(this.l.getLatitude()).append(",").append(this.l.getLongitude()).append("(").append(v0).append(" ").append(v6_3).append(" acc=").append(v1_1.format(((double) this.l.getAccuracy()))).append(")").toString(), "UTF-8");
                v7_2 = new StringBuilder().append(v7_1).append("<hr /><bold><a href=\"http://maps.google.com/maps?q=").append(v8_2).append("\">").append(v0).append("</a></bold> Most Recent Location<br>Time: ").append(v6_3).append("<br>Location type: ").append(this.l.getProvider()).append("<br>Accuracy: ").append(this.l.getAccuracy()).append(" meters<br>Elevation: ").append(this.l.getAltitude()).append(" meters<br>Lattitude: ").append(this.l.getLatitude()).append("<br>Longitude: ").append(this.l.getLongitude()).toString();
            }
            if (!this.gpsEnabled) {
                v7_2 = new StringBuilder().append(v7_2).append("<br>GPS was not enabled").toString();
            }
            if (!this.local) {
                java.io.FileOutputStream v5_1 = new java.io.FileOutputStream(v4_1);
                v5_1.write(v7_2.getBytes());
                v5_1.close();
            } else {
                java.io.FileOutputStream v5_2 = this.openFileOutput(v4_1.getName(), 1);
                v5_2.write(v7_2.getBytes());
                v5_2.close();
            }
        }
        return;
    }

    private void registerListeners()
    {
        if (!this.locationManager.isProviderEnabled("gps")) {
            this.gpsEnabled = 0;
            if ((this.useNet) && (this.locationManager.isProviderEnabled("network"))) {
                this.locationManager.requestLocationUpdates("network", 0, 0, this.locationListener);
            }
            if ((this.usePass) && (this.locationManager.isProviderEnabled("passive"))) {
                this.locationManager.requestLocationUpdates("passive", 0, 0, this.locationListener);
            }
        } else {
            if ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_FINE_LOCATION") == 0) || (android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_COARSE_LOCATION") == 0)) {
                this.locationManager.requestLocationUpdates("gps", 0, 0, this.locationListener);
                this.gpsEnabled = 1;
            }
        }
        return;
    }

    protected void finalize()
    {
        this.DB.getDb().close();
        try {
            if (this.locationListener == null) {
                super.finalize();
            } else {
                if ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_FINE_LOCATION") == 0) || (android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_COARSE_LOCATION") == 0)) {
                    this.locationManager.removeUpdates(this.locationListener);
                }
            }
        } catch (Exception v0) {
            v0.printStackTrace();
        }
        return;
    }

    void grabGPS()
    {
        String v6 = "My Car";
        android.location.LocationManager v15_1 = ((android.location.LocationManager) this.getSystemService("location"));
        java.util.List v20 = v15_1.getProviders(1);
        long v8 = 9999999;
        float v17 = 1287568416;
        float v5 = 1287568416;
        if ((this.l4 != null) && (this.l4.hasAccuracy())) {
            v5 = this.l4.getAccuracy();
        }
        if ((this.l3 != null) && (this.l3.hasAccuracy())) {
            v17 = this.l3.getAccuracy();
        }
        if (this.l != null) {
            System.currentTimeMillis();
            this.l.getTime();
        }
        try {
            if (!v20.isEmpty()) {
                int v13 = (v20.size() - 1);
                while (v13 >= 0) {
                    if ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_FINE_LOCATION") == 0) || (android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_COARSE_LOCATION") == 0)) {
                        android.location.Location v14 = v15_1.getLastKnownLocation(((String) v20.get(v13)));
                        if (v14 != null) {
                            if (v14.hasAccuracy()) {
                                float v4 = v14.getAccuracy();
                                if (v4 < v17) {
                                    this.l3 = v14;
                                    v17 = v4;
                                }
                                if ((v4 < v5) && (v14.getTime() > (this.dtime.longValue() - this.MAX_TIME))) {
                                    this.l4 = v14;
                                    v5 = v4;
                                }
                            }
                            long v18 = v8;
                            v8 = (System.currentTimeMillis() - v14.getTime());
                            if (v8 < v18) {
                                this.l = v14;
                            }
                        }
                        v13--;
                    }
                }
                if ((this.locationListener != null) && (this.l4 != null)) {
                    float v23 = this.l4.getAccuracy();
                    if ((v23 < this.MAX_ACC) && ((v23 > 0) && ((System.currentTimeMillis() - this.l4.getTime()) < this.MAX_TIME))) {
                        this.clearLoc(1);
                    }
                }
                java.text.DecimalFormat v7_1 = new java.text.DecimalFormat("#.#");
                if (this.btdConn != null) {
                    v6 = this.btdConn.getDesc2();
                }
                if (this.l4 != null) {
                    String v16_0 = android.text.format.DateUtils.formatDateTime(this.application, this.l4.getTime(), this.formatFlags);
                    try {
                        String v22_0 = java.net.URLEncoder.encode(new StringBuilder().append(this.l4.getLatitude()).append(",").append(this.l4.getLongitude()).append("(").append(v6).append(" ").append(v16_0).append(" acc=").append(v7_1.format(((double) this.l4.getAccuracy()))).append(")").toString(), "UTF-8");
                        try {
                            java.io.FileOutputStream v12_0 = this.openFileOutput("My_Last_Location", 1);
                            v12_0.write(new StringBuilder().append("http://maps.google.com/maps?q=").append(v22_0).toString().getBytes());
                            v12_0.close();
                        } catch (java.io.IOException v10_1) {
                            android.widget.Toast.makeText(this.application, "FileNotFound", 1).show();
                            v10_1.printStackTrace();
                        } catch (java.io.IOException v10_0) {
                            android.widget.Toast.makeText(this.application, "IOException", 1).show();
                            v10_0.printStackTrace();
                        }
                    } catch (java.io.UnsupportedEncodingException v11_0) {
                        v22_0 = java.net.URLEncoder.encode(new StringBuilder().append(this.l4.getLatitude()).append(",").append(this.l4.getLongitude()).append("(").append(v6).append(" ").append(v16_0).append(" acc=").append(v7_1.format(((double) this.l4.getAccuracy()))).append(")").toString());
                        v11_0.printStackTrace();
                    }
                }
                if (this.l3 != null) {
                    String v16_1 = android.text.format.DateUtils.formatDateTime(this.application, this.l3.getTime(), this.formatFlags);
                    try {
                        String v22_1 = java.net.URLEncoder.encode(new StringBuilder().append(this.l3.getLatitude()).append(",").append(this.l3.getLongitude()).append("(").append(v6).append(" ").append(v16_1).append(" acc=").append(v7_1.format(((double) this.l3.getAccuracy()))).append(")").toString(), "UTF-8");
                        try {
                            java.io.FileOutputStream v12_1 = this.openFileOutput("My_Last_Location2", 1);
                            v12_1.write(new StringBuilder().append("http://maps.google.com/maps?q=").append(v22_1).toString().getBytes());
                            v12_1.close();
                        } catch (java.io.IOException v10_3) {
                            android.widget.Toast.makeText(this.application, "FileNotFound", 1).show();
                            v10_3.printStackTrace();
                        } catch (java.io.IOException v10_2) {
                            android.widget.Toast.makeText(this.application, "IOException", 1).show();
                            v10_2.printStackTrace();
                        }
                    } catch (java.io.UnsupportedEncodingException v11_1) {
                        v22_1 = java.net.URLEncoder.encode(new StringBuilder().append(this.l3.getLatitude()).append(",").append(this.l3.getLongitude()).append("(").append(v6).append(" ").append(v16_1).append(" acc=").append(v7_1.format(((double) this.l3.getAccuracy()))).append(")").toString());
                        v11_1.printStackTrace();
                    }
                }
            }
        } catch (java.io.UnsupportedEncodingException v11) {
        }
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return 0;
    }

    public void onCreate()
    {
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.DB = new a2dp.Vol.DeviceDB(this.application);
        this.formatFlags = 524288;
        this.formatFlags = (this.formatFlags | 16);
        this.formatFlags = (this.formatFlags | 1);
        this.formatFlags = (this.formatFlags | 4);
        return;
    }

    public void onDestroy()
    {
        this.DB.getDb().close();
        try {
            if (this.locationListener == null) {
                super.onDestroy();
            } else {
                if ((android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_FINE_LOCATION") == 0) || (android.support.v4.app.ActivityCompat.checkSelfPermission(this, "android.permission.ACCESS_COARSE_LOCATION") == 0)) {
                    this.locationManager.removeUpdates(this.locationListener);
                }
            }
        } catch (Exception v0) {
            v0.printStackTrace();
        }
        return;
    }

    public int onStartCommand(android.content.Intent p11, int p12, int p13)
    {
        try {
            this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(this.application);
            this.toasts = this.preferences.getBoolean("toasts", 1);
            this.usePass = this.preferences.getBoolean("usePassive", 0);
            this.useNet = this.preferences.getBoolean("useNetwork", 1);
            this.MAX_TIME = new Long(this.preferences.getString("gpsTime", "15000")).longValue();
            this.MAX_ACC = new Float(this.preferences.getString("gpsDistance", "10")).floatValue();
            this.local = this.preferences.getBoolean("useLocalStorage", 0);
        } catch (Exception v7_1) {
            this.MAX_ACC = 1092616192;
            this.MAX_TIME = 15000;
            android.widget.Toast.makeText(this, new StringBuilder().append("prefs failed to load. ").append(v7_1.getMessage()).toString(), 1).show();
            v7_1.printStackTrace();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("prefs failed to load ").append(v7_1.getMessage()).toString());
            this.l = 0;
            this.l3 = 0;
            this.l4 = 0;
            try {
                this.btdConn = this.DB.getBTD(p11.getStringExtra("device"));
            } catch (Exception v7_0) {
                android.widget.Toast.makeText(this, new StringBuilder().append("Location service failed to start. ").append(v7_0.getMessage()).toString(), 1).show();
                this.stopSelf();
                v7_0.printStackTrace();
            }
            this.locationManager = ((android.location.LocationManager) this.getSystemService("location"));
            this.dtime = Long.valueOf(System.currentTimeMillis());
            this.registerListeners();
            if (this.MAX_TIME > 0) {
                new a2dp.Vol.StoreLoc$1(this, this.MAX_TIME, 5000).start();
            }
            return super.onStartCommand(p11, p12, p13);
        }
        if (!this.local) {
            this.a2dpDir = new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString();
        } else {
            this.a2dpDir = this.getFilesDir().toString();
        }
    }
}
package a2dp.Vol;
public class Widget extends android.appwidget.AppWidgetProvider {

    public Widget()
    {
        return;
    }

    public void onEnabled(android.content.Context p1)
    {
        super.onEnabled(p1);
        return;
    }

    public void onUpdate(android.content.Context p10, android.appwidget.AppWidgetManager p11, int[] p12)
    {
        int v0 = p12.length;
        int v2 = 0;
        while (v2 < v0) {
            int v1 = p12[v2];
            android.app.PendingIntent v4 = android.app.PendingIntent.getService(p10, 0, new android.content.Intent(p10, a2dp.Vol.ALauncher), 0);
            android.widget.RemoteViews v5_1 = new android.widget.RemoteViews(p10.getPackageName(), 2130968586);
            v5_1.setOnClickPendingIntent(2131361871, v4);
            p11.updateAppWidget(v1, v5_1);
            v2++;
        }
        super.onUpdate(p10, p11, p12);
        return;
    }
}
package a2dp.Vol;
public class btDevice {
    public String appaction;
    public String appdata;
    public boolean appkill;
    public boolean apprestart;
    public String apptype;
    public boolean autovol;
    public String bdevice;
    public boolean carmode;
    public int defVol;
    public String desc1;
    public String desc2;
    public boolean enableTTS;
    public boolean enablegps;
    public boolean getLoc;
    public int icon;
    public String mac;
    public int phonev;
    public String pname;
    public boolean setV;
    public boolean setpv;
    public boolean silent;
    public boolean sleep;
    public int smsdelay;
    public int smsstream;
    public int voldelay;
    public boolean volramp;
    public boolean wifi;

    public btDevice()
    {
        return;
    }

    public String getAppaction()
    {
        return this.appaction;
    }

    public String getAppdata()
    {
        return this.appdata;
    }

    public String getApptype()
    {
        return this.apptype;
    }

    public String getBdevice()
    {
        return this.bdevice;
    }

    public int getDefVol()
    {
        return this.defVol;
    }

    public String getDesc1()
    {
        return this.desc1;
    }

    public String getDesc2()
    {
        return this.desc2;
    }

    public int getIcon()
    {
        return this.icon;
    }

    public String getMac()
    {
        return this.mac;
    }

    public int getPhonev()
    {
        return this.phonev;
    }

    public String getPname()
    {
        return this.pname;
    }

    public int getSmsdelay()
    {
        return this.smsdelay;
    }

    public int getSmsstream()
    {
        return this.smsstream;
    }

    public int getVoldelay()
    {
        return this.voldelay;
    }

    public boolean hasIntent()
    {
        int v0 = 0;
        if (((this.pname != null) && ((this.appdata != null) && ((this.pname.length() >= 3) || (this.appdata.length() >= 3)))) && ((!this.pname.equalsIgnoreCase("Custom")) || (this.appdata.length() >= 3))) {
            v0 = 1;
        }
        return v0;
    }

    public boolean isAppkill()
    {
        return this.appkill;
    }

    public boolean isApprestart()
    {
        return this.apprestart;
    }

    public boolean isAutovol()
    {
        return this.autovol;
    }

    public boolean isCarmode()
    {
        return this.carmode;
    }

    public boolean isEnableTTS()
    {
        return this.enableTTS;
    }

    public boolean isEnablegps()
    {
        return this.enablegps;
    }

    public boolean isGetLoc()
    {
        return this.getLoc;
    }

    public boolean isSetV()
    {
        return this.setV;
    }

    public boolean isSetpv()
    {
        return this.setpv;
    }

    public boolean isSilent()
    {
        return this.silent;
    }

    public boolean isSleep()
    {
        return this.sleep;
    }

    public boolean isVolramp()
    {
        return this.volramp;
    }

    public boolean isWifi()
    {
        return this.wifi;
    }

    public long islEnableTTS()
    {
        long v0_1;
        if (!this.enableTTS) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long islGetLoc()
    {
        long v0_1;
        if (!this.getLoc) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long islSetV()
    {
        long v0_1;
        if (!this.isSetV()) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long islSetpv()
    {
        long v0_1;
        if (!this.isSetpv()) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long islWifi()
    {
        long v0_1;
        if (!this.wifi) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lAppkill()
    {
        long v0_1;
        if (!this.appkill) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lApprestart()
    {
        long v0_1;
        if (!this.apprestart) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lVolramp()
    {
        long v0_1;
        if (!this.isVolramp()) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lautovol()
    {
        long v0_1;
        if (!this.autovol) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lcarmode()
    {
        long v0_1;
        if (!this.carmode) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lenablegps()
    {
        long v0_1;
        if (!this.enablegps) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lsilent()
    {
        long v0_1;
        if (!this.silent) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public long lsleep()
    {
        long v0_1;
        if (!this.sleep) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void setAppaction(String p1)
    {
        this.appaction = p1;
        return;
    }

    public void setAppdata(String p1)
    {
        this.appdata = p1;
        return;
    }

    public void setAppkill(int p2)
    {
        if (p2 <= 0) {
            this.appkill = 0;
        } else {
            this.appkill = 1;
        }
        return;
    }

    public void setAppkill(boolean p1)
    {
        this.appkill = p1;
        return;
    }

    public void setApprestart(int p2)
    {
        if (p2 <= 0) {
            this.apprestart = 0;
        } else {
            this.apprestart = 1;
        }
        return;
    }

    public void setApprestart(boolean p1)
    {
        this.apprestart = p1;
        return;
    }

    public void setApptype(String p1)
    {
        this.apptype = p1;
        return;
    }

    public void setAutovol(int p2)
    {
        if (p2 <= 0) {
            this.autovol = 0;
        } else {
            this.autovol = 1;
        }
        return;
    }

    public void setAutovol(boolean p1)
    {
        this.autovol = p1;
        return;
    }

    public void setBdevice(String p1)
    {
        this.bdevice = p1;
        return;
    }

    public void setBluetoothDevice(android.bluetooth.BluetoothDevice p5, String p6, int p7)
    {
        this.desc1 = p5.getName();
        this.desc2 = a2dp.Vol.FileNameCleaner.cleanFileName(p6);
        this.mac = p5.getAddress();
        this.setV = 1;
        this.defVol = p7;
        this.getLoc = 1;
        this.pname = "";
        this.bdevice = "";
        this.wifi = 0;
        this.appaction = "";
        this.appdata = "";
        this.apptype = "";
        this.apprestart = 0;
        this.appkill = 1;
        this.enableTTS = 0;
        this.phonev = 10;
        this.setpv = 0;
        this.setIcon(2130837504);
        this.autovol = 0;
        this.smsdelay = 6;
        this.volramp = 0;
        this.voldelay = 6;
        this.silent = 0;
        this.carmode = 0;
        this.sleep = 0;
        return;
    }

    public void setBluetoothDevice(String p5, String p6, String p7, int p8)
    {
        this.desc1 = p5;
        this.desc2 = a2dp.Vol.FileNameCleaner.cleanFileName(p6);
        this.mac = p7;
        this.setV = 1;
        this.defVol = p8;
        this.getLoc = 1;
        this.pname = "";
        this.bdevice = "";
        this.wifi = 0;
        this.appaction = "";
        this.appdata = "";
        this.apptype = "";
        this.apprestart = 0;
        this.appkill = 1;
        this.enableTTS = 0;
        this.phonev = 10;
        this.setpv = 0;
        this.setIcon(2130837504);
        this.autovol = 0;
        this.smsdelay = 6;
        this.volramp = 0;
        this.voldelay = 6;
        this.silent = 0;
        this.carmode = 0;
        this.sleep = 0;
        return;
    }

    public void setCarmode(int p2)
    {
        if (p2 <= 0) {
            this.carmode = 0;
        } else {
            this.carmode = 1;
        }
        return;
    }

    public void setCarmode(boolean p1)
    {
        this.carmode = p1;
        return;
    }

    public void setDefVol(int p1)
    {
        this.defVol = p1;
        return;
    }

    public void setDesc1(String p1)
    {
        this.desc1 = p1;
        return;
    }

    public void setDesc2(String p2)
    {
        this.desc2 = a2dp.Vol.FileNameCleaner.cleanFileName(p2);
        return;
    }

    public void setEnableTTS(int p2)
    {
        if (p2 <= 0) {
            this.enableTTS = 0;
        } else {
            this.enableTTS = 1;
        }
        return;
    }

    public void setEnableTTS(boolean p1)
    {
        this.enableTTS = p1;
        return;
    }

    public void setEnablegps(int p2)
    {
        if (p2 <= 0) {
            this.enablegps = 0;
        } else {
            this.enablegps = 1;
        }
        return;
    }

    public void setEnablegps(boolean p1)
    {
        this.enablegps = p1;
        return;
    }

    public void setGetLoc(int p2)
    {
        if (p2 < 1) {
            this.getLoc = 0;
        } else {
            this.getLoc = 1;
        }
        return;
    }

    public void setGetLoc(boolean p1)
    {
        this.getLoc = p1;
        return;
    }

    public void setIcon(int p1)
    {
        this.icon = p1;
        return;
    }

    public void setMac(String p1)
    {
        this.mac = p1;
        return;
    }

    public void setPhonev(int p1)
    {
        this.phonev = p1;
        return;
    }

    public void setPname(String p1)
    {
        this.pname = p1;
        return;
    }

    public void setSetV(int p2)
    {
        if (p2 <= 0) {
            this.setV = 0;
        } else {
            this.setV = 1;
        }
        return;
    }

    public void setSetV(boolean p1)
    {
        this.setV = p1;
        return;
    }

    public void setSetpv(int p2)
    {
        if (p2 <= 0) {
            this.setpv = 0;
        } else {
            this.setpv = 1;
        }
        return;
    }

    public void setSetpv(boolean p1)
    {
        this.setpv = p1;
        return;
    }

    public void setSilent(int p2)
    {
        if (p2 <= 0) {
            this.silent = 0;
        } else {
            this.silent = 1;
        }
        return;
    }

    public void setSilent(boolean p1)
    {
        this.silent = p1;
        return;
    }

    public void setSleep(int p2)
    {
        if (p2 <= 0) {
            this.sleep = 0;
        } else {
            this.sleep = 1;
        }
        return;
    }

    public void setSleep(boolean p1)
    {
        this.sleep = p1;
        return;
    }

    public void setSmsdelay(int p1)
    {
        this.smsdelay = p1;
        return;
    }

    public void setSmsstream(int p1)
    {
        this.smsstream = p1;
        return;
    }

    public void setVoldelay(int p1)
    {
        this.voldelay = p1;
        return;
    }

    public void setVolramp(int p2)
    {
        if (p2 <= 0) {
            this.volramp = 0;
        } else {
            this.volramp = 1;
        }
        return;
    }

    public void setVolramp(boolean p1)
    {
        this.volramp = p1;
        return;
    }

    public void setWifi(int p2)
    {
        if (p2 <= 0) {
            this.wifi = 0;
        } else {
            this.wifi = 1;
        }
        return;
    }

    public void setWifi(boolean p1)
    {
        this.wifi = p1;
        return;
    }

    public String toString()
    {
        String v0_1;
        if (this.desc2 != null) {
            v0_1 = this.desc2;
        } else {
            v0_1 = this.desc1;
        }
        return v0_1;
    }
}
package a2dp.Vol;
 class main$10 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main this$0;
    final synthetic int val$mperm;
    final synthetic String val$permission;

    main$10(a2dp.Vol.main p1, String p2, int p3)
    {
        this.this$0 = p1;
        this.val$permission = p2;
        this.val$mperm = p3;
        return;
    }

    public void onClick(android.content.DialogInterface p5, int p6)
    {
        a2dp.Vol.main v0 = this.this$0;
        String[] v1_1 = new String[1];
        v1_1[0] = this.val$permission;
        android.support.v4.app.ActivityCompat.requestPermissions(v0, v1_1, this.val$mperm);
        return;
    }
}
package a2dp.Vol;
 class main$11 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$11(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package a2dp.Vol;
 class main$12 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$12(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        android.content.Intent v0_1 = new android.content.Intent();
        v0_1.setAction("android.speech.tts.engine.INSTALL_TTS_DATA");
        this.this$0.startActivityForResult(v0_1, 3);
        return;
    }
}
package a2dp.Vol;
 class main$13 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.main this$0;

    main$13(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p3, android.content.Intent p4)
    {
        a2dp.Vol.main.access$900(this.this$0);
        a2dp.Vol.main.access$200(this.this$0, a2dp.Vol.main.access$100(this.this$0));
        return;
    }
}
package a2dp.Vol;
 class main$14 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.main this$0;

    main$14(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p19, android.content.Intent p20)
    {
        boolean v1 = this.this$0.carMode;
        boolean v7 = this.this$0.homeDock;
        boolean v6 = this.this$0.headsetPlug;
        boolean v13 = this.this$0.power;
        try {
            this.this$0.carMode = this.this$0.preferences.getBoolean("car_mode", 0);
            this.this$0.homeDock = this.this$0.preferences.getBoolean("home_dock", 0);
            this.this$0.headsetPlug = this.this$0.preferences.getBoolean("headset", 0);
            this.this$0.power = this.this$0.preferences.getBoolean("power", 0);
            this.this$0.enableTTS = this.this$0.preferences.getBoolean("enableTTS", 0);
        } catch (Exception v4) {
            v4.printStackTrace();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v4.getMessage()).toString());
        }
        if (!this.this$0.preferences.getBoolean("useLocalStorage", 0)) {
            a2dp.Vol.main.access$702(this.this$0, new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString());
        } else {
            a2dp.Vol.main.access$702(this.this$0, this.this$0.getFilesDir().toString());
        }
        java.io.File v5_1 = new java.io.File(a2dp.Vol.main.access$700(this.this$0));
        if (v5_1.exists()) {
            if (((!v1) && (this.this$0.carMode)) || (((!v7) && (this.this$0.homeDock)) || (((!v6) && (this.this$0.headsetPlug)) || ((!v13) && (this.this$0.power))))) {
                a2dp.Vol.main.access$300(this.this$0, 0);
            }
            if (this.this$0.enableTTS) {
                try {
                    android.content.Intent v2_1 = new android.content.Intent();
                    v2_1.setAction("android.speech.tts.engine.CHECK_TTS_DATA");
                    this.this$0.startActivityForResult(v2_1, 3);
                } catch (Exception v3) {
                    v3.printStackTrace();
                }
                java.util.Set v10 = android.support.v4.app.NotificationManagerCompat.getEnabledListenerPackages(this.this$0.getBaseContext());
                Boolean v11 = Boolean.valueOf(0);
                a2dp.Vol.main v14_21 = v10.iterator();
                while (v14_21.hasNext()) {
                    if (((String) v14_21.next()).equalsIgnoreCase("a2dp.Vol")) {
                        v11 = Boolean.valueOf(1);
                    }
                }
                if ((this.this$0.preferences.getBoolean("enableGTalk", 0)) && (!v11.booleanValue())) {
                    this.this$0.startActivity(new android.content.Intent("android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS"));
                }
            }
            return;
        } else {
            v5_1.mkdirs();
        }
    }
}
package a2dp.Vol;
 class main$15 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.main this$0;

    main$15(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p6, android.content.Intent p7)
    {
        try {
            if (!a2dp.Vol.service.run) {
                this.this$0.servrun = 0;
                a2dp.Vol.main.serv.setText(2131165267);
                this.this$0.connects = 0;
            } else {
                this.this$0.servrun = 1;
                a2dp.Vol.main.serv.setText(2131165268);
                a2dp.Vol.main.access$900(this.this$0);
            }
        } catch (Exception v0) {
            v0.printStackTrace();
            this.this$0.servrun = 0;
            a2dp.Vol.main.serv.setText(2131165267);
            this.this$0.connects = 0;
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v0.getMessage()).toString());
        }
        a2dp.Vol.main.access$200(this.this$0, a2dp.Vol.main.access$100(this.this$0));
        return;
    }
}
package a2dp.Vol;
 class main$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$1(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        p1.cancel();
        return;
    }
}
package a2dp.Vol;
 class main$2 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$2(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        if (a2dp.Vol.main.access$000(this.this$0).getDb().isOpen()) {
            a2dp.Vol.main.access$000(this.this$0).deleteAll();
        }
        a2dp.Vol.main.access$200(this.this$0, a2dp.Vol.main.access$100(this.this$0));
        return;
    }
}
package a2dp.Vol;
 class main$3 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$3(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        a2dp.Vol.main.access$300(this.this$0, 1);
        return;
    }
}
package a2dp.Vol;
 class main$4$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main$4 this$1;
    final synthetic String val$car;

    main$4$1(a2dp.Vol.main$4 p1, String p2)
    {
        this.this$1 = p1;
        this.val$car = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p13, int p14)
    {
        java.io.File v2_1 = new java.io.File(a2dp.Vol.main.access$700(this.this$1.this$0));
        if (v2_1.exists()) {
            android.net.Uri v7 = android.net.Uri.parse(new String(new StringBuilder().append("file:///").append(v2_1.getPath()).append("/").append(this.val$car.replaceAll(" ", "_")).append(".html").toString()).trim());
            android.content.Intent v4_1 = new android.content.Intent();
            v4_1.setAction("android.intent.action.VIEW");
            v4_1.setDataAndType(v7, "text/html");
            try {
                this.this$1.this$0.getPackageManager().getPackageInfo("com.android.chrome", 0);
                v4_1.setClassName("com.android.chrome", "com.google.android.apps.chrome.Main");
                try {
                    this.this$1.this$0.startActivity(v4_1);
                } catch (Exception v0) {
                    android.widget.Toast.makeText(a2dp.Vol.main.access$800(this.this$1.this$0), v0.toString(), 1).show();
                    v0.printStackTrace();
                }
            } catch (android.content.pm.PackageManager$NameNotFoundException v1) {
                v4_1.setClassName("com.android.browser", "com.android.browser.BrowserActivity");
                v1.printStackTrace();
            }
        }
        return;
    }
}
package a2dp.Vol;
 class main$4 implements android.widget.AdapterView$OnItemLongClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$4(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onItemLongClick(android.widget.AdapterView p12, android.view.View p13, int p14, long p15)
    {
        int v8_34;
        if (!this.this$0.vec.isEmpty()) {
            android.bluetooth.BluetoothAdapter v5 = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
            new a2dp.Vol.btDevice();
            a2dp.Vol.btDevice v0_1 = ((a2dp.Vol.btDevice) this.this$0.vec.get(p14));
            android.bluetooth.BluetoothDevice v1 = 0;
            if (v5 != null) {
                int v8_29 = v5.getBondedDevices().iterator();
                while (v8_29.hasNext()) {
                    android.bluetooth.BluetoothDevice v4_1 = ((android.bluetooth.BluetoothDevice) v8_29.next());
                    if (v4_1.getAddress().equalsIgnoreCase(v0_1.mac)) {
                        v1 = v4_1;
                    }
                }
            }
            String v6_3;
            android.app.AlertDialog$Builder v2_1 = new android.app.AlertDialog$Builder(this.this$0);
            v2_1.setTitle(v0_1.toString());
            String v3 = v0_1.toString();
            if (v1 == null) {
                v6_3 = ((String) this.this$0.getText(2131165282));
            } else {
                String v6_0 = new StringBuilder().append(v0_1.desc1).append("\n").append(v0_1.mac).append("\n").append(this.this$0.res.getString(2131165184)).toString();
                switch (v1.getBondState()) {
                    case -2147483648:
                        v6_0 = new StringBuilder().append(v6_0).append(" = ").append(this.this$0.res.getString(2131165192)).toString();
                        break;
                    case 10:
                        v6_0 = new StringBuilder().append(v6_0).append(" = ").append(this.this$0.res.getString(2131165211)).toString();
                        break;
                    case 11:
                        v6_0 = new StringBuilder().append(v6_0).append(" = ").append(this.this$0.res.getString(2131165185)).toString();
                        break;
                    case 12:
                        v6_0 = new StringBuilder().append(v6_0).append(" = ").append(this.this$0.res.getString(2131165184)).toString();
                        break;
                }
                v6_3 = new StringBuilder().append(new StringBuilder().append(new StringBuilder().append(v6_0).append("\n").append(this.this$0.res.getString(2131165186)).append(" = ").append(a2dp.Vol.main.access$400(this.this$0, v1)).toString()).append("\nMajor ").append(this.this$0.res.getString(2131165186)).append(" = ").append(a2dp.Vol.main.access$500(this.this$0, v1)).toString()).append("\nService ").append(this.this$0.res.getString(2131165186)).append(" = ").append(a2dp.Vol.main.access$600(this.this$0, v1)).toString();
            }
            v2_1.setMessage(v6_3);
            v2_1.setPositiveButton("OK", 0);
            v2_1.setNeutralButton(2131165201, new a2dp.Vol.main$4$1(this, v3));
            v2_1.show();
            v8_34 = 1;
        } else {
            v8_34 = 0;
        }
        return v8_34;
    }
}
package a2dp.Vol;
 class main$5$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main$5 this$1;
    final synthetic a2dp.Vol.btDevice val$bt2;

    main$5$1(a2dp.Vol.main$5 p1, a2dp.Vol.btDevice p2)
    {
        this.this$1 = p1;
        this.val$bt2 = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        a2dp.Vol.main.access$000(this.this$1.this$0).delete(this.val$bt2);
        a2dp.Vol.main.access$200(this.this$1.this$0, a2dp.Vol.main.access$100(this.this$1.this$0));
        return;
    }
}
package a2dp.Vol;
 class main$5$2 implements android.content.DialogInterface$OnClickListener {
    final synthetic a2dp.Vol.main$5 this$1;
    final synthetic a2dp.Vol.btDevice val$bt;

    main$5$2(a2dp.Vol.main$5 p1, a2dp.Vol.btDevice p2)
    {
        this.this$1 = p1;
        this.val$bt = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        android.content.Intent v0_1 = new android.content.Intent(this.this$1.this$0, a2dp.Vol.EditDevice);
        v0_1.putExtra("btd", this.val$bt.mac);
        this.this$1.this$0.startActivityForResult(v0_1, 4);
        return;
    }
}
package a2dp.Vol;
 class main$5 implements android.widget.AdapterView$OnItemClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$5(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p6, android.view.View p7, int p8, long p9)
    {
        if (!this.this$0.vec.isEmpty()) {
            a2dp.Vol.btDevice v0_1 = ((a2dp.Vol.btDevice) this.this$0.vec.get(p8));
            a2dp.Vol.btDevice v1 = a2dp.Vol.main.access$000(this.this$0).getBTD(v0_1.mac);
            android.app.AlertDialog$Builder v2_1 = new android.app.AlertDialog$Builder(this.this$0);
            v2_1.setTitle(v0_1.toString());
            v2_1.setMessage(new StringBuilder().append(v1.desc1).append("\n").append(v1.desc2).append("\n").append(v1.mac).toString());
            v2_1.setPositiveButton(17039370, 0);
            v2_1.setNegativeButton(2131165187, new a2dp.Vol.main$5$1(this, v1));
            v2_1.setNeutralButton(2131165189, new a2dp.Vol.main$5$2(this, v0_1));
            v2_1.show();
        }
        return;
    }
}
package a2dp.Vol;
 class main$6 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$6(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        this.this$0.Locationbtn();
        return;
    }
}
package a2dp.Vol;
 class main$7 implements android.view.View$OnLongClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$7(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onLongClick(android.view.View p10)
    {
        try {
            byte[] v0 = new byte[250];
            java.io.FileInputStream v2 = this.this$0.openFileInput("My_Last_Location2");
            v2.read(v0);
            v2.close();
            String v3 = new String(v0).trim();
            android.widget.Toast.makeText(this.this$0, v3, 1).show();
            this.this$0.startActivity(new android.content.Intent("android.intent.action.VIEW", android.net.Uri.parse(v3)));
        } catch (java.io.IOException v1_1) {
            android.widget.Toast.makeText(this.this$0, 2131165209, 1).show();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v1_1.getMessage()).toString());
        } catch (java.io.IOException v1_0) {
            android.widget.Toast.makeText(this.this$0, "Some IO issue", 1).show();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v1_0.getMessage()).toString());
        }
        return 0;
    }
}
package a2dp.Vol;
 class main$8 implements android.view.View$OnClickListener {
    final synthetic a2dp.Vol.main this$0;

    main$8(a2dp.Vol.main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        if (!this.this$0.servrun) {
            this.this$0.startService(new android.content.Intent(this.this$0, a2dp.Vol.service));
        } else {
            this.this$0.stopService(new android.content.Intent(this.this$0, a2dp.Vol.service));
        }
        return;
    }
}
package a2dp.Vol;
 class main$9 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.main this$0;

    main$9(a2dp.Vol.main p1, long p2, long p4)
    {
        this.this$0 = p1;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        String v3_0 = 0;
        try {
            if (!a2dp.Vol.service.run) {
                this.this$0.servrun = 0;
                a2dp.Vol.main.serv.setText(2131165267);
            } else {
                this.this$0.servrun = 1;
                a2dp.Vol.main.serv.setText(2131165268);
                a2dp.Vol.main.access$900(this.this$0);
                a2dp.Vol.main.access$200(this.this$0, a2dp.Vol.main.access$100(this.this$0));
            }
        } catch (Exception v0) {
            this.this$0.servrun = v3_0;
            a2dp.Vol.main.serv.setText(2131165267);
            int v2_6 = new StringBuilder().append("error");
            v3_0 = v0.getMessage();
            android.util.Log.e("A2DP_Volume", v2_6.append(v3_0).toString());
        }
        return;
    }

    public void onTick(long p6)
    {
        String v3_0 = 0;
        try {
            if (!a2dp.Vol.service.run) {
                this.this$0.servrun = 0;
                a2dp.Vol.main.serv.setText(2131165267);
            } else {
                this.this$0.servrun = 1;
                a2dp.Vol.main.serv.setText(2131165268);
            }
        } catch (Exception v0) {
            this.this$0.servrun = v3_0;
            a2dp.Vol.main.serv.setText(2131165267);
            int v2_4 = new StringBuilder().append("error");
            v3_0 = v0.getMessage();
            android.util.Log.e("A2DP_Volume", v2_4.append(v3_0).toString());
        }
        return;
    }
}
package a2dp.Vol;
public class main extends android.app.Activity {
    static final int CHECK_TTS = 3;
    static final int EDITED_DATA = 4;
    static final int ENABLE_BLUETOOTH = 1;
    private static final String LOG_TAG = "A2DP_Volume";
    public static final String PREFS_NAME = "btVol";
    static final int RELOAD = 2;
    static android.media.AudioManager am;
    private static int resourceID;
    static android.widget.Button serv;
    private final int PERMISSION_LOCATION;
    private final int PERMISSION_PHONE;
    private final int PERMISSION_READ_CONTACTS;
    private final int PERMISSION_SMS;
    private final int PERMISSION_STORAGE;
    boolean TTSignore;
    private String a2dpDir;
    String activebt;
    private a2dp.Vol.MyApplication application;
    boolean carMode;
    int connects;
    boolean enableTTS;
    boolean headsetPlug;
    boolean homeDock;
    android.widget.ArrayAdapter ladapt;
    String[] lstring;
    android.widget.ListView lvl;
    private final android.content.BroadcastReceiver mReceiver5;
    private final android.content.BroadcastReceiver mReceiver6;
    private a2dp.Vol.DeviceDB myDB;
    boolean power;
    android.content.SharedPreferences preferences;
    android.content.res.Resources res;
    private final android.content.BroadcastReceiver sRunning;
    boolean servrun;
    boolean toasts;
    java.util.Vector vec;

    static main()
    {
        a2dp.Vol.main.am = ((android.media.AudioManager) 0);
        a2dp.Vol.main.resourceID = 17367043;
        return;
    }

    public main()
    {
        this.servrun = 0;
        this.lvl = 0;
        this.vec = new java.util.Vector();
        this.activebt = 0;
        this.lstring = 0;
        this.carMode = 0;
        this.homeDock = 0;
        this.headsetPlug = 0;
        this.power = 0;
        this.enableTTS = 0;
        this.toasts = 1;
        this.TTSignore = 0;
        this.a2dpDir = "";
        this.PERMISSION_READ_CONTACTS = 1;
        this.PERMISSION_LOCATION = 2;
        this.PERMISSION_PHONE = 3;
        this.PERMISSION_SMS = 4;
        this.PERMISSION_STORAGE = 5;
        this.mReceiver5 = new a2dp.Vol.main$13(this);
        this.mReceiver6 = new a2dp.Vol.main$14(this);
        this.sRunning = new a2dp.Vol.main$15(this);
        return;
    }

    static synthetic a2dp.Vol.DeviceDB access$000(a2dp.Vol.main p1)
    {
        return p1.myDB;
    }

    static synthetic int access$100(a2dp.Vol.main p1)
    {
        return p1.loadFromDB();
    }

    static synthetic void access$200(a2dp.Vol.main p0, int p1)
    {
        p0.refreshList(p1);
        return;
    }

    static synthetic int access$300(a2dp.Vol.main p1, int p2)
    {
        return p1.getBtDevices(p2);
    }

    static synthetic String access$400(a2dp.Vol.main p1, android.bluetooth.BluetoothDevice p2)
    {
        return p1.getBTClassDev(p2);
    }

    static synthetic String access$500(a2dp.Vol.main p1, android.bluetooth.BluetoothDevice p2)
    {
        return p1.getBTClassDevMaj(p2);
    }

    static synthetic String access$600(a2dp.Vol.main p1, android.bluetooth.BluetoothDevice p2)
    {
        return p1.getBTClassServ(p2);
    }

    static synthetic String access$700(a2dp.Vol.main p1)
    {
        return p1.a2dpDir;
    }

    static synthetic String access$702(a2dp.Vol.main p0, String p1)
    {
        p0.a2dpDir = p1;
        return p1;
    }

    static synthetic a2dp.Vol.MyApplication access$800(a2dp.Vol.main p1)
    {
        return p1.application;
    }

    static synthetic void access$900(a2dp.Vol.main p0)
    {
        p0.getConnects();
        return;
    }

    private void askPermission(int p5, int p6, String p7)
    {
        new android.app.AlertDialog$Builder(this).setMessage(p5).setNegativeButton(2131165208, new a2dp.Vol.main$11(this)).setPositiveButton(2131165313, new a2dp.Vol.main$10(this, p7, p6)).show();
        return;
    }

    private void check_permissions(int p8)
    {
        switch (p8) {
            case 1:
                if (android.support.v4.content.ContextCompat.checkSelfPermission(this.application, "android.permission.READ_CONTACTS") == 0) {
                } else {
                    if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.READ_CONTACTS")) {
                        String[] v0_27 = new String[1];
                        v0_27[0] = "android.permission.READ_CONTACTS";
                        android.support.v4.app.ActivityCompat.requestPermissions(this, v0_27, 1);
                    } else {
                        this.askPermission(2131165310, 1, "android.permission.READ_CONTACTS");
                    }
                }
                break;
            case 2:
                if (android.support.v4.content.ContextCompat.checkSelfPermission(this.application, "android.permission.ACCESS_FINE_LOCATION") == 0) {
                } else {
                    if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.ACCESS_FINE_LOCATION")) {
                        String[] v0_21 = new String[1];
                        v0_21[0] = "android.permission.ACCESS_FINE_LOCATION";
                        android.support.v4.app.ActivityCompat.requestPermissions(this, v0_21, 2);
                    } else {
                        this.askPermission(2131165311, 2, "android.permission.ACCESS_FINE_LOCATION");
                    }
                }
                break;
            case 3:
                if (android.support.v4.content.ContextCompat.checkSelfPermission(this.application, "android.permission.READ_PHONE_STATE") == 0) {
                } else {
                    if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.READ_PHONE_STATE")) {
                        String[] v0_14 = new String[1];
                        v0_14[0] = "android.permission.READ_PHONE_STATE";
                        android.support.v4.app.ActivityCompat.requestPermissions(this, v0_14, 3);
                    } else {
                        this.askPermission(2131165312, 3, "android.permission.READ_PHONE_STATE");
                    }
                }
                break;
            case 4:
                if (android.support.v4.content.ContextCompat.checkSelfPermission(this.application, "android.permission.RECEIVE_SMS") == 0) {
                } else {
                    if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.RECEIVE_SMS")) {
                        String[] v0_8 = new String[1];
                        v0_8[0] = "android.permission.RECEIVE_SMS";
                        android.support.v4.app.ActivityCompat.requestPermissions(this, v0_8, 4);
                    } else {
                        this.askPermission(2131165314, 4, "android.permission.RECEIVE_SMS");
                    }
                }
                break;
            case 5:
                if (android.support.v4.content.ContextCompat.checkSelfPermission(this.application, "android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                } else {
                    if (!android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this, "android.permission.WRITE_EXTERNAL_STORAGE")) {
                        String[] v0_2 = new String[1];
                        v0_2[0] = "android.permission.WRITE_EXTERNAL_STORAGE";
                        android.support.v4.app.ActivityCompat.requestPermissions(this, v0_2, 5);
                    } else {
                        this.askPermission(2131165315, 5, "android.permission.WRITE_EXTERNAL_STORAGE");
                    }
                }
                break;
        }
        return;
    }

    private String getBTClassDev(android.bluetooth.BluetoothDevice p6)
    {
        String v1;
        String v0_0 = "";
        if (p6 != null) {
            if (p6.getBluetoothClass().getDeviceClass() == 1056) {
                v0_0 = "Car Audio, ";
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1032) {
                v0_0 = new StringBuilder().append(v0_0).append("Handsfree, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1048) {
                v0_0 = new StringBuilder().append(v0_0).append("Headphones, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1064) {
                v0_0 = new StringBuilder().append(v0_0).append("HiFi Audio, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1044) {
                v0_0 = new StringBuilder().append(v0_0).append("Loudspeaker, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1052) {
                v0_0 = new StringBuilder().append(v0_0).append("Portable Audio, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1076) {
                v0_0 = new StringBuilder().append(v0_0).append("Camcorder, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1060) {
                v0_0 = new StringBuilder().append(v0_0).append("Set Top Box, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1084) {
                v0_0 = new StringBuilder().append(v0_0).append("A/V Display/Speaker, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1080) {
                v0_0 = new StringBuilder().append(v0_0).append("Video Monitor, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1068) {
                v0_0 = new StringBuilder().append(v0_0).append("VCR, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 516) {
                v0_0 = new StringBuilder().append(v0_0).append("Cellular Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 524) {
                v0_0 = new StringBuilder().append(v0_0).append("Smart Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 520) {
                v0_0 = new StringBuilder().append(v0_0).append("Cordless Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 532) {
                v0_0 = new StringBuilder().append(v0_0).append("ISDN Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 528) {
                v0_0 = new StringBuilder().append(v0_0).append("Phone Modem/Gateway, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 512) {
                v0_0 = new StringBuilder().append(v0_0).append("Other Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1028) {
                v0_0 = new StringBuilder().append(v0_0).append("Wearable Headset, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 1024) {
                v0_0 = new StringBuilder().append(v0_0).append("Uncategorized A/V, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 512) {
                v0_0 = new StringBuilder().append(v0_0).append("Uncategorized Phone, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 2048) {
                v0_0 = new StringBuilder().append(v0_0).append("Incategorized Toy, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 260) {
                v0_0 = new StringBuilder().append(v0_0).append("Desktop PC, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 272) {
                v0_0 = new StringBuilder().append(v0_0).append("Handheld PC, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 268) {
                v0_0 = new StringBuilder().append(v0_0).append("Laptop PC, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 276) {
                v0_0 = new StringBuilder().append(v0_0).append("Palm Sized PC/PDA, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 280) {
                v0_0 = new StringBuilder().append(v0_0).append("Wearable PC, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 264) {
                v0_0 = new StringBuilder().append(v0_0).append("Server PC, ").toString();
            }
            if (p6.getBluetoothClass().getDeviceClass() == 256) {
                v0_0 = new StringBuilder().append(v0_0).append("Computer, ").toString();
            }
            String v0_1;
            if (v0_0.length() <= 3) {
                v0_1 = "other";
            } else {
                v0_1 = v0_0.substring(0, (v0_0.length() - 2));
            }
            v1 = v0_1;
        } else {
            v1 = "";
        }
        return v1;
    }

    private String getBTClassDevMaj(android.bluetooth.BluetoothDevice p5)
    {
        String v1;
        String v0_0 = "";
        if (p5 != null) {
            if (p5.getBluetoothClass().getMajorDeviceClass() == 1024) {
                v0_0 = "Audio Video, ";
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 256) {
                v0_0 = new StringBuilder().append(v0_0).append("Computer, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 2304) {
                v0_0 = new StringBuilder().append(v0_0).append("Health, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 0) {
                v0_0 = new StringBuilder().append(v0_0).append("Misc, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 768) {
                v0_0 = new StringBuilder().append(v0_0).append("Networking, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 1280) {
                v0_0 = new StringBuilder().append(v0_0).append("Peripheral, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 512) {
                v0_0 = new StringBuilder().append(v0_0).append("Phone, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 7936) {
                v0_0 = new StringBuilder().append(v0_0).append("Uncategorized, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 1792) {
                v0_0 = new StringBuilder().append(v0_0).append("Wearable, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 2048) {
                v0_0 = new StringBuilder().append(v0_0).append("Toy, ").toString();
            }
            if (p5.getBluetoothClass().getMajorDeviceClass() == 1536) {
                v0_0 = new StringBuilder().append(v0_0).append("Imaging, ").toString();
            }
            String v0_1;
            if (v0_0.length() < 3) {
                v0_1 = "other";
            } else {
                v0_1 = v0_0.substring(0, (v0_0.length() - 2));
            }
            v1 = v0_1;
        } else {
            v1 = "";
        }
        return v1;
    }

    private String getBTClassServ(android.bluetooth.BluetoothDevice p5)
    {
        String v1;
        String v0 = "";
        if (p5 != null) {
            if (p5.getBluetoothClass().hasService(2097152)) {
                v0 = "Audio, ";
            }
            if (p5.getBluetoothClass().hasService(4194304)) {
                v0 = new StringBuilder().append(v0).append("Telophony, ").toString();
            }
            if (p5.getBluetoothClass().hasService(8388608)) {
                v0 = new StringBuilder().append(v0).append("Information, ").toString();
            }
            if (p5.getBluetoothClass().hasService(8192)) {
                v0 = new StringBuilder().append(v0).append("Limited Discoverability, ").toString();
            }
            if (p5.getBluetoothClass().hasService(131072)) {
                v0 = new StringBuilder().append(v0).append("Networking, ").toString();
            }
            if (p5.getBluetoothClass().hasService(1048576)) {
                v0 = new StringBuilder().append(v0).append("Object Transfer, ").toString();
            }
            if (p5.getBluetoothClass().hasService(65536)) {
                v0 = new StringBuilder().append(v0).append("Positioning, ").toString();
            }
            if (p5.getBluetoothClass().hasService(262144)) {
                v0 = new StringBuilder().append(v0).append("Render, ").toString();
            }
            if (p5.getBluetoothClass().hasService(524288)) {
                v0 = new StringBuilder().append(v0).append("Capture, ").toString();
            }
            if (v0.length() > 5) {
                v0 = v0.substring(0, (v0.length() - 2));
            }
            v1 = v0;
        } else {
            v1 = "";
        }
        return v1;
    }

    private int getBtDevices(int p20)
    {
        int v8 = 0;
        this.vec.clear();
        if (this.carMode) {
            a2dp.Vol.btDevice v6_5 = new a2dp.Vol.btDevice();
            v6_5.setBluetoothDevice(this.getString(2131165283), this.getString(2131165283), "1", a2dp.Vol.main.am.getStreamMaxVolume(3));
            a2dp.Vol.btDevice v7_2 = this.myDB.getBTD(v6_5.mac);
            if (v7_2.mac != null) {
                this.vec.add(v7_2);
            } else {
                v6_5.setIcon(2130837504);
                this.myDB.insert(v6_5);
                this.vec.add(v6_5);
            }
            this.refreshList(this.loadFromDB());
        }
        if (this.homeDock) {
            a2dp.Vol.btDevice v6_3 = new a2dp.Vol.btDevice();
            v6_3.setBluetoothDevice(this.getString(2131165290), this.getString(2131165290), "2", a2dp.Vol.main.am.getStreamMaxVolume(3));
            a2dp.Vol.btDevice v7_3 = this.myDB.getBTD(v6_3.mac);
            if (v7_3.mac != null) {
                this.vec.add(v7_3);
            } else {
                v6_3.setGetLoc(0);
                v6_3.setIcon(2130837509);
                this.myDB.insert(v6_3);
                this.vec.add(v6_3);
            }
            this.refreshList(this.loadFromDB());
        }
        if (this.headsetPlug) {
            a2dp.Vol.btDevice v6_7 = new a2dp.Vol.btDevice();
            v6_7.setBluetoothDevice(this.getString(2131165280), this.getString(2131165280), "3", a2dp.Vol.main.am.getStreamMaxVolume(3));
            a2dp.Vol.btDevice v7_0 = this.myDB.getBTD(v6_7.mac);
            if (v7_0.mac != null) {
                this.vec.add(v7_0);
            } else {
                v6_7.setGetLoc(0);
                v6_7.setIcon(2130837508);
                this.myDB.insert(v6_7);
                this.vec.add(v6_7);
            }
            this.refreshList(this.loadFromDB());
        }
        if (this.power) {
            a2dp.Vol.btDevice v6_1 = new a2dp.Vol.btDevice();
            v6_1.setBluetoothDevice(this.getString(2131165295), this.getString(2131165295), "4", a2dp.Vol.main.am.getStreamMaxVolume(3));
            a2dp.Vol.btDevice v7_1 = this.myDB.getBTD(v6_1.mac);
            if (v7_1.mac != null) {
                this.vec.add(v7_1);
            } else {
                v6_1.setGetLoc(0);
                v6_1.setIcon(2130837509);
                this.myDB.insert(v6_1);
                this.vec.add(v6_1);
            }
            this.refreshList(this.loadFromDB());
        }
        java.util.Iterator v15_28;
        if (p20 < 1) {
            v15_28 = v8;
        } else {
            android.bluetooth.BluetoothAdapter v10 = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
            if (v10 != null) {
                if (v10.isEnabled()) {
                    if (v10 != null) {
                        java.util.Set v12 = v10.getBondedDevices();
                        if (v12.size() > 0) {
                            java.util.Iterator v15_23 = v12.iterator();
                            while (v15_23.hasNext()) {
                                android.bluetooth.BluetoothDevice v3_1 = ((android.bluetooth.BluetoothDevice) v15_23.next());
                                if (v3_1.getAddress() != null) {
                                    a2dp.Vol.btDevice v1_1 = new a2dp.Vol.btDevice();
                                    v8++;
                                    String v11 = 0;
                                    try {
                                        java.util.Vector v0_25 = new Class[0];
                                        java.util.Vector v0_27 = new Object[0];
                                        Object v13 = v3_1.getClass().getMethod("getAlias", v0_25).invoke(v3_1, v0_27);
                                    } catch (IllegalAccessException v4_2) {
                                        v4_2.printStackTrace();
                                        if (v11 == null) {
                                            v11 = v3_1.getName();
                                        }
                                        v1_1.setBluetoothDevice(v3_1, v11, a2dp.Vol.main.am.getStreamMaxVolume(3));
                                        v1_1.setSetV(1);
                                        a2dp.Vol.btDevice v2 = this.myDB.getBTD(v1_1.mac);
                                        if (v2.mac != null) {
                                            this.vec.add(v2);
                                        } else {
                                            this.myDB.insert(v1_1);
                                            this.vec.add(v1_1);
                                        }
                                    } catch (IllegalAccessException v4_1) {
                                        v4_1.printStackTrace();
                                    } catch (IllegalAccessException v4_0) {
                                        v4_0.printStackTrace();
                                    }
                                    if (v13 == null) {
                                    } else {
                                        v11 = v13.toString();
                                    }
                                }
                            }
                        }
                    }
                    this.refreshList(this.loadFromDB());
                    android.widget.Toast.makeText(this.application, new StringBuilder().append("Found ").append(v8).append(" Bluetooth Devices").toString(), 1).show();
                } else {
                    try {
                        this.startActivityForResult(new android.content.Intent("android.bluetooth.adapter.action.REQUEST_ENABLE"), 1);
                    } catch (IllegalAccessException v4_3) {
                        v4_3.printStackTrace();
                    }
                    v15_28 = 0;
                }
            } else {
                android.widget.Toast.makeText(this.application, 2131165210, 1).show();
                v15_28 = 0;
            }
        }
        return v15_28;
    }

    private void getConnects()
    {
        if (!this.servrun) {
            this.connects = 0;
        } else {
            this.connects = a2dp.Vol.service.connects.intValue();
        }
        return;
    }

    private android.bluetooth.IBluetooth getIBluetooth()
    {
        try {
            Class v3 = Class.forName("android.os.ServiceManager");
            String v11_12 = new Class[1];
            v11_12[0] = String;
            reflect.Method v8 = v3.getDeclaredMethod("getService", v11_12);
            String v11_1 = new Object[1];
            v11_1[0] = "bluetooth";
            android.os.IBinder v1_1 = ((android.os.IBinder) v8.invoke(0, v11_1));
            android.util.Log.d("A2DP_Volume", new StringBuilder().append("Test2: ").append(v1_1.getInterfaceDescriptor()).toString());
            String v11_8 = new Class[1];
            v11_8[0] = android.os.IBinder;
            reflect.Method v7 = Class.forName("android.bluetooth.IBluetooth").getDeclaredClasses()[0].getDeclaredMethod("asInterface", v11_8);
            v7.setAccessible(1);
            String v11_11 = new Object[1];
            v11_11[0] = v1_1;
            android.bluetooth.IBluetooth v6 = ((android.bluetooth.IBluetooth) v7.invoke(0, v11_11));
        } catch (Exception v5) {
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v5.getMessage()).toString());
        }
        return v6;
    }

    private int loadFromDB()
    {
        int v1_0 = 0;
        this.myDB.getDb().close();
        if (this.myDB.getDb().isOpen()) {
            try {
                this.vec = this.myDB.selectAlldb();
            } catch (Exception v0_1) {
                v0_1.printStackTrace();
            }
            if ((!this.vec.isEmpty()) && (this.vec != null)) {
                v1_0 = this.vec.size();
            }
        } else {
            try {
                this.myDB = new a2dp.Vol.DeviceDB(this.application);
            } catch (Exception v0_0) {
                v0_0.printStackTrace();
            }
        }
        return v1_0;
    }

    private int permission_scan()
    {
        int v0 = 0;
        if (!this.preferences.getBoolean("ReadContactsPermission", 0)) {
            v0 = 1;
        }
        if (!this.preferences.getBoolean("LocationPermission", 0)) {
            v0 = 2;
        }
        if (!this.preferences.getBoolean("PhonePermission", 0)) {
            v0 = 3;
        }
        if (!this.preferences.getBoolean("SMSPermission", 0)) {
            v0 = 4;
        }
        if (!this.preferences.getBoolean("StoragePermission", 0)) {
            v0 = 5;
        }
        return v0;
    }

    private void refreshList(int p7)
    {
        if (p7 <= 0) {
            String v2_4 = new String[1];
            v2_4[0] = "no data";
            this.lstring = v2_4;
        } else {
            String v2_27 = new String[p7];
            this.lstring = v2_27;
            int v0 = 0;
            while (v0 < p7) {
                this.lstring[v0] = ((a2dp.Vol.btDevice) this.vec.get(v0)).toString();
                if ((this.connects > 0) && (this.servrun)) {
                    int v1 = 0;
                    while (v1 < a2dp.Vol.service.btdConn.length) {
                        if ((a2dp.Vol.service.btdConn[v1] != null) && (((a2dp.Vol.btDevice) this.vec.get(v0)).getMac().equalsIgnoreCase(a2dp.Vol.service.btdConn[v1].getMac()))) {
                            String[] v3_7 = this.lstring;
                            v3_7[v0] = new StringBuilder().append(v3_7[v0]).append(" **").toString();
                        }
                        v1++;
                    }
                }
                v0++;
            }
        }
        this.ladapt = new android.widget.ArrayAdapter(this.application, a2dp.Vol.main.resourceID, this.lstring);
        this.lvl.setAdapter(this.ladapt);
        this.ladapt.notifyDataSetChanged();
        this.lvl.invalidateViews();
        this.lvl.forceLayout();
        return;
    }

    private android.content.DialogInterface$OnClickListener setIgnore()
    {
        android.content.SharedPreferences$Editor v0 = this.preferences.edit();
        this.TTSignore = 1;
        v0.putBoolean("TTSignore", 1);
        v0.commit();
        return 0;
    }

    public void Locationbtn()
    {
        try {
            byte[] v0 = new byte[250];
            java.io.FileInputStream v2 = this.openFileInput("My_Last_Location");
            v2.read(v0);
            v2.close();
            String v4 = new String(v0).trim();
            android.content.Intent v3_1 = new android.content.Intent("android.intent.action.VIEW");
            v3_1.setData(android.net.Uri.parse(v4));
            this.startActivity(v3_1);
        } catch (java.io.IOException v1_1) {
            android.widget.Toast.makeText(this, 2131165209, 1).show();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v1_1.getMessage()).toString());
        } catch (java.io.IOException v1_0) {
            android.widget.Toast.makeText(this, "Some IO issue", 1).show();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v1_0.getMessage()).toString());
        }
        return;
    }

    protected void onActivityResult(int p12, int p13, android.content.Intent p14)
    {
        if (p13 == -1) {
            switch (p12) {
                case 1:
                    if (p13 != 0) {
                        int v5 = this.getBtDevices(1);
                        if (v5 > 0) {
                            int v6_4 = new String[v5];
                            this.lstring = v6_4;
                            int v3 = 0;
                            while (v3 < v5) {
                                this.lstring[v3] = ((a2dp.Vol.btDevice) this.vec.get(v3)).toString();
                                v3++;
                            }
                            this.refreshList(this.loadFromDB());
                        }
                    } else {
                        android.widget.Toast.makeText(this.application, 2131165281, 1).show();
                        this.refreshList(this.loadFromDB());
                    }
                    break;
                case 2:
                    this.refreshList(this.loadFromDB());
                    break;
            }
        }
        if (p12 == 4) {
            this.enableTTS = this.preferences.getBoolean("enableTTS", 0);
            if (this.enableTTS) {
                try {
                    android.content.Intent v1_1 = new android.content.Intent();
                    v1_1.setAction("android.speech.tts.engine.CHECK_TTS_DATA");
                    this.startActivityForResult(v1_1, 3);
                } catch (Exception v2) {
                    android.widget.Toast.makeText(this.application, "TTS missing fault", 1).show();
                }
            }
        }
        if (p12 == 3) {
            switch (p13) {
                case -3:
                    if (this.toasts) {
                        android.widget.Toast.makeText(this.application, "TTS Missing Volume", 0).show();
                    }
                    break;
                case -2:
                    if (!this.TTSignore) {
                        android.app.AlertDialog$Builder v0_1 = new android.app.AlertDialog$Builder(this);
                        v0_1.setTitle(this.getString(2131165277));
                        v0_1.setPositiveButton(2131165271, new a2dp.Vol.main$12(this));
                        v0_1.setNegativeButton(2131165208, 0);
                        v0_1.setNeutralButton(2131165291, this.setIgnore());
                        v0_1.setMessage(2131165294);
                        v0_1.show();
                    }
                    break;
                case -1:
                    if (this.toasts) {
                        android.widget.Toast.makeText(this.application, "TTS Bad Data", 0).show();
                    }
                    break;
                case 0:
                    if (this.toasts) {
                        android.widget.Toast.makeText(this.application, "TTS Voice data fail", 0).show();
                    }
                    break;
                case 1:
                    if (this.toasts) {
                        android.widget.Toast.makeText(this.application, 2131165270, 0).show();
                    }
                    break;
            }
        }
        return;
    }

    public void onCreate(android.os.Bundle p26)
    {
        this.res = this.getResources();
        this.setContentView(2130968581);
        try {
            String v24 = this.getPackageManager().getPackageInfo(new android.content.ComponentName("a2dp.Vol", "main").getPackageName(), 0).versionName;
        } catch (Exception v12_0) {
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v12_0.getMessage()).toString());
        }
        this.setTitle(new StringBuilder().append(this.res.getString(2131165277)).append(" Version: ").append(v24).toString());
        this.application = ((a2dp.Vol.MyApplication) this.getApplication());
        this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(this.application);
        try {
            if (!this.preferences.getBoolean("useLocalStorage", 0)) {
                this.a2dpDir = new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString();
                java.io.File v15_1 = new java.io.File(this.a2dpDir);
                if (!v15_1.exists()) {
                    v15_1.mkdirs();
                }
                this.carMode = this.preferences.getBoolean("car_mode", 1);
                this.homeDock = this.preferences.getBoolean("home_dock", 0);
                this.headsetPlug = this.preferences.getBoolean("headset", 0);
                this.power = this.preferences.getBoolean("power", 0);
                this.enableTTS = this.preferences.getBoolean("enableTTS", 0);
                this.toasts = this.preferences.getBoolean("toasts", 1);
                this.TTSignore = this.preferences.getBoolean("TTSignore", 0);
            } else {
                this.a2dpDir = this.getFilesDir().toString();
            }
        } catch (Exception v14_0) {
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v14_0.getMessage()).toString());
        }
        this.connects = 0;
        a2dp.Vol.main.am = ((android.media.AudioManager) this.getSystemService("audio"));
        android.widget.Button v8_1 = ((android.widget.Button) this.findViewById(2131361856));
        android.widget.Button v21_1 = ((android.widget.Button) this.findViewById(2131361855));
        a2dp.Vol.main.serv = ((android.widget.Button) this.findViewById(2131361857));
        android.content.IntentFilter v16 = new android.content.IntentFilter;
        v16("a2dp.vol.service.RUNNING");
        try {
            this.registerReceiver(this.sRunning, v16);
        } catch (Exception v14_1) {
            v14_1.printStackTrace();
        }
        android.content.IntentFilter v17 = new android.content.IntentFilter;
        v17("a2dp.vol.service.STOPPED_RUNNING");
        try {
            this.registerReceiver(this.sRunning, v17);
        } catch (Exception v14_2) {
            v14_2.printStackTrace();
        }
        android.content.IntentFilter v18 = new android.content.IntentFilter;
        v18("a2dp.Vol.main.RELOAD_LIST");
        this.registerReceiver(this.mReceiver5, v18);
        android.content.IntentFilter v19 = new android.content.IntentFilter;
        v19("a2dp.vol.preferences.UPDATED");
        this.registerReceiver(this.mReceiver6, v19);
        android.content.Intent v2_36 = new String[1];
        v2_36[0] = this.res.getString(2131165209);
        this.lstring = v2_36;
        this.myDB = new a2dp.Vol.DeviceDB(this.application);
        if (p26 == null) {
            int v11 = 1;
            if (this.carMode) {
                v11 = (1 + 1);
            }
            if (this.homeDock) {
                v11++;
            }
            try {
                if (this.myDB.getLength() < v11) {
                    this.getBtDevices(1);
                }
            } catch (Exception v13) {
                android.util.Log.e("A2DP_Volume", new StringBuilder().append("error").append(v13.getMessage()).toString());
            }
            a2dp.Vol.main.serv.setText(2131165267);
            this.startService(new android.content.Intent(this, a2dp.Vol.service));
            if (this.enableTTS) {
                try {
                    android.content.Intent v9_1 = new android.content.Intent();
                    v9_1.setAction("android.speech.tts.engine.CHECK_TTS_DATA");
                    this.startActivityForResult(v9_1, 3);
                } catch (Exception v12_1) {
                    v12_1.printStackTrace();
                }
            }
            this.startService(new android.content.Intent(this, a2dp.Vol.NotificationCatcher));
        }
        this.ladapt = new android.widget.ArrayAdapter(this.application, a2dp.Vol.main.resourceID, this.lstring);
        this.lvl = ((android.widget.ListView) this.findViewById(2131361858));
        this.lvl.setAdapter(this.ladapt);
        v8_1.setOnClickListener(new a2dp.Vol.main$3(this));
        this.lvl.setOnItemLongClickListener(new a2dp.Vol.main$4(this));
        this.lvl.setOnItemClickListener(new a2dp.Vol.main$5(this));
        v21_1.setOnClickListener(new a2dp.Vol.main$6(this));
        v21_1.setOnLongClickListener(new a2dp.Vol.main$7(this));
        a2dp.Vol.main.serv.setOnClickListener(new a2dp.Vol.main$8(this));
        new a2dp.Vol.main$9(this, 2000, 1000).start();
        void v25_1 = this.getConnects();
        v25_1.refreshList(v25_1.loadFromDB());
        int v23 = v25_1.permission_scan();
        if (v23 > 0) {
            v25_1.check_permissions(v23);
        }
        super.onCreate(p26);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p3)
    {
        this.getMenuInflater().inflate(2131296256, p3);
        return 1;
    }

    protected void onDestroy()
    {
        try {
            this.unregisterReceiver(this.sRunning);
            this.unregisterReceiver(this.mReceiver5);
            this.unregisterReceiver(this.mReceiver6);
        } catch (Exception v0) {
            v0.printStackTrace();
        }
        this.myDB.getDb().close();
        super.onDestroy();
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p11)
    {
        int v6 = 1;
        switch (p11.getItemId()) {
            case 2131361872:
                this.startActivity(new android.content.Intent(this, a2dp.Vol.Preferences));
                break;
            case 2131361873:
                android.app.AlertDialog$Builder v1_1 = new android.app.AlertDialog$Builder(this);
                v1_1.setMessage(2131165188).setCancelable(0).setPositiveButton(17039379, new a2dp.Vol.main$2(this)).setNegativeButton(17039369, new a2dp.Vol.main$1(this));
                v1_1.create().show();
                break;
            case 2131361874:
                this.myDB.getDb().close();
                this.startActivityForResult(new android.content.Intent(this.getBaseContext(), a2dp.Vol.ManageData), 2);
                break;
            case 2131361875:
                this.stopService(new android.content.Intent(this, a2dp.Vol.service));
                this.finish();
                break;
            case 2131361876:
                this.startActivity(new android.content.Intent("android.intent.action.VIEW", android.net.Uri.parse("https://github.com/jroal/a2dpvolume/wiki")));
                break;
            case 2131361877:
                this.startActivity(new android.content.Intent(this, a2dp.Vol.PackagesChooser));
                break;
            default:
                v6 = 0;
        }
        return v6;
    }

    protected void onPause()
    {
        super.onPause();
        return;
    }

    public void onRequestPermissionsResult(int p6, String[] p7, int[] p8)
    {
        switch (p6) {
            case 1:
                // Both branches of the condition point to the same code.
                // if ((p8.length > 0) && (p8[0] != 0)) {
                    android.content.SharedPreferences$Editor v0_3 = this.preferences.edit();
                    v0_3.putBoolean("ReadContactsPermission", 1);
                    v0_3.commit();
                // }
                break;
            case 2:
                // Both branches of the condition point to the same code.
                // if ((p8.length > 0) && (p8[0] != 0)) {
                    android.content.SharedPreferences$Editor v0_2 = this.preferences.edit();
                    v0_2.putBoolean("LocationPermission", 1);
                    v0_2.commit();
                // }
                break;
            case 3:
                // Both branches of the condition point to the same code.
                // if ((p8.length > 0) && (p8[0] != 0)) {
                    android.content.SharedPreferences$Editor v0_1 = this.preferences.edit();
                    v0_1.putBoolean("PhonePermission", 1);
                    v0_1.commit();
                // }
                break;
            case 4:
                // Both branches of the condition point to the same code.
                // if ((p8.length > 0) && (p8[0] != 0)) {
                    android.content.SharedPreferences$Editor v0_0 = this.preferences.edit();
                    v0_0.putBoolean("SMSPermission", 1);
                    v0_0.commit();
                // }
                break;
            case 5:
                // Both branches of the condition point to the same code.
                // if ((p8.length > 0) && (p8[0] != 0)) {
                    android.content.SharedPreferences$Editor v0_4 = this.preferences.edit();
                    v0_4.putBoolean("StoragePermission", 1);
                    v0_4.commit();
                // }
                break;
        }
        int v1 = this.permission_scan();
        if (v1 > 0) {
            this.check_permissions(v1);
        }
        return;
    }

    protected void onRestart()
    {
        super.onRestart();
        return;
    }

    protected void onResume()
    {
        this.getConnects();
        this.refreshList(this.loadFromDB());
        super.onResume();
        return;
    }

    protected void onStop()
    {
        super.onStop();
        return;
    }
}
package a2dp.Vol;
final class service$10 extends android.os.CountDownTimer {
    final synthetic int val$minputVol;

    service$10(long p2, long p4, int p6)
    {
        this.val$minputVol = p6;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        int v0;
        if (!a2dp.Vol.service.access$1600()) {
            v0 = 1;
        } else {
            v0 = 0;
        }
        a2dp.Vol.service.am2.setStreamVolume(3, this.val$minputVol, v0);
        return;
    }

    public void onTick(long p7)
    {
        int v2;
        if (!a2dp.Vol.service.access$1600()) {
            v2 = 1;
        } else {
            v2 = 0;
        }
        int v0 = a2dp.Vol.service.am2.getStreamVolume(3);
        int v1 = v0;
        if ((v0 + 1) < this.val$minputVol) {
            v1++;
        }
        a2dp.Vol.service.am2.setStreamVolume(3, v1, v2);
        return;
    }
}
package a2dp.Vol;
final class service$11 implements android.content.ServiceConnection {

    service$11()
    {
        return;
    }

    public void onServiceConnected(android.content.ComponentName p9, android.os.IBinder p10)
    {
        a2dp.Vol.service.mIsBound = 1;
        a2dp.Vol.service.ibta2 = android.bluetooth.IBluetoothA2dp$Stub.asInterface(p10);
        android.bluetooth.BluetoothDevice v1 = 0;
        android.bluetooth.IBluetoothA2dp v5_1 = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getBondedDevices().iterator();
        while (v5_1.hasNext()) {
            android.bluetooth.BluetoothDevice v0_1 = ((android.bluetooth.BluetoothDevice) v5_1.next());
            if (v0_1.getAddress().equalsIgnoreCase(a2dp.Vol.service.DeviceToConnect)) {
                v1 = v0_1;
            }
        }
        if (v1 != null) {
            try {
                a2dp.Vol.service.ibta2.connect(v1);
            } catch (android.os.RemoteException v2) {
                v2.printStackTrace();
            }
        }
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p2)
    {
        a2dp.Vol.service.mIsBound = 0;
        a2dp.Vol.service.doUnbind(a2dp.Vol.service.access$600());
        return;
    }
}
package a2dp.Vol;
 class service$12 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$12(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p15, android.content.Intent p16)
    {
        if ((p16.getAction().equals("android.provider.Telephony.SMS_RECEIVED")) && (a2dp.Vol.service.access$1700(this.this$0).getCallState() == 0)) {
            android.os.Bundle v0 = p16.getExtras();
            if (v0 != null) {
                Object[] v4_1 = ((Object[]) ((Object[]) v0.get("pdus")));
                android.telephony.SmsMessage[] v3 = new android.telephony.SmsMessage[v4_1.length];
                int v2 = 0;
                while (v2 < v4_1.length) {
                    v3[v2] = android.telephony.SmsMessage.createFromPdu(((byte[]) ((byte[]) v4_1[v2])));
                    v2++;
                }
                StringBuilder v5_1 = new StringBuilder();
                int v8_1 = v3.length;
                a2dp.Vol.service v7_7 = 0;
                while (v7_7 < v8_1) {
                    android.telephony.SmsMessage v1 = v3[v7_7];
                    StringBuilder v9_1 = this.this$0.getString(2131165293);
                    int v10_2 = new Object[2];
                    v10_2[0] = a2dp.Vol.service.access$1800(this.this$0, v1.getDisplayOriginatingAddress());
                    v10_2[1] = v1.getDisplayMessageBody();
                    v5_1.append(java.text.MessageFormat.format(v9_1, v10_2)).append(32);
                    v7_7++;
                }
                this.this$0.TextReader(v5_1.toString().trim());
            }
        }
        return;
    }
}
package a2dp.Vol;
 class service$13 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.service this$0;
    final synthetic String val$str;

    service$13(a2dp.Vol.service p1, long p2, long p4, String p6)
    {
        this.this$0 = p1;
        this.val$str = p6;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        try {
            a2dp.Vol.service.access$1100(this.this$0).speak(this.val$str, 1, this.this$0.myHash);
        } catch (Exception v0) {
            android.widget.Toast.makeText(a2dp.Vol.service.access$600(), 2131165269, 1).show();
            v0.printStackTrace();
        }
        return;
    }

    public void onTick(long p1)
    {
        return;
    }
}
package a2dp.Vol;
 class service$14 implements android.speech.tts.TextToSpeech$OnInitListener {
    final synthetic a2dp.Vol.service this$0;

    service$14(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onInit(int p3)
    {
        if (p3 == 0) {
            a2dp.Vol.service.mTtsReady = 1;
            a2dp.Vol.service.access$1100(this.this$0).setOnUtteranceProgressListener(this.this$0.ul);
        }
        return;
    }
}
package a2dp.Vol;
 class service$15 extends android.speech.tts.UtteranceProgressListener {
    final synthetic a2dp.Vol.service this$0;

    service$15(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onDone(String p6)
    {
        int v1 = 0;
        if ("A2DP_Vol".equalsIgnoreCase(p6)) {
            switch (a2dp.Vol.service.access$1900(this.this$0)) {
                case 0:
                    v1 = a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
                    break;
                case 1:
                    if (!a2dp.Vol.service.access$1000(this.this$0)) {
                        android.content.Intent v0_3 = new android.content.Intent();
                        v0_3.setAction("a2dp.vol.service.CLEAR");
                        a2dp.Vol.service.access$600().sendBroadcast(v0_3);
                    }
                    v1 = a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
                    break;
                case 2:
                    if (!a2dp.Vol.service.access$1000(this.this$0)) {
                        android.content.Intent v0_1 = new android.content.Intent();
                        v0_1.setAction("a2dp.vol.service.CLEAR");
                        a2dp.Vol.service.access$600().sendBroadcast(v0_1);
                    }
                    v1 = a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
                    break;
            }
            if (v1 == 0) {
                a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
            }
            a2dp.Vol.service.am2.setMode(0);
        }
        if ("fix_stream".equalsIgnoreCase(p6)) {
            a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
        }
        a2dp.Vol.service.am2.setMode(0);
        return;
    }

    public void onError(String p1)
    {
        return;
    }

    public void onStart(String p1)
    {
        return;
    }
}
package a2dp.Vol;
 class service$16$1 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.service$16 this$1;

    service$16$1(a2dp.Vol.service$16 p1, long p2, long p4)
    {
        this.this$1 = p1;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        android.content.Intent v0_1 = new android.content.Intent("com.android.music.musicservicecommand");
        v0_1.putExtra("command", "play");
        this.this$1.this$0.sendBroadcast(v0_1);
        return;
    }

    public void onTick(long p6)
    {
        android.content.Intent v1_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON", 0);
        v1_1.putExtra("android.intent.extra.KEY_EVENT", new android.view.KeyEvent(0, 126));
        this.this$1.this$0.sendOrderedBroadcast(v1_1, 0);
        return;
    }
}
package a2dp.Vol;
 class service$16 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$16(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p9, android.content.Intent p10)
    {
        if ((p10.getIntExtra("android.media.extra.SCO_AUDIO_STATE", 0) == 0) && (!a2dp.Vol.service.access$1000(this.this$0))) {
            if (!a2dp.Vol.service.mTtsReady) {
                a2dp.Vol.service.access$1102(this.this$0, new android.speech.tts.TextToSpeech(a2dp.Vol.service.access$600(), this.this$0.listenerStarted));
            }
            java.util.HashMap v6_1 = new java.util.HashMap();
            v6_1.put("utteranceId", "fix_stream");
            a2dp.Vol.service.am2.requestAudioFocus(this.this$0, 3, 2);
            v6_1.put("streamType", String.valueOf(3));
            // Both branches of the condition point to the same code.
            // if (!a2dp.Vol.service.mTtsReady) {
                a2dp.Vol.service.am2.abandonAudioFocus(this.this$0);
                a2dp.Vol.service.am2.setMode(0);
                if (a2dp.Vol.service.access$2000(this.this$0)) {
                    new a2dp.Vol.service$16$1(this, 1000, 6000).start();
                }
                a2dp.Vol.service.access$1002(this.this$0, 1);
            // }
        }
        return;
    }
}
package a2dp.Vol;
 class service$1 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$1(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p3, android.content.Intent p4)
    {
        this.this$0.TextReader(p4.getStringExtra("message"));
        return;
    }
}
package a2dp.Vol;
 class service$2 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$2(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p2, android.content.Intent p3)
    {
        a2dp.Vol.service.access$000(this.this$0);
        return;
    }
}
package a2dp.Vol;
 class service$3 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$3(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p13, android.content.Intent p14)
    {
        android.bluetooth.BluetoothAdapter v4 = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
        String v5 = "";
        if ((v4.getState() == 10) || (v4.getState() == 13)) {
            int v3 = 0;
            while (v3 < a2dp.Vol.service.btdConn.length) {
                if ((a2dp.Vol.service.btdConn[v3] != null) && (a2dp.Vol.service.btdConn[v3].getMac().length() > 2)) {
                    v5 = a2dp.Vol.service.btdConn[v3].getMac();
                    a2dp.Vol.service.btdConn[v3] = 0;
                }
                v3++;
            }
            a2dp.Vol.service.access$100(this.this$0);
            if (v5 != "") {
                if (a2dp.Vol.service.access$200(this.this$0)) {
                    a2dp.Vol.service.access$300(this.this$0, 0, 0);
                }
                if (!a2dp.Vol.service.access$400()) {
                    a2dp.Vol.service.setVolume(a2dp.Vol.service.access$500().intValue(), a2dp.Vol.service.access$600());
                }
                if (!a2dp.Vol.service.access$700()) {
                    a2dp.Vol.service.setPVolume(a2dp.Vol.service.access$800().intValue());
                }
                a2dp.Vol.service.access$900(this.this$0, this.this$0.oldwifistate);
            }
            if (a2dp.Vol.service.mTtsReady) {
                try {
                    if (!a2dp.Vol.service.access$1000(this.this$0)) {
                        a2dp.Vol.service.access$000(this.this$0);
                    }
                } catch (Exception v1) {
                    v1.printStackTrace();
                }
                a2dp.Vol.service.access$1100(this.this$0).shutdown();
                a2dp.Vol.service.mTtsReady = 0;
                this.this$0.unregisterReceiver(a2dp.Vol.service.access$1200(this.this$0));
            }
            android.content.Intent v2_1 = new android.content.Intent();
            v2_1.setAction("a2dp.Vol.main.RELOAD_LIST");
            v2_1.putExtra("disconnect", v5);
            a2dp.Vol.service.access$600().sendBroadcast(v2_1);
        }
        return;
    }
}
package a2dp.Vol;
 class service$4 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$4(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p7, android.content.Intent p8)
    {
        int v2 = p8.getIntExtra("state", -1);
        try {
            a2dp.Vol.btDevice v0 = a2dp.Vol.service.access$1300(this.this$0).getBTD("3");
        } catch (Exception v1) {
            v1.printStackTrace();
            return;
        }
        if ((v0 == null) || (!"3".equalsIgnoreCase(v0.getMac()))) {
            return;
        } else {
            if ((v2 != 0) || (a2dp.Vol.service.connects.intValue() <= 0)) {
                if (v2 != 1) {
                    return;
                } else {
                    a2dp.Vol.service.access$1502(this.this$0, 1);
                    this.this$0.DoConnected(v0);
                    return;
                }
            } else {
                a2dp.Vol.service.access$1402(this.this$0, 1);
                this.this$0.DoDisconnected(v0);
                return;
            }
        }
    }
}
package a2dp.Vol;
 class service$5 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$5(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p9, android.content.Intent p10)
    {
        if (!a2dp.Vol.service.access$1500(this.this$0)) {
            a2dp.Vol.service.access$1502(this.this$0, 1);
            try {
                int v1_1 = ((android.bluetooth.BluetoothDevice) p10.getExtras().get("android.bluetooth.device.extra.DEVICE"));
            } catch (Exception v4) {
                v1_1 = 0;
                v4.printStackTrace();
            }
            int v2;
            if (v1_1 == 0) {
                try {
                    if (!p10.getAction().equalsIgnoreCase("android.app.action.ENTER_CAR_MODE")) {
                        if (!p10.getAction().equalsIgnoreCase("android.app.action.ENTER_DESK_MODE")) {
                            if (!p10.getAction().equalsIgnoreCase("android.intent.action.ACTION_POWER_CONNECTED")) {
                                v2 = 0;
                            } else {
                                v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("4");
                            }
                        } else {
                            v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("2");
                        }
                    } else {
                        v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("1");
                    }
                } catch (Exception v3) {
                    v2 = 0;
                    android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error").append(v3.toString()).toString());
                }
            } else {
                try {
                    v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD(v1_1.getAddress());
                } catch (Exception v3) {
                    v2 = 0;
                }
            }
            if ((v2 != 0) && (v2.getMac() != null)) {
                this.this$0.DoConnected(v2);
            } else {
                a2dp.Vol.service.access$1502(this.this$0, 0);
            }
        }
        return;
    }
}
package a2dp.Vol;
 class service$6 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.service this$0;
    final synthetic int val$vol1;

    service$6(a2dp.Vol.service p1, long p2, long p4, int p6)
    {
        this.this$0 = p1;
        this.val$vol1 = p6;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        a2dp.Vol.service.setPVolume(this.val$vol1);
        return;
    }

    public void onTick(long p1)
    {
        return;
    }
}
package a2dp.Vol;
 class service$7 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.service this$0;
    final synthetic int val$vol;

    service$7(a2dp.Vol.service p1, long p2, long p4, int p6)
    {
        this.this$0 = p1;
        this.val$vol = p6;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        a2dp.Vol.service.setVolume(this.val$vol, a2dp.Vol.service.access$600());
        return;
    }

    public void onTick(long p1)
    {
        return;
    }
}
package a2dp.Vol;
 class service$8 extends android.content.BroadcastReceiver {
    final synthetic a2dp.Vol.service this$0;

    service$8(a2dp.Vol.service p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p9, android.content.Intent p10)
    {
        if (!a2dp.Vol.service.access$1400(this.this$0)) {
            a2dp.Vol.service.access$1402(this.this$0, 1);
            try {
                int v1_1 = ((android.bluetooth.BluetoothDevice) p10.getExtras().get("android.bluetooth.device.extra.DEVICE"));
            } catch (Exception v4) {
                v1_1 = 0;
                v4.printStackTrace();
            }
            int v2;
            if (v1_1 == 0) {
                try {
                    if (!p10.getAction().equalsIgnoreCase("android.app.action.EXIT_CAR_MODE")) {
                        if (!p10.getAction().equalsIgnoreCase("android.app.action.EXIT_DESK_MODE")) {
                            if (!p10.getAction().equalsIgnoreCase("android.intent.action.ACTION_POWER_DISCONNECTED")) {
                                v2 = 0;
                            } else {
                                v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("4");
                            }
                        } else {
                            v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("2");
                        }
                    } else {
                        v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD("1");
                    }
                } catch (Exception v3_0) {
                    v2 = 0;
                    android.util.Log.e("A2DP_Volume", v3_0.toString());
                }
            } else {
                try {
                    v2 = a2dp.Vol.service.access$1300(this.this$0).getBTD(v1_1.getAddress());
                } catch (Exception v3_1) {
                    v2 = 0;
                    android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error").append(v3_1.toString()).toString());
                }
            }
            if ((v2 != 0) && (v2.getMac() != null)) {
                this.this$0.DoDisconnected(v2);
            } else {
                a2dp.Vol.service.access$1402(this.this$0, 0);
            }
        }
        return;
    }
}
package a2dp.Vol;
 class service$9 extends android.os.CountDownTimer {
    final synthetic a2dp.Vol.service this$0;
    final synthetic String val$kpackage;

    service$9(a2dp.Vol.service p1, long p2, long p4, String p6)
    {
        this.this$0 = p1;
        this.val$kpackage = p6;
        super(p2, p4);
        return;
    }

    public void onFinish()
    {
        if (a2dp.Vol.service.am2.isMusicActive()) {
            android.content.Intent v3_1 = new android.content.Intent("com.android.music.musicservicecommand");
            v3_1.putExtra("command", "pause");
            this.this$0.sendBroadcast(v3_1);
            android.content.Intent v4_1 = new android.content.Intent("android.intent.action.HEADSET_PLUG");
            v4_1.putExtra("state", 0);
            try {
                this.this$0.sendBroadcast(v4_1);
            } catch (Exception v2_0) {
                v2_0.printStackTrace();
            }
            android.content.Intent v1_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON", 0);
            v1_1.putExtra("android.intent.extra.KEY_EVENT", new android.view.KeyEvent(0, 86));
            this.this$0.sendOrderedBroadcast(v1_1, 0);
        }
        try {
            this.this$0.stopApp(this.val$kpackage);
        } catch (Exception v2_1) {
            v2_1.printStackTrace();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v2_1.getMessage()).toString());
        }
        return;
    }

    public void onTick(long p8)
    {
        if (a2dp.Vol.service.am2.isMusicActive()) {
            android.content.Intent v3_1 = new android.content.Intent("com.android.music.musicservicecommand");
            v3_1.putExtra("command", "pause");
            this.this$0.sendBroadcast(v3_1);
            android.content.Intent v1_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON", 0);
            v1_1.putExtra("android.intent.extra.KEY_EVENT", new android.view.KeyEvent(0, 86));
            this.this$0.sendOrderedBroadcast(v1_1, 0);
        }
        try {
            this.this$0.stopApp(this.val$kpackage);
        } catch (Exception v2) {
            v2.printStackTrace();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v2.getMessage()).toString());
        }
        return;
    }
}
package a2dp.Vol;
public class service extends android.app.Service implements android.media.AudioManager$OnAudioFocusChangeListener {
    private static final String A2DP_Vol = "A2DP_Vol";
    private static final int ALARM_STREAM = 2;
    static String DeviceToConnect = "";
    private static final String FIX_STREAM = "fix_stream";
    private static final int IN_CALL_STREAM = 1;
    private static final String LOG_TAG = "A2DP_Volume";
    private static final int MUSIC_STREAM = 0;
    private static final String OLD_PH_VOL = "old_phone_vol";
    private static final String OLD_VOLUME = "old_vol";
    private static Integer OldVol = None;
    private static Integer OldVol2 = None;
    private static Integer Oldsilent = None;
    public static final String PREFS_NAME = "btVol";
    static android.media.AudioManager am2;
    private static a2dp.Vol.MyApplication application;
    public static a2dp.Vol.btDevice[] btdConn;
    public static Integer connects;
    private static boolean hideVolUi;
    static android.bluetooth.IBluetoothA2dp ibta2;
    public static android.content.ServiceConnection mConnection;
    static boolean mIsBound;
    public static boolean mTtsReady;
    private static boolean mvolsLeft;
    private static String notify_pref;
    private static boolean pvolsLeft;
    private static boolean ramp_vol;
    public static boolean run;
    public static boolean talk;
    private a2dp.Vol.DeviceDB DB;
    float MAX_ACC;
    private int MAX_MESSAGE_LENGTH;
    long MAX_TIME;
    private long SMS_delay;
    private final android.content.BroadcastReceiver SMScatcher;
    private int SMSstream;
    String a2dpDir;
    private boolean bluetoothWasOff;
    private final android.content.BroadcastReceiver btOFFReciever;
    private boolean carMode;
    private boolean clearedTts;
    private int connectedIcon;
    private volatile boolean connecting;
    private volatile boolean disconnecting;
    private boolean enableGTalk;
    private boolean enableSMS;
    private final android.content.BroadcastReceiver headSetReceiver;
    private boolean headsetPlug;
    private boolean homeDock;
    public android.speech.tts.TextToSpeech$OnInitListener listenerStarted;
    boolean local;
    android.location.LocationManager locmanager;
    private android.app.NotificationManager mNotificationManager;
    private android.content.pm.PackageManager mPackageManager;
    private final android.content.BroadcastReceiver mReceiver;
    private final android.content.BroadcastReceiver mReceiver2;
    private android.speech.tts.TextToSpeech mTts;
    private final android.content.BroadcastReceiver messageClear;
    private boolean musicWasPlaying;
    java.util.HashMap myHash;
    private boolean notify;
    boolean oldgpsstate;
    boolean oldwifistate;
    Boolean permLocation;
    Boolean permPhone;
    Boolean permReadContacts;
    Boolean permSMS;
    Boolean permStorage;
    private boolean power;
    android.content.SharedPreferences preferences;
    public android.content.BroadcastReceiver sco_change;
    private boolean speakerPhoneWasOn;
    private android.telephony.TelephonyManager tm;
    private final android.content.BroadcastReceiver tmessage;
    boolean tmessageRegistered;
    private boolean toasts;
    public android.speech.tts.UtteranceProgressListener ul;
    private long vol_delay;
    android.net.wifi.WifiManager wifiManager;

    static service()
    {
        a2dp.Vol.service.mTtsReady = 0;
        a2dp.Vol.service.am2 = ((android.media.AudioManager) 0);
        a2dp.Vol.service.OldVol = Integer.valueOf(5);
        a2dp.Vol.service.OldVol2 = Integer.valueOf(5);
        a2dp.Vol.service.connects = Integer.valueOf(0);
        a2dp.Vol.service.run = 0;
        a2dp.Vol.service.talk = 0;
        a2dp.Vol.service.mvolsLeft = 0;
        a2dp.Vol.service.pvolsLeft = 0;
        a2dp.Vol.service.notify_pref = "always";
        a2dp.Vol.service$11 v0_3 = new a2dp.Vol.btDevice[5];
        a2dp.Vol.service.btdConn = v0_3;
        a2dp.Vol.service.mIsBound = 0;
        a2dp.Vol.service.DeviceToConnect = 0;
        a2dp.Vol.service.ramp_vol = 0;
        a2dp.Vol.service.hideVolUi = 0;
        a2dp.Vol.service.mConnection = new a2dp.Vol.service$11();
        return;
    }

    public service()
    {
        this.carMode = 1;
        this.homeDock = 0;
        this.headsetPlug = 0;
        this.power = 0;
        this.enableGTalk = 0;
        this.enableSMS = 0;
        this.toasts = 1;
        this.notify = 1;
        this.mNotificationManager = 0;
        this.speakerPhoneWasOn = 1;
        this.musicWasPlaying = 0;
        this.bluetoothWasOff = 0;
        this.clearedTts = 1;
        this.oldwifistate = 1;
        this.oldgpsstate = 1;
        this.tmessageRegistered = 0;
        this.a2dpDir = "";
        this.MAX_MESSAGE_LENGTH = 350;
        this.MAX_ACC = 1092616192;
        this.MAX_TIME = 20000;
        this.SMS_delay = 3000;
        this.SMSstream = 0;
        this.vol_delay = 5000;
        this.connecting = 0;
        this.disconnecting = 0;
        this.permReadContacts = Boolean.valueOf(1);
        this.permLocation = Boolean.valueOf(1);
        this.permPhone = Boolean.valueOf(1);
        this.permSMS = Boolean.valueOf(1);
        this.permStorage = Boolean.valueOf(1);
        this.tmessage = new a2dp.Vol.service$1(this);
        this.messageClear = new a2dp.Vol.service$2(this);
        this.btOFFReciever = new a2dp.Vol.service$3(this);
        this.headSetReceiver = new a2dp.Vol.service$4(this);
        this.mReceiver = new a2dp.Vol.service$5(this);
        this.mReceiver2 = new a2dp.Vol.service$8(this);
        this.SMScatcher = new a2dp.Vol.service$12(this);
        this.listenerStarted = new a2dp.Vol.service$14(this);
        this.ul = new a2dp.Vol.service$15(this);
        this.sco_change = new a2dp.Vol.service$16(this);
        return;
    }

    private String GetName(String p11)
    {
        if (android.support.v4.content.ContextCompat.checkSelfPermission(a2dp.Vol.service.application, "android.permission.READ_CONTACTS") != 0) {
            this.permReadContacts = Boolean.valueOf(0);
        } else {
            this.permReadContacts = Boolean.valueOf(1);
        }
        String v7;
        if (!this.permReadContacts.booleanValue()) {
            v7 = p11;
        } else {
            android.content.ContentResolver v0 = this.getContentResolver();
            android.net.Uri v1 = android.net.Uri.withAppendedPath(android.provider.ContactsContract$PhoneLookup.CONTENT_FILTER_URI, android.net.Uri.encode(p11));
            int v2_4 = new String[1];
            v2_4[0] = "display_name";
            android.database.Cursor v6 = v0.query(v1, v2_4, 0, 0, 0);
            if (!v6.moveToFirst()) {
                if (v6 == null) {
                } else {
                    v6.close();
                }
            } else {
                v7 = v6.getString(v6.getColumnIndex("display_name"));
            }
        }
        return v7;
    }

    static synthetic void access$000(a2dp.Vol.service p0)
    {
        p0.clearTts();
        return;
    }

    static synthetic void access$100(a2dp.Vol.service p0)
    {
        p0.getConnects();
        return;
    }

    static synthetic boolean access$1000(a2dp.Vol.service p1)
    {
        return p1.clearedTts;
    }

    static synthetic boolean access$1002(a2dp.Vol.service p0, boolean p1)
    {
        p0.clearedTts = p1;
        return p1;
    }

    static synthetic android.speech.tts.TextToSpeech access$1100(a2dp.Vol.service p1)
    {
        return p1.mTts;
    }

    static synthetic android.speech.tts.TextToSpeech access$1102(a2dp.Vol.service p0, android.speech.tts.TextToSpeech p1)
    {
        p0.mTts = p1;
        return p1;
    }

    static synthetic android.content.BroadcastReceiver access$1200(a2dp.Vol.service p1)
    {
        return p1.SMScatcher;
    }

    static synthetic a2dp.Vol.DeviceDB access$1300(a2dp.Vol.service p1)
    {
        return p1.DB;
    }

    static synthetic boolean access$1400(a2dp.Vol.service p1)
    {
        return p1.disconnecting;
    }

    static synthetic boolean access$1402(a2dp.Vol.service p0, boolean p1)
    {
        p0.disconnecting = p1;
        return p1;
    }

    static synthetic boolean access$1500(a2dp.Vol.service p1)
    {
        return p1.connecting;
    }

    static synthetic boolean access$1502(a2dp.Vol.service p0, boolean p1)
    {
        p0.connecting = p1;
        return p1;
    }

    static synthetic boolean access$1600()
    {
        return a2dp.Vol.service.hideVolUi;
    }

    static synthetic android.telephony.TelephonyManager access$1700(a2dp.Vol.service p1)
    {
        return p1.tm;
    }

    static synthetic String access$1800(a2dp.Vol.service p1, String p2)
    {
        return p1.GetName(p2);
    }

    static synthetic int access$1900(a2dp.Vol.service p1)
    {
        return p1.SMSstream;
    }

    static synthetic boolean access$200(a2dp.Vol.service p1)
    {
        return p1.notify;
    }

    static synthetic boolean access$2000(a2dp.Vol.service p1)
    {
        return p1.musicWasPlaying;
    }

    static synthetic void access$300(a2dp.Vol.service p0, boolean p1, String p2)
    {
        p0.updateNot(p1, p2);
        return;
    }

    static synthetic boolean access$400()
    {
        return a2dp.Vol.service.mvolsLeft;
    }

    static synthetic Integer access$500()
    {
        return a2dp.Vol.service.OldVol2;
    }

    static synthetic a2dp.Vol.MyApplication access$600()
    {
        return a2dp.Vol.service.application;
    }

    static synthetic boolean access$700()
    {
        return a2dp.Vol.service.pvolsLeft;
    }

    static synthetic Integer access$800()
    {
        return a2dp.Vol.service.OldVol;
    }

    static synthetic void access$900(a2dp.Vol.service p0, boolean p1)
    {
        p0.dowifi(p1);
        return;
    }

    private void clearTts()
    {
        if (a2dp.Vol.service.am2.isBluetoothScoAvailableOffCall()) {
            a2dp.Vol.service.am2.stopBluetoothSco();
        }
        return;
    }

    static void doUnbind(android.content.Context p2)
    {
        if (a2dp.Vol.service.mIsBound) {
            try {
                p2.unbindService(a2dp.Vol.service.mConnection);
            } catch (Exception v0) {
                v0.printStackTrace();
            }
        }
        return;
    }

    private void dowifi(boolean p5)
    {
        try {
            this.wifiManager.setWifiEnabled(p5);
        } catch (Exception v0) {
            android.widget.Toast.makeText(a2dp.Vol.service.application, new StringBuilder().append("Unable to switch wifi: ").append(v0.toString()).toString(), 1).show();
            v0.printStackTrace();
        }
        return;
    }

    private void getConnects()
    {
        a2dp.Vol.service.connects = Integer.valueOf(0);
        a2dp.Vol.service.mvolsLeft = 0;
        a2dp.Vol.service.pvolsLeft = 0;
        int v0 = 0;
        while (v0 < a2dp.Vol.service.btdConn.length) {
            if (a2dp.Vol.service.btdConn[v0] != null) {
                a2dp.Vol.service.connects = Integer.valueOf((a2dp.Vol.service.connects.intValue() + 1));
                if (a2dp.Vol.service.btdConn[v0].isSetV()) {
                    a2dp.Vol.service.mvolsLeft = 1;
                }
                if (a2dp.Vol.service.btdConn[v0].isSetpv()) {
                    a2dp.Vol.service.pvolsLeft = 1;
                }
            }
            v0++;
        }
        return;
    }

    private void getOldPvol()
    {
        a2dp.Vol.service.OldVol = Integer.valueOf(a2dp.Vol.service.am2.getStreamVolume(0));
        a2dp.Vol.service.Oldsilent = Integer.valueOf(a2dp.Vol.service.am2.getStreamVolume(5));
        android.content.SharedPreferences$Editor v0 = this.preferences.edit();
        v0.putInt("old_phone_vol", a2dp.Vol.service.OldVol.intValue());
        v0.putInt("oldsilent", a2dp.Vol.service.Oldsilent.intValue());
        v0.commit();
        return;
    }

    private void getOldvol()
    {
        a2dp.Vol.service.OldVol2 = Integer.valueOf(a2dp.Vol.service.am2.getStreamVolume(3));
        android.content.SharedPreferences$Editor v0 = this.preferences.edit();
        v0.putInt("old_vol", a2dp.Vol.service.OldVol2.intValue());
        v0.commit();
        return;
    }

    private void registerRecievers()
    {
        android.content.IntentFilter v2_1 = new android.content.IntentFilter("android.bluetooth.device.action.ACL_CONNECTED");
        android.content.IntentFilter v3_1 = new android.content.IntentFilter("android.bluetooth.device.action.ACL_DISCONNECTED");
        this.registerReceiver(this.btOFFReciever, new android.content.IntentFilter("android.bluetooth.adapter.action.STATE_CHANGED"));
        this.registerReceiver(this.messageClear, new android.content.IntentFilter("a2dp.vol.service.CLEAR"));
        if (this.carMode) {
            v3_1.addAction(android.app.UiModeManager.ACTION_EXIT_CAR_MODE);
            v2_1.addAction(android.app.UiModeManager.ACTION_ENTER_CAR_MODE);
        }
        if (this.homeDock) {
            v3_1.addAction(android.app.UiModeManager.ACTION_EXIT_DESK_MODE);
            v2_1.addAction(android.app.UiModeManager.ACTION_ENTER_DESK_MODE);
        }
        if (this.power) {
            v3_1.addAction("android.intent.action.ACTION_POWER_DISCONNECTED");
            v2_1.addAction("android.intent.action.ACTION_POWER_CONNECTED");
        }
        if (this.headsetPlug) {
            this.registerReceiver(this.headSetReceiver, new android.content.IntentFilter("android.intent.action.HEADSET_PLUG"));
        }
        this.registerReceiver(this.mReceiver, v2_1);
        this.registerReceiver(this.mReceiver2, v3_1);
        return;
    }

    private boolean runApp(a2dp.Vol.btDevice p15)
    {
        int v10 = 0;
        String v7 = p15.getPname();
        String v1 = p15.getAppaction();
        String v2 = p15.getAppdata();
        String v3 = p15.getApptype();
        if ((p15.isApprestart()) && ((v7 != null) && (v7.length() > 3))) {
            try {
                ((android.app.ActivityManager) this.getSystemService("activity")).killBackgroundProcesses(v7);
            } catch (Exception v4_0) {
                v4_0.printStackTrace();
            }
        }
        if ((v7 != null) && (!v7.equals(""))) {
            android.content.Intent v6_0;
            if (v2.length() <= 1) {
                if (v1.equals("")) {
                    try {
                        v6_0 = this.mPackageManager.getLaunchIntentForPackage(v7);
                    } catch (Exception v4_1) {
                        v4_1.printStackTrace();
                        return v10;
                    }
                    v6_0.setFlags(268435456);
                    try {
                        this.startActivity(v6_0);
                        v10 = 1;
                    } catch (Exception v4_3) {
                        android.widget.Toast vtmp21 = android.widget.Toast.makeText(this.getApplicationContext(), 2131165278, 1);
                        if (this.notify) {
                            vtmp21.show();
                        }
                        v4_3.printStackTrace();
                    }
                    return v10;
                } else {
                    v6_0 = new android.content.Intent();
                    v6_0.setAction(v1);
                    if (!v2.equals("")) {
                        v6_0.setData(android.net.Uri.parse(v2));
                    }
                    if (!v3.equals("")) {
                        v6_0.setType(v3);
                    }
                }
            } else {
                try {
                    v6_0 = android.content.Intent.getIntent(v2);
                } catch (Exception v4_2) {
                    v4_2.printStackTrace();
                    return v10;
                }
            }
            try {
            } catch (Exception v5) {
                v5.printStackTrace();
            }
        }
        return v10;
    }

    public static int setPVolume(int p4)
    {
        if (p4 < 0) {
            p4 = 0;
        }
        if (p4 > a2dp.Vol.service.am2.getStreamMaxVolume(0)) {
            p4 = a2dp.Vol.service.am2.getStreamMaxVolume(0);
        }
        if (!a2dp.Vol.service.hideVolUi) {
            a2dp.Vol.service.am2.setStreamVolume(0, p4, 0);
        } else {
            a2dp.Vol.service.am2.setStreamVolume(0, p4, 1);
        }
        return a2dp.Vol.service.am2.getStreamVolume(0);
    }

    public static void setVolume(int p8, android.content.Context p9)
    {
        int v0 = a2dp.Vol.service.am2.getStreamVolume(3);
        if (p8 < 0) {
            p8 = 0;
        }
        if (p8 > a2dp.Vol.service.am2.getStreamMaxVolume(3)) {
            p8 = a2dp.Vol.service.am2.getStreamMaxVolume(3);
        }
        if ((!a2dp.Vol.service.ramp_vol) || (p8 <= v0)) {
            int v7;
            if (!a2dp.Vol.service.hideVolUi) {
                v7 = 1;
            } else {
                v7 = 0;
            }
            a2dp.Vol.service.am2.setStreamVolume(3, p8, v7);
        } else {
            new a2dp.Vol.service$10(((long) ((p8 - v0) * 1000)), 1000, p8).start();
        }
        return;
    }

    private void set_car_mode(boolean p5)
    {
        try {
            android.app.UiModeManager v1_1 = ((android.app.UiModeManager) this.getSystemService("uimode"));
        } catch (Exception v0) {
            android.widget.Toast.makeText(this, v0.getMessage(), 1).show();
            v0.printStackTrace();
            return;
        }
        if (!p5) {
            v1_1.disableCarMode(0);
            return;
        } else {
            v1_1.enableCarMode(1);
            return;
        }
    }

    private void updateNot(boolean p14, String p15)
    {
        String v4;
        if (p15 == null) {
            if (a2dp.Vol.service.connects.intValue() <= 0) {
                v4 = this.getResources().getString(2131165264);
            } else {
                String v5 = 0;
                int v1 = 0;
                while (v1 < a2dp.Vol.service.btdConn.length) {
                    if (a2dp.Vol.service.btdConn[v1] != null) {
                        v5 = a2dp.Vol.service.btdConn[v1].toString();
                    }
                    v1++;
                }
                v4 = new StringBuilder().append(this.getResources().getString(2131165285)).append(" ").append(v5).toString();
                p14 = 1;
            }
        } else {
            v4 = new StringBuilder().append(this.getResources().getString(2131165285)).append(" ").append(p15).toString();
        }
        if (p14 == 0) {
            this.mNotificationManager.cancel(1);
            if (a2dp.Vol.service.notify_pref.equalsIgnoreCase("always")) {
                this.mNotificationManager.notify(1, new android.app.Notification$Builder(a2dp.Vol.service.application).setContentTitle(this.getResources().getString(2131165277)).setContentIntent(android.app.PendingIntent.getActivity(this, 0, new android.content.Intent(this, a2dp.Vol.main), 0)).setSmallIcon(2130837506).setContentText(v4).setPriority(-2).build());
            }
        } else {
            this.mNotificationManager.notify(1, new android.support.v4.app.NotificationCompat$Builder(a2dp.Vol.service.application).setContentTitle(this.getResources().getString(2131165277)).setContentIntent(android.app.PendingIntent.getActivity(this, 0, new android.content.Intent(this, a2dp.Vol.main), 0)).setSmallIcon(this.connectedIcon).setContentText(v4).setPriority(-2).build());
        }
        return;
    }

    protected void DoConnected(a2dp.Vol.btDevice p26)
    {
        int v17 = 0;
        int v21 = 0;
        int v20 = 0;
        while (v20 < a2dp.Vol.service.btdConn.length) {
            if ((a2dp.Vol.service.btdConn[v20] != null) && (p26.getMac().equalsIgnoreCase(a2dp.Vol.service.btdConn[v20].getMac()))) {
                v21 = v20;
                v17 = 1;
            }
            v20++;
        }
        if (v17 == 0) {
            do {
                if (a2dp.Vol.service.btdConn[v21] == null) {
                    a2dp.Vol.service.btdConn[v21] = p26;
                    v17 = 1;
                }
                v21++;
                if (v21 >= a2dp.Vol.service.btdConn.length) {
                    v17 = 1;
                }
            } while(v17 == 0);
        }
        void v25_1 = this.getConnects();
        if (a2dp.Vol.service.connects.intValue() <= 1) {
            v25_1 = v25_1.getOldvol().getOldPvol();
            v25_1.oldwifistate = v25_1.wifiManager.isWifiEnabled();
            v25_1.oldgpsstate = v25_1.locmanager.isProviderEnabled("gps");
        }
        v25_1.connectedIcon = p26.getIcon();
        v25_1.SMSstream = p26.getSmsstream();
        v25_1.vol_delay = ((long) (p26.getVoldelay() * 1000));
        v25_1.SMS_delay = ((long) (p26.getSmsdelay() * 1000));
        a2dp.Vol.service.ramp_vol = p26.isVolramp();
        if (p26.wifi) {
            try {
                v25_1.oldwifistate = v25_1.wifiManager.isWifiEnabled();
                v25_1.dowifi(0);
            } catch (Exception v18) {
                v18.printStackTrace();
                android.util.Log.e("A2DP_Volume", new StringBuilder().append("Error ").append(v18.getMessage()).toString());
            }
        }
        if ((p26.getBdevice() != null) && (p26.getBdevice().length() == 17)) {
            a2dp.Vol.service.DeviceToConnect = p26.getBdevice();
            v25_1.getIBluetoothA2dp(a2dp.Vol.service.application);
        }
        if (v25_1.notify) {
            v25_1.updateNot(1, p26.toString());
        }
        if (v25_1.toasts) {
            android.widget.Toast.makeText(a2dp.Vol.service.application, p26.toString(), 1).show();
        }
        if (p26.hasIntent()) {
            if (v25_1.tm == null) {
                v25_1.runApp(p26);
            } else {
                if (v25_1.tm.getCallState() == 0) {
                    v25_1.runApp(p26);
                }
            }
        }
        if ((v25_1.enableGTalk) && (p26.isEnableTTS())) {
            v25_1.mTts = new android.speech.tts.TextToSpeech(a2dp.Vol.service.application, v25_1.listenerStarted);
            android.content.IntentFilter v22 = new android.content.IntentFilter;
            v22("a2dp.vol.service.MESSAGE");
            a2dp.Vol.service.application.registerReceiver(v25_1.tmessage, v22);
            v25_1.tmessageRegistered = 1;
            android.content.IntentFilter v23 = new android.content.IntentFilter;
            v23("android.media.ACTION_SCO_AUDIO_STATE_UPDATED");
            v25_1.registerReceiver(v25_1.sco_change, v23);
            a2dp.Vol.service.talk = 1;
        }
        if ((p26.isEnableTTS()) && (v25_1.enableSMS)) {
            a2dp.Vol.service.application.registerReceiver(v25_1.SMScatcher, new android.content.IntentFilter("android.provider.Telephony.SMS_RECEIVED"));
        }
        android.content.Intent v19_1 = new android.content.Intent();
        v19_1.setAction("a2dp.Vol.main.RELOAD_LIST");
        v19_1.putExtra("connect", p26.getMac());
        a2dp.Vol.service.application.sendBroadcast(v19_1);
        v25_1.connecting = 0;
        a2dp.Vol.service.application.sendBroadcast(new android.content.Intent("a2dp.Vol.Clear"));
        if (p26.isSetpv()) {
            new a2dp.Vol.service$6(v25_1, (v25_1.vol_delay + 500), (v25_1.vol_delay + 500), p26.getPhonev()).start();
        }
        if (p26.isSilent()) {
            a2dp.Vol.service.am2.setStreamVolume(5, 0, 0);
        }
        if (p26.isSetV()) {
            new a2dp.Vol.service$7(v25_1, v25_1.vol_delay, v25_1.vol_delay, p26.getDefVol()).start();
        }
        if (p26.isCarmode()) {
            v25_1.set_car_mode(1);
        }
        return;
    }

    protected void DoDisconnected(a2dp.Vol.btDevice p22)
    {
        int v10 = a2dp.Vol.service.am2.getStreamVolume(3);
        if (p22.hasIntent()) {
            if (a2dp.Vol.service.am2.isMusicActive()) {
                android.content.Intent v15_1 = new android.content.Intent("com.android.music.musicservicecommand");
                v15_1.putExtra("command", "pause");
                this.sendBroadcast(v15_1);
                android.content.Intent v17 = new android.content.Intent;
                v17("android.intent.action.HEADSET_PLUG");
                v17.putExtra("state", 0);
                try {
                    this.sendBroadcast(v17);
                } catch (Exception v14_2) {
                    v14_2.printStackTrace();
                }
                android.content.Intent v13_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON", 0);
                v13_1.putExtra("android.intent.extra.KEY_EVENT", new android.view.KeyEvent(0, 86));
                this.sendOrderedBroadcast(v13_1, 0);
            }
            if ((p22.getPname().length() > 3) && (p22.isAppkill())) {
                android.content.Intent v20 = new android.content.Intent;
                v20("android.intent.action.MAIN");
                v20.addCategory("android.intent.category.HOME");
                v20.setFlags(268435456);
                this.startActivity(v20);
                new a2dp.Vol.service$9(this, 3000, 3000, p22.getPname()).start();
            }
        }
        if ((p22 != null) && (p22.isGetLoc())) {
            android.content.Intent v11_1 = new android.content.Intent(this, a2dp.Vol.StoreLoc);
            v11_1.putExtra("device", p22.getMac());
            try {
                this.startService(v11_1);
            } catch (Exception v14_3) {
                v14_3.printStackTrace();
            }
        }
        if (p22.wifi) {
            this.dowifi(this.oldwifistate);
        }
        int v18 = 0;
        while (v18 < a2dp.Vol.service.btdConn.length) {
            if ((a2dp.Vol.service.btdConn[v18] != null) && (p22.getMac().equalsIgnoreCase(a2dp.Vol.service.btdConn[v18].getMac()))) {
                a2dp.Vol.service.btdConn[v18] = 0;
            }
            v18++;
        }
        void v21_1 = this.getConnects();
        if ((((p22 != null) && (p22.isSetV())) || (p22 == null)) && (!a2dp.Vol.service.mvolsLeft)) {
            a2dp.Vol.service.setVolume(a2dp.Vol.service.OldVol2.intValue(), a2dp.Vol.service.application);
        }
        if ((((p22 != null) && (p22.isSetpv())) || (p22 == null)) && (!a2dp.Vol.service.pvolsLeft)) {
            a2dp.Vol.service.setPVolume(a2dp.Vol.service.OldVol.intValue());
        }
        if ((v21_1.notify) && (p22.mac != null)) {
            v21_1.updateNot(0, 0);
        }
        if ((a2dp.Vol.service.mTtsReady) && ((p22.isEnableTTS()) || ((v21_1.enableGTalk) || (a2dp.Vol.service.connects.intValue() < 1)))) {
            try {
                if (!v21_1.clearedTts) {
                    v21_1 = v21_1.clearTts();
                }
            } catch (Exception v14_0) {
                v14_0.printStackTrace();
            }
            v21_1.mTts.shutdown();
            a2dp.Vol.service.mTtsReady = 0;
            if (v21_1.enableGTalk) {
                v21_1.unregisterReceiver(v21_1.sco_change);
                a2dp.Vol.service.talk = 0;
            }
            if (v21_1.enableSMS) {
                a2dp.Vol.service.application.unregisterReceiver(v21_1.SMScatcher);
            }
        }
        if (v21_1.tmessageRegistered) {
            try {
                a2dp.Vol.service.application.unregisterReceiver(v21_1.tmessage);
            } catch (Exception v14_1) {
                v14_1.printStackTrace();
            }
            v21_1.tmessageRegistered = 0;
        }
        if (p22.isSilent()) {
            a2dp.Vol.service.am2.setStreamVolume(5, a2dp.Vol.service.Oldsilent.intValue(), 0);
        }
        if ((p22.getBdevice() != null) && (p22.getBdevice().length() == 17)) {
            android.bluetooth.BluetoothAdapter v19 = android.bluetooth.BluetoothAdapter.getDefaultAdapter();
            if (v19 != null) {
                if ((v19.isEnabled()) && (v21_1.bluetoothWasOff)) {
                    v19.disable();
                }
                a2dp.Vol.service.doUnbind(a2dp.Vol.service.application);
            }
        }
        if (p22.isAutovol()) {
            p22.setDefVol(v10);
            v21_1.DB.update(p22);
        }
        if (p22.isCarmode()) {
            v21_1.set_car_mode(0);
        }
        android.content.Intent v16_1 = new android.content.Intent();
        v16_1.setAction("a2dp.Vol.main.RELOAD_LIST");
        v16_1.putExtra("disconnect", p22.getMac());
        a2dp.Vol.service.application.sendBroadcast(v16_1);
        v21_1.disconnecting = 0;
        return;
    }

    public void TextReader(String p13)
    {
        if (a2dp.Vol.service.mTtsReady) {
            this.myHash = new java.util.HashMap();
            if (p13 != null) {
                String v8_0 = p13.replaceAll("http.*? ", ", URL, ");
                this.myHash.put("utteranceId", "A2DP_Vol");
                if (v8_0.length() > this.MAX_MESSAGE_LENGTH) {
                    v8_0 = new StringBuilder().append(v8_0.substring(0, this.MAX_MESSAGE_LENGTH)).append(" , , , message truncated").toString();
                }
                this.musicWasPlaying = a2dp.Vol.service.am2.isMusicActive();
                switch (this.SMSstream) {
                    case 0:
                        a2dp.Vol.service.am2.requestAudioFocus(this, 3, 2);
                        this.myHash.put("streamType", String.valueOf(3));
                        this.clearedTts = 0;
                        break;
                    case 1:
                        if (a2dp.Vol.service.am2.isBluetoothScoAvailableOffCall()) {
                            a2dp.Vol.service.am2.startBluetoothSco();
                        }
                        if (this.musicWasPlaying) {
                            android.content.Intent v7_1 = new android.content.Intent("com.android.music.musicservicecommand");
                            v7_1.putExtra("command", "pause");
                            this.sendBroadcast(v7_1);
                        }
                        a2dp.Vol.service.am2.requestAudioFocus(this, 0, 1);
                        this.myHash.put("streamType", String.valueOf(0));
                        this.clearedTts = 0;
                        break;
                    case 2:
                        a2dp.Vol.service.am2.requestAudioFocus(this, 4, 2);
                        this.myHash.put("streamType", String.valueOf(4));
                        this.clearedTts = 0;
                        break;
                }
                String v6 = v8_0;
                if (this.toasts) {
                    android.widget.Toast.makeText(a2dp.Vol.service.application, v6, 1).show();
                }
                if (this.tm.getCallState() == 0) {
                    new a2dp.Vol.service$13(this, this.SMS_delay, (this.SMS_delay / 2), v6).start();
                }
            } else {
                android.widget.Toast.makeText(a2dp.Vol.service.application, "No input", 1).show();
            }
        }
        return;
    }

    public void getIBluetoothA2dp(android.content.Context p5)
    {
        android.content.Intent v1_1 = new android.content.Intent(android.bluetooth.IBluetoothA2dp.getName());
        v1_1.setPackage(this.getPackageManager().resolveService(v1_1, 64).serviceInfo.packageName);
        if (!p5.bindService(v1_1, a2dp.Vol.service.mConnection, 1)) {
            android.widget.Toast.makeText(p5, "start service connection failed", 0).show();
        }
        return;
    }

    public void onAudioFocusChange(int p1)
    {
        switch (p1) {
            case -2:
            case -1:
            case 0:
            case 1:
            default:
                return;
        }
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return 0;
    }

    public void onCreate()
    {
        a2dp.Vol.service.application = ((a2dp.Vol.MyApplication) this.getApplication());
        try {
            this.preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(a2dp.Vol.service.application);
            this.carMode = this.preferences.getBoolean("car_mode", 1);
            this.homeDock = this.preferences.getBoolean("home_dock", 0);
            this.headsetPlug = this.preferences.getBoolean("headset", 0);
            this.power = this.preferences.getBoolean("power", 0);
            this.toasts = this.preferences.getBoolean("toasts", 1);
            this.enableSMS = this.preferences.getBoolean("enableTTS", 0);
            this.enableGTalk = this.preferences.getBoolean("enableGTalk", 1);
            a2dp.Vol.service.notify_pref = this.preferences.getString("notify_pref", "always");
            a2dp.Vol.service.hideVolUi = this.preferences.getBoolean("hideVolUi", 0);
            this.MAX_TIME = Long.valueOf(this.preferences.getString("gpsTime", "15000")).longValue();
            this.MAX_ACC = Float.valueOf(this.preferences.getString("gpsDistance", "10")).floatValue();
            this.local = this.preferences.getBoolean("useLocalStorage", 0);
        } catch (NumberFormatException v2) {
            this.MAX_ACC = 1092616192;
            this.MAX_TIME = 15000;
            android.widget.Toast.makeText(this, "prefs failed to load ", 1).show();
            v2.printStackTrace();
            android.util.Log.e("A2DP_Volume", new StringBuilder().append("prefs failed to load ").append(v2.getMessage()).toString());
            this.registerRecievers();
            a2dp.Vol.service.am2 = ((android.media.AudioManager) this.getSystemService("audio"));
            this.DB = new a2dp.Vol.DeviceDB(a2dp.Vol.service.application);
            this.wifiManager = ((android.net.wifi.WifiManager) this.getApplicationContext().getSystemService("wifi"));
            this.locmanager = ((android.location.LocationManager) this.getBaseContext().getSystemService("location"));
            if ((!a2dp.Vol.service.notify_pref.equalsIgnoreCase("always")) && (!a2dp.Vol.service.notify_pref.equalsIgnoreCase("connected_only"))) {
                this.notify = 0;
            } else {
                this.notify = 1;
            }
            if (this.notify) {
                this.mNotificationManager = ((android.app.NotificationManager) this.getSystemService("notification"));
                android.app.Notification v4 = new android.app.Notification$Builder(a2dp.Vol.service.application).setContentTitle(this.getResources().getString(2131165277)).setContentIntent(android.app.PendingIntent.getActivity(this, 0, new android.content.Intent(this, a2dp.Vol.main), 0)).setSmallIcon(2130837506).setContentText(this.getResources().getString(2131165264)).setPriority(-2).build();
                if (a2dp.Vol.service.notify_pref.equalsIgnoreCase("always")) {
                    this.mNotificationManager.notify(1, v4);
                    this.startForeground(1, v4);
                }
            }
            a2dp.Vol.service.run = 1;
            if (this.toasts) {
                android.widget.Toast.makeText(this, 2131165265, 1).show();
            }
            android.content.Intent v3_1 = new android.content.Intent();
            v3_1.setAction("a2dp.vol.service.RUNNING");
            a2dp.Vol.service.application.sendBroadcast(v3_1);
            this.tm = ((android.telephony.TelephonyManager) this.getSystemService("phone"));
            this.mPackageManager = this.getPackageManager();
            return;
        }
        if (!this.local) {
            this.a2dpDir = new StringBuilder().append(android.os.Environment.getExternalStorageDirectory()).append("/A2DPVol").toString();
        } else {
            this.a2dpDir = this.getFilesDir().toString();
        }
        a2dp.Vol.service.OldVol2 = Integer.valueOf(this.preferences.getInt("old_vol", 10));
        a2dp.Vol.service.OldVol = Integer.valueOf(this.preferences.getInt("old_phone_vol", 5));
        a2dp.Vol.service.Oldsilent = Integer.valueOf(this.preferences.getInt("oldsilent", 10));
    }

    public void onDestroy()
    {
        a2dp.Vol.service.run = 0;
        this.stopService(new android.content.Intent(a2dp.Vol.service.application, a2dp.Vol.StoreLoc));
        try {
            this.unregisterReceiver(this.mReceiver);
            this.unregisterReceiver(this.mReceiver2);
            this.unregisterReceiver(this.btOFFReciever);
        } catch (Exception v1_1) {
            v1_1.printStackTrace();
            android.content.Intent v2_1 = new android.content.Intent();
            v2_1.setAction("a2dp.vol.service.STOPPED_RUNNING");
            a2dp.Vol.service.application.sendBroadcast(v2_1);
            if (this.toasts) {
                android.widget.Toast.makeText(this, 2131165266, 1).show();
            }
            // Both branches of the condition point to the same code.
            // if (!a2dp.Vol.service.mIsBound) {
                this.stopForeground(1);
                return;
            // }
        }
        if (this.headsetPlug) {
            this.unregisterReceiver(this.headSetReceiver);
        }
        if (a2dp.Vol.service.mTtsReady) {
            try {
                if (!this.clearedTts) {
                    this.clearTts();
                }
            } catch (Exception v1_0) {
                v1_0.printStackTrace();
            }
            this.mTts.shutdown();
            a2dp.Vol.service.mTtsReady = 0;
            this.unregisterReceiver(this.SMScatcher);
            this.unregisterReceiver(this.sco_change);
            this.unregisterReceiver(this.tmessage);
        }
        this.DB.getDb().close();
        this.unregisterReceiver(this.messageClear);
    }

    public void onStart()
    {
        a2dp.Vol.service.run = 1;
        this.connecting = 0;
        this.disconnecting = 0;
        if (this.notify) {
            this.updateNot(0, 0);
        }
        return;
    }

    public int onStartCommand(android.content.Intent p2, int p3, int p4)
    {
        this.tm = ((android.telephony.TelephonyManager) this.getSystemService("phone"));
        return 1;
    }

    protected void stopApp(String p11)
    {
        if (this.getPackageManager().getLaunchIntentForPackage(p11) != null) {
            try {
                android.app.ActivityManager v0_1 = ((android.app.ActivityManager) this.getSystemService("activity"));
                v0_1.killBackgroundProcesses(p11);
                boolean v7_1 = v0_1.getRunningAppProcesses().iterator();
            } catch (android.content.ActivityNotFoundException v1) {
                v1.printStackTrace();
                android.widget.Toast vtmp7 = android.widget.Toast.makeText(this.getApplicationContext(), 2131165278, 0);
                if (!this.notify) {
                    return;
                } else {
                    vtmp7.show();
                    return;
                }
                int v2++;
                while (v2 < android.app.ActivityManager$RunningAppProcessInfo v3_1.pkgList.length) {
                    if (v3_1.pkgList[v2].contains(p11)) {
                        android.os.Process.killProcess(v3_1.pid);
                    }
                }
            }
            while (v7_1.hasNext()) {
                v3_1 = ((android.app.ActivityManager$RunningAppProcessInfo) v7_1.next());
                v2 = 0;
            }
        }
        return;
    }
}
package android.bluetooth;
public interface IBluetooth implements android.os.IInterface {

    public abstract String getRemoteAlias();

    public abstract boolean setRemoteAlias();
}
package android.bluetooth;
public interface IBluetoothA2dp implements android.os.IInterface {

    public abstract boolean connect();

    public abstract boolean connectSink();

    public abstract boolean disconnect();

    public abstract boolean disconnectSink();

    public abstract android.bluetooth.BluetoothDevice[] getConnectedSinks();

    public abstract int getConnectionState();

    public abstract android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks();

    public abstract int getPriority();

    public abstract int getSinkPriority();

    public abstract int getSinkState();

    public abstract boolean isA2dpPlaying();

    public abstract boolean resumeSink();

    public abstract boolean setPriority();

    public abstract boolean setSinkPriority();

    public abstract boolean suspendSink();
}
package android.support.annotation;
public interface annotation AnimRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation AnimatorRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation AnyRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation AnyThread implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation ArrayRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation AttrRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation BinderThread implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation BoolRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation CallSuper implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation CheckResult implements java.lang.annotation.Annotation {

    public abstract String suggest();
}
package android.support.annotation;
public interface annotation ColorInt implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation ColorRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation DimenRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation Dimension implements java.lang.annotation.Annotation {
    public static final int DP = 0;
    public static final int PX = 1;
    public static final int SP = 2;

    public abstract int unit();
}
package android.support.annotation;
public interface annotation DrawableRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation FloatRange implements java.lang.annotation.Annotation {

    public abstract double from();

    public abstract boolean fromInclusive();

    public abstract double to();

    public abstract boolean toInclusive();
}
package android.support.annotation;
public interface annotation FractionRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation IdRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation IntDef implements java.lang.annotation.Annotation {

    public abstract boolean flag();

    public abstract long[] value();
}
package android.support.annotation;
public interface annotation IntRange implements java.lang.annotation.Annotation {

    public abstract long from();

    public abstract long to();
}
package android.support.annotation;
public interface annotation IntegerRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation InterpolatorRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation Keep implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation LayoutRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation MainThread implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation MenuRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation NonNull implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation Nullable implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation PluralsRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation Px implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation RawRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation RequiresApi implements java.lang.annotation.Annotation {

    public abstract int api();

    public abstract int value();
}
package android.support.annotation;
public interface annotation RequiresPermission$Read implements java.lang.annotation.Annotation {

    public abstract android.support.annotation.RequiresPermission value();
}
package android.support.annotation;
public interface annotation RequiresPermission$Write implements java.lang.annotation.Annotation {

    public abstract android.support.annotation.RequiresPermission value();
}
package android.support.annotation;
public interface annotation RequiresPermission implements java.lang.annotation.Annotation {

    public abstract String[] allOf();

    public abstract String[] anyOf();

    public abstract boolean conditional();

    public abstract String value();
}
package android.support.annotation;
public final enum class RestrictTo$Scope extends java.lang.Enum {
    private static final synthetic android.support.annotation.RestrictTo$Scope[] $VALUES;
    public static final enum android.support.annotation.RestrictTo$Scope GROUP_ID;
    public static final enum android.support.annotation.RestrictTo$Scope SUBCLASSES;
    public static final enum android.support.annotation.RestrictTo$Scope TESTS;

    static RestrictTo$Scope()
    {
        android.support.annotation.RestrictTo$Scope.GROUP_ID = new android.support.annotation.RestrictTo$Scope("GROUP_ID", 0);
        android.support.annotation.RestrictTo$Scope.TESTS = new android.support.annotation.RestrictTo$Scope("TESTS", 1);
        android.support.annotation.RestrictTo$Scope.SUBCLASSES = new android.support.annotation.RestrictTo$Scope("SUBCLASSES", 2);
        android.support.annotation.RestrictTo$Scope[] v0_3 = new android.support.annotation.RestrictTo$Scope[3];
        v0_3[0] = android.support.annotation.RestrictTo$Scope.GROUP_ID;
        v0_3[1] = android.support.annotation.RestrictTo$Scope.TESTS;
        v0_3[2] = android.support.annotation.RestrictTo$Scope.SUBCLASSES;
        android.support.annotation.RestrictTo$Scope.$VALUES = v0_3;
        return;
    }

    private RestrictTo$Scope(String p1, int p2)
    {
        super(p1, p2);
        return;
    }

    public static android.support.annotation.RestrictTo$Scope valueOf(String p1)
    {
        return ((android.support.annotation.RestrictTo$Scope) Enum.valueOf(android.support.annotation.RestrictTo$Scope, p1));
    }

    public static android.support.annotation.RestrictTo$Scope[] values()
    {
        return ((android.support.annotation.RestrictTo$Scope[]) android.support.annotation.RestrictTo$Scope.$VALUES.clone());
    }
}
package android.support.annotation;
public interface annotation RestrictTo implements java.lang.annotation.Annotation {

    public abstract android.support.annotation.RestrictTo$Scope[] value();
}
package android.support.annotation;
public interface annotation Size implements java.lang.annotation.Annotation {

    public abstract long max();

    public abstract long min();

    public abstract long multiple();

    public abstract long value();
}
package android.support.annotation;
public interface annotation StringDef implements java.lang.annotation.Annotation {

    public abstract String[] value();
}
package android.support.annotation;
public interface annotation StringRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation StyleRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation StyleableRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation TransitionRes implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation UiThread implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation VisibleForTesting implements java.lang.annotation.Annotation {
    public static final int NONE = 5;
    public static final int PACKAGE_PRIVATE = 3;
    public static final int PRIVATE = 2;
    public static final int PROTECTED = 4;

    public abstract int otherwise();
}
package android.support.annotation;
public interface annotation WorkerThread implements java.lang.annotation.Annotation {
}
package android.support.annotation;
public interface annotation XmlRes implements java.lang.annotation.Annotation {
}
package android.support.compat;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.compat";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.compat;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.coreui;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.coreui";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.coreui;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.coreutils;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.coreutils";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.coreutils;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.fragment;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.fragment";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.fragment;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.mediacompat;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.mediacompat";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.mediacompat;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.v4;
public final class BuildConfig {
    public static final String APPLICATION_ID = "android.support.v4";
    public static final String BUILD_TYPE = "release";
    public static final boolean DEBUG = False;
    public static final String FLAVOR = "";
    public static final int VERSION_CODE = 255;
    public static final String VERSION_NAME = "";

    public BuildConfig()
    {
        return;
    }
}
package android.support.v4;
public final class R {

    public R()
    {
        return;
    }
}
package android.support.v4.accessibilityservice;
interface AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl {

    public abstract boolean getCanRetrieveWindowContent();

    public abstract int getCapabilities();

    public abstract String getDescription();

    public abstract String getId();

    public abstract android.content.pm.ResolveInfo getResolveInfo();

    public abstract String getSettingsActivityName();

    public abstract String loadDescription();
}
package android.support.v4.accessibilityservice;
public final class AccessibilityServiceInfoCompat {
    public static final int CAPABILITY_CAN_FILTER_KEY_EVENTS = 8;
    public static final int CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 4;
    public static final int CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION = 2;
    public static final int CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT = 1;
    public static final int DEFAULT = 1;
    public static final int FEEDBACK_ALL_MASK = 255;
    public static final int FEEDBACK_BRAILLE = 32;
    public static final int FLAG_INCLUDE_NOT_IMPORTANT_VIEWS = 2;
    public static final int FLAG_REPORT_VIEW_IDS = 16;
    public static final int FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY = 8;
    public static final int FLAG_REQUEST_FILTER_KEY_EVENTS = 32;
    public static final int FLAG_REQUEST_TOUCH_EXPLORATION_MODE = 4;
    private static final android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl IMPL;

    static AccessibilityServiceInfoCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 18) {
            if (android.os.Build$VERSION.SDK_INT < 16) {
                if (android.os.Build$VERSION.SDK_INT < 14) {
                    android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl();
                } else {
                    android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl();
                }
            } else {
                android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanImpl();
            }
        } else {
            android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL = new android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanMr2Impl();
        }
        return;
    }

    private AccessibilityServiceInfoCompat()
    {
        return;
    }

    public static String capabilityToString(int p1)
    {
        String v0;
        switch (p1) {
            case 1:
                v0 = "CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT";
                break;
            case 2:
                v0 = "CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION";
                break;
            case 3:
            case 5:
            case 6:
            case 7:
            default:
                v0 = "UNKNOWN";
                break;
            case 4:
                v0 = "CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY";
                break;
            case 8:
                v0 = "CAPABILITY_CAN_FILTER_KEY_EVENTS";
                break;
        }
        return v0;
    }

    public static String feedbackTypeToString(int p4)
    {
        StringBuilder v0_1 = new StringBuilder();
        v0_1.append("[");
        while (p4 > 0) {
            int v1 = (1 << Integer.numberOfTrailingZeros(p4));
            p4 &= (v1 ^ -1);
            if (v0_1.length() > 1) {
                v0_1.append(", ");
            }
            switch (v1) {
                case 1:
                    v0_1.append("FEEDBACK_SPOKEN");
                    break;
                case 2:
                    v0_1.append("FEEDBACK_HAPTIC");
                    break;
                case 4:
                    v0_1.append("FEEDBACK_AUDIBLE");
                    break;
                case 8:
                    v0_1.append("FEEDBACK_VISUAL");
                    break;
                case 16:
                    v0_1.append("FEEDBACK_GENERIC");
                    break;
                default:
            }
        }
        v0_1.append("]");
        return v0_1.toString();
    }

    public static String flagToString(int p1)
    {
        String v0;
        switch (p1) {
            case 1:
                v0 = "DEFAULT";
                break;
            case 2:
                v0 = "FLAG_INCLUDE_NOT_IMPORTANT_VIEWS";
                break;
            case 4:
                v0 = "FLAG_REQUEST_TOUCH_EXPLORATION_MODE";
                break;
            case 8:
                v0 = "FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY";
                break;
            case 16:
                v0 = "FLAG_REPORT_VIEW_IDS";
                break;
            case 32:
                v0 = "FLAG_REQUEST_FILTER_KEY_EVENTS";
                break;
            default:
                v0 = 0;
        }
        return v0;
    }

    public static boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getCanRetrieveWindowContent(p1);
    }

    public static int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getCapabilities(p1);
    }

    public static String getDescription(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getDescription(p1);
    }

    public static String getId(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getId(p1);
    }

    public static android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getResolveInfo(p1);
    }

    public static String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.getSettingsActivityName(p1);
    }

    public static String loadDescription(android.accessibilityservice.AccessibilityServiceInfo p1, android.content.pm.PackageManager p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.IMPL.loadDescription(p1, p2);
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompatIcs {

    AccessibilityServiceInfoCompatIcs()
    {
        return;
    }

    public static boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getCanRetrieveWindowContent();
    }

    public static String getDescription(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getDescription();
    }

    public static String getId(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getId();
    }

    public static android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getResolveInfo();
    }

    public static String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getSettingsActivityName();
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompatJellyBean {

    AccessibilityServiceInfoCompatJellyBean()
    {
        return;
    }

    public static String loadDescription(android.accessibilityservice.AccessibilityServiceInfo p1, android.content.pm.PackageManager p2)
    {
        return p1.loadDescription(p2);
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompatJellyBeanMr2 {

    AccessibilityServiceInfoCompatJellyBeanMr2()
    {
        return;
    }

    public static int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo p1)
    {
        return p1.getCapabilities();
    }
}
package android.support.v4.animation;
public final class AnimatorCompatHelper {
    private static final android.support.v4.animation.AnimatorProvider IMPL;

    static AnimatorCompatHelper()
    {
        if (android.os.Build$VERSION.SDK_INT < 12) {
            android.support.v4.animation.AnimatorCompatHelper.IMPL = new android.support.v4.animation.GingerbreadAnimatorCompatProvider();
        } else {
            android.support.v4.animation.AnimatorCompatHelper.IMPL = new android.support.v4.animation.HoneycombMr1AnimatorCompatProvider();
        }
        return;
    }

    private AnimatorCompatHelper()
    {
        return;
    }

    public static void clearInterpolator(android.view.View p1)
    {
        android.support.v4.animation.AnimatorCompatHelper.IMPL.clearInterpolator(p1);
        return;
    }

    public static android.support.v4.animation.ValueAnimatorCompat emptyValueAnimator()
    {
        return android.support.v4.animation.AnimatorCompatHelper.IMPL.emptyValueAnimator();
    }
}
package android.support.v4.animation;
public interface AnimatorListenerCompat {

    public abstract void onAnimationCancel();

    public abstract void onAnimationEnd();

    public abstract void onAnimationRepeat();

    public abstract void onAnimationStart();
}
package android.support.v4.animation;
interface AnimatorProvider {

    public abstract void clearInterpolator();

    public abstract android.support.v4.animation.ValueAnimatorCompat emptyValueAnimator();
}
package android.support.v4.animation;
public interface AnimatorUpdateListenerCompat {

    public abstract void onAnimationUpdate();
}
package android.support.v4.animation;
 class GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator$1 implements java.lang.Runnable {
    final synthetic android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator this$0;

    GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator$1(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        int v2 = ((((float) (android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$000(this.this$0) - android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$100(this.this$0))) * 1065353216) / ((float) android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$200(this.this$0)));
        if ((v2 > 1065353216) || (this.this$0.mTarget.getParent() == null)) {
            v2 = 1065353216;
        }
        android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$302(this.this$0, v2);
        android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$400(this.this$0);
        if (android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$300(this.this$0) < 1065353216) {
            this.this$0.mTarget.postDelayed(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$600(this.this$0), 16);
        } else {
            android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator.access$500(this.this$0);
        }
        return;
    }
}
package android.support.v4.animation;
 class HoneycombMr1AnimatorCompatProvider$AnimatorListenerCompatWrapper implements android.animation.Animator$AnimatorListener {
    final android.support.v4.animation.ValueAnimatorCompat mValueAnimatorCompat;
    final android.support.v4.animation.AnimatorListenerCompat mWrapped;

    public HoneycombMr1AnimatorCompatProvider$AnimatorListenerCompatWrapper(android.support.v4.animation.AnimatorListenerCompat p1, android.support.v4.animation.ValueAnimatorCompat p2)
    {
        this.mWrapped = p1;
        this.mValueAnimatorCompat = p2;
        return;
    }

    public void onAnimationCancel(android.animation.Animator p3)
    {
        this.mWrapped.onAnimationCancel(this.mValueAnimatorCompat);
        return;
    }

    public void onAnimationEnd(android.animation.Animator p3)
    {
        this.mWrapped.onAnimationEnd(this.mValueAnimatorCompat);
        return;
    }

    public void onAnimationRepeat(android.animation.Animator p3)
    {
        this.mWrapped.onAnimationRepeat(this.mValueAnimatorCompat);
        return;
    }

    public void onAnimationStart(android.animation.Animator p3)
    {
        this.mWrapped.onAnimationStart(this.mValueAnimatorCompat);
        return;
    }
}
package android.support.v4.animation;
 class HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat$1 implements android.animation.ValueAnimator$AnimatorUpdateListener {
    final synthetic android.support.v4.animation.HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat this$0;
    final synthetic android.support.v4.animation.AnimatorUpdateListenerCompat val$animatorUpdateListener;

    HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat$1(android.support.v4.animation.HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat p1, android.support.v4.animation.AnimatorUpdateListenerCompat p2)
    {
        this.this$0 = p1;
        this.val$animatorUpdateListener = p2;
        return;
    }

    public void onAnimationUpdate(android.animation.ValueAnimator p3)
    {
        this.val$animatorUpdateListener.onAnimationUpdate(this.this$0);
        return;
    }
}
package android.support.v4.animation;
public interface ValueAnimatorCompat {

    public abstract void addListener();

    public abstract void addUpdateListener();

    public abstract void cancel();

    public abstract float getAnimatedFraction();

    public abstract void setDuration();

    public abstract void setTarget();

    public abstract void start();
}
package android.support.v4.app;
interface ActionBarDrawerToggle$ActionBarDrawerToggleImpl {

    public abstract android.graphics.drawable.Drawable getThemeUpIndicator();

    public abstract Object setActionBarDescription();

    public abstract Object setActionBarUpIndicator();
}
package android.support.v4.app;
public interface ActionBarDrawerToggle$Delegate {

    public abstract android.graphics.drawable.Drawable getThemeUpIndicator();

    public abstract void setActionBarDescription();

    public abstract void setActionBarUpIndicator();
}
package android.support.v4.app;
public interface ActionBarDrawerToggle$DelegateProvider {

    public abstract android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate();
}
package android.support.v4.app;
 class ActionBarDrawerToggle$SlideDrawable extends android.graphics.drawable.InsetDrawable implements android.graphics.drawable.Drawable$Callback {
    private final boolean mHasMirroring;
    private float mOffset;
    private float mPosition;
    private final android.graphics.Rect mTmpRect;
    final synthetic android.support.v4.app.ActionBarDrawerToggle this$0;

    ActionBarDrawerToggle$SlideDrawable(android.support.v4.app.ActionBarDrawerToggle p4, android.graphics.drawable.Drawable p5)
    {
        android.graphics.Rect v0_0 = 0;
        this.this$0 = p4;
        super(p5, 0);
        if (android.os.Build$VERSION.SDK_INT > 18) {
            v0_0 = 1;
        }
        super.mHasMirroring = v0_0;
        super.mTmpRect = new android.graphics.Rect();
        return;
    }

    public void draw(android.graphics.Canvas p7)
    {
        int v1;
        int v0 = 1;
        this.copyBounds(this.mTmpRect);
        p7.save();
        if (android.support.v4.view.ViewCompat.getLayoutDirection(this.this$0.mActivity.getWindow().getDecorView()) != 1) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        if (v1 != 0) {
            v0 = -1;
        }
        int v2 = this.mTmpRect.width();
        p7.translate(((((- this.mOffset) * ((float) v2)) * this.mPosition) * ((float) v0)), 0);
        if ((v1 != 0) && (!this.mHasMirroring)) {
            p7.translate(((float) v2), 0);
            p7.scale(-1082130432, 1065353216);
        }
        super.draw(p7);
        p7.restore();
        return;
    }

    public float getPosition()
    {
        return this.mPosition;
    }

    public void setOffset(float p1)
    {
        this.mOffset = p1;
        this.invalidateSelf();
        return;
    }

    public void setPosition(float p1)
    {
        this.mPosition = p1;
        this.invalidateSelf();
        return;
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggleHoneycomb$SetIndicatorInfo {
    public reflect.Method setHomeActionContentDescription;
    public reflect.Method setHomeAsUpIndicator;
    public android.widget.ImageView upIndicatorView;

    ActionBarDrawerToggleHoneycomb$SetIndicatorInfo(android.app.Activity p15)
    {
        try {
            Class[] v8_3 = new Class[1];
            v8_3[0] = android.graphics.drawable.Drawable;
            this.setHomeAsUpIndicator = android.app.ActionBar.getDeclaredMethod("setHomeAsUpIndicator", v8_3);
            Class[] v8_1 = new Class[1];
            v8_1[0] = Integer.TYPE;
            this.setHomeActionContentDescription = android.app.ActionBar.getDeclaredMethod("setHomeActionContentDescription", v8_1);
        } catch (boolean v6) {
            android.view.View v2 = p15.findViewById(16908332);
            if (v2 == null) {
            } else {
                android.view.ViewGroup v3_1 = ((android.view.ViewGroup) v2.getParent());
                if (v3_1.getChildCount() != 2) {
                } else {
                    android.view.View v1 = v3_1.getChildAt(0);
                    android.view.View v4 = v3_1.getChildAt(1);
                    if (v1.getId() != 16908332) {
                        android.widget.ImageView v5_0 = v1;
                    } else {
                        v5_0 = v4;
                    }
                    if (!(v5_0 instanceof android.widget.ImageView)) {
                    } else {
                        this.upIndicatorView = ((android.widget.ImageView) v5_0);
                    }
                }
            }
        }
        return;
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggleHoneycomb {
    private static final String TAG = "ActionBarDrawerToggleHoneycomb";
    private static final int[] THEME_ATTRS;

    static ActionBarDrawerToggleHoneycomb()
    {
        int[] v0_1 = new int[1];
        v0_1[0] = 16843531;
        android.support.v4.app.ActionBarDrawerToggleHoneycomb.THEME_ATTRS = v0_1;
        return;
    }

    ActionBarDrawerToggleHoneycomb()
    {
        return;
    }

    public static android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity p3)
    {
        android.content.res.TypedArray v0 = p3.obtainStyledAttributes(android.support.v4.app.ActionBarDrawerToggleHoneycomb.THEME_ATTRS);
        android.graphics.drawable.Drawable v1 = v0.getDrawable(0);
        v0.recycle();
        return v1;
    }

    public static Object setActionBarDescription(Object p7, android.app.Activity p8, int p9)
    {
        if (p7 == null) {
            p7 = new android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo(p8);
        }
        if (((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).setHomeAsUpIndicator != null) {
            try {
                android.app.ActionBar v0 = p8.getActionBar();
                CharSequence v3_4 = ((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).setHomeActionContentDescription;
                String v4_1 = new Object[1];
                v4_1[0] = Integer.valueOf(p9);
                v3_4.invoke(v0, v4_1);
            } catch (Exception v1) {
                android.util.Log.w("ActionBarDrawerToggleHoneycomb", "Couldn\'t set content description via JB-MR2 API", v1);
            }
            if (android.os.Build$VERSION.SDK_INT <= 19) {
                v0.setSubtitle(v0.getSubtitle());
            }
        }
        return p7;
    }

    public static Object setActionBarUpIndicator(Object p7, android.app.Activity p8, android.graphics.drawable.Drawable p9, int p10)
    {
        if (p7 == null) {
            p7 = new android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo(p8);
        }
        if (((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).setHomeAsUpIndicator == null) {
            if (((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).upIndicatorView == null) {
                android.util.Log.w("ActionBarDrawerToggleHoneycomb", "Couldn\'t set home-as-up indicator");
            } else {
                ((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).upIndicatorView.setImageDrawable(p9);
            }
        } else {
            try {
                android.app.ActionBar v0 = p8.getActionBar();
                String v3_1 = ((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).setHomeAsUpIndicator;
                String v4_2 = new Object[1];
                v4_2[0] = p9;
                v3_1.invoke(v0, v4_2);
                String v3_2 = ((android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo) p7).setHomeActionContentDescription;
                String v4_4 = new Object[1];
                v4_4[0] = Integer.valueOf(p10);
                v3_2.invoke(v0, v4_4);
            } catch (Exception v1) {
                android.util.Log.w("ActionBarDrawerToggleHoneycomb", "Couldn\'t set home-as-up indicator via JB-MR2 API", v1);
            }
        }
        return p7;
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggleJellybeanMR2 {
    private static final String TAG = "ActionBarDrawerToggleImplJellybeanMR2";
    private static final int[] THEME_ATTRS;

    static ActionBarDrawerToggleJellybeanMR2()
    {
        int[] v0_1 = new int[1];
        v0_1[0] = 16843531;
        android.support.v4.app.ActionBarDrawerToggleJellybeanMR2.THEME_ATTRS = v0_1;
        return;
    }

    ActionBarDrawerToggleJellybeanMR2()
    {
        return;
    }

    public static android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity p8)
    {
        android.app.Activity v2;
        android.app.ActionBar v1 = p8.getActionBar();
        if (v1 == null) {
            v2 = p8;
        } else {
            v2 = v1.getThemedContext();
        }
        android.content.res.TypedArray v0 = v2.obtainStyledAttributes(0, android.support.v4.app.ActionBarDrawerToggleJellybeanMR2.THEME_ATTRS, 16843470, 0);
        android.graphics.drawable.Drawable v3 = v0.getDrawable(0);
        v0.recycle();
        return v3;
    }

    public static Object setActionBarDescription(Object p1, android.app.Activity p2, int p3)
    {
        android.app.ActionBar v0 = p2.getActionBar();
        if (v0 != null) {
            v0.setHomeActionContentDescription(p3);
        }
        return p1;
    }

    public static Object setActionBarUpIndicator(Object p1, android.app.Activity p2, android.graphics.drawable.Drawable p3, int p4)
    {
        android.app.ActionBar v0 = p2.getActionBar();
        if (v0 != null) {
            v0.setHomeAsUpIndicator(p3);
            v0.setHomeActionContentDescription(p4);
        }
        return p1;
    }
}
package android.support.v4.app;
final class ActivityCompat$1 implements java.lang.Runnable {
    final synthetic android.app.Activity val$activity;
    final synthetic String[] val$permissions;
    final synthetic int val$requestCode;

    ActivityCompat$1(String[] p1, android.app.Activity p2, int p3)
    {
        this.val$permissions = p1;
        this.val$activity = p2;
        this.val$requestCode = p3;
        return;
    }

    public void run()
    {
        int[] v0 = new int[this.val$permissions.length];
        android.content.pm.PackageManager v2 = this.val$activity.getPackageManager();
        String v3 = this.val$activity.getPackageName();
        int v4 = this.val$permissions.length;
        int v1 = 0;
        while (v1 < v4) {
            v0[v1] = v2.checkPermission(this.val$permissions[v1], v3);
            v1++;
        }
        ((android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback) this.val$activity).onRequestPermissionsResult(this.val$requestCode, this.val$permissions, v0);
        return;
    }
}
package android.support.v4.app;
public interface ActivityCompat$OnRequestPermissionsResultCallback {

    public abstract void onRequestPermissionsResult();
}
package android.support.v4.app;
public abstract class ActivityCompatApi21$SharedElementCallback21 {

    public ActivityCompatApi21$SharedElementCallback21()
    {
        return;
    }

    public abstract android.os.Parcelable onCaptureSharedElementSnapshot();

    public abstract android.view.View onCreateSnapshotView();

    public abstract void onMapSharedElements();

    public abstract void onRejectSharedElements();

    public abstract void onSharedElementEnd();

    public abstract void onSharedElementStart();
}
package android.support.v4.app;
 class ActivityCompatApi21$SharedElementCallbackImpl extends android.app.SharedElementCallback {
    private android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 mCallback;

    public ActivityCompatApi21$SharedElementCallbackImpl(android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 p1)
    {
        this.mCallback = p1;
        return;
    }

    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View p2, android.graphics.Matrix p3, android.graphics.RectF p4)
    {
        return this.mCallback.onCaptureSharedElementSnapshot(p2, p3, p4);
    }

    public android.view.View onCreateSnapshotView(android.content.Context p2, android.os.Parcelable p3)
    {
        return this.mCallback.onCreateSnapshotView(p2, p3);
    }

    public void onMapSharedElements(java.util.List p2, java.util.Map p3)
    {
        this.mCallback.onMapSharedElements(p2, p3);
        return;
    }

    public void onRejectSharedElements(java.util.List p2)
    {
        this.mCallback.onRejectSharedElements(p2);
        return;
    }

    public void onSharedElementEnd(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementEnd(p2, p3, p4);
        return;
    }

    public void onSharedElementStart(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementStart(p2, p3, p4);
        return;
    }
}
package android.support.v4.app;
 class ActivityCompatApi21 {

    ActivityCompatApi21()
    {
        return;
    }

    private static android.app.SharedElementCallback createCallback(android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 p1)
    {
        android.support.v4.app.ActivityCompatApi21$SharedElementCallbackImpl v0_0 = 0;
        if (p1 != null) {
            v0_0 = new android.support.v4.app.ActivityCompatApi21$SharedElementCallbackImpl(p1);
        }
        return v0_0;
    }

    public static void finishAfterTransition(android.app.Activity p0)
    {
        p0.finishAfterTransition();
        return;
    }

    public static void postponeEnterTransition(android.app.Activity p0)
    {
        p0.postponeEnterTransition();
        return;
    }

    public static void setEnterSharedElementCallback(android.app.Activity p1, android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 p2)
    {
        p1.setEnterSharedElementCallback(android.support.v4.app.ActivityCompatApi21.createCallback(p2));
        return;
    }

    public static void setExitSharedElementCallback(android.app.Activity p1, android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 p2)
    {
        p1.setExitSharedElementCallback(android.support.v4.app.ActivityCompatApi21.createCallback(p2));
        return;
    }

    public static void setMediaController(android.app.Activity p0, Object p1)
    {
        p0.setMediaController(((android.media.session.MediaController) p1));
        return;
    }

    public static void startPostponedEnterTransition(android.app.Activity p0)
    {
        p0.startPostponedEnterTransition();
        return;
    }
}
package android.support.v4.app;
 class ActivityCompatApi22 {

    ActivityCompatApi22()
    {
        return;
    }

    public static android.net.Uri getReferrer(android.app.Activity p1)
    {
        return p1.getReferrer();
    }
}
package android.support.v4.app;
public interface ActivityCompatApi23$OnSharedElementsReadyListenerBridge {

    public abstract void onSharedElementsReady();
}
package android.support.v4.app;
public interface ActivityCompatApi23$RequestPermissionsRequestCodeValidator {

    public abstract void validateRequestPermissionsRequestCode();
}
package android.support.v4.app;
 class ActivityCompatApi23$SharedElementCallbackImpl extends android.app.SharedElementCallback {
    private android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 mCallback;

    public ActivityCompatApi23$SharedElementCallbackImpl(android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 p1)
    {
        this.mCallback = p1;
        return;
    }

    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View p2, android.graphics.Matrix p3, android.graphics.RectF p4)
    {
        return this.mCallback.onCaptureSharedElementSnapshot(p2, p3, p4);
    }

    public android.view.View onCreateSnapshotView(android.content.Context p2, android.os.Parcelable p3)
    {
        return this.mCallback.onCreateSnapshotView(p2, p3);
    }

    public void onMapSharedElements(java.util.List p2, java.util.Map p3)
    {
        this.mCallback.onMapSharedElements(p2, p3);
        return;
    }

    public void onRejectSharedElements(java.util.List p2)
    {
        this.mCallback.onRejectSharedElements(p2);
        return;
    }

    public void onSharedElementEnd(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementEnd(p2, p3, p4);
        return;
    }

    public void onSharedElementStart(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementStart(p2, p3, p4);
        return;
    }

    public void onSharedElementsArrived(java.util.List p3, java.util.List p4, android.app.SharedElementCallback$OnSharedElementsReadyListener p5)
    {
        this.mCallback.onSharedElementsArrived(p3, p4, new android.support.v4.app.ActivityCompatApi23$SharedElementCallbackImpl$1(this, p5));
        return;
    }
}
package android.support.v4.app;
 class ActivityCompatApi23 {

    ActivityCompatApi23()
    {
        return;
    }

    private static android.app.SharedElementCallback createCallback(android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 p1)
    {
        android.support.v4.app.ActivityCompatApi23$SharedElementCallbackImpl v0_0 = 0;
        if (p1 != null) {
            v0_0 = new android.support.v4.app.ActivityCompatApi23$SharedElementCallbackImpl(p1);
        }
        return v0_0;
    }

    public static void requestPermissions(android.app.Activity p1, String[] p2, int p3)
    {
        if ((p1 instanceof android.support.v4.app.ActivityCompatApi23$RequestPermissionsRequestCodeValidator)) {
            ((android.support.v4.app.ActivityCompatApi23$RequestPermissionsRequestCodeValidator) p1).validateRequestPermissionsRequestCode(p3);
        }
        p1.requestPermissions(p2, p3);
        return;
    }

    public static void setEnterSharedElementCallback(android.app.Activity p1, android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 p2)
    {
        p1.setEnterSharedElementCallback(android.support.v4.app.ActivityCompatApi23.createCallback(p2));
        return;
    }

    public static void setExitSharedElementCallback(android.app.Activity p1, android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 p2)
    {
        p1.setExitSharedElementCallback(android.support.v4.app.ActivityCompatApi23.createCallback(p2));
        return;
    }

    public static boolean shouldShowRequestPermissionRationale(android.app.Activity p1, String p2)
    {
        return p1.shouldShowRequestPermissionRationale(p2);
    }
}
package android.support.v4.app;
 class ActivityCompatHoneycomb {

    ActivityCompatHoneycomb()
    {
        return;
    }

    static void dump(android.app.Activity p0, String p1, java.io.FileDescriptor p2, java.io.PrintWriter p3, String[] p4)
    {
        p0.dump(p1, p2, p3, p4);
        return;
    }

    static void invalidateOptionsMenu(android.app.Activity p0)
    {
        p0.invalidateOptionsMenu();
        return;
    }
}
package android.support.v4.app;
 class ActivityCompatJB {

    ActivityCompatJB()
    {
        return;
    }

    public static void finishAffinity(android.app.Activity p0)
    {
        p0.finishAffinity();
        return;
    }

    public static void startActivityForResult(android.app.Activity p0, android.content.Intent p1, int p2, android.os.Bundle p3)
    {
        p0.startActivityForResult(p1, p2, p3);
        return;
    }

    public static void startIntentSenderForResult(android.app.Activity p0, android.content.IntentSender p1, int p2, android.content.Intent p3, int p4, int p5, int p6, android.os.Bundle p7)
    {
        p0.startIntentSenderForResult(p1, p2, p3, p4, p5, p6, p7);
        return;
    }
}
package android.support.v4.app;
public final class ActivityManagerCompat {

    private ActivityManagerCompat()
    {
        return;
    }

    public static boolean isLowRamDevice(android.app.ActivityManager p2)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v0_1 = 0;
        } else {
            v0_1 = android.support.v4.app.ActivityManagerCompatKitKat.isLowRamDevice(p2);
        }
        return v0_1;
    }
}
package android.support.v4.app;
 class ActivityManagerCompatKitKat {

    ActivityManagerCompatKitKat()
    {
        return;
    }

    public static boolean isLowRamDevice(android.app.ActivityManager p1)
    {
        return p1.isLowRamDevice();
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat21 {
    private final android.app.ActivityOptions mActivityOptions;

    private ActivityOptionsCompat21(android.app.ActivityOptions p1)
    {
        this.mActivityOptions = p1;
        return;
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeCustomAnimation(android.content.Context p2, int p3, int p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeCustomAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeScaleUpAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeScaleUpAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeSceneTransitionAnimation(android.app.Activity p2, android.view.View p3, String p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeSceneTransitionAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeSceneTransitionAnimation(android.app.Activity p4, android.view.View[] p5, String[] p6)
    {
        android.util.Pair[] v1 = 0;
        if (p5 != null) {
            v1 = new android.util.Pair[p5.length];
            int v0 = 0;
            while (v0 < v1.length) {
                v1[v0] = android.util.Pair.create(p5[v0], p6[v0]);
                v0++;
            }
        }
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeSceneTransitionAnimation(p4, v1));
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeTaskLaunchBehind()
    {
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeTaskLaunchBehind());
    }

    public static android.support.v4.app.ActivityOptionsCompat21 makeThumbnailScaleUpAnimation(android.view.View p2, android.graphics.Bitmap p3, int p4, int p5)
    {
        return new android.support.v4.app.ActivityOptionsCompat21(android.app.ActivityOptions.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
    }

    public android.os.Bundle toBundle()
    {
        return this.mActivityOptions.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat21 p3)
    {
        this.mActivityOptions.update(p3.mActivityOptions);
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat23 {
    private final android.app.ActivityOptions mActivityOptions;

    private ActivityOptionsCompat23(android.app.ActivityOptions p1)
    {
        this.mActivityOptions = p1;
        return;
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeBasic()
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeBasic());
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeClipRevealAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeClipRevealAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeCustomAnimation(android.content.Context p2, int p3, int p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeCustomAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeScaleUpAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeScaleUpAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeSceneTransitionAnimation(android.app.Activity p2, android.view.View p3, String p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeSceneTransitionAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeSceneTransitionAnimation(android.app.Activity p4, android.view.View[] p5, String[] p6)
    {
        android.util.Pair[] v1 = 0;
        if (p5 != null) {
            v1 = new android.util.Pair[p5.length];
            int v0 = 0;
            while (v0 < v1.length) {
                v1[v0] = android.util.Pair.create(p5[v0], p6[v0]);
                v0++;
            }
        }
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeSceneTransitionAnimation(p4, v1));
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeTaskLaunchBehind()
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeTaskLaunchBehind());
    }

    public static android.support.v4.app.ActivityOptionsCompat23 makeThumbnailScaleUpAnimation(android.view.View p2, android.graphics.Bitmap p3, int p4, int p5)
    {
        return new android.support.v4.app.ActivityOptionsCompat23(android.app.ActivityOptions.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
    }

    public void requestUsageTimeReport(android.app.PendingIntent p2)
    {
        this.mActivityOptions.requestUsageTimeReport(p2);
        return;
    }

    public android.os.Bundle toBundle()
    {
        return this.mActivityOptions.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat23 p3)
    {
        this.mActivityOptions.update(p3.mActivityOptions);
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat24 {
    private final android.app.ActivityOptions mActivityOptions;

    private ActivityOptionsCompat24(android.app.ActivityOptions p1)
    {
        this.mActivityOptions = p1;
        return;
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeBasic()
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeBasic());
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeClipRevealAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeClipRevealAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeCustomAnimation(android.content.Context p2, int p3, int p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeCustomAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeScaleUpAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeScaleUpAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeSceneTransitionAnimation(android.app.Activity p2, android.view.View p3, String p4)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeSceneTransitionAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeSceneTransitionAnimation(android.app.Activity p4, android.view.View[] p5, String[] p6)
    {
        android.util.Pair[] v1 = 0;
        if (p5 != null) {
            v1 = new android.util.Pair[p5.length];
            int v0 = 0;
            while (v0 < v1.length) {
                v1[v0] = android.util.Pair.create(p5[v0], p6[v0]);
                v0++;
            }
        }
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeSceneTransitionAnimation(p4, v1));
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeTaskLaunchBehind()
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeTaskLaunchBehind());
    }

    public static android.support.v4.app.ActivityOptionsCompat24 makeThumbnailScaleUpAnimation(android.view.View p2, android.graphics.Bitmap p3, int p4, int p5)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(android.app.ActivityOptions.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
    }

    public android.graphics.Rect getLaunchBounds()
    {
        return this.mActivityOptions.getLaunchBounds();
    }

    public void requestUsageTimeReport(android.app.PendingIntent p2)
    {
        this.mActivityOptions.requestUsageTimeReport(p2);
        return;
    }

    public android.support.v4.app.ActivityOptionsCompat24 setLaunchBounds(android.graphics.Rect p3)
    {
        return new android.support.v4.app.ActivityOptionsCompat24(this.mActivityOptions.setLaunchBounds(p3));
    }

    public android.os.Bundle toBundle()
    {
        return this.mActivityOptions.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat24 p3)
    {
        this.mActivityOptions.update(p3.mActivityOptions);
        return;
    }
}
package android.support.v4.app;
public class ActivityOptionsCompat {
    public static final String EXTRA_USAGE_TIME_REPORT = "android.activity.usage_time";
    public static final String EXTRA_USAGE_TIME_REPORT_PACKAGES = "android.usage_time_packages";

    protected ActivityOptionsCompat()
    {
        return;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeBasic()
    {
        android.support.v4.app.ActivityOptionsCompat v0_1;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat();
            } else {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeBasic());
            }
        } else {
            v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeBasic());
        }
        return v0_1;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeClipRevealAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        android.support.v4.app.ActivityOptionsCompat v0_1;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat();
            } else {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeClipRevealAnimation(p2, p3, p4, p5, p6));
            }
        } else {
            v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeClipRevealAnimation(p2, p3, p4, p5, p6));
        }
        return v0_1;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeCustomAnimation(android.content.Context p2, int p3, int p4)
    {
        android.support.v4.app.ActivityOptionsCompat v0_2;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    if (android.os.Build$VERSION.SDK_INT < 16) {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat();
                    } else {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB(android.support.v4.app.ActivityOptionsCompatJB.makeCustomAnimation(p2, p3, p4));
                    }
                } else {
                    v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeCustomAnimation(p2, p3, p4));
                }
            } else {
                v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeCustomAnimation(p2, p3, p4));
            }
        } else {
            v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeCustomAnimation(p2, p3, p4));
        }
        return v0_2;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeScaleUpAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        android.support.v4.app.ActivityOptionsCompat v0_2;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    if (android.os.Build$VERSION.SDK_INT < 16) {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat();
                    } else {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB(android.support.v4.app.ActivityOptionsCompatJB.makeScaleUpAnimation(p2, p3, p4, p5, p6));
                    }
                } else {
                    v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeScaleUpAnimation(p2, p3, p4, p5, p6));
                }
            } else {
                v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeScaleUpAnimation(p2, p3, p4, p5, p6));
            }
        } else {
            v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeScaleUpAnimation(p2, p3, p4, p5, p6));
        }
        return v0_2;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity p2, android.view.View p3, String p4)
    {
        android.support.v4.app.ActivityOptionsCompat v0_1;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    v0_1 = new android.support.v4.app.ActivityOptionsCompat();
                } else {
                    v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeSceneTransitionAnimation(p2, p3, p4));
                }
            } else {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeSceneTransitionAnimation(p2, p3, p4));
            }
        } else {
            v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeSceneTransitionAnimation(p2, p3, p4));
        }
        return v0_1;
    }

    public static varargs android.support.v4.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity p5, android.support.v4.util.Pair[] p6)
    {
        android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21 v3_6;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v3_6 = new android.support.v4.app.ActivityOptionsCompat();
        } else {
            android.view.View[] v2 = 0;
            String[] v1 = 0;
            if (p6 != null) {
                v2 = new android.view.View[p6.length];
                v1 = new String[p6.length];
                int v0 = 0;
                while (v0 < p6.length) {
                    v2[v0] = ((android.view.View) p6[v0].first);
                    v1[v0] = ((String) p6[v0].second);
                    v0++;
                }
            }
            if (android.os.Build$VERSION.SDK_INT < 24) {
                if (android.os.Build$VERSION.SDK_INT < 23) {
                    v3_6 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeSceneTransitionAnimation(p5, v2, v1));
                } else {
                    v3_6 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeSceneTransitionAnimation(p5, v2, v1));
                }
            } else {
                v3_6 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeSceneTransitionAnimation(p5, v2, v1));
            }
        }
        return v3_6;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeTaskLaunchBehind()
    {
        android.support.v4.app.ActivityOptionsCompat v0_1;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    v0_1 = new android.support.v4.app.ActivityOptionsCompat();
                } else {
                    v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeTaskLaunchBehind());
                }
            } else {
                v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeTaskLaunchBehind());
            }
        } else {
            v0_1 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeTaskLaunchBehind());
        }
        return v0_1;
    }

    public static android.support.v4.app.ActivityOptionsCompat makeThumbnailScaleUpAnimation(android.view.View p2, android.graphics.Bitmap p3, int p4, int p5)
    {
        android.support.v4.app.ActivityOptionsCompat v0_2;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    if (android.os.Build$VERSION.SDK_INT < 16) {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat();
                    } else {
                        v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB(android.support.v4.app.ActivityOptionsCompatJB.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
                    }
                } else {
                    v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
                }
            } else {
                v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
            }
        } else {
            v0_2 = new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
        }
        return v0_2;
    }

    public android.graphics.Rect getLaunchBounds()
    {
        return 0;
    }

    public void requestUsageTimeReport(android.app.PendingIntent p1)
    {
        return;
    }

    public android.support.v4.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect p2)
    {
        return 0;
    }

    public android.os.Bundle toBundle()
    {
        return 0;
    }

    public void update(android.support.v4.app.ActivityOptionsCompat p1)
    {
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompatJB {
    private final android.app.ActivityOptions mActivityOptions;

    private ActivityOptionsCompatJB(android.app.ActivityOptions p1)
    {
        this.mActivityOptions = p1;
        return;
    }

    public static android.support.v4.app.ActivityOptionsCompatJB makeCustomAnimation(android.content.Context p2, int p3, int p4)
    {
        return new android.support.v4.app.ActivityOptionsCompatJB(android.app.ActivityOptions.makeCustomAnimation(p2, p3, p4));
    }

    public static android.support.v4.app.ActivityOptionsCompatJB makeScaleUpAnimation(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        return new android.support.v4.app.ActivityOptionsCompatJB(android.app.ActivityOptions.makeScaleUpAnimation(p2, p3, p4, p5, p6));
    }

    public static android.support.v4.app.ActivityOptionsCompatJB makeThumbnailScaleUpAnimation(android.view.View p2, android.graphics.Bitmap p3, int p4, int p5)
    {
        return new android.support.v4.app.ActivityOptionsCompatJB(android.app.ActivityOptions.makeThumbnailScaleUpAnimation(p2, p3, p4, p5));
    }

    public android.os.Bundle toBundle()
    {
        return this.mActivityOptions.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompatJB p3)
    {
        this.mActivityOptions.update(p3.mActivityOptions);
        return;
    }
}
package android.support.v4.app;
public class AppLaunchChecker {
    private static final String KEY_STARTED_FROM_LAUNCHER = "startedFromLauncher";
    private static final String SHARED_PREFS_NAME = "android.support.AppLaunchChecker";

    public AppLaunchChecker()
    {
        return;
    }

    public static boolean hasStartedFromLauncher(android.content.Context p3)
    {
        return p3.getSharedPreferences("android.support.AppLaunchChecker", 0).getBoolean("startedFromLauncher", 0);
    }

    public static void onActivityCreate(android.app.Activity p6)
    {
        android.content.SharedPreferences v1 = p6.getSharedPreferences("android.support.AppLaunchChecker", 0);
        if (!v1.getBoolean("startedFromLauncher", 0)) {
            android.content.Intent v0 = p6.getIntent();
            if ((v0 != null) && (("android.intent.action.MAIN".equals(v0.getAction())) && ((v0.hasCategory("android.intent.category.LAUNCHER")) || (v0.hasCategory("android.intent.category.LEANBACK_LAUNCHER"))))) {
                android.support.v4.content.SharedPreferencesCompat$EditorCompat.getInstance().apply(v1.edit().putBoolean("startedFromLauncher", 1));
            }
        }
        return;
    }
}
package android.support.v4.app;
 class AppOpsManagerCompat$AppOpsManagerImpl {

    AppOpsManagerCompat$AppOpsManagerImpl()
    {
        return;
    }

    public int noteOp(android.content.Context p2, String p3, int p4, String p5)
    {
        return 1;
    }

    public int noteProxyOp(android.content.Context p2, String p3, String p4)
    {
        return 1;
    }

    public String permissionToOp(String p2)
    {
        return 0;
    }
}
package android.support.v4.app;
 class AppOpsManagerCompat23 {

    AppOpsManagerCompat23()
    {
        return;
    }

    public static int noteOp(android.content.Context p2, String p3, int p4, String p5)
    {
        return ((android.app.AppOpsManager) p2.getSystemService(android.app.AppOpsManager)).noteOp(p3, p4, p5);
    }

    public static int noteProxyOp(android.content.Context p2, String p3, String p4)
    {
        return ((android.app.AppOpsManager) p2.getSystemService(android.app.AppOpsManager)).noteProxyOp(p3, p4);
    }

    public static String permissionToOp(String p1)
    {
        return android.app.AppOpsManager.permissionToOp(p1);
    }
}
package android.support.v4.app;
public final class AppOpsManagerCompat {
    private static final android.support.v4.app.AppOpsManagerCompat$AppOpsManagerImpl IMPL = None;
    public static final int MODE_ALLOWED = 0;
    public static final int MODE_DEFAULT = 3;
    public static final int MODE_IGNORED = 1;

    static AppOpsManagerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            android.support.v4.app.AppOpsManagerCompat.IMPL = new android.support.v4.app.AppOpsManagerCompat$AppOpsManagerImpl();
        } else {
            android.support.v4.app.AppOpsManagerCompat.IMPL = new android.support.v4.app.AppOpsManagerCompat$AppOpsManager23();
        }
        return;
    }

    private AppOpsManagerCompat()
    {
        return;
    }

    public static int noteOp(android.content.Context p1, String p2, int p3, String p4)
    {
        return android.support.v4.app.AppOpsManagerCompat.IMPL.noteOp(p1, p2, p3, p4);
    }

    public static int noteProxyOp(android.content.Context p1, String p2, String p3)
    {
        return android.support.v4.app.AppOpsManagerCompat.IMPL.noteProxyOp(p1, p2, p3);
    }

    public static String permissionToOp(String p1)
    {
        return android.support.v4.app.AppOpsManagerCompat.IMPL.permissionToOp(p1);
    }
}
package android.support.v4.app;
 class BackStackRecord$2 implements android.view.ViewTreeObserver$OnPreDrawListener {
    final synthetic android.support.v4.app.BackStackRecord this$0;
    final synthetic Object val$enterTransition;
    final synthetic Object val$exitTransition;
    final synthetic android.support.v4.app.Fragment val$inFragment;
    final synthetic boolean val$isBack;
    final synthetic android.support.v4.app.Fragment val$outFragment;
    final synthetic android.view.View val$sceneRoot;
    final synthetic java.util.ArrayList val$sharedElementTargets;
    final synthetic Object val$sharedElementTransition;
    final synthetic android.support.v4.app.BackStackRecord$TransitionState val$state;

    BackStackRecord$2(android.support.v4.app.BackStackRecord p1, android.view.View p2, Object p3, java.util.ArrayList p4, android.support.v4.app.BackStackRecord$TransitionState p5, Object p6, Object p7, boolean p8, android.support.v4.app.Fragment p9, android.support.v4.app.Fragment p10)
    {
        this.this$0 = p1;
        this.val$sceneRoot = p2;
        this.val$sharedElementTransition = p3;
        this.val$sharedElementTargets = p4;
        this.val$state = p5;
        this.val$enterTransition = p6;
        this.val$exitTransition = p7;
        this.val$isBack = p8;
        this.val$inFragment = p9;
        this.val$outFragment = p10;
        return;
    }

    public boolean onPreDraw()
    {
        this.val$sceneRoot.getViewTreeObserver().removeOnPreDrawListener(this);
        android.support.v4.app.FragmentTransitionCompat21.removeTargets(this.val$sharedElementTransition, this.val$sharedElementTargets);
        this.val$sharedElementTargets.remove(this.val$state.nonExistentView);
        android.support.v4.app.FragmentTransitionCompat21.excludeSharedElementViews(this.val$enterTransition, this.val$exitTransition, this.val$sharedElementTransition, this.val$sharedElementTargets, 0);
        this.val$sharedElementTargets.clear();
        android.support.v4.util.ArrayMap v5 = this.this$0.mapSharedElementsIn(this.val$state, this.val$isBack, this.val$inFragment);
        android.support.v4.app.FragmentTransitionCompat21.setSharedElementTargets(this.val$sharedElementTransition, this.val$state.nonExistentView, v5, this.val$sharedElementTargets);
        this.this$0.setEpicenterIn(v5, this.val$state);
        this.this$0.callSharedElementEnd(this.val$state, this.val$inFragment, this.val$outFragment, this.val$isBack, v5);
        android.support.v4.app.FragmentTransitionCompat21.excludeSharedElementViews(this.val$enterTransition, this.val$exitTransition, this.val$sharedElementTransition, this.val$sharedElementTargets, 1);
        return 1;
    }
}
package android.support.v4.app;
 class BackStackRecord$3 implements android.view.ViewTreeObserver$OnPreDrawListener {
    final synthetic android.support.v4.app.BackStackRecord this$0;
    final synthetic int val$containerId;
    final synthetic android.view.View val$sceneRoot;
    final synthetic android.support.v4.app.BackStackRecord$TransitionState val$state;
    final synthetic Object val$transition;

    BackStackRecord$3(android.support.v4.app.BackStackRecord p1, android.view.View p2, android.support.v4.app.BackStackRecord$TransitionState p3, int p4, Object p5)
    {
        this.this$0 = p1;
        this.val$sceneRoot = p2;
        this.val$state = p3;
        this.val$containerId = p4;
        this.val$transition = p5;
        return;
    }

    public boolean onPreDraw()
    {
        this.val$sceneRoot.getViewTreeObserver().removeOnPreDrawListener(this);
        this.this$0.excludeHiddenFragments(this.val$state, this.val$containerId, this.val$transition);
        return 1;
    }
}
package android.support.v4.app;
final class BackStackRecord$Op {
    int cmd;
    int enterAnim;
    int exitAnim;
    android.support.v4.app.Fragment fragment;
    android.support.v4.app.BackStackRecord$Op next;
    int popEnterAnim;
    int popExitAnim;
    android.support.v4.app.BackStackRecord$Op prev;
    java.util.ArrayList removed;

    BackStackRecord$Op()
    {
        return;
    }
}
package android.support.v4.app;
public class BackStackRecord$TransitionState {
    public android.support.v4.app.FragmentTransitionCompat21$EpicenterView enteringEpicenterView;
    public java.util.ArrayList hiddenFragmentViews;
    public android.support.v4.util.ArrayMap nameOverrides;
    public android.view.View nonExistentView;
    final synthetic android.support.v4.app.BackStackRecord this$0;

    public BackStackRecord$TransitionState(android.support.v4.app.BackStackRecord p2)
    {
        this.this$0 = p2;
        this.nameOverrides = new android.support.v4.util.ArrayMap();
        this.hiddenFragmentViews = new java.util.ArrayList();
        this.enteringEpicenterView = new android.support.v4.app.FragmentTransitionCompat21$EpicenterView();
        return;
    }
}
package android.support.v4.app;
final class BackStackState$1 implements android.os.Parcelable$Creator {

    BackStackState$1()
    {
        return;
    }

    public android.support.v4.app.BackStackState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.BackStackState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.BackStackState[] newArray(int p2)
    {
        android.support.v4.app.BackStackState[] v0 = new android.support.v4.app.BackStackState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
final class BackStackState implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    final int mBreadCrumbShortTitleRes;
    final CharSequence mBreadCrumbShortTitleText;
    final int mBreadCrumbTitleRes;
    final CharSequence mBreadCrumbTitleText;
    final int mIndex;
    final String mName;
    final int[] mOps;
    final java.util.ArrayList mSharedElementSourceNames;
    final java.util.ArrayList mSharedElementTargetNames;
    final int mTransition;
    final int mTransitionStyle;

    static BackStackState()
    {
        android.support.v4.app.BackStackState.CREATOR = new android.support.v4.app.BackStackState$1();
        return;
    }

    public BackStackState(android.os.Parcel p2)
    {
        this.mOps = p2.createIntArray();
        this.mTransition = p2.readInt();
        this.mTransitionStyle = p2.readInt();
        this.mName = p2.readString();
        this.mIndex = p2.readInt();
        this.mBreadCrumbTitleRes = p2.readInt();
        this.mBreadCrumbTitleText = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p2));
        this.mBreadCrumbShortTitleRes = p2.readInt();
        this.mBreadCrumbShortTitleText = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p2));
        this.mSharedElementSourceNames = p2.createStringArrayList();
        this.mSharedElementTargetNames = p2.createStringArrayList();
        return;
    }

    public BackStackState(android.support.v4.app.BackStackRecord p9)
    {
        int v2 = 0;
        android.support.v4.app.BackStackRecord$Op v3_0 = p9.mHead;
        while (v3_0 != null) {
            if (v3_0.removed != null) {
                v2 += v3_0.removed.size();
            }
            v3_0 = v3_0.next;
        }
        int v6_24 = new int[((p9.mNumOp * 7) + v2)];
        this.mOps = v6_24;
        if (p9.mAddToBackStack) {
            android.support.v4.app.BackStackRecord$Op v3_1 = p9.mHead;
            int v5_0 = 0;
            while (v3_1 != null) {
                int v6_14;
                int v4_1 = (v5_0 + 1);
                this.mOps[v5_0] = v3_1.cmd;
                int v5_1 = (v4_1 + 1);
                if (v3_1.fragment == null) {
                    v6_14 = -1;
                } else {
                    v6_14 = v3_1.fragment.mIndex;
                }
                int v4_4;
                this.mOps[v4_1] = v6_14;
                int v4_2 = (v5_1 + 1);
                this.mOps[v5_1] = v3_1.enterAnim;
                int v5_2 = (v4_2 + 1);
                this.mOps[v4_2] = v3_1.exitAnim;
                int v4_3 = (v5_2 + 1);
                this.mOps[v5_2] = v3_1.popEnterAnim;
                int v5_3 = (v4_3 + 1);
                this.mOps[v4_3] = v3_1.popExitAnim;
                if (v3_1.removed == null) {
                    v4_4 = (v5_3 + 1);
                    this.mOps[v5_3] = 0;
                } else {
                    int v0 = v3_1.removed.size();
                    int v4_5 = (v5_3 + 1);
                    this.mOps[v5_3] = v0;
                    int v1 = 0;
                    int v5_4 = v4_5;
                    while (v1 < v0) {
                        int v4_6 = (v5_4 + 1);
                        this.mOps[v5_4] = ((android.support.v4.app.Fragment) v3_1.removed.get(v1)).mIndex;
                        v1++;
                        v5_4 = v4_6;
                    }
                    v4_4 = v5_4;
                }
                v3_1 = v3_1.next;
                v5_0 = v4_4;
            }
            this.mTransition = p9.mTransition;
            this.mTransitionStyle = p9.mTransitionStyle;
            this.mName = p9.mName;
            this.mIndex = p9.mIndex;
            this.mBreadCrumbTitleRes = p9.mBreadCrumbTitleRes;
            this.mBreadCrumbTitleText = p9.mBreadCrumbTitleText;
            this.mBreadCrumbShortTitleRes = p9.mBreadCrumbShortTitleRes;
            this.mBreadCrumbShortTitleText = p9.mBreadCrumbShortTitleText;
            this.mSharedElementSourceNames = p9.mSharedElementSourceNames;
            this.mSharedElementTargetNames = p9.mSharedElementTargetNames;
            return;
        } else {
            throw new IllegalStateException("Not on back stack");
        }
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl p15)
    {
        android.support.v4.app.BackStackRecord v1_1 = new android.support.v4.app.BackStackRecord(p15);
        int v7_1 = 0;
        int v5 = 0;
        while (v7_1 < this.mOps.length) {
            android.support.v4.app.BackStackRecord$Op v6_1 = new android.support.v4.app.BackStackRecord$Op();
            int v8_1 = (v7_1 + 1);
            v6_1.cmd = this.mOps[v7_1];
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Instantiate ").append(v1_1).append(" op #").append(v5).append(" base fragment #").append(this.mOps[v8_1]).toString());
            }
            int v7_2 = (v8_1 + 1);
            int v3 = this.mOps[v8_1];
            if (v3 < 0) {
                v6_1.fragment = 0;
            } else {
                v6_1.fragment = ((android.support.v4.app.Fragment) p15.mActive.get(v3));
            }
            int v8_2 = (v7_2 + 1);
            v6_1.enterAnim = this.mOps[v7_2];
            int v7_3 = (v8_2 + 1);
            v6_1.exitAnim = this.mOps[v8_2];
            int v8_3 = (v7_3 + 1);
            v6_1.popEnterAnim = this.mOps[v7_3];
            int v7_4 = (v8_3 + 1);
            v6_1.popExitAnim = this.mOps[v8_3];
            int v8_0 = (v7_4 + 1);
            int v0 = this.mOps[v7_4];
            if (v0 > 0) {
                v6_1.removed = new java.util.ArrayList(v0);
                int v4 = 0;
                while (v4 < v0) {
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("Instantiate ").append(v1_1).append(" set remove fragment #").append(this.mOps[v8_0]).toString());
                    }
                    int v7_0 = (v8_0 + 1);
                    v6_1.removed.add(((android.support.v4.app.Fragment) p15.mActive.get(this.mOps[v8_0])));
                    v4++;
                    v8_0 = v7_0;
                }
            }
            v7_1 = v8_0;
            v1_1.mEnterAnim = v6_1.enterAnim;
            v1_1.mExitAnim = v6_1.exitAnim;
            v1_1.mPopEnterAnim = v6_1.popEnterAnim;
            v1_1.mPopExitAnim = v6_1.popExitAnim;
            v1_1.addOp(v6_1);
            v5++;
        }
        v1_1.mTransition = this.mTransition;
        v1_1.mTransitionStyle = this.mTransitionStyle;
        v1_1.mName = this.mName;
        v1_1.mIndex = this.mIndex;
        v1_1.mAddToBackStack = 1;
        v1_1.mBreadCrumbTitleRes = this.mBreadCrumbTitleRes;
        v1_1.mBreadCrumbTitleText = this.mBreadCrumbTitleText;
        v1_1.mBreadCrumbShortTitleRes = this.mBreadCrumbShortTitleRes;
        v1_1.mBreadCrumbShortTitleText = this.mBreadCrumbShortTitleText;
        v1_1.mSharedElementSourceNames = this.mSharedElementSourceNames;
        v1_1.mSharedElementTargetNames = this.mSharedElementTargetNames;
        v1_1.bumpBackStackNesting(1);
        return v1_1;
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        p3.writeIntArray(this.mOps);
        p3.writeInt(this.mTransition);
        p3.writeInt(this.mTransitionStyle);
        p3.writeString(this.mName);
        p3.writeInt(this.mIndex);
        p3.writeInt(this.mBreadCrumbTitleRes);
        android.text.TextUtils.writeToParcel(this.mBreadCrumbTitleText, p3, 0);
        p3.writeInt(this.mBreadCrumbShortTitleRes);
        android.text.TextUtils.writeToParcel(this.mBreadCrumbShortTitleText, p3, 0);
        p3.writeStringList(this.mSharedElementSourceNames);
        p3.writeStringList(this.mSharedElementTargetNames);
        return;
    }
}
package android.support.v4.app;
abstract class BaseFragmentActivityGingerbread extends android.app.Activity {
    boolean mStartedIntentSenderFromFragment;

    BaseFragmentActivityGingerbread()
    {
        return;
    }

    static void checkForValidRequestCode(int p2)
    {
        if ((-65536 & p2) == 0) {
            return;
        } else {
            throw new IllegalArgumentException("Can only use lower 16 bits for requestCode");
        }
    }

    abstract android.view.View dispatchFragmentsOnCreateView();

    protected void onCreate(android.os.Bundle p3)
    {
        if ((android.os.Build$VERSION.SDK_INT < 11) && (this.getLayoutInflater().getFactory() == null)) {
            this.getLayoutInflater().setFactory(this);
        }
        super.onCreate(p3);
        return;
    }

    public android.view.View onCreateView(String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        android.view.View v0 = this.dispatchFragmentsOnCreateView(0, p3, p4, p5);
        if (v0 == null) {
            v0 = super.onCreateView(p3, p4, p5);
        }
        return v0;
    }

    public void startIntentSenderForResult(android.content.IntentSender p2, int p3, android.content.Intent p4, int p5, int p6, int p7)
    {
        if ((!this.mStartedIntentSenderFromFragment) && (p3 != -1)) {
            android.support.v4.app.BaseFragmentActivityGingerbread.checkForValidRequestCode(p3);
        }
        super.startIntentSenderForResult(p2, p3, p4, p5, p6, p7);
        return;
    }
}
package android.support.v4.app;
public final class BundleCompat {

    private BundleCompat()
    {
        return;
    }

    public static android.os.IBinder getBinder(android.os.Bundle p2, String p3)
    {
        android.os.IBinder v0_1;
        if (android.os.Build$VERSION.SDK_INT < 18) {
            v0_1 = android.support.v4.app.BundleCompatGingerbread.getBinder(p2, p3);
        } else {
            v0_1 = android.support.v4.app.BundleCompatJellybeanMR2.getBinder(p2, p3);
        }
        return v0_1;
    }

    public static void putBinder(android.os.Bundle p2, String p3, android.os.IBinder p4)
    {
        if (android.os.Build$VERSION.SDK_INT < 18) {
            android.support.v4.app.BundleCompatGingerbread.putBinder(p2, p3, p4);
        } else {
            android.support.v4.app.BundleCompatJellybeanMR2.putBinder(p2, p3, p4);
        }
        return;
    }
}
package android.support.v4.app;
 class BundleCompatGingerbread {
    private static final String TAG = "BundleCompatGingerbread";
    private static reflect.Method sGetIBinderMethod;
    private static boolean sGetIBinderMethodFetched;
    private static reflect.Method sPutIBinderMethod;
    private static boolean sPutIBinderMethodFetched;

    BundleCompatGingerbread()
    {
        return;
    }

    public static android.os.IBinder getBinder(android.os.Bundle p8, String p9)
    {
        if (!android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethodFetched) {
            try {
                int v4_2 = new Class[1];
                v4_2[0] = String;
                android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethod = android.os.Bundle.getMethod("getIBinder", v4_2);
                android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethod.setAccessible(1);
            } catch (IllegalArgumentException v0_0) {
                android.util.Log.i("BundleCompatGingerbread", "Failed to retrieve getIBinder method", v0_0);
            }
            android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethodFetched = 1;
        }
        String v1_7;
        if (android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethod == null) {
            v1_7 = 0;
        } else {
            try {
                String v3_3 = new Object[1];
                v3_3[0] = p9;
                v1_7 = ((android.os.IBinder) android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethod.invoke(p8, v3_3));
            } catch (IllegalArgumentException v0_1) {
                android.util.Log.i("BundleCompatGingerbread", "Failed to invoke getIBinder via reflection", v0_1);
                android.support.v4.app.BundleCompatGingerbread.sGetIBinderMethod = 0;
            } catch (IllegalArgumentException v0_1) {
            } catch (IllegalArgumentException v0_1) {
            }
        }
        return v1_7;
    }

    public static void putBinder(android.os.Bundle p7, String p8, android.os.IBinder p9)
    {
        if (!android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethodFetched) {
            try {
                int v3_3 = new Class[2];
                v3_3[0] = String;
                v3_3[1] = android.os.IBinder;
                android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethod = android.os.Bundle.getMethod("putIBinder", v3_3);
                android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethod.setAccessible(1);
            } catch (IllegalArgumentException v0_0) {
                android.util.Log.i("BundleCompatGingerbread", "Failed to retrieve putIBinder method", v0_0);
            }
            android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethodFetched = 1;
        }
        if (android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethod != null) {
            try {
                String v2_3 = new Object[2];
                v2_3[0] = p8;
                v2_3[1] = p9;
                android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethod.invoke(p7, v2_3);
            } catch (IllegalArgumentException v0_1) {
                android.util.Log.i("BundleCompatGingerbread", "Failed to invoke putIBinder via reflection", v0_1);
                android.support.v4.app.BundleCompatGingerbread.sPutIBinderMethod = 0;
            } catch (IllegalArgumentException v0_1) {
            } catch (IllegalArgumentException v0_1) {
            }
        }
        return;
    }
}
package android.support.v4.app;
 class BundleCompatJellybeanMR2 {

    BundleCompatJellybeanMR2()
    {
        return;
    }

    public static android.os.IBinder getBinder(android.os.Bundle p1, String p2)
    {
        return p1.getBinder(p2);
    }

    public static void putBinder(android.os.Bundle p0, String p1, android.os.IBinder p2)
    {
        p0.putBinder(p1, p2);
        return;
    }
}
package android.support.v4.app;
 class BundleUtil {

    BundleUtil()
    {
        return;
    }

    public static android.os.Bundle[] getBundleArrayFromBundle(android.os.Bundle p4, String p5)
    {
        android.os.Bundle[] v1_0;
        android.os.Bundle[] v0_0 = p4.getParcelableArray(p5);
        if ((!(v0_0 instanceof android.os.Bundle[])) && (v0_0 != null)) {
            v1_0 = ((android.os.Bundle[]) java.util.Arrays.copyOf(v0_0, v0_0.length, android.os.Bundle[]));
            p4.putParcelableArray(p5, v1_0);
        } else {
            v1_0 = ((android.os.Bundle[]) ((android.os.Bundle[]) v0_0));
        }
        return v1_0;
    }
}
package android.support.v4.app;
public class Fragment$InstantiationException extends java.lang.RuntimeException {

    public Fragment$InstantiationException(String p1, Exception p2)
    {
        super(p1, p2);
        return;
    }
}
package android.support.v4.app;
final class Fragment$SavedState$1 implements android.os.Parcelable$Creator {

    Fragment$SavedState$1()
    {
        return;
    }

    public android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel p3)
    {
        return new android.support.v4.app.Fragment$SavedState(p3, 0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.Fragment$SavedState[] newArray(int p2)
    {
        android.support.v4.app.Fragment$SavedState[] v0 = new android.support.v4.app.Fragment$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
public class Fragment$SavedState implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    final android.os.Bundle mState;

    static Fragment$SavedState()
    {
        android.support.v4.app.Fragment$SavedState.CREATOR = new android.support.v4.app.Fragment$SavedState$1();
        return;
    }

    Fragment$SavedState(android.os.Bundle p1)
    {
        this.mState = p1;
        return;
    }

    Fragment$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        this.mState = p2.readBundle();
        if ((p3 != null) && (this.mState != null)) {
            this.mState.setClassLoader(p3);
        }
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeBundle(this.mState);
        return;
    }
}
package android.support.v4.app;
public class Fragment implements android.content.ComponentCallbacks, android.view.View$OnCreateContextMenuListener {
    static final int ACTIVITY_CREATED = 2;
    static final int CREATED = 1;
    static final int INITIALIZING = 0;
    static final int RESUMED = 5;
    static final int STARTED = 4;
    static final int STOPPED = 3;
    static final Object USE_DEFAULT_TRANSITION;
    private static final android.support.v4.util.SimpleArrayMap sClassMap;
    boolean mAdded;
    Boolean mAllowEnterTransitionOverlap;
    Boolean mAllowReturnTransitionOverlap;
    android.view.View mAnimatingAway;
    android.os.Bundle mArguments;
    int mBackStackNesting;
    boolean mCalled;
    boolean mCheckedForLoaderManager;
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager;
    android.support.v4.app.FragmentManagerNonConfig mChildNonConfig;
    android.view.ViewGroup mContainer;
    int mContainerId;
    boolean mDeferStart;
    boolean mDetached;
    Object mEnterTransition;
    android.support.v4.app.SharedElementCallback mEnterTransitionCallback;
    Object mExitTransition;
    android.support.v4.app.SharedElementCallback mExitTransitionCallback;
    int mFragmentId;
    android.support.v4.app.FragmentManagerImpl mFragmentManager;
    boolean mFromLayout;
    boolean mHasMenu;
    boolean mHidden;
    android.support.v4.app.FragmentHostCallback mHost;
    boolean mInLayout;
    int mIndex;
    android.view.View mInnerView;
    android.support.v4.app.LoaderManagerImpl mLoaderManager;
    boolean mLoadersStarted;
    boolean mMenuVisible;
    int mNextAnim;
    android.support.v4.app.Fragment mParentFragment;
    Object mReenterTransition;
    boolean mRemoving;
    boolean mRestored;
    boolean mRetainInstance;
    boolean mRetaining;
    Object mReturnTransition;
    android.os.Bundle mSavedFragmentState;
    android.util.SparseArray mSavedViewState;
    Object mSharedElementEnterTransition;
    Object mSharedElementReturnTransition;
    int mState;
    int mStateAfterAnimating;
    String mTag;
    android.support.v4.app.Fragment mTarget;
    int mTargetIndex;
    int mTargetRequestCode;
    boolean mUserVisibleHint;
    android.view.View mView;
    String mWho;

    static Fragment()
    {
        android.support.v4.app.Fragment.sClassMap = new android.support.v4.util.SimpleArrayMap();
        android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION = new Object();
        return;
    }

    public Fragment()
    {
        this.mState = 0;
        this.mIndex = -1;
        this.mTargetIndex = -1;
        this.mMenuVisible = 1;
        this.mUserVisibleHint = 1;
        this.mEnterTransition = 0;
        this.mReturnTransition = android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION;
        this.mExitTransition = 0;
        this.mReenterTransition = android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION;
        this.mSharedElementEnterTransition = 0;
        this.mSharedElementReturnTransition = android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION;
        this.mEnterTransitionCallback = 0;
        this.mExitTransitionCallback = 0;
        return;
    }

    public static android.support.v4.app.Fragment instantiate(android.content.Context p1, String p2)
    {
        return android.support.v4.app.Fragment.instantiate(p1, p2, 0);
    }

    public static android.support.v4.app.Fragment instantiate(android.content.Context p6, String p7, android.os.Bundle p8)
    {
        try {
            Class v0_1 = ((Class) android.support.v4.app.Fragment.sClassMap.get(p7));
        } catch (IllegalAccessException v1_2) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_2);
        } catch (IllegalAccessException v1_1) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_1);
        } catch (IllegalAccessException v1_0) {
            throw new android.support.v4.app.Fragment$InstantiationException(new StringBuilder().append("Unable to instantiate fragment ").append(p7).append(": make sure class name exists, is public, and has an").append(" empty constructor that is public").toString(), v1_0);
        }
        if (v0_1 == null) {
            v0_1 = p6.getClassLoader().loadClass(p7);
            android.support.v4.app.Fragment.sClassMap.put(p7, v0_1);
        }
        android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) v0_1.newInstance());
        if (p8 != null) {
            p8.setClassLoader(v2_1.getClass().getClassLoader());
            v2_1.mArguments = p8;
        }
        return v2_1;
    }

    static boolean isSupportFragmentClass(android.content.Context p3, String p4)
    {
        try {
            Class v0_1 = ((Class) android.support.v4.app.Fragment.sClassMap.get(p4));
        } catch (ClassNotFoundException v1) {
            boolean v2_1 = 0;
            return v2_1;
        }
        if (v0_1 == null) {
            v0_1 = p3.getClassLoader().loadClass(p4);
            android.support.v4.app.Fragment.sClassMap.put(p4, v0_1);
        }
        v2_1 = android.support.v4.app.Fragment.isAssignableFrom(v0_1);
        return v2_1;
    }

    public void dump(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        p6.print(p4);
        p6.print("mFragmentId=#");
        p6.print(Integer.toHexString(this.mFragmentId));
        p6.print(" mContainerId=#");
        p6.print(Integer.toHexString(this.mContainerId));
        p6.print(" mTag=");
        p6.println(this.mTag);
        p6.print(p4);
        p6.print("mState=");
        p6.print(this.mState);
        p6.print(" mIndex=");
        p6.print(this.mIndex);
        p6.print(" mWho=");
        p6.print(this.mWho);
        p6.print(" mBackStackNesting=");
        p6.println(this.mBackStackNesting);
        p6.print(p4);
        p6.print("mAdded=");
        p6.print(this.mAdded);
        p6.print(" mRemoving=");
        p6.print(this.mRemoving);
        p6.print(" mFromLayout=");
        p6.print(this.mFromLayout);
        p6.print(" mInLayout=");
        p6.println(this.mInLayout);
        p6.print(p4);
        p6.print("mHidden=");
        p6.print(this.mHidden);
        p6.print(" mDetached=");
        p6.print(this.mDetached);
        p6.print(" mMenuVisible=");
        p6.print(this.mMenuVisible);
        p6.print(" mHasMenu=");
        p6.println(this.mHasMenu);
        p6.print(p4);
        p6.print("mRetainInstance=");
        p6.print(this.mRetainInstance);
        p6.print(" mRetaining=");
        p6.print(this.mRetaining);
        p6.print(" mUserVisibleHint=");
        p6.println(this.mUserVisibleHint);
        if (this.mFragmentManager != null) {
            p6.print(p4);
            p6.print("mFragmentManager=");
            p6.println(this.mFragmentManager);
        }
        if (this.mHost != null) {
            p6.print(p4);
            p6.print("mHost=");
            p6.println(this.mHost);
        }
        if (this.mParentFragment != null) {
            p6.print(p4);
            p6.print("mParentFragment=");
            p6.println(this.mParentFragment);
        }
        if (this.mArguments != null) {
            p6.print(p4);
            p6.print("mArguments=");
            p6.println(this.mArguments);
        }
        if (this.mSavedFragmentState != null) {
            p6.print(p4);
            p6.print("mSavedFragmentState=");
            p6.println(this.mSavedFragmentState);
        }
        if (this.mSavedViewState != null) {
            p6.print(p4);
            p6.print("mSavedViewState=");
            p6.println(this.mSavedViewState);
        }
        if (this.mTarget != null) {
            p6.print(p4);
            p6.print("mTarget=");
            p6.print(this.mTarget);
            p6.print(" mTargetRequestCode=");
            p6.println(this.mTargetRequestCode);
        }
        if (this.mNextAnim != 0) {
            p6.print(p4);
            p6.print("mNextAnim=");
            p6.println(this.mNextAnim);
        }
        if (this.mContainer != null) {
            p6.print(p4);
            p6.print("mContainer=");
            p6.println(this.mContainer);
        }
        if (this.mView != null) {
            p6.print(p4);
            p6.print("mView=");
            p6.println(this.mView);
        }
        if (this.mInnerView != null) {
            p6.print(p4);
            p6.print("mInnerView=");
            p6.println(this.mView);
        }
        if (this.mAnimatingAway != null) {
            p6.print(p4);
            p6.print("mAnimatingAway=");
            p6.println(this.mAnimatingAway);
            p6.print(p4);
            p6.print("mStateAfterAnimating=");
            p6.println(this.mStateAfterAnimating);
        }
        if (this.mLoaderManager != null) {
            p6.print(p4);
            p6.println("Loader Manager:");
            this.mLoaderManager.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        if (this.mChildFragmentManager != null) {
            p6.print(p4);
            p6.println(new StringBuilder().append("Child ").append(this.mChildFragmentManager).append(":").toString());
            this.mChildFragmentManager.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        return;
    }

    public final boolean equals(Object p2)
    {
        return super.equals(p2);
    }

    android.support.v4.app.Fragment findFragmentByWho(String p2)
    {
        if (!p2.equals(this.mWho)) {
            if (this.mChildFragmentManager == null) {
                this = 0;
            } else {
                this = this.mChildFragmentManager.findFragmentByWho(p2);
            }
        }
        return this;
    }

    public final android.support.v4.app.FragmentActivity getActivity()
    {
        android.support.v4.app.FragmentActivity v0_3;
        if (this.mHost != null) {
            v0_3 = ((android.support.v4.app.FragmentActivity) this.mHost.getActivity());
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    public boolean getAllowEnterTransitionOverlap()
    {
        boolean v0_2;
        if (this.mAllowEnterTransitionOverlap != null) {
            v0_2 = this.mAllowEnterTransitionOverlap.booleanValue();
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean getAllowReturnTransitionOverlap()
    {
        boolean v0_2;
        if (this.mAllowReturnTransitionOverlap != null) {
            v0_2 = this.mAllowReturnTransitionOverlap.booleanValue();
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final android.os.Bundle getArguments()
    {
        return this.mArguments;
    }

    public final android.support.v4.app.FragmentManager getChildFragmentManager()
    {
        if (this.mChildFragmentManager == null) {
            this.instantiateChildFragmentManager();
            if (this.mState < 5) {
                if (this.mState < 4) {
                    if (this.mState < 2) {
                        if (this.mState >= 1) {
                            this.mChildFragmentManager.dispatchCreate();
                        }
                    } else {
                        this.mChildFragmentManager.dispatchActivityCreated();
                    }
                } else {
                    this.mChildFragmentManager.dispatchStart();
                }
            } else {
                this.mChildFragmentManager.dispatchResume();
            }
        }
        return this.mChildFragmentManager;
    }

    public android.content.Context getContext()
    {
        android.content.Context v0_2;
        if (this.mHost != null) {
            v0_2 = this.mHost.getContext();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public Object getEnterTransition()
    {
        return this.mEnterTransition;
    }

    public Object getExitTransition()
    {
        return this.mExitTransition;
    }

    public final android.support.v4.app.FragmentManager getFragmentManager()
    {
        return this.mFragmentManager;
    }

    public final Object getHost()
    {
        Object v0_2;
        if (this.mHost != null) {
            v0_2 = this.mHost.onGetHost();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public final int getId()
    {
        return this.mFragmentId;
    }

    public android.view.LayoutInflater getLayoutInflater(android.os.Bundle p3)
    {
        android.view.LayoutInflater v0 = this.mHost.onGetLayoutInflater();
        this.getChildFragmentManager();
        android.support.v4.view.LayoutInflaterCompat.setFactory(v0, this.mChildFragmentManager.getLayoutInflaterFactory());
        return v0;
    }

    public android.support.v4.app.LoaderManager getLoaderManager()
    {
        android.support.v4.app.LoaderManagerImpl v0_2;
        if (this.mLoaderManager == null) {
            if (this.mHost != null) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mHost.getLoaderManager(this.mWho, this.mLoadersStarted, 1);
                v0_2 = this.mLoaderManager;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
            }
        } else {
            v0_2 = this.mLoaderManager;
        }
        return v0_2;
    }

    public final android.support.v4.app.Fragment getParentFragment()
    {
        return this.mParentFragment;
    }

    public Object getReenterTransition()
    {
        Object v0_1;
        if (this.mReenterTransition != android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION) {
            v0_1 = this.mReenterTransition;
        } else {
            v0_1 = this.getExitTransition();
        }
        return v0_1;
    }

    public final android.content.res.Resources getResources()
    {
        if (this.mHost != null) {
            return this.mHost.getContext().getResources();
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public final boolean getRetainInstance()
    {
        return this.mRetainInstance;
    }

    public Object getReturnTransition()
    {
        Object v0_1;
        if (this.mReturnTransition != android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION) {
            v0_1 = this.mReturnTransition;
        } else {
            v0_1 = this.getEnterTransition();
        }
        return v0_1;
    }

    public Object getSharedElementEnterTransition()
    {
        return this.mSharedElementEnterTransition;
    }

    public Object getSharedElementReturnTransition()
    {
        Object v0_1;
        if (this.mSharedElementReturnTransition != android.support.v4.app.Fragment.USE_DEFAULT_TRANSITION) {
            v0_1 = this.mSharedElementReturnTransition;
        } else {
            v0_1 = this.getSharedElementEnterTransition();
        }
        return v0_1;
    }

    public final String getString(int p2)
    {
        return this.getResources().getString(p2);
    }

    public final varargs String getString(int p2, Object[] p3)
    {
        return this.getResources().getString(p2, p3);
    }

    public final String getTag()
    {
        return this.mTag;
    }

    public final android.support.v4.app.Fragment getTargetFragment()
    {
        return this.mTarget;
    }

    public final int getTargetRequestCode()
    {
        return this.mTargetRequestCode;
    }

    public final CharSequence getText(int p2)
    {
        return this.getResources().getText(p2);
    }

    public boolean getUserVisibleHint()
    {
        return this.mUserVisibleHint;
    }

    public android.view.View getView()
    {
        return this.mView;
    }

    public final boolean hasOptionsMenu()
    {
        return this.mHasMenu;
    }

    public final int hashCode()
    {
        return super.hashCode();
    }

    void initState()
    {
        this.mIndex = -1;
        this.mWho = 0;
        this.mAdded = 0;
        this.mRemoving = 0;
        this.mFromLayout = 0;
        this.mInLayout = 0;
        this.mRestored = 0;
        this.mBackStackNesting = 0;
        this.mFragmentManager = 0;
        this.mChildFragmentManager = 0;
        this.mHost = 0;
        this.mFragmentId = 0;
        this.mContainerId = 0;
        this.mTag = 0;
        this.mHidden = 0;
        this.mDetached = 0;
        this.mRetaining = 0;
        this.mLoaderManager = 0;
        this.mLoadersStarted = 0;
        this.mCheckedForLoaderManager = 0;
        return;
    }

    void instantiateChildFragmentManager()
    {
        this.mChildFragmentManager = new android.support.v4.app.FragmentManagerImpl();
        this.mChildFragmentManager.attachController(this.mHost, new android.support.v4.app.Fragment$1(this), this);
        return;
    }

    public final boolean isAdded()
    {
        if ((this.mHost == null) || (!this.mAdded)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public final boolean isDetached()
    {
        return this.mDetached;
    }

    public final boolean isHidden()
    {
        return this.mHidden;
    }

    final boolean isInBackStack()
    {
        int v0_1;
        if (this.mBackStackNesting <= 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public final boolean isInLayout()
    {
        return this.mInLayout;
    }

    public final boolean isMenuVisible()
    {
        return this.mMenuVisible;
    }

    public final boolean isRemoving()
    {
        return this.mRemoving;
    }

    public final boolean isResumed()
    {
        int v0_1;
        if (this.mState < 5) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public final boolean isVisible()
    {
        if ((!this.isAdded()) || ((this.isHidden()) || ((this.mView == null) || ((this.mView.getWindowToken() == null) || (this.mView.getVisibility() != 0))))) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public void onActivityCreated(android.os.Bundle p2)
    {
        this.mCalled = 1;
        return;
    }

    public void onActivityResult(int p1, int p2, android.content.Intent p3)
    {
        return;
    }

    public void onAttach(android.app.Activity p2)
    {
        this.mCalled = 1;
        return;
    }

    public void onAttach(android.content.Context p3)
    {
        android.app.Activity v0;
        this.mCalled = 1;
        if (this.mHost != null) {
            v0 = this.mHost.getActivity();
        } else {
            v0 = 0;
        }
        if (v0 != null) {
            this.mCalled = 0;
            this.onAttach(v0);
        }
        return;
    }

    public void onAttachFragment(android.support.v4.app.Fragment p1)
    {
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        this.mCalled = 1;
        return;
    }

    public boolean onContextItemSelected(android.view.MenuItem p2)
    {
        return 0;
    }

    public void onCreate(android.os.Bundle p3)
    {
        this.mCalled = 1;
        this.restoreChildFragmentState(p3);
        if ((this.mChildFragmentManager != null) && (!this.mChildFragmentManager.isStateAtLeast(1))) {
            this.mChildFragmentManager.dispatchCreate();
        }
        return;
    }

    public android.view.animation.Animation onCreateAnimation(int p2, boolean p3, int p4)
    {
        return 0;
    }

    public void onCreateContextMenu(android.view.ContextMenu p2, android.view.View p3, android.view.ContextMenu$ContextMenuInfo p4)
    {
        this.getActivity().onCreateContextMenu(p2, p3, p4);
        return;
    }

    public void onCreateOptionsMenu(android.view.Menu p1, android.view.MenuInflater p2)
    {
        return;
    }

    public android.view.View onCreateView(android.view.LayoutInflater p2, android.view.ViewGroup p3, android.os.Bundle p4)
    {
        return 0;
    }

    public void onDestroy()
    {
        this.mCalled = 1;
        if (!this.mCheckedForLoaderManager) {
            this.mCheckedForLoaderManager = 1;
            this.mLoaderManager = this.mHost.getLoaderManager(this.mWho, this.mLoadersStarted, 0);
        }
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doDestroy();
        }
        return;
    }

    public void onDestroyOptionsMenu()
    {
        return;
    }

    public void onDestroyView()
    {
        this.mCalled = 1;
        return;
    }

    public void onDetach()
    {
        this.mCalled = 1;
        return;
    }

    public void onHiddenChanged(boolean p1)
    {
        return;
    }

    public void onInflate(android.app.Activity p2, android.util.AttributeSet p3, android.os.Bundle p4)
    {
        this.mCalled = 1;
        return;
    }

    public void onInflate(android.content.Context p3, android.util.AttributeSet p4, android.os.Bundle p5)
    {
        android.app.Activity v0;
        this.mCalled = 1;
        if (this.mHost != null) {
            v0 = this.mHost.getActivity();
        } else {
            v0 = 0;
        }
        if (v0 != null) {
            this.mCalled = 0;
            this.onInflate(v0, p4, p5);
        }
        return;
    }

    public void onLowMemory()
    {
        this.mCalled = 1;
        return;
    }

    public void onMultiWindowModeChanged(boolean p1)
    {
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p2)
    {
        return 0;
    }

    public void onOptionsMenuClosed(android.view.Menu p1)
    {
        return;
    }

    public void onPause()
    {
        this.mCalled = 1;
        return;
    }

    public void onPictureInPictureModeChanged(boolean p1)
    {
        return;
    }

    public void onPrepareOptionsMenu(android.view.Menu p1)
    {
        return;
    }

    public void onRequestPermissionsResult(int p1, String[] p2, int[] p3)
    {
        return;
    }

    public void onResume()
    {
        this.mCalled = 1;
        return;
    }

    public void onSaveInstanceState(android.os.Bundle p1)
    {
        return;
    }

    public void onStart()
    {
        this.mCalled = 1;
        if (!this.mLoadersStarted) {
            this.mLoadersStarted = 1;
            if (!this.mCheckedForLoaderManager) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mHost.getLoaderManager(this.mWho, this.mLoadersStarted, 0);
            }
            if (this.mLoaderManager != null) {
                this.mLoaderManager.doStart();
            }
        }
        return;
    }

    public void onStop()
    {
        this.mCalled = 1;
        return;
    }

    public void onViewCreated(android.view.View p1, android.os.Bundle p2)
    {
        return;
    }

    public void onViewStateRestored(android.os.Bundle p2)
    {
        this.mCalled = 1;
        return;
    }

    void performActivityCreated(android.os.Bundle p4)
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.noteStateNotSaved();
        }
        this.mState = 2;
        this.mCalled = 0;
        this.onActivityCreated(p4);
        if (this.mCalled) {
            if (this.mChildFragmentManager != null) {
                this.mChildFragmentManager.dispatchActivityCreated();
            }
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onActivityCreated()").toString());
        }
    }

    void performConfigurationChanged(android.content.res.Configuration p2)
    {
        this.onConfigurationChanged(p2);
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchConfigurationChanged(p2);
        }
        return;
    }

    boolean performContextItemSelected(android.view.MenuItem p3)
    {
        int v0 = 1;
        if ((this.mHidden) || ((!this.onContextItemSelected(p3)) && ((this.mChildFragmentManager == null) || (!this.mChildFragmentManager.dispatchContextItemSelected(p3))))) {
            v0 = 0;
        }
        return v0;
    }

    void performCreate(android.os.Bundle p4)
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.noteStateNotSaved();
        }
        this.mState = 1;
        this.mCalled = 0;
        this.onCreate(p4);
        if (this.mCalled) {
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onCreate()").toString());
        }
    }

    boolean performCreateOptionsMenu(android.view.Menu p3, android.view.MenuInflater p4)
    {
        int v0 = 0;
        if (!this.mHidden) {
            if ((this.mHasMenu) && (this.mMenuVisible)) {
                v0 = 1;
                this.onCreateOptionsMenu(p3, p4);
            }
            if (this.mChildFragmentManager != null) {
                v0 |= this.mChildFragmentManager.dispatchCreateOptionsMenu(p3, p4);
            }
        }
        return v0;
    }

    android.view.View performCreateView(android.view.LayoutInflater p2, android.view.ViewGroup p3, android.os.Bundle p4)
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.noteStateNotSaved();
        }
        return this.onCreateView(p2, p3, p4);
    }

    void performDestroy()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchDestroy();
        }
        this.mState = 0;
        this.mCalled = 0;
        this.onDestroy();
        if (this.mCalled) {
            this.mChildFragmentManager = 0;
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onDestroy()").toString());
        }
    }

    void performDestroyView()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchDestroyView();
        }
        this.mState = 1;
        this.mCalled = 0;
        this.onDestroyView();
        if (this.mCalled) {
            if (this.mLoaderManager != null) {
                this.mLoaderManager.doReportNextStart();
            }
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onDestroyView()").toString());
        }
    }

    void performDetach()
    {
        this.mCalled = 0;
        this.onDetach();
        if (this.mCalled) {
            if (this.mChildFragmentManager != null) {
                if (this.mRetaining) {
                    this.mChildFragmentManager.dispatchDestroy();
                    this.mChildFragmentManager = 0;
                } else {
                    throw new IllegalStateException(new StringBuilder().append("Child FragmentManager of ").append(this).append(" was not ").append(" destroyed and this fragment is not retaining instance").toString());
                }
            }
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onDetach()").toString());
        }
    }

    void performLowMemory()
    {
        this.onLowMemory();
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchLowMemory();
        }
        return;
    }

    void performMultiWindowModeChanged(boolean p2)
    {
        this.onMultiWindowModeChanged(p2);
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchMultiWindowModeChanged(p2);
        }
        return;
    }

    boolean performOptionsItemSelected(android.view.MenuItem p3)
    {
        int v0 = 1;
        if ((this.mHidden) || (((!this.mHasMenu) || ((!this.mMenuVisible) || (!this.onOptionsItemSelected(p3)))) && ((this.mChildFragmentManager == null) || (!this.mChildFragmentManager.dispatchOptionsItemSelected(p3))))) {
            v0 = 0;
        }
        return v0;
    }

    void performOptionsMenuClosed(android.view.Menu p2)
    {
        if (!this.mHidden) {
            if ((this.mHasMenu) && (this.mMenuVisible)) {
                this.onOptionsMenuClosed(p2);
            }
            if (this.mChildFragmentManager != null) {
                this.mChildFragmentManager.dispatchOptionsMenuClosed(p2);
            }
        }
        return;
    }

    void performPause()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchPause();
        }
        this.mState = 4;
        this.mCalled = 0;
        this.onPause();
        if (this.mCalled) {
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onPause()").toString());
        }
    }

    void performPictureInPictureModeChanged(boolean p2)
    {
        this.onPictureInPictureModeChanged(p2);
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchPictureInPictureModeChanged(p2);
        }
        return;
    }

    boolean performPrepareOptionsMenu(android.view.Menu p3)
    {
        int v0 = 0;
        if (!this.mHidden) {
            if ((this.mHasMenu) && (this.mMenuVisible)) {
                v0 = 1;
                this.onPrepareOptionsMenu(p3);
            }
            if (this.mChildFragmentManager != null) {
                v0 |= this.mChildFragmentManager.dispatchPrepareOptionsMenu(p3);
            }
        }
        return v0;
    }

    void performReallyStop()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchReallyStop();
        }
        this.mState = 2;
        if (this.mLoadersStarted) {
            this.mLoadersStarted = 0;
            if (!this.mCheckedForLoaderManager) {
                this.mCheckedForLoaderManager = 1;
                this.mLoaderManager = this.mHost.getLoaderManager(this.mWho, this.mLoadersStarted, 0);
            }
            if (this.mLoaderManager != null) {
                if (!this.mHost.getRetainLoaders()) {
                    this.mLoaderManager.doStop();
                } else {
                    this.mLoaderManager.doRetain();
                }
            }
        }
        return;
    }

    void performResume()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.noteStateNotSaved();
            this.mChildFragmentManager.execPendingActions();
        }
        this.mState = 5;
        this.mCalled = 0;
        this.onResume();
        if (this.mCalled) {
            if (this.mChildFragmentManager != null) {
                this.mChildFragmentManager.dispatchResume();
                this.mChildFragmentManager.execPendingActions();
            }
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onResume()").toString());
        }
    }

    void performSaveInstanceState(android.os.Bundle p3)
    {
        this.onSaveInstanceState(p3);
        if (this.mChildFragmentManager != null) {
            android.os.Parcelable v0 = this.mChildFragmentManager.saveAllState();
            if (v0 != null) {
                p3.putParcelable("android:support:fragments", v0);
            }
        }
        return;
    }

    void performStart()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.noteStateNotSaved();
            this.mChildFragmentManager.execPendingActions();
        }
        this.mState = 4;
        this.mCalled = 0;
        this.onStart();
        if (this.mCalled) {
            if (this.mChildFragmentManager != null) {
                this.mChildFragmentManager.dispatchStart();
            }
            if (this.mLoaderManager != null) {
                this.mLoaderManager.doReportStart();
            }
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onStart()").toString());
        }
    }

    void performStop()
    {
        if (this.mChildFragmentManager != null) {
            this.mChildFragmentManager.dispatchStop();
        }
        this.mState = 3;
        this.mCalled = 0;
        this.onStop();
        if (this.mCalled) {
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onStop()").toString());
        }
    }

    public void registerForContextMenu(android.view.View p1)
    {
        p1.setOnCreateContextMenuListener(this);
        return;
    }

    public final void requestPermissions(String[] p4, int p5)
    {
        if (this.mHost != null) {
            this.mHost.onRequestPermissionsFromFragment(this, p4, p5);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    void restoreChildFragmentState(android.os.Bundle p4)
    {
        if (p4 != null) {
            android.os.Parcelable v0 = p4.getParcelable("android:support:fragments");
            if (v0 != null) {
                if (this.mChildFragmentManager == null) {
                    this.instantiateChildFragmentManager();
                }
                this.mChildFragmentManager.restoreAllState(v0, this.mChildNonConfig);
                this.mChildNonConfig = 0;
                this.mChildFragmentManager.dispatchCreate();
            }
        }
        return;
    }

    final void restoreViewState(android.os.Bundle p4)
    {
        if (this.mSavedViewState != null) {
            this.mInnerView.restoreHierarchyState(this.mSavedViewState);
            this.mSavedViewState = 0;
        }
        this.mCalled = 0;
        this.onViewStateRestored(p4);
        if (this.mCalled) {
            return;
        } else {
            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(this).append(" did not call through to super.onViewStateRestored()").toString());
        }
    }

    public void setAllowEnterTransitionOverlap(boolean p2)
    {
        this.mAllowEnterTransitionOverlap = Boolean.valueOf(p2);
        return;
    }

    public void setAllowReturnTransitionOverlap(boolean p2)
    {
        this.mAllowReturnTransitionOverlap = Boolean.valueOf(p2);
        return;
    }

    public void setArguments(android.os.Bundle p3)
    {
        if (this.mIndex < 0) {
            this.mArguments = p3;
            return;
        } else {
            throw new IllegalStateException("Fragment already active");
        }
    }

    public void setEnterSharedElementCallback(android.support.v4.app.SharedElementCallback p1)
    {
        this.mEnterTransitionCallback = p1;
        return;
    }

    public void setEnterTransition(Object p1)
    {
        this.mEnterTransition = p1;
        return;
    }

    public void setExitSharedElementCallback(android.support.v4.app.SharedElementCallback p1)
    {
        this.mExitTransitionCallback = p1;
        return;
    }

    public void setExitTransition(Object p1)
    {
        this.mExitTransition = p1;
        return;
    }

    public void setHasOptionsMenu(boolean p2)
    {
        if (this.mHasMenu != p2) {
            this.mHasMenu = p2;
            if ((this.isAdded()) && (!this.isHidden())) {
                this.mHost.onSupportInvalidateOptionsMenu();
            }
        }
        return;
    }

    final void setIndex(int p3, android.support.v4.app.Fragment p4)
    {
        this.mIndex = p3;
        if (p4 == null) {
            this.mWho = new StringBuilder().append("android:fragment:").append(this.mIndex).toString();
        } else {
            this.mWho = new StringBuilder().append(p4.mWho).append(":").append(this.mIndex).toString();
        }
        return;
    }

    public void setInitialSavedState(android.support.v4.app.Fragment$SavedState p3)
    {
        if (this.mIndex < 0) {
            if ((p3 == null) || (p3.mState == null)) {
                android.os.Bundle v0_3 = 0;
            } else {
                v0_3 = p3.mState;
            }
            this.mSavedFragmentState = v0_3;
            return;
        } else {
            throw new IllegalStateException("Fragment already active");
        }
    }

    public void setMenuVisibility(boolean p2)
    {
        if (this.mMenuVisible != p2) {
            this.mMenuVisible = p2;
            if ((this.mHasMenu) && ((this.isAdded()) && (!this.isHidden()))) {
                this.mHost.onSupportInvalidateOptionsMenu();
            }
        }
        return;
    }

    public void setReenterTransition(Object p1)
    {
        this.mReenterTransition = p1;
        return;
    }

    public void setRetainInstance(boolean p1)
    {
        this.mRetainInstance = p1;
        return;
    }

    public void setReturnTransition(Object p1)
    {
        this.mReturnTransition = p1;
        return;
    }

    public void setSharedElementEnterTransition(Object p1)
    {
        this.mSharedElementEnterTransition = p1;
        return;
    }

    public void setSharedElementReturnTransition(Object p1)
    {
        this.mSharedElementReturnTransition = p1;
        return;
    }

    public void setTargetFragment(android.support.v4.app.Fragment p1, int p2)
    {
        this.mTarget = p1;
        this.mTargetRequestCode = p2;
        return;
    }

    public void setUserVisibleHint(boolean p3)
    {
        if ((!this.mUserVisibleHint) && ((p3) && ((this.mState < 4) && ((this.mFragmentManager != null) && (this.isAdded()))))) {
            this.mFragmentManager.performPendingDeferredStart(this);
        }
        android.support.v4.app.FragmentManagerImpl v0_3;
        this.mUserVisibleHint = p3;
        if ((this.mState >= 4) || (p3)) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        this.mDeferStart = v0_3;
        return;
    }

    public boolean shouldShowRequestPermissionRationale(String p2)
    {
        int v0_1;
        if (this.mHost == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mHost.onShouldShowRequestPermissionRationale(p2);
        }
        return v0_1;
    }

    public void startActivity(android.content.Intent p2)
    {
        this.startActivity(p2, 0);
        return;
    }

    public void startActivity(android.content.Intent p4, android.os.Bundle p5)
    {
        if (this.mHost != null) {
            this.mHost.onStartActivityFromFragment(this, p4, -1, p5);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public void startActivityForResult(android.content.Intent p2, int p3)
    {
        this.startActivityForResult(p2, p3, 0);
        return;
    }

    public void startActivityForResult(android.content.Intent p4, int p5, android.os.Bundle p6)
    {
        if (this.mHost != null) {
            this.mHost.onStartActivityFromFragment(this, p4, p5, p6);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public void startIntentSenderForResult(android.content.IntentSender p10, int p11, android.content.Intent p12, int p13, int p14, int p15, android.os.Bundle p16)
    {
        if (this.mHost != null) {
            this.mHost.onStartIntentSenderFromFragment(this, p10, p11, p12, p13, p14, p15, p16);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(this).append(" not attached to Activity").toString());
        }
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        android.support.v4.util.DebugUtils.buildShortClassTag(this, v0_1);
        if (this.mIndex >= 0) {
            v0_1.append(" #");
            v0_1.append(this.mIndex);
        }
        if (this.mFragmentId != 0) {
            v0_1.append(" id=0x");
            v0_1.append(Integer.toHexString(this.mFragmentId));
        }
        if (this.mTag != null) {
            v0_1.append(" ");
            v0_1.append(this.mTag);
        }
        v0_1.append(125);
        return v0_1.toString();
    }

    public void unregisterForContextMenu(android.view.View p2)
    {
        p2.setOnCreateContextMenuListener(0);
        return;
    }
}
package android.support.v4.app;
 class FragmentActivity$1 extends android.os.Handler {
    final synthetic android.support.v4.app.FragmentActivity this$0;

    FragmentActivity$1(android.support.v4.app.FragmentActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void handleMessage(android.os.Message p3)
    {
        switch (p3.what) {
            case 1:
                if (!this.this$0.mStopped) {
                } else {
                    this.this$0.doReallyStop(0);
                }
                break;
            case 2:
                this.this$0.onResumeFragments();
                this.this$0.mFragments.execPendingActions();
                break;
            default:
                super.handleMessage(p3);
        }
        return;
    }
}
package android.support.v4.app;
final class FragmentActivity$NonConfigurationInstances {
    Object custom;
    android.support.v4.app.FragmentManagerNonConfig fragments;
    android.support.v4.util.SimpleArrayMap loaders;

    FragmentActivity$NonConfigurationInstances()
    {
        return;
    }
}
package android.support.v4.app;
public abstract class FragmentContainer {

    public FragmentContainer()
    {
        return;
    }

    public abstract android.view.View onFindViewById();

    public abstract boolean onHasView();
}
package android.support.v4.app;
public class FragmentController {
    private final android.support.v4.app.FragmentHostCallback mHost;

    private FragmentController(android.support.v4.app.FragmentHostCallback p1)
    {
        this.mHost = p1;
        return;
    }

    public static final android.support.v4.app.FragmentController createController(android.support.v4.app.FragmentHostCallback p1)
    {
        return new android.support.v4.app.FragmentController(p1);
    }

    public void attachHost(android.support.v4.app.Fragment p4)
    {
        this.mHost.mFragmentManager.attachController(this.mHost, this.mHost, p4);
        return;
    }

    public void dispatchActivityCreated()
    {
        this.mHost.mFragmentManager.dispatchActivityCreated();
        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration p2)
    {
        this.mHost.mFragmentManager.dispatchConfigurationChanged(p2);
        return;
    }

    public boolean dispatchContextItemSelected(android.view.MenuItem p2)
    {
        return this.mHost.mFragmentManager.dispatchContextItemSelected(p2);
    }

    public void dispatchCreate()
    {
        this.mHost.mFragmentManager.dispatchCreate();
        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu p2, android.view.MenuInflater p3)
    {
        return this.mHost.mFragmentManager.dispatchCreateOptionsMenu(p2, p3);
    }

    public void dispatchDestroy()
    {
        this.mHost.mFragmentManager.dispatchDestroy();
        return;
    }

    public void dispatchDestroyView()
    {
        this.mHost.mFragmentManager.dispatchDestroyView();
        return;
    }

    public void dispatchLowMemory()
    {
        this.mHost.mFragmentManager.dispatchLowMemory();
        return;
    }

    public void dispatchMultiWindowModeChanged(boolean p2)
    {
        this.mHost.mFragmentManager.dispatchMultiWindowModeChanged(p2);
        return;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem p2)
    {
        return this.mHost.mFragmentManager.dispatchOptionsItemSelected(p2);
    }

    public void dispatchOptionsMenuClosed(android.view.Menu p2)
    {
        this.mHost.mFragmentManager.dispatchOptionsMenuClosed(p2);
        return;
    }

    public void dispatchPause()
    {
        this.mHost.mFragmentManager.dispatchPause();
        return;
    }

    public void dispatchPictureInPictureModeChanged(boolean p2)
    {
        this.mHost.mFragmentManager.dispatchPictureInPictureModeChanged(p2);
        return;
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu p2)
    {
        return this.mHost.mFragmentManager.dispatchPrepareOptionsMenu(p2);
    }

    public void dispatchReallyStop()
    {
        this.mHost.mFragmentManager.dispatchReallyStop();
        return;
    }

    public void dispatchResume()
    {
        this.mHost.mFragmentManager.dispatchResume();
        return;
    }

    public void dispatchStart()
    {
        this.mHost.mFragmentManager.dispatchStart();
        return;
    }

    public void dispatchStop()
    {
        this.mHost.mFragmentManager.dispatchStop();
        return;
    }

    public void doLoaderDestroy()
    {
        this.mHost.doLoaderDestroy();
        return;
    }

    public void doLoaderRetain()
    {
        this.mHost.doLoaderRetain();
        return;
    }

    public void doLoaderStart()
    {
        this.mHost.doLoaderStart();
        return;
    }

    public void doLoaderStop(boolean p2)
    {
        this.mHost.doLoaderStop(p2);
        return;
    }

    public void dumpLoaders(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        this.mHost.dumpLoaders(p2, p3, p4, p5);
        return;
    }

    public boolean execPendingActions()
    {
        return this.mHost.mFragmentManager.execPendingActions();
    }

    public android.support.v4.app.Fragment findFragmentByWho(String p2)
    {
        return this.mHost.mFragmentManager.findFragmentByWho(p2);
    }

    public java.util.List getActiveFragments(java.util.List p2)
    {
        java.util.ArrayList v0_4;
        if (this.mHost.mFragmentManager.mActive != null) {
            if (p2 == null) {
                p2 = new java.util.ArrayList(this.getActiveFragmentsCount());
            }
            p2.addAll(this.mHost.mFragmentManager.mActive);
            v0_4 = p2;
        } else {
            v0_4 = 0;
        }
        return v0_4;
    }

    public int getActiveFragmentsCount()
    {
        int v1_2;
        java.util.ArrayList v0 = this.mHost.mFragmentManager.mActive;
        if (v0 != null) {
            v1_2 = v0.size();
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public android.support.v4.app.FragmentManager getSupportFragmentManager()
    {
        return this.mHost.getFragmentManagerImpl();
    }

    public android.support.v4.app.LoaderManager getSupportLoaderManager()
    {
        return this.mHost.getLoaderManagerImpl();
    }

    public void noteStateNotSaved()
    {
        this.mHost.mFragmentManager.noteStateNotSaved();
        return;
    }

    public android.view.View onCreateView(android.view.View p2, String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        return this.mHost.mFragmentManager.onCreateView(p2, p3, p4, p5);
    }

    public void reportLoaderStart()
    {
        this.mHost.reportLoaderStart();
        return;
    }

    public void restoreAllState(android.os.Parcelable p2, android.support.v4.app.FragmentManagerNonConfig p3)
    {
        this.mHost.mFragmentManager.restoreAllState(p2, p3);
        return;
    }

    public void restoreAllState(android.os.Parcelable p4, java.util.List p5)
    {
        this.mHost.mFragmentManager.restoreAllState(p4, new android.support.v4.app.FragmentManagerNonConfig(p5, 0));
        return;
    }

    public void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap p2)
    {
        this.mHost.restoreLoaderNonConfig(p2);
        return;
    }

    public android.support.v4.util.SimpleArrayMap retainLoaderNonConfig()
    {
        return this.mHost.retainLoaderNonConfig();
    }

    public android.support.v4.app.FragmentManagerNonConfig retainNestedNonConfig()
    {
        return this.mHost.mFragmentManager.retainNonConfig();
    }

    public java.util.List retainNonConfig()
    {
        int v1_2;
        android.support.v4.app.FragmentManagerNonConfig v0 = this.mHost.mFragmentManager.retainNonConfig();
        if (v0 == null) {
            v1_2 = 0;
        } else {
            v1_2 = v0.getFragments();
        }
        return v1_2;
    }

    public android.os.Parcelable saveAllState()
    {
        return this.mHost.mFragmentManager.saveAllState();
    }
}
package android.support.v4.app;
public interface FragmentManager$BackStackEntry {

    public abstract CharSequence getBreadCrumbShortTitle();

    public abstract int getBreadCrumbShortTitleRes();

    public abstract CharSequence getBreadCrumbTitle();

    public abstract int getBreadCrumbTitleRes();

    public abstract int getId();

    public abstract String getName();
}
package android.support.v4.app;
public interface FragmentManager$OnBackStackChangedListener {

    public abstract void onBackStackChanged();
}
package android.support.v4.app;
public abstract class FragmentManager {
    public static final int POP_BACK_STACK_INCLUSIVE = 1;

    public FragmentManager()
    {
        return;
    }

    public static void enableDebugLogging(boolean p0)
    {
        android.support.v4.app.FragmentManagerImpl.DEBUG = p0;
        return;
    }

    public abstract void addOnBackStackChangedListener();

    public abstract android.support.v4.app.FragmentTransaction beginTransaction();

    public abstract void dump();

    public abstract boolean executePendingTransactions();

    public abstract android.support.v4.app.Fragment findFragmentById();

    public abstract android.support.v4.app.Fragment findFragmentByTag();

    public abstract android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt();

    public abstract int getBackStackEntryCount();

    public abstract android.support.v4.app.Fragment getFragment();

    public abstract java.util.List getFragments();

    public abstract boolean isDestroyed();

    public android.support.v4.app.FragmentTransaction openTransaction()
    {
        return this.beginTransaction();
    }

    public abstract void popBackStack();

    public abstract void popBackStack();

    public abstract void popBackStack();

    public abstract boolean popBackStackImmediate();

    public abstract boolean popBackStackImmediate();

    public abstract boolean popBackStackImmediate();

    public abstract void putFragment();

    public abstract void removeOnBackStackChangedListener();

    public abstract android.support.v4.app.Fragment$SavedState saveFragmentInstanceState();
}
package android.support.v4.app;
 class FragmentManagerImpl$1 implements java.lang.Runnable {
    final synthetic android.support.v4.app.FragmentManagerImpl this$0;

    FragmentManagerImpl$1(android.support.v4.app.FragmentManagerImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.execPendingActions();
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$2 implements java.lang.Runnable {
    final synthetic android.support.v4.app.FragmentManagerImpl this$0;

    FragmentManagerImpl$2(android.support.v4.app.FragmentManagerImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mHost.getHandler(), 0, -1, 0);
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$3 implements java.lang.Runnable {
    final synthetic android.support.v4.app.FragmentManagerImpl this$0;
    final synthetic int val$flags;
    final synthetic String val$name;

    FragmentManagerImpl$3(android.support.v4.app.FragmentManagerImpl p1, String p2, int p3)
    {
        this.this$0 = p1;
        this.val$name = p2;
        this.val$flags = p3;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mHost.getHandler(), this.val$name, -1, this.val$flags);
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$4 implements java.lang.Runnable {
    final synthetic android.support.v4.app.FragmentManagerImpl this$0;
    final synthetic int val$flags;
    final synthetic int val$id;

    FragmentManagerImpl$4(android.support.v4.app.FragmentManagerImpl p1, int p2, int p3)
    {
        this.this$0 = p1;
        this.val$id = p2;
        this.val$flags = p3;
        return;
    }

    public void run()
    {
        this.this$0.popBackStackState(this.this$0.mHost.getHandler(), 0, this.val$id, this.val$flags);
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1 implements java.lang.Runnable {
    final synthetic android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener this$0;

    FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1(android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        android.support.v4.view.ViewCompat.setLayerType(this.this$0.mView, 0, 0);
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$AnimateOnHWLayerIfNeededListener implements android.view.animation.Animation$AnimationListener {
    private android.view.animation.Animation$AnimationListener mOriginalListener;
    private boolean mShouldRunOnHWLayer;
    android.view.View mView;

    public FragmentManagerImpl$AnimateOnHWLayerIfNeededListener(android.view.View p1, android.view.animation.Animation p2)
    {
        if ((p1 != null) && (p2 != null)) {
            this.mView = p1;
        }
        return;
    }

    public FragmentManagerImpl$AnimateOnHWLayerIfNeededListener(android.view.View p2, android.view.animation.Animation p3, android.view.animation.Animation$AnimationListener p4)
    {
        if ((p2 != null) && (p3 != null)) {
            this.mOriginalListener = p4;
            this.mView = p2;
            this.mShouldRunOnHWLayer = 1;
        }
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p4)
    {
        if ((this.mView != null) && (this.mShouldRunOnHWLayer)) {
            if ((!android.support.v4.view.ViewCompat.isAttachedToWindow(this.mView)) && (!android.support.v4.os.BuildCompat.isAtLeastN())) {
                android.support.v4.view.ViewCompat.setLayerType(this.mView, 0, 0);
            } else {
                this.mView.post(new android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1(this));
            }
        }
        if (this.mOriginalListener != null) {
            this.mOriginalListener.onAnimationEnd(p4);
        }
        return;
    }

    public void onAnimationRepeat(android.view.animation.Animation p2)
    {
        if (this.mOriginalListener != null) {
            this.mOriginalListener.onAnimationRepeat(p2);
        }
        return;
    }

    public void onAnimationStart(android.view.animation.Animation p2)
    {
        if (this.mOriginalListener != null) {
            this.mOriginalListener.onAnimationStart(p2);
        }
        return;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$FragmentTag {
    public static final int[] Fragment = None;
    public static final int Fragment_id = 1;
    public static final int Fragment_name = 0;
    public static final int Fragment_tag = 2;

    static FragmentManagerImpl$FragmentTag()
    {
        int[] v0_1 = new int[3];
        v0_1 = {16842755, 16842960, 16842961};
        android.support.v4.app.FragmentManagerImpl$FragmentTag.Fragment = v0_1;
        return;
    }

    FragmentManagerImpl$FragmentTag()
    {
        return;
    }
}
package android.support.v4.app;
public class FragmentManagerNonConfig {
    private final java.util.List mChildNonConfigs;
    private final java.util.List mFragments;

    FragmentManagerNonConfig(java.util.List p1, java.util.List p2)
    {
        this.mFragments = p1;
        this.mChildNonConfigs = p2;
        return;
    }

    java.util.List getChildNonConfigs()
    {
        return this.mChildNonConfigs;
    }

    java.util.List getFragments()
    {
        return this.mFragments;
    }
}
package android.support.v4.app;
final class FragmentManagerState$1 implements android.os.Parcelable$Creator {

    FragmentManagerState$1()
    {
        return;
    }

    public android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.FragmentManagerState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.FragmentManagerState[] newArray(int p2)
    {
        android.support.v4.app.FragmentManagerState[] v0 = new android.support.v4.app.FragmentManagerState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
final class FragmentManagerState implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    android.support.v4.app.FragmentState[] mActive;
    int[] mAdded;
    android.support.v4.app.BackStackState[] mBackStack;

    static FragmentManagerState()
    {
        android.support.v4.app.FragmentManagerState.CREATOR = new android.support.v4.app.FragmentManagerState$1();
        return;
    }

    public FragmentManagerState()
    {
        return;
    }

    public FragmentManagerState(android.os.Parcel p2)
    {
        this.mActive = ((android.support.v4.app.FragmentState[]) p2.createTypedArray(android.support.v4.app.FragmentState.CREATOR));
        this.mAdded = p2.createIntArray();
        this.mBackStack = ((android.support.v4.app.BackStackState[]) p2.createTypedArray(android.support.v4.app.BackStackState.CREATOR));
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeTypedArray(this.mActive, p3);
        p2.writeIntArray(this.mAdded);
        p2.writeTypedArray(this.mBackStack, p3);
        return;
    }
}
package android.support.v4.app;
final class FragmentState$1 implements android.os.Parcelable$Creator {

    FragmentState$1()
    {
        return;
    }

    public android.support.v4.app.FragmentState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.FragmentState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.FragmentState[] newArray(int p2)
    {
        android.support.v4.app.FragmentState[] v0 = new android.support.v4.app.FragmentState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
final class FragmentState implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    final android.os.Bundle mArguments;
    final String mClassName;
    final int mContainerId;
    final boolean mDetached;
    final int mFragmentId;
    final boolean mFromLayout;
    final boolean mHidden;
    final int mIndex;
    android.support.v4.app.Fragment mInstance;
    final boolean mRetainInstance;
    android.os.Bundle mSavedFragmentState;
    final String mTag;

    static FragmentState()
    {
        android.support.v4.app.FragmentState.CREATOR = new android.support.v4.app.FragmentState$1();
        return;
    }

    public FragmentState(android.os.Parcel p4)
    {
        android.os.Bundle v0_1;
        int v1 = 1;
        this.mClassName = p4.readString();
        this.mIndex = p4.readInt();
        if (p4.readInt() == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        android.os.Bundle v0_6;
        this.mFromLayout = v0_1;
        this.mFragmentId = p4.readInt();
        this.mContainerId = p4.readInt();
        this.mTag = p4.readString();
        if (p4.readInt() == 0) {
            v0_6 = 0;
        } else {
            v0_6 = 1;
        }
        android.os.Bundle v0_8;
        this.mRetainInstance = v0_6;
        if (p4.readInt() == 0) {
            v0_8 = 0;
        } else {
            v0_8 = 1;
        }
        this.mDetached = v0_8;
        this.mArguments = p4.readBundle();
        if (p4.readInt() == 0) {
            v1 = 0;
        }
        this.mHidden = v1;
        this.mSavedFragmentState = p4.readBundle();
        return;
    }

    public FragmentState(android.support.v4.app.Fragment p2)
    {
        this.mClassName = p2.getClass().getName();
        this.mIndex = p2.mIndex;
        this.mFromLayout = p2.mFromLayout;
        this.mFragmentId = p2.mFragmentId;
        this.mContainerId = p2.mContainerId;
        this.mTag = p2.mTag;
        this.mRetainInstance = p2.mRetainInstance;
        this.mDetached = p2.mDetached;
        this.mArguments = p2.mArguments;
        this.mHidden = p2.mHidden;
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentHostCallback p5, android.support.v4.app.Fragment p6, android.support.v4.app.FragmentManagerNonConfig p7)
    {
        if (this.mInstance == null) {
            android.content.Context v0 = p5.getContext();
            if (this.mArguments != null) {
                this.mArguments.setClassLoader(v0.getClassLoader());
            }
            this.mInstance = android.support.v4.app.Fragment.instantiate(v0, this.mClassName, this.mArguments);
            if (this.mSavedFragmentState != null) {
                this.mSavedFragmentState.setClassLoader(v0.getClassLoader());
                this.mInstance.mSavedFragmentState = this.mSavedFragmentState;
            }
            this.mInstance.setIndex(this.mIndex, p6);
            this.mInstance.mFromLayout = this.mFromLayout;
            this.mInstance.mRestored = 1;
            this.mInstance.mFragmentId = this.mFragmentId;
            this.mInstance.mContainerId = this.mContainerId;
            this.mInstance.mTag = this.mTag;
            this.mInstance.mRetainInstance = this.mRetainInstance;
            this.mInstance.mDetached = this.mDetached;
            this.mInstance.mHidden = this.mHidden;
            this.mInstance.mFragmentManager = p5.mFragmentManager;
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Instantiated fragment ").append(this.mInstance).toString());
            }
        }
        this.mInstance.mChildNonConfig = p7;
        return this.mInstance;
    }

    public void writeToParcel(android.os.Parcel p4, int p5)
    {
        android.os.Bundle v0_13;
        int v1 = 1;
        p4.writeString(this.mClassName);
        p4.writeInt(this.mIndex);
        if (!this.mFromLayout) {
            v0_13 = 0;
        } else {
            v0_13 = 1;
        }
        android.os.Bundle v0_4;
        p4.writeInt(v0_13);
        p4.writeInt(this.mFragmentId);
        p4.writeInt(this.mContainerId);
        p4.writeString(this.mTag);
        if (!this.mRetainInstance) {
            v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        android.os.Bundle v0_7;
        p4.writeInt(v0_4);
        if (!this.mDetached) {
            v0_7 = 0;
        } else {
            v0_7 = 1;
        }
        p4.writeInt(v0_7);
        p4.writeBundle(this.mArguments);
        if (!this.mHidden) {
            v1 = 0;
        }
        p4.writeInt(v1);
        p4.writeBundle(this.mSavedFragmentState);
        return;
    }
}
package android.support.v4.app;
 class FragmentTabHost$DummyTabFactory implements android.widget.TabHost$TabContentFactory {
    private final android.content.Context mContext;

    public FragmentTabHost$DummyTabFactory(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public android.view.View createTabContent(String p4)
    {
        android.view.View v0_1 = new android.view.View(this.mContext);
        v0_1.setMinimumWidth(0);
        v0_1.setMinimumHeight(0);
        return v0_1;
    }
}
package android.support.v4.app;
final class FragmentTabHost$SavedState$1 implements android.os.Parcelable$Creator {

    FragmentTabHost$SavedState$1()
    {
        return;
    }

    public android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.app.FragmentTabHost$SavedState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.app.FragmentTabHost$SavedState[] newArray(int p2)
    {
        android.support.v4.app.FragmentTabHost$SavedState[] v0 = new android.support.v4.app.FragmentTabHost$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
 class FragmentTabHost$SavedState extends android.view.View$BaseSavedState {
    public static final android.os.Parcelable$Creator CREATOR;
    String curTab;

    static FragmentTabHost$SavedState()
    {
        android.support.v4.app.FragmentTabHost$SavedState.CREATOR = new android.support.v4.app.FragmentTabHost$SavedState$1();
        return;
    }

    FragmentTabHost$SavedState(android.os.Parcel p2)
    {
        super(p2);
        super.curTab = p2.readString();
        return;
    }

    FragmentTabHost$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("FragmentTabHost.SavedState{").append(Integer.toHexString(System.identityHashCode(this))).append(" curTab=").append(this.curTab).append("}").toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeString(this.curTab);
        return;
    }
}
package android.support.v4.app;
final class FragmentTabHost$TabInfo {
    final android.os.Bundle args;
    final Class clss;
    android.support.v4.app.Fragment fragment;
    final String tag;

    FragmentTabHost$TabInfo(String p1, Class p2, android.os.Bundle p3)
    {
        this.tag = p1;
        this.clss = p2;
        this.args = p3;
        return;
    }
}
package android.support.v4.app;
public class FragmentTabHost extends android.widget.TabHost implements android.widget.TabHost$OnTabChangeListener {
    private boolean mAttached;
    private int mContainerId;
    private android.content.Context mContext;
    private android.support.v4.app.FragmentManager mFragmentManager;
    private android.support.v4.app.FragmentTabHost$TabInfo mLastTab;
    private android.widget.TabHost$OnTabChangeListener mOnTabChangeListener;
    private android.widget.FrameLayout mRealTabContent;
    private final java.util.ArrayList mTabs;

    public FragmentTabHost(android.content.Context p3)
    {
        super(p3, 0);
        super.mTabs = new java.util.ArrayList();
        super.initFragmentTabHost(p3, 0);
        return;
    }

    public FragmentTabHost(android.content.Context p2, android.util.AttributeSet p3)
    {
        super(p2, p3);
        super.mTabs = new java.util.ArrayList();
        super.initFragmentTabHost(p2, p3);
        return;
    }

    private android.support.v4.app.FragmentTransaction doTabChanged(String p5, android.support.v4.app.FragmentTransaction p6)
    {
        android.support.v4.app.FragmentTabHost$TabInfo v0 = this.getTabInfoForTag(p5);
        if (this.mLastTab != v0) {
            if (p6 == null) {
                p6 = this.mFragmentManager.beginTransaction();
            }
            if ((this.mLastTab != null) && (this.mLastTab.fragment != null)) {
                p6.detach(this.mLastTab.fragment);
            }
            if (v0 != null) {
                if (v0.fragment != null) {
                    p6.attach(v0.fragment);
                } else {
                    v0.fragment = android.support.v4.app.Fragment.instantiate(this.mContext, v0.clss.getName(), v0.args);
                    p6.add(this.mContainerId, v0.fragment, v0.tag);
                }
            }
            this.mLastTab = v0;
        }
        return p6;
    }

    private void ensureContent()
    {
        if (this.mRealTabContent == null) {
            this.mRealTabContent = ((android.widget.FrameLayout) this.findViewById(this.mContainerId));
            if (this.mRealTabContent == null) {
                throw new IllegalStateException(new StringBuilder().append("No tab content FrameLayout found for id ").append(this.mContainerId).toString());
            }
        }
        return;
    }

    private void ensureHierarchy(android.content.Context p9)
    {
        if (this.findViewById(16908307) == null) {
            android.widget.LinearLayout v1_1 = new android.widget.LinearLayout(p9);
            v1_1.setOrientation(1);
            this.addView(v1_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
            android.widget.TabWidget v2_1 = new android.widget.TabWidget(p9);
            v2_1.setId(16908307);
            v2_1.setOrientation(0);
            v1_1.addView(v2_1, new android.widget.LinearLayout$LayoutParams(-1, -2, 0));
            android.widget.FrameLayout v0_1 = new android.widget.FrameLayout(p9);
            v0_1.setId(16908305);
            v1_1.addView(v0_1, new android.widget.LinearLayout$LayoutParams(0, 0, 0));
            android.widget.FrameLayout v0_3 = new android.widget.FrameLayout(p9);
            this.mRealTabContent = v0_3;
            this.mRealTabContent.setId(this.mContainerId);
            v1_1.addView(v0_3, new android.widget.LinearLayout$LayoutParams(-1, 0, 1065353216));
        }
        return;
    }

    private android.support.v4.app.FragmentTabHost$TabInfo getTabInfoForTag(String p5)
    {
        int v1 = 0;
        int v0 = this.mTabs.size();
        while (v1 < v0) {
            int v2_0 = ((android.support.v4.app.FragmentTabHost$TabInfo) this.mTabs.get(v1));
            if (!v2_0.tag.equals(p5)) {
                v1++;
            }
            return v2_0;
        }
        v2_0 = 0;
        return v2_0;
    }

    private void initFragmentTabHost(android.content.Context p5, android.util.AttributeSet p6)
    {
        int v1_1 = new int[1];
        v1_1[0] = 16842995;
        android.content.res.TypedArray v0 = p5.obtainStyledAttributes(p6, v1_1, 0, 0);
        this.mContainerId = v0.getResourceId(0, 0);
        v0.recycle();
        super.setOnTabChangedListener(this);
        return;
    }

    public void addTab(android.widget.TabHost$TabSpec p6, Class p7, android.os.Bundle p8)
    {
        p6.setContent(new android.support.v4.app.FragmentTabHost$DummyTabFactory(this.mContext));
        String v2 = p6.getTag();
        android.support.v4.app.FragmentTabHost$TabInfo v1_1 = new android.support.v4.app.FragmentTabHost$TabInfo(v2, p7, p8);
        if (this.mAttached) {
            v1_1.fragment = this.mFragmentManager.findFragmentByTag(v2);
            if ((v1_1.fragment != null) && (!v1_1.fragment.isDetached())) {
                android.support.v4.app.FragmentTransaction v0 = this.mFragmentManager.beginTransaction();
                v0.detach(v1_1.fragment);
                v0.commit();
            }
        }
        this.mTabs.add(v1_1);
        this.addTab(p6);
        return;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        String v1 = this.getCurrentTabTag();
        android.support.v4.app.FragmentTransaction v2_1 = 0;
        int v3 = 0;
        int v0 = this.mTabs.size();
        while (v3 < v0) {
            android.support.v4.app.FragmentTabHost$TabInfo v4_1 = ((android.support.v4.app.FragmentTabHost$TabInfo) this.mTabs.get(v3));
            v4_1.fragment = this.mFragmentManager.findFragmentByTag(v4_1.tag);
            if ((v4_1.fragment != null) && (!v4_1.fragment.isDetached())) {
                if (!v4_1.tag.equals(v1)) {
                    if (v2_1 == null) {
                        v2_1 = this.mFragmentManager.beginTransaction();
                    }
                    v2_1.detach(v4_1.fragment);
                } else {
                    this.mLastTab = v4_1;
                }
            }
            v3++;
        }
        this.mAttached = 1;
        android.support.v4.app.FragmentTransaction v2_0 = this.doTabChanged(v1, v2_1);
        if (v2_0 != null) {
            v2_0.commit();
            this.mFragmentManager.executePendingTransactions();
        }
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.mAttached = 0;
        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable p3)
    {
        if ((p3 instanceof android.support.v4.app.FragmentTabHost$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.app.FragmentTabHost$SavedState) p3).getSuperState());
            this.setCurrentTabByTag(((android.support.v4.app.FragmentTabHost$SavedState) p3).curTab);
        } else {
            super.onRestoreInstanceState(p3);
        }
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.app.FragmentTabHost$SavedState v0_1 = new android.support.v4.app.FragmentTabHost$SavedState(super.onSaveInstanceState());
        v0_1.curTab = this.getCurrentTabTag();
        return v0_1;
    }

    public void onTabChanged(String p3)
    {
        if (this.mAttached) {
            android.support.v4.app.FragmentTransaction v0 = this.doTabChanged(p3, 0);
            if (v0 != null) {
                v0.commit();
            }
        }
        if (this.mOnTabChangeListener != null) {
            this.mOnTabChangeListener.onTabChanged(p3);
        }
        return;
    }

    public void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener p1)
    {
        this.mOnTabChangeListener = p1;
        return;
    }

    public void setup()
    {
        throw new IllegalStateException("Must call setup() that takes a Context and FragmentManager");
    }

    public void setup(android.content.Context p1, android.support.v4.app.FragmentManager p2)
    {
        this.ensureHierarchy(p1);
        super.setup();
        this.mContext = p1;
        this.mFragmentManager = p2;
        this.ensureContent();
        return;
    }

    public void setup(android.content.Context p3, android.support.v4.app.FragmentManager p4, int p5)
    {
        this.ensureHierarchy(p3);
        super.setup();
        this.mContext = p3;
        this.mFragmentManager = p4;
        this.mContainerId = p5;
        this.ensureContent();
        this.mRealTabContent.setId(p5);
        if (this.getId() == -1) {
            this.setId(16908306);
        }
        return;
    }
}
package android.support.v4.app;
public abstract class FragmentTransaction {
    public static final int TRANSIT_ENTER_MASK = 4096;
    public static final int TRANSIT_EXIT_MASK = 8192;
    public static final int TRANSIT_FRAGMENT_CLOSE = 8194;
    public static final int TRANSIT_FRAGMENT_FADE = 4099;
    public static final int TRANSIT_FRAGMENT_OPEN = 4097;
    public static final int TRANSIT_NONE = 0;
    public static final int TRANSIT_UNSET = 255;

    public FragmentTransaction()
    {
        return;
    }

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction add();

    public abstract android.support.v4.app.FragmentTransaction addSharedElement();

    public abstract android.support.v4.app.FragmentTransaction addToBackStack();

    public abstract android.support.v4.app.FragmentTransaction attach();

    public abstract int commit();

    public abstract int commitAllowingStateLoss();

    public abstract void commitNow();

    public abstract void commitNowAllowingStateLoss();

    public abstract android.support.v4.app.FragmentTransaction detach();

    public abstract android.support.v4.app.FragmentTransaction disallowAddToBackStack();

    public abstract android.support.v4.app.FragmentTransaction hide();

    public abstract boolean isAddToBackStackAllowed();

    public abstract boolean isEmpty();

    public abstract android.support.v4.app.FragmentTransaction remove();

    public abstract android.support.v4.app.FragmentTransaction replace();

    public abstract android.support.v4.app.FragmentTransaction replace();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbTitle();

    public abstract android.support.v4.app.FragmentTransaction setBreadCrumbTitle();

    public abstract android.support.v4.app.FragmentTransaction setCustomAnimations();

    public abstract android.support.v4.app.FragmentTransaction setCustomAnimations();

    public abstract android.support.v4.app.FragmentTransaction setTransition();

    public abstract android.support.v4.app.FragmentTransaction setTransitionStyle();

    public abstract android.support.v4.app.FragmentTransaction show();
}
package android.support.v4.app;
final class FragmentTransitionCompat21$1 extends android.transition.Transition$EpicenterCallback {
    final synthetic android.graphics.Rect val$epicenter;

    FragmentTransitionCompat21$1(android.graphics.Rect p1)
    {
        this.val$epicenter = p1;
        return;
    }

    public android.graphics.Rect onGetEpicenter(android.transition.Transition p2)
    {
        return this.val$epicenter;
    }
}
package android.support.v4.app;
final class FragmentTransitionCompat21$2 implements android.view.ViewTreeObserver$OnPreDrawListener {
    final synthetic android.view.View val$container;
    final synthetic android.transition.Transition val$enterTransition;
    final synthetic java.util.ArrayList val$enteringViews;
    final synthetic android.transition.Transition val$exitTransition;
    final synthetic android.support.v4.app.FragmentTransitionCompat21$ViewRetriever val$inFragment;
    final synthetic java.util.Map val$nameOverrides;
    final synthetic android.view.View val$nonExistentView;
    final synthetic java.util.Map val$renamedViews;

    FragmentTransitionCompat21$2(android.view.View p1, android.transition.Transition p2, android.view.View p3, android.support.v4.app.FragmentTransitionCompat21$ViewRetriever p4, java.util.Map p5, java.util.Map p6, java.util.ArrayList p7, android.transition.Transition p8)
    {
        this.val$container = p1;
        this.val$enterTransition = p2;
        this.val$nonExistentView = p3;
        this.val$inFragment = p4;
        this.val$nameOverrides = p5;
        this.val$renamedViews = p6;
        this.val$enteringViews = p7;
        this.val$exitTransition = p8;
        return;
    }

    public boolean onPreDraw()
    {
        this.val$container.getViewTreeObserver().removeOnPreDrawListener(this);
        if (this.val$enterTransition != null) {
            this.val$enterTransition.removeTarget(this.val$nonExistentView);
        }
        if (this.val$inFragment != null) {
            android.view.View v1 = this.val$inFragment.getView();
            if (v1 != null) {
                if (!this.val$nameOverrides.isEmpty()) {
                    android.support.v4.app.FragmentTransitionCompat21.findNamedViews(this.val$renamedViews, v1);
                    this.val$renamedViews.keySet().retainAll(this.val$nameOverrides.values());
                    android.transition.Transition v5_11 = this.val$nameOverrides.entrySet().iterator();
                    while (v5_11.hasNext()) {
                        java.util.Map$Entry v0_1 = ((java.util.Map$Entry) v5_11.next());
                        android.view.View v4_1 = ((android.view.View) this.val$renamedViews.get(((String) v0_1.getValue())));
                        if (v4_1 != null) {
                            v4_1.setTransitionName(((String) v0_1.getKey()));
                        }
                    }
                }
                if (this.val$enterTransition != null) {
                    android.support.v4.app.FragmentTransitionCompat21.access$000(this.val$enteringViews, v1);
                    this.val$enteringViews.removeAll(this.val$renamedViews.values());
                    this.val$enteringViews.add(this.val$nonExistentView);
                    android.support.v4.app.FragmentTransitionCompat21.addTargets(this.val$enterTransition, this.val$enteringViews);
                }
            }
        }
        android.support.v4.app.FragmentTransitionCompat21.access$100(this.val$exitTransition, this.val$enterTransition, this.val$enteringViews, 1);
        return 1;
    }
}
package android.support.v4.app;
final class FragmentTransitionCompat21$3 extends android.transition.Transition$EpicenterCallback {
    private android.graphics.Rect mEpicenter;
    final synthetic android.support.v4.app.FragmentTransitionCompat21$EpicenterView val$epicenterView;

    FragmentTransitionCompat21$3(android.support.v4.app.FragmentTransitionCompat21$EpicenterView p1)
    {
        this.val$epicenterView = p1;
        return;
    }

    public android.graphics.Rect onGetEpicenter(android.transition.Transition p2)
    {
        if ((this.mEpicenter == null) && (this.val$epicenterView.epicenter != null)) {
            this.mEpicenter = android.support.v4.app.FragmentTransitionCompat21.access$200(this.val$epicenterView.epicenter);
        }
        return this.mEpicenter;
    }
}
package android.support.v4.app;
final class FragmentTransitionCompat21$4 implements android.view.ViewTreeObserver$OnPreDrawListener {
    final synthetic android.transition.Transition val$enterTransition;
    final synthetic java.util.ArrayList val$enteringViews;
    final synthetic android.transition.Transition val$exitTransition;
    final synthetic java.util.ArrayList val$exitingViews;
    final synthetic java.util.ArrayList val$hiddenViews;
    final synthetic android.view.View val$nonExistentView;
    final synthetic android.transition.Transition val$overallTransition;
    final synthetic java.util.Map val$renamedViews;
    final synthetic android.view.View val$sceneRoot;
    final synthetic java.util.ArrayList val$sharedElementTargets;
    final synthetic android.transition.Transition val$sharedElementTransition;

    FragmentTransitionCompat21$4(android.view.View p1, android.transition.Transition p2, java.util.ArrayList p3, android.transition.Transition p4, java.util.ArrayList p5, android.transition.Transition p6, java.util.ArrayList p7, java.util.Map p8, java.util.ArrayList p9, android.transition.Transition p10, android.view.View p11)
    {
        this.val$sceneRoot = p1;
        this.val$enterTransition = p2;
        this.val$enteringViews = p3;
        this.val$exitTransition = p4;
        this.val$exitingViews = p5;
        this.val$sharedElementTransition = p6;
        this.val$sharedElementTargets = p7;
        this.val$renamedViews = p8;
        this.val$hiddenViews = p9;
        this.val$overallTransition = p10;
        this.val$nonExistentView = p11;
        return;
    }

    public boolean onPreDraw()
    {
        this.val$sceneRoot.getViewTreeObserver().removeOnPreDrawListener(this);
        if (this.val$enterTransition != null) {
            android.support.v4.app.FragmentTransitionCompat21.removeTargets(this.val$enterTransition, this.val$enteringViews);
            android.support.v4.app.FragmentTransitionCompat21.access$100(this.val$enterTransition, this.val$exitTransition, this.val$exitingViews, 0);
            android.support.v4.app.FragmentTransitionCompat21.access$100(this.val$enterTransition, this.val$sharedElementTransition, this.val$sharedElementTargets, 0);
        }
        if (this.val$exitTransition != null) {
            android.support.v4.app.FragmentTransitionCompat21.removeTargets(this.val$exitTransition, this.val$exitingViews);
            android.support.v4.app.FragmentTransitionCompat21.access$100(this.val$exitTransition, this.val$enterTransition, this.val$enteringViews, 0);
            android.support.v4.app.FragmentTransitionCompat21.access$100(this.val$exitTransition, this.val$sharedElementTransition, this.val$sharedElementTargets, 0);
        }
        if (this.val$sharedElementTransition != null) {
            android.support.v4.app.FragmentTransitionCompat21.removeTargets(this.val$sharedElementTransition, this.val$sharedElementTargets);
        }
        int v5_12 = this.val$renamedViews.entrySet().iterator();
        while (v5_12.hasNext()) {
            java.util.Map$Entry v0_1 = ((java.util.Map$Entry) v5_12.next());
            ((android.view.View) v0_1.getValue()).setTransitionName(((String) v0_1.getKey()));
        }
        int v3 = this.val$hiddenViews.size();
        int v1 = 0;
        while (v1 < v3) {
            this.val$overallTransition.excludeTarget(((android.view.View) this.val$hiddenViews.get(v1)), 0);
            v1++;
        }
        this.val$overallTransition.excludeTarget(this.val$nonExistentView, 0);
        return 1;
    }
}
package android.support.v4.app;
public class FragmentTransitionCompat21$EpicenterView {
    public android.view.View epicenter;

    public FragmentTransitionCompat21$EpicenterView()
    {
        return;
    }
}
package android.support.v4.app;
public interface FragmentTransitionCompat21$ViewRetriever {

    public abstract android.view.View getView();
}
package android.support.v4.app;
 class FragmentTransitionCompat21 {

    FragmentTransitionCompat21()
    {
        return;
    }

    static synthetic void access$000(java.util.ArrayList p0, android.view.View p1)
    {
        android.support.v4.app.FragmentTransitionCompat21.captureTransitioningViews(p0, p1);
        return;
    }

    static synthetic void access$100(android.transition.Transition p0, android.transition.Transition p1, java.util.ArrayList p2, boolean p3)
    {
        android.support.v4.app.FragmentTransitionCompat21.excludeViews(p0, p1, p2, p3);
        return;
    }

    static synthetic android.graphics.Rect access$200(android.view.View p1)
    {
        return android.support.v4.app.FragmentTransitionCompat21.getBoundsOnScreen(p1);
    }

    public static void addTargets(Object p8, java.util.ArrayList p9)
    {
        if (!(((android.transition.Transition) p8) instanceof android.transition.TransitionSet)) {
            if ((!android.support.v4.app.FragmentTransitionCompat21.hasSimpleTarget(((android.transition.Transition) p8))) && (android.support.v4.app.FragmentTransitionCompat21.isNullOrEmpty(((android.transition.Transition) p8).getTargets()))) {
                int v3 = p9.size();
                int v1_0 = 0;
                while (v1_0 < v3) {
                    ((android.transition.Transition) p8).addTarget(((android.view.View) p9.get(v1_0)));
                    v1_0++;
                }
            }
        } else {
            int v2 = ((android.transition.TransitionSet) ((android.transition.Transition) p8)).getTransitionCount();
            int v1_1 = 0;
            while (v1_1 < v2) {
                android.support.v4.app.FragmentTransitionCompat21.addTargets(((android.transition.TransitionSet) ((android.transition.Transition) p8)).getTransitionAt(v1_1), p9);
                v1_1++;
            }
        }
        return;
    }

    public static void addTransitionTargets(Object p14, Object p15, Object p16, android.view.View p17, android.support.v4.app.FragmentTransitionCompat21$ViewRetriever p18, android.view.View p19, android.support.v4.app.FragmentTransitionCompat21$EpicenterView p20, java.util.Map p21, java.util.ArrayList p22, java.util.ArrayList p23, java.util.Map p24, java.util.Map p25, java.util.ArrayList p26)
    {
        android.support.v4.app.FragmentTransitionCompat21.excludeViews(((android.transition.Transition) p14), ((android.transition.Transition) p16), p23, 1);
        if ((p14 != null) || (p15 != null)) {
            if (((android.transition.Transition) p14) != null) {
                ((android.transition.Transition) p14).addTarget(p19);
            }
            if (p15 != null) {
                android.support.v4.app.FragmentTransitionCompat21.setSharedElementTargets(((android.transition.Transition) p15), p19, p24, p26);
                android.support.v4.app.FragmentTransitionCompat21.excludeViews(((android.transition.Transition) p14), ((android.transition.Transition) p15), p26, 1);
                android.support.v4.app.FragmentTransitionCompat21.excludeViews(((android.transition.Transition) p16), ((android.transition.Transition) p15), p26, 1);
            }
            p17.getViewTreeObserver().addOnPreDrawListener(new android.support.v4.app.FragmentTransitionCompat21$2(p17, ((android.transition.Transition) p14), p19, p18, p21, p25, p22, ((android.transition.Transition) p16)));
            android.support.v4.app.FragmentTransitionCompat21.setSharedElementEpicenter(((android.transition.Transition) p14), p20);
        }
        return;
    }

    public static void beginDelayedTransition(android.view.ViewGroup p1, Object p2)
    {
        android.transition.TransitionManager.beginDelayedTransition(p1, ((android.transition.Transition) p2));
        return;
    }

    private static void bfsAddViewChildren(java.util.List p8, android.view.View p9)
    {
        int v4 = p8.size();
        if (!android.support.v4.app.FragmentTransitionCompat21.containedBeforeIndex(p8, p9, v4)) {
            p8.add(p9);
            int v3 = v4;
            while (v3 < p8.size()) {
                android.view.View v5_1 = ((android.view.View) p8.get(v3));
                if ((v5_1 instanceof android.view.ViewGroup)) {
                    android.view.ViewGroup v6_1 = ((android.view.ViewGroup) v5_1);
                    int v1 = v6_1.getChildCount();
                    int v2 = 0;
                    while (v2 < v1) {
                        android.view.View v0 = v6_1.getChildAt(v2);
                        if (!android.support.v4.app.FragmentTransitionCompat21.containedBeforeIndex(p8, v0, v4)) {
                            p8.add(v0);
                        }
                        v2++;
                    }
                }
                v3++;
            }
        }
        return;
    }

    public static Object captureExitingViews(Object p1, android.view.View p2, java.util.ArrayList p3, java.util.Map p4, android.view.View p5)
    {
        if (p1 != 0) {
            android.support.v4.app.FragmentTransitionCompat21.captureTransitioningViews(p3, p2);
            if (p4 != null) {
                p3.removeAll(p4.values());
            }
            if (!p3.isEmpty()) {
                p3.add(p5);
                android.support.v4.app.FragmentTransitionCompat21.addTargets(((android.transition.Transition) p1), p3);
            } else {
                p1 = 0;
            }
        }
        return p1;
    }

    private static void captureTransitioningViews(java.util.ArrayList p5, android.view.View p6)
    {
        if (p6.getVisibility() == 0) {
            if (!(p6 instanceof android.view.ViewGroup)) {
                p5.add(p6);
            } else {
                if (!((android.view.ViewGroup) p6).isTransitionGroup()) {
                    int v1 = ((android.view.ViewGroup) p6).getChildCount();
                    int v2 = 0;
                    while (v2 < v1) {
                        android.support.v4.app.FragmentTransitionCompat21.captureTransitioningViews(p5, ((android.view.ViewGroup) p6).getChildAt(v2));
                        v2++;
                    }
                } else {
                    p5.add(((android.view.ViewGroup) p6));
                }
            }
        }
        return;
    }

    public static void cleanupTransitions(android.view.View p13, android.view.View p14, Object p15, java.util.ArrayList p16, Object p17, java.util.ArrayList p18, Object p19, java.util.ArrayList p20, Object p21, java.util.ArrayList p22, java.util.Map p23)
    {
        if (((android.transition.Transition) p21) != null) {
            p13.getViewTreeObserver().addOnPreDrawListener(new android.support.v4.app.FragmentTransitionCompat21$4(p13, ((android.transition.Transition) p15), p16, ((android.transition.Transition) p17), p18, ((android.transition.Transition) p19), p20, p23, p22, ((android.transition.Transition) p21), p14));
        }
        return;
    }

    public static Object cloneTransition(Object p0)
    {
        if (p0 != null) {
            p0 = ((android.transition.Transition) p0).clone();
        }
        return p0;
    }

    private static boolean containedBeforeIndex(java.util.List p2, android.view.View p3, int p4)
    {
        int v0 = 0;
        while (v0 < p4) {
            if (p2.get(v0) != p3) {
                v0++;
            } else {
                int v1_0 = 1;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    public static void excludeSharedElementViews(Object p3, Object p4, Object p5, java.util.ArrayList p6, boolean p7)
    {
        android.support.v4.app.FragmentTransitionCompat21.excludeViews(((android.transition.Transition) p3), ((android.transition.Transition) p5), p6, p7);
        android.support.v4.app.FragmentTransitionCompat21.excludeViews(((android.transition.Transition) p4), ((android.transition.Transition) p5), p6, p7);
        return;
    }

    public static void excludeTarget(Object p1, android.view.View p2, boolean p3)
    {
        ((android.transition.Transition) p1).excludeTarget(p2, p3);
        return;
    }

    private static void excludeViews(android.transition.Transition p3, android.transition.Transition p4, java.util.ArrayList p5, boolean p6)
    {
        if (p3 != null) {
            int v1;
            if (p4 != null) {
                v1 = p5.size();
            } else {
                v1 = 0;
            }
            int v0 = 0;
            while (v0 < v1) {
                p3.excludeTarget(((android.view.View) p5.get(v0)), p6);
                v0++;
            }
        }
        return;
    }

    public static void findNamedViews(java.util.Map p6, android.view.View p7)
    {
        if (p7.getVisibility() == 0) {
            String v3 = p7.getTransitionName();
            if (v3 != null) {
                p6.put(v3, p7);
            }
            if ((p7 instanceof android.view.ViewGroup)) {
                int v1 = ((android.view.ViewGroup) p7).getChildCount();
                int v2 = 0;
                while (v2 < v1) {
                    android.support.v4.app.FragmentTransitionCompat21.findNamedViews(p6, ((android.view.ViewGroup) p7).getChildAt(v2));
                    v2++;
                }
            }
        }
        return;
    }

    private static android.graphics.Rect getBoundsOnScreen(android.view.View p7)
    {
        android.graphics.Rect v0_1 = new android.graphics.Rect();
        int[] v1 = new int[2];
        p7.getLocationOnScreen(v1);
        v0_1.set(v1[0], v1[1], (v1[0] + p7.getWidth()), (v1[1] + p7.getHeight()));
        return v0_1;
    }

    public static String getTransitionName(android.view.View p1)
    {
        return p1.getTransitionName();
    }

    private static boolean hasSimpleTarget(android.transition.Transition p1)
    {
        if ((android.support.v4.app.FragmentTransitionCompat21.isNullOrEmpty(p1.getTargetIds())) && ((android.support.v4.app.FragmentTransitionCompat21.isNullOrEmpty(p1.getTargetNames())) && (android.support.v4.app.FragmentTransitionCompat21.isNullOrEmpty(p1.getTargetTypes())))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    private static boolean isNullOrEmpty(java.util.List p1)
    {
        if ((p1 != null) && (!p1.isEmpty())) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public static Object mergeTransitions(Object p10, Object p11, Object p12, boolean p13)
    {
        boolean v2 = 1;
        if ((((android.transition.Transition) p10) != null) && (((android.transition.Transition) p11) != null)) {
            v2 = p13;
        }
        android.transition.TransitionSet v6;
        if (!v2) {
            android.transition.Transition v4 = 0;
            if ((((android.transition.Transition) p11) == null) || (((android.transition.Transition) p10) == null)) {
                if (((android.transition.Transition) p11) == null) {
                    if (((android.transition.Transition) p10) != null) {
                        v4 = ((android.transition.Transition) p10);
                    }
                } else {
                    v4 = ((android.transition.Transition) p11);
                }
            } else {
                v4 = new android.transition.TransitionSet().addTransition(((android.transition.Transition) p11)).addTransition(((android.transition.Transition) p10)).setOrdering(1);
            }
            if (((android.transition.Transition) p12) == null) {
                v6 = v4;
            } else {
                android.transition.TransitionSet v5_1 = new android.transition.TransitionSet();
                if (v4 != null) {
                    v5_1.addTransition(v4);
                }
                v5_1.addTransition(((android.transition.Transition) p12));
                v6 = v5_1;
            }
        } else {
            android.transition.TransitionSet v7_1 = new android.transition.TransitionSet();
            if (((android.transition.Transition) p10) != null) {
                v7_1.addTransition(((android.transition.Transition) p10));
            }
            if (((android.transition.Transition) p11) != null) {
                v7_1.addTransition(((android.transition.Transition) p11));
            }
            if (((android.transition.Transition) p12) != null) {
                v7_1.addTransition(((android.transition.Transition) p12));
            }
            v6 = v7_1;
        }
        return v6;
    }

    public static void removeTargets(Object p8, java.util.ArrayList p9)
    {
        if (!(((android.transition.Transition) p8) instanceof android.transition.TransitionSet)) {
            if (!android.support.v4.app.FragmentTransitionCompat21.hasSimpleTarget(((android.transition.Transition) p8))) {
                java.util.List v4 = ((android.transition.Transition) p8).getTargets();
                if ((v4 != null) && ((v4.size() == p9.size()) && (v4.containsAll(p9)))) {
                    int v1_0 = (p9.size() - 1);
                    while (v1_0 >= 0) {
                        ((android.transition.Transition) p8).removeTarget(((android.view.View) p9.get(v1_0)));
                        v1_0--;
                    }
                }
            }
        } else {
            int v2 = ((android.transition.TransitionSet) ((android.transition.Transition) p8)).getTransitionCount();
            int v1_1 = 0;
            while (v1_1 < v2) {
                android.support.v4.app.FragmentTransitionCompat21.removeTargets(((android.transition.TransitionSet) ((android.transition.Transition) p8)).getTransitionAt(v1_1), p9);
                v1_1++;
            }
        }
        return;
    }

    public static void setEpicenter(Object p3, android.view.View p4)
    {
        ((android.transition.Transition) p3).setEpicenterCallback(new android.support.v4.app.FragmentTransitionCompat21$1(android.support.v4.app.FragmentTransitionCompat21.getBoundsOnScreen(p4)));
        return;
    }

    private static void setSharedElementEpicenter(android.transition.Transition p1, android.support.v4.app.FragmentTransitionCompat21$EpicenterView p2)
    {
        if (p1 != null) {
            p1.setEpicenterCallback(new android.support.v4.app.FragmentTransitionCompat21$3(p2));
        }
        return;
    }

    public static void setSharedElementTargets(Object p6, android.view.View p7, java.util.Map p8, java.util.ArrayList p9)
    {
        p9.clear();
        p9.addAll(p8.values());
        java.util.List v4 = ((android.transition.TransitionSet) p6).getTargets();
        v4.clear();
        int v0 = p9.size();
        int v1 = 0;
        while (v1 < v0) {
            android.support.v4.app.FragmentTransitionCompat21.bfsAddViewChildren(v4, ((android.view.View) p9.get(v1)));
            v1++;
        }
        p9.add(p7);
        android.support.v4.app.FragmentTransitionCompat21.addTargets(((android.transition.TransitionSet) p6), p9);
        return;
    }

    public static Object wrapSharedElementTransition(Object p2)
    {
        android.transition.TransitionSet v1_0 = 0;
        if ((p2 != null) && (((android.transition.Transition) p2) != null)) {
            v1_0 = new android.transition.TransitionSet();
            v1_0.addTransition(((android.transition.Transition) p2));
        }
        return v1_0;
    }
}
package android.support.v4.app;
public interface INotificationSideChannel implements android.os.IInterface {

    public abstract void cancel();

    public abstract void cancelAll();

    public abstract void notify();
}
package android.support.v4.app;
 class ListFragment$1 implements java.lang.Runnable {
    final synthetic android.support.v4.app.ListFragment this$0;

    ListFragment$1(android.support.v4.app.ListFragment p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.mList.focusableViewAvailable(this.this$0.mList);
        return;
    }
}
package android.support.v4.app;
 class ListFragment$2 implements android.widget.AdapterView$OnItemClickListener {
    final synthetic android.support.v4.app.ListFragment this$0;

    ListFragment$2(android.support.v4.app.ListFragment p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onItemClick(android.widget.AdapterView p7, android.view.View p8, int p9, long p10)
    {
        this.this$0.onListItemClick(((android.widget.ListView) p7), p8, p9, p10);
        return;
    }
}
package android.support.v4.app;
public interface LoaderManager$LoaderCallbacks {

    public abstract android.support.v4.content.Loader onCreateLoader();

    public abstract void onLoadFinished();

    public abstract void onLoaderReset();
}
package android.support.v4.app;
public abstract class LoaderManager {

    public LoaderManager()
    {
        return;
    }

    public static void enableDebugLogging(boolean p0)
    {
        android.support.v4.app.LoaderManagerImpl.DEBUG = p0;
        return;
    }

    public abstract void destroyLoader();

    public abstract void dump();

    public abstract android.support.v4.content.Loader getLoader();

    public boolean hasRunningLoaders()
    {
        return 0;
    }

    public abstract android.support.v4.content.Loader initLoader();

    public abstract android.support.v4.content.Loader restartLoader();
}
package android.support.v4.app;
interface NavUtils$NavUtilsImpl {

    public abstract android.content.Intent getParentActivityIntent();

    public abstract String getParentActivityName();

    public abstract void navigateUpTo();

    public abstract boolean shouldUpRecreateTask();
}
package android.support.v4.app;
public final class NavUtils {
    private static final android.support.v4.app.NavUtils$NavUtilsImpl IMPL = None;
    public static final String PARENT_ACTIVITY = "android.support.PARENT_ACTIVITY";
    private static final String TAG = "NavUtils";

    static NavUtils()
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            android.support.v4.app.NavUtils.IMPL = new android.support.v4.app.NavUtils$NavUtilsImplBase();
        } else {
            android.support.v4.app.NavUtils.IMPL = new android.support.v4.app.NavUtils$NavUtilsImplJB();
        }
        return;
    }

    private NavUtils()
    {
        return;
    }

    public static android.content.Intent getParentActivityIntent(android.app.Activity p1)
    {
        return android.support.v4.app.NavUtils.IMPL.getParentActivityIntent(p1);
    }

    public static android.content.Intent getParentActivityIntent(android.content.Context p5, android.content.ComponentName p6)
    {
        android.content.Intent v2;
        String v1 = android.support.v4.app.NavUtils.getParentActivityName(p5, p6);
        if (v1 != null) {
            android.content.ComponentName v3_1 = new android.content.ComponentName(p6.getPackageName(), v1);
            if (android.support.v4.app.NavUtils.getParentActivityName(p5, v3_1) != null) {
                v2 = new android.content.Intent().setComponent(v3_1);
            } else {
                v2 = android.support.v4.content.IntentCompat.makeMainActivity(v3_1);
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    public static android.content.Intent getParentActivityIntent(android.content.Context p5, Class p6)
    {
        android.content.Intent v2;
        String v1 = android.support.v4.app.NavUtils.getParentActivityName(p5, new android.content.ComponentName(p5, p6));
        if (v1 != null) {
            android.content.ComponentName v3_1 = new android.content.ComponentName(p5, v1);
            if (android.support.v4.app.NavUtils.getParentActivityName(p5, v3_1) != null) {
                v2 = new android.content.Intent().setComponent(v3_1);
            } else {
                v2 = android.support.v4.content.IntentCompat.makeMainActivity(v3_1);
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    public static String getParentActivityName(android.app.Activity p2)
    {
        try {
            return android.support.v4.app.NavUtils.getParentActivityName(p2, p2.getComponentName());
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            throw new IllegalArgumentException(v0);
        }
    }

    public static String getParentActivityName(android.content.Context p4, android.content.ComponentName p5)
    {
        return android.support.v4.app.NavUtils.IMPL.getParentActivityName(p4, p4.getPackageManager().getActivityInfo(p5, 128));
    }

    public static void navigateUpFromSameTask(android.app.Activity p4)
    {
        android.content.Intent v0 = android.support.v4.app.NavUtils.getParentActivityIntent(p4);
        if (v0 != null) {
            android.support.v4.app.NavUtils.navigateUpTo(p4, v0);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Activity ").append(p4.getClass().getSimpleName()).append(" does not have a parent activity name specified.").append(" (Did you forget to add the android.support.PARENT_ACTIVITY <meta-data> ").append(" element in your manifest?)").toString());
        }
    }

    public static void navigateUpTo(android.app.Activity p1, android.content.Intent p2)
    {
        android.support.v4.app.NavUtils.IMPL.navigateUpTo(p1, p2);
        return;
    }

    public static boolean shouldUpRecreateTask(android.app.Activity p1, android.content.Intent p2)
    {
        return android.support.v4.app.NavUtils.IMPL.shouldUpRecreateTask(p1, p2);
    }
}
package android.support.v4.app;
 class NavUtilsJB {

    NavUtilsJB()
    {
        return;
    }

    public static android.content.Intent getParentActivityIntent(android.app.Activity p1)
    {
        return p1.getParentActivityIntent();
    }

    public static String getParentActivityName(android.content.pm.ActivityInfo p1)
    {
        return p1.parentActivityName;
    }

    public static void navigateUpTo(android.app.Activity p0, android.content.Intent p1)
    {
        p0.navigateUpTo(p1);
        return;
    }

    public static boolean shouldUpRecreateTask(android.app.Activity p1, android.content.Intent p2)
    {
        return p1.shouldUpRecreateTask(p2);
    }
}
package android.support.v4.app;
 class NoSaveStateFrameLayout extends android.widget.FrameLayout {

    public NoSaveStateFrameLayout(android.content.Context p1)
    {
        super(p1);
        return;
    }

    static android.view.ViewGroup wrap(android.view.View p5)
    {
        android.support.v4.app.NoSaveStateFrameLayout v2_1 = new android.support.v4.app.NoSaveStateFrameLayout(p5.getContext());
        android.view.ViewGroup$LayoutParams v0 = p5.getLayoutParams();
        if (v0 != null) {
            v2_1.setLayoutParams(v0);
        }
        p5.setLayoutParams(new android.widget.FrameLayout$LayoutParams(-1, -1));
        v2_1.addView(p5);
        return v2_1;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray p1)
    {
        this.dispatchThawSelfOnly(p1);
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray p1)
    {
        this.dispatchFreezeSelfOnly(p1);
        return;
    }
}
package android.support.v4.app;
interface NotificationBuilderWithActions {

    public abstract void addAction();
}
package android.support.v4.app;
public interface NotificationBuilderWithBuilderAccessor {

    public abstract android.app.Notification build();

    public abstract android.app.Notification$Builder getBuilder();
}
package android.support.v4.app;
public final class NotificationCompat$Action$Builder {
    private boolean mAllowGeneratedReplies;
    private final android.os.Bundle mExtras;
    private final int mIcon;
    private final android.app.PendingIntent mIntent;
    private java.util.ArrayList mRemoteInputs;
    private final CharSequence mTitle;

    public NotificationCompat$Action$Builder(int p2, CharSequence p3, android.app.PendingIntent p4)
    {
        this(p2, p3, p4, new android.os.Bundle());
        return;
    }

    private NotificationCompat$Action$Builder(int p2, CharSequence p3, android.app.PendingIntent p4, android.os.Bundle p5)
    {
        this.mIcon = p2;
        this.mTitle = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p3);
        this.mIntent = p4;
        this.mExtras = p5;
        return;
    }

    public NotificationCompat$Action$Builder(android.support.v4.app.NotificationCompat$Action p6)
    {
        this(p6.icon, p6.title, p6.actionIntent, new android.os.Bundle(p6.mExtras));
        return;
    }

    public android.support.v4.app.NotificationCompat$Action$Builder addExtras(android.os.Bundle p2)
    {
        if (p2 != null) {
            this.mExtras.putAll(p2);
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$Builder addRemoteInput(android.support.v4.app.RemoteInput p2)
    {
        if (this.mRemoteInputs == null) {
            this.mRemoteInputs = new java.util.ArrayList();
        }
        this.mRemoteInputs.add(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action build()
    {
        int v5;
        if (this.mRemoteInputs == null) {
            v5 = 0;
        } else {
            int v1_3 = new android.support.v4.app.RemoteInput[this.mRemoteInputs.size()];
            v5 = ((android.support.v4.app.RemoteInput[]) this.mRemoteInputs.toArray(v1_3));
        }
        return new android.support.v4.app.NotificationCompat$Action(this.mIcon, this.mTitle, this.mIntent, this.mExtras, v5, this.mAllowGeneratedReplies);
    }

    public android.support.v4.app.NotificationCompat$Action$Builder extend(android.support.v4.app.NotificationCompat$Action$Extender p1)
    {
        p1.extend(this);
        return this;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public android.support.v4.app.NotificationCompat$Action$Builder setAllowGeneratedReplies(boolean p1)
    {
        this.mAllowGeneratedReplies = p1;
        return this;
    }
}
package android.support.v4.app;
public interface NotificationCompat$Action$Extender {

    public abstract android.support.v4.app.NotificationCompat$Action$Builder extend();
}
package android.support.v4.app;
public class NotificationCompat$Builder {
    private static final int MAX_CHARSEQUENCE_LENGTH = 5120;
    public java.util.ArrayList mActions;
    android.widget.RemoteViews mBigContentView;
    String mCategory;
    int mColor;
    public CharSequence mContentInfo;
    android.app.PendingIntent mContentIntent;
    public CharSequence mContentText;
    public CharSequence mContentTitle;
    android.widget.RemoteViews mContentView;
    public android.content.Context mContext;
    android.os.Bundle mExtras;
    android.app.PendingIntent mFullScreenIntent;
    String mGroupKey;
    boolean mGroupSummary;
    android.widget.RemoteViews mHeadsUpContentView;
    public android.graphics.Bitmap mLargeIcon;
    boolean mLocalOnly;
    public android.app.Notification mNotification;
    public int mNumber;
    public java.util.ArrayList mPeople;
    int mPriority;
    int mProgress;
    boolean mProgressIndeterminate;
    int mProgressMax;
    android.app.Notification mPublicVersion;
    public CharSequence[] mRemoteInputHistory;
    boolean mShowWhen;
    String mSortKey;
    public android.support.v4.app.NotificationCompat$Style mStyle;
    public CharSequence mSubText;
    android.widget.RemoteViews mTickerView;
    public boolean mUseChronometer;
    int mVisibility;

    public NotificationCompat$Builder(android.content.Context p6)
    {
        this.mShowWhen = 1;
        this.mActions = new java.util.ArrayList();
        this.mLocalOnly = 0;
        this.mColor = 0;
        this.mVisibility = 0;
        this.mNotification = new android.app.Notification();
        this.mContext = p6;
        this.mNotification.when = System.currentTimeMillis();
        this.mNotification.audioStreamType = -1;
        this.mPriority = 0;
        this.mPeople = new java.util.ArrayList();
        return;
    }

    protected static CharSequence limitCharSequenceLength(CharSequence p2)
    {
        if ((p2 != null) && (p2.length() > 5120)) {
            p2 = p2.subSequence(0, 5120);
        }
        return p2;
    }

    private void setFlag(int p4, boolean p5)
    {
        if (!p5) {
            android.app.Notification v0_0 = this.mNotification;
            v0_0.flags = (v0_0.flags & (p4 ^ -1));
        } else {
            android.app.Notification v0_1 = this.mNotification;
            v0_1.flags = (v0_1.flags | p4);
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$Builder addAction(int p3, CharSequence p4, android.app.PendingIntent p5)
    {
        this.mActions.add(new android.support.v4.app.NotificationCompat$Action(p3, p4, p5));
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder addAction(android.support.v4.app.NotificationCompat$Action p2)
    {
        this.mActions.add(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder addExtras(android.os.Bundle p2)
    {
        if (p2 != null) {
            if (this.mExtras != null) {
                this.mExtras.putAll(p2);
            } else {
                this.mExtras = new android.os.Bundle(p2);
            }
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder addPerson(String p2)
    {
        this.mPeople.add(p2);
        return this;
    }

    public android.app.Notification build()
    {
        return android.support.v4.app.NotificationCompat.IMPL.build(this, this.getExtender());
    }

    public android.support.v4.app.NotificationCompat$Builder extend(android.support.v4.app.NotificationCompat$Extender p1)
    {
        p1.extend(this);
        return this;
    }

    public android.widget.RemoteViews getBigContentView()
    {
        return this.mBigContentView;
    }

    public int getColor()
    {
        return this.mColor;
    }

    public android.widget.RemoteViews getContentView()
    {
        return this.mContentView;
    }

    protected android.support.v4.app.NotificationCompat$BuilderExtender getExtender()
    {
        return new android.support.v4.app.NotificationCompat$BuilderExtender();
    }

    public android.os.Bundle getExtras()
    {
        if (this.mExtras == null) {
            this.mExtras = new android.os.Bundle();
        }
        return this.mExtras;
    }

    public android.widget.RemoteViews getHeadsUpContentView()
    {
        return this.mHeadsUpContentView;
    }

    public android.app.Notification getNotification()
    {
        return this.build();
    }

    public int getPriority()
    {
        return this.mPriority;
    }

    public long getWhenIfShowing()
    {
        long v0_1;
        if (!this.mShowWhen) {
            v0_1 = 0;
        } else {
            v0_1 = this.mNotification.when;
        }
        return v0_1;
    }

    protected CharSequence resolveText()
    {
        return this.mContentText;
    }

    protected CharSequence resolveTitle()
    {
        return this.mContentTitle;
    }

    public android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean p2)
    {
        this.setFlag(16, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setCategory(String p1)
    {
        this.mCategory = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setColor(int p1)
    {
        this.mColor = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContent(android.widget.RemoteViews p2)
    {
        this.mNotification.contentView = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentInfo(CharSequence p2)
    {
        this.mContentInfo = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent p1)
    {
        this.mContentIntent = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentText(CharSequence p2)
    {
        this.mContentText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setContentTitle(CharSequence p2)
    {
        this.mContentTitle = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setCustomBigContentView(android.widget.RemoteViews p1)
    {
        this.mBigContentView = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setCustomContentView(android.widget.RemoteViews p1)
    {
        this.mContentView = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setCustomHeadsUpContentView(android.widget.RemoteViews p1)
    {
        this.mHeadsUpContentView = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setDefaults(int p3)
    {
        this.mNotification.defaults = p3;
        if ((p3 & 4) != 0) {
            android.app.Notification v0_2 = this.mNotification;
            v0_2.flags = (v0_2.flags | 1);
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent p2)
    {
        this.mNotification.deleteIntent = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setExtras(android.os.Bundle p1)
    {
        this.mExtras = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent p2, boolean p3)
    {
        this.mFullScreenIntent = p2;
        this.setFlag(128, p3);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setGroup(String p1)
    {
        this.mGroupKey = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setGroupSummary(boolean p1)
    {
        this.mGroupSummary = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap p1)
    {
        this.mLargeIcon = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setLights(int p6, int p7, int p8)
    {
        int v0;
        int v1_0 = 1;
        this.mNotification.ledARGB = p6;
        this.mNotification.ledOnMS = p7;
        this.mNotification.ledOffMS = p8;
        if ((this.mNotification.ledOnMS == 0) || (this.mNotification.ledOffMS == 0)) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (v0 == 0) {
            v1_0 = 0;
        }
        this.mNotification.flags = (v1_0 | (this.mNotification.flags & -2));
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setLocalOnly(boolean p1)
    {
        this.mLocalOnly = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setNumber(int p1)
    {
        this.mNumber = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setOngoing(boolean p2)
    {
        this.setFlag(2, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean p2)
    {
        this.setFlag(8, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setPriority(int p1)
    {
        this.mPriority = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setProgress(int p1, int p2, boolean p3)
    {
        this.mProgressMax = p1;
        this.mProgress = p2;
        this.mProgressIndeterminate = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setPublicVersion(android.app.Notification p1)
    {
        this.mPublicVersion = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setRemoteInputHistory(CharSequence[] p1)
    {
        this.mRemoteInputHistory = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setShowWhen(boolean p1)
    {
        this.mShowWhen = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSmallIcon(int p2)
    {
        this.mNotification.icon = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSmallIcon(int p2, int p3)
    {
        this.mNotification.icon = p2;
        this.mNotification.iconLevel = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSortKey(String p1)
    {
        this.mSortKey = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri p3)
    {
        this.mNotification.sound = p3;
        this.mNotification.audioStreamType = -1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri p2, int p3)
    {
        this.mNotification.sound = p2;
        this.mNotification.audioStreamType = p3;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style p2)
    {
        if (this.mStyle != p2) {
            this.mStyle = p2;
            if (this.mStyle != null) {
                this.mStyle.setBuilder(this);
            }
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setSubText(CharSequence p2)
    {
        this.mSubText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setTicker(CharSequence p3)
    {
        this.mNotification.tickerText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p3);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setTicker(CharSequence p3, android.widget.RemoteViews p4)
    {
        this.mNotification.tickerText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p3);
        this.mTickerView = p4;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setUsesChronometer(boolean p1)
    {
        this.mUseChronometer = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setVibrate(long[] p2)
    {
        this.mNotification.vibrate = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setVisibility(int p1)
    {
        this.mVisibility = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Builder setWhen(long p2)
    {
        this.mNotification.when = p2;
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompat$BuilderExtender {

    protected NotificationCompat$BuilderExtender()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p3, android.support.v4.app.NotificationBuilderWithBuilderAccessor p4)
    {
        android.app.Notification v0 = p4.build();
        if (p3.mContentView != null) {
            v0.contentView = p3.mContentView;
        }
        return v0;
    }
}
package android.support.v4.app;
public class NotificationCompat$CarExtender$UnreadConversation$Builder {
    private long mLatestTimestamp;
    private final java.util.List mMessages;
    private final String mParticipant;
    private android.app.PendingIntent mReadPendingIntent;
    private android.support.v4.app.RemoteInput mRemoteInput;
    private android.app.PendingIntent mReplyPendingIntent;

    public NotificationCompat$CarExtender$UnreadConversation$Builder(String p2)
    {
        this.mMessages = new java.util.ArrayList();
        this.mParticipant = p2;
        return;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder addMessage(String p2)
    {
        this.mMessages.add(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation build()
    {
        android.support.v4.app.RemoteInput v2_4 = new String[this.mMessages.size()];
        String[] v1_1 = ((String[]) this.mMessages.toArray(v2_4));
        String[] v5 = new String[1];
        v5[0] = this.mParticipant;
        return new android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation(v1_1, this.mRemoteInput, this.mReplyPendingIntent, this.mReadPendingIntent, v5, this.mLatestTimestamp);
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setLatestTimestamp(long p2)
    {
        this.mLatestTimestamp = p2;
        return this;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReadPendingIntent(android.app.PendingIntent p1)
    {
        this.mReadPendingIntent = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReplyAction(android.app.PendingIntent p1, android.support.v4.app.RemoteInput p2)
    {
        this.mRemoteInput = p2;
        this.mReplyPendingIntent = p1;
        return this;
    }
}
package android.support.v4.app;
public interface NotificationCompat$Extender {

    public abstract android.support.v4.app.NotificationCompat$Builder extend();
}
package android.support.v4.app;
public final class NotificationCompat$MessagingStyle$Message {
    static final String KEY_DATA_MIME_TYPE = "type";
    static final String KEY_DATA_URI = "uri";
    static final String KEY_SENDER = "sender";
    static final String KEY_TEXT = "text";
    static final String KEY_TIMESTAMP = "time";
    private String mDataMimeType;
    private android.net.Uri mDataUri;
    private final CharSequence mSender;
    private final CharSequence mText;
    private final long mTimestamp;

    public NotificationCompat$MessagingStyle$Message(CharSequence p1, long p2, CharSequence p4)
    {
        this.mText = p1;
        this.mTimestamp = p2;
        this.mSender = p4;
        return;
    }

    static android.os.Bundle[] getBundleArrayForMessages(java.util.List p4)
    {
        android.os.Bundle[] v1 = new android.os.Bundle[p4.size()];
        int v0 = p4.size();
        int v2 = 0;
        while (v2 < v0) {
            v1[v2] = ((android.support.v4.app.NotificationCompat$MessagingStyle$Message) p4.get(v2)).toBundle();
            v2++;
        }
        return v1;
    }

    static android.support.v4.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle p7)
    {
        try {
            if ((p7.containsKey("text")) && (p7.containsKey("time"))) {
                android.support.v4.app.NotificationCompat$MessagingStyle$Message v1_0 = new android.support.v4.app.NotificationCompat$MessagingStyle$Message(p7.getCharSequence("text"), p7.getLong("time"), p7.getCharSequence("sender"));
                if ((p7.containsKey("type")) && (p7.containsKey("uri"))) {
                    v1_0.setData(p7.getString("type"), ((android.net.Uri) p7.getParcelable("uri")));
                }
            } else {
                v1_0 = 0;
            }
        } catch (ClassCastException v0) {
            v1_0 = 0;
        }
        return v1_0;
    }

    static java.util.List getMessagesFromBundleArray(android.os.Parcelable[] p4)
    {
        java.util.ArrayList v2_1 = new java.util.ArrayList(p4.length);
        int v0 = 0;
        while (v0 < p4.length) {
            if ((p4[v0] instanceof android.os.Bundle)) {
                android.support.v4.app.NotificationCompat$MessagingStyle$Message v1 = android.support.v4.app.NotificationCompat$MessagingStyle$Message.getMessageFromBundle(((android.os.Bundle) p4[v0]));
                if (v1 != null) {
                    v2_1.add(v1);
                }
            }
            v0++;
        }
        return v2_1;
    }

    private android.os.Bundle toBundle()
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        if (this.mText != null) {
            v0_1.putCharSequence("text", this.mText);
        }
        v0_1.putLong("time", this.mTimestamp);
        if (this.mSender != null) {
            v0_1.putCharSequence("sender", this.mSender);
        }
        if (this.mDataMimeType != null) {
            v0_1.putString("type", this.mDataMimeType);
        }
        if (this.mDataUri != null) {
            v0_1.putParcelable("uri", this.mDataUri);
        }
        return v0_1;
    }

    public String getDataMimeType()
    {
        return this.mDataMimeType;
    }

    public android.net.Uri getDataUri()
    {
        return this.mDataUri;
    }

    public CharSequence getSender()
    {
        return this.mSender;
    }

    public CharSequence getText()
    {
        return this.mText;
    }

    public long getTimestamp()
    {
        return this.mTimestamp;
    }

    public android.support.v4.app.NotificationCompat$MessagingStyle$Message setData(String p1, android.net.Uri p2)
    {
        this.mDataMimeType = p1;
        this.mDataUri = p2;
        return this;
    }
}
package android.support.v4.app;
interface NotificationCompat$NotificationCompatImpl {

    public abstract android.app.Notification build();

    public abstract android.support.v4.app.NotificationCompat$Action getAction();

    public abstract int getActionCount();

    public abstract android.support.v4.app.NotificationCompat$Action[] getActionsFromParcelableArrayList();

    public abstract android.os.Bundle getBundleForUnreadConversation();

    public abstract String getCategory();

    public abstract android.os.Bundle getExtras();

    public abstract String getGroup();

    public abstract boolean getLocalOnly();

    public abstract java.util.ArrayList getParcelableArrayListForActions();

    public abstract String getSortKey();

    public abstract android.support.v4.app.NotificationCompatBase$UnreadConversation getUnreadConversationFromBundle();

    public abstract boolean isGroupSummary();
}
package android.support.v4.app;
public abstract class NotificationCompat$Style {
    CharSequence mBigContentTitle;
    android.support.v4.app.NotificationCompat$Builder mBuilder;
    CharSequence mSummaryText;
    boolean mSummaryTextSet;

    public NotificationCompat$Style()
    {
        this.mSummaryTextSet = 0;
        return;
    }

    public void addCompatExtras(android.os.Bundle p1)
    {
        return;
    }

    public android.app.Notification build()
    {
        android.app.Notification v0 = 0;
        if (this.mBuilder != null) {
            v0 = this.mBuilder.build();
        }
        return v0;
    }

    protected void restoreFromCompatExtras(android.os.Bundle p1)
    {
        return;
    }

    public void setBuilder(android.support.v4.app.NotificationCompat$Builder p2)
    {
        if (this.mBuilder != p2) {
            this.mBuilder = p2;
            if (this.mBuilder != null) {
                this.mBuilder.setStyle(this);
            }
        }
        return;
    }
}
package android.support.v4.app;
public class NotificationCompat {
    public static final String CATEGORY_ALARM = "alarm";
    public static final String CATEGORY_CALL = "call";
    public static final String CATEGORY_EMAIL = "email";
    public static final String CATEGORY_ERROR = "err";
    public static final String CATEGORY_EVENT = "event";
    public static final String CATEGORY_MESSAGE = "msg";
    public static final String CATEGORY_PROGRESS = "progress";
    public static final String CATEGORY_PROMO = "promo";
    public static final String CATEGORY_RECOMMENDATION = "recommendation";
    public static final String CATEGORY_REMINDER = "reminder";
    public static final String CATEGORY_SERVICE = "service";
    public static final String CATEGORY_SOCIAL = "social";
    public static final String CATEGORY_STATUS = "status";
    public static final String CATEGORY_SYSTEM = "sys";
    public static final String CATEGORY_TRANSPORT = "transport";
    public static final int COLOR_DEFAULT = 0;
    public static final int DEFAULT_ALL = 255;
    public static final int DEFAULT_LIGHTS = 4;
    public static final int DEFAULT_SOUND = 1;
    public static final int DEFAULT_VIBRATE = 2;
    public static final String EXTRA_BACKGROUND_IMAGE_URI = "android.backgroundImageUri";
    public static final String EXTRA_BIG_TEXT = "android.bigText";
    public static final String EXTRA_COMPACT_ACTIONS = "android.compactActions";
    public static final String EXTRA_CONVERSATION_TITLE = "android.conversationTitle";
    public static final String EXTRA_INFO_TEXT = "android.infoText";
    public static final String EXTRA_LARGE_ICON = "android.largeIcon";
    public static final String EXTRA_LARGE_ICON_BIG = "android.largeIcon.big";
    public static final String EXTRA_MEDIA_SESSION = "android.mediaSession";
    public static final String EXTRA_MESSAGES = "android.messages";
    public static final String EXTRA_PEOPLE = "android.people";
    public static final String EXTRA_PICTURE = "android.picture";
    public static final String EXTRA_PROGRESS = "android.progress";
    public static final String EXTRA_PROGRESS_INDETERMINATE = "android.progressIndeterminate";
    public static final String EXTRA_PROGRESS_MAX = "android.progressMax";
    public static final String EXTRA_REMOTE_INPUT_HISTORY = "android.remoteInputHistory";
    public static final String EXTRA_SELF_DISPLAY_NAME = "android.selfDisplayName";
    public static final String EXTRA_SHOW_CHRONOMETER = "android.showChronometer";
    public static final String EXTRA_SHOW_WHEN = "android.showWhen";
    public static final String EXTRA_SMALL_ICON = "android.icon";
    public static final String EXTRA_SUB_TEXT = "android.subText";
    public static final String EXTRA_SUMMARY_TEXT = "android.summaryText";
    public static final String EXTRA_TEMPLATE = "android.template";
    public static final String EXTRA_TEXT = "android.text";
    public static final String EXTRA_TEXT_LINES = "android.textLines";
    public static final String EXTRA_TITLE = "android.title";
    public static final String EXTRA_TITLE_BIG = "android.title.big";
    public static final int FLAG_AUTO_CANCEL = 16;
    public static final int FLAG_FOREGROUND_SERVICE = 64;
    public static final int FLAG_GROUP_SUMMARY = 512;
    public static final int FLAG_HIGH_PRIORITY = 128;
    public static final int FLAG_INSISTENT = 4;
    public static final int FLAG_LOCAL_ONLY = 256;
    public static final int FLAG_NO_CLEAR = 32;
    public static final int FLAG_ONGOING_EVENT = 2;
    public static final int FLAG_ONLY_ALERT_ONCE = 8;
    public static final int FLAG_SHOW_LIGHTS = 1;
    static final android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL = None;
    public static final int PRIORITY_DEFAULT = 0;
    public static final int PRIORITY_HIGH = 1;
    public static final int PRIORITY_LOW = 255;
    public static final int PRIORITY_MAX = 2;
    public static final int PRIORITY_MIN = 254;
    public static final int STREAM_DEFAULT = 255;
    public static final int VISIBILITY_PRIVATE = 0;
    public static final int VISIBILITY_PUBLIC = 1;
    public static final int VISIBILITY_SECRET = 255;

    static NotificationCompat()
    {
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            if (android.os.Build$VERSION.SDK_INT < 21) {
                if (android.os.Build$VERSION.SDK_INT < 20) {
                    if (android.os.Build$VERSION.SDK_INT < 19) {
                        if (android.os.Build$VERSION.SDK_INT < 16) {
                            if (android.os.Build$VERSION.SDK_INT < 14) {
                                if (android.os.Build$VERSION.SDK_INT < 11) {
                                    android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplBase();
                                } else {
                                    android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb();
                                }
                            } else {
                                android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich();
                            }
                        } else {
                            android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean();
                        }
                    } else {
                        android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplKitKat();
                    }
                } else {
                    android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplApi20();
                }
            } else {
                android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplApi21();
            }
        } else {
            android.support.v4.app.NotificationCompat.IMPL = new android.support.v4.app.NotificationCompat$NotificationCompatImplApi24();
        }
        return;
    }

    public NotificationCompat()
    {
        return;
    }

    static void addActionsToBuilder(android.support.v4.app.NotificationBuilderWithActions p3, java.util.ArrayList p4)
    {
        java.util.Iterator v1 = p4.iterator();
        while (v1.hasNext()) {
            p3.addAction(((android.support.v4.app.NotificationCompat$Action) v1.next()));
        }
        return;
    }

    static void addStyleToBuilderApi24(android.support.v4.app.NotificationBuilderWithBuilderAccessor p12, android.support.v4.app.NotificationCompat$Style p13)
    {
        if (p13 != null) {
            if (!(p13 instanceof android.support.v4.app.NotificationCompat$MessagingStyle)) {
                android.support.v4.app.NotificationCompat.addStyleToBuilderJellybean(p12, p13);
            } else {
                java.util.ArrayList v3_1 = new java.util.ArrayList();
                java.util.ArrayList v4_1 = new java.util.ArrayList();
                java.util.ArrayList v5_1 = new java.util.ArrayList();
                java.util.ArrayList v6_1 = new java.util.ArrayList();
                java.util.ArrayList v7_1 = new java.util.ArrayList();
                android.support.v4.app.NotificationBuilderWithBuilderAccessor v0_2 = ((android.support.v4.app.NotificationCompat$MessagingStyle) p13).mMessages.iterator();
                while (v0_2.hasNext()) {
                    android.support.v4.app.NotificationCompat$MessagingStyle$Message v8_1 = ((android.support.v4.app.NotificationCompat$MessagingStyle$Message) v0_2.next());
                    v3_1.add(v8_1.getText());
                    v4_1.add(Long.valueOf(v8_1.getTimestamp()));
                    v5_1.add(v8_1.getSender());
                    v6_1.add(v8_1.getDataMimeType());
                    v7_1.add(v8_1.getDataUri());
                }
                android.support.v4.app.NotificationCompatApi24.addMessagingStyle(p12, ((android.support.v4.app.NotificationCompat$MessagingStyle) p13).mUserDisplayName, ((android.support.v4.app.NotificationCompat$MessagingStyle) p13).mConversationTitle, v3_1, v4_1, v5_1, v6_1, v7_1);
            }
        }
        return;
    }

    static void addStyleToBuilderJellybean(android.support.v4.app.NotificationBuilderWithBuilderAccessor p10, android.support.v4.app.NotificationCompat$Style p11)
    {
        if (p11 != null) {
            if (!(p11 instanceof android.support.v4.app.NotificationCompat$BigTextStyle)) {
                if (!(p11 instanceof android.support.v4.app.NotificationCompat$InboxStyle)) {
                    if ((p11 instanceof android.support.v4.app.NotificationCompat$BigPictureStyle)) {
                        android.support.v4.app.NotificationCompatJellybean.addBigPictureStyle(p10, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mBigContentTitle, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mSummaryTextSet, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mSummaryText, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mPicture, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mBigLargeIcon, ((android.support.v4.app.NotificationCompat$BigPictureStyle) p11).mBigLargeIconSet);
                    }
                } else {
                    android.support.v4.app.NotificationCompatJellybean.addInboxStyle(p10, ((android.support.v4.app.NotificationCompat$InboxStyle) p11).mBigContentTitle, ((android.support.v4.app.NotificationCompat$InboxStyle) p11).mSummaryTextSet, ((android.support.v4.app.NotificationCompat$InboxStyle) p11).mSummaryText, ((android.support.v4.app.NotificationCompat$InboxStyle) p11).mTexts);
                }
            } else {
                android.support.v4.app.NotificationCompatJellybean.addBigTextStyle(p10, ((android.support.v4.app.NotificationCompat$BigTextStyle) p11).mBigContentTitle, ((android.support.v4.app.NotificationCompat$BigTextStyle) p11).mSummaryTextSet, ((android.support.v4.app.NotificationCompat$BigTextStyle) p11).mSummaryText, ((android.support.v4.app.NotificationCompat$BigTextStyle) p11).mBigText);
            }
        }
        return;
    }

    public static android.support.v4.app.NotificationCompat$Action getAction(android.app.Notification p1, int p2)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getAction(p1, p2);
    }

    public static int getActionCount(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getActionCount(p1);
    }

    public static String getCategory(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getCategory(p1);
    }

    public static android.os.Bundle getExtras(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getExtras(p1);
    }

    public static String getGroup(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getGroup(p1);
    }

    public static boolean getLocalOnly(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getLocalOnly(p1);
    }

    static android.app.Notification[] getNotificationArrayFromBundle(android.os.Bundle p4, String p5)
    {
        android.app.Notification[] v2;
        android.app.Notification[] v0_0 = p4.getParcelableArray(p5);
        if ((!(v0_0 instanceof android.app.Notification[])) && (v0_0 != null)) {
            v2 = new android.app.Notification[v0_0.length];
            int v1 = 0;
            while (v1 < v0_0.length) {
                v2[v1] = ((android.app.Notification) v0_0[v1]);
                v1++;
            }
            p4.putParcelableArray(p5, v2);
        } else {
            v2 = ((android.app.Notification[]) ((android.app.Notification[]) v0_0));
        }
        return v2;
    }

    public static String getSortKey(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.getSortKey(p1);
    }

    public static boolean isGroupSummary(android.app.Notification p1)
    {
        return android.support.v4.app.NotificationCompat.IMPL.isGroupSummary(p1);
    }
}
package android.support.v4.app;
 class NotificationCompatApi20 {

    NotificationCompatApi20()
    {
        return;
    }

    public static void addAction(android.app.Notification$Builder p6, android.support.v4.app.NotificationCompatBase$Action p7)
    {
        android.app.Notification$Action$Builder v0_1 = new android.app.Notification$Action$Builder(p7.getIcon(), p7.getTitle(), p7.getActionIntent());
        if (p7.getRemoteInputs() != null) {
            boolean v4_0 = android.support.v4.app.RemoteInputCompatApi20.fromCompat(p7.getRemoteInputs());
            int v5_0 = v4_0.length;
            android.app.Notification$Action v3_1 = 0;
            while (v3_1 < v5_0) {
                v0_1.addRemoteInput(v4_0[v3_1]);
                v3_1++;
            }
        }
        android.os.Bundle v1_1;
        if (p7.getExtras() == null) {
            v1_1 = new android.os.Bundle();
        } else {
            v1_1 = new android.os.Bundle(p7.getExtras());
        }
        v1_1.putBoolean("android.support.allowGeneratedReplies", p7.getAllowGeneratedReplies());
        v0_1.addExtras(v1_1);
        p6.addAction(v0_1.build());
        return;
    }

    public static android.support.v4.app.NotificationCompatBase$Action getAction(android.app.Notification p1, int p2, android.support.v4.app.NotificationCompatBase$Action$Factory p3, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p4)
    {
        return android.support.v4.app.NotificationCompatApi20.getActionCompatFromAction(p1.actions[p2], p3, p4);
    }

    private static android.support.v4.app.NotificationCompatBase$Action getActionCompatFromAction(android.app.Notification$Action p7, android.support.v4.app.NotificationCompatBase$Action$Factory p8, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p9)
    {
        return p8.build(p7.icon, p7.title, p7.actionIntent, p7.getExtras(), android.support.v4.app.RemoteInputCompatApi20.toCompat(p7.getRemoteInputs(), p9), p7.getExtras().getBoolean("android.support.allowGeneratedReplies"));
    }

    private static android.app.Notification$Action getActionFromActionCompat(android.support.v4.app.NotificationCompatBase$Action p8)
    {
        android.app.Notification$Action$Builder v0 = new android.app.Notification$Action$Builder(p8.getIcon(), p8.getTitle(), p8.getActionIntent()).addExtras(p8.getExtras());
        android.support.v4.app.RemoteInputCompatBase$RemoteInput[] v2 = p8.getRemoteInputs();
        if (v2 != null) {
            android.app.RemoteInput[] v3 = android.support.v4.app.RemoteInputCompatApi20.fromCompat(v2);
            int v5_0 = v3.length;
            int v4_1 = 0;
            while (v4_1 < v5_0) {
                v0.addRemoteInput(v3[v4_1]);
                v4_1++;
            }
        }
        return v0.build();
    }

    public static android.support.v4.app.NotificationCompatBase$Action[] getActionsFromParcelableArrayList(java.util.ArrayList p4, android.support.v4.app.NotificationCompatBase$Action$Factory p5, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p6)
    {
        android.support.v4.app.NotificationCompatBase$Action[] v1;
        if (p4 != null) {
            v1 = p5.newArray(p4.size());
            int v2 = 0;
            while (v2 < v1.length) {
                v1[v2] = android.support.v4.app.NotificationCompatApi20.getActionCompatFromAction(((android.app.Notification$Action) p4.get(v2)), p5, p6);
                v2++;
            }
        } else {
            v1 = 0;
        }
        return v1;
    }

    public static String getGroup(android.app.Notification p1)
    {
        return p1.getGroup();
    }

    public static boolean getLocalOnly(android.app.Notification p1)
    {
        int v0_2;
        if ((p1.flags & 256) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public static java.util.ArrayList getParcelableArrayListForActions(android.support.v4.app.NotificationCompatBase$Action[] p5)
    {
        java.util.ArrayList v1_1;
        if (p5 != null) {
            v1_1 = new java.util.ArrayList(p5.length);
            int v3 = p5.length;
            int v2_0 = 0;
            while (v2_0 < v3) {
                v1_1.add(android.support.v4.app.NotificationCompatApi20.getActionFromActionCompat(p5[v2_0]));
                v2_0++;
            }
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public static String getSortKey(android.app.Notification p1)
    {
        return p1.getSortKey();
    }

    public static boolean isGroupSummary(android.app.Notification p1)
    {
        int v0_2;
        if ((p1.flags & 512) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }
}
package android.support.v4.app;
 class NotificationCompatApi21 {
    public static final String CATEGORY_ALARM = "alarm";
    public static final String CATEGORY_CALL = "call";
    public static final String CATEGORY_EMAIL = "email";
    public static final String CATEGORY_ERROR = "err";
    public static final String CATEGORY_EVENT = "event";
    public static final String CATEGORY_MESSAGE = "msg";
    public static final String CATEGORY_PROGRESS = "progress";
    public static final String CATEGORY_PROMO = "promo";
    public static final String CATEGORY_RECOMMENDATION = "recommendation";
    public static final String CATEGORY_SERVICE = "service";
    public static final String CATEGORY_SOCIAL = "social";
    public static final String CATEGORY_STATUS = "status";
    public static final String CATEGORY_SYSTEM = "sys";
    public static final String CATEGORY_TRANSPORT = "transport";
    private static final String KEY_AUTHOR = "author";
    private static final String KEY_MESSAGES = "messages";
    private static final String KEY_ON_READ = "on_read";
    private static final String KEY_ON_REPLY = "on_reply";
    private static final String KEY_PARTICIPANTS = "participants";
    private static final String KEY_REMOTE_INPUT = "remote_input";
    private static final String KEY_TEXT = "text";
    private static final String KEY_TIMESTAMP = "timestamp";

    NotificationCompatApi21()
    {
        return;
    }

    private static android.app.RemoteInput fromCompatRemoteInput(android.support.v4.app.RemoteInputCompatBase$RemoteInput p2)
    {
        return new android.app.RemoteInput$Builder(p2.getResultKey()).setLabel(p2.getLabel()).setChoices(p2.getChoices()).setAllowFreeFormInput(p2.getAllowFreeFormInput()).addExtras(p2.getExtras()).build();
    }

    static android.os.Bundle getBundleForUnreadConversation(android.support.v4.app.NotificationCompatBase$UnreadConversation p10)
    {
        android.os.Bundle v1_1;
        if (p10 != null) {
            v1_1 = new android.os.Bundle();
            String v0 = 0;
            if ((p10.getParticipants() != null) && (p10.getParticipants().length > 1)) {
                v0 = p10.getParticipants()[0];
            }
            android.os.Parcelable[] v4 = new android.os.Parcelable[p10.getMessages().length];
            int v2 = 0;
            while (v2 < v4.length) {
                android.os.Bundle v3_1 = new android.os.Bundle();
                v3_1.putString("text", p10.getMessages()[v2]);
                v3_1.putString("author", v0);
                v4[v2] = v3_1;
                v2++;
            }
            v1_1.putParcelableArray("messages", v4);
            android.support.v4.app.RemoteInputCompatBase$RemoteInput v5 = p10.getRemoteInput();
            if (v5 != null) {
                v1_1.putParcelable("remote_input", android.support.v4.app.NotificationCompatApi21.fromCompatRemoteInput(v5));
            }
            v1_1.putParcelable("on_reply", p10.getReplyPendingIntent());
            v1_1.putParcelable("on_read", p10.getReadPendingIntent());
            v1_1.putStringArray("participants", p10.getParticipants());
            v1_1.putLong("timestamp", p10.getLatestTimestamp());
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public static String getCategory(android.app.Notification p1)
    {
        return p1.category;
    }

    static android.support.v4.app.NotificationCompatBase$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle p13, android.support.v4.app.NotificationCompatBase$UnreadConversation$Factory p14, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p15)
    {
        android.support.v4.app.NotificationCompatBase$UnreadConversation v2 = 0;
        if (p13 != null) {
            android.os.Parcelable[] v9 = p13.getParcelableArray("messages");
            String[] v1 = 0;
            if (v9 != null) {
                String[] v12 = new String[v9.length];
                int v11 = 1;
                int v8 = 0;
                while (v8 < v12.length) {
                    if ((v9[v8] instanceof android.os.Bundle)) {
                        v12[v8] = ((android.os.Bundle) v9[v8]).getString("text");
                        if (v12[v8] != null) {
                            v8++;
                        } else {
                            v11 = 0;
                            break;
                        }
                    } else {
                        v11 = 0;
                        break;
                    }
                }
                if (v11 == 0) {
                    return v2;
                } else {
                    v1 = v12;
                }
            }
            android.app.PendingIntent v4_1 = ((android.app.PendingIntent) p13.getParcelable("on_read"));
            android.app.PendingIntent v3_1 = ((android.app.PendingIntent) p13.getParcelable("on_reply"));
            android.app.RemoteInput v10_1 = ((android.app.RemoteInput) p13.getParcelable("remote_input"));
            String[] v5 = p13.getStringArray("participants");
            if ((v5 != null) && (v5.length == 1)) {
                if (v10_1 != null) {
                    v2 = android.support.v4.app.NotificationCompatApi21.toCompatRemoteInput(v10_1, p15);
                }
                v2 = p14.build(v1, v2, v3_1, v4_1, v5, p13.getLong("timestamp"));
            }
        }
        return v2;
    }

    private static android.support.v4.app.RemoteInputCompatBase$RemoteInput toCompatRemoteInput(android.app.RemoteInput p6, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p7)
    {
        return p7.build(p6.getResultKey(), p6.getLabel(), p6.getChoices(), p6.getAllowFreeFormInput(), p6.getExtras());
    }
}
package android.support.v4.app;
 class NotificationCompatApi23 {
    public static final String CATEGORY_REMINDER = "reminder";

    NotificationCompatApi23()
    {
        return;
    }
}
package android.support.v4.app;
 class NotificationCompatApi24 {
    public static final String CATEGORY_ALARM = "alarm";
    public static final String CATEGORY_CALL = "call";
    public static final String CATEGORY_EMAIL = "email";
    public static final String CATEGORY_ERROR = "err";
    public static final String CATEGORY_EVENT = "event";
    public static final String CATEGORY_MESSAGE = "msg";
    public static final String CATEGORY_PROGRESS = "progress";
    public static final String CATEGORY_PROMO = "promo";
    public static final String CATEGORY_RECOMMENDATION = "recommendation";
    public static final String CATEGORY_SERVICE = "service";
    public static final String CATEGORY_SOCIAL = "social";
    public static final String CATEGORY_STATUS = "status";
    public static final String CATEGORY_SYSTEM = "sys";
    public static final String CATEGORY_TRANSPORT = "transport";

    NotificationCompatApi24()
    {
        return;
    }

    public static void addMessagingStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor p8, CharSequence p9, CharSequence p10, java.util.List p11, java.util.List p12, java.util.List p13, java.util.List p14, java.util.List p15)
    {
        android.app.Notification$MessagingStyle v2 = new android.app.Notification$MessagingStyle(p9).setConversationTitle(p10);
        int v0 = 0;
        while (v0 < p11.size()) {
            android.app.Notification$MessagingStyle$Message v1_1 = new android.app.Notification$MessagingStyle$Message(((CharSequence) p11.get(v0)), ((Long) p12.get(v0)).longValue(), ((CharSequence) p13.get(v0)));
            if (p14.get(v0) != null) {
                v1_1.setData(((String) p14.get(v0)), ((android.net.Uri) p15.get(v0)));
            }
            v2.addMessage(v1_1);
            v0++;
        }
        v2.setBuilder(p8.getBuilder());
        return;
    }
}
package android.support.v4.app;
public interface NotificationCompatBase$Action$Factory {

    public abstract android.support.v4.app.NotificationCompatBase$Action build();

    public abstract android.support.v4.app.NotificationCompatBase$Action[] newArray();
}
package android.support.v4.app;
public abstract class NotificationCompatBase$Action {

    public NotificationCompatBase$Action()
    {
        return;
    }

    public abstract android.app.PendingIntent getActionIntent();

    public abstract boolean getAllowGeneratedReplies();

    public abstract android.os.Bundle getExtras();

    public abstract int getIcon();

    public abstract android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs();

    public abstract CharSequence getTitle();
}
package android.support.v4.app;
public interface NotificationCompatBase$UnreadConversation$Factory {

    public abstract android.support.v4.app.NotificationCompatBase$UnreadConversation build();
}
package android.support.v4.app;
public abstract class NotificationCompatBase$UnreadConversation {

    public NotificationCompatBase$UnreadConversation()
    {
        return;
    }

    abstract long getLatestTimestamp();

    abstract String[] getMessages();

    abstract String getParticipant();

    abstract String[] getParticipants();

    abstract android.app.PendingIntent getReadPendingIntent();

    abstract android.support.v4.app.RemoteInputCompatBase$RemoteInput getRemoteInput();

    abstract android.app.PendingIntent getReplyPendingIntent();
}
package android.support.v4.app;
public class NotificationCompatBase {

    public NotificationCompatBase()
    {
        return;
    }

    public static android.app.Notification add(android.app.Notification p0, android.content.Context p1, CharSequence p2, CharSequence p3, android.app.PendingIntent p4, android.app.PendingIntent p5)
    {
        p0.setLatestEventInfo(p1, p2, p3, p4);
        p0.fullScreenIntent = p5;
        return p0;
    }
}
package android.support.v4.app;
public final class NotificationCompatExtras {
    public static final String EXTRA_ACTION_EXTRAS = "android.support.actionExtras";
    public static final String EXTRA_GROUP_KEY = "android.support.groupKey";
    public static final String EXTRA_GROUP_SUMMARY = "android.support.isGroupSummary";
    public static final String EXTRA_LOCAL_ONLY = "android.support.localOnly";
    public static final String EXTRA_REMOTE_INPUTS = "android.support.remoteInputs";
    public static final String EXTRA_SORT_KEY = "android.support.sortKey";

    private NotificationCompatExtras()
    {
        return;
    }
}
package android.support.v4.app;
 class NotificationCompatHoneycomb {

    NotificationCompatHoneycomb()
    {
        return;
    }

    static android.app.Notification add(android.content.Context p5, android.app.Notification p6, CharSequence p7, CharSequence p8, CharSequence p9, android.widget.RemoteViews p10, int p11, android.app.PendingIntent p12, android.app.PendingIntent p13, android.graphics.Bitmap p14)
    {
        android.app.Notification v1_8;
        android.app.Notification$Builder vtmp7 = new android.app.Notification$Builder(p5).setWhen(p6.when).setSmallIcon(p6.icon, p6.iconLevel).setContent(p6.contentView).setTicker(p6.tickerText, p10).setSound(p6.sound, p6.audioStreamType).setVibrate(p6.vibrate).setLights(p6.ledARGB, p6.ledOnMS, p6.ledOffMS);
        if ((p6.flags & 2) == 0) {
            v1_8 = 0;
        } else {
            v1_8 = 1;
        }
        android.app.Notification v1_11;
        android.app.Notification$Builder v2_6 = vtmp7.setOngoing(v1_8);
        if ((p6.flags & 8) == 0) {
            v1_11 = 0;
        } else {
            v1_11 = 1;
        }
        android.app.Notification v1_15;
        android.app.Notification$Builder v2_7 = v2_6.setOnlyAlertOnce(v1_11);
        if ((p6.flags & 16) == 0) {
            v1_15 = 0;
        } else {
            v1_15 = 1;
        }
        android.app.Notification v1_24;
        android.app.Notification$Builder vtmp16 = v2_7.setAutoCancel(v1_15).setDefaults(p6.defaults).setContentTitle(p7).setContentText(p8).setContentInfo(p9).setContentIntent(p12).setDeleteIntent(p6.deleteIntent);
        if ((p6.flags & 128) == 0) {
            v1_24 = 0;
        } else {
            v1_24 = 1;
        }
        return vtmp16.setFullScreenIntent(p13, v1_24).setLargeIcon(p14).setNumber(p11).getNotification();
    }
}
package android.support.v4.app;
 class NotificationCompatIceCreamSandwich {

    NotificationCompatIceCreamSandwich()
    {
        return;
    }
}
package android.support.v4.app;
 class NotificationCompatJellybean {
    static final String EXTRA_ACTION_EXTRAS = "android.support.actionExtras";
    static final String EXTRA_ALLOW_GENERATED_REPLIES = "android.support.allowGeneratedReplies";
    static final String EXTRA_GROUP_KEY = "android.support.groupKey";
    static final String EXTRA_GROUP_SUMMARY = "android.support.isGroupSummary";
    static final String EXTRA_LOCAL_ONLY = "android.support.localOnly";
    static final String EXTRA_REMOTE_INPUTS = "android.support.remoteInputs";
    static final String EXTRA_SORT_KEY = "android.support.sortKey";
    static final String EXTRA_USE_SIDE_CHANNEL = "android.support.useSideChannel";
    private static final String KEY_ACTION_INTENT = "actionIntent";
    private static final String KEY_ALLOW_GENERATED_REPLIES = "allowGeneratedReplies";
    private static final String KEY_EXTRAS = "extras";
    private static final String KEY_ICON = "icon";
    private static final String KEY_REMOTE_INPUTS = "remoteInputs";
    private static final String KEY_TITLE = "title";
    public static final String TAG = "NotificationCompat";
    private static Class sActionClass;
    private static reflect.Field sActionIconField;
    private static reflect.Field sActionIntentField;
    private static reflect.Field sActionTitleField;
    private static boolean sActionsAccessFailed;
    private static reflect.Field sActionsField;
    private static final Object sActionsLock;
    private static reflect.Field sExtrasField;
    private static boolean sExtrasFieldAccessFailed;
    private static final Object sExtrasLock;

    static NotificationCompatJellybean()
    {
        android.support.v4.app.NotificationCompatJellybean.sExtrasLock = new Object();
        android.support.v4.app.NotificationCompatJellybean.sActionsLock = new Object();
        return;
    }

    NotificationCompatJellybean()
    {
        return;
    }

    public static void addBigPictureStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor p3, CharSequence p4, boolean p5, CharSequence p6, android.graphics.Bitmap p7, android.graphics.Bitmap p8, boolean p9)
    {
        android.app.Notification$BigPictureStyle v0 = new android.app.Notification$BigPictureStyle(p3.getBuilder()).setBigContentTitle(p4).bigPicture(p7);
        if (p9) {
            v0.bigLargeIcon(p8);
        }
        if (p5) {
            v0.setSummaryText(p6);
        }
        return;
    }

    public static void addBigTextStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor p3, CharSequence p4, boolean p5, CharSequence p6, CharSequence p7)
    {
        android.app.Notification$BigTextStyle vtmp3 = new android.app.Notification$BigTextStyle(p3.getBuilder()).setBigContentTitle(p4).bigText(p7);
        if (p5) {
            vtmp3.setSummaryText(p6);
        }
        return;
    }

    public static void addInboxStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor p4, CharSequence p5, boolean p6, CharSequence p7, java.util.ArrayList p8)
    {
        android.app.Notification$InboxStyle v0 = new android.app.Notification$InboxStyle(p4.getBuilder()).setBigContentTitle(p5);
        if (p6) {
            v0.setSummaryText(p7);
        }
        java.util.Iterator v2_2 = p8.iterator();
        while (v2_2.hasNext()) {
            v0.addLine(((CharSequence) v2_2.next()));
        }
        return;
    }

    public static android.util.SparseArray buildActionExtrasMap(java.util.List p4)
    {
        android.util.SparseArray v1_0 = 0;
        int v3 = 0;
        int v2 = p4.size();
        while (v3 < v2) {
            android.os.Bundle v0_1 = ((android.os.Bundle) p4.get(v3));
            if (v0_1 != null) {
                if (v1_0 == null) {
                    v1_0 = new android.util.SparseArray();
                }
                v1_0.put(v3, v0_1);
            }
            v3++;
        }
        return v1_0;
    }

    private static boolean ensureActionReflectionReadyLocked()
    {
        int v2 = 0;
        int v1 = 1;
        if (!android.support.v4.app.NotificationCompatJellybean.sActionsAccessFailed) {
            try {
                if (android.support.v4.app.NotificationCompatJellybean.sActionsField == null) {
                    android.support.v4.app.NotificationCompatJellybean.sActionClass = Class.forName("android.app.Notification$Action");
                    android.support.v4.app.NotificationCompatJellybean.sActionIconField = android.support.v4.app.NotificationCompatJellybean.sActionClass.getDeclaredField("icon");
                    android.support.v4.app.NotificationCompatJellybean.sActionTitleField = android.support.v4.app.NotificationCompatJellybean.sActionClass.getDeclaredField("title");
                    android.support.v4.app.NotificationCompatJellybean.sActionIntentField = android.support.v4.app.NotificationCompatJellybean.sActionClass.getDeclaredField("actionIntent");
                    android.support.v4.app.NotificationCompatJellybean.sActionsField = android.app.Notification.getDeclaredField("actions");
                    android.support.v4.app.NotificationCompatJellybean.sActionsField.setAccessible(1);
                }
            } catch (NoSuchFieldException v0_1) {
                android.util.Log.e("NotificationCompat", "Unable to access notification actions", v0_1);
                android.support.v4.app.NotificationCompatJellybean.sActionsAccessFailed = 1;
            } catch (NoSuchFieldException v0_0) {
                android.util.Log.e("NotificationCompat", "Unable to access notification actions", v0_0);
                android.support.v4.app.NotificationCompatJellybean.sActionsAccessFailed = 1;
            }
            if (android.support.v4.app.NotificationCompatJellybean.sActionsAccessFailed) {
                v1 = 0;
            }
            v2 = v1;
        }
        return v2;
    }

    public static android.support.v4.app.NotificationCompatBase$Action getAction(android.app.Notification p11, int p12, android.support.v4.app.NotificationCompatBase$Action$Factory p13, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p14)
    {
        try {
            Object v7 = android.support.v4.app.NotificationCompatJellybean.getActionObjectsLocked(p11)[p12];
            android.os.Bundle v5_1 = 0;
            android.os.Bundle v9 = android.support.v4.app.NotificationCompatJellybean.getExtras(p11);
        } catch (android.support.v4.app.NotificationCompatBase$Action v0_8) {
            throw v0_8;
        }
        if (v9 != null) {
            android.util.SparseArray v6 = v9.getSparseParcelableArray("android.support.actionExtras");
            if (v6 != null) {
                v5_1 = ((android.os.Bundle) v6.get(p12));
            }
        }
        android.support.v4.app.NotificationCompatBase$Action v0_3 = android.support.v4.app.NotificationCompatJellybean.readAction(p13, p14, android.support.v4.app.NotificationCompatJellybean.sActionIconField.getInt(v7), ((CharSequence) android.support.v4.app.NotificationCompatJellybean.sActionTitleField.get(v7)), ((android.app.PendingIntent) android.support.v4.app.NotificationCompatJellybean.sActionIntentField.get(v7)), v5_1);
        return v0_3;
    }

    public static int getActionCount(android.app.Notification p3)
    {
        try {
            int v1_0;
            Object[] v0 = android.support.v4.app.NotificationCompatJellybean.getActionObjectsLocked(p3);
        } catch (int v1_1) {
            throw v1_1;
        }
        if (v0 == null) {
            v1_0 = 0;
        } else {
            v1_0 = v0.length;
        }
        return v1_0;
    }

    private static android.support.v4.app.NotificationCompatBase$Action getActionFromBundle(android.os.Bundle p7, android.support.v4.app.NotificationCompatBase$Action$Factory p8, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p9)
    {
        return p8.build(p7.getInt("icon"), p7.getCharSequence("title"), ((android.app.PendingIntent) p7.getParcelable("actionIntent")), p7.getBundle("extras"), android.support.v4.app.RemoteInputCompatJellybean.fromBundleArray(android.support.v4.app.BundleUtil.getBundleArrayFromBundle(p7, "remoteInputs"), p9), p7.getBoolean("allowGeneratedReplies"));
    }

    private static Object[] getActionObjectsLocked(android.app.Notification p5)
    {
        try {
            int v1_2;
            if (android.support.v4.app.NotificationCompatJellybean.ensureActionReflectionReadyLocked()) {
                try {
                    v1_2 = ((Object[]) ((Object[]) android.support.v4.app.NotificationCompatJellybean.sActionsField.get(p5)));
                } catch (IllegalAccessException v0) {
                    android.util.Log.e("NotificationCompat", "Unable to access notification actions", v0);
                    android.support.v4.app.NotificationCompatJellybean.sActionsAccessFailed = 1;
                    v1_2 = 0;
                }
            } else {
                v1_2 = 0;
            }
        } catch (int v1_3) {
            throw v1_3;
        }
        return v1_2;
    }

    public static android.support.v4.app.NotificationCompatBase$Action[] getActionsFromParcelableArrayList(java.util.ArrayList p3, android.support.v4.app.NotificationCompatBase$Action$Factory p4, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p5)
    {
        android.support.v4.app.NotificationCompatBase$Action[] v0;
        if (p3 != null) {
            v0 = p4.newArray(p3.size());
            int v1 = 0;
            while (v1 < v0.length) {
                v0[v1] = android.support.v4.app.NotificationCompatJellybean.getActionFromBundle(((android.os.Bundle) p3.get(v1)), p4, p5);
                v1++;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    private static android.os.Bundle getBundleForAction(android.support.v4.app.NotificationCompatBase$Action p3)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putInt("icon", p3.getIcon());
        v0_1.putCharSequence("title", p3.getTitle());
        v0_1.putParcelable("actionIntent", p3.getActionIntent());
        v0_1.putBundle("extras", p3.getExtras());
        v0_1.putParcelableArray("remoteInputs", android.support.v4.app.RemoteInputCompatJellybean.toBundleArray(p3.getRemoteInputs()));
        return v0_1;
    }

    public static android.os.Bundle getExtras(android.app.Notification p7)
    {
        try {
            Throwable v1_1;
            if (!android.support.v4.app.NotificationCompatJellybean.sExtrasFieldAccessFailed) {
                try {
                    if (android.support.v4.app.NotificationCompatJellybean.sExtrasField != null) {
                        v1_1 = ((android.os.Bundle) android.support.v4.app.NotificationCompatJellybean.sExtrasField.get(p7));
                        if (v1_1 == null) {
                            v1_1 = new android.os.Bundle();
                            android.support.v4.app.NotificationCompatJellybean.sExtrasField.set(p7, v1_1);
                        }
                        return v1_1;
                    } else {
                        reflect.Field v2 = android.app.Notification.getDeclaredField("extras");
                        if (android.os.Bundle.isAssignableFrom(v2.getType())) {
                            v2.setAccessible(1);
                            android.support.v4.app.NotificationCompatJellybean.sExtrasField = v2;
                        } else {
                            android.util.Log.e("NotificationCompat", "Notification.extras field is not of type Bundle");
                            android.support.v4.app.NotificationCompatJellybean.sExtrasFieldAccessFailed = 1;
                            v1_1 = 0;
                            return v1_1;
                        }
                    }
                } catch (NoSuchFieldException v0_1) {
                    android.util.Log.e("NotificationCompat", "Unable to access notification extras", v0_1);
                } catch (NoSuchFieldException v0_0) {
                    android.util.Log.e("NotificationCompat", "Unable to access notification extras", v0_0);
                }
                android.support.v4.app.NotificationCompatJellybean.sExtrasFieldAccessFailed = 1;
                v1_1 = 0;
            } else {
                v1_1 = 0;
            }
        } catch (Throwable v3_1) {
            throw v3_1;
        }
        return v1_1;
    }

    public static String getGroup(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getExtras(p2).getString("android.support.groupKey");
    }

    public static boolean getLocalOnly(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getExtras(p2).getBoolean("android.support.localOnly");
    }

    public static java.util.ArrayList getParcelableArrayListForActions(android.support.v4.app.NotificationCompatBase$Action[] p5)
    {
        java.util.ArrayList v1_1;
        if (p5 != null) {
            v1_1 = new java.util.ArrayList(p5.length);
            int v3 = p5.length;
            int v2_0 = 0;
            while (v2_0 < v3) {
                v1_1.add(android.support.v4.app.NotificationCompatJellybean.getBundleForAction(p5[v2_0]));
                v2_0++;
            }
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public static String getSortKey(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getExtras(p2).getString("android.support.sortKey");
    }

    public static boolean isGroupSummary(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getExtras(p2).getBoolean("android.support.isGroupSummary");
    }

    public static android.support.v4.app.NotificationCompatBase$Action readAction(android.support.v4.app.NotificationCompatBase$Action$Factory p7, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p8, int p9, CharSequence p10, android.app.PendingIntent p11, android.os.Bundle p12)
    {
        android.support.v4.app.RemoteInputCompatBase$RemoteInput[] v5 = 0;
        boolean v6 = 0;
        if (p12 != null) {
            v5 = android.support.v4.app.RemoteInputCompatJellybean.fromBundleArray(android.support.v4.app.BundleUtil.getBundleArrayFromBundle(p12, "android.support.remoteInputs"), p8);
            v6 = p12.getBoolean("android.support.allowGeneratedReplies");
        }
        return p7.build(p9, p10, p11, p12, v5, v6);
    }

    public static android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder p4, android.support.v4.app.NotificationCompatBase$Action p5)
    {
        p4.addAction(p5.getIcon(), p5.getTitle(), p5.getActionIntent());
        android.os.Bundle v0_0 = new android.os.Bundle(p5.getExtras());
        if (p5.getRemoteInputs() != null) {
            v0_0.putParcelableArray("android.support.remoteInputs", android.support.v4.app.RemoteInputCompatJellybean.toBundleArray(p5.getRemoteInputs()));
        }
        v0_0.putBoolean("android.support.allowGeneratedReplies", p5.getAllowGeneratedReplies());
        return v0_0;
    }
}
package android.support.v4.app;
 class NotificationCompatKitKat {

    NotificationCompatKitKat()
    {
        return;
    }

    public static android.support.v4.app.NotificationCompatBase$Action getAction(android.app.Notification p8, int p9, android.support.v4.app.NotificationCompatBase$Action$Factory p10, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p11)
    {
        android.app.Notification$Action v6 = p8.actions[p9];
        android.os.Bundle v5_0 = 0;
        android.util.SparseArray v7 = p8.extras.getSparseParcelableArray("android.support.actionExtras");
        if (v7 != null) {
            v5_0 = ((android.os.Bundle) v7.get(p9));
        }
        return android.support.v4.app.NotificationCompatJellybean.readAction(p10, p11, v6.icon, v6.title, v6.actionIntent, v5_0);
    }

    public static int getActionCount(android.app.Notification p1)
    {
        int v0_1;
        if (p1.actions == null) {
            v0_1 = 0;
        } else {
            v0_1 = p1.actions.length;
        }
        return v0_1;
    }

    public static android.os.Bundle getExtras(android.app.Notification p1)
    {
        return p1.extras;
    }

    public static String getGroup(android.app.Notification p2)
    {
        return p2.extras.getString("android.support.groupKey");
    }

    public static boolean getLocalOnly(android.app.Notification p2)
    {
        return p2.extras.getBoolean("android.support.localOnly");
    }

    public static String getSortKey(android.app.Notification p2)
    {
        return p2.extras.getString("android.support.sortKey");
    }

    public static boolean isGroupSummary(android.app.Notification p2)
    {
        return p2.extras.getBoolean("android.support.isGroupSummary");
    }
}
package android.support.v4.app;
public abstract class NotificationCompatSideChannelService extends android.app.Service {

    public NotificationCompatSideChannelService()
    {
        return;
    }

    public abstract void cancel();

    public abstract void cancelAll();

    void checkPermission(int p6, String p7)
    {
        String v2_5 = this.getPackageManager().getPackagesForUid(p6);
        int v1_2 = 0;
        while (v1_2 < v2_5.length) {
            if (!v2_5[v1_2].equals(p7)) {
                v1_2++;
            } else {
                return;
            }
        }
        throw new SecurityException(new StringBuilder().append("NotificationSideChannelService: Uid ").append(p6).append(" is not authorized for package ").append(p7).toString());
    }

    public abstract void notify();

    public android.os.IBinder onBind(android.content.Intent p4)
    {
        android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub v0_0 = 0;
        if ((p4.getAction().equals("android.support.BIND_NOTIFICATION_SIDE_CHANNEL")) && (android.os.Build$VERSION.SDK_INT <= 19)) {
            v0_0 = new android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub(this);
        }
        return v0_0;
    }
}
package android.support.v4.app;
interface NotificationManagerCompat$Impl {

    public abstract boolean areNotificationsEnabled();

    public abstract void cancelNotification();

    public abstract int getImportance();

    public abstract int getSideChannelBindFlags();

    public abstract void postNotification();
}
package android.support.v4.app;
 class NotificationManagerCompat$ServiceConnectedEvent {
    final android.content.ComponentName componentName;
    final android.os.IBinder iBinder;

    public NotificationManagerCompat$ServiceConnectedEvent(android.content.ComponentName p1, android.os.IBinder p2)
    {
        this.componentName = p1;
        this.iBinder = p2;
        return;
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$SideChannelManager$ListenerRecord {
    public boolean bound;
    public final android.content.ComponentName componentName;
    public int retryCount;
    public android.support.v4.app.INotificationSideChannel service;
    public java.util.LinkedList taskQueue;

    public NotificationManagerCompat$SideChannelManager$ListenerRecord(android.content.ComponentName p3)
    {
        this.bound = 0;
        this.taskQueue = new java.util.LinkedList();
        this.retryCount = 0;
        this.componentName = p3;
        return;
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$SideChannelManager implements android.os.Handler$Callback, android.content.ServiceConnection {
    private static final String KEY_BINDER = "binder";
    private static final int MSG_QUEUE_TASK = 0;
    private static final int MSG_RETRY_LISTENER_QUEUE = 3;
    private static final int MSG_SERVICE_CONNECTED = 1;
    private static final int MSG_SERVICE_DISCONNECTED = 2;
    private java.util.Set mCachedEnabledPackages;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final android.os.HandlerThread mHandlerThread;
    private final java.util.Map mRecordMap;

    public NotificationManagerCompat$SideChannelManager(android.content.Context p3)
    {
        this.mRecordMap = new java.util.HashMap();
        this.mCachedEnabledPackages = new java.util.HashSet();
        this.mContext = p3;
        this.mHandlerThread = new android.os.HandlerThread("NotificationManagerCompat");
        this.mHandlerThread.start();
        this.mHandler = new android.os.Handler(this.mHandlerThread.getLooper(), this);
        return;
    }

    private boolean ensureServiceBound(android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord p5)
    {
        boolean v1_7;
        if (!p5.bound) {
            p5.bound = this.mContext.bindService(new android.content.Intent("android.support.BIND_NOTIFICATION_SIDE_CHANNEL").setComponent(p5.componentName), this, android.support.v4.app.NotificationManagerCompat.SIDE_CHANNEL_BIND_FLAGS);
            if (!p5.bound) {
                android.util.Log.w("NotifManCompat", new StringBuilder().append("Unable to bind to listener ").append(p5.componentName).toString());
                this.mContext.unbindService(this);
            } else {
                p5.retryCount = 0;
            }
            v1_7 = p5.bound;
        } else {
            v1_7 = 1;
        }
        return v1_7;
    }

    private void ensureServiceUnbound(android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord p2)
    {
        if (p2.bound) {
            this.mContext.unbindService(this);
            p2.bound = 0;
        }
        p2.service = 0;
        return;
    }

    private void handleQueueTask(android.support.v4.app.NotificationManagerCompat$Task p4)
    {
        this.updateListenerMap();
        java.util.Iterator v1_2 = this.mRecordMap.values().iterator();
        while (v1_2.hasNext()) {
            android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v0_1 = ((android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) v1_2.next());
            v0_1.taskQueue.add(p4);
            this.processListenerQueue(v0_1);
        }
        return;
    }

    private void handleRetryListenerQueue(android.content.ComponentName p3)
    {
        android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v0_1 = ((android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) this.mRecordMap.get(p3));
        if (v0_1 != null) {
            this.processListenerQueue(v0_1);
        }
        return;
    }

    private void handleServiceConnected(android.content.ComponentName p3, android.os.IBinder p4)
    {
        android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v0_1 = ((android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) this.mRecordMap.get(p3));
        if (v0_1 != null) {
            v0_1.service = android.support.v4.app.INotificationSideChannel$Stub.asInterface(p4);
            v0_1.retryCount = 0;
            this.processListenerQueue(v0_1);
        }
        return;
    }

    private void handleServiceDisconnected(android.content.ComponentName p3)
    {
        android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v0_1 = ((android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) this.mRecordMap.get(p3));
        if (v0_1 != null) {
            this.ensureServiceUnbound(v0_1);
        }
        return;
    }

    private void processListenerQueue(android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord p7)
    {
        if (android.util.Log.isLoggable("NotifManCompat", 3)) {
            android.util.Log.d("NotifManCompat", new StringBuilder().append("Processing component ").append(p7.componentName).append(", ").append(p7.taskQueue.size()).append(" queued tasks").toString());
        }
        if (!p7.taskQueue.isEmpty()) {
            if ((!this.ensureServiceBound(p7)) || (p7.service == null)) {
                this.scheduleListenerRetry(p7);
                return;
            }
            while(true) {
                android.support.v4.app.NotificationManagerCompat$Task v1_1 = ((android.support.v4.app.NotificationManagerCompat$Task) p7.taskQueue.peek());
                if (v1_1 == null) {
                    break;
                }
                try {
                    if (android.util.Log.isLoggable("NotifManCompat", 3)) {
                        android.util.Log.d("NotifManCompat", new StringBuilder().append("Sending task ").append(v1_1).toString());
                    }
                    v1_1.send(p7.service);
                    p7.taskQueue.remove();
                } catch (android.os.RemoteException v0) {
                    android.util.Log.w("NotifManCompat", new StringBuilder().append("RemoteException communicating with ").append(p7.componentName).toString(), v0);
                    break;
                } catch (android.os.RemoteException v0) {
                    if (!android.util.Log.isLoggable("NotifManCompat", 3)) {
                        break;
                    }
                    android.util.Log.d("NotifManCompat", new StringBuilder().append("Remote service has died: ").append(p7.componentName).toString());
                    break;
                }
            }
            if (!p7.taskQueue.isEmpty()) {
                this.scheduleListenerRetry(p7);
            }
        }
        return;
    }

    private void scheduleListenerRetry(android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord p7)
    {
        if (!this.mHandler.hasMessages(3, p7.componentName)) {
            p7.retryCount = (p7.retryCount + 1);
            if (p7.retryCount <= 6) {
                int v0 = ((1 << (p7.retryCount - 1)) * 1000);
                if (android.util.Log.isLoggable("NotifManCompat", 3)) {
                    android.util.Log.d("NotifManCompat", new StringBuilder().append("Scheduling retry for ").append(v0).append(" ms").toString());
                }
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(3, p7.componentName), ((long) v0));
            } else {
                android.util.Log.w("NotifManCompat", new StringBuilder().append("Giving up on delivering ").append(p7.taskQueue.size()).append(" tasks to ").append(p7.componentName).append(" after ").append(p7.retryCount).append(" retries").toString());
                p7.taskQueue.clear();
            }
        }
        return;
    }

    private void updateListenerMap()
    {
        java.util.Set v2 = android.support.v4.app.NotificationManagerCompat.getEnabledListenerPackages(this.mContext);
        if (!v2.equals(this.mCachedEnabledPackages)) {
            this.mCachedEnabledPackages = v2;
            java.util.List v6 = this.mContext.getPackageManager().queryIntentServices(new android.content.Intent().setAction("android.support.BIND_NOTIFICATION_SIDE_CHANNEL"), 4);
            java.util.HashSet v1_1 = new java.util.HashSet();
            android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v7_2 = v6.iterator();
            while (v7_2.hasNext()) {
                android.content.pm.ResolveInfo v5_1 = ((android.content.pm.ResolveInfo) v7_2.next());
                if (v2.contains(v5_1.serviceInfo.packageName)) {
                    android.content.ComponentName v0_1 = new android.content.ComponentName(v5_1.serviceInfo.packageName, v5_1.serviceInfo.name);
                    if (v5_1.serviceInfo.permission == null) {
                        v1_1.add(v0_1);
                    } else {
                        android.util.Log.w("NotifManCompat", new StringBuilder().append("Permission present on component ").append(v0_1).append(", not adding listener record.").toString());
                    }
                }
            }
            android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord v7_3 = v1_1.iterator();
            while (v7_3.hasNext()) {
                android.content.ComponentName v0_3 = ((android.content.ComponentName) v7_3.next());
                if (!this.mRecordMap.containsKey(v0_3)) {
                    if (android.util.Log.isLoggable("NotifManCompat", 3)) {
                        android.util.Log.d("NotifManCompat", new StringBuilder().append("Adding listener record for ").append(v0_3).toString());
                    }
                    this.mRecordMap.put(v0_3, new android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord(v0_3));
                }
            }
            java.util.Iterator v4 = this.mRecordMap.entrySet().iterator();
            while (v4.hasNext()) {
                java.util.Map$Entry v3_1 = ((java.util.Map$Entry) v4.next());
                if (!v1_1.contains(v3_1.getKey())) {
                    if (android.util.Log.isLoggable("NotifManCompat", 3)) {
                        android.util.Log.d("NotifManCompat", new StringBuilder().append("Removing listener record for ").append(v3_1.getKey()).toString());
                    }
                    this.ensureServiceUnbound(((android.support.v4.app.NotificationManagerCompat$SideChannelManager$ListenerRecord) v3_1.getValue()));
                    v4.remove();
                }
            }
        }
        return;
    }

    public boolean handleMessage(android.os.Message p5)
    {
        int v1_1;
        switch (p5.what) {
            case 0:
                this.handleQueueTask(((android.support.v4.app.NotificationManagerCompat$Task) p5.obj));
                v1_1 = 1;
                break;
            case 1:
                android.support.v4.app.NotificationManagerCompat$ServiceConnectedEvent v0_1 = ((android.support.v4.app.NotificationManagerCompat$ServiceConnectedEvent) p5.obj);
                this.handleServiceConnected(v0_1.componentName, v0_1.iBinder);
                v1_1 = 1;
                break;
            case 2:
                this.handleServiceDisconnected(((android.content.ComponentName) p5.obj));
                v1_1 = 1;
                break;
            case 3:
                this.handleRetryListenerQueue(((android.content.ComponentName) p5.obj));
                v1_1 = 1;
                break;
            default:
                v1_1 = 0;
        }
        return v1_1;
    }

    public void onServiceConnected(android.content.ComponentName p4, android.os.IBinder p5)
    {
        if (android.util.Log.isLoggable("NotifManCompat", 3)) {
            android.util.Log.d("NotifManCompat", new StringBuilder().append("Connected to service ").append(p4).toString());
        }
        this.mHandler.obtainMessage(1, new android.support.v4.app.NotificationManagerCompat$ServiceConnectedEvent(p4, p5)).sendToTarget();
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p4)
    {
        if (android.util.Log.isLoggable("NotifManCompat", 3)) {
            android.util.Log.d("NotifManCompat", new StringBuilder().append("Disconnected from service ").append(p4).toString());
        }
        this.mHandler.obtainMessage(2, p4).sendToTarget();
        return;
    }

    public void queueTask(android.support.v4.app.NotificationManagerCompat$Task p3)
    {
        this.mHandler.obtainMessage(0, p3).sendToTarget();
        return;
    }
}
package android.support.v4.app;
interface NotificationManagerCompat$Task {

    public abstract void send();
}
package android.support.v4.app;
public final class NotificationManagerCompat {
    public static final String ACTION_BIND_SIDE_CHANNEL = "android.support.BIND_NOTIFICATION_SIDE_CHANNEL";
    public static final String EXTRA_USE_SIDE_CHANNEL = "android.support.useSideChannel";
    private static final android.support.v4.app.NotificationManagerCompat$Impl IMPL = None;
    public static final int IMPORTANCE_DEFAULT = 3;
    public static final int IMPORTANCE_HIGH = 4;
    public static final int IMPORTANCE_LOW = 2;
    public static final int IMPORTANCE_MAX = 5;
    public static final int IMPORTANCE_MIN = 1;
    public static final int IMPORTANCE_NONE = 0;
    public static final int IMPORTANCE_UNSPECIFIED = 64536;
    static final int MAX_SIDE_CHANNEL_SDK_VERSION = 19;
    private static final String SETTING_ENABLED_NOTIFICATION_LISTENERS = "enabled_notification_listeners";
    static final int SIDE_CHANNEL_BIND_FLAGS = 0;
    private static final int SIDE_CHANNEL_RETRY_BASE_INTERVAL_MS = 1000;
    private static final int SIDE_CHANNEL_RETRY_MAX_COUNT = 6;
    private static final String TAG = "NotifManCompat";
    private static java.util.Set sEnabledNotificationListenerPackages;
    private static String sEnabledNotificationListeners;
    private static final Object sEnabledNotificationListenersLock;
    private static final Object sLock;
    private static android.support.v4.app.NotificationManagerCompat$SideChannelManager sSideChannelManager;
    private final android.content.Context mContext;
    private final android.app.NotificationManager mNotificationManager;

    static NotificationManagerCompat()
    {
        android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListenersLock = new Object();
        android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListenerPackages = new java.util.HashSet();
        android.support.v4.app.NotificationManagerCompat.sLock = new Object();
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            if (android.os.Build$VERSION.SDK_INT < 19) {
                if (android.os.Build$VERSION.SDK_INT < 14) {
                    android.support.v4.app.NotificationManagerCompat.IMPL = new android.support.v4.app.NotificationManagerCompat$ImplBase();
                } else {
                    android.support.v4.app.NotificationManagerCompat.IMPL = new android.support.v4.app.NotificationManagerCompat$ImplIceCreamSandwich();
                }
            } else {
                android.support.v4.app.NotificationManagerCompat.IMPL = new android.support.v4.app.NotificationManagerCompat$ImplKitKat();
            }
        } else {
            android.support.v4.app.NotificationManagerCompat.IMPL = new android.support.v4.app.NotificationManagerCompat$ImplApi24();
        }
        android.support.v4.app.NotificationManagerCompat.SIDE_CHANNEL_BIND_FLAGS = android.support.v4.app.NotificationManagerCompat.IMPL.getSideChannelBindFlags();
        return;
    }

    private NotificationManagerCompat(android.content.Context p3)
    {
        this.mContext = p3;
        this.mNotificationManager = ((android.app.NotificationManager) this.mContext.getSystemService("notification"));
        return;
    }

    public static android.support.v4.app.NotificationManagerCompat from(android.content.Context p1)
    {
        return new android.support.v4.app.NotificationManagerCompat(p1);
    }

    public static java.util.Set getEnabledListenerPackages(android.content.Context p9)
    {
        String v3 = android.provider.Settings$Secure.getString(p9.getContentResolver(), "enabled_notification_listeners");
        try {
            if ((v3 != null) && (!v3.equals(android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListeners))) {
                String[] v2 = v3.split(":");
                java.util.HashSet v4_1 = new java.util.HashSet(v2.length);
                int v7 = v2.length;
                int v5_3 = 0;
                while (v5_3 < v7) {
                    android.content.ComponentName v1 = android.content.ComponentName.unflattenFromString(v2[v5_3]);
                    if (v1 != null) {
                        v4_1.add(v1.getPackageName());
                    }
                    v5_3++;
                }
                android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListenerPackages = v4_1;
                android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListeners = v3;
            }
        } catch (int v5_5) {
            throw v5_5;
        }
        return android.support.v4.app.NotificationManagerCompat.sEnabledNotificationListenerPackages;
    }

    private void pushSideChannelQueue(android.support.v4.app.NotificationManagerCompat$Task p4)
    {
        try {
            if (android.support.v4.app.NotificationManagerCompat.sSideChannelManager == null) {
                android.support.v4.app.NotificationManagerCompat.sSideChannelManager = new android.support.v4.app.NotificationManagerCompat$SideChannelManager(this.mContext.getApplicationContext());
            }
        } catch (android.support.v4.app.NotificationManagerCompat$SideChannelManager v0_1) {
            throw v0_1;
        }
        android.support.v4.app.NotificationManagerCompat.sSideChannelManager.queueTask(p4);
        return;
    }

    private static boolean useSideChannelForNotification(android.app.Notification p2)
    {
        int v1_2;
        android.os.Bundle v0 = android.support.v4.app.NotificationCompat.getExtras(p2);
        if ((v0 == null) || (!v0.getBoolean("android.support.useSideChannel"))) {
            v1_2 = 0;
        } else {
            v1_2 = 1;
        }
        return v1_2;
    }

    public boolean areNotificationsEnabled()
    {
        return android.support.v4.app.NotificationManagerCompat.IMPL.areNotificationsEnabled(this.mContext, this.mNotificationManager);
    }

    public void cancel(int p2)
    {
        this.cancel(0, p2);
        return;
    }

    public void cancel(String p3, int p4)
    {
        android.support.v4.app.NotificationManagerCompat.IMPL.cancelNotification(this.mNotificationManager, p3, p4);
        if (android.os.Build$VERSION.SDK_INT <= 19) {
            this.pushSideChannelQueue(new android.support.v4.app.NotificationManagerCompat$CancelTask(this.mContext.getPackageName(), p4, p3));
        }
        return;
    }

    public void cancelAll()
    {
        this.mNotificationManager.cancelAll();
        if (android.os.Build$VERSION.SDK_INT <= 19) {
            this.pushSideChannelQueue(new android.support.v4.app.NotificationManagerCompat$CancelTask(this.mContext.getPackageName()));
        }
        return;
    }

    public int getImportance()
    {
        return android.support.v4.app.NotificationManagerCompat.IMPL.getImportance(this.mNotificationManager);
    }

    public void notify(int p2, android.app.Notification p3)
    {
        this.notify(0, p2, p3);
        return;
    }

    public void notify(String p3, int p4, android.app.Notification p5)
    {
        if (!android.support.v4.app.NotificationManagerCompat.useSideChannelForNotification(p5)) {
            android.support.v4.app.NotificationManagerCompat.IMPL.postNotification(this.mNotificationManager, p3, p4, p5);
        } else {
            this.pushSideChannelQueue(new android.support.v4.app.NotificationManagerCompat$NotifyTask(this.mContext.getPackageName(), p4, p3, p5));
            android.support.v4.app.NotificationManagerCompat.IMPL.cancelNotification(this.mNotificationManager, p3, p4);
        }
        return;
    }
}
package android.support.v4.app;
 class NotificationManagerCompatApi24 {

    NotificationManagerCompatApi24()
    {
        return;
    }

    public static boolean areNotificationsEnabled(android.app.NotificationManager p1)
    {
        return p1.areNotificationsEnabled();
    }

    public static int getImportance(android.app.NotificationManager p1)
    {
        return p1.getImportance();
    }
}
package android.support.v4.app;
 class NotificationManagerCompatIceCreamSandwich {
    static final int SIDE_CHANNEL_BIND_FLAGS = 33;

    NotificationManagerCompatIceCreamSandwich()
    {
        return;
    }
}
package android.support.v4.app;
 class NotificationManagerCompatKitKat {
    private static final String CHECK_OP_NO_THROW = "checkOpNoThrow";
    private static final String OP_POST_NOTIFICATION = "OP_POST_NOTIFICATION";

    NotificationManagerCompatKitKat()
    {
        return;
    }

    public static boolean areNotificationsEnabled(android.content.Context p15)
    {
        android.app.AppOpsManager v1_1 = ((android.app.AppOpsManager) p15.getSystemService("appops"));
        android.content.pm.ApplicationInfo v0 = p15.getApplicationInfo();
        String v6 = p15.getApplicationContext().getPackageName();
        int v7 = v0.uid;
        try {
            int v9_13;
            Class v2 = Class.forName(android.app.AppOpsManager.getName());
            int v12_1 = new Class[3];
            v12_1[0] = Integer.TYPE;
            v12_1[1] = Integer.TYPE;
            v12_1[2] = String;
            reflect.Method v3 = v2.getMethod("checkOpNoThrow", v12_1);
            int v9_9 = new Object[3];
            v9_9[0] = Integer.valueOf(((Integer) v2.getDeclaredField("OP_POST_NOTIFICATION").get(Integer)).intValue());
            v9_9[1] = Integer.valueOf(v7);
            v9_9[2] = v6;
        } catch (RuntimeException v4) {
            v9_13 = 1;
            return v9_13;
        } catch (RuntimeException v4) {
        } catch (RuntimeException v4) {
        } catch (RuntimeException v4) {
        } catch (RuntimeException v4) {
        } catch (RuntimeException v4) {
        }
        if (((Integer) v3.invoke(v1_1, v9_9)).intValue() != 0) {
            v9_13 = 0;
            return v9_13;
        } else {
            v9_13 = 1;
            return v9_13;
        }
    }
}
package android.support.v4.app;
public final class RemoteInput$Builder {
    private boolean mAllowFreeFormInput;
    private CharSequence[] mChoices;
    private android.os.Bundle mExtras;
    private CharSequence mLabel;
    private final String mResultKey;

    public RemoteInput$Builder(String p3)
    {
        this.mAllowFreeFormInput = 1;
        this.mExtras = new android.os.Bundle();
        if (p3 != null) {
            this.mResultKey = p3;
            return;
        } else {
            throw new IllegalArgumentException("Result key can\'t be null");
        }
    }

    public android.support.v4.app.RemoteInput$Builder addExtras(android.os.Bundle p2)
    {
        if (p2 != null) {
            this.mExtras.putAll(p2);
        }
        return this;
    }

    public android.support.v4.app.RemoteInput build()
    {
        return new android.support.v4.app.RemoteInput(this.mResultKey, this.mLabel, this.mChoices, this.mAllowFreeFormInput, this.mExtras);
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public android.support.v4.app.RemoteInput$Builder setAllowFreeFormInput(boolean p1)
    {
        this.mAllowFreeFormInput = p1;
        return this;
    }

    public android.support.v4.app.RemoteInput$Builder setChoices(CharSequence[] p1)
    {
        this.mChoices = p1;
        return this;
    }

    public android.support.v4.app.RemoteInput$Builder setLabel(CharSequence p1)
    {
        this.mLabel = p1;
        return this;
    }
}
package android.support.v4.app;
interface RemoteInput$Impl {

    public abstract void addResultsToIntent();

    public abstract android.os.Bundle getResultsFromIntent();
}
package android.support.v4.app;
 class RemoteInputCompatApi20 {

    RemoteInputCompatApi20()
    {
        return;
    }

    static void addResultsToIntent(android.support.v4.app.RemoteInputCompatBase$RemoteInput[] p1, android.content.Intent p2, android.os.Bundle p3)
    {
        android.app.RemoteInput.addResultsToIntent(android.support.v4.app.RemoteInputCompatApi20.fromCompat(p1), p2, p3);
        return;
    }

    static android.app.RemoteInput[] fromCompat(android.support.v4.app.RemoteInputCompatBase$RemoteInput[] p5)
    {
        android.app.RemoteInput[] v1;
        if (p5 != null) {
            v1 = new android.app.RemoteInput[p5.length];
            int v0 = 0;
            while (v0 < p5.length) {
                android.support.v4.app.RemoteInputCompatBase$RemoteInput v2 = p5[v0];
                v1[v0] = new android.app.RemoteInput$Builder(v2.getResultKey()).setLabel(v2.getLabel()).setChoices(v2.getChoices()).setAllowFreeFormInput(v2.getAllowFreeFormInput()).addExtras(v2.getExtras()).build();
                v0++;
            }
        } else {
            v1 = 0;
        }
        return v1;
    }

    static android.os.Bundle getResultsFromIntent(android.content.Intent p1)
    {
        return android.app.RemoteInput.getResultsFromIntent(p1);
    }

    static android.support.v4.app.RemoteInputCompatBase$RemoteInput[] toCompat(android.app.RemoteInput[] p9, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p10)
    {
        android.support.v4.app.RemoteInputCompatBase$RemoteInput[] v7;
        if (p9 != null) {
            v7 = p10.newArray(p9.length);
            int v6 = 0;
            while (v6 < p9.length) {
                android.app.RemoteInput v8 = p9[v6];
                v7[v6] = p10.build(v8.getResultKey(), v8.getLabel(), v8.getChoices(), v8.getAllowFreeFormInput(), v8.getExtras());
                v6++;
            }
        } else {
            v7 = 0;
        }
        return v7;
    }
}
package android.support.v4.app;
public interface RemoteInputCompatBase$RemoteInput$Factory {

    public abstract android.support.v4.app.RemoteInputCompatBase$RemoteInput build();

    public abstract android.support.v4.app.RemoteInputCompatBase$RemoteInput[] newArray();
}
package android.support.v4.app;
public abstract class RemoteInputCompatBase$RemoteInput {

    public RemoteInputCompatBase$RemoteInput()
    {
        return;
    }

    protected abstract boolean getAllowFreeFormInput();

    protected abstract CharSequence[] getChoices();

    protected abstract android.os.Bundle getExtras();

    protected abstract CharSequence getLabel();

    protected abstract String getResultKey();
}
package android.support.v4.app;
 class RemoteInputCompatBase {

    RemoteInputCompatBase()
    {
        return;
    }
}
package android.support.v4.app;
 class RemoteInputCompatJellybean {
    public static final String EXTRA_RESULTS_DATA = "android.remoteinput.resultsData";
    private static final String KEY_ALLOW_FREE_FORM_INPUT = "allowFreeFormInput";
    private static final String KEY_CHOICES = "choices";
    private static final String KEY_EXTRAS = "extras";
    private static final String KEY_LABEL = "label";
    private static final String KEY_RESULT_KEY = "resultKey";
    public static final String RESULTS_CLIP_LABEL = "android.remoteinput.results";

    RemoteInputCompatJellybean()
    {
        return;
    }

    static void addResultsToIntent(android.support.v4.app.RemoteInputCompatBase$RemoteInput[] p7, android.content.Intent p8, android.os.Bundle p9)
    {
        android.os.Bundle v3_1 = new android.os.Bundle();
        int v5 = p7.length;
        int v4_1 = 0;
        while (v4_1 < v5) {
            android.support.v4.app.RemoteInputCompatBase$RemoteInput v1 = p7[v4_1];
            CharSequence v2_0 = p9.get(v1.getResultKey());
            if ((v2_0 instanceof CharSequence)) {
                v3_1.putCharSequence(v1.getResultKey(), ((CharSequence) v2_0));
            }
            v4_1++;
        }
        android.content.Intent v0_1 = new android.content.Intent();
        v0_1.putExtra("android.remoteinput.resultsData", v3_1);
        p8.setClipData(android.content.ClipData.newIntent("android.remoteinput.results", v0_1));
        return;
    }

    static android.support.v4.app.RemoteInputCompatBase$RemoteInput fromBundle(android.os.Bundle p6, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p7)
    {
        return p7.build(p6.getString("resultKey"), p6.getCharSequence("label"), p6.getCharSequenceArray("choices"), p6.getBoolean("allowFreeFormInput"), p6.getBundle("extras"));
    }

    static android.support.v4.app.RemoteInputCompatBase$RemoteInput[] fromBundleArray(android.os.Bundle[] p3, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p4)
    {
        android.support.v4.app.RemoteInputCompatBase$RemoteInput[] v1;
        if (p3 != null) {
            v1 = p4.newArray(p3.length);
            int v0 = 0;
            while (v0 < p3.length) {
                v1[v0] = android.support.v4.app.RemoteInputCompatJellybean.fromBundle(p3[v0], p4);
                v0++;
            }
        } else {
            v1 = 0;
        }
        return v1;
    }

    static android.os.Bundle getResultsFromIntent(android.content.Intent p5)
    {
        android.os.Bundle v2_0 = 0;
        android.content.ClipData v0 = p5.getClipData();
        if (v0 != null) {
            android.content.ClipDescription v1 = v0.getDescription();
            if ((v1.hasMimeType("text/vnd.android.intent")) && (v1.getLabel().equals("android.remoteinput.results"))) {
                v2_0 = ((android.os.Bundle) v0.getItemAt(0).getIntent().getExtras().getParcelable("android.remoteinput.resultsData"));
            }
        }
        return v2_0;
    }

    static android.os.Bundle toBundle(android.support.v4.app.RemoteInputCompatBase$RemoteInput p3)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("resultKey", p3.getResultKey());
        v0_1.putCharSequence("label", p3.getLabel());
        v0_1.putCharSequenceArray("choices", p3.getChoices());
        v0_1.putBoolean("allowFreeFormInput", p3.getAllowFreeFormInput());
        v0_1.putBundle("extras", p3.getExtras());
        return v0_1;
    }

    static android.os.Bundle[] toBundleArray(android.support.v4.app.RemoteInputCompatBase$RemoteInput[] p3)
    {
        android.os.Bundle[] v0;
        if (p3 != null) {
            v0 = new android.os.Bundle[p3.length];
            int v1 = 0;
            while (v1 < p3.length) {
                v0[v1] = android.support.v4.app.RemoteInputCompatJellybean.toBundle(p3[v1]);
                v1++;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }
}
package android.support.v4.app;
interface ServiceCompat$ServiceCompatImpl {

    public abstract void stopForeground();
}
package android.support.v4.app;
public interface annotation ServiceCompat$StopForegroundFlags implements java.lang.annotation.Annotation {
}
package android.support.v4.app;
public final class ServiceCompat {
    static final android.support.v4.app.ServiceCompat$ServiceCompatImpl IMPL = None;
    public static final int START_STICKY = 1;
    public static final int STOP_FOREGROUND_DETACH = 2;
    public static final int STOP_FOREGROUND_REMOVE = 1;

    static ServiceCompat()
    {
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            android.support.v4.app.ServiceCompat.IMPL = new android.support.v4.app.ServiceCompat$BaseServiceCompatImpl();
        } else {
            android.support.v4.app.ServiceCompat.IMPL = new android.support.v4.app.ServiceCompat$Api24ServiceCompatImpl();
        }
        return;
    }

    private ServiceCompat()
    {
        return;
    }

    public static void stopForeground(android.app.Service p1, int p2)
    {
        android.support.v4.app.ServiceCompat.IMPL.stopForeground(p1, p2);
        return;
    }
}
package android.support.v4.app;
 class ServiceCompatApi24 {

    ServiceCompatApi24()
    {
        return;
    }

    public static void stopForeground(android.app.Service p0, int p1)
    {
        p0.stopForeground(p1);
        return;
    }
}
package android.support.v4.app;
public class ShareCompat$IntentBuilder {
    private android.app.Activity mActivity;
    private java.util.ArrayList mBccAddresses;
    private java.util.ArrayList mCcAddresses;
    private CharSequence mChooserTitle;
    private android.content.Intent mIntent;
    private java.util.ArrayList mStreams;
    private java.util.ArrayList mToAddresses;

    private ShareCompat$IntentBuilder(android.app.Activity p4)
    {
        this.mActivity = p4;
        this.mIntent = new android.content.Intent().setAction("android.intent.action.SEND");
        this.mIntent.putExtra("android.support.v4.app.EXTRA_CALLING_PACKAGE", p4.getPackageName());
        this.mIntent.putExtra("android.support.v4.app.EXTRA_CALLING_ACTIVITY", p4.getComponentName());
        this.mIntent.addFlags(524288);
        return;
    }

    private void combineArrayExtra(String p6, java.util.ArrayList p7)
    {
        int v1;
        String[] v0 = this.mIntent.getStringArrayExtra(p6);
        if (v0 == null) {
            v1 = 0;
        } else {
            v1 = v0.length;
        }
        String[] v2 = new String[(p7.size() + v1)];
        p7.toArray(v2);
        if (v0 != null) {
            System.arraycopy(v0, 0, v2, p7.size(), v1);
        }
        this.mIntent.putExtra(p6, v2);
        return;
    }

    private void combineArrayExtra(String p7, String[] p8)
    {
        int v2;
        android.content.Intent v0 = this.getIntent();
        String[] v1 = v0.getStringArrayExtra(p7);
        if (v1 == null) {
            v2 = 0;
        } else {
            v2 = v1.length;
        }
        String[] v3 = new String[(p8.length + v2)];
        if (v1 != null) {
            System.arraycopy(v1, 0, v3, 0, v2);
        }
        System.arraycopy(p8, 0, v3, v2, p8.length);
        v0.putExtra(p7, v3);
        return;
    }

    public static android.support.v4.app.ShareCompat$IntentBuilder from(android.app.Activity p1)
    {
        return new android.support.v4.app.ShareCompat$IntentBuilder(p1);
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(String p2)
    {
        if (this.mBccAddresses == null) {
            this.mBccAddresses = new java.util.ArrayList();
        }
        this.mBccAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.BCC", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(String p2)
    {
        if (this.mCcAddresses == null) {
            this.mCcAddresses = new java.util.ArrayList();
        }
        this.mCcAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.CC", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(String p2)
    {
        if (this.mToAddresses == null) {
            this.mToAddresses = new java.util.ArrayList();
        }
        this.mToAddresses.add(p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(String[] p2)
    {
        this.combineArrayExtra("android.intent.extra.EMAIL", p2);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder addStream(android.net.Uri p4)
    {
        android.net.Uri v0_1 = ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
        if ((this.mStreams != null) || (v0_1 != null)) {
            if (this.mStreams == null) {
                this.mStreams = new java.util.ArrayList();
            }
            if (v0_1 != null) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
                this.mStreams.add(v0_1);
            }
            this.mStreams.add(p4);
        } else {
            this = this.setStream(p4);
        }
        return this;
    }

    public android.content.Intent createChooserIntent()
    {
        return android.content.Intent.createChooser(this.getIntent(), this.mChooserTitle);
    }

    android.app.Activity getActivity()
    {
        return this.mActivity;
    }

    public android.content.Intent getIntent()
    {
        int v1 = 1;
        if (this.mToAddresses != null) {
            this.combineArrayExtra("android.intent.extra.EMAIL", this.mToAddresses);
            this.mToAddresses = 0;
        }
        if (this.mCcAddresses != null) {
            this.combineArrayExtra("android.intent.extra.CC", this.mCcAddresses);
            this.mCcAddresses = 0;
        }
        if (this.mBccAddresses != null) {
            this.combineArrayExtra("android.intent.extra.BCC", this.mBccAddresses);
            this.mBccAddresses = 0;
        }
        if ((this.mStreams == null) || (this.mStreams.size() <= 1)) {
            v1 = 0;
        }
        boolean v0 = this.mIntent.getAction().equals("android.intent.action.SEND_MULTIPLE");
        if ((v1 == 0) && (v0)) {
            this.mIntent.setAction("android.intent.action.SEND");
            if ((this.mStreams == null) || (this.mStreams.isEmpty())) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
            } else {
                this.mIntent.putExtra("android.intent.extra.STREAM", ((android.os.Parcelable) this.mStreams.get(0)));
            }
            this.mStreams = 0;
        }
        if ((v1 != 0) && (!v0)) {
            this.mIntent.setAction("android.intent.action.SEND_MULTIPLE");
            if ((this.mStreams == null) || (this.mStreams.isEmpty())) {
                this.mIntent.removeExtra("android.intent.extra.STREAM");
            } else {
                this.mIntent.putParcelableArrayListExtra("android.intent.extra.STREAM", this.mStreams);
            }
        }
        return this.mIntent;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(int p2)
    {
        return this.setChooserTitle(this.mActivity.getText(p2));
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(CharSequence p1)
    {
        this.mChooserTitle = p1;
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailBcc(String[] p3)
    {
        this.mIntent.putExtra("android.intent.extra.BCC", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailCc(String[] p3)
    {
        this.mIntent.putExtra("android.intent.extra.CC", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setEmailTo(String[] p3)
    {
        if (this.mToAddresses != null) {
            this.mToAddresses = 0;
        }
        this.mIntent.putExtra("android.intent.extra.EMAIL", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setHtmlText(String p3)
    {
        this.mIntent.putExtra("android.intent.extra.HTML_TEXT", p3);
        if (!this.mIntent.hasExtra("android.intent.extra.TEXT")) {
            this.setText(android.text.Html.fromHtml(p3));
        }
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setStream(android.net.Uri p3)
    {
        if (!this.mIntent.getAction().equals("android.intent.action.SEND")) {
            this.mIntent.setAction("android.intent.action.SEND");
        }
        this.mStreams = 0;
        this.mIntent.putExtra("android.intent.extra.STREAM", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setSubject(String p3)
    {
        this.mIntent.putExtra("android.intent.extra.SUBJECT", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setText(CharSequence p3)
    {
        this.mIntent.putExtra("android.intent.extra.TEXT", p3);
        return this;
    }

    public android.support.v4.app.ShareCompat$IntentBuilder setType(String p2)
    {
        this.mIntent.setType(p2);
        return this;
    }

    public void startChooser()
    {
        this.mActivity.startActivity(this.createChooserIntent());
        return;
    }
}
package android.support.v4.app;
public class ShareCompat$IntentReader {
    private static final String TAG = "IntentReader";
    private android.app.Activity mActivity;
    private android.content.ComponentName mCallingActivity;
    private String mCallingPackage;
    private android.content.Intent mIntent;
    private java.util.ArrayList mStreams;

    private ShareCompat$IntentReader(android.app.Activity p2)
    {
        this.mActivity = p2;
        this.mIntent = p2.getIntent();
        this.mCallingPackage = android.support.v4.app.ShareCompat.getCallingPackage(p2);
        this.mCallingActivity = android.support.v4.app.ShareCompat.getCallingActivity(p2);
        return;
    }

    public static android.support.v4.app.ShareCompat$IntentReader from(android.app.Activity p1)
    {
        return new android.support.v4.app.ShareCompat$IntentReader(p1);
    }

    public android.content.ComponentName getCallingActivity()
    {
        return this.mCallingActivity;
    }

    public android.graphics.drawable.Drawable getCallingActivityIcon()
    {
        android.graphics.drawable.Drawable v2 = 0;
        if (this.mCallingActivity != null) {
            try {
                v2 = this.mActivity.getPackageManager().getActivityIcon(this.mCallingActivity);
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve icon for calling activity", v0);
            }
        }
        return v2;
    }

    public android.graphics.drawable.Drawable getCallingApplicationIcon()
    {
        android.graphics.drawable.Drawable v2 = 0;
        if (this.mCallingPackage != null) {
            try {
                v2 = this.mActivity.getPackageManager().getApplicationIcon(this.mCallingPackage);
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve icon for calling application", v0);
            }
        }
        return v2;
    }

    public CharSequence getCallingApplicationLabel()
    {
        CharSequence v2 = 0;
        if (this.mCallingPackage != null) {
            android.content.pm.PackageManager v1 = this.mActivity.getPackageManager();
            try {
                v2 = v1.getApplicationLabel(v1.getApplicationInfo(this.mCallingPackage, 0));
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("IntentReader", "Could not retrieve label for calling application", v0);
            }
        }
        return v2;
    }

    public String getCallingPackage()
    {
        return this.mCallingPackage;
    }

    public String[] getEmailBcc()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.BCC");
    }

    public String[] getEmailCc()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.CC");
    }

    public String[] getEmailTo()
    {
        return this.mIntent.getStringArrayExtra("android.intent.extra.EMAIL");
    }

    public String getHtmlText()
    {
        String v0 = this.mIntent.getStringExtra("android.intent.extra.HTML_TEXT");
        if (v0 == null) {
            android.text.Spanned v1_1 = this.getText();
            if (!(v1_1 instanceof android.text.Spanned)) {
                if (v1_1 != null) {
                    v0 = android.support.v4.app.ShareCompat.IMPL.escapeHtml(v1_1);
                }
            } else {
                v0 = android.text.Html.toHtml(((android.text.Spanned) v1_1));
            }
        }
        return v0;
    }

    public android.net.Uri getStream()
    {
        return ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
    }

    public android.net.Uri getStream(int p4)
    {
        if ((this.mStreams == null) && (this.isMultipleShare())) {
            this.mStreams = this.mIntent.getParcelableArrayListExtra("android.intent.extra.STREAM");
        }
        IndexOutOfBoundsException v0_7;
        if (this.mStreams == null) {
            if (p4 != 0) {
                throw new IndexOutOfBoundsException(new StringBuilder().append("Stream items available: ").append(this.getStreamCount()).append(" index requested: ").append(p4).toString());
            } else {
                v0_7 = ((android.net.Uri) this.mIntent.getParcelableExtra("android.intent.extra.STREAM"));
            }
        } else {
            v0_7 = ((android.net.Uri) this.mStreams.get(p4));
        }
        return v0_7;
    }

    public int getStreamCount()
    {
        if ((this.mStreams == null) && (this.isMultipleShare())) {
            this.mStreams = this.mIntent.getParcelableArrayListExtra("android.intent.extra.STREAM");
        }
        int v0_4;
        if (this.mStreams == null) {
            if (!this.mIntent.hasExtra("android.intent.extra.STREAM")) {
                v0_4 = 0;
            } else {
                v0_4 = 1;
            }
        } else {
            v0_4 = this.mStreams.size();
        }
        return v0_4;
    }

    public String getSubject()
    {
        return this.mIntent.getStringExtra("android.intent.extra.SUBJECT");
    }

    public CharSequence getText()
    {
        return this.mIntent.getCharSequenceExtra("android.intent.extra.TEXT");
    }

    public String getType()
    {
        return this.mIntent.getType();
    }

    public boolean isMultipleShare()
    {
        return "android.intent.action.SEND_MULTIPLE".equals(this.mIntent.getAction());
    }

    public boolean isShareIntent()
    {
        int v1_1;
        String v0 = this.mIntent.getAction();
        if ((!"android.intent.action.SEND".equals(v0)) && (!"android.intent.action.SEND_MULTIPLE".equals(v0))) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }

    public boolean isSingleShare()
    {
        return "android.intent.action.SEND".equals(this.mIntent.getAction());
    }
}
package android.support.v4.app;
interface ShareCompat$ShareCompatImpl {

    public abstract void configureMenuItem();

    public abstract String escapeHtml();
}
package android.support.v4.app;
public final class ShareCompat {
    public static final String EXTRA_CALLING_ACTIVITY = "android.support.v4.app.EXTRA_CALLING_ACTIVITY";
    public static final String EXTRA_CALLING_PACKAGE = "android.support.v4.app.EXTRA_CALLING_PACKAGE";
    static android.support.v4.app.ShareCompat$ShareCompatImpl IMPL;

    static ShareCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                android.support.v4.app.ShareCompat.IMPL = new android.support.v4.app.ShareCompat$ShareCompatImplBase();
            } else {
                android.support.v4.app.ShareCompat.IMPL = new android.support.v4.app.ShareCompat$ShareCompatImplICS();
            }
        } else {
            android.support.v4.app.ShareCompat.IMPL = new android.support.v4.app.ShareCompat$ShareCompatImplJB();
        }
        return;
    }

    private ShareCompat()
    {
        return;
    }

    public static void configureMenuItem(android.view.Menu p4, int p5, android.support.v4.app.ShareCompat$IntentBuilder p6)
    {
        android.view.MenuItem v0 = p4.findItem(p5);
        if (v0 != null) {
            android.support.v4.app.ShareCompat.configureMenuItem(v0, p6);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Could not find menu item with id ").append(p5).append(" in the supplied menu").toString());
        }
    }

    public static void configureMenuItem(android.view.MenuItem p1, android.support.v4.app.ShareCompat$IntentBuilder p2)
    {
        android.support.v4.app.ShareCompat.IMPL.configureMenuItem(p1, p2);
        return;
    }

    public static android.content.ComponentName getCallingActivity(android.app.Activity p3)
    {
        android.content.ComponentName v0_0 = p3.getCallingActivity();
        if (v0_0 == null) {
            v0_0 = ((android.content.ComponentName) p3.getIntent().getParcelableExtra("android.support.v4.app.EXTRA_CALLING_ACTIVITY"));
        }
        return v0_0;
    }

    public static String getCallingPackage(android.app.Activity p3)
    {
        String v0 = p3.getCallingPackage();
        if (v0 == null) {
            v0 = p3.getIntent().getStringExtra("android.support.v4.app.EXTRA_CALLING_PACKAGE");
        }
        return v0;
    }
}
package android.support.v4.app;
 class ShareCompatICS {
    private static final String HISTORY_FILENAME_PREFIX = ".sharecompat_";

    ShareCompatICS()
    {
        return;
    }

    public static void configureMenuItem(android.view.MenuItem p4, android.app.Activity p5, android.content.Intent p6)
    {
        android.widget.ShareActionProvider v1_1;
        android.view.ActionProvider v0 = p4.getActionProvider();
        if ((v0 instanceof android.widget.ShareActionProvider)) {
            v1_1 = ((android.widget.ShareActionProvider) v0);
        } else {
            v1_1 = new android.widget.ShareActionProvider(p5);
        }
        v1_1.setShareHistoryFileName(new StringBuilder().append(".sharecompat_").append(p5.getClass().getName()).toString());
        v1_1.setShareIntent(p6);
        p4.setActionProvider(v1_1);
        return;
    }
}
package android.support.v4.app;
 class ShareCompatJB {

    ShareCompatJB()
    {
        return;
    }

    public static String escapeHtml(CharSequence p1)
    {
        return android.text.Html.escapeHtml(p1);
    }
}
package android.support.v4.app;
public interface SharedElementCallback$OnSharedElementsReadyListener {

    public abstract void onSharedElementsReady();
}
package android.support.v4.app;
public abstract class SharedElementCallback {
    private static final String BUNDLE_SNAPSHOT_BITMAP = "sharedElement:snapshot:bitmap";
    private static final String BUNDLE_SNAPSHOT_IMAGE_MATRIX = "sharedElement:snapshot:imageMatrix";
    private static final String BUNDLE_SNAPSHOT_IMAGE_SCALETYPE = "sharedElement:snapshot:imageScaleType";
    private static int MAX_IMAGE_SIZE;
    private android.graphics.Matrix mTempMatrix;

    static SharedElementCallback()
    {
        android.support.v4.app.SharedElementCallback.MAX_IMAGE_SIZE = 1048576;
        return;
    }

    public SharedElementCallback()
    {
        return;
    }

    private static android.graphics.Bitmap createDrawableBitmap(android.graphics.drawable.Drawable p15)
    {
        android.graphics.Bitmap v0;
        int v11 = p15.getIntrinsicWidth();
        int v6 = p15.getIntrinsicHeight();
        if ((v11 > 0) && (v6 > 0)) {
            float v9 = Math.min(1065353216, (((float) android.support.v4.app.SharedElementCallback.MAX_IMAGE_SIZE) / ((float) (v11 * v6))));
            if ((!(p15 instanceof android.graphics.drawable.BitmapDrawable)) || (v9 != 1065353216)) {
                int v2 = ((int) (((float) v11) * v9));
                int v1 = ((int) (((float) v6) * v9));
                v0 = android.graphics.Bitmap.createBitmap(v2, v1, android.graphics.Bitmap$Config.ARGB_8888);
                android.graphics.Canvas v4_1 = new android.graphics.Canvas(v0);
                android.graphics.Rect v5 = p15.getBounds();
                int v7 = v5.left;
                int v10 = v5.top;
                int v8 = v5.right;
                int v3 = v5.bottom;
                p15.setBounds(0, 0, v2, v1);
                p15.draw(v4_1);
                p15.setBounds(v7, v10, v8, v3);
            } else {
                v0 = ((android.graphics.drawable.BitmapDrawable) p15).getBitmap();
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View p16, android.graphics.Matrix p17, android.graphics.RectF p18)
    {
        android.os.Bundle v5_0;
        if (!(p16 instanceof android.widget.ImageView)) {
            int v4_0 = Math.round(p18.width());
            int v3_0 = Math.round(p18.height());
            android.graphics.Bitmap v2_1 = 0;
            if ((v4_0 > 0) && (v3_0 > 0)) {
                float v10 = Math.min(1065353216, (((float) android.support.v4.app.SharedElementCallback.MAX_IMAGE_SIZE) / ((float) (v4_0 * v3_0))));
                int v4_1 = ((int) (((float) v4_0) * v10));
                int v3_1 = ((int) (((float) v3_0) * v10));
                if (this.mTempMatrix == null) {
                    this.mTempMatrix = new android.graphics.Matrix();
                }
                this.mTempMatrix.set(p17);
                this.mTempMatrix.postTranslate((- p18.left), (- p18.top));
                this.mTempMatrix.postScale(v10, v10);
                v2_1 = android.graphics.Bitmap.createBitmap(v4_1, v3_1, android.graphics.Bitmap$Config.ARGB_8888);
                android.graphics.Canvas v6_1 = new android.graphics.Canvas(v2_1);
                v6_1.concat(this.mTempMatrix);
                p16.draw(v6_1);
            }
            v5_0 = v2_1;
        } else {
            android.graphics.drawable.Drawable v7 = ((android.widget.ImageView) p16).getDrawable();
            android.graphics.drawable.Drawable v1 = ((android.widget.ImageView) p16).getBackground();
            if ((v7 == null) || (v1 != null)) {
            } else {
                android.graphics.Bitmap v2_0 = android.support.v4.app.SharedElementCallback.createDrawableBitmap(v7);
                if (v2_0 == null) {
                } else {
                    v5_0 = new android.os.Bundle();
                    v5_0.putParcelable("sharedElement:snapshot:bitmap", v2_0);
                    v5_0.putString("sharedElement:snapshot:imageScaleType", ((android.widget.ImageView) p16).getScaleType().toString());
                    if (((android.widget.ImageView) p16).getScaleType() == android.widget.ImageView$ScaleType.MATRIX) {
                        float[] v11 = new float[9];
                        ((android.widget.ImageView) p16).getImageMatrix().getValues(v11);
                        v5_0.putFloatArray("sharedElement:snapshot:imageMatrix", v11);
                    }
                }
            }
        }
        return v5_0;
    }

    public android.view.View onCreateSnapshotView(android.content.Context p9, android.os.Parcelable p10)
    {
        String v6_8;
        android.widget.ImageView v5_0 = 0;
        if (!(p10 instanceof android.os.Bundle)) {
            if (!(p10 instanceof android.graphics.Bitmap)) {
                v6_8 = v5_0;
            } else {
                v5_0 = new android.widget.ImageView(p9);
                v5_0.setImageBitmap(((android.graphics.Bitmap) p10));
            }
        } else {
            android.graphics.Bitmap v0_1 = ((android.graphics.Bitmap) ((android.os.Bundle) p10).getParcelable("sharedElement:snapshot:bitmap"));
            if (v0_1 != null) {
                android.widget.ImageView v2_1 = new android.widget.ImageView(p9);
                v5_0 = v2_1;
                v2_1.setImageBitmap(v0_1);
                v2_1.setScaleType(android.widget.ImageView$ScaleType.valueOf(((android.os.Bundle) p10).getString("sharedElement:snapshot:imageScaleType")));
                if (v2_1.getScaleType() != android.widget.ImageView$ScaleType.MATRIX) {
                } else {
                    float[] v4 = ((android.os.Bundle) p10).getFloatArray("sharedElement:snapshot:imageMatrix");
                    android.graphics.Matrix v3_1 = new android.graphics.Matrix();
                    v3_1.setValues(v4);
                    v2_1.setImageMatrix(v3_1);
                }
            } else {
                v6_8 = 0;
            }
        }
        return v6_8;
    }

    public void onMapSharedElements(java.util.List p1, java.util.Map p2)
    {
        return;
    }

    public void onRejectSharedElements(java.util.List p1)
    {
        return;
    }

    public void onSharedElementEnd(java.util.List p1, java.util.List p2, java.util.List p3)
    {
        return;
    }

    public void onSharedElementStart(java.util.List p1, java.util.List p2, java.util.List p3)
    {
        return;
    }

    public void onSharedElementsArrived(java.util.List p1, java.util.List p2, android.support.v4.app.SharedElementCallback$OnSharedElementsReadyListener p3)
    {
        p3.onSharedElementsReady();
        return;
    }
}
package android.support.v4.app;
final class SuperNotCalledException extends android.util.AndroidRuntimeException {

    public SuperNotCalledException(String p1)
    {
        super(p1);
        return;
    }
}
package android.support.v4.app;
public interface TaskStackBuilder$SupportParentable {

    public abstract android.content.Intent getSupportParentActivityIntent();
}
package android.support.v4.app;
interface TaskStackBuilder$TaskStackBuilderImpl {

    public abstract android.app.PendingIntent getPendingIntent();
}
package android.support.v4.app;
public final class TaskStackBuilder implements java.lang.Iterable {
    private static final android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL = None;
    private static final String TAG = "TaskStackBuilder";
    private final java.util.ArrayList mIntents;
    private final android.content.Context mSourceContext;

    static TaskStackBuilder()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.app.TaskStackBuilder.IMPL = new android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase();
        } else {
            android.support.v4.app.TaskStackBuilder.IMPL = new android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb();
        }
        return;
    }

    private TaskStackBuilder(android.content.Context p2)
    {
        this.mIntents = new java.util.ArrayList();
        this.mSourceContext = p2;
        return;
    }

    public static android.support.v4.app.TaskStackBuilder create(android.content.Context p1)
    {
        return new android.support.v4.app.TaskStackBuilder(p1);
    }

    public static android.support.v4.app.TaskStackBuilder from(android.content.Context p1)
    {
        return android.support.v4.app.TaskStackBuilder.create(p1);
    }

    public android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent p2)
    {
        this.mIntents.add(p2);
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent p3)
    {
        android.content.ComponentName v0 = p3.getComponent();
        if (v0 == null) {
            v0 = p3.resolveActivity(this.mSourceContext.getPackageManager());
        }
        if (v0 != null) {
            this.addParentStack(v0);
        }
        this.addNextIntent(p3);
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity p4)
    {
        android.content.Intent v0 = 0;
        if ((p4 instanceof android.support.v4.app.TaskStackBuilder$SupportParentable)) {
            v0 = ((android.support.v4.app.TaskStackBuilder$SupportParentable) p4).getSupportParentActivityIntent();
        }
        if (v0 == null) {
            v0 = android.support.v4.app.NavUtils.getParentActivityIntent(p4);
        }
        if (v0 != null) {
            android.content.ComponentName v1 = v0.getComponent();
            if (v1 == null) {
                v1 = v0.resolveActivity(this.mSourceContext.getPackageManager());
            }
            this.addParentStack(v1);
            this.addNextIntent(v0);
        }
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName p6)
    {
        int v1 = this.mIntents.size();
        try {
            android.content.Intent v2 = android.support.v4.app.NavUtils.getParentActivityIntent(this.mSourceContext, p6);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            android.util.Log.e("TaskStackBuilder", "Bad ComponentName while traversing activity parent metadata");
            throw new IllegalArgumentException(v0);
        }
        while (v2 != null) {
            this.mIntents.add(v1, v2);
            v2 = android.support.v4.app.NavUtils.getParentActivityIntent(this.mSourceContext, v2.getComponent());
        }
        return this;
    }

    public android.support.v4.app.TaskStackBuilder addParentStack(Class p3)
    {
        return this.addParentStack(new android.content.ComponentName(this.mSourceContext, p3));
    }

    public android.content.Intent editIntentAt(int p2)
    {
        return ((android.content.Intent) this.mIntents.get(p2));
    }

    public android.content.Intent getIntent(int p2)
    {
        return this.editIntentAt(p2);
    }

    public int getIntentCount()
    {
        return this.mIntents.size();
    }

    public android.content.Intent[] getIntents()
    {
        android.content.Intent[] v1 = new android.content.Intent[this.mIntents.size()];
        if (v1.length != 0) {
            v1[0] = new android.content.Intent(((android.content.Intent) this.mIntents.get(0))).addFlags(268484608);
            int v0 = 1;
            while (v0 < v1.length) {
                v1[v0] = new android.content.Intent(((android.content.Intent) this.mIntents.get(v0)));
                v0++;
            }
        }
        return v1;
    }

    public android.app.PendingIntent getPendingIntent(int p2, int p3)
    {
        return this.getPendingIntent(p2, p3, 0);
    }

    public android.app.PendingIntent getPendingIntent(int p7, int p8, android.os.Bundle p9)
    {
        if (!this.mIntents.isEmpty()) {
            android.content.Context v1_6 = new android.content.Intent[this.mIntents.size()];
            android.content.Intent[] v2_1 = ((android.content.Intent[]) this.mIntents.toArray(v1_6));
            v2_1[0] = new android.content.Intent(v2_1[0]).addFlags(268484608);
            return android.support.v4.app.TaskStackBuilder.IMPL.getPendingIntent(this.mSourceContext, v2_1, p7, p8, p9);
        } else {
            throw new IllegalStateException("No intents added to TaskStackBuilder; cannot getPendingIntent");
        }
    }

    public java.util.Iterator iterator()
    {
        return this.mIntents.iterator();
    }

    public void startActivities()
    {
        this.startActivities(0);
        return;
    }

    public void startActivities(android.os.Bundle p6)
    {
        if (!this.mIntents.isEmpty()) {
            int v3_5 = new android.content.Intent[this.mIntents.size()];
            android.content.Intent[] v0_1 = ((android.content.Intent[]) this.mIntents.toArray(v3_5));
            v0_1[0] = new android.content.Intent(v0_1[0]).addFlags(268484608);
            if (!android.support.v4.content.ContextCompat.startActivities(this.mSourceContext, v0_1, p6)) {
                android.content.Intent v1_1 = new android.content.Intent(v0_1[(v0_1.length - 1)]);
                v1_1.addFlags(268435456);
                this.mSourceContext.startActivity(v1_1);
            }
            return;
        } else {
            throw new IllegalStateException("No intents added to TaskStackBuilder; cannot startActivities");
        }
    }
}
package android.support.v4.app;
 class TaskStackBuilderHoneycomb {

    TaskStackBuilderHoneycomb()
    {
        return;
    }

    public static android.app.PendingIntent getActivitiesPendingIntent(android.content.Context p1, int p2, android.content.Intent[] p3, int p4)
    {
        return android.app.PendingIntent.getActivities(p1, p2, p3, p4);
    }
}
package android.support.v4.app;
 class TaskStackBuilderJellybean {

    TaskStackBuilderJellybean()
    {
        return;
    }

    public static android.app.PendingIntent getActivitiesPendingIntent(android.content.Context p1, int p2, android.content.Intent[] p3, int p4, android.os.Bundle p5)
    {
        return android.app.PendingIntent.getActivities(p1, p2, p3, p4, p5);
    }
}
package android.support.v4.content;
interface ContentResolverCompat$ContentResolverCompatImpl {

    public abstract android.database.Cursor query();
}
package android.support.v4.content;
public final class ContentResolverCompat {
    private static final android.support.v4.content.ContentResolverCompat$ContentResolverCompatImpl IMPL;

    static ContentResolverCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            android.support.v4.content.ContentResolverCompat.IMPL = new android.support.v4.content.ContentResolverCompat$ContentResolverCompatImplBase();
        } else {
            android.support.v4.content.ContentResolverCompat.IMPL = new android.support.v4.content.ContentResolverCompat$ContentResolverCompatImplJB();
        }
        return;
    }

    private ContentResolverCompat()
    {
        return;
    }

    public static android.database.Cursor query(android.content.ContentResolver p8, android.net.Uri p9, String[] p10, String p11, String[] p12, String p13, android.support.v4.os.CancellationSignal p14)
    {
        return android.support.v4.content.ContentResolverCompat.IMPL.query(p8, p9, p10, p11, p12, p13, p14);
    }
}
package android.support.v4.content;
 class ContentResolverCompatJellybean {

    ContentResolverCompatJellybean()
    {
        return;
    }

    static boolean isFrameworkOperationCanceledException(Exception p1)
    {
        return (p1 instanceof android.os.OperationCanceledException);
    }

    public static android.database.Cursor query(android.content.ContentResolver p7, android.net.Uri p8, String[] p9, String p10, String[] p11, String p12, Object p13)
    {
        return p7.query(p8, p9, p10, p11, p12, ((android.os.CancellationSignal) p13));
    }
}
package android.support.v4.content;
public class ContextCompat {
    private static final String DIR_ANDROID = "Android";
    private static final String DIR_OBB = "obb";
    private static final String TAG = "ContextCompat";
    private static final Object sLock;
    private static android.util.TypedValue sTempValue;

    static ContextCompat()
    {
        android.support.v4.content.ContextCompat.sLock = new Object();
        return;
    }

    protected ContextCompat()
    {
        return;
    }

    private static varargs java.io.File buildPath(java.io.File p5, String[] p6)
    {
        int v4 = p6.length;
        int v3 = 0;
        java.io.File v1 = p5;
        while (v3 < v4) {
            java.io.File v0_2;
            String v2 = p6[v3];
            if (v1 != null) {
                if (v2 == null) {
                    v0_2 = v1;
                } else {
                    v0_2 = new java.io.File(v1, v2);
                }
            } else {
                v0_2 = new java.io.File(v2);
            }
            v3++;
            v1 = v0_2;
        }
        return v1;
    }

    public static int checkSelfPermission(android.content.Context p2, String p3)
    {
        if (p3 != null) {
            return p2.checkPermission(p3, android.os.Process.myPid(), android.os.Process.myUid());
        } else {
            throw new IllegalArgumentException("permission is null");
        }
    }

    public static android.content.Context createDeviceProtectedStorageContext(android.content.Context p1)
    {
        int v0_1;
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            v0_1 = 0;
        } else {
            v0_1 = android.support.v4.content.ContextCompatApi24.createDeviceProtectedStorageContext(p1);
        }
        return v0_1;
    }

    private static declared_synchronized java.io.File createFilesDir(java.io.File p4)
    {
        try {
            if ((!p4.exists()) && ((!p4.mkdirs()) && (!p4.exists()))) {
                android.util.Log.w("ContextCompat", new StringBuilder().append("Unable to create files subdir ").append(p4.getPath()).toString());
                p4 = 0;
            }
        } catch (String v0_2) {
            throw v0_2;
        }
        return p4;
    }

    public static java.io.File getCodeCacheDir(android.content.Context p5)
    {
        java.io.File v2_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v2_1 = android.support.v4.content.ContextCompat.createFilesDir(new java.io.File(p5.getApplicationInfo().dataDir, "code_cache"));
        } else {
            v2_1 = android.support.v4.content.ContextCompatApi21.getCodeCacheDir(p5);
        }
        return v2_1;
    }

    public static final int getColor(android.content.Context p2, int p3)
    {
        int v1_2;
        if (android.os.Build$VERSION.SDK_INT < 23) {
            v1_2 = p2.getResources().getColor(p3);
        } else {
            v1_2 = android.support.v4.content.ContextCompatApi23.getColor(p2, p3);
        }
        return v1_2;
    }

    public static final android.content.res.ColorStateList getColorStateList(android.content.Context p2, int p3)
    {
        android.content.res.ColorStateList v1_2;
        if (android.os.Build$VERSION.SDK_INT < 23) {
            v1_2 = p2.getResources().getColorStateList(p3);
        } else {
            v1_2 = android.support.v4.content.ContextCompatApi23.getColorStateList(p2, p3);
        }
        return v1_2;
    }

    public static java.io.File getDataDir(android.content.Context p2)
    {
        int v1_1;
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            String v0 = p2.getApplicationInfo().dataDir;
            if (v0 == null) {
                v1_1 = 0;
            } else {
                v1_1 = new java.io.File(v0);
            }
        } else {
            v1_1 = android.support.v4.content.ContextCompatApi24.getDataDir(p2);
        }
        return v1_1;
    }

    public static final android.graphics.drawable.Drawable getDrawable(android.content.Context p6, int p7)
    {
        android.graphics.drawable.Drawable v2_5;
        int v1 = android.os.Build$VERSION.SDK_INT;
        if (v1 < 21) {
            if (v1 < 16) {
                if (android.support.v4.content.ContextCompat.sTempValue == null) {
                    android.support.v4.content.ContextCompat.sTempValue = new android.util.TypedValue();
                }
                p6.getResources().getValue(p7, android.support.v4.content.ContextCompat.sTempValue, 1);
                v2_5 = p6.getResources().getDrawable(android.support.v4.content.ContextCompat.sTempValue.resourceId);
            } else {
                v2_5 = p6.getResources().getDrawable(p7);
            }
        } else {
            v2_5 = android.support.v4.content.ContextCompatApi21.getDrawable(p6, p7);
        }
        return v2_5;
    }

    public static java.io.File[] getExternalCacheDirs(android.content.Context p4)
    {
        java.io.File[] v1_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v1_1 = new java.io.File[1];
            v1_1[0] = p4.getExternalCacheDir();
        } else {
            v1_1 = android.support.v4.content.ContextCompatKitKat.getExternalCacheDirs(p4);
        }
        return v1_1;
    }

    public static java.io.File[] getExternalFilesDirs(android.content.Context p4, String p5)
    {
        java.io.File[] v1_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v1_1 = new java.io.File[1];
            v1_1[0] = p4.getExternalFilesDir(p5);
        } else {
            v1_1 = android.support.v4.content.ContextCompatKitKat.getExternalFilesDirs(p4, p5);
        }
        return v1_1;
    }

    public static final java.io.File getNoBackupFilesDir(android.content.Context p5)
    {
        java.io.File v2_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v2_1 = android.support.v4.content.ContextCompat.createFilesDir(new java.io.File(p5.getApplicationInfo().dataDir, "no_backup"));
        } else {
            v2_1 = android.support.v4.content.ContextCompatApi21.getNoBackupFilesDir(p5);
        }
        return v2_1;
    }

    public static java.io.File[] getObbDirs(android.content.Context p8)
    {
        java.io.File[] v2_0;
        int v1 = android.os.Build$VERSION.SDK_INT;
        if (v1 < 19) {
            java.io.File v0;
            if (v1 < 11) {
                java.io.File[] v2_3 = android.os.Environment.getExternalStorageDirectory();
                String[] v3_0 = new String[3];
                v3_0[0] = "Android";
                v3_0[1] = "obb";
                v3_0[2] = p8.getPackageName();
                v0 = android.support.v4.content.ContextCompat.buildPath(v2_3, v3_0);
            } else {
                v0 = android.support.v4.content.ContextCompatHoneycomb.getObbDir(p8);
            }
            v2_0 = new java.io.File[1];
            v2_0[0] = v0;
        } else {
            v2_0 = android.support.v4.content.ContextCompatKitKat.getObbDirs(p8);
        }
        return v2_0;
    }

    public static boolean isDeviceProtectedStorage(android.content.Context p1)
    {
        int v0_1;
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            v0_1 = 0;
        } else {
            v0_1 = android.support.v4.content.ContextCompatApi24.isDeviceProtectedStorage(p1);
        }
        return v0_1;
    }

    public static boolean startActivities(android.content.Context p1, android.content.Intent[] p2)
    {
        return android.support.v4.content.ContextCompat.startActivities(p1, p2, 0);
    }

    public static boolean startActivities(android.content.Context p3, android.content.Intent[] p4, android.os.Bundle p5)
    {
        int v1 = 1;
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 16) {
            if (v0 < 11) {
                v1 = 0;
            } else {
                android.support.v4.content.ContextCompatHoneycomb.startActivities(p3, p4);
            }
        } else {
            android.support.v4.content.ContextCompatJellybean.startActivities(p3, p4, p5);
        }
        return v1;
    }

    public static void startActivity(android.content.Context p2, android.content.Intent p3, android.os.Bundle p4)
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            p2.startActivity(p3);
        } else {
            android.support.v4.content.ContextCompatJellybean.startActivity(p2, p3, p4);
        }
        return;
    }
}
package android.support.v4.content;
 class ContextCompatApi21 {

    ContextCompatApi21()
    {
        return;
    }

    public static java.io.File getCodeCacheDir(android.content.Context p1)
    {
        return p1.getCodeCacheDir();
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.Context p1, int p2)
    {
        return p1.getDrawable(p2);
    }

    public static java.io.File getNoBackupFilesDir(android.content.Context p1)
    {
        return p1.getNoBackupFilesDir();
    }
}
package android.support.v4.content;
 class ContextCompatApi23 {

    ContextCompatApi23()
    {
        return;
    }

    public static int getColor(android.content.Context p1, int p2)
    {
        return p1.getColor(p2);
    }

    public static android.content.res.ColorStateList getColorStateList(android.content.Context p1, int p2)
    {
        return p1.getColorStateList(p2);
    }
}
package android.support.v4.content;
 class ContextCompatApi24 {

    ContextCompatApi24()
    {
        return;
    }

    public static android.content.Context createDeviceProtectedStorageContext(android.content.Context p1)
    {
        return p1.createDeviceProtectedStorageContext();
    }

    public static java.io.File getDataDir(android.content.Context p1)
    {
        return p1.getDataDir();
    }

    public static boolean isDeviceProtectedStorage(android.content.Context p1)
    {
        return p1.isDeviceProtectedStorage();
    }
}
package android.support.v4.content;
 class ContextCompatHoneycomb {

    ContextCompatHoneycomb()
    {
        return;
    }

    public static java.io.File getObbDir(android.content.Context p1)
    {
        return p1.getObbDir();
    }

    static void startActivities(android.content.Context p0, android.content.Intent[] p1)
    {
        p0.startActivities(p1);
        return;
    }
}
package android.support.v4.content;
 class ContextCompatJellybean {

    ContextCompatJellybean()
    {
        return;
    }

    public static void startActivities(android.content.Context p0, android.content.Intent[] p1, android.os.Bundle p2)
    {
        p0.startActivities(p1, p2);
        return;
    }

    public static void startActivity(android.content.Context p0, android.content.Intent p1, android.os.Bundle p2)
    {
        p0.startActivity(p1, p2);
        return;
    }
}
package android.support.v4.content;
 class ContextCompatKitKat {

    ContextCompatKitKat()
    {
        return;
    }

    public static java.io.File[] getExternalCacheDirs(android.content.Context p1)
    {
        return p1.getExternalCacheDirs();
    }

    public static java.io.File[] getExternalFilesDirs(android.content.Context p1, String p2)
    {
        return p1.getExternalFilesDirs(p2);
    }

    public static java.io.File[] getObbDirs(android.content.Context p1)
    {
        return p1.getObbDirs();
    }
}
package android.support.v4.content;
 class ExecutorCompatHoneycomb {

    ExecutorCompatHoneycomb()
    {
        return;
    }

    public static java.util.concurrent.Executor getParallelExecutor()
    {
        return android.os.AsyncTask.THREAD_POOL_EXECUTOR;
    }
}
package android.support.v4.content;
interface FileProvider$PathStrategy {

    public abstract java.io.File getFileForUri();

    public abstract android.net.Uri getUriForFile();
}
package android.support.v4.content;
public class FileProvider extends android.content.ContentProvider {
    private static final String ATTR_NAME = "name";
    private static final String ATTR_PATH = "path";
    private static final String[] COLUMNS = None;
    private static final java.io.File DEVICE_ROOT = None;
    private static final String META_DATA_FILE_PROVIDER_PATHS = "android.support.FILE_PROVIDER_PATHS";
    private static final String TAG_CACHE_PATH = "cache-path";
    private static final String TAG_EXTERNAL = "external-path";
    private static final String TAG_EXTERNAL_CACHE = "external-cache-path";
    private static final String TAG_EXTERNAL_FILES = "external-files-path";
    private static final String TAG_FILES_PATH = "files-path";
    private static final String TAG_ROOT_PATH = "root-path";
    private static java.util.HashMap sCache;
    private android.support.v4.content.FileProvider$PathStrategy mStrategy;

    static FileProvider()
    {
        java.util.HashMap v0_1 = new String[2];
        v0_1[0] = "_display_name";
        v0_1[1] = "_size";
        android.support.v4.content.FileProvider.COLUMNS = v0_1;
        android.support.v4.content.FileProvider.DEVICE_ROOT = new java.io.File("/");
        android.support.v4.content.FileProvider.sCache = new java.util.HashMap();
        return;
    }

    public FileProvider()
    {
        return;
    }

    private static varargs java.io.File buildPath(java.io.File p5, String[] p6)
    {
        int v4 = p6.length;
        int v3 = 0;
        java.io.File v1 = p5;
        while (v3 < v4) {
            java.io.File v0_1;
            String v2 = p6[v3];
            if (v2 == null) {
                v0_1 = v1;
            } else {
                v0_1 = new java.io.File(v1, v2);
            }
            v3++;
            v1 = v0_1;
        }
        return v1;
    }

    private static Object[] copyOf(Object[] p2, int p3)
    {
        Object[] v0 = new Object[p3];
        System.arraycopy(p2, 0, v0, 0, p3);
        return v0;
    }

    private static String[] copyOf(String[] p2, int p3)
    {
        String[] v0 = new String[p3];
        System.arraycopy(p2, 0, v0, 0, p3);
        return v0;
    }

    private static android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context p5, String p6)
    {
        try {
            android.support.v4.content.FileProvider$PathStrategy v1_1 = ((android.support.v4.content.FileProvider$PathStrategy) android.support.v4.content.FileProvider.sCache.get(p6));
        } catch (IllegalArgumentException v2_5) {
            throw v2_5;
        }
        if (v1_1 == null) {
            try {
                v1_1 = android.support.v4.content.FileProvider.parsePathStrategy(p5, p6);
            } catch (org.xmlpull.v1.XmlPullParserException v0_1) {
                throw new IllegalArgumentException("Failed to parse android.support.FILE_PROVIDER_PATHS meta-data", v0_1);
            }
            android.support.v4.content.FileProvider.sCache.put(p6, v1_1);
        }
        return v1_1;
    }

    public static android.net.Uri getUriForFile(android.content.Context p2, String p3, java.io.File p4)
    {
        return android.support.v4.content.FileProvider.getPathStrategy(p2, p3).getUriForFile(p4);
    }

    private static int modeToMode(String p4)
    {
        int v0;
        if (!"r".equals(p4)) {
            if ((!"w".equals(p4)) && (!"wt".equals(p4))) {
                if (!"wa".equals(p4)) {
                    if (!"rw".equals(p4)) {
                        if (!"rwt".equals(p4)) {
                            throw new IllegalArgumentException(new StringBuilder().append("Invalid mode: ").append(p4).toString());
                        } else {
                            v0 = 1006632960;
                        }
                    } else {
                        v0 = 939524096;
                    }
                } else {
                    v0 = 704643072;
                }
            } else {
                v0 = 738197504;
            }
        } else {
            v0 = 268435456;
        }
        return v0;
    }

    private static android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context p12, String p13)
    {
        android.support.v4.content.FileProvider$SimplePathStrategy v6_1 = new android.support.v4.content.FileProvider$SimplePathStrategy(p13);
        android.content.res.XmlResourceParser v2 = p12.getPackageManager().resolveContentProvider(p13, 128).loadXmlMetaData(p12.getPackageManager(), "android.support.FILE_PROVIDER_PATHS");
        if (v2 == null) {
            throw new IllegalArgumentException("Missing android.support.FILE_PROVIDER_PATHS meta-data");
        }
        while(true) {
            int v9 = v2.next();
            if (v9 == 1) {
                break;
            }
            if (v9 == 2) {
                String v7 = v2.getName();
                String v4 = v2.getAttributeValue(0, "name");
                String v5 = v2.getAttributeValue(0, "path");
                java.io.File v8 = 0;
                if (!"root-path".equals(v7)) {
                    if (!"files-path".equals(v7)) {
                        if (!"cache-path".equals(v7)) {
                            if (!"external-path".equals(v7)) {
                                if (!"external-files-path".equals(v7)) {
                                    if ("external-cache-path".equals(v7)) {
                                        java.io.File[] v0 = android.support.v4.content.ContextCompat.getExternalCacheDirs(p12);
                                        if (v0.length > 0) {
                                            v8 = v0[0];
                                        }
                                    }
                                } else {
                                    java.io.File[] v1 = android.support.v4.content.ContextCompat.getExternalFilesDirs(p12, 0);
                                    if (v1.length > 0) {
                                        v8 = v1[0];
                                    }
                                }
                            } else {
                                v8 = android.os.Environment.getExternalStorageDirectory();
                            }
                        } else {
                            v8 = p12.getCacheDir();
                        }
                    } else {
                        v8 = p12.getFilesDir();
                    }
                } else {
                    v8 = android.support.v4.content.FileProvider.DEVICE_ROOT;
                }
                if (v8 != null) {
                    int v10_23 = new String[1];
                    v10_23[0] = v5;
                    v6_1.addRoot(v4, android.support.v4.content.FileProvider.buildPath(v8, v10_23));
                }
            }
        }
        return v6_1;
    }

    public void attachInfo(android.content.Context p3, android.content.pm.ProviderInfo p4)
    {
        super.attachInfo(p3, p4);
        if (!p4.exported) {
            if (p4.grantUriPermissions) {
                this.mStrategy = android.support.v4.content.FileProvider.getPathStrategy(p3, p4.authority);
                return;
            } else {
                throw new SecurityException("Provider must grant uri permissions");
            }
        } else {
            throw new SecurityException("Provider must not be exported");
        }
    }

    public int delete(android.net.Uri p3, String p4, String[] p5)
    {
        int v1_2;
        if (!this.mStrategy.getFileForUri(p3).delete()) {
            v1_2 = 0;
        } else {
            v1_2 = 1;
        }
        return v1_2;
    }

    public String getType(android.net.Uri p7)
    {
        String v3;
        java.io.File v1 = this.mStrategy.getFileForUri(p7);
        int v2 = v1.getName().lastIndexOf(46);
        if (v2 < 0) {
            v3 = "application/octet-stream";
        } else {
            v3 = android.webkit.MimeTypeMap.getSingleton().getMimeTypeFromExtension(v1.getName().substring((v2 + 1)));
            if (v3 == null) {
            }
        }
        return v3;
    }

    public android.net.Uri insert(android.net.Uri p3, android.content.ContentValues p4)
    {
        throw new UnsupportedOperationException("No external inserts");
    }

    public boolean onCreate()
    {
        return 1;
    }

    public android.os.ParcelFileDescriptor openFile(android.net.Uri p4, String p5)
    {
        return android.os.ParcelFileDescriptor.open(this.mStrategy.getFileForUri(p4), android.support.v4.content.FileProvider.modeToMode(p5));
    }

    public android.database.Cursor query(android.net.Uri p13, String[] p14, String p15, String[] p16, String p17)
    {
        java.io.File v3 = this.mStrategy.getFileForUri(p13);
        if (p14 == null) {
            p14 = android.support.v4.content.FileProvider.COLUMNS;
        }
        String[] v1_1 = new String[p14.length];
        Object[] v6_1 = new Object[p14.length];
        int v8 = p14.length;
        int v7_1 = 0;
        int v5 = 0;
        while (v7_1 < v8) {
            int v4_0;
            String v0 = p14[v7_1];
            if (!"_display_name".equals(v0)) {
                if (!"_size".equals(v0)) {
                    v4_0 = v5;
                } else {
                    v1_1[v5] = "_size";
                    v4_0 = (v5 + 1);
                    v6_1[v5] = Long.valueOf(v3.length());
                }
            } else {
                v1_1[v5] = "_display_name";
                v4_0 = (v5 + 1);
                v6_1[v5] = v3.getName();
            }
            v7_1++;
            v5 = v4_0;
        }
        String[] v1_0 = android.support.v4.content.FileProvider.copyOf(v1_1, v5);
        Object[] v6_0 = android.support.v4.content.FileProvider.copyOf(v6_1, v5);
        android.database.MatrixCursor v2_1 = new android.database.MatrixCursor(v1_0, 1);
        v2_1.addRow(v6_0);
        return v2_1;
    }

    public int update(android.net.Uri p3, android.content.ContentValues p4, String p5, String[] p6)
    {
        throw new UnsupportedOperationException("No external updates");
    }
}
package android.support.v4.content;
interface IntentCompat$IntentCompatImpl {

    public abstract android.content.Intent makeMainActivity();

    public abstract android.content.Intent makeMainSelectorActivity();

    public abstract android.content.Intent makeRestartActivityTask();
}
package android.support.v4.content;
public final class IntentCompat {
    public static final String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";
    public static final String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";
    public static final String CATEGORY_LEANBACK_LAUNCHER = "android.intent.category.LEANBACK_LAUNCHER";
    public static final String EXTRA_CHANGED_PACKAGE_LIST = "android.intent.extra.changed_package_list";
    public static final String EXTRA_CHANGED_UID_LIST = "android.intent.extra.changed_uid_list";
    public static final String EXTRA_HTML_TEXT = "android.intent.extra.HTML_TEXT";
    public static final int FLAG_ACTIVITY_CLEAR_TASK = 32768;
    public static final int FLAG_ACTIVITY_TASK_ON_HOME = 16384;
    private static final android.support.v4.content.IntentCompat$IntentCompatImpl IMPL;

    static IntentCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 15) {
            if (v0 < 11) {
                android.support.v4.content.IntentCompat.IMPL = new android.support.v4.content.IntentCompat$IntentCompatImplBase();
            } else {
                android.support.v4.content.IntentCompat.IMPL = new android.support.v4.content.IntentCompat$IntentCompatImplHC();
            }
        } else {
            android.support.v4.content.IntentCompat.IMPL = new android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1();
        }
        return;
    }

    private IntentCompat()
    {
        return;
    }

    public static android.content.Intent makeMainActivity(android.content.ComponentName p1)
    {
        return android.support.v4.content.IntentCompat.IMPL.makeMainActivity(p1);
    }

    public static android.content.Intent makeMainSelectorActivity(String p1, String p2)
    {
        return android.support.v4.content.IntentCompat.IMPL.makeMainSelectorActivity(p1, p2);
    }

    public static android.content.Intent makeRestartActivityTask(android.content.ComponentName p1)
    {
        return android.support.v4.content.IntentCompat.IMPL.makeRestartActivityTask(p1);
    }
}
package android.support.v4.content;
 class IntentCompatHoneycomb {

    IntentCompatHoneycomb()
    {
        return;
    }

    public static android.content.Intent makeMainActivity(android.content.ComponentName p1)
    {
        return android.content.Intent.makeMainActivity(p1);
    }

    public static android.content.Intent makeRestartActivityTask(android.content.ComponentName p1)
    {
        return android.content.Intent.makeRestartActivityTask(p1);
    }
}
package android.support.v4.content;
 class IntentCompatIcsMr1 {

    IntentCompatIcsMr1()
    {
        return;
    }

    public static android.content.Intent makeMainSelectorActivity(String p1, String p2)
    {
        return android.content.Intent.makeMainSelectorActivity(p1, p2);
    }
}
package android.support.v4.content;
public final class Loader$ForceLoadContentObserver extends android.database.ContentObserver {
    final synthetic android.support.v4.content.Loader this$0;

    public Loader$ForceLoadContentObserver(android.support.v4.content.Loader p2)
    {
        this.this$0 = p2;
        super(new android.os.Handler());
        return;
    }

    public boolean deliverSelfNotifications()
    {
        return 1;
    }

    public void onChange(boolean p2)
    {
        this.this$0.onContentChanged();
        return;
    }
}
package android.support.v4.content;
public interface Loader$OnLoadCanceledListener {

    public abstract void onLoadCanceled();
}
package android.support.v4.content;
public interface Loader$OnLoadCompleteListener {

    public abstract void onLoadComplete();
}
package android.support.v4.content;
public class Loader {
    boolean mAbandoned;
    boolean mContentChanged;
    android.content.Context mContext;
    int mId;
    android.support.v4.content.Loader$OnLoadCompleteListener mListener;
    android.support.v4.content.Loader$OnLoadCanceledListener mOnLoadCanceledListener;
    boolean mProcessingChange;
    boolean mReset;
    boolean mStarted;

    public Loader(android.content.Context p3)
    {
        this.mStarted = 0;
        this.mAbandoned = 0;
        this.mReset = 1;
        this.mContentChanged = 0;
        this.mProcessingChange = 0;
        this.mContext = p3.getApplicationContext();
        return;
    }

    public void abandon()
    {
        this.mAbandoned = 1;
        this.onAbandon();
        return;
    }

    public boolean cancelLoad()
    {
        return this.onCancelLoad();
    }

    public void commitContentChanged()
    {
        this.mProcessingChange = 0;
        return;
    }

    public String dataToString(Object p3)
    {
        StringBuilder v0_1 = new StringBuilder(64);
        android.support.v4.util.DebugUtils.buildShortClassTag(p3, v0_1);
        v0_1.append("}");
        return v0_1.toString();
    }

    public void deliverCancellation()
    {
        if (this.mOnLoadCanceledListener != null) {
            this.mOnLoadCanceledListener.onLoadCanceled(this);
        }
        return;
    }

    public void deliverResult(Object p2)
    {
        if (this.mListener != null) {
            this.mListener.onLoadComplete(this, p2);
        }
        return;
    }

    public void dump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        p4.print(p2);
        p4.print("mId=");
        p4.print(this.mId);
        p4.print(" mListener=");
        p4.println(this.mListener);
        if ((this.mStarted) || ((this.mContentChanged) || (this.mProcessingChange))) {
            p4.print(p2);
            p4.print("mStarted=");
            p4.print(this.mStarted);
            p4.print(" mContentChanged=");
            p4.print(this.mContentChanged);
            p4.print(" mProcessingChange=");
            p4.println(this.mProcessingChange);
        }
        if ((this.mAbandoned) || (this.mReset)) {
            p4.print(p2);
            p4.print("mAbandoned=");
            p4.print(this.mAbandoned);
            p4.print(" mReset=");
            p4.println(this.mReset);
        }
        return;
    }

    public void forceLoad()
    {
        this.onForceLoad();
        return;
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public int getId()
    {
        return this.mId;
    }

    public boolean isAbandoned()
    {
        return this.mAbandoned;
    }

    public boolean isReset()
    {
        return this.mReset;
    }

    public boolean isStarted()
    {
        return this.mStarted;
    }

    protected void onAbandon()
    {
        return;
    }

    protected boolean onCancelLoad()
    {
        return 0;
    }

    public void onContentChanged()
    {
        if (!this.mStarted) {
            this.mContentChanged = 1;
        } else {
            this.forceLoad();
        }
        return;
    }

    protected void onForceLoad()
    {
        return;
    }

    protected void onReset()
    {
        return;
    }

    protected void onStartLoading()
    {
        return;
    }

    protected void onStopLoading()
    {
        return;
    }

    public void registerListener(int p3, android.support.v4.content.Loader$OnLoadCompleteListener p4)
    {
        if (this.mListener == null) {
            this.mListener = p4;
            this.mId = p3;
            return;
        } else {
            throw new IllegalStateException("There is already a listener registered");
        }
    }

    public void registerOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener p3)
    {
        if (this.mOnLoadCanceledListener == null) {
            this.mOnLoadCanceledListener = p3;
            return;
        } else {
            throw new IllegalStateException("There is already a listener registered");
        }
    }

    public void reset()
    {
        this.onReset();
        this.mReset = 1;
        this.mStarted = 0;
        this.mAbandoned = 0;
        this.mContentChanged = 0;
        this.mProcessingChange = 0;
        return;
    }

    public void rollbackContentChanged()
    {
        if (this.mProcessingChange) {
            this.onContentChanged();
        }
        return;
    }

    public final void startLoading()
    {
        this.mStarted = 1;
        this.mReset = 0;
        this.mAbandoned = 0;
        this.onStartLoading();
        return;
    }

    public void stopLoading()
    {
        this.mStarted = 0;
        this.onStopLoading();
        return;
    }

    public boolean takeContentChanged()
    {
        boolean v0 = this.mContentChanged;
        this.mContentChanged = 0;
        this.mProcessingChange = (this.mProcessingChange | v0);
        return v0;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(64);
        android.support.v4.util.DebugUtils.buildShortClassTag(this, v0_1);
        v0_1.append(" id=");
        v0_1.append(this.mId);
        v0_1.append("}");
        return v0_1.toString();
    }

    public void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener p3)
    {
        if (this.mListener != null) {
            if (this.mListener == p3) {
                this.mListener = 0;
                return;
            } else {
                throw new IllegalArgumentException("Attempting to unregister the wrong listener");
            }
        } else {
            throw new IllegalStateException("No listener register");
        }
    }

    public void unregisterOnLoadCanceledListener(android.support.v4.content.Loader$OnLoadCanceledListener p3)
    {
        if (this.mOnLoadCanceledListener != null) {
            if (this.mOnLoadCanceledListener == p3) {
                this.mOnLoadCanceledListener = 0;
                return;
            } else {
                throw new IllegalArgumentException("Attempting to unregister the wrong listener");
            }
        } else {
            throw new IllegalStateException("No listener register");
        }
    }
}
package android.support.v4.content;
 class LocalBroadcastManager$1 extends android.os.Handler {
    final synthetic android.support.v4.content.LocalBroadcastManager this$0;

    LocalBroadcastManager$1(android.support.v4.content.LocalBroadcastManager p1, android.os.Looper p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    public void handleMessage(android.os.Message p2)
    {
        switch (p2.what) {
            case 1:
                android.support.v4.content.LocalBroadcastManager.access$000(this.this$0);
                break;
            default:
                super.handleMessage(p2);
        }
        return;
    }
}
package android.support.v4.content;
 class LocalBroadcastManager$BroadcastRecord {
    final android.content.Intent intent;
    final java.util.ArrayList receivers;

    LocalBroadcastManager$BroadcastRecord(android.content.Intent p1, java.util.ArrayList p2)
    {
        this.intent = p1;
        this.receivers = p2;
        return;
    }
}
package android.support.v4.content;
 class LocalBroadcastManager$ReceiverRecord {
    boolean broadcasting;
    final android.content.IntentFilter filter;
    final android.content.BroadcastReceiver receiver;

    LocalBroadcastManager$ReceiverRecord(android.content.IntentFilter p1, android.content.BroadcastReceiver p2)
    {
        this.filter = p1;
        this.receiver = p2;
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("Receiver{");
        v0_1.append(this.receiver);
        v0_1.append(" filter=");
        v0_1.append(this.filter);
        v0_1.append("}");
        return v0_1.toString();
    }
}
package android.support.v4.content;
public final class LocalBroadcastManager {
    private static final boolean DEBUG = False;
    static final int MSG_EXEC_PENDING_BROADCASTS = 1;
    private static final String TAG = "LocalBroadcastManager";
    private static android.support.v4.content.LocalBroadcastManager mInstance;
    private static final Object mLock;
    private final java.util.HashMap mActions;
    private final android.content.Context mAppContext;
    private final android.os.Handler mHandler;
    private final java.util.ArrayList mPendingBroadcasts;
    private final java.util.HashMap mReceivers;

    static LocalBroadcastManager()
    {
        android.support.v4.content.LocalBroadcastManager.mLock = new Object();
        return;
    }

    private LocalBroadcastManager(android.content.Context p3)
    {
        this.mReceivers = new java.util.HashMap();
        this.mActions = new java.util.HashMap();
        this.mPendingBroadcasts = new java.util.ArrayList();
        this.mAppContext = p3;
        this.mHandler = new android.support.v4.content.LocalBroadcastManager$1(this, p3.getMainLooper());
        return;
    }

    static synthetic void access$000(android.support.v4.content.LocalBroadcastManager p0)
    {
        p0.executePendingBroadcasts();
        return;
    }

    private void executePendingBroadcasts()
    {
        do {
            android.content.Context v6 = this.mReceivers;
            int v0 = this.mPendingBroadcasts.size();
            if (v0 > 0) {
                android.support.v4.content.LocalBroadcastManager$BroadcastRecord[] v2 = new android.support.v4.content.LocalBroadcastManager$BroadcastRecord[v0];
                this.mPendingBroadcasts.toArray(v2);
                this.mPendingBroadcasts.clear();
                int v3 = 0;
            } else {
                return;
            }
        } while(v3 >= v2.length);
        android.support.v4.content.LocalBroadcastManager$BroadcastRecord v1 = v2[v3];
        int v4 = 0;
        while (v4 < v1.receivers.size()) {
            ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v1.receivers.get(v4)).receiver.onReceive(this.mAppContext, v1.intent);
            v4++;
        }
        v3++;
        while (v3 < v2.length) {
        }
    }

    public static android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context p3)
    {
        try {
            if (android.support.v4.content.LocalBroadcastManager.mInstance == null) {
                android.support.v4.content.LocalBroadcastManager.mInstance = new android.support.v4.content.LocalBroadcastManager(p3.getApplicationContext());
            }
        } catch (android.support.v4.content.LocalBroadcastManager v0_1) {
            throw v0_1;
        }
        return android.support.v4.content.LocalBroadcastManager.mInstance;
    }

    public void registerReceiver(android.content.BroadcastReceiver p8, android.content.IntentFilter p9)
    {
        try {
            android.support.v4.content.LocalBroadcastManager$ReceiverRecord v2_1 = new android.support.v4.content.LocalBroadcastManager$ReceiverRecord(p9, p8);
            java.util.ArrayList v3_0 = ((java.util.ArrayList) this.mReceivers.get(p8));
        } catch (java.util.HashMap v5_6) {
            throw v5_6;
        }
        if (v3_0 == null) {
            v3_0 = new java.util.ArrayList(1);
            this.mReceivers.put(p8, v3_0);
        }
        v3_0.add(p9);
        int v4 = 0;
        while (v4 < p9.countActions()) {
            String v0 = p9.getAction(v4);
            java.util.ArrayList v1_1 = ((java.util.ArrayList) this.mActions.get(v0));
            if (v1_1 == null) {
                v1_1 = new java.util.ArrayList(1);
                this.mActions.put(v0, v1_1);
            }
            v1_1.add(v2_1);
            v4++;
        }
        return;
    }

    public boolean sendBroadcast(android.content.Intent p18)
    {
        try {
            int v8;
            String v2 = p18.getAction();
            String v3 = p18.resolveTypeIfNeeded(this.mAppContext.getContentResolver());
            android.net.Uri v5 = p18.getData();
            String v4 = p18.getScheme();
            java.util.Set v6 = p18.getCategories();
        } catch (String v1_9) {
            throw v1_9;
        }
        if ((p18.getFlags() & 8) == 0) {
            v8 = 0;
        } else {
            v8 = 1;
        }
        if (v8 != 0) {
            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Resolving type ").append(v3).append(" scheme ").append(v4).append(" of intent ").append(p18).toString());
        }
        String v1_18;
        java.util.ArrayList v9_1 = ((java.util.ArrayList) this.mActions.get(p18.getAction()));
        if (v9_1 == null) {
            v1_18 = 0;
        } else {
            if (v8 != 0) {
                android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Action list: ").append(v9_1).toString());
            }
            java.util.ArrayList v14_1 = 0;
            int v10_1 = 0;
            while (v10_1 < v9_1.size()) {
                android.support.v4.content.LocalBroadcastManager$ReceiverRecord v13_1 = ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v9_1.get(v10_1));
                if (v8 != 0) {
                    android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("Matching against filter ").append(v13_1.filter).toString());
                }
                if (!v13_1.broadcasting) {
                    int v11 = v13_1.filter.match(v2, v3, v4, v5, v6, "LocalBroadcastManager");
                    if (v11 < 0) {
                        if (v8 != 0) {
                            String v12;
                            switch (v11) {
                                case -4:
                                    v12 = "category";
                                    break;
                                case -3:
                                    v12 = "action";
                                    break;
                                case -2:
                                    v12 = "data";
                                    break;
                                case -1:
                                    v12 = "type";
                                    break;
                                default:
                                    v12 = "unknown reason";
                            }
                            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("  Filter did not match: ").append(v12).toString());
                        }
                    } else {
                        if (v8 != 0) {
                            android.util.Log.v("LocalBroadcastManager", new StringBuilder().append("  Filter matched!  match=0x").append(Integer.toHexString(v11)).toString());
                        }
                        if (v14_1 == null) {
                            v14_1 = new java.util.ArrayList();
                        }
                        v14_1.add(v13_1);
                        v13_1.broadcasting = 1;
                    }
                } else {
                    if (v8 != 0) {
                        android.util.Log.v("LocalBroadcastManager", "  Filter\'s target already added");
                    }
                }
                v10_1++;
            }
            if (v14_1 == null) {
            } else {
                int v10_0 = 0;
                while (v10_0 < v14_1.size()) {
                    ((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v14_1.get(v10_0)).broadcasting = 0;
                    v10_0++;
                }
                this.mPendingBroadcasts.add(new android.support.v4.content.LocalBroadcastManager$BroadcastRecord(p18, v14_1));
                if (!this.mHandler.hasMessages(1)) {
                    this.mHandler.sendEmptyMessage(1);
                }
                v1_18 = 1;
            }
        }
        return v1_18;
    }

    public void sendBroadcastSync(android.content.Intent p2)
    {
        if (this.sendBroadcast(p2)) {
            this.executePendingBroadcasts();
        }
        return;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver p10)
    {
        try {
            java.util.ArrayList v2_1 = ((java.util.ArrayList) this.mReceivers.remove(p10));
        } catch (java.util.HashMap v7_9) {
            throw v7_9;
        }
        if (v2_1 != null) {
            int v3 = 0;
            while (v3 < v2_1.size()) {
                android.content.IntentFilter v1_1 = ((android.content.IntentFilter) v2_1.get(v3));
                int v4 = 0;
                while (v4 < v1_1.countActions()) {
                    String v0 = v1_1.getAction(v4);
                    java.util.ArrayList v6_1 = ((java.util.ArrayList) this.mActions.get(v0));
                    if (v6_1 != null) {
                        int v5 = 0;
                        while (v5 < v6_1.size()) {
                            if (((android.support.v4.content.LocalBroadcastManager$ReceiverRecord) v6_1.get(v5)).receiver == p10) {
                                v6_1.remove(v5);
                                v5--;
                            }
                            v5++;
                        }
                        if (v6_1.size() <= 0) {
                            this.mActions.remove(v0);
                        }
                    }
                    v4++;
                }
                v3++;
            }
        } else {
        }
        return;
    }
}
package android.support.v4.content;
final class ModernAsyncTask$1 implements java.util.concurrent.ThreadFactory {
    private final java.util.concurrent.atomic.AtomicInteger mCount;

    ModernAsyncTask$1()
    {
        this.mCount = new java.util.concurrent.atomic.AtomicInteger(1);
        return;
    }

    public Thread newThread(Runnable p4)
    {
        return new Thread(p4, new StringBuilder().append("ModernAsyncTask #").append(this.mCount.getAndIncrement()).toString());
    }
}
package android.support.v4.content;
 class ModernAsyncTask$3 extends java.util.concurrent.FutureTask {
    final synthetic android.support.v4.content.ModernAsyncTask this$0;

    ModernAsyncTask$3(android.support.v4.content.ModernAsyncTask p1, java.util.concurrent.Callable p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    protected void done()
    {
        try {
            this.this$0.postResultIfNotInvoked(this.get());
        } catch (java.util.concurrent.CancellationException v0_1) {
            android.util.Log.w("AsyncTask", v0_1);
        } catch (java.util.concurrent.CancellationException v0_0) {
            throw new RuntimeException("An error occurred while executing doInBackground()", v0_0.getCause());
        } catch (java.util.concurrent.CancellationException v0) {
            this.this$0.postResultIfNotInvoked(0);
        } catch (Throwable v2) {
            throw new RuntimeException("An error occurred while executing doInBackground()", v2);
        }
        return;
    }
}
package android.support.v4.content;
synthetic class ModernAsyncTask$4 {
    static final synthetic int[] $SwitchMap$android$support$v4$content$ModernAsyncTask$Status;

    static ModernAsyncTask$4()
    {
        NoSuchFieldError v0_3 = new int[android.support.v4.content.ModernAsyncTask$Status.values().length];
        android.support.v4.content.ModernAsyncTask$4.$SwitchMap$android$support$v4$content$ModernAsyncTask$Status = v0_3;
        try {
            android.support.v4.content.ModernAsyncTask$Status.RUNNING.ordinal()[int v1_3] = 1;
            try {
                android.support.v4.content.ModernAsyncTask$Status.FINISHED.ordinal()[int v1_1] = 2;
            } catch (NoSuchFieldError v0) {
            }
            return;
        } catch (NoSuchFieldError v0) {
        }
    }
}
package android.support.v4.content;
 class ModernAsyncTask$AsyncTaskResult {
    final Object[] mData;
    final android.support.v4.content.ModernAsyncTask mTask;

    varargs ModernAsyncTask$AsyncTaskResult(android.support.v4.content.ModernAsyncTask p1, Object[] p2)
    {
        this.mTask = p1;
        this.mData = p2;
        return;
    }
}
package android.support.v4.content;
 class ModernAsyncTask$InternalHandler extends android.os.Handler {

    public ModernAsyncTask$InternalHandler()
    {
        super(android.os.Looper.getMainLooper());
        return;
    }

    public void handleMessage(android.os.Message p5)
    {
        android.support.v4.content.ModernAsyncTask$AsyncTaskResult v0_1 = ((android.support.v4.content.ModernAsyncTask$AsyncTaskResult) p5.obj);
        switch (p5.what) {
            case 1:
                v0_1.mTask.finish(v0_1.mData[0]);
                break;
            case 2:
                v0_1.mTask.onProgressUpdate(v0_1.mData);
                break;
        }
        return;
    }
}
package android.support.v4.content;
public final enum class ModernAsyncTask$Status extends java.lang.Enum {
    private static final synthetic android.support.v4.content.ModernAsyncTask$Status[] $VALUES;
    public static final enum android.support.v4.content.ModernAsyncTask$Status FINISHED;
    public static final enum android.support.v4.content.ModernAsyncTask$Status PENDING;
    public static final enum android.support.v4.content.ModernAsyncTask$Status RUNNING;

    static ModernAsyncTask$Status()
    {
        android.support.v4.content.ModernAsyncTask$Status.PENDING = new android.support.v4.content.ModernAsyncTask$Status("PENDING", 0);
        android.support.v4.content.ModernAsyncTask$Status.RUNNING = new android.support.v4.content.ModernAsyncTask$Status("RUNNING", 1);
        android.support.v4.content.ModernAsyncTask$Status.FINISHED = new android.support.v4.content.ModernAsyncTask$Status("FINISHED", 2);
        android.support.v4.content.ModernAsyncTask$Status[] v0_3 = new android.support.v4.content.ModernAsyncTask$Status[3];
        v0_3[0] = android.support.v4.content.ModernAsyncTask$Status.PENDING;
        v0_3[1] = android.support.v4.content.ModernAsyncTask$Status.RUNNING;
        v0_3[2] = android.support.v4.content.ModernAsyncTask$Status.FINISHED;
        android.support.v4.content.ModernAsyncTask$Status.$VALUES = v0_3;
        return;
    }

    private ModernAsyncTask$Status(String p1, int p2)
    {
        super(p1, p2);
        return;
    }

    public static android.support.v4.content.ModernAsyncTask$Status valueOf(String p1)
    {
        return ((android.support.v4.content.ModernAsyncTask$Status) Enum.valueOf(android.support.v4.content.ModernAsyncTask$Status, p1));
    }

    public static android.support.v4.content.ModernAsyncTask$Status[] values()
    {
        return ((android.support.v4.content.ModernAsyncTask$Status[]) android.support.v4.content.ModernAsyncTask$Status.$VALUES.clone());
    }
}
package android.support.v4.content;
abstract class ModernAsyncTask$WorkerRunnable implements java.util.concurrent.Callable {
    Object[] mParams;

    ModernAsyncTask$WorkerRunnable()
    {
        return;
    }
}
package android.support.v4.content;
abstract class ModernAsyncTask {
    private static final int CORE_POOL_SIZE = 5;
    private static final int KEEP_ALIVE = 1;
    private static final String LOG_TAG = "AsyncTask";
    private static final int MAXIMUM_POOL_SIZE = 128;
    private static final int MESSAGE_POST_PROGRESS = 2;
    private static final int MESSAGE_POST_RESULT = 1;
    public static final java.util.concurrent.Executor THREAD_POOL_EXECUTOR;
    private static volatile java.util.concurrent.Executor sDefaultExecutor;
    private static android.support.v4.content.ModernAsyncTask$InternalHandler sHandler;
    private static final java.util.concurrent.BlockingQueue sPoolWorkQueue;
    private static final java.util.concurrent.ThreadFactory sThreadFactory;
    private final java.util.concurrent.atomic.AtomicBoolean mCancelled;
    private final java.util.concurrent.FutureTask mFuture;
    private volatile android.support.v4.content.ModernAsyncTask$Status mStatus;
    private final java.util.concurrent.atomic.AtomicBoolean mTaskInvoked;
    private final android.support.v4.content.ModernAsyncTask$WorkerRunnable mWorker;

    static ModernAsyncTask()
    {
        android.support.v4.content.ModernAsyncTask.sThreadFactory = new android.support.v4.content.ModernAsyncTask$1();
        android.support.v4.content.ModernAsyncTask.sPoolWorkQueue = new java.util.concurrent.LinkedBlockingQueue(10);
        android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR = new java.util.concurrent.ThreadPoolExecutor(5, 128, 1, java.util.concurrent.TimeUnit.SECONDS, android.support.v4.content.ModernAsyncTask.sPoolWorkQueue, android.support.v4.content.ModernAsyncTask.sThreadFactory);
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor = android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR;
        return;
    }

    public ModernAsyncTask()
    {
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.PENDING;
        this.mCancelled = new java.util.concurrent.atomic.AtomicBoolean();
        this.mTaskInvoked = new java.util.concurrent.atomic.AtomicBoolean();
        this.mWorker = new android.support.v4.content.ModernAsyncTask$2(this);
        this.mFuture = new android.support.v4.content.ModernAsyncTask$3(this, this.mWorker);
        return;
    }

    static synthetic java.util.concurrent.atomic.AtomicBoolean access$000(android.support.v4.content.ModernAsyncTask p1)
    {
        return p1.mTaskInvoked;
    }

    static synthetic java.util.concurrent.atomic.AtomicBoolean access$100(android.support.v4.content.ModernAsyncTask p1)
    {
        return p1.mCancelled;
    }

    public static void execute(Runnable p1)
    {
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor.execute(p1);
        return;
    }

    private static android.os.Handler getHandler()
    {
        try {
            if (android.support.v4.content.ModernAsyncTask.sHandler == null) {
                android.support.v4.content.ModernAsyncTask.sHandler = new android.support.v4.content.ModernAsyncTask$InternalHandler();
            }
        } catch (android.support.v4.content.ModernAsyncTask$InternalHandler v0_4) {
            throw v0_4;
        }
        return android.support.v4.content.ModernAsyncTask.sHandler;
    }

    public static void setDefaultExecutor(java.util.concurrent.Executor p0)
    {
        android.support.v4.content.ModernAsyncTask.sDefaultExecutor = p0;
        return;
    }

    public final boolean cancel(boolean p3)
    {
        this.mCancelled.set(1);
        return this.mFuture.cancel(p3);
    }

    protected abstract varargs Object doInBackground();

    public final varargs android.support.v4.content.ModernAsyncTask execute(Object[] p2)
    {
        return this.executeOnExecutor(android.support.v4.content.ModernAsyncTask.sDefaultExecutor, p2);
    }

    public final varargs android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor p3, Object[] p4)
    {
        if (this.mStatus != android.support.v4.content.ModernAsyncTask$Status.PENDING) {
            switch (android.support.v4.content.ModernAsyncTask$4.$SwitchMap$android$support$v4$content$ModernAsyncTask$Status[this.mStatus.ordinal()]) {
                case 1:
                    throw new IllegalStateException("Cannot execute task: the task is already running.");
                    break;
                case 2:
                    throw new IllegalStateException("Cannot execute task: the task has already been executed (a task can be executed only once)");
                    break;
            }
        }
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.RUNNING;
        this.onPreExecute();
        this.mWorker.mParams = p4;
        p3.execute(this.mFuture);
        return this;
    }

    void finish(Object p2)
    {
        if (!this.isCancelled()) {
            this.onPostExecute(p2);
        } else {
            this.onCancelled(p2);
        }
        this.mStatus = android.support.v4.content.ModernAsyncTask$Status.FINISHED;
        return;
    }

    public final Object get()
    {
        return this.mFuture.get();
    }

    public final Object get(long p2, java.util.concurrent.TimeUnit p4)
    {
        return this.mFuture.get(p2, p4);
    }

    public final android.support.v4.content.ModernAsyncTask$Status getStatus()
    {
        return this.mStatus;
    }

    public final boolean isCancelled()
    {
        return this.mCancelled.get();
    }

    protected void onCancelled()
    {
        return;
    }

    protected void onCancelled(Object p1)
    {
        this.onCancelled();
        return;
    }

    protected void onPostExecute(Object p1)
    {
        return;
    }

    protected void onPreExecute()
    {
        return;
    }

    protected varargs void onProgressUpdate(Object[] p1)
    {
        return;
    }

    Object postResult(Object p7)
    {
        android.os.Handler v1 = android.support.v4.content.ModernAsyncTask.getHandler();
        Object[] v3 = new Object[1];
        v3[0] = p7;
        v1.obtainMessage(1, new android.support.v4.content.ModernAsyncTask$AsyncTaskResult(this, v3)).sendToTarget();
        return p7;
    }

    void postResultIfNotInvoked(Object p3)
    {
        if (!this.mTaskInvoked.get()) {
            this.postResult(p3);
        }
        return;
    }

    protected final varargs void publishProgress(Object[] p4)
    {
        if (!this.isCancelled()) {
            android.support.v4.content.ModernAsyncTask.getHandler().obtainMessage(2, new android.support.v4.content.ModernAsyncTask$AsyncTaskResult(this, p4)).sendToTarget();
        }
        return;
    }
}
package android.support.v4.content;
public final class ParallelExecutorCompat {

    private ParallelExecutorCompat()
    {
        return;
    }

    public static java.util.concurrent.Executor getParallelExecutor()
    {
        java.util.concurrent.Executor v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR;
        } else {
            v0_1 = android.support.v4.content.ExecutorCompatHoneycomb.getParallelExecutor();
        }
        return v0_1;
    }
}
package android.support.v4.content;
public interface annotation PermissionChecker$PermissionResult implements java.lang.annotation.Annotation {
}
package android.support.v4.content;
public final class PermissionChecker {
    public static final int PERMISSION_DENIED = 255;
    public static final int PERMISSION_DENIED_APP_OP = 254;
    public static final int PERMISSION_GRANTED;

    private PermissionChecker()
    {
        return;
    }

    public static int checkCallingOrSelfPermission(android.content.Context p3, String p4)
    {
        int v0;
        if (android.os.Binder.getCallingPid() != android.os.Process.myPid()) {
            v0 = 0;
        } else {
            v0 = p3.getPackageName();
        }
        return android.support.v4.content.PermissionChecker.checkPermission(p3, p4, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), v0);
    }

    public static int checkCallingPermission(android.content.Context p2, String p3, String p4)
    {
        int v0_1;
        if (android.os.Binder.getCallingPid() != android.os.Process.myPid()) {
            v0_1 = android.support.v4.content.PermissionChecker.checkPermission(p2, p3, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), p4);
        } else {
            v0_1 = -1;
        }
        return v0_1;
    }

    public static int checkPermission(android.content.Context p5, String p6, int p7, int p8, String p9)
    {
        int v2_0 = -1;
        if (p5.checkPermission(p6, p7, p8) != -1) {
            String v0 = android.support.v4.app.AppOpsManagerCompat.permissionToOp(p6);
            if (v0 != null) {
                if (p9 == null) {
                    String[] v1 = p5.getPackageManager().getPackagesForUid(p8);
                    if ((v1 == null) || (v1.length <= 0)) {
                        return v2_0;
                    } else {
                        p9 = v1[0];
                    }
                }
                if (android.support.v4.app.AppOpsManagerCompat.noteProxyOp(p5, v0, p9) == 0) {
                    v2_0 = 0;
                } else {
                    v2_0 = -2;
                }
            } else {
                v2_0 = 0;
            }
        }
        return v2_0;
    }

    public static int checkSelfPermission(android.content.Context p3, String p4)
    {
        return android.support.v4.content.PermissionChecker.checkPermission(p3, p4, android.os.Process.myPid(), android.os.Process.myUid(), p3.getPackageName());
    }
}
package android.support.v4.content;
 class SharedPreferencesCompat$EditorCompat$Helper {

    SharedPreferencesCompat$EditorCompat$Helper()
    {
        return;
    }

    public void apply(android.content.SharedPreferences$Editor p2)
    {
        try {
            p2.apply();
        } catch (AbstractMethodError v0) {
            p2.commit();
        }
        return;
    }
}
package android.support.v4.content;
public final class SharedPreferencesCompat$EditorCompat {
    private static android.support.v4.content.SharedPreferencesCompat$EditorCompat sInstance;
    private final android.support.v4.content.SharedPreferencesCompat$EditorCompat$Helper mHelper;

    private SharedPreferencesCompat$EditorCompat()
    {
        this.mHelper = new android.support.v4.content.SharedPreferencesCompat$EditorCompat$Helper();
        return;
    }

    public static android.support.v4.content.SharedPreferencesCompat$EditorCompat getInstance()
    {
        if (android.support.v4.content.SharedPreferencesCompat$EditorCompat.sInstance == null) {
            android.support.v4.content.SharedPreferencesCompat$EditorCompat.sInstance = new android.support.v4.content.SharedPreferencesCompat$EditorCompat();
        }
        return android.support.v4.content.SharedPreferencesCompat$EditorCompat.sInstance;
    }

    public void apply(android.content.SharedPreferences$Editor p2)
    {
        this.mHelper.apply(p2);
        return;
    }
}
package android.support.v4.content;
public final class SharedPreferencesCompat {

    private SharedPreferencesCompat()
    {
        return;
    }
}
package android.support.v4.content;
public abstract class WakefulBroadcastReceiver extends android.content.BroadcastReceiver {
    private static final String EXTRA_WAKE_LOCK_ID = "android.support.content.wakelockid";
    private static final android.util.SparseArray mActiveWakeLocks;
    private static int mNextId;

    static WakefulBroadcastReceiver()
    {
        android.support.v4.content.WakefulBroadcastReceiver.mActiveWakeLocks = new android.util.SparseArray();
        android.support.v4.content.WakefulBroadcastReceiver.mNextId = 1;
        return;
    }

    public WakefulBroadcastReceiver()
    {
        return;
    }

    public static boolean completeWakefulIntent(android.content.Intent p7)
    {
        int v2_0 = 0;
        int v0 = p7.getIntExtra("android.support.content.wakelockid", 0);
        if (v0 != 0) {
            try {
                android.os.PowerManager$WakeLock v1_0 = ((android.os.PowerManager$WakeLock) android.support.v4.content.WakefulBroadcastReceiver.mActiveWakeLocks.get(v0));
            } catch (int v2_3) {
                throw v2_3;
            }
            if (v1_0 == null) {
                android.util.Log.w("WakefulBroadcastReceiver", new StringBuilder().append("No active wake lock id #").append(v0).toString());
                v2_0 = 1;
            } else {
                v1_0.release();
                android.support.v4.content.WakefulBroadcastReceiver.mActiveWakeLocks.remove(v0);
                v2_0 = 1;
            }
        }
        return v2_0;
    }

    public static android.content.ComponentName startWakefulService(android.content.Context p8, android.content.Intent p9)
    {
        try {
            int v1 = android.support.v4.content.WakefulBroadcastReceiver.mNextId;
            android.support.v4.content.WakefulBroadcastReceiver.mNextId = (android.support.v4.content.WakefulBroadcastReceiver.mNextId + 1);
        } catch (android.util.SparseArray v4_6) {
            throw v4_6;
        }
        if (android.support.v4.content.WakefulBroadcastReceiver.mNextId <= 0) {
            android.support.v4.content.WakefulBroadcastReceiver.mNextId = 1;
        }
        p9.putExtra("android.support.content.wakelockid", v1);
        int v0 = p8.startService(p9);
        if (v0 != 0) {
            android.os.PowerManager$WakeLock v3 = ((android.os.PowerManager) p8.getSystemService("power")).newWakeLock(1, new StringBuilder().append("wake:").append(v0.flattenToShortString()).toString());
            v3.setReferenceCounted(0);
            v3.acquire(60000);
            android.support.v4.content.WakefulBroadcastReceiver.mActiveWakeLocks.put(v1, v3);
        } else {
            v0 = 0;
        }
        return v0;
    }
}
package android.support.v4.content.pm;
public final class ActivityInfoCompat {
    public static final int CONFIG_UI_MODE = 512;

    private ActivityInfoCompat()
    {
        return;
    }
}
package android.support.v4.content.res;
interface ConfigurationHelper$ConfigurationHelperImpl {

    public abstract int getDensityDpi();

    public abstract int getScreenHeightDp();

    public abstract int getScreenWidthDp();

    public abstract int getSmallestScreenWidthDp();
}
package android.support.v4.content.res;
public final class ConfigurationHelper {
    private static final android.support.v4.content.res.ConfigurationHelper$ConfigurationHelperImpl IMPL;

    static ConfigurationHelper()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 17) {
            if (v0 < 13) {
                android.support.v4.content.res.ConfigurationHelper.IMPL = new android.support.v4.content.res.ConfigurationHelper$GingerbreadImpl();
            } else {
                android.support.v4.content.res.ConfigurationHelper.IMPL = new android.support.v4.content.res.ConfigurationHelper$HoneycombMr2Impl();
            }
        } else {
            android.support.v4.content.res.ConfigurationHelper.IMPL = new android.support.v4.content.res.ConfigurationHelper$JellybeanMr1Impl();
        }
        return;
    }

    private ConfigurationHelper()
    {
        return;
    }

    public static int getDensityDpi(android.content.res.Resources p1)
    {
        return android.support.v4.content.res.ConfigurationHelper.IMPL.getDensityDpi(p1);
    }

    public static int getScreenHeightDp(android.content.res.Resources p1)
    {
        return android.support.v4.content.res.ConfigurationHelper.IMPL.getScreenHeightDp(p1);
    }

    public static int getScreenWidthDp(android.content.res.Resources p1)
    {
        return android.support.v4.content.res.ConfigurationHelper.IMPL.getScreenWidthDp(p1);
    }

    public static int getSmallestScreenWidthDp(android.content.res.Resources p1)
    {
        return android.support.v4.content.res.ConfigurationHelper.IMPL.getSmallestScreenWidthDp(p1);
    }
}
package android.support.v4.content.res;
 class ConfigurationHelperGingerbread {

    ConfigurationHelperGingerbread()
    {
        return;
    }

    static int getDensityDpi(android.content.res.Resources p1)
    {
        return p1.getDisplayMetrics().densityDpi;
    }

    static int getScreenHeightDp(android.content.res.Resources p3)
    {
        android.util.DisplayMetrics v0 = p3.getDisplayMetrics();
        return ((int) (((float) v0.heightPixels) / v0.density));
    }

    static int getScreenWidthDp(android.content.res.Resources p3)
    {
        android.util.DisplayMetrics v0 = p3.getDisplayMetrics();
        return ((int) (((float) v0.widthPixels) / v0.density));
    }

    static int getSmallestScreenWidthDp(android.content.res.Resources p2)
    {
        return Math.min(android.support.v4.content.res.ConfigurationHelperGingerbread.getScreenWidthDp(p2), android.support.v4.content.res.ConfigurationHelperGingerbread.getScreenHeightDp(p2));
    }
}
package android.support.v4.content.res;
 class ConfigurationHelperHoneycombMr2 {

    ConfigurationHelperHoneycombMr2()
    {
        return;
    }

    static int getScreenHeightDp(android.content.res.Resources p1)
    {
        return p1.getConfiguration().screenHeightDp;
    }

    static int getScreenWidthDp(android.content.res.Resources p1)
    {
        return p1.getConfiguration().screenWidthDp;
    }

    static int getSmallestScreenWidthDp(android.content.res.Resources p1)
    {
        return p1.getConfiguration().smallestScreenWidthDp;
    }
}
package android.support.v4.content.res;
 class ConfigurationHelperJellybeanMr1 {

    ConfigurationHelperJellybeanMr1()
    {
        return;
    }

    static int getDensityDpi(android.content.res.Resources p1)
    {
        return p1.getConfiguration().densityDpi;
    }
}
package android.support.v4.content.res;
public final class ResourcesCompat {

    private ResourcesCompat()
    {
        return;
    }

    public static int getColor(android.content.res.Resources p2, int p3, android.content.res.Resources$Theme p4)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 23) {
            v0_1 = p2.getColor(p3);
        } else {
            v0_1 = android.support.v4.content.res.ResourcesCompatApi23.getColor(p2, p3, p4);
        }
        return v0_1;
    }

    public static android.content.res.ColorStateList getColorStateList(android.content.res.Resources p2, int p3, android.content.res.Resources$Theme p4)
    {
        android.content.res.ColorStateList v0_1;
        if (android.os.Build$VERSION.SDK_INT < 23) {
            v0_1 = p2.getColorStateList(p3);
        } else {
            v0_1 = android.support.v4.content.res.ResourcesCompatApi23.getColorStateList(p2, p3, p4);
        }
        return v0_1;
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.res.Resources p2, int p3, android.content.res.Resources$Theme p4)
    {
        android.graphics.drawable.Drawable v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = p2.getDrawable(p3);
        } else {
            v0_1 = android.support.v4.content.res.ResourcesCompatApi21.getDrawable(p2, p3, p4);
        }
        return v0_1;
    }

    public static android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources p2, int p3, int p4, android.content.res.Resources$Theme p5)
    {
        android.graphics.drawable.Drawable v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            if (android.os.Build$VERSION.SDK_INT < 15) {
                v0_1 = p2.getDrawable(p3);
            } else {
                v0_1 = android.support.v4.content.res.ResourcesCompatIcsMr1.getDrawableForDensity(p2, p3, p4);
            }
        } else {
            v0_1 = android.support.v4.content.res.ResourcesCompatApi21.getDrawableForDensity(p2, p3, p4, p5);
        }
        return v0_1;
    }
}
package android.support.v4.content.res;
 class ResourcesCompatApi21 {

    ResourcesCompatApi21()
    {
        return;
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.res.Resources p1, int p2, android.content.res.Resources$Theme p3)
    {
        return p1.getDrawable(p2, p3);
    }

    public static android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources p1, int p2, int p3, android.content.res.Resources$Theme p4)
    {
        return p1.getDrawableForDensity(p2, p3, p4);
    }
}
package android.support.v4.content.res;
 class ResourcesCompatApi23 {

    ResourcesCompatApi23()
    {
        return;
    }

    public static int getColor(android.content.res.Resources p1, int p2, android.content.res.Resources$Theme p3)
    {
        return p1.getColor(p2, p3);
    }

    public static android.content.res.ColorStateList getColorStateList(android.content.res.Resources p1, int p2, android.content.res.Resources$Theme p3)
    {
        return p1.getColorStateList(p2, p3);
    }
}
package android.support.v4.content.res;
 class ResourcesCompatIcsMr1 {

    ResourcesCompatIcsMr1()
    {
        return;
    }

    public static android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources p1, int p2, int p3)
    {
        return p1.getDrawableForDensity(p2, p3);
    }
}
package android.support.v4.content.res;
public class TypedArrayUtils {

    public TypedArrayUtils()
    {
        return;
    }

    public static int getAttr(android.content.Context p3, int p4, int p5)
    {
        android.util.TypedValue v0_1 = new android.util.TypedValue();
        p3.getTheme().resolveAttribute(p4, v0_1, 1);
        if (v0_1.resourceId == 0) {
            p4 = p5;
        }
        return p4;
    }

    public static boolean getBoolean(android.content.res.TypedArray p2, int p3, int p4, boolean p5)
    {
        return p2.getBoolean(p3, p2.getBoolean(p4, p5));
    }

    public static android.graphics.drawable.Drawable getDrawable(android.content.res.TypedArray p1, int p2, int p3)
    {
        android.graphics.drawable.Drawable v0 = p1.getDrawable(p2);
        if (v0 == null) {
            v0 = p1.getDrawable(p3);
        }
        return v0;
    }

    public static int getInt(android.content.res.TypedArray p2, int p3, int p4, int p5)
    {
        return p2.getInt(p3, p2.getInt(p4, p5));
    }

    public static int getResourceId(android.content.res.TypedArray p2, int p3, int p4, int p5)
    {
        return p2.getResourceId(p3, p2.getResourceId(p4, p5));
    }

    public static String getString(android.content.res.TypedArray p1, int p2, int p3)
    {
        String v0 = p1.getString(p2);
        if (v0 == null) {
            v0 = p1.getString(p3);
        }
        return v0;
    }

    public static CharSequence[] getTextArray(android.content.res.TypedArray p1, int p2, int p3)
    {
        CharSequence[] v0 = p1.getTextArray(p2);
        if (v0 == null) {
            v0 = p1.getTextArray(p3);
        }
        return v0;
    }
}
package android.support.v4.database;
public final class DatabaseUtilsCompat {

    private DatabaseUtilsCompat()
    {
        return;
    }

    public static String[] appendSelectionArgs(String[] p4, String[] p5)
    {
        if ((p4 != null) && (p4.length != 0)) {
            String[] v0 = new String[(p4.length + p5.length)];
            System.arraycopy(p4, 0, v0, 0, p4.length);
            System.arraycopy(p5, 0, v0, p4.length, p5.length);
        } else {
            v0 = p5;
        }
        return v0;
    }

    public static String concatenateWhere(String p2, String p3)
    {
        if (!android.text.TextUtils.isEmpty(p2)) {
            if (!android.text.TextUtils.isEmpty(p3)) {
                p3 = new StringBuilder().append("(").append(p2).append(") AND (").append(p3).append(")").toString();
            } else {
                p3 = p2;
            }
        }
        return p3;
    }
}
package android.support.v4.graphics;
interface BitmapCompat$BitmapImpl {

    public abstract int getAllocationByteCount();

    public abstract boolean hasMipMap();

    public abstract void setHasMipMap();
}
package android.support.v4.graphics;
public final class BitmapCompat {
    static final android.support.v4.graphics.BitmapCompat$BitmapImpl IMPL;

    static BitmapCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 19) {
            if (v0 < 18) {
                if (v0 < 12) {
                    android.support.v4.graphics.BitmapCompat.IMPL = new android.support.v4.graphics.BitmapCompat$BaseBitmapImpl();
                } else {
                    android.support.v4.graphics.BitmapCompat.IMPL = new android.support.v4.graphics.BitmapCompat$HcMr1BitmapCompatImpl();
                }
            } else {
                android.support.v4.graphics.BitmapCompat.IMPL = new android.support.v4.graphics.BitmapCompat$JbMr2BitmapCompatImpl();
            }
        } else {
            android.support.v4.graphics.BitmapCompat.IMPL = new android.support.v4.graphics.BitmapCompat$KitKatBitmapCompatImpl();
        }
        return;
    }

    private BitmapCompat()
    {
        return;
    }

    public static int getAllocationByteCount(android.graphics.Bitmap p1)
    {
        return android.support.v4.graphics.BitmapCompat.IMPL.getAllocationByteCount(p1);
    }

    public static boolean hasMipMap(android.graphics.Bitmap p1)
    {
        return android.support.v4.graphics.BitmapCompat.IMPL.hasMipMap(p1);
    }

    public static void setHasMipMap(android.graphics.Bitmap p1, boolean p2)
    {
        android.support.v4.graphics.BitmapCompat.IMPL.setHasMipMap(p1, p2);
        return;
    }
}
package android.support.v4.graphics;
 class BitmapCompatHoneycombMr1 {

    BitmapCompatHoneycombMr1()
    {
        return;
    }

    static int getAllocationByteCount(android.graphics.Bitmap p1)
    {
        return p1.getByteCount();
    }
}
package android.support.v4.graphics;
 class BitmapCompatJellybeanMR2 {

    BitmapCompatJellybeanMR2()
    {
        return;
    }

    public static boolean hasMipMap(android.graphics.Bitmap p1)
    {
        return p1.hasMipMap();
    }

    public static void setHasMipMap(android.graphics.Bitmap p0, boolean p1)
    {
        p0.setHasMipMap(p1);
        return;
    }
}
package android.support.v4.graphics;
 class BitmapCompatKitKat {

    BitmapCompatKitKat()
    {
        return;
    }

    static int getAllocationByteCount(android.graphics.Bitmap p1)
    {
        return p1.getAllocationByteCount();
    }
}
package android.support.v4.graphics;
public final class ColorUtils {
    private static final int MIN_ALPHA_SEARCH_MAX_ITERATIONS = 10;
    private static final int MIN_ALPHA_SEARCH_PRECISION = 1;
    private static final ThreadLocal TEMP_ARRAY = None;
    private static final double XYZ_EPSILON = 4576258758203452558;
    private static final double XYZ_KAPPA = 4651156726645941862;
    private static final double XYZ_WHITE_REFERENCE_X = 4636388754964724318;
    private static final double XYZ_WHITE_REFERENCE_Y = 16473;
    private static final double XYZ_WHITE_REFERENCE_Z = 4637362376909166477;

    static ColorUtils()
    {
        android.support.v4.graphics.ColorUtils.TEMP_ARRAY = new ThreadLocal();
        return;
    }

    private ColorUtils()
    {
        return;
    }

    public static int HSLToColor(float[] p13)
    {
        float v3 = p13[0];
        float v5 = p13[2];
        float v1 = ((1065353216 - Math.abs(((1073741824 * v5) - 1065353216))) * p13[1]);
        float v6 = (v5 - (1056964608 * v1));
        float v9 = (v1 * (1065353216 - Math.abs((((v3 / 1114636288) % 1073741824) - 1065353216))));
        int v7_0 = 0;
        int v2_0 = 0;
        int v0_0 = 0;
        switch ((((int) v3) / 60)) {
            case 0:
                v7_0 = Math.round((1132396544 * (v1 + v6)));
                v2_0 = Math.round((1132396544 * (v9 + v6)));
                v0_0 = Math.round((1132396544 * v6));
                break;
            case 1:
                v7_0 = Math.round((1132396544 * (v9 + v6)));
                v2_0 = Math.round((1132396544 * (v1 + v6)));
                v0_0 = Math.round((1132396544 * v6));
                break;
            case 2:
                v7_0 = Math.round((1132396544 * v6));
                v2_0 = Math.round((1132396544 * (v1 + v6)));
                v0_0 = Math.round((1132396544 * (v9 + v6)));
                break;
            case 3:
                v7_0 = Math.round((1132396544 * v6));
                v2_0 = Math.round((1132396544 * (v9 + v6)));
                v0_0 = Math.round((1132396544 * (v1 + v6)));
                break;
            case 4:
                v7_0 = Math.round((1132396544 * (v9 + v6)));
                v2_0 = Math.round((1132396544 * v6));
                v0_0 = Math.round((1132396544 * (v1 + v6)));
                break;
            case 5:
            case 6:
                v7_0 = Math.round((1132396544 * (v1 + v6)));
                v2_0 = Math.round((1132396544 * v6));
                v0_0 = Math.round((1132396544 * (v9 + v6)));
                break;
        }
        return android.graphics.Color.rgb(android.support.v4.graphics.ColorUtils.constrain(v7_0, 0, 255), android.support.v4.graphics.ColorUtils.constrain(v2_0, 0, 255), android.support.v4.graphics.ColorUtils.constrain(v0_0, 0, 255));
    }

    public static int LABToColor(double p8, double p10, double p12)
    {
        double[] v6 = android.support.v4.graphics.ColorUtils.getTempDouble3Array();
        android.support.v4.graphics.ColorUtils.LABToXYZ(p8, p10, p12, v6);
        return android.support.v4.graphics.ColorUtils.XYZToColor(v6[0], v6[1], v6[2]);
    }

    public static void LABToXYZ(double p18, double p20, double p22, double[] p24)
    {
        double v8;
        double v2 = ((16.0 + p18) / 116.0);
        double v0 = ((p20 / 500.0) + v2);
        double v4 = (v2 - (p22 / 200.0));
        double v6_0 = Math.pow(v0, 3.0);
        if (v6_0 <= 0.008856) {
            v8 = (((116.0 * v0) - 16.0) / 903.3);
        } else {
            v8 = v6_0;
        }
        double v10;
        if (p18 <= 7.9996247999999985) {
            v10 = (p18 / 903.3);
        } else {
            v10 = Math.pow(v2, 3.0);
        }
        double v12;
        double v6_1 = Math.pow(v4, 3.0);
        if (v6_1 <= 0.008856) {
            v12 = (((116.0 * v4) - 16.0) / 903.3);
        } else {
            v12 = v6_1;
        }
        p24[0] = (95.047 * v8);
        p24[1] = (100.0 * v10);
        p24[2] = (108.883 * v12);
        return;
    }

    public static void RGBToHSL(int p12, int p13, int p14, float[] p15)
    {
        float v8;
        float v3_0;
        float v7 = (((float) p12) / 1132396544);
        float v2 = (((float) p13) / 1132396544);
        float v0 = (((float) p14) / 1132396544);
        float v5 = Math.max(v7, Math.max(v2, v0));
        float v6 = Math.min(v7, Math.min(v2, v0));
        float v1 = (v5 - v6);
        float v4 = ((v5 + v6) / 1073741824);
        if (v5 != v6) {
            if (v5 != v7) {
                if (v5 != v2) {
                    v3_0 = (((v7 - v2) / v1) + 1082130432);
                } else {
                    v3_0 = (((v0 - v7) / v1) + 1073741824);
                }
            } else {
                v3_0 = (((v2 - v0) / v1) % 1086324736);
            }
            v8 = (v1 / (1065353216 - Math.abs(((1073741824 * v4) - 1065353216))));
        } else {
            v8 = 0;
            v3_0 = 0;
        }
        float v3_1 = ((1114636288 * v3_0) % 1135869952);
        if (v3_1 < 0) {
            v3_1 += 1135869952;
        }
        p15[0] = android.support.v4.graphics.ColorUtils.constrain(v3_1, 0, 1135869952);
        p15[1] = android.support.v4.graphics.ColorUtils.constrain(v8, 0, 1065353216);
        p15[2] = android.support.v4.graphics.ColorUtils.constrain(v4, 0, 1065353216);
        return;
    }

    public static void RGBToLAB(int p7, int p8, int p9, double[] p10)
    {
        android.support.v4.graphics.ColorUtils.RGBToXYZ(p7, p8, p9, p10);
        android.support.v4.graphics.ColorUtils.XYZToLAB(p10[0], p10[1], p10[2], p10);
        return;
    }

    public static void RGBToXYZ(int p16, int p17, int p18, double[] p19)
    {
        if (p19.length == 3) {
            double v6_0;
            double v6_1 = (((double) p16) / 255.0);
            if (v6_1 >= 0.04045) {
                v6_0 = Math.pow(((0.055 + v6_1) / 1.055), 2.4);
            } else {
                v6_0 = (v6_1 / 12.92);
            }
            double v4_1;
            double v4_0 = (((double) p17) / 255.0);
            if (v4_0 >= 0.04045) {
                v4_1 = Math.pow(((0.055 + v4_0) / 1.055), 2.4);
            } else {
                v4_1 = (v4_0 / 12.92);
            }
            double v2_1;
            double v2_0 = (((double) p18) / 255.0);
            if (v2_0 >= 0.04045) {
                v2_1 = Math.pow(((0.055 + v2_0) / 1.055), 2.4);
            } else {
                v2_1 = (v2_0 / 12.92);
            }
            p19[0] = (100.0 * (((0.4124 * v6_0) + (0.3576 * v4_1)) + (0.1805 * v2_1)));
            p19[1] = (100.0 * (((0.2126 * v6_0) + (0.7152 * v4_1)) + (0.0722 * v2_1)));
            p19[2] = (100.0 * (((0.0193 * v6_0) + (0.1192 * v4_1)) + (0.9505 * v2_1)));
            return;
        } else {
            throw new IllegalArgumentException("outXyz must have a length of 3.");
        }
    }

    public static int XYZToColor(double p12, double p14, double p16)
    {
        double v4_0;
        double v4_1 = ((((3.2406 * p12) + (-1.5372 * p14)) + (-0.4986 * p16)) / 100.0);
        double v2_0 = ((((-0.9689 * p12) + (1.8758 * p14)) + (0.0415 * p16)) / 100.0);
        double v0_0 = ((((0.0557 * p12) + (-0.204 * p14)) + (1.057 * p16)) / 100.0);
        if (v4_1 <= 0.0031308) {
            v4_0 = (v4_1 * 12.92);
        } else {
            v4_0 = ((1.055 * Math.pow(v4_1, 0.4166666666666667)) - 0.055);
        }
        double v2_1;
        if (v2_0 <= 0.0031308) {
            v2_1 = (v2_0 * 12.92);
        } else {
            v2_1 = ((1.055 * Math.pow(v2_0, 0.4166666666666667)) - 0.055);
        }
        double v0_1;
        if (v0_0 <= 0.0031308) {
            v0_1 = (v0_0 * 12.92);
        } else {
            v0_1 = ((1.055 * Math.pow(v0_0, 0.4166666666666667)) - 0.055);
        }
        return android.graphics.Color.rgb(android.support.v4.graphics.ColorUtils.constrain(((int) Math.round((255.0 * v4_0))), 0, 255), android.support.v4.graphics.ColorUtils.constrain(((int) Math.round((255.0 * v2_1))), 0, 255), android.support.v4.graphics.ColorUtils.constrain(((int) Math.round((255.0 * v0_1))), 0, 255));
    }

    public static void XYZToLAB(double p8, double p10, double p12, double[] p14)
    {
        if (p14.length == 3) {
            double v8_1 = android.support.v4.graphics.ColorUtils.pivotXyzComponent((p8 / 95.047));
            double v10_1 = android.support.v4.graphics.ColorUtils.pivotXyzComponent((p10 / 100.0));
            double v12_1 = android.support.v4.graphics.ColorUtils.pivotXyzComponent((p12 / 108.883));
            p14[0] = Math.max(0, ((116.0 * v10_1) - 16.0));
            p14[1] = (500.0 * (v8_1 - v10_1));
            p14[2] = (200.0 * (v10_1 - v12_1));
            return;
        } else {
            throw new IllegalArgumentException("outLab must have a length of 3.");
        }
    }

    public static int blendARGB(int p9, int p10, float p11)
    {
        float v3 = (1065353216 - p11);
        return android.graphics.Color.argb(((int) ((((float) android.graphics.Color.alpha(p9)) * v3) + (((float) android.graphics.Color.alpha(p10)) * p11))), ((int) ((((float) android.graphics.Color.red(p9)) * v3) + (((float) android.graphics.Color.red(p10)) * p11))), ((int) ((((float) android.graphics.Color.green(p9)) * v3) + (((float) android.graphics.Color.green(p10)) * p11))), ((int) ((((float) android.graphics.Color.blue(p9)) * v3) + (((float) android.graphics.Color.blue(p10)) * p11))));
    }

    public static void blendHSL(float[] p6, float[] p7, float p8, float[] p9)
    {
        int v5 = 2;
        if (p9.length == 3) {
            float v0 = (1065353216 - p8);
            p9[0] = android.support.v4.graphics.ColorUtils.circularInterpolate(p6[0], p7[0], p8);
            p9[1] = ((p6[1] * v0) + (p7[1] * p8));
            p9[2] = ((p6[v5] * v0) + (p7[v5] * p8));
            return;
        } else {
            throw new IllegalArgumentException("result must have a length of 3.");
        }
    }

    public static void blendLAB(double[] p10, double[] p11, double p12, double[] p14)
    {
        int v8 = 2;
        int v7 = 1;
        if (p14.length == 3) {
            double v0 = (1.0 - p12);
            p14[0] = ((p10[0] * v0) + (p11[0] * p12));
            p14[1] = ((p10[v7] * v0) + (p11[v7] * p12));
            p14[2] = ((p10[v8] * v0) + (p11[v8] * p12));
            return;
        } else {
            throw new IllegalArgumentException("outResult must have a length of 3.");
        }
    }

    public static double calculateContrast(int p8, int p9)
    {
        if (android.graphics.Color.alpha(p9) == 255) {
            if (android.graphics.Color.alpha(p8) < 255) {
                p8 = android.support.v4.graphics.ColorUtils.compositeColors(p8, p9);
            }
            double v0 = (android.support.v4.graphics.ColorUtils.calculateLuminance(p8) + 0.05);
            double v2 = (android.support.v4.graphics.ColorUtils.calculateLuminance(p9) + 0.05);
            return (Math.max(v0, v2) / Math.min(v0, v2));
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("background can not be translucent: #").append(Integer.toHexString(p9)).toString());
        }
    }

    public static double calculateLuminance(int p6)
    {
        double[] v0 = android.support.v4.graphics.ColorUtils.getTempDouble3Array();
        android.support.v4.graphics.ColorUtils.colorToXYZ(p6, v0);
        return (v0[1] / 100.0);
    }

    public static int calculateMinimumAlpha(int p10, int p11, float p12)
    {
        if (android.graphics.Color.alpha(p11) == 255) {
            int v0;
            if (android.support.v4.graphics.ColorUtils.calculateContrast(android.support.v4.graphics.ColorUtils.setAlphaComponent(p10, 255), p11) >= ((double) p12)) {
                int v2 = 0;
                int v1 = 0;
                v0 = 255;
                while ((v2 <= 10) && ((v0 - v1) > 1)) {
                    int v3 = ((v1 + v0) / 2);
                    if (android.support.v4.graphics.ColorUtils.calculateContrast(android.support.v4.graphics.ColorUtils.setAlphaComponent(p10, v3), p11) >= ((double) p12)) {
                        v0 = v3;
                    } else {
                        v1 = v3;
                    }
                    v2++;
                }
            } else {
                v0 = -1;
            }
            return v0;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("background can not be translucent: #").append(Integer.toHexString(p11)).toString());
        }
    }

    static float circularInterpolate(float p3, float p4, float p5)
    {
        if (Math.abs((p4 - p3)) > 1127481344) {
            if (p4 <= p3) {
                p4 += 1135869952;
            } else {
                p3 += 1135869952;
            }
        }
        return ((((p4 - p3) * p5) + p3) % 1135869952);
    }

    public static void colorToHSL(int p3, float[] p4)
    {
        android.support.v4.graphics.ColorUtils.RGBToHSL(android.graphics.Color.red(p3), android.graphics.Color.green(p3), android.graphics.Color.blue(p3), p4);
        return;
    }

    public static void colorToLAB(int p3, double[] p4)
    {
        android.support.v4.graphics.ColorUtils.RGBToLAB(android.graphics.Color.red(p3), android.graphics.Color.green(p3), android.graphics.Color.blue(p3), p4);
        return;
    }

    public static void colorToXYZ(int p3, double[] p4)
    {
        android.support.v4.graphics.ColorUtils.RGBToXYZ(android.graphics.Color.red(p3), android.graphics.Color.green(p3), android.graphics.Color.blue(p3), p4);
        return;
    }

    private static int compositeAlpha(int p2, int p3)
    {
        return (255 - (((255 - p3) * (255 - p2)) / 255));
    }

    public static int compositeColors(int p8, int p9)
    {
        int v2 = android.graphics.Color.alpha(p9);
        int v3 = android.graphics.Color.alpha(p8);
        int v0 = android.support.v4.graphics.ColorUtils.compositeAlpha(v3, v2);
        return android.graphics.Color.argb(v0, android.support.v4.graphics.ColorUtils.compositeComponent(android.graphics.Color.red(p8), v3, android.graphics.Color.red(p9), v2, v0), android.support.v4.graphics.ColorUtils.compositeComponent(android.graphics.Color.green(p8), v3, android.graphics.Color.green(p9), v2, v0), android.support.v4.graphics.ColorUtils.compositeComponent(android.graphics.Color.blue(p8), v3, android.graphics.Color.blue(p9), v2, v0));
    }

    private static int compositeComponent(int p3, int p4, int p5, int p6, int p7)
    {
        int v0_3;
        if (p7 != 0) {
            v0_3 = ((((p3 * 255) * p4) + ((p5 * p6) * (255 - p4))) / (p7 * 255));
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    private static float constrain(float p1, float p2, float p3)
    {
        if (p1 >= p2) {
            if (p1 <= p3) {
                p2 = p1;
            } else {
                p2 = p3;
            }
        }
        return p2;
    }

    private static int constrain(int p0, int p1, int p2)
    {
        if (p0 >= p1) {
            if (p0 <= p2) {
                p1 = p0;
            } else {
                p1 = p2;
            }
        }
        return p1;
    }

    public static double distanceEuclidean(double[] p9, double[] p10)
    {
        return Math.sqrt(((Math.pow((p9[0] - p10[0]), 2.0) + Math.pow((p9[1] - p10[1]), 2.0)) + Math.pow((p9[2] - p10[2]), 2.0)));
    }

    private static double[] getTempDouble3Array()
    {
        double[] v0_1 = ((double[]) android.support.v4.graphics.ColorUtils.TEMP_ARRAY.get());
        if (v0_1 == null) {
            v0_1 = new double[3];
            android.support.v4.graphics.ColorUtils.TEMP_ARRAY.set(v0_1);
        }
        return v0_1;
    }

    private static double pivotXyzComponent(double p4)
    {
        double v0_2;
        if (p4 <= 0.008856) {
            v0_2 = (((903.3 * p4) + 16.0) / 116.0);
        } else {
            v0_2 = Math.pow(p4, 0.3333333333333333);
        }
        return v0_2;
    }

    public static int setAlphaComponent(int p2, int p3)
    {
        if ((p3 >= 0) && (p3 <= 255)) {
            return ((16777215 & p2) | (p3 << 24));
        } else {
            throw new IllegalArgumentException("alpha must be between 0 and 255.");
        }
    }
}
package android.support.v4.graphics.drawable;
interface DrawableCompat$DrawableImpl {

    public abstract void applyTheme();

    public abstract boolean canApplyTheme();

    public abstract void clearColorFilter();

    public abstract int getAlpha();

    public abstract android.graphics.ColorFilter getColorFilter();

    public abstract int getLayoutDirection();

    public abstract void inflate();

    public abstract boolean isAutoMirrored();

    public abstract void jumpToCurrentState();

    public abstract void setAutoMirrored();

    public abstract void setHotspot();

    public abstract void setHotspotBounds();

    public abstract boolean setLayoutDirection();

    public abstract void setTint();

    public abstract void setTintList();

    public abstract void setTintMode();

    public abstract android.graphics.drawable.Drawable wrap();
}
package android.support.v4.graphics.drawable;
public final class DrawableCompat {
    static final android.support.v4.graphics.drawable.DrawableCompat$DrawableImpl IMPL;

    static DrawableCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 23) {
            if (v0 < 21) {
                if (v0 < 19) {
                    if (v0 < 17) {
                        if (v0 < 11) {
                            android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$BaseDrawableImpl();
                        } else {
                            android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$HoneycombDrawableImpl();
                        }
                    } else {
                        android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$JellybeanMr1DrawableImpl();
                    }
                } else {
                    android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$KitKatDrawableImpl();
                }
            } else {
                android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$LollipopDrawableImpl();
            }
        } else {
            android.support.v4.graphics.drawable.DrawableCompat.IMPL = new android.support.v4.graphics.drawable.DrawableCompat$MDrawableImpl();
        }
        return;
    }

    private DrawableCompat()
    {
        return;
    }

    public static void applyTheme(android.graphics.drawable.Drawable p1, android.content.res.Resources$Theme p2)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.applyTheme(p1, p2);
        return;
    }

    public static boolean canApplyTheme(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.canApplyTheme(p1);
    }

    public static void clearColorFilter(android.graphics.drawable.Drawable p1)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.clearColorFilter(p1);
        return;
    }

    public static int getAlpha(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.getAlpha(p1);
    }

    public static android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.getColorFilter(p1);
    }

    public static int getLayoutDirection(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.getLayoutDirection(p1);
    }

    public static void inflate(android.graphics.drawable.Drawable p6, android.content.res.Resources p7, org.xmlpull.v1.XmlPullParser p8, android.util.AttributeSet p9, android.content.res.Resources$Theme p10)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.inflate(p6, p7, p8, p9, p10);
        return;
    }

    public static boolean isAutoMirrored(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.isAutoMirrored(p1);
    }

    public static void jumpToCurrentState(android.graphics.drawable.Drawable p1)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.jumpToCurrentState(p1);
        return;
    }

    public static void setAutoMirrored(android.graphics.drawable.Drawable p1, boolean p2)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setAutoMirrored(p1, p2);
        return;
    }

    public static void setHotspot(android.graphics.drawable.Drawable p1, float p2, float p3)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setHotspot(p1, p2, p3);
        return;
    }

    public static void setHotspotBounds(android.graphics.drawable.Drawable p6, int p7, int p8, int p9, int p10)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setHotspotBounds(p6, p7, p8, p9, p10);
        return;
    }

    public static boolean setLayoutDirection(android.graphics.drawable.Drawable p1, int p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.setLayoutDirection(p1, p2);
    }

    public static void setTint(android.graphics.drawable.Drawable p1, int p2)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setTint(p1, p2);
        return;
    }

    public static void setTintList(android.graphics.drawable.Drawable p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setTintList(p1, p2);
        return;
    }

    public static void setTintMode(android.graphics.drawable.Drawable p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.graphics.drawable.DrawableCompat.IMPL.setTintMode(p1, p2);
        return;
    }

    public static android.graphics.drawable.Drawable unwrap(android.graphics.drawable.Drawable p1)
    {
        if ((p1 instanceof android.support.v4.graphics.drawable.DrawableWrapper)) {
            p1 = ((android.support.v4.graphics.drawable.DrawableWrapper) p1).getWrappedDrawable();
        }
        return p1;
    }

    public static android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p1)
    {
        return android.support.v4.graphics.drawable.DrawableCompat.IMPL.wrap(p1);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatApi23 {

    DrawableCompatApi23()
    {
        return;
    }

    public static int getLayoutDirection(android.graphics.drawable.Drawable p1)
    {
        return p1.getLayoutDirection();
    }

    public static boolean setLayoutDirection(android.graphics.drawable.Drawable p1, int p2)
    {
        return p1.setLayoutDirection(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatBase {

    DrawableCompatBase()
    {
        return;
    }

    public static void inflate(android.graphics.drawable.Drawable p0, android.content.res.Resources p1, org.xmlpull.v1.XmlPullParser p2, android.util.AttributeSet p3, android.content.res.Resources$Theme p4)
    {
        p0.inflate(p1, p2, p3);
        return;
    }

    public static void setTint(android.graphics.drawable.Drawable p1, int p2)
    {
        if ((p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            ((android.support.v4.graphics.drawable.TintAwareDrawable) p1).setTint(p2);
        }
        return;
    }

    public static void setTintList(android.graphics.drawable.Drawable p1, android.content.res.ColorStateList p2)
    {
        if ((p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            ((android.support.v4.graphics.drawable.TintAwareDrawable) p1).setTintList(p2);
        }
        return;
    }

    public static void setTintMode(android.graphics.drawable.Drawable p1, android.graphics.PorterDuff$Mode p2)
    {
        if ((p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            ((android.support.v4.graphics.drawable.TintAwareDrawable) p1).setTintMode(p2);
        }
        return;
    }

    public static android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable p1)
    {
        if (!(p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            p1 = new android.support.v4.graphics.drawable.DrawableWrapperGingerbread(p1);
        }
        return p1;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatHoneycomb {

    DrawableCompatHoneycomb()
    {
        return;
    }

    public static void jumpToCurrentState(android.graphics.drawable.Drawable p0)
    {
        p0.jumpToCurrentState();
        return;
    }

    public static android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable p1)
    {
        if (!(p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            p1 = new android.support.v4.graphics.drawable.DrawableWrapperHoneycomb(p1);
        }
        return p1;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatJellybeanMr1 {
    private static final String TAG = "DrawableCompatJellybeanMr1";
    private static reflect.Method sGetLayoutDirectionMethod;
    private static boolean sGetLayoutDirectionMethodFetched;
    private static reflect.Method sSetLayoutDirectionMethod;
    private static boolean sSetLayoutDirectionMethodFetched;

    DrawableCompatJellybeanMr1()
    {
        return;
    }

    public static int getLayoutDirection(android.graphics.drawable.Drawable p5)
    {
        if (!android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethodFetched) {
            try {
                Class[] v3_1 = new Class[0];
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethod = android.graphics.drawable.Drawable.getDeclaredMethod("getLayoutDirection", v3_1);
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethod.setAccessible(1);
            } catch (Exception v0_0) {
                android.util.Log.i("DrawableCompatJellybeanMr1", "Failed to retrieve getLayoutDirection() method", v0_0);
            }
            android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethodFetched = 1;
        }
        int v1_7;
        if (android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethod == null) {
            v1_7 = -1;
        } else {
            try {
                String v2_3 = new Object[0];
                v1_7 = ((Integer) android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethod.invoke(p5, v2_3)).intValue();
            } catch (Exception v0_1) {
                android.util.Log.i("DrawableCompatJellybeanMr1", "Failed to invoke getLayoutDirection() via reflection", v0_1);
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sGetLayoutDirectionMethod = 0;
            }
        }
        return v1_7;
    }

    public static boolean setLayoutDirection(android.graphics.drawable.Drawable p8, int p9)
    {
        int v1_0 = 1;
        if (!android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethodFetched) {
            try {
                int v5_2 = new Class[1];
                v5_2[0] = Integer.TYPE;
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethod = android.graphics.drawable.Drawable.getDeclaredMethod("setLayoutDirection", v5_2);
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethod.setAccessible(1);
            } catch (Exception v0_0) {
                android.util.Log.i("DrawableCompatJellybeanMr1", "Failed to retrieve setLayoutDirection(int) method", v0_0);
            }
            android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethodFetched = 1;
        }
        if (android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethod == null) {
            v1_0 = 0;
        } else {
            try {
                Object[] v4_3 = new Object[1];
                v4_3[0] = Integer.valueOf(p9);
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethod.invoke(p8, v4_3);
            } catch (Exception v0_1) {
                android.util.Log.i("DrawableCompatJellybeanMr1", "Failed to invoke setLayoutDirection(int) via reflection", v0_1);
                android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.sSetLayoutDirectionMethod = 0;
            }
        }
        return v1_0;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatKitKat {

    DrawableCompatKitKat()
    {
        return;
    }

    public static int getAlpha(android.graphics.drawable.Drawable p1)
    {
        return p1.getAlpha();
    }

    public static boolean isAutoMirrored(android.graphics.drawable.Drawable p1)
    {
        return p1.isAutoMirrored();
    }

    public static void setAutoMirrored(android.graphics.drawable.Drawable p0, boolean p1)
    {
        p0.setAutoMirrored(p1);
        return;
    }

    public static android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable p1)
    {
        if (!(p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            p1 = new android.support.v4.graphics.drawable.DrawableWrapperKitKat(p1);
        }
        return p1;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompatLollipop {

    DrawableCompatLollipop()
    {
        return;
    }

    public static void applyTheme(android.graphics.drawable.Drawable p0, android.content.res.Resources$Theme p1)
    {
        p0.applyTheme(p1);
        return;
    }

    public static boolean canApplyTheme(android.graphics.drawable.Drawable p1)
    {
        return p1.canApplyTheme();
    }

    public static void clearColorFilter(android.graphics.drawable.Drawable p6)
    {
        p6.clearColorFilter();
        if (!(p6 instanceof android.graphics.drawable.InsetDrawable)) {
            if (!(p6 instanceof android.support.v4.graphics.drawable.DrawableWrapper)) {
                if ((p6 instanceof android.graphics.drawable.DrawableContainer)) {
                    android.graphics.drawable.DrawableContainer$DrawableContainerState v4_1 = ((android.graphics.drawable.DrawableContainer$DrawableContainerState) ((android.graphics.drawable.DrawableContainer) p6).getConstantState());
                    if (v4_1 != null) {
                        int v3 = 0;
                        int v2 = v4_1.getChildCount();
                        while (v3 < v2) {
                            android.graphics.drawable.Drawable v0 = v4_1.getChild(v3);
                            if (v0 != null) {
                                android.support.v4.graphics.drawable.DrawableCompatLollipop.clearColorFilter(v0);
                            }
                            v3++;
                        }
                    }
                }
            } else {
                android.support.v4.graphics.drawable.DrawableCompatLollipop.clearColorFilter(((android.support.v4.graphics.drawable.DrawableWrapper) p6).getWrappedDrawable());
            }
        } else {
            android.support.v4.graphics.drawable.DrawableCompatLollipop.clearColorFilter(((android.graphics.drawable.InsetDrawable) p6).getDrawable());
        }
        return;
    }

    public static android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable p1)
    {
        return p1.getColorFilter();
    }

    public static void inflate(android.graphics.drawable.Drawable p0, android.content.res.Resources p1, org.xmlpull.v1.XmlPullParser p2, android.util.AttributeSet p3, android.content.res.Resources$Theme p4)
    {
        p0.inflate(p1, p2, p3, p4);
        return;
    }

    public static void setHotspot(android.graphics.drawable.Drawable p0, float p1, float p2)
    {
        p0.setHotspot(p1, p2);
        return;
    }

    public static void setHotspotBounds(android.graphics.drawable.Drawable p0, int p1, int p2, int p3, int p4)
    {
        p0.setHotspotBounds(p1, p2, p3, p4);
        return;
    }

    public static void setTint(android.graphics.drawable.Drawable p0, int p1)
    {
        p0.setTint(p1);
        return;
    }

    public static void setTintList(android.graphics.drawable.Drawable p0, android.content.res.ColorStateList p1)
    {
        p0.setTintList(p1);
        return;
    }

    public static void setTintMode(android.graphics.drawable.Drawable p0, android.graphics.PorterDuff$Mode p1)
    {
        p0.setTintMode(p1);
        return;
    }

    public static android.graphics.drawable.Drawable wrapForTinting(android.graphics.drawable.Drawable p1)
    {
        if (!(p1 instanceof android.support.v4.graphics.drawable.TintAwareDrawable)) {
            p1 = new android.support.v4.graphics.drawable.DrawableWrapperLollipop(p1);
        }
        return p1;
    }
}
package android.support.v4.graphics.drawable;
public interface DrawableWrapper {

    public abstract android.graphics.drawable.Drawable getWrappedDrawable();

    public abstract void setWrappedDrawable();
}
package android.support.v4.graphics.drawable;
public abstract class DrawableWrapperGingerbread$DrawableWrapperState extends android.graphics.drawable.Drawable$ConstantState {
    int mChangingConfigurations;
    android.graphics.drawable.Drawable$ConstantState mDrawableState;
    android.content.res.ColorStateList mTint;
    android.graphics.PorterDuff$Mode mTintMode;

    DrawableWrapperGingerbread$DrawableWrapperState(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p2, android.content.res.Resources p3)
    {
        this.mTint = 0;
        this.mTintMode = android.support.v4.graphics.drawable.DrawableWrapperGingerbread.DEFAULT_TINT_MODE;
        if (p2 != null) {
            this.mChangingConfigurations = p2.mChangingConfigurations;
            this.mDrawableState = p2.mDrawableState;
            this.mTint = p2.mTint;
            this.mTintMode = p2.mTintMode;
        }
        return;
    }

    boolean canConstantState()
    {
        int v0_1;
        if (this.mDrawableState == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public int getChangingConfigurations()
    {
        int v0_1;
        int v1 = this.mChangingConfigurations;
        if (this.mDrawableState == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mDrawableState.getChangingConfigurations();
        }
        return (v0_1 | v1);
    }

    public android.graphics.drawable.Drawable newDrawable()
    {
        return this.newDrawable(0);
    }

    public abstract android.graphics.drawable.Drawable newDrawable();
}
package android.support.v4.graphics.drawable;
public abstract class RoundedBitmapDrawable extends android.graphics.drawable.Drawable {
    private static final int DEFAULT_PAINT_FLAGS = 3;
    private boolean mApplyGravity;
    final android.graphics.Bitmap mBitmap;
    private int mBitmapHeight;
    private final android.graphics.BitmapShader mBitmapShader;
    private int mBitmapWidth;
    private float mCornerRadius;
    final android.graphics.Rect mDstRect;
    private final android.graphics.RectF mDstRectF;
    private int mGravity;
    private boolean mIsCircular;
    private final android.graphics.Paint mPaint;
    private final android.graphics.Matrix mShaderMatrix;
    private int mTargetDensity;

    RoundedBitmapDrawable(android.content.res.Resources p5, android.graphics.Bitmap p6)
    {
        this.mTargetDensity = 160;
        this.mGravity = 119;
        this.mPaint = new android.graphics.Paint(3);
        this.mShaderMatrix = new android.graphics.Matrix();
        this.mDstRect = new android.graphics.Rect();
        this.mDstRectF = new android.graphics.RectF();
        this.mApplyGravity = 1;
        if (p5 != null) {
            this.mTargetDensity = p5.getDisplayMetrics().densityDpi;
        }
        this.mBitmap = p6;
        if (this.mBitmap == null) {
            this.mBitmapHeight = -1;
            this.mBitmapWidth = -1;
            this.mBitmapShader = 0;
        } else {
            this.computeBitmapSize();
            this.mBitmapShader = new android.graphics.BitmapShader(this.mBitmap, android.graphics.Shader$TileMode.CLAMP, android.graphics.Shader$TileMode.CLAMP);
        }
        return;
    }

    private void computeBitmapSize()
    {
        this.mBitmapWidth = this.mBitmap.getScaledWidth(this.mTargetDensity);
        this.mBitmapHeight = this.mBitmap.getScaledHeight(this.mTargetDensity);
        return;
    }

    private static boolean isGreaterThanZero(float p1)
    {
        int v0_2;
        if (p1 <= 1028443341) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private void updateCircularCornerRadius()
    {
        this.mCornerRadius = ((float) (Math.min(this.mBitmapHeight, this.mBitmapWidth) / 2));
        return;
    }

    public void draw(android.graphics.Canvas p6)
    {
        android.graphics.Bitmap v0 = this.mBitmap;
        if (v0 != null) {
            this.updateDstRect();
            if (this.mPaint.getShader() != null) {
                p6.drawRoundRect(this.mDstRectF, this.mCornerRadius, this.mCornerRadius, this.mPaint);
            } else {
                p6.drawBitmap(v0, 0, this.mDstRect, this.mPaint);
            }
        }
        return;
    }

    public int getAlpha()
    {
        return this.mPaint.getAlpha();
    }

    public final android.graphics.Bitmap getBitmap()
    {
        return this.mBitmap;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        return this.mPaint.getColorFilter();
    }

    public float getCornerRadius()
    {
        return this.mCornerRadius;
    }

    public int getGravity()
    {
        return this.mGravity;
    }

    public int getIntrinsicHeight()
    {
        return this.mBitmapHeight;
    }

    public int getIntrinsicWidth()
    {
        return this.mBitmapWidth;
    }

    public int getOpacity()
    {
        int v1 = -3;
        if ((this.mGravity == 119) && (!this.mIsCircular)) {
            android.graphics.Bitmap v0 = this.mBitmap;
            if ((v0 != null) && ((!v0.hasAlpha()) && ((this.mPaint.getAlpha() >= 255) && (!android.support.v4.graphics.drawable.RoundedBitmapDrawable.isGreaterThanZero(this.mCornerRadius))))) {
                v1 = -1;
            }
        }
        return v1;
    }

    public final android.graphics.Paint getPaint()
    {
        return this.mPaint;
    }

    void gravityCompatApply(int p2, int p3, int p4, android.graphics.Rect p5, android.graphics.Rect p6)
    {
        throw new UnsupportedOperationException();
    }

    public boolean hasAntiAlias()
    {
        return this.mPaint.isAntiAlias();
    }

    public boolean hasMipMap()
    {
        throw new UnsupportedOperationException();
    }

    public boolean isCircular()
    {
        return this.mIsCircular;
    }

    protected void onBoundsChange(android.graphics.Rect p2)
    {
        super.onBoundsChange(p2);
        if (this.mIsCircular) {
            this.updateCircularCornerRadius();
        }
        this.mApplyGravity = 1;
        return;
    }

    public void setAlpha(int p3)
    {
        if (p3 != this.mPaint.getAlpha()) {
            this.mPaint.setAlpha(p3);
            this.invalidateSelf();
        }
        return;
    }

    public void setAntiAlias(boolean p2)
    {
        this.mPaint.setAntiAlias(p2);
        this.invalidateSelf();
        return;
    }

    public void setCircular(boolean p3)
    {
        this.mIsCircular = p3;
        this.mApplyGravity = 1;
        if (!p3) {
            this.setCornerRadius(0);
        } else {
            this.updateCircularCornerRadius();
            this.mPaint.setShader(this.mBitmapShader);
            this.invalidateSelf();
        }
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter p2)
    {
        this.mPaint.setColorFilter(p2);
        this.invalidateSelf();
        return;
    }

    public void setCornerRadius(float p3)
    {
        if (this.mCornerRadius != p3) {
            this.mIsCircular = 0;
            if (!android.support.v4.graphics.drawable.RoundedBitmapDrawable.isGreaterThanZero(p3)) {
                this.mPaint.setShader(0);
            } else {
                this.mPaint.setShader(this.mBitmapShader);
            }
            this.mCornerRadius = p3;
            this.invalidateSelf();
        }
        return;
    }

    public void setDither(boolean p2)
    {
        this.mPaint.setDither(p2);
        this.invalidateSelf();
        return;
    }

    public void setFilterBitmap(boolean p2)
    {
        this.mPaint.setFilterBitmap(p2);
        this.invalidateSelf();
        return;
    }

    public void setGravity(int p2)
    {
        if (this.mGravity != p2) {
            this.mGravity = p2;
            this.mApplyGravity = 1;
            this.invalidateSelf();
        }
        return;
    }

    public void setMipMap(boolean p2)
    {
        throw new UnsupportedOperationException();
    }

    public void setTargetDensity(int p2)
    {
        if (this.mTargetDensity != p2) {
            if (p2 == 0) {
                p2 = 160;
            }
            this.mTargetDensity = p2;
            if (this.mBitmap != null) {
                this.computeBitmapSize();
            }
            this.invalidateSelf();
        }
        return;
    }

    public void setTargetDensity(android.graphics.Canvas p2)
    {
        this.setTargetDensity(p2.getDensity());
        return;
    }

    public void setTargetDensity(android.util.DisplayMetrics p2)
    {
        this.setTargetDensity(p2.densityDpi);
        return;
    }

    void updateDstRect()
    {
        if (this.mApplyGravity) {
            if (!this.mIsCircular) {
                this.gravityCompatApply(this.mGravity, this.mBitmapWidth, this.mBitmapHeight, this.getBounds(), this.mDstRect);
            } else {
                int v2 = Math.min(this.mBitmapWidth, this.mBitmapHeight);
                this.gravityCompatApply(this.mGravity, v2, v2, this.getBounds(), this.mDstRect);
                int v11 = Math.min(this.mDstRect.width(), this.mDstRect.height());
                this.mDstRect.inset(Math.max(0, ((this.mDstRect.width() - v11) / 2)), Math.max(0, ((this.mDstRect.height() - v11) / 2)));
                this.mCornerRadius = (1056964608 * ((float) v11));
            }
            this.mDstRectF.set(this.mDstRect);
            if (this.mBitmapShader != null) {
                this.mShaderMatrix.setTranslate(this.mDstRectF.left, this.mDstRectF.top);
                this.mShaderMatrix.preScale((this.mDstRectF.width() / ((float) this.mBitmap.getWidth())), (this.mDstRectF.height() / ((float) this.mBitmap.getHeight())));
                this.mBitmapShader.setLocalMatrix(this.mShaderMatrix);
                this.mPaint.setShader(this.mBitmapShader);
            }
            this.mApplyGravity = 0;
        }
        return;
    }
}
package android.support.v4.graphics.drawable;
public final class RoundedBitmapDrawableFactory {
    private static final String TAG = "RoundedBitmapDrawableFactory";

    private RoundedBitmapDrawableFactory()
    {
        return;
    }

    public static android.support.v4.graphics.drawable.RoundedBitmapDrawable create(android.content.res.Resources p2, android.graphics.Bitmap p3)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable v0_2;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_2 = new android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable(p2, p3);
        } else {
            v0_2 = new android.support.v4.graphics.drawable.RoundedBitmapDrawable21(p2, p3);
        }
        return v0_2;
    }

    public static android.support.v4.graphics.drawable.RoundedBitmapDrawable create(android.content.res.Resources p4, java.io.InputStream p5)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawable v0 = android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.create(p4, android.graphics.BitmapFactory.decodeStream(p5));
        if (v0.getBitmap() == null) {
            android.util.Log.w("RoundedBitmapDrawableFactory", new StringBuilder().append("RoundedBitmapDrawable cannot decode ").append(p5).toString());
        }
        return v0;
    }

    public static android.support.v4.graphics.drawable.RoundedBitmapDrawable create(android.content.res.Resources p4, String p5)
    {
        android.support.v4.graphics.drawable.RoundedBitmapDrawable v0 = android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.create(p4, android.graphics.BitmapFactory.decodeFile(p5));
        if (v0.getBitmap() == null) {
            android.util.Log.w("RoundedBitmapDrawableFactory", new StringBuilder().append("RoundedBitmapDrawable cannot decode ").append(p5).toString());
        }
        return v0;
    }
}
package android.support.v4.graphics.drawable;
public interface TintAwareDrawable {

    public abstract void setTint();

    public abstract void setTintList();

    public abstract void setTintMode();
}
package android.support.v4.hardware.display;
public abstract class DisplayManagerCompat {
    public static final String DISPLAY_CATEGORY_PRESENTATION = "android.hardware.display.category.PRESENTATION";
    private static final java.util.WeakHashMap sInstances;

    static DisplayManagerCompat()
    {
        android.support.v4.hardware.display.DisplayManagerCompat.sInstances = new java.util.WeakHashMap();
        return;
    }

    DisplayManagerCompat()
    {
        return;
    }

    public static android.support.v4.hardware.display.DisplayManagerCompat getInstance(android.content.Context p4)
    {
        try {
            android.support.v4.hardware.display.DisplayManagerCompat$LegacyImpl v0_0 = ((android.support.v4.hardware.display.DisplayManagerCompat) android.support.v4.hardware.display.DisplayManagerCompat.sInstances.get(p4));
        } catch (java.util.WeakHashMap v2_2) {
            throw v2_2;
        }
        if (v0_0 == null) {
            if (android.os.Build$VERSION.SDK_INT < 17) {
                v0_0 = new android.support.v4.hardware.display.DisplayManagerCompat$LegacyImpl(p4);
            } else {
                v0_0 = new android.support.v4.hardware.display.DisplayManagerCompat$JellybeanMr1Impl(p4);
            }
            android.support.v4.hardware.display.DisplayManagerCompat.sInstances.put(p4, v0_0);
        }
        return v0_0;
    }

    public abstract android.view.Display getDisplay();

    public abstract android.view.Display[] getDisplays();

    public abstract android.view.Display[] getDisplays();
}
package android.support.v4.hardware.display;
final class DisplayManagerJellybeanMr1 {

    DisplayManagerJellybeanMr1()
    {
        return;
    }

    public static android.view.Display getDisplay(Object p1, int p2)
    {
        return ((android.hardware.display.DisplayManager) p1).getDisplay(p2);
    }

    public static Object getDisplayManager(android.content.Context p1)
    {
        return p1.getSystemService("display");
    }

    public static android.view.Display[] getDisplays(Object p1)
    {
        return ((android.hardware.display.DisplayManager) p1).getDisplays();
    }

    public static android.view.Display[] getDisplays(Object p1, String p2)
    {
        return ((android.hardware.display.DisplayManager) p1).getDisplays(p2);
    }
}
package android.support.v4.hardware.fingerprint;
public abstract class FingerprintManagerCompat$AuthenticationCallback {

    public FingerprintManagerCompat$AuthenticationCallback()
    {
        return;
    }

    public void onAuthenticationError(int p1, CharSequence p2)
    {
        return;
    }

    public void onAuthenticationFailed()
    {
        return;
    }

    public void onAuthenticationHelp(int p1, CharSequence p2)
    {
        return;
    }

    public void onAuthenticationSucceeded(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult p1)
    {
        return;
    }
}
package android.support.v4.hardware.fingerprint;
public final class FingerprintManagerCompat$AuthenticationResult {
    private android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject mCryptoObject;

    public FingerprintManagerCompat$AuthenticationResult(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject p1)
    {
        this.mCryptoObject = p1;
        return;
    }

    public android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject getCryptoObject()
    {
        return this.mCryptoObject;
    }
}
package android.support.v4.hardware.fingerprint;
public class FingerprintManagerCompat$CryptoObject {
    private final javax.crypto.Cipher mCipher;
    private final javax.crypto.Mac mMac;
    private final java.security.Signature mSignature;

    public FingerprintManagerCompat$CryptoObject(java.security.Signature p2)
    {
        this.mSignature = p2;
        this.mCipher = 0;
        this.mMac = 0;
        return;
    }

    public FingerprintManagerCompat$CryptoObject(javax.crypto.Cipher p2)
    {
        this.mCipher = p2;
        this.mSignature = 0;
        this.mMac = 0;
        return;
    }

    public FingerprintManagerCompat$CryptoObject(javax.crypto.Mac p2)
    {
        this.mMac = p2;
        this.mCipher = 0;
        this.mSignature = 0;
        return;
    }

    public javax.crypto.Cipher getCipher()
    {
        return this.mCipher;
    }

    public javax.crypto.Mac getMac()
    {
        return this.mMac;
    }

    public java.security.Signature getSignature()
    {
        return this.mSignature;
    }
}
package android.support.v4.hardware.fingerprint;
interface FingerprintManagerCompat$FingerprintManagerCompatImpl {

    public abstract void authenticate();

    public abstract boolean hasEnrolledFingerprints();

    public abstract boolean isHardwareDetected();
}
package android.support.v4.hardware.fingerprint;
public final class FingerprintManagerCompat {
    static final android.support.v4.hardware.fingerprint.FingerprintManagerCompat$FingerprintManagerCompatImpl IMPL;
    private android.content.Context mContext;

    static FingerprintManagerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            android.support.v4.hardware.fingerprint.FingerprintManagerCompat.IMPL = new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$LegacyFingerprintManagerCompatImpl();
        } else {
            android.support.v4.hardware.fingerprint.FingerprintManagerCompat.IMPL = new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$Api23FingerprintManagerCompatImpl();
        }
        return;
    }

    private FingerprintManagerCompat(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public static android.support.v4.hardware.fingerprint.FingerprintManagerCompat from(android.content.Context p1)
    {
        return new android.support.v4.hardware.fingerprint.FingerprintManagerCompat(p1);
    }

    public void authenticate(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject p8, int p9, android.support.v4.os.CancellationSignal p10, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback p11, android.os.Handler p12)
    {
        android.support.v4.hardware.fingerprint.FingerprintManagerCompat.IMPL.authenticate(this.mContext, p8, p9, p10, p11, p12);
        return;
    }

    public boolean hasEnrolledFingerprints()
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompat.IMPL.hasEnrolledFingerprints(this.mContext);
    }

    public boolean isHardwareDetected()
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompat.IMPL.isHardwareDetected(this.mContext);
    }
}
package android.support.v4.hardware.fingerprint;
final class FingerprintManagerCompatApi23$1 extends android.hardware.fingerprint.FingerprintManager$AuthenticationCallback {
    final synthetic android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback val$callback;

    FingerprintManagerCompatApi23$1(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback p1)
    {
        this.val$callback = p1;
        return;
    }

    public void onAuthenticationError(int p2, CharSequence p3)
    {
        this.val$callback.onAuthenticationError(p2, p3);
        return;
    }

    public void onAuthenticationFailed()
    {
        this.val$callback.onAuthenticationFailed();
        return;
    }

    public void onAuthenticationHelp(int p2, CharSequence p3)
    {
        this.val$callback.onAuthenticationHelp(p2, p3);
        return;
    }

    public void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult p4)
    {
        this.val$callback.onAuthenticationSucceeded(new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationResultInternal(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.access$000(p4.getCryptoObject())));
        return;
    }
}
package android.support.v4.hardware.fingerprint;
public abstract class FingerprintManagerCompatApi23$AuthenticationCallback {

    public FingerprintManagerCompatApi23$AuthenticationCallback()
    {
        return;
    }

    public void onAuthenticationError(int p1, CharSequence p2)
    {
        return;
    }

    public void onAuthenticationFailed()
    {
        return;
    }

    public void onAuthenticationHelp(int p1, CharSequence p2)
    {
        return;
    }

    public void onAuthenticationSucceeded(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationResultInternal p1)
    {
        return;
    }
}
package android.support.v4.hardware.fingerprint;
public final class FingerprintManagerCompatApi23$AuthenticationResultInternal {
    private android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject mCryptoObject;

    public FingerprintManagerCompatApi23$AuthenticationResultInternal(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject p1)
    {
        this.mCryptoObject = p1;
        return;
    }

    public android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject getCryptoObject()
    {
        return this.mCryptoObject;
    }
}
package android.support.v4.hardware.fingerprint;
public class FingerprintManagerCompatApi23$CryptoObject {
    private final javax.crypto.Cipher mCipher;
    private final javax.crypto.Mac mMac;
    private final java.security.Signature mSignature;

    public FingerprintManagerCompatApi23$CryptoObject(java.security.Signature p2)
    {
        this.mSignature = p2;
        this.mCipher = 0;
        this.mMac = 0;
        return;
    }

    public FingerprintManagerCompatApi23$CryptoObject(javax.crypto.Cipher p2)
    {
        this.mCipher = p2;
        this.mSignature = 0;
        this.mMac = 0;
        return;
    }

    public FingerprintManagerCompatApi23$CryptoObject(javax.crypto.Mac p2)
    {
        this.mMac = p2;
        this.mCipher = 0;
        this.mSignature = 0;
        return;
    }

    public javax.crypto.Cipher getCipher()
    {
        return this.mCipher;
    }

    public javax.crypto.Mac getMac()
    {
        return this.mMac;
    }

    public java.security.Signature getSignature()
    {
        return this.mSignature;
    }
}
package android.support.v4.hardware.fingerprint;
public final class FingerprintManagerCompatApi23 {

    public FingerprintManagerCompatApi23()
    {
        return;
    }

    static synthetic android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject access$000(android.hardware.fingerprint.FingerprintManager$CryptoObject p1)
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.unwrapCryptoObject(p1);
    }

    public static void authenticate(android.content.Context p6, android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject p7, int p8, Object p9, android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback p10, android.os.Handler p11)
    {
        android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.getFingerprintManager(p6).authenticate(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.wrapCryptoObject(p7), ((android.os.CancellationSignal) p9), p8, android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.wrapCallback(p10), p11);
        return;
    }

    private static android.hardware.fingerprint.FingerprintManager getFingerprintManager(android.content.Context p1)
    {
        return ((android.hardware.fingerprint.FingerprintManager) p1.getSystemService(android.hardware.fingerprint.FingerprintManager));
    }

    public static boolean hasEnrolledFingerprints(android.content.Context p1)
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.getFingerprintManager(p1).hasEnrolledFingerprints();
    }

    public static boolean isHardwareDetected(android.content.Context p1)
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.getFingerprintManager(p1).isHardwareDetected();
    }

    private static android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject unwrapCryptoObject(android.hardware.fingerprint.FingerprintManager$CryptoObject p2)
    {
        android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject v0_0 = 0;
        if (p2 != null) {
            if (p2.getCipher() == null) {
                if (p2.getSignature() == null) {
                    if (p2.getMac() != null) {
                        v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getMac());
                    }
                } else {
                    v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getSignature());
                }
            } else {
                v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getCipher());
            }
        }
        return v0_0;
    }

    private static android.hardware.fingerprint.FingerprintManager$AuthenticationCallback wrapCallback(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback p1)
    {
        return new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$1(p1);
    }

    private static android.hardware.fingerprint.FingerprintManager$CryptoObject wrapCryptoObject(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject p2)
    {
        android.hardware.fingerprint.FingerprintManager$CryptoObject v0_0 = 0;
        if (p2 != null) {
            if (p2.getCipher() == null) {
                if (p2.getSignature() == null) {
                    if (p2.getMac() != null) {
                        v0_0 = new android.hardware.fingerprint.FingerprintManager$CryptoObject(p2.getMac());
                    }
                } else {
                    v0_0 = new android.hardware.fingerprint.FingerprintManager$CryptoObject(p2.getSignature());
                }
            } else {
                v0_0 = new android.hardware.fingerprint.FingerprintManager$CryptoObject(p2.getCipher());
            }
        }
        return v0_0;
    }
}
package android.support.v4.internal;
interface synthetic package-info {
}
package android.support.v4.internal.view;
public interface SupportMenu implements android.view.Menu {
    public static final int CATEGORY_MASK = 16711680;
    public static final int CATEGORY_SHIFT = 16;
    public static final int FLAG_KEEP_OPEN_ON_SUBMENU_OPENED = 4;
    public static final int USER_MASK = 65535;
    public static final int USER_SHIFT;
}
package android.support.v4.internal.view;
public interface SupportMenuItem implements android.view.MenuItem {
    public static final int SHOW_AS_ACTION_ALWAYS = 2;
    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = 8;
    public static final int SHOW_AS_ACTION_IF_ROOM = 1;
    public static final int SHOW_AS_ACTION_NEVER = 0;
    public static final int SHOW_AS_ACTION_WITH_TEXT = 4;

    public abstract boolean collapseActionView();

    public abstract boolean expandActionView();

    public abstract android.view.View getActionView();

    public abstract android.support.v4.view.ActionProvider getSupportActionProvider();

    public abstract boolean isActionViewExpanded();

    public abstract android.view.MenuItem setActionView();

    public abstract android.view.MenuItem setActionView();

    public abstract void setShowAsAction();

    public abstract android.view.MenuItem setShowAsActionFlags();

    public abstract android.support.v4.internal.view.SupportMenuItem setSupportActionProvider();

    public abstract android.support.v4.internal.view.SupportMenuItem setSupportOnActionExpandListener();
}
package android.support.v4.media;
 class MediaBrowserCompat$CallbackHandler extends android.os.Handler {
    private final ref.WeakReference mCallbackImplRef;
    private ref.WeakReference mCallbacksMessengerRef;

    MediaBrowserCompat$CallbackHandler(android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl p2)
    {
        this.mCallbackImplRef = new ref.WeakReference(p2);
        return;
    }

    public void handleMessage(android.os.Message p7)
    {
        if ((this.mCallbacksMessengerRef != null) && ((this.mCallbacksMessengerRef.get() != null) && (this.mCallbackImplRef.get() != null))) {
            android.os.Bundle v0 = p7.getData();
            v0.setClassLoader(android.support.v4.media.session.MediaSessionCompat.getClassLoader());
            switch (p7.what) {
                case 1:
                    ((android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl) this.mCallbackImplRef.get()).onServiceConnected(((android.os.Messenger) this.mCallbacksMessengerRef.get()), v0.getString("data_media_item_id"), ((android.support.v4.media.session.MediaSessionCompat$Token) v0.getParcelable("data_media_session_token")), v0.getBundle("data_root_hints"));
                    break;
                case 2:
                    ((android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl) this.mCallbackImplRef.get()).onConnectionFailed(((android.os.Messenger) this.mCallbacksMessengerRef.get()));
                    break;
                case 3:
                    ((android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl) this.mCallbackImplRef.get()).onLoadChildren(((android.os.Messenger) this.mCallbacksMessengerRef.get()), v0.getString("data_media_item_id"), v0.getParcelableArrayList("data_media_item_list"), v0.getBundle("data_options"));
                    break;
                default:
                    android.util.Log.w("MediaBrowserCompat", new StringBuilder().append("Unhandled message: ").append(p7).append("\n  Client version: ").append(1).append("\n  Service version: ").append(p7.arg1).toString());
            }
        }
        return;
    }

    void setCallbacksMessenger(android.os.Messenger p2)
    {
        this.mCallbacksMessengerRef = new ref.WeakReference(p2);
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal {

    public abstract void onConnected();

    public abstract void onConnectionFailed();

    public abstract void onConnectionSuspended();
}
package android.support.v4.media;
public class MediaBrowserCompat$ConnectionCallback {
    android.support.v4.media.MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal mConnectionCallbackInternal;
    final Object mConnectionCallbackObj;

    public MediaBrowserCompat$ConnectionCallback()
    {
        if (android.os.Build$VERSION.SDK_INT < 21) {
            this.mConnectionCallbackObj = 0;
        } else {
            this.mConnectionCallbackObj = android.support.v4.media.MediaBrowserCompatApi21.createConnectionCallback(new android.support.v4.media.MediaBrowserCompat$ConnectionCallback$StubApi21(this));
        }
        return;
    }

    public void onConnected()
    {
        return;
    }

    public void onConnectionFailed()
    {
        return;
    }

    public void onConnectionSuspended()
    {
        return;
    }

    void setInternalConnectionCallback(android.support.v4.media.MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal p1)
    {
        this.mConnectionCallbackInternal = p1;
        return;
    }
}
package android.support.v4.media;
public abstract class MediaBrowserCompat$ItemCallback {
    final Object mItemCallbackObj;

    public MediaBrowserCompat$ItemCallback()
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            this.mItemCallbackObj = 0;
        } else {
            this.mItemCallbackObj = android.support.v4.media.MediaBrowserCompatApi23.createItemCallback(new android.support.v4.media.MediaBrowserCompat$ItemCallback$StubApi23(this));
        }
        return;
    }

    public void onError(String p1)
    {
        return;
    }

    public void onItemLoaded(android.support.v4.media.MediaBrowserCompat$MediaItem p1)
    {
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserCompat$MediaBrowserImpl {

    public abstract void connect();

    public abstract void disconnect();

    public abstract android.os.Bundle getExtras();

    public abstract void getItem();

    public abstract String getRoot();

    public abstract android.content.ComponentName getServiceComponent();

    public abstract android.support.v4.media.session.MediaSessionCompat$Token getSessionToken();

    public abstract boolean isConnected();

    public abstract void subscribe();

    public abstract void unsubscribe();
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi21$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 this$0;
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback val$cb;
    final synthetic String val$mediaId;

    MediaBrowserCompat$MediaBrowserImplApi21$1(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, String p3)
    {
        this.this$0 = p1;
        this.val$cb = p2;
        this.val$mediaId = p3;
        return;
    }

    public void run()
    {
        this.val$cb.onError(this.val$mediaId);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi21$2 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 this$0;
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback val$cb;
    final synthetic String val$mediaId;

    MediaBrowserCompat$MediaBrowserImplApi21$2(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, String p3)
    {
        this.this$0 = p1;
        this.val$cb = p2;
        this.val$mediaId = p3;
        return;
    }

    public void run()
    {
        this.val$cb.onError(this.val$mediaId);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi21$3 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 this$0;
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback val$cb;
    final synthetic String val$mediaId;

    MediaBrowserCompat$MediaBrowserImplApi21$3(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, String p3)
    {
        this.this$0 = p1;
        this.val$cb = p2;
        this.val$mediaId = p3;
        return;
    }

    public void run()
    {
        this.val$cb.onError(this.val$mediaId);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0;
    final synthetic android.content.ServiceConnection val$thisConnection;

    MediaBrowserCompat$MediaBrowserImplBase$1(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase p1, android.content.ServiceConnection p2)
    {
        this.this$0 = p1;
        this.val$thisConnection = p2;
        return;
    }

    public void run()
    {
        if (this.val$thisConnection == this.this$0.mServiceConnection) {
            this.this$0.forceCloseConnection();
            this.this$0.mCallback.onConnectionFailed();
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$2 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0;
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback val$cb;
    final synthetic String val$mediaId;

    MediaBrowserCompat$MediaBrowserImplBase$2(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, String p3)
    {
        this.this$0 = p1;
        this.val$cb = p2;
        this.val$mediaId = p3;
        return;
    }

    public void run()
    {
        this.val$cb.onError(this.val$mediaId);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$3 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0;
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback val$cb;
    final synthetic String val$mediaId;

    MediaBrowserCompat$MediaBrowserImplBase$3(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, String p3)
    {
        this.this$0 = p1;
        this.val$cb = p2;
        this.val$mediaId = p3;
        return;
    }

    public void run()
    {
        this.val$cb.onError(this.val$mediaId);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection this$1;
    final synthetic android.os.IBinder val$binder;
    final synthetic android.content.ComponentName val$name;

    MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$1(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection p1, android.content.ComponentName p2, android.os.IBinder p3)
    {
        this.this$1 = p1;
        this.val$name = p2;
        this.val$binder = p3;
        return;
    }

    public void run()
    {
        if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
            android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("MediaServiceConnection.onServiceConnected name=").append(this.val$name).append(" binder=").append(this.val$binder).toString());
            this.this$1.this$0.dump();
        }
        if (this.this$1.isCurrent("onServiceConnected")) {
            this.this$1.this$0.mServiceBinderWrapper = new android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper(this.val$binder, this.this$1.this$0.mRootHints);
            this.this$1.this$0.mCallbacksMessenger = new android.os.Messenger(this.this$1.this$0.mHandler);
            this.this$1.this$0.mHandler.setCallbacksMessenger(this.this$1.this$0.mCallbacksMessenger);
            this.this$1.this$0.mState = 1;
            try {
                if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                    android.util.Log.d("MediaBrowserCompat", "ServiceCallbacks.onConnect...");
                    this.this$1.this$0.dump();
                }
            } catch (android.os.RemoteException v0) {
                android.util.Log.w("MediaBrowserCompat", new StringBuilder().append("RemoteException during connect for ").append(this.this$1.this$0.mServiceComponent).toString());
                if (!android.support.v4.media.MediaBrowserCompat.DEBUG) {
                    return;
                } else {
                    android.util.Log.d("MediaBrowserCompat", "ServiceCallbacks.onConnect...");
                    this.this$1.this$0.dump();
                    return;
                }
            }
            this.this$1.this$0.mServiceBinderWrapper.connect(this.this$1.this$0.mContext, this.this$1.this$0.mCallbacksMessenger);
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$2 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection this$1;
    final synthetic android.content.ComponentName val$name;

    MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$2(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection p1, android.content.ComponentName p2)
    {
        this.this$1 = p1;
        this.val$name = p2;
        return;
    }

    public void run()
    {
        if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
            android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("MediaServiceConnection.onServiceDisconnected name=").append(this.val$name).append(" this=").append(this).append(" mServiceConnection=").append(this.this$1.this$0.mServiceConnection).toString());
            this.this$1.this$0.dump();
        }
        if (this.this$1.isCurrent("onServiceDisconnected")) {
            this.this$1.this$0.mServiceBinderWrapper = 0;
            this.this$1.this$0.mCallbacksMessenger = 0;
            this.this$1.this$0.mHandler.setCallbacksMessenger(0);
            this.this$1.this$0.mState = 3;
            this.this$1.this$0.mCallback.onConnectionSuspended();
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection implements android.content.ServiceConnection {
    final synthetic android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase this$0;

    MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase p1)
    {
        this.this$0 = p1;
        return;
    }

    private void postOrRun(Runnable p3)
    {
        if (Thread.currentThread() != this.this$0.mHandler.getLooper().getThread()) {
            this.this$0.mHandler.post(p3);
        } else {
            p3.run();
        }
        return;
    }

    boolean isCurrent(String p4)
    {
        int v0_2;
        if (this.this$0.mServiceConnection == this) {
            v0_2 = 1;
        } else {
            if (this.this$0.mState != 0) {
                android.util.Log.i("MediaBrowserCompat", new StringBuilder().append(p4).append(" for ").append(this.this$0.mServiceComponent).append(" with mServiceConnection=").append(this.this$0.mServiceConnection).append(" this=").append(this).toString());
            }
            v0_2 = 0;
        }
        return v0_2;
    }

    public void onServiceConnected(android.content.ComponentName p2, android.os.IBinder p3)
    {
        this.postOrRun(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$1(this, p2, p3));
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p2)
    {
        this.postOrRun(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection$2(this, p2));
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserCompat$MediaBrowserServiceCallbackImpl {

    public abstract void onConnectionFailed();

    public abstract void onLoadChildren();

    public abstract void onServiceConnected();
}
package android.support.v4.media;
final class MediaBrowserCompat$MediaItem$1 implements android.os.Parcelable$Creator {

    MediaBrowserCompat$MediaItem$1()
    {
        return;
    }

    public android.support.v4.media.MediaBrowserCompat$MediaItem createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.MediaBrowserCompat$MediaItem(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.MediaBrowserCompat$MediaItem[] newArray(int p2)
    {
        android.support.v4.media.MediaBrowserCompat$MediaItem[] v0 = new android.support.v4.media.MediaBrowserCompat$MediaItem[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media;
public interface annotation MediaBrowserCompat$MediaItem$Flags implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public class MediaBrowserCompat$MediaItem implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR = None;
    public static final int FLAG_BROWSABLE = 1;
    public static final int FLAG_PLAYABLE = 2;
    private final android.support.v4.media.MediaDescriptionCompat mDescription;
    private final int mFlags;

    static MediaBrowserCompat$MediaItem()
    {
        android.support.v4.media.MediaBrowserCompat$MediaItem.CREATOR = new android.support.v4.media.MediaBrowserCompat$MediaItem$1();
        return;
    }

    MediaBrowserCompat$MediaItem(android.os.Parcel p2)
    {
        this.mFlags = p2.readInt();
        this.mDescription = ((android.support.v4.media.MediaDescriptionCompat) android.support.v4.media.MediaDescriptionCompat.CREATOR.createFromParcel(p2));
        return;
    }

    public MediaBrowserCompat$MediaItem(android.support.v4.media.MediaDescriptionCompat p3, int p4)
    {
        if (p3 != null) {
            if (!android.text.TextUtils.isEmpty(p3.getMediaId())) {
                this.mFlags = p4;
                this.mDescription = p3;
                return;
            } else {
                throw new IllegalArgumentException("description must have a non-empty media id");
            }
        } else {
            throw new IllegalArgumentException("description cannot be null");
        }
    }

    public static android.support.v4.media.MediaBrowserCompat$MediaItem fromMediaItem(Object p4)
    {
        if ((p4 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.support.v4.media.MediaBrowserCompat$MediaItem v2_2 = new android.support.v4.media.MediaBrowserCompat$MediaItem(android.support.v4.media.MediaDescriptionCompat.fromMediaDescription(android.support.v4.media.MediaBrowserCompatApi21$MediaItem.getDescription(p4)), android.support.v4.media.MediaBrowserCompatApi21$MediaItem.getFlags(p4));
        } else {
            v2_2 = 0;
        }
        return v2_2;
    }

    public static java.util.List fromMediaItemList(java.util.List p4)
    {
        if ((p4 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            java.util.ArrayList v1_0 = new java.util.ArrayList(p4.size());
            java.util.Iterator v2_2 = p4.iterator();
            while (v2_2.hasNext()) {
                v1_0.add(android.support.v4.media.MediaBrowserCompat$MediaItem.fromMediaItem(v2_2.next()));
            }
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.media.MediaDescriptionCompat getDescription()
    {
        return this.mDescription;
    }

    public int getFlags()
    {
        return this.mFlags;
    }

    public String getMediaId()
    {
        return this.mDescription.getMediaId();
    }

    public boolean isBrowsable()
    {
        int v0_2;
        if ((this.mFlags & 1) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isPlayable()
    {
        int v0_2;
        if ((this.mFlags & 2) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder("MediaItem{");
        v0_1.append("mFlags=").append(this.mFlags);
        v0_1.append(", mDescription=").append(this.mDescription);
        v0_1.append(125);
        return v0_1.toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeInt(this.mFlags);
        this.mDescription.writeToParcel(p2, p3);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$ServiceBinderWrapper {
    private android.os.Messenger mMessenger;
    private android.os.Bundle mRootHints;

    public MediaBrowserCompat$ServiceBinderWrapper(android.os.IBinder p2, android.os.Bundle p3)
    {
        this.mMessenger = new android.os.Messenger(p2);
        this.mRootHints = p3;
        return;
    }

    private void sendRequest(int p3, android.os.Bundle p4, android.os.Messenger p5)
    {
        android.os.Message v0 = android.os.Message.obtain();
        v0.what = p3;
        v0.arg1 = 1;
        v0.setData(p4);
        v0.replyTo = p5;
        this.mMessenger.send(v0);
        return;
    }

    void addSubscription(String p3, android.os.IBinder p4, android.os.Bundle p5, android.os.Messenger p6)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_media_item_id", p3);
        android.support.v4.app.BundleCompat.putBinder(v0_1, "data_callback_token", p4);
        v0_1.putBundle("data_options", p5);
        this.sendRequest(3, v0_1, p6);
        return;
    }

    void connect(android.content.Context p4, android.os.Messenger p5)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_package_name", p4.getPackageName());
        v0_1.putBundle("data_root_hints", this.mRootHints);
        this.sendRequest(1, v0_1, p5);
        return;
    }

    void disconnect(android.os.Messenger p3)
    {
        this.sendRequest(2, 0, p3);
        return;
    }

    void getMediaItem(String p3, android.support.v4.os.ResultReceiver p4, android.os.Messenger p5)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_media_item_id", p3);
        v0_1.putParcelable("data_result_receiver", p4);
        this.sendRequest(5, v0_1, p5);
        return;
    }

    void registerCallbackMessenger(android.os.Messenger p4)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putBundle("data_root_hints", this.mRootHints);
        this.sendRequest(6, v0_1, p4);
        return;
    }

    void removeSubscription(String p3, android.os.IBinder p4, android.os.Messenger p5)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_media_item_id", p3);
        android.support.v4.app.BundleCompat.putBinder(v0_1, "data_callback_token", p4);
        this.sendRequest(4, v0_1, p5);
        return;
    }

    void unregisterCallbackMessenger(android.os.Messenger p3)
    {
        this.sendRequest(7, 0, p3);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$Subscription {
    private final java.util.List mCallbacks;
    private final java.util.List mOptionsList;

    public MediaBrowserCompat$Subscription()
    {
        this.mCallbacks = new java.util.ArrayList();
        this.mOptionsList = new java.util.ArrayList();
        return;
    }

    public android.support.v4.media.MediaBrowserCompat$SubscriptionCallback getCallback(android.os.Bundle p3)
    {
        int v0 = 0;
        while (v0 < this.mOptionsList.size()) {
            if (!android.support.v4.media.MediaBrowserCompatUtils.areSameOptions(((android.os.Bundle) this.mOptionsList.get(v0)), p3)) {
                v0++;
            } else {
                android.support.v4.media.MediaBrowserCompat$SubscriptionCallback v1_4 = ((android.support.v4.media.MediaBrowserCompat$SubscriptionCallback) this.mCallbacks.get(v0));
            }
            return v1_4;
        }
        v1_4 = 0;
        return v1_4;
    }

    public java.util.List getCallbacks()
    {
        return this.mCallbacks;
    }

    public java.util.List getOptionsList()
    {
        return this.mOptionsList;
    }

    public boolean isEmpty()
    {
        return this.mCallbacks.isEmpty();
    }

    public void putCallback(android.os.Bundle p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p4)
    {
        int v0 = 0;
        while (v0 < this.mOptionsList.size()) {
            if (!android.support.v4.media.MediaBrowserCompatUtils.areSameOptions(((android.os.Bundle) this.mOptionsList.get(v0)), p3)) {
                v0++;
            } else {
                this.mCallbacks.set(v0, p4);
            }
            return;
        }
        this.mCallbacks.add(p4);
        this.mOptionsList.add(p3);
        return;
    }
}
package android.support.v4.media;
public abstract class MediaBrowserCompat$SubscriptionCallback {
    private final Object mSubscriptionCallbackObj;
    ref.WeakReference mSubscriptionRef;
    private final android.os.IBinder mToken;

    public MediaBrowserCompat$SubscriptionCallback()
    {
        if ((android.os.Build$VERSION.SDK_INT < 24) && (!android.support.v4.os.BuildCompat.isAtLeastN())) {
            if (android.os.Build$VERSION.SDK_INT < 21) {
                this.mSubscriptionCallbackObj = 0;
                this.mToken = new android.os.Binder();
            } else {
                this.mSubscriptionCallbackObj = android.support.v4.media.MediaBrowserCompatApi21.createSubscriptionCallback(new android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi21(this));
                this.mToken = new android.os.Binder();
            }
        } else {
            this.mSubscriptionCallbackObj = android.support.v4.media.MediaBrowserCompatApi24.createSubscriptionCallback(new android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi24(this));
            this.mToken = 0;
        }
        return;
    }

    static synthetic android.os.IBinder access$000(android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p1)
    {
        return p1.mToken;
    }

    static synthetic void access$100(android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p0, android.support.v4.media.MediaBrowserCompat$Subscription p1)
    {
        p0.setSubscription(p1);
        return;
    }

    static synthetic Object access$200(android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p1)
    {
        return p1.mSubscriptionCallbackObj;
    }

    private void setSubscription(android.support.v4.media.MediaBrowserCompat$Subscription p2)
    {
        this.mSubscriptionRef = new ref.WeakReference(p2);
        return;
    }

    public void onChildrenLoaded(String p1, java.util.List p2)
    {
        return;
    }

    public void onChildrenLoaded(String p1, java.util.List p2, android.os.Bundle p3)
    {
        return;
    }

    public void onError(String p1)
    {
        return;
    }

    public void onError(String p1, android.os.Bundle p2)
    {
        return;
    }
}
package android.support.v4.media;
public final class MediaBrowserCompat {
    static final boolean DEBUG = False;
    public static final String EXTRA_PAGE = "android.media.browse.extra.PAGE";
    public static final String EXTRA_PAGE_SIZE = "android.media.browse.extra.PAGE_SIZE";
    static final String TAG = "MediaBrowserCompat";
    private final android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl mImpl;

    static MediaBrowserCompat()
    {
        android.support.v4.media.MediaBrowserCompat.DEBUG = android.util.Log.isLoggable("MediaBrowserCompat", 3);
        return;
    }

    public MediaBrowserCompat(android.content.Context p3, android.content.ComponentName p4, android.support.v4.media.MediaBrowserCompat$ConnectionCallback p5, android.os.Bundle p6)
    {
        if ((android.os.Build$VERSION.SDK_INT < 24) && (!android.support.v4.os.BuildCompat.isAtLeastN())) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    this.mImpl = new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase(p3, p4, p5, p6);
                } else {
                    this.mImpl = new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21(p3, p4, p5, p6);
                }
            } else {
                this.mImpl = new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi23(p3, p4, p5, p6);
            }
        } else {
            this.mImpl = new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi24(p3, p4, p5, p6);
        }
        return;
    }

    public void connect()
    {
        this.mImpl.connect();
        return;
    }

    public void disconnect()
    {
        this.mImpl.disconnect();
        return;
    }

    public android.os.Bundle getExtras()
    {
        return this.mImpl.getExtras();
    }

    public void getItem(String p2, android.support.v4.media.MediaBrowserCompat$ItemCallback p3)
    {
        this.mImpl.getItem(p2, p3);
        return;
    }

    public String getRoot()
    {
        return this.mImpl.getRoot();
    }

    public android.content.ComponentName getServiceComponent()
    {
        return this.mImpl.getServiceComponent();
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mImpl.getSessionToken();
    }

    public boolean isConnected()
    {
        return this.mImpl.isConnected();
    }

    public void subscribe(String p3, android.os.Bundle p4, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p5)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            if (p5 != null) {
                if (p4 != null) {
                    this.mImpl.subscribe(p3, p4, p5);
                    return;
                } else {
                    throw new IllegalArgumentException("options are null");
                }
            } else {
                throw new IllegalArgumentException("callback is null");
            }
        } else {
            throw new IllegalArgumentException("parentId is empty");
        }
    }

    public void subscribe(String p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p4)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            if (p4 != null) {
                this.mImpl.subscribe(p3, 0, p4);
                return;
            } else {
                throw new IllegalArgumentException("callback is null");
            }
        } else {
            throw new IllegalArgumentException("parentId is empty");
        }
    }

    public void unsubscribe(String p3)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            this.mImpl.unsubscribe(p3, 0);
            return;
        } else {
            throw new IllegalArgumentException("parentId is empty");
        }
    }

    public void unsubscribe(String p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p4)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            if (p4 != null) {
                this.mImpl.unsubscribe(p3, p4);
                return;
            } else {
                throw new IllegalArgumentException("callback is null");
            }
        } else {
            throw new IllegalArgumentException("parentId is empty");
        }
    }
}
package android.support.v4.media;
interface MediaBrowserCompatApi21$ConnectionCallback {

    public abstract void onConnected();

    public abstract void onConnectionFailed();

    public abstract void onConnectionSuspended();
}
package android.support.v4.media;
 class MediaBrowserCompatApi21$ConnectionCallbackProxy extends android.media.browse.MediaBrowser$ConnectionCallback {
    protected final android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback mConnectionCallback;

    public MediaBrowserCompatApi21$ConnectionCallbackProxy(android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback p1)
    {
        this.mConnectionCallback = p1;
        return;
    }

    public void onConnected()
    {
        this.mConnectionCallback.onConnected();
        return;
    }

    public void onConnectionFailed()
    {
        this.mConnectionCallback.onConnectionFailed();
        return;
    }

    public void onConnectionSuspended()
    {
        this.mConnectionCallback.onConnectionSuspended();
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompatApi21$MediaItem {

    MediaBrowserCompatApi21$MediaItem()
    {
        return;
    }

    public static Object getDescription(Object p1)
    {
        return ((android.media.browse.MediaBrowser$MediaItem) p1).getDescription();
    }

    public static int getFlags(Object p1)
    {
        return ((android.media.browse.MediaBrowser$MediaItem) p1).getFlags();
    }
}
package android.support.v4.media;
interface MediaBrowserCompatApi21$SubscriptionCallback {

    public abstract void onChildrenLoaded();

    public abstract void onError();
}
package android.support.v4.media;
 class MediaBrowserCompatApi21$SubscriptionCallbackProxy extends android.media.browse.MediaBrowser$SubscriptionCallback {
    protected final android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback mSubscriptionCallback;

    public MediaBrowserCompatApi21$SubscriptionCallbackProxy(android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback p1)
    {
        this.mSubscriptionCallback = p1;
        return;
    }

    public void onChildrenLoaded(String p2, java.util.List p3)
    {
        this.mSubscriptionCallback.onChildrenLoaded(p2, p3);
        return;
    }

    public void onError(String p2)
    {
        this.mSubscriptionCallback.onError(p2);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompatApi21 {
    static final String NULL_MEDIA_ITEM_ID = "android.support.v4.media.MediaBrowserCompat.NULL_MEDIA_ITEM";

    MediaBrowserCompatApi21()
    {
        return;
    }

    public static void connect(Object p0)
    {
        ((android.media.browse.MediaBrowser) p0).connect();
        return;
    }

    public static Object createBrowser(android.content.Context p1, android.content.ComponentName p2, Object p3, android.os.Bundle p4)
    {
        return new android.media.browse.MediaBrowser(p1, p2, ((android.media.browse.MediaBrowser$ConnectionCallback) p3), p4);
    }

    public static Object createConnectionCallback(android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback p1)
    {
        return new android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallbackProxy(p1);
    }

    public static Object createSubscriptionCallback(android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback p1)
    {
        return new android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallbackProxy(p1);
    }

    public static void disconnect(Object p0)
    {
        ((android.media.browse.MediaBrowser) p0).disconnect();
        return;
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.media.browse.MediaBrowser) p1).getExtras();
    }

    public static String getRoot(Object p1)
    {
        return ((android.media.browse.MediaBrowser) p1).getRoot();
    }

    public static android.content.ComponentName getServiceComponent(Object p1)
    {
        return ((android.media.browse.MediaBrowser) p1).getServiceComponent();
    }

    public static Object getSessionToken(Object p1)
    {
        return ((android.media.browse.MediaBrowser) p1).getSessionToken();
    }

    public static boolean isConnected(Object p1)
    {
        return ((android.media.browse.MediaBrowser) p1).isConnected();
    }

    public static void subscribe(Object p0, String p1, Object p2)
    {
        ((android.media.browse.MediaBrowser) p0).subscribe(p1, ((android.media.browse.MediaBrowser$SubscriptionCallback) p2));
        return;
    }

    public static void unsubscribe(Object p0, String p1)
    {
        ((android.media.browse.MediaBrowser) p0).unsubscribe(p1);
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserCompatApi23$ItemCallback {

    public abstract void onError();

    public abstract void onItemLoaded();
}
package android.support.v4.media;
 class MediaBrowserCompatApi23$ItemCallbackProxy extends android.media.browse.MediaBrowser$ItemCallback {
    protected final android.support.v4.media.MediaBrowserCompatApi23$ItemCallback mItemCallback;

    public MediaBrowserCompatApi23$ItemCallbackProxy(android.support.v4.media.MediaBrowserCompatApi23$ItemCallback p1)
    {
        this.mItemCallback = p1;
        return;
    }

    public void onError(String p2)
    {
        this.mItemCallback.onError(p2);
        return;
    }

    public void onItemLoaded(android.media.browse.MediaBrowser$MediaItem p3)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        p3.writeToParcel(v0, 0);
        this.mItemCallback.onItemLoaded(v0);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompatApi23 {

    MediaBrowserCompatApi23()
    {
        return;
    }

    public static Object createItemCallback(android.support.v4.media.MediaBrowserCompatApi23$ItemCallback p1)
    {
        return new android.support.v4.media.MediaBrowserCompatApi23$ItemCallbackProxy(p1);
    }

    public static void getItem(Object p0, String p1, Object p2)
    {
        ((android.media.browse.MediaBrowser) p0).getItem(p1, ((android.media.browse.MediaBrowser$ItemCallback) p2));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompatApi24 {

    MediaBrowserCompatApi24()
    {
        return;
    }

    public static Object createSubscriptionCallback(android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallback p1)
    {
        return new android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallbackProxy(p1);
    }

    public static void subscribe(Object p0, String p1, android.os.Bundle p2, Object p3)
    {
        ((android.media.browse.MediaBrowser) p0).subscribe(p1, p2, ((android.media.browse.MediaBrowser$SubscriptionCallback) p3));
        return;
    }

    public static void unsubscribe(Object p0, String p1, Object p2)
    {
        ((android.media.browse.MediaBrowser) p0).unsubscribe(p1, ((android.media.browse.MediaBrowser$SubscriptionCallback) p2));
        return;
    }
}
package android.support.v4.media;
public class MediaBrowserCompatUtils {

    public MediaBrowserCompatUtils()
    {
        return;
    }

    public static boolean areSameOptions(android.os.Bundle p5, android.os.Bundle p6)
    {
        int v0 = 1;
        if (p5 != p6) {
            if (p5 != null) {
                if (p6 != null) {
                    if ((p5.getInt("android.media.browse.extra.PAGE", -1) != p6.getInt("android.media.browse.extra.PAGE", -1)) || (p5.getInt("android.media.browse.extra.PAGE_SIZE", -1) != p6.getInt("android.media.browse.extra.PAGE_SIZE", -1))) {
                        v0 = 0;
                    }
                } else {
                    if ((p5.getInt("android.media.browse.extra.PAGE", -1) != -1) || (p5.getInt("android.media.browse.extra.PAGE_SIZE", -1) != -1)) {
                        v0 = 0;
                    }
                }
            } else {
                if ((p6.getInt("android.media.browse.extra.PAGE", -1) != -1) || (p6.getInt("android.media.browse.extra.PAGE_SIZE", -1) != -1)) {
                    v0 = 0;
                }
            }
        }
        return v0;
    }

    public static boolean hasDuplicatedItems(android.os.Bundle p11, android.os.Bundle p12)
    {
        int v2;
        int v8 = 1;
        if (p11 != null) {
            v2 = p11.getInt("android.media.browse.extra.PAGE", -1);
        } else {
            v2 = -1;
        }
        int v3;
        if (p12 != null) {
            v3 = p12.getInt("android.media.browse.extra.PAGE", -1);
        } else {
            v3 = -1;
        }
        int v4;
        if (p11 != null) {
            v4 = p11.getInt("android.media.browse.extra.PAGE_SIZE", -1);
        } else {
            v4 = -1;
        }
        int v5;
        if (p12 != null) {
            v5 = p12.getInt("android.media.browse.extra.PAGE_SIZE", -1);
        } else {
            v5 = -1;
        }
        if ((v2 != -1) && (v4 != -1)) {
            int v6 = (v4 * v2);
            int v0 = ((v6 + v4) - 1);
        } else {
            v6 = 0;
            v0 = 2147483647;
        }
        if ((v3 != -1) && (v5 != -1)) {
            int v7 = (v5 * v3);
            int v1 = ((v7 + v5) - 1);
        } else {
            v7 = 0;
            v1 = 2147483647;
        }
        if (((v6 > v7) || (v7 > v0)) && ((v6 > v1) || (v1 > v0))) {
            v8 = 0;
        }
        return v8;
    }
}
package android.support.v4.media;
 class MediaBrowserProtocol {
    public static final int CLIENT_MSG_ADD_SUBSCRIPTION = 3;
    public static final int CLIENT_MSG_CONNECT = 1;
    public static final int CLIENT_MSG_DISCONNECT = 2;
    public static final int CLIENT_MSG_GET_MEDIA_ITEM = 5;
    public static final int CLIENT_MSG_REGISTER_CALLBACK_MESSENGER = 6;
    public static final int CLIENT_MSG_REMOVE_SUBSCRIPTION = 4;
    public static final int CLIENT_MSG_UNREGISTER_CALLBACK_MESSENGER = 7;
    public static final int CLIENT_VERSION_1 = 1;
    public static final int CLIENT_VERSION_CURRENT = 1;
    public static final String DATA_CALLBACK_TOKEN = "data_callback_token";
    public static final String DATA_CALLING_UID = "data_calling_uid";
    public static final String DATA_MEDIA_ITEM_ID = "data_media_item_id";
    public static final String DATA_MEDIA_ITEM_LIST = "data_media_item_list";
    public static final String DATA_MEDIA_SESSION_TOKEN = "data_media_session_token";
    public static final String DATA_OPTIONS = "data_options";
    public static final String DATA_PACKAGE_NAME = "data_package_name";
    public static final String DATA_RESULT_RECEIVER = "data_result_receiver";
    public static final String DATA_ROOT_HINTS = "data_root_hints";
    public static final String EXTRA_CLIENT_VERSION = "extra_client_version";
    public static final String EXTRA_MESSENGER_BINDER = "extra_messenger";
    public static final String EXTRA_SERVICE_VERSION = "extra_service_version";
    public static final int SERVICE_MSG_ON_CONNECT = 1;
    public static final int SERVICE_MSG_ON_CONNECT_FAILED = 2;
    public static final int SERVICE_MSG_ON_LOAD_CHILDREN = 3;
    public static final int SERVICE_VERSION_1 = 1;
    public static final int SERVICE_VERSION_CURRENT = 1;

    MediaBrowserProtocol()
    {
        return;
    }
}
package android.support.v4.media;
public final class MediaBrowserServiceCompat$BrowserRoot {
    public static final String EXTRA_OFFLINE = "android.service.media.extra.OFFLINE";
    public static final String EXTRA_RECENT = "android.service.media.extra.RECENT";
    public static final String EXTRA_SUGGESTED = "android.service.media.extra.SUGGESTED";
    public static final String EXTRA_SUGGESTION_KEYWORDS = "android.service.media.extra.SUGGESTION_KEYWORDS";
    private final android.os.Bundle mExtras;
    private final String mRootId;

    public MediaBrowserServiceCompat$BrowserRoot(String p3, android.os.Bundle p4)
    {
        if (p3 != null) {
            this.mRootId = p3;
            this.mExtras = p4;
            return;
        } else {
            throw new IllegalArgumentException("The root id in BrowserRoot cannot be null. Use null for BrowserRoot instead.");
        }
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public String getRootId()
    {
        return this.mRootId;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ConnectionRecord {
    android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks callbacks;
    String pkg;
    android.support.v4.media.MediaBrowserServiceCompat$BrowserRoot root;
    android.os.Bundle rootHints;
    java.util.HashMap subscriptions;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$ConnectionRecord(android.support.v4.media.MediaBrowserServiceCompat p2)
    {
        this.this$0 = p2;
        this.subscriptions = new java.util.HashMap();
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserServiceCompat$MediaBrowserServiceImpl {

    public abstract android.os.Bundle getBrowserRootHints();

    public abstract void notifyChildrenChanged();

    public abstract android.os.IBinder onBind();

    public abstract void onCreate();

    public abstract void setSessionToken();
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 this$1;
    final synthetic android.os.Bundle val$options;
    final synthetic String val$parentId;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$1(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 p1, String p2, android.os.Bundle p3)
    {
        this.this$1 = p1;
        this.val$parentId = p2;
        this.val$options = p3;
        return;
    }

    public void run()
    {
        java.util.Iterator v5 = this.this$1.this$0.mConnections.keySet().iterator();
        while (v5.hasNext()) {
            android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v3_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.get(((android.os.IBinder) v5.next())));
            java.util.List v2_1 = ((java.util.List) v3_1.subscriptions.get(this.val$parentId));
            if (v2_1 != null) {
                java.util.Iterator v6_1 = v2_1.iterator();
                while (v6_1.hasNext()) {
                    android.support.v4.util.Pair v1_1 = ((android.support.v4.util.Pair) v6_1.next());
                    if (android.support.v4.media.MediaBrowserCompatUtils.hasDuplicatedItems(this.val$options, ((android.os.Bundle) v1_1.second))) {
                        this.this$1.this$0.performLoadChildren(this.val$parentId, v3_1, ((android.os.Bundle) v1_1.second));
                    }
                }
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase this$1;
    final synthetic android.support.v4.media.session.MediaSessionCompat$Token val$token;

    MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase p1, android.support.v4.media.session.MediaSessionCompat$Token p2)
    {
        this.this$1 = p1;
        this.val$token = p2;
        return;
    }

    public void run()
    {
        java.util.Iterator v2 = this.this$1.this$0.mConnections.values().iterator();
        while (v2.hasNext()) {
            android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v0_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) v2.next());
            try {
                v0_1.callbacks.onConnect(v0_1.root.getRootId(), this.val$token, v0_1.root.getExtras());
            } catch (android.os.RemoteException v1) {
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("Connection for ").append(v0_1.pkg).append(" is no longer valid.").toString());
                v2.remove();
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplBase$2 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase this$1;
    final synthetic android.os.Bundle val$options;
    final synthetic String val$parentId;

    MediaBrowserServiceCompat$MediaBrowserServiceImplBase$2(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase p1, String p2, android.os.Bundle p3)
    {
        this.this$1 = p1;
        this.val$parentId = p2;
        this.val$options = p3;
        return;
    }

    public void run()
    {
        java.util.Iterator v5 = this.this$1.this$0.mConnections.keySet().iterator();
        while (v5.hasNext()) {
            android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v3_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.get(((android.os.IBinder) v5.next())));
            java.util.List v2_1 = ((java.util.List) v3_1.subscriptions.get(this.val$parentId));
            if (v2_1 != null) {
                java.util.Iterator v6_1 = v2_1.iterator();
                while (v6_1.hasNext()) {
                    android.support.v4.util.Pair v1_1 = ((android.support.v4.util.Pair) v6_1.next());
                    if (android.support.v4.media.MediaBrowserCompatUtils.hasDuplicatedItems(this.val$options, ((android.os.Bundle) v1_1.second))) {
                        this.this$1.this$0.performLoadChildren(this.val$parentId, v3_1, ((android.os.Bundle) v1_1.second));
                    }
                }
            }
        }
        return;
    }
}
package android.support.v4.media;
public class MediaBrowserServiceCompat$Result {
    private Object mDebug;
    private boolean mDetachCalled;
    private int mFlags;
    private boolean mSendResultCalled;

    MediaBrowserServiceCompat$Result(Object p1)
    {
        this.mDebug = p1;
        return;
    }

    public void detach()
    {
        if (!this.mDetachCalled) {
            if (!this.mSendResultCalled) {
                this.mDetachCalled = 1;
                return;
            } else {
                throw new IllegalStateException(new StringBuilder().append("detach() called when sendResult() had already been called for: ").append(this.mDebug).toString());
            }
        } else {
            throw new IllegalStateException(new StringBuilder().append("detach() called when detach() had already been called for: ").append(this.mDebug).toString());
        }
    }

    boolean isDone()
    {
        if ((!this.mDetachCalled) && (!this.mSendResultCalled)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    void onResultSent(Object p1, int p2)
    {
        return;
    }

    public void sendResult(Object p4)
    {
        if (!this.mSendResultCalled) {
            this.mSendResultCalled = 1;
            this.onResultSent(p4, this.mFlags);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("sendResult() called twice for: ").append(this.mDebug).toString());
        }
    }

    void setFlags(int p1)
    {
        this.mFlags = p1;
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$1 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;
    final synthetic String val$pkg;
    final synthetic android.os.Bundle val$rootHints;
    final synthetic int val$uid;

    MediaBrowserServiceCompat$ServiceBinderImpl$1(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2, String p3, android.os.Bundle p4, int p5)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        this.val$pkg = p3;
        this.val$rootHints = p4;
        this.val$uid = p5;
        return;
    }

    public void run()
    {
        android.os.IBinder v0 = this.val$callbacks.asBinder();
        this.this$1.this$0.mConnections.remove(v0);
        android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v1_0 = new android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord(this.this$1.this$0);
        v1_0.pkg = this.val$pkg;
        v1_0.rootHints = this.val$rootHints;
        v1_0.callbacks = this.val$callbacks;
        v1_0.root = this.this$1.this$0.onGetRoot(this.val$pkg, this.val$uid, this.val$rootHints);
        if (v1_0.root != null) {
            try {
                this.this$1.this$0.mConnections.put(v0, v1_0);
            } catch (android.os.RemoteException v2) {
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("Calling onConnect() failed. Dropping client. pkg=").append(this.val$pkg).toString());
                this.this$1.this$0.mConnections.remove(v0);
            }
            if (this.this$1.this$0.mSession != null) {
                this.val$callbacks.onConnect(v1_0.root.getRootId(), this.this$1.this$0.mSession, v1_0.root.getExtras());
            }
        } else {
            android.util.Log.i("MBServiceCompat", new StringBuilder().append("No root for client ").append(this.val$pkg).append(" from service ").append(this.getClass().getName()).toString());
            try {
                this.val$callbacks.onConnectFailed();
            } catch (android.os.RemoteException v2) {
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("Calling onConnectFailed() failed. Ignoring. pkg=").append(this.val$pkg).toString());
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$2 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;

    MediaBrowserServiceCompat$ServiceBinderImpl$2(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        return;
    }

    public void run()
    {
        // Both branches of the condition point to the same code.
        // if (((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.remove(this.val$callbacks.asBinder())) == null) {
            return;
        // }
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$3 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;
    final synthetic String val$id;
    final synthetic android.os.Bundle val$options;
    final synthetic android.os.IBinder val$token;

    MediaBrowserServiceCompat$ServiceBinderImpl$3(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2, String p3, android.os.IBinder p4, android.os.Bundle p5)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        this.val$id = p3;
        this.val$token = p4;
        this.val$options = p5;
        return;
    }

    public void run()
    {
        android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v1_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.get(this.val$callbacks.asBinder()));
        if (v1_1 != null) {
            this.this$1.this$0.addSubscription(this.val$id, v1_1, this.val$token, this.val$options);
        } else {
            android.util.Log.w("MBServiceCompat", new StringBuilder().append("addSubscription for callback that isn\'t registered id=").append(this.val$id).toString());
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$4 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;
    final synthetic String val$id;
    final synthetic android.os.IBinder val$token;

    MediaBrowserServiceCompat$ServiceBinderImpl$4(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2, String p3, android.os.IBinder p4)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        this.val$id = p3;
        this.val$token = p4;
        return;
    }

    public void run()
    {
        android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v1_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.get(this.val$callbacks.asBinder()));
        if (v1_1 != null) {
            if (!this.this$1.this$0.removeSubscription(this.val$id, v1_1, this.val$token)) {
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("removeSubscription called for ").append(this.val$id).append(" which is not subscribed").toString());
            }
        } else {
            android.util.Log.w("MBServiceCompat", new StringBuilder().append("removeSubscription for callback that isn\'t registered id=").append(this.val$id).toString());
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$5 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;
    final synthetic String val$mediaId;
    final synthetic android.support.v4.os.ResultReceiver val$receiver;

    MediaBrowserServiceCompat$ServiceBinderImpl$5(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2, String p3, android.support.v4.os.ResultReceiver p4)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        this.val$mediaId = p3;
        this.val$receiver = p4;
        return;
    }

    public void run()
    {
        android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v1_1 = ((android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord) this.this$1.this$0.mConnections.get(this.val$callbacks.asBinder()));
        if (v1_1 != null) {
            this.this$1.this$0.performLoadItem(this.val$mediaId, v1_1, this.val$receiver);
        } else {
            android.util.Log.w("MBServiceCompat", new StringBuilder().append("getMediaItem for callback that isn\'t registered id=").append(this.val$mediaId).toString());
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$6 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;
    final synthetic android.os.Bundle val$rootHints;

    MediaBrowserServiceCompat$ServiceBinderImpl$6(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2, android.os.Bundle p3)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        this.val$rootHints = p3;
        return;
    }

    public void run()
    {
        android.os.IBinder v0 = this.val$callbacks.asBinder();
        this.this$1.this$0.mConnections.remove(v0);
        android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord v1_0 = new android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord(this.this$1.this$0);
        v1_0.callbacks = this.val$callbacks;
        v1_0.rootHints = this.val$rootHints;
        this.this$1.this$0.mConnections.put(v0, v1_0);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl$7 implements java.lang.Runnable {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks val$callbacks;

    MediaBrowserServiceCompat$ServiceBinderImpl$7(android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl p1, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p2)
    {
        this.this$1 = p1;
        this.val$callbacks = p2;
        return;
    }

    public void run()
    {
        this.this$1.this$0.mConnections.remove(this.val$callbacks.asBinder());
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceBinderImpl {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$ServiceBinderImpl(android.support.v4.media.MediaBrowserServiceCompat p1)
    {
        this.this$0 = p1;
        return;
    }

    public void addSubscription(String p8, android.os.IBinder p9, android.os.Bundle p10, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p11)
    {
        this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$3(this, p11, p8, p9, p10));
        return;
    }

    public void connect(String p8, int p9, android.os.Bundle p10, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p11)
    {
        if (this.this$0.isValidPackage(p8, p9)) {
            this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$1(this, p11, p8, p10, p9));
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Package/uid mismatch: uid=").append(p9).append(" package=").append(p8).toString());
        }
    }

    public void disconnect(android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p3)
    {
        this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$2(this, p3));
        return;
    }

    public void getMediaItem(String p3, android.support.v4.os.ResultReceiver p4, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p5)
    {
        if ((!android.text.TextUtils.isEmpty(p3)) && (p4 != null)) {
            this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$5(this, p5, p3, p4));
        }
        return;
    }

    public void registerCallbacks(android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p3, android.os.Bundle p4)
    {
        this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$6(this, p3, p4));
        return;
    }

    public void removeSubscription(String p3, android.os.IBinder p4, android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p5)
    {
        this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$4(this, p5, p3, p4));
        return;
    }

    public void unregisterCallbacks(android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks p3)
    {
        this.this$0.mHandler.postOrRun(new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl$7(this, p3));
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserServiceCompat$ServiceCallbacks {

    public abstract android.os.IBinder asBinder();

    public abstract void onConnect();

    public abstract void onConnectFailed();

    public abstract void onLoadChildren();
}
package android.support.v4.media;
final class MediaBrowserServiceCompat$ServiceHandler extends android.os.Handler {
    private final android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl mServiceBinderImpl;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$ServiceHandler(android.support.v4.media.MediaBrowserServiceCompat p3)
    {
        this.this$0 = p3;
        this.mServiceBinderImpl = new android.support.v4.media.MediaBrowserServiceCompat$ServiceBinderImpl(this.this$0);
        return;
    }

    public void handleMessage(android.os.Message p9)
    {
        android.os.Bundle v0 = p9.getData();
        switch (p9.what) {
            case 1:
                this.mServiceBinderImpl.connect(v0.getString("data_package_name"), v0.getInt("data_calling_uid"), v0.getBundle("data_root_hints"), new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            case 2:
                this.mServiceBinderImpl.disconnect(new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            case 3:
                this.mServiceBinderImpl.addSubscription(v0.getString("data_media_item_id"), android.support.v4.app.BundleCompat.getBinder(v0, "data_callback_token"), v0.getBundle("data_options"), new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            case 4:
                this.mServiceBinderImpl.removeSubscription(v0.getString("data_media_item_id"), android.support.v4.app.BundleCompat.getBinder(v0, "data_callback_token"), new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            case 5:
                this.mServiceBinderImpl.getMediaItem(v0.getString("data_media_item_id"), ((android.support.v4.os.ResultReceiver) v0.getParcelable("data_result_receiver")), new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            case 6:
                this.mServiceBinderImpl.registerCallbacks(new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo), v0.getBundle("data_root_hints"));
                break;
            case 7:
                this.mServiceBinderImpl.unregisterCallbacks(new android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacksCompat(this.this$0, p9.replyTo));
                break;
            default:
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("Unhandled message: ").append(p9).append("\n  Service version: ").append(1).append("\n  Client version: ").append(p9.arg1).toString());
        }
        return;
    }

    public void postOrRun(Runnable p3)
    {
        if (Thread.currentThread() != this.getLooper().getThread()) {
            this.post(p3);
        } else {
            p3.run();
        }
        return;
    }

    public boolean sendMessageAtTime(android.os.Message p5, long p6)
    {
        android.os.Bundle v0 = p5.getData();
        v0.setClassLoader(android.support.v4.media.MediaBrowserCompat.getClassLoader());
        v0.putInt("data_calling_uid", android.os.Binder.getCallingUid());
        return super.sendMessageAtTime(p5, p6);
    }
}
package android.support.v4.media;
public abstract class MediaBrowserServiceCompat extends android.app.Service {
    static final boolean DEBUG = False;
    public static final String KEY_MEDIA_ITEM = "media_item";
    static final int RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED = 2;
    static final int RESULT_FLAG_OPTION_NOT_HANDLED = 1;
    public static final String SERVICE_INTERFACE = "android.media.browse.MediaBrowserService";
    static final String TAG = "MBServiceCompat";
    final android.support.v4.util.ArrayMap mConnections;
    android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord mCurConnection;
    final android.support.v4.media.MediaBrowserServiceCompat$ServiceHandler mHandler;
    private android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImpl mImpl;
    android.support.v4.media.session.MediaSessionCompat$Token mSession;

    static MediaBrowserServiceCompat()
    {
        android.support.v4.media.MediaBrowserServiceCompat.DEBUG = android.util.Log.isLoggable("MBServiceCompat", 3);
        return;
    }

    public MediaBrowserServiceCompat()
    {
        this.mConnections = new android.support.v4.util.ArrayMap();
        this.mHandler = new android.support.v4.media.MediaBrowserServiceCompat$ServiceHandler(this);
        return;
    }

    void addSubscription(String p5, android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord p6, android.os.IBinder p7, android.os.Bundle p8)
    {
        java.util.ArrayList v1_1 = ((java.util.List) p6.subscriptions.get(p5));
        if (v1_1 == null) {
            v1_1 = new java.util.ArrayList();
        }
        java.util.Iterator v3 = v1_1.iterator();
        while (v3.hasNext()) {
            android.support.v4.util.Pair v0_1 = ((android.support.v4.util.Pair) v3.next());
            if ((p7 == v0_1.first) && (android.support.v4.media.MediaBrowserCompatUtils.areSameOptions(p8, ((android.os.Bundle) v0_1.second)))) {
            }
            return;
        }
        v1_1.add(new android.support.v4.util.Pair(p7, p8));
        p6.subscriptions.put(p5, v1_1);
        this.performLoadChildren(p5, p6, p8);
        return;
    }

    java.util.List applyOptions(java.util.List p7, android.os.Bundle p8)
    {
        if (p7 != null) {
            int v1 = p8.getInt("android.media.browse.extra.PAGE", -1);
            int v2 = p8.getInt("android.media.browse.extra.PAGE_SIZE", -1);
            if ((v1 != -1) || (v2 != -1)) {
                int v0 = (v2 * v1);
                int v3 = (v0 + v2);
                if ((v1 >= 0) && ((v2 >= 1) && (v0 < p7.size()))) {
                    if (v3 > p7.size()) {
                        v3 = p7.size();
                    }
                    p7 = p7.subList(v0, v3);
                } else {
                    p7 = java.util.Collections.EMPTY_LIST;
                }
            }
        } else {
            p7 = 0;
        }
        return p7;
    }

    public void dump(java.io.FileDescriptor p1, java.io.PrintWriter p2, String[] p3)
    {
        return;
    }

    public final android.os.Bundle getBrowserRootHints()
    {
        return this.mImpl.getBrowserRootHints();
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mSession;
    }

    boolean isValidPackage(String p7, int p8)
    {
        int v4 = 0;
        if (p7 != null) {
            String[] v2 = this.getPackageManager().getPackagesForUid(p8);
            int v1 = 0;
            while (v1 < v2.length) {
                if (!v2[v1].equals(p7)) {
                    v1++;
                } else {
                    v4 = 1;
                    break;
                }
            }
        }
        return v4;
    }

    public void notifyChildrenChanged(String p3)
    {
        if (p3 != null) {
            this.mImpl.notifyChildrenChanged(p3, 0);
            return;
        } else {
            throw new IllegalArgumentException("parentId cannot be null in notifyChildrenChanged");
        }
    }

    public void notifyChildrenChanged(String p3, android.os.Bundle p4)
    {
        if (p3 != null) {
            if (p4 != null) {
                this.mImpl.notifyChildrenChanged(p3, p4);
                return;
            } else {
                throw new IllegalArgumentException("options cannot be null in notifyChildrenChanged");
            }
        } else {
            throw new IllegalArgumentException("parentId cannot be null in notifyChildrenChanged");
        }
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return this.mImpl.onBind(p2);
    }

    public void onCreate()
    {
        super.onCreate();
        if ((android.os.Build$VERSION.SDK_INT < 24) && (!android.support.v4.os.BuildCompat.isAtLeastN())) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    this.mImpl = new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase(this);
                } else {
                    this.mImpl = new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21(this);
                }
            } else {
                this.mImpl = new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23(this);
            }
        } else {
            this.mImpl = new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi24(this);
        }
        this.mImpl.onCreate();
        return;
    }

    public abstract android.support.v4.media.MediaBrowserServiceCompat$BrowserRoot onGetRoot();

    public abstract void onLoadChildren();

    public void onLoadChildren(String p2, android.support.v4.media.MediaBrowserServiceCompat$Result p3, android.os.Bundle p4)
    {
        p3.setFlags(1);
        this.onLoadChildren(p2, p3);
        return;
    }

    public void onLoadItem(String p2, android.support.v4.media.MediaBrowserServiceCompat$Result p3)
    {
        p3.setFlags(2);
        p3.sendResult(0);
        return;
    }

    void performLoadChildren(String p7, android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord p8, android.os.Bundle p9)
    {
        android.support.v4.media.MediaBrowserServiceCompat$1 v0_1 = new android.support.v4.media.MediaBrowserServiceCompat$1(this, p7, p8, p7, p9);
        this.mCurConnection = p8;
        if (p9 != null) {
            this.onLoadChildren(p7, v0_1, p9);
        } else {
            this.onLoadChildren(p7, v0_1);
        }
        this.mCurConnection = 0;
        if (v0_1.isDone()) {
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("onLoadChildren must call detach() or sendResult() before returning for package=").append(p8.pkg).append(" id=").append(p7).toString());
        }
    }

    void performLoadItem(String p5, android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord p6, android.support.v4.os.ResultReceiver p7)
    {
        android.support.v4.media.MediaBrowserServiceCompat$2 v0_1 = new android.support.v4.media.MediaBrowserServiceCompat$2(this, p5, p7);
        this.mCurConnection = p6;
        this.onLoadItem(p5, v0_1);
        this.mCurConnection = 0;
        if (v0_1.isDone()) {
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("onLoadItem must call detach() or sendResult() before returning for id=").append(p5).toString());
        }
    }

    boolean removeSubscription(String p5, android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord p6, android.os.IBinder p7)
    {
        java.util.HashMap v3_3;
        if (p7 != null) {
            int v2 = 0;
            java.util.List v0_1 = ((java.util.List) p6.subscriptions.get(p5));
            if (v0_1 != null) {
                java.util.Iterator v1 = v0_1.iterator();
                while (v1.hasNext()) {
                    if (p7 == ((android.support.v4.util.Pair) v1.next()).first) {
                        v2 = 1;
                        v1.remove();
                    }
                    return v3_3;
                }
                if (v0_1.size() == 0) {
                    p6.subscriptions.remove(p5);
                }
            }
            v3_3 = v2;
        } else {
            if (p6.subscriptions.remove(p5) == null) {
                v3_3 = 0;
            } else {
                v3_3 = 1;
            }
        }
        return v3_3;
    }

    public void setSessionToken(android.support.v4.media.session.MediaSessionCompat$Token p3)
    {
        if (p3 != null) {
            if (this.mSession == null) {
                this.mSession = p3;
                this.mImpl.setSessionToken(p3);
                return;
            } else {
                throw new IllegalStateException("The session token has already been set.");
            }
        } else {
            throw new IllegalArgumentException("Session token may not be null.");
        }
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi21$BrowserRoot {
    final android.os.Bundle mExtras;
    final String mRootId;

    MediaBrowserServiceCompatApi21$BrowserRoot(String p1, android.os.Bundle p2)
    {
        this.mRootId = p1;
        this.mExtras = p2;
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi21$MediaBrowserServiceAdaptor extends android.service.media.MediaBrowserService {
    final android.support.v4.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy mServiceProxy;

    MediaBrowserServiceCompatApi21$MediaBrowserServiceAdaptor(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy p2)
    {
        this.attachBaseContext(p1);
        this.mServiceProxy = p2;
        return;
    }

    public android.service.media.MediaBrowserService$BrowserRoot onGetRoot(String p5, int p6, android.os.Bundle p7)
    {
        android.service.media.MediaBrowserService$BrowserRoot v1_2;
        android.support.v4.media.MediaBrowserServiceCompatApi21$BrowserRoot v0 = this.mServiceProxy.onGetRoot(p5, p6, p7);
        if (v0 != null) {
            v1_2 = new android.service.media.MediaBrowserService$BrowserRoot(v0.mRootId, v0.mExtras);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public void onLoadChildren(String p3, android.service.media.MediaBrowserService$Result p4)
    {
        this.mServiceProxy.onLoadChildren(p3, new android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper(p4));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi21$ResultWrapper {
    android.service.media.MediaBrowserService$Result mResultObj;

    MediaBrowserServiceCompatApi21$ResultWrapper(android.service.media.MediaBrowserService$Result p1)
    {
        this.mResultObj = p1;
        return;
    }

    public void detach()
    {
        this.mResultObj.detach();
        return;
    }

    java.util.List parcelListToItemList(java.util.List p5)
    {
        java.util.ArrayList v0_1;
        if (p5 != null) {
            v0_1 = new java.util.ArrayList();
            java.util.Iterator v2 = p5.iterator();
            while (v2.hasNext()) {
                android.os.Parcel v1_0 = ((android.os.Parcel) v2.next());
                v1_0.setDataPosition(0);
                v0_1.add(android.media.browse.MediaBrowser$MediaItem.CREATOR.createFromParcel(v1_0));
                v1_0.recycle();
            }
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public void sendResult(Object p4)
    {
        if (!(p4 instanceof java.util.List)) {
            if (!(p4 instanceof android.os.Parcel)) {
                this.mResultObj.sendResult(0);
            } else {
                this.mResultObj.sendResult(android.media.browse.MediaBrowser$MediaItem.CREATOR.createFromParcel(((android.os.Parcel) p4)));
                ((android.os.Parcel) p4).recycle();
            }
        } else {
            this.mResultObj.sendResult(this.parcelListToItemList(((java.util.List) p4)));
        }
        return;
    }
}
package android.support.v4.media;
public interface MediaBrowserServiceCompatApi21$ServiceCompatProxy {

    public abstract android.support.v4.media.MediaBrowserServiceCompatApi21$BrowserRoot onGetRoot();

    public abstract void onLoadChildren();
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi21 {

    MediaBrowserServiceCompatApi21()
    {
        return;
    }

    public static Object createService(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy p2)
    {
        return new android.support.v4.media.MediaBrowserServiceCompatApi21$MediaBrowserServiceAdaptor(p1, p2);
    }

    public static void notifyChildrenChanged(Object p0, String p1)
    {
        ((android.service.media.MediaBrowserService) p0).notifyChildrenChanged(p1);
        return;
    }

    public static android.os.IBinder onBind(Object p1, android.content.Intent p2)
    {
        return ((android.service.media.MediaBrowserService) p1).onBind(p2);
    }

    public static void onCreate(Object p0)
    {
        ((android.service.media.MediaBrowserService) p0).onCreate();
        return;
    }

    public static void setSessionToken(Object p0, Object p1)
    {
        ((android.service.media.MediaBrowserService) p0).setSessionToken(((android.media.session.MediaSession$Token) p1));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi23 {

    MediaBrowserServiceCompatApi23()
    {
        return;
    }

    public static Object createService(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy p2)
    {
        return new android.support.v4.media.MediaBrowserServiceCompatApi23$MediaBrowserServiceAdaptor(p1, p2);
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi24$ResultWrapper {
    android.service.media.MediaBrowserService$Result mResultObj;

    MediaBrowserServiceCompatApi24$ResultWrapper(android.service.media.MediaBrowserService$Result p1)
    {
        this.mResultObj = p1;
        return;
    }

    public void detach()
    {
        this.mResultObj.detach();
        return;
    }

    java.util.List parcelListToItemList(java.util.List p5)
    {
        java.util.ArrayList v0_1;
        if (p5 != null) {
            v0_1 = new java.util.ArrayList();
            java.util.Iterator v2 = p5.iterator();
            while (v2.hasNext()) {
                android.os.Parcel v1_0 = ((android.os.Parcel) v2.next());
                v1_0.setDataPosition(0);
                v0_1.add(android.media.browse.MediaBrowser$MediaItem.CREATOR.createFromParcel(v1_0));
                v1_0.recycle();
            }
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public void sendResult(java.util.List p4, int p5)
    {
        try {
            android.support.v4.media.MediaBrowserServiceCompatApi24.access$000().setInt(this.mResultObj, p5);
        } catch (IllegalAccessException v0) {
            android.util.Log.w("MBSCompatApi24", v0);
        }
        this.mResultObj.sendResult(this.parcelListToItemList(p4));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi24 {
    private static final String TAG = "MBSCompatApi24";
    private static reflect.Field sResultFlags;

    static MediaBrowserServiceCompatApi24()
    {
        try {
            android.support.v4.media.MediaBrowserServiceCompatApi24.sResultFlags = android.service.media.MediaBrowserService$Result.getDeclaredField("mFlags");
            android.support.v4.media.MediaBrowserServiceCompatApi24.sResultFlags.setAccessible(1);
        } catch (NoSuchFieldException v0) {
            android.util.Log.w("MBSCompatApi24", v0);
        }
        return;
    }

    MediaBrowserServiceCompatApi24()
    {
        return;
    }

    static synthetic reflect.Field access$000()
    {
        return android.support.v4.media.MediaBrowserServiceCompatApi24.sResultFlags;
    }

    public static Object createService(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi24$ServiceCompatProxy p2)
    {
        return new android.support.v4.media.MediaBrowserServiceCompatApi24$MediaBrowserServiceAdaptor(p1, p2);
    }

    public static android.os.Bundle getBrowserRootHints(Object p1)
    {
        return ((android.service.media.MediaBrowserService) p1).getBrowserRootHints();
    }

    public static void notifyChildrenChanged(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.service.media.MediaBrowserService) p0).notifyChildrenChanged(p1, p2);
        return;
    }
}
package android.support.v4.media;
final class MediaDescriptionCompat$1 implements android.os.Parcelable$Creator {

    MediaDescriptionCompat$1()
    {
        return;
    }

    public android.support.v4.media.MediaDescriptionCompat createFromParcel(android.os.Parcel p3)
    {
        android.support.v4.media.MediaDescriptionCompat v0_2;
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            v0_2 = android.support.v4.media.MediaDescriptionCompat.fromMediaDescription(android.support.v4.media.MediaDescriptionCompatApi21.fromParcel(p3));
        } else {
            v0_2 = new android.support.v4.media.MediaDescriptionCompat(p3);
        }
        return v0_2;
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.MediaDescriptionCompat[] newArray(int p2)
    {
        android.support.v4.media.MediaDescriptionCompat[] v0 = new android.support.v4.media.MediaDescriptionCompat[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media;
public final class MediaDescriptionCompat$Builder {
    private CharSequence mDescription;
    private android.os.Bundle mExtras;
    private android.graphics.Bitmap mIcon;
    private android.net.Uri mIconUri;
    private String mMediaId;
    private android.net.Uri mMediaUri;
    private CharSequence mSubtitle;
    private CharSequence mTitle;

    public MediaDescriptionCompat$Builder()
    {
        return;
    }

    public android.support.v4.media.MediaDescriptionCompat build()
    {
        return new android.support.v4.media.MediaDescriptionCompat(this.mMediaId, this.mTitle, this.mSubtitle, this.mDescription, this.mIcon, this.mIconUri, this.mExtras, this.mMediaUri);
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setDescription(CharSequence p1)
    {
        this.mDescription = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setExtras(android.os.Bundle p1)
    {
        this.mExtras = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setIconBitmap(android.graphics.Bitmap p1)
    {
        this.mIcon = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setIconUri(android.net.Uri p1)
    {
        this.mIconUri = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setMediaId(String p1)
    {
        this.mMediaId = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setMediaUri(android.net.Uri p1)
    {
        this.mMediaUri = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setSubtitle(CharSequence p1)
    {
        this.mSubtitle = p1;
        return this;
    }

    public android.support.v4.media.MediaDescriptionCompat$Builder setTitle(CharSequence p1)
    {
        this.mTitle = p1;
        return this;
    }
}
package android.support.v4.media;
public final class MediaDescriptionCompat implements android.os.Parcelable {
    public static final long BT_FOLDER_TYPE_ALBUMS = 2;
    public static final long BT_FOLDER_TYPE_ARTISTS = 3;
    public static final long BT_FOLDER_TYPE_GENRES = 4;
    public static final long BT_FOLDER_TYPE_MIXED = 0;
    public static final long BT_FOLDER_TYPE_PLAYLISTS = 5;
    public static final long BT_FOLDER_TYPE_TITLES = 1;
    public static final long BT_FOLDER_TYPE_YEARS = 6;
    public static final android.os.Parcelable$Creator CREATOR = None;
    public static final String DESCRIPTION_KEY_MEDIA_URI = "android.support.v4.media.description.MEDIA_URI";
    public static final String DESCRIPTION_KEY_NULL_BUNDLE_FLAG = "android.support.v4.media.description.NULL_BUNDLE_FLAG";
    public static final String EXTRA_BT_FOLDER_TYPE = "android.media.extra.BT_FOLDER_TYPE";
    private final CharSequence mDescription;
    private Object mDescriptionObj;
    private final android.os.Bundle mExtras;
    private final android.graphics.Bitmap mIcon;
    private final android.net.Uri mIconUri;
    private final String mMediaId;
    private final android.net.Uri mMediaUri;
    private final CharSequence mSubtitle;
    private final CharSequence mTitle;

    static MediaDescriptionCompat()
    {
        android.support.v4.media.MediaDescriptionCompat.CREATOR = new android.support.v4.media.MediaDescriptionCompat$1();
        return;
    }

    MediaDescriptionCompat(android.os.Parcel p3)
    {
        this.mMediaId = p3.readString();
        this.mTitle = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p3));
        this.mSubtitle = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p3));
        this.mDescription = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p3));
        this.mIcon = ((android.graphics.Bitmap) p3.readParcelable(0));
        this.mIconUri = ((android.net.Uri) p3.readParcelable(0));
        this.mExtras = p3.readBundle();
        this.mMediaUri = ((android.net.Uri) p3.readParcelable(0));
        return;
    }

    MediaDescriptionCompat(String p1, CharSequence p2, CharSequence p3, CharSequence p4, android.graphics.Bitmap p5, android.net.Uri p6, android.os.Bundle p7, android.net.Uri p8)
    {
        this.mMediaId = p1;
        this.mTitle = p2;
        this.mSubtitle = p3;
        this.mDescription = p4;
        this.mIcon = p5;
        this.mIconUri = p6;
        this.mExtras = p7;
        this.mMediaUri = p8;
        return;
    }

    public static android.support.v4.media.MediaDescriptionCompat fromMediaDescription(Object p6)
    {
        android.support.v4.media.MediaDescriptionCompat v1 = 0;
        if ((p6 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.net.Uri v3;
            android.support.v4.media.MediaDescriptionCompat$Builder v0_1 = new android.support.v4.media.MediaDescriptionCompat$Builder();
            v0_1.setMediaId(android.support.v4.media.MediaDescriptionCompatApi21.getMediaId(p6));
            v0_1.setTitle(android.support.v4.media.MediaDescriptionCompatApi21.getTitle(p6));
            v0_1.setSubtitle(android.support.v4.media.MediaDescriptionCompatApi21.getSubtitle(p6));
            v0_1.setDescription(android.support.v4.media.MediaDescriptionCompatApi21.getDescription(p6));
            v0_1.setIconBitmap(android.support.v4.media.MediaDescriptionCompatApi21.getIconBitmap(p6));
            v0_1.setIconUri(android.support.v4.media.MediaDescriptionCompatApi21.getIconUri(p6));
            int v2 = android.support.v4.media.MediaDescriptionCompatApi21.getExtras(p6);
            if (v2 != 0) {
                v3 = ((android.net.Uri) v2.getParcelable("android.support.v4.media.description.MEDIA_URI"));
            } else {
                v3 = 0;
            }
            if (v3 != null) {
                if ((!v2.containsKey("android.support.v4.media.description.NULL_BUNDLE_FLAG")) || (v2.size() != 2)) {
                    v2.remove("android.support.v4.media.description.MEDIA_URI");
                    v2.remove("android.support.v4.media.description.NULL_BUNDLE_FLAG");
                } else {
                    v2 = 0;
                }
            }
            v0_1.setExtras(v2);
            if (v3 == null) {
                if (android.os.Build$VERSION.SDK_INT >= 23) {
                    v0_1.setMediaUri(android.support.v4.media.MediaDescriptionCompatApi23.getMediaUri(p6));
                }
            } else {
                v0_1.setMediaUri(v3);
            }
            v1 = v0_1.build();
            v1.mDescriptionObj = p6;
        }
        return v1;
    }

    public int describeContents()
    {
        return 0;
    }

    public CharSequence getDescription()
    {
        return this.mDescription;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public android.graphics.Bitmap getIconBitmap()
    {
        return this.mIcon;
    }

    public android.net.Uri getIconUri()
    {
        return this.mIconUri;
    }

    public Object getMediaDescription()
    {
        if ((this.mDescriptionObj == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            Object v0 = android.support.v4.media.MediaDescriptionCompatApi21$Builder.newInstance();
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setMediaId(v0, this.mMediaId);
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setTitle(v0, this.mTitle);
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setSubtitle(v0, this.mSubtitle);
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setDescription(v0, this.mDescription);
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setIconBitmap(v0, this.mIcon);
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setIconUri(v0, this.mIconUri);
            android.os.Bundle v1_0 = this.mExtras;
            if ((android.os.Build$VERSION.SDK_INT < 23) && (this.mMediaUri != null)) {
                if (v1_0 == null) {
                    v1_0 = new android.os.Bundle();
                    v1_0.putBoolean("android.support.v4.media.description.NULL_BUNDLE_FLAG", 1);
                }
                v1_0.putParcelable("android.support.v4.media.description.MEDIA_URI", this.mMediaUri);
            }
            android.support.v4.media.MediaDescriptionCompatApi21$Builder.setExtras(v0, v1_0);
            if (android.os.Build$VERSION.SDK_INT >= 23) {
                android.support.v4.media.MediaDescriptionCompatApi23$Builder.setMediaUri(v0, this.mMediaUri);
            }
            this.mDescriptionObj = android.support.v4.media.MediaDescriptionCompatApi21$Builder.build(v0);
            String v2_14 = this.mDescriptionObj;
        } else {
            v2_14 = this.mDescriptionObj;
        }
        return v2_14;
    }

    public String getMediaId()
    {
        return this.mMediaId;
    }

    public android.net.Uri getMediaUri()
    {
        return this.mMediaUri;
    }

    public CharSequence getSubtitle()
    {
        return this.mSubtitle;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public String toString()
    {
        return new StringBuilder().append(this.mTitle).append(", ").append(this.mSubtitle).append(", ").append(this.mDescription).toString();
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.support.v4.media.MediaDescriptionCompatApi21.writeToParcel(this.getMediaDescription(), p3, p4);
        } else {
            p3.writeString(this.mMediaId);
            android.text.TextUtils.writeToParcel(this.mTitle, p3, p4);
            android.text.TextUtils.writeToParcel(this.mSubtitle, p3, p4);
            android.text.TextUtils.writeToParcel(this.mDescription, p3, p4);
            p3.writeParcelable(this.mIcon, p4);
            p3.writeParcelable(this.mIconUri, p4);
            p3.writeBundle(this.mExtras);
            p3.writeParcelable(this.mMediaUri, p4);
        }
        return;
    }
}
package android.support.v4.media;
 class MediaDescriptionCompatApi21$Builder {

    MediaDescriptionCompatApi21$Builder()
    {
        return;
    }

    public static Object build(Object p1)
    {
        return ((android.media.MediaDescription$Builder) p1).build();
    }

    public static Object newInstance()
    {
        return new android.media.MediaDescription$Builder();
    }

    public static void setDescription(Object p0, CharSequence p1)
    {
        ((android.media.MediaDescription$Builder) p0).setDescription(p1);
        return;
    }

    public static void setExtras(Object p0, android.os.Bundle p1)
    {
        ((android.media.MediaDescription$Builder) p0).setExtras(p1);
        return;
    }

    public static void setIconBitmap(Object p0, android.graphics.Bitmap p1)
    {
        ((android.media.MediaDescription$Builder) p0).setIconBitmap(p1);
        return;
    }

    public static void setIconUri(Object p0, android.net.Uri p1)
    {
        ((android.media.MediaDescription$Builder) p0).setIconUri(p1);
        return;
    }

    public static void setMediaId(Object p0, String p1)
    {
        ((android.media.MediaDescription$Builder) p0).setMediaId(p1);
        return;
    }

    public static void setSubtitle(Object p0, CharSequence p1)
    {
        ((android.media.MediaDescription$Builder) p0).setSubtitle(p1);
        return;
    }

    public static void setTitle(Object p0, CharSequence p1)
    {
        ((android.media.MediaDescription$Builder) p0).setTitle(p1);
        return;
    }
}
package android.support.v4.media;
 class MediaDescriptionCompatApi21 {

    MediaDescriptionCompatApi21()
    {
        return;
    }

    public static Object fromParcel(android.os.Parcel p1)
    {
        return android.media.MediaDescription.CREATOR.createFromParcel(p1);
    }

    public static CharSequence getDescription(Object p1)
    {
        return ((android.media.MediaDescription) p1).getDescription();
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.media.MediaDescription) p1).getExtras();
    }

    public static android.graphics.Bitmap getIconBitmap(Object p1)
    {
        return ((android.media.MediaDescription) p1).getIconBitmap();
    }

    public static android.net.Uri getIconUri(Object p1)
    {
        return ((android.media.MediaDescription) p1).getIconUri();
    }

    public static String getMediaId(Object p1)
    {
        return ((android.media.MediaDescription) p1).getMediaId();
    }

    public static CharSequence getSubtitle(Object p1)
    {
        return ((android.media.MediaDescription) p1).getSubtitle();
    }

    public static CharSequence getTitle(Object p1)
    {
        return ((android.media.MediaDescription) p1).getTitle();
    }

    public static void writeToParcel(Object p0, android.os.Parcel p1, int p2)
    {
        ((android.media.MediaDescription) p0).writeToParcel(p1, p2);
        return;
    }
}
package android.support.v4.media;
final class MediaMetadataCompat$1 implements android.os.Parcelable$Creator {

    MediaMetadataCompat$1()
    {
        return;
    }

    public android.support.v4.media.MediaMetadataCompat createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.MediaMetadataCompat(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.MediaMetadataCompat[] newArray(int p2)
    {
        android.support.v4.media.MediaMetadataCompat[] v0 = new android.support.v4.media.MediaMetadataCompat[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media;
public interface annotation MediaMetadataCompat$BitmapKey implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public final class MediaMetadataCompat$Builder {
    private final android.os.Bundle mBundle;

    public MediaMetadataCompat$Builder()
    {
        this.mBundle = new android.os.Bundle();
        return;
    }

    public MediaMetadataCompat$Builder(android.support.v4.media.MediaMetadataCompat p3)
    {
        this.mBundle = new android.os.Bundle(p3.mBundle);
        return;
    }

    public MediaMetadataCompat$Builder(android.support.v4.media.MediaMetadataCompat p7, int p8)
    {
        this(p7);
        java.util.Iterator v3_2 = this.mBundle.keySet().iterator();
        while (v3_2.hasNext()) {
            String v1_1 = ((String) v3_2.next());
            Object v2 = this.mBundle.get(v1_1);
            if ((v2 != null) && ((v2 instanceof android.graphics.Bitmap))) {
                android.graphics.Bitmap v0_1 = ((android.graphics.Bitmap) v2);
                if ((v0_1.getHeight() <= p8) && (v0_1.getWidth() <= p8)) {
                    if ((android.os.Build$VERSION.SDK_INT >= 14) && ((v1_1.equals("android.media.metadata.ART")) || (v1_1.equals("android.media.metadata.ALBUM_ART")))) {
                        this.putBitmap(v1_1, v0_1.copy(v0_1.getConfig(), 0));
                    }
                } else {
                    this.putBitmap(v1_1, this.scaleBitmap(v0_1, p8));
                }
            }
        }
        return;
    }

    private android.graphics.Bitmap scaleBitmap(android.graphics.Bitmap p8, int p9)
    {
        float v3 = Math.min((((float) p9) / ((float) p8.getWidth())), (((float) p9) / ((float) p8.getHeight())));
        return android.graphics.Bitmap.createScaledBitmap(p8, ((int) (((float) p8.getWidth()) * v3)), ((int) (((float) p8.getHeight()) * v3)), 1);
    }

    public android.support.v4.media.MediaMetadataCompat build()
    {
        return new android.support.v4.media.MediaMetadataCompat(this.mBundle);
    }

    public android.support.v4.media.MediaMetadataCompat$Builder putBitmap(String p4, android.graphics.Bitmap p5)
    {
        if ((!android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.containsKey(p4)) || (((Integer) android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.get(p4)).intValue() == 2)) {
            this.mBundle.putParcelable(p4, p5);
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("The ").append(p4).append(" key cannot be used to put a Bitmap").toString());
        }
    }

    public android.support.v4.media.MediaMetadataCompat$Builder putLong(String p5, long p6)
    {
        if ((!android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.containsKey(p5)) || (((Integer) android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.get(p5)).intValue() == 0)) {
            this.mBundle.putLong(p5, p6);
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("The ").append(p5).append(" key cannot be used to put a long").toString());
        }
    }

    public android.support.v4.media.MediaMetadataCompat$Builder putRating(String p4, android.support.v4.media.RatingCompat p5)
    {
        if ((!android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.containsKey(p4)) || (((Integer) android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.get(p4)).intValue() == 3)) {
            if (android.os.Build$VERSION.SDK_INT < 19) {
                this.mBundle.putParcelable(p4, p5);
            } else {
                this.mBundle.putParcelable(p4, ((android.os.Parcelable) p5.getRating()));
            }
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("The ").append(p4).append(" key cannot be used to put a Rating").toString());
        }
    }

    public android.support.v4.media.MediaMetadataCompat$Builder putString(String p4, String p5)
    {
        if ((!android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.containsKey(p4)) || (((Integer) android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.get(p4)).intValue() == 1)) {
            this.mBundle.putCharSequence(p4, p5);
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("The ").append(p4).append(" key cannot be used to put a String").toString());
        }
    }

    public android.support.v4.media.MediaMetadataCompat$Builder putText(String p4, CharSequence p5)
    {
        if ((!android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.containsKey(p4)) || (((Integer) android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.get(p4)).intValue() == 1)) {
            this.mBundle.putCharSequence(p4, p5);
            return this;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("The ").append(p4).append(" key cannot be used to put a CharSequence").toString());
        }
    }
}
package android.support.v4.media;
public interface annotation MediaMetadataCompat$LongKey implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public interface annotation MediaMetadataCompat$RatingKey implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public interface annotation MediaMetadataCompat$TextKey implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public final class MediaMetadataCompat implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR = None;
    static final android.support.v4.util.ArrayMap METADATA_KEYS_TYPE = None;
    public static final String METADATA_KEY_ALBUM = "android.media.metadata.ALBUM";
    public static final String METADATA_KEY_ALBUM_ART = "android.media.metadata.ALBUM_ART";
    public static final String METADATA_KEY_ALBUM_ARTIST = "android.media.metadata.ALBUM_ARTIST";
    public static final String METADATA_KEY_ALBUM_ART_URI = "android.media.metadata.ALBUM_ART_URI";
    public static final String METADATA_KEY_ART = "android.media.metadata.ART";
    public static final String METADATA_KEY_ARTIST = "android.media.metadata.ARTIST";
    public static final String METADATA_KEY_ART_URI = "android.media.metadata.ART_URI";
    public static final String METADATA_KEY_AUTHOR = "android.media.metadata.AUTHOR";
    public static final String METADATA_KEY_BT_FOLDER_TYPE = "android.media.metadata.BT_FOLDER_TYPE";
    public static final String METADATA_KEY_COMPILATION = "android.media.metadata.COMPILATION";
    public static final String METADATA_KEY_COMPOSER = "android.media.metadata.COMPOSER";
    public static final String METADATA_KEY_DATE = "android.media.metadata.DATE";
    public static final String METADATA_KEY_DISC_NUMBER = "android.media.metadata.DISC_NUMBER";
    public static final String METADATA_KEY_DISPLAY_DESCRIPTION = "android.media.metadata.DISPLAY_DESCRIPTION";
    public static final String METADATA_KEY_DISPLAY_ICON = "android.media.metadata.DISPLAY_ICON";
    public static final String METADATA_KEY_DISPLAY_ICON_URI = "android.media.metadata.DISPLAY_ICON_URI";
    public static final String METADATA_KEY_DISPLAY_SUBTITLE = "android.media.metadata.DISPLAY_SUBTITLE";
    public static final String METADATA_KEY_DISPLAY_TITLE = "android.media.metadata.DISPLAY_TITLE";
    public static final String METADATA_KEY_DURATION = "android.media.metadata.DURATION";
    public static final String METADATA_KEY_GENRE = "android.media.metadata.GENRE";
    public static final String METADATA_KEY_MEDIA_ID = "android.media.metadata.MEDIA_ID";
    public static final String METADATA_KEY_MEDIA_URI = "android.media.metadata.MEDIA_URI";
    public static final String METADATA_KEY_NUM_TRACKS = "android.media.metadata.NUM_TRACKS";
    public static final String METADATA_KEY_RATING = "android.media.metadata.RATING";
    public static final String METADATA_KEY_TITLE = "android.media.metadata.TITLE";
    public static final String METADATA_KEY_TRACK_NUMBER = "android.media.metadata.TRACK_NUMBER";
    public static final String METADATA_KEY_USER_RATING = "android.media.metadata.USER_RATING";
    public static final String METADATA_KEY_WRITER = "android.media.metadata.WRITER";
    public static final String METADATA_KEY_YEAR = "android.media.metadata.YEAR";
    static final int METADATA_TYPE_BITMAP = 2;
    static final int METADATA_TYPE_LONG = 0;
    static final int METADATA_TYPE_RATING = 3;
    static final int METADATA_TYPE_TEXT = 1;
    private static final String[] PREFERRED_BITMAP_ORDER = None;
    private static final String[] PREFERRED_DESCRIPTION_ORDER = None;
    private static final String[] PREFERRED_URI_ORDER = None;
    private static final String TAG = "MediaMetadata";
    final android.os.Bundle mBundle;
    private android.support.v4.media.MediaDescriptionCompat mDescription;
    private Object mMetadataObj;

    static MediaMetadataCompat()
    {
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE = new android.support.v4.util.ArrayMap();
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.TITLE", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ARTIST", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DURATION", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ALBUM", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.AUTHOR", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.WRITER", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.COMPOSER", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.COMPILATION", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DATE", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.YEAR", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.GENRE", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.TRACK_NUMBER", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.NUM_TRACKS", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISC_NUMBER", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ALBUM_ARTIST", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ART", Integer.valueOf(2));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ART_URI", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ALBUM_ART", Integer.valueOf(2));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.ALBUM_ART_URI", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.USER_RATING", Integer.valueOf(3));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.RATING", Integer.valueOf(3));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISPLAY_TITLE", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISPLAY_SUBTITLE", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISPLAY_DESCRIPTION", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISPLAY_ICON", Integer.valueOf(2));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.DISPLAY_ICON_URI", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.MEDIA_ID", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.BT_FOLDER_TYPE", Integer.valueOf(0));
        android.support.v4.media.MediaMetadataCompat.METADATA_KEYS_TYPE.put("android.media.metadata.MEDIA_URI", Integer.valueOf(1));
        android.support.v4.media.MediaMetadataCompat$1 v0_12 = new String[7];
        v0_12[0] = "android.media.metadata.TITLE";
        v0_12[1] = "android.media.metadata.ARTIST";
        v0_12[2] = "android.media.metadata.ALBUM";
        v0_12[3] = "android.media.metadata.ALBUM_ARTIST";
        v0_12[4] = "android.media.metadata.WRITER";
        v0_12[5] = "android.media.metadata.AUTHOR";
        v0_12[6] = "android.media.metadata.COMPOSER";
        android.support.v4.media.MediaMetadataCompat.PREFERRED_DESCRIPTION_ORDER = v0_12;
        android.support.v4.media.MediaMetadataCompat$1 v0_14 = new String[3];
        v0_14[0] = "android.media.metadata.DISPLAY_ICON";
        v0_14[1] = "android.media.metadata.ART";
        v0_14[2] = "android.media.metadata.ALBUM_ART";
        android.support.v4.media.MediaMetadataCompat.PREFERRED_BITMAP_ORDER = v0_14;
        android.support.v4.media.MediaMetadataCompat$1 v0_15 = new String[3];
        v0_15[0] = "android.media.metadata.DISPLAY_ICON_URI";
        v0_15[1] = "android.media.metadata.ART_URI";
        v0_15[2] = "android.media.metadata.ALBUM_ART_URI";
        android.support.v4.media.MediaMetadataCompat.PREFERRED_URI_ORDER = v0_15;
        android.support.v4.media.MediaMetadataCompat.CREATOR = new android.support.v4.media.MediaMetadataCompat$1();
        return;
    }

    MediaMetadataCompat(android.os.Bundle p2)
    {
        this.mBundle = new android.os.Bundle(p2);
        return;
    }

    MediaMetadataCompat(android.os.Parcel p2)
    {
        this.mBundle = p2.readBundle();
        return;
    }

    public static android.support.v4.media.MediaMetadataCompat fromMediaMetadata(Object p5)
    {
        if ((p5 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.os.Parcel v1 = android.os.Parcel.obtain();
            android.support.v4.media.MediaMetadataCompatApi21.writeToParcel(p5, v1, 0);
            v1.setDataPosition(0);
            android.support.v4.media.MediaMetadataCompat v0_1 = ((android.support.v4.media.MediaMetadataCompat) android.support.v4.media.MediaMetadataCompat.CREATOR.createFromParcel(v1));
            v1.recycle();
            v0_1.mMetadataObj = p5;
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public boolean containsKey(String p2)
    {
        return this.mBundle.containsKey(p2);
    }

    public int describeContents()
    {
        return 0;
    }

    public android.graphics.Bitmap getBitmap(String p6)
    {
        try {
            android.graphics.Bitmap v1 = ((android.graphics.Bitmap) this.mBundle.getParcelable(p6));
        } catch (Exception v2) {
            android.util.Log.w("MediaMetadata", "Failed to retrieve a key as Bitmap.", v2);
        }
        return v1;
    }

    public android.os.Bundle getBundle()
    {
        return this.mBundle;
    }

    public android.support.v4.media.MediaDescriptionCompat getDescription()
    {
        android.support.v4.media.MediaDescriptionCompat v19_13;
        if (this.mDescription == null) {
            String v12 = this.getString("android.media.metadata.MEDIA_ID");
            android.support.v4.media.MediaDescriptionCompat v0_4 = new CharSequence[3];
            CharSequence[] v16 = v0_4;
            CharSequence v8 = 0;
            android.net.Uri v9 = 0;
            CharSequence v6 = this.getText("android.media.metadata.DISPLAY_TITLE");
            if (android.text.TextUtils.isEmpty(v6)) {
                int v17 = 0;
                int v10 = 0;
                while ((v17 < v16.length) && (v10 < android.support.v4.media.MediaMetadataCompat.PREFERRED_DESCRIPTION_ORDER.length)) {
                    int v11 = (v10 + 1);
                    String v15_0 = this.getText(android.support.v4.media.MediaMetadataCompat.PREFERRED_DESCRIPTION_ORDER[v10]);
                    if (!android.text.TextUtils.isEmpty(v15_0)) {
                        int v18 = (v17 + 1);
                        v16[v17] = v15_0;
                        v17 = v18;
                    }
                    v10 = v11;
                }
            } else {
                v16[0] = v6;
                v16[1] = this.getText("android.media.metadata.DISPLAY_SUBTITLE");
                v16[2] = this.getText("android.media.metadata.DISPLAY_DESCRIPTION");
            }
            int v7_0 = 0;
            while (v7_0 < android.support.v4.media.MediaMetadataCompat.PREFERRED_BITMAP_ORDER.length) {
                String v15_1 = this.getBitmap(android.support.v4.media.MediaMetadataCompat.PREFERRED_BITMAP_ORDER[v7_0]);
                if (v15_1 == null) {
                    v7_0++;
                } else {
                    v8 = v15_1;
                    break;
                }
            }
            int v7_1 = 0;
            while (v7_1 < android.support.v4.media.MediaMetadataCompat.PREFERRED_URI_ORDER.length) {
                String v15_2 = this.getString(android.support.v4.media.MediaMetadataCompat.PREFERRED_URI_ORDER[v7_1]);
                if (android.text.TextUtils.isEmpty(v15_2)) {
                    v7_1++;
                } else {
                    v9 = android.net.Uri.parse(v15_2);
                    break;
                }
            }
            android.net.Uri v13 = 0;
            String v14 = this.getString("android.media.metadata.MEDIA_URI");
            if (!android.text.TextUtils.isEmpty(v14)) {
                v13 = android.net.Uri.parse(v14);
            }
            android.support.v4.media.MediaDescriptionCompat$Builder v4_1 = new android.support.v4.media.MediaDescriptionCompat$Builder();
            v4_1.setMediaId(v12);
            v4_1.setTitle(v16[0]);
            v4_1.setSubtitle(v16[1]);
            v4_1.setDescription(v16[2]);
            v4_1.setIconBitmap(v8);
            v4_1.setIconUri(v9);
            v4_1.setMediaUri(v13);
            if (this.mBundle.containsKey("android.media.metadata.BT_FOLDER_TYPE")) {
                android.os.Bundle v5_1 = new android.os.Bundle();
                v5_1.putLong("android.media.extra.BT_FOLDER_TYPE", this.getLong("android.media.metadata.BT_FOLDER_TYPE"));
                v4_1.setExtras(v5_1);
            }
            this.mDescription = v4_1.build();
            v19_13 = this.mDescription;
        } else {
            v19_13 = this.mDescription;
        }
        return v19_13;
    }

    public long getLong(String p5)
    {
        return this.mBundle.getLong(p5, 0);
    }

    public Object getMediaMetadata()
    {
        if ((this.mMetadataObj == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.os.Parcel v0 = android.os.Parcel.obtain();
            this.writeToParcel(v0, 0);
            v0.setDataPosition(0);
            this.mMetadataObj = android.support.v4.media.MediaMetadataCompatApi21.createFromParcel(v0);
            v0.recycle();
            Object v1_2 = this.mMetadataObj;
        } else {
            v1_2 = this.mMetadataObj;
        }
        return v1_2;
    }

    public android.support.v4.media.RatingCompat getRating(String p6)
    {
        android.support.v4.media.RatingCompat v2 = 0;
        try {
            if (android.os.Build$VERSION.SDK_INT < 19) {
                v2 = ((android.support.v4.media.RatingCompat) this.mBundle.getParcelable(p6));
            } else {
                v2 = android.support.v4.media.RatingCompat.fromRating(this.mBundle.getParcelable(p6));
            }
        } catch (Exception v1) {
            android.util.Log.w("MediaMetadata", "Failed to retrieve a key as Rating.", v1);
        }
        return v2;
    }

    public String getString(String p3)
    {
        int v1_1;
        CharSequence v0 = this.mBundle.getCharSequence(p3);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = v0.toString();
        }
        return v1_1;
    }

    public CharSequence getText(String p2)
    {
        return this.mBundle.getCharSequence(p2);
    }

    public java.util.Set keySet()
    {
        return this.mBundle.keySet();
    }

    public int size()
    {
        return this.mBundle.size();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeBundle(this.mBundle);
        return;
    }
}
package android.support.v4.media;
public class MediaMetadataCompatApi21$Builder {

    public MediaMetadataCompatApi21$Builder()
    {
        return;
    }

    public static Object build(Object p1)
    {
        return ((android.media.MediaMetadata$Builder) p1).build();
    }

    public static Object newInstance()
    {
        return new android.media.MediaMetadata$Builder();
    }

    public static void putBitmap(Object p0, String p1, android.graphics.Bitmap p2)
    {
        ((android.media.MediaMetadata$Builder) p0).putBitmap(p1, p2);
        return;
    }

    public static void putLong(Object p0, String p1, long p2)
    {
        ((android.media.MediaMetadata$Builder) p0).putLong(p1, p2);
        return;
    }

    public static void putRating(Object p0, String p1, Object p2)
    {
        ((android.media.MediaMetadata$Builder) p0).putRating(p1, ((android.media.Rating) p2));
        return;
    }

    public static void putString(Object p0, String p1, String p2)
    {
        ((android.media.MediaMetadata$Builder) p0).putString(p1, p2);
        return;
    }

    public static void putText(Object p0, String p1, CharSequence p2)
    {
        ((android.media.MediaMetadata$Builder) p0).putText(p1, p2);
        return;
    }
}
package android.support.v4.media;
 class MediaMetadataCompatApi21 {

    MediaMetadataCompatApi21()
    {
        return;
    }

    public static Object createFromParcel(android.os.Parcel p1)
    {
        return android.media.MediaMetadata.CREATOR.createFromParcel(p1);
    }

    public static android.graphics.Bitmap getBitmap(Object p1, String p2)
    {
        return ((android.media.MediaMetadata) p1).getBitmap(p2);
    }

    public static long getLong(Object p2, String p3)
    {
        return ((android.media.MediaMetadata) p2).getLong(p3);
    }

    public static Object getRating(Object p1, String p2)
    {
        return ((android.media.MediaMetadata) p1).getRating(p2);
    }

    public static CharSequence getText(Object p1, String p2)
    {
        return ((android.media.MediaMetadata) p1).getText(p2);
    }

    public static java.util.Set keySet(Object p1)
    {
        return ((android.media.MediaMetadata) p1).keySet();
    }

    public static void writeToParcel(Object p0, android.os.Parcel p1, int p2)
    {
        ((android.media.MediaMetadata) p0).writeToParcel(p1, p2);
        return;
    }
}
package android.support.v4.media;
 class ParceledListSliceAdapterApi21 {
    private static reflect.Constructor sConstructor;

    static ParceledListSliceAdapterApi21()
    {
        try {
            Class v1 = Class.forName("android.content.pm.ParceledListSlice");
            reflect.Constructor v2_2 = new Class[1];
            v2_2[0] = java.util.List;
            android.support.v4.media.ParceledListSliceAdapterApi21.sConstructor = v1.getConstructor(v2_2);
        } catch (NoSuchMethodException v0) {
            v0.printStackTrace();
        } catch (NoSuchMethodException v0) {
        }
        return;
    }

    ParceledListSliceAdapterApi21()
    {
        return;
    }

    static Object newInstance(java.util.List p5)
    {
        try {
            Object[] v3_1 = new Object[1];
            v3_1[0] = p5;
            Object v1 = android.support.v4.media.ParceledListSliceAdapterApi21.sConstructor.newInstance(v3_1);
        } catch (reflect.InvocationTargetException v0) {
            v0.printStackTrace();
        } catch (reflect.InvocationTargetException v0) {
        } catch (reflect.InvocationTargetException v0) {
        }
        return v1;
    }
}
package android.support.v4.media;
final class RatingCompat$1 implements android.os.Parcelable$Creator {

    RatingCompat$1()
    {
        return;
    }

    public android.support.v4.media.RatingCompat createFromParcel(android.os.Parcel p4)
    {
        return new android.support.v4.media.RatingCompat(p4.readInt(), p4.readFloat());
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.RatingCompat[] newArray(int p2)
    {
        android.support.v4.media.RatingCompat[] v0 = new android.support.v4.media.RatingCompat[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media;
public interface annotation RatingCompat$StarStyle implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public interface annotation RatingCompat$Style implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public final class RatingCompat implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR = None;
    public static final int RATING_3_STARS = 3;
    public static final int RATING_4_STARS = 4;
    public static final int RATING_5_STARS = 5;
    public static final int RATING_HEART = 1;
    public static final int RATING_NONE = 0;
    private static final float RATING_NOT_RATED = 49024;
    public static final int RATING_PERCENTAGE = 6;
    public static final int RATING_THUMB_UP_DOWN = 2;
    private static final String TAG = "Rating";
    private Object mRatingObj;
    private final int mRatingStyle;
    private final float mRatingValue;

    static RatingCompat()
    {
        android.support.v4.media.RatingCompat.CREATOR = new android.support.v4.media.RatingCompat$1();
        return;
    }

    RatingCompat(int p1, float p2)
    {
        this.mRatingStyle = p1;
        this.mRatingValue = p2;
        return;
    }

    public static android.support.v4.media.RatingCompat fromRating(Object p4)
    {
        android.support.v4.media.RatingCompat v0 = 0;
        if ((p4 != null) && (android.os.Build$VERSION.SDK_INT >= 19)) {
            int v1 = android.support.v4.media.RatingCompatKitkat.getRatingStyle(p4);
            if (!android.support.v4.media.RatingCompatKitkat.isRated(p4)) {
                v0 = android.support.v4.media.RatingCompat.newUnratedRating(v1);
            } else {
                switch (v1) {
                    case 1:
                        v0 = android.support.v4.media.RatingCompat.newHeartRating(android.support.v4.media.RatingCompatKitkat.hasHeart(p4));
                        break;
                    case 2:
                        v0 = android.support.v4.media.RatingCompat.newThumbRating(android.support.v4.media.RatingCompatKitkat.isThumbUp(p4));
                        break;
                    case 3:
                    case 4:
                    case 5:
                        v0 = android.support.v4.media.RatingCompat.newStarRating(v1, android.support.v4.media.RatingCompatKitkat.getStarRating(p4));
                        break;
                    case 6:
                        v0 = android.support.v4.media.RatingCompat.newPercentageRating(android.support.v4.media.RatingCompatKitkat.getPercentRating(p4));
                        break;
                    default:
                        return v0;
                }
            }
            v0.mRatingObj = p4;
        }
        return v0;
    }

    public static android.support.v4.media.RatingCompat newHeartRating(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 1065353216;
        }
        return new android.support.v4.media.RatingCompat(1, v0);
    }

    public static android.support.v4.media.RatingCompat newPercentageRating(float p2)
    {
        if ((p2 >= 0) && (p2 <= 1120403456)) {
            android.support.v4.media.RatingCompat v0_2 = new android.support.v4.media.RatingCompat(6, p2);
        } else {
            android.util.Log.e("Rating", "Invalid percentage-based rating value");
            v0_2 = 0;
        }
        return v0_2;
    }

    public static android.support.v4.media.RatingCompat newStarRating(int p5, float p6)
    {
        int v0;
        android.support.v4.media.RatingCompat v1_0 = 0;
        switch (p5) {
            case 3:
                v0 = 1077936128;
                if ((p6 >= 0) && (p6 <= v0)) {
                    v1_0 = new android.support.v4.media.RatingCompat(p5, p6);
                } else {
                    android.util.Log.e("Rating", "Trying to set out of range star-based rating");
                }
                break;
            case 4:
                v0 = 1082130432;
                break;
            case 5:
                v0 = 1084227584;
                break;
            default:
                android.util.Log.e("Rating", new StringBuilder().append("Invalid rating style (").append(p5).append(") for a star rating").toString());
        }
        return v1_0;
    }

    public static android.support.v4.media.RatingCompat newThumbRating(boolean p3)
    {
        int v0;
        if (!p3) {
            v0 = 0;
        } else {
            v0 = 1065353216;
        }
        return new android.support.v4.media.RatingCompat(2, v0);
    }

    public static android.support.v4.media.RatingCompat newUnratedRating(int p2)
    {
        android.support.v4.media.RatingCompat v0_1;
        switch (p2) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                v0_1 = new android.support.v4.media.RatingCompat(p2, -1082130432);
                break;
            default:
                v0_1 = 0;
        }
        return v0_1;
    }

    public int describeContents()
    {
        return this.mRatingStyle;
    }

    public float getPercentRating()
    {
        if ((this.mRatingStyle == 6) && (this.isRated())) {
            float v0_2 = this.mRatingValue;
        } else {
            v0_2 = -1082130432;
        }
        return v0_2;
    }

    public Object getRating()
    {
        if ((this.mRatingObj == null) && (android.os.Build$VERSION.SDK_INT >= 19)) {
            if (!this.isRated()) {
                this.mRatingObj = android.support.v4.media.RatingCompatKitkat.newUnratedRating(this.mRatingStyle);
            } else {
                switch (this.mRatingStyle) {
                    case 1:
                        this.mRatingObj = android.support.v4.media.RatingCompatKitkat.newHeartRating(this.hasHeart());
                        break;
                    case 2:
                        this.mRatingObj = android.support.v4.media.RatingCompatKitkat.newThumbRating(this.isThumbUp());
                        break;
                    case 3:
                    case 4:
                    case 5:
                        this.mRatingObj = android.support.v4.media.RatingCompatKitkat.newStarRating(this.mRatingStyle, this.getStarRating());
                        break;
                    case 6:
                        this.mRatingObj = android.support.v4.media.RatingCompatKitkat.newPercentageRating(this.getPercentRating());
                        break;
                }
                Object v0_12 = 0;
                return v0_12;
            }
            v0_12 = this.mRatingObj;
        } else {
            v0_12 = this.mRatingObj;
        }
        return v0_12;
    }

    public int getRatingStyle()
    {
        return this.mRatingStyle;
    }

    public float getStarRating()
    {
        float v0_2;
        switch (this.mRatingStyle) {
            case 3:
            case 4:
            case 5:
                if (!this.isRated()) {
                    v0_2 = -1082130432;
                } else {
                    v0_2 = this.mRatingValue;
                }
                break;
            default:
        }
        return v0_2;
    }

    public boolean hasHeart()
    {
        int v0 = 1;
        int v1 = 0;
        if (this.mRatingStyle == 1) {
            if (this.mRatingValue != 1065353216) {
                v0 = 0;
            }
            v1 = v0;
        }
        return v1;
    }

    public boolean isRated()
    {
        int v0_2;
        if (this.mRatingValue < 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isThumbUp()
    {
        int v0 = 0;
        if ((this.mRatingStyle == 2) && (this.mRatingValue == 1065353216)) {
            v0 = 1;
        }
        return v0;
    }

    public String toString()
    {
        String v0_5;
        StringBuilder v1_0 = new StringBuilder().append("Rating:style=").append(this.mRatingStyle).append(" rating=");
        if (this.mRatingValue >= 0) {
            v0_5 = String.valueOf(this.mRatingValue);
        } else {
            v0_5 = "unrated";
        }
        return v1_0.append(v0_5).toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeInt(this.mRatingStyle);
        p2.writeFloat(this.mRatingValue);
        return;
    }
}
package android.support.v4.media;
 class RatingCompatKitkat {

    RatingCompatKitkat()
    {
        return;
    }

    public static float getPercentRating(Object p1)
    {
        return ((android.media.Rating) p1).getPercentRating();
    }

    public static int getRatingStyle(Object p1)
    {
        return ((android.media.Rating) p1).getRatingStyle();
    }

    public static float getStarRating(Object p1)
    {
        return ((android.media.Rating) p1).getStarRating();
    }

    public static boolean hasHeart(Object p1)
    {
        return ((android.media.Rating) p1).hasHeart();
    }

    public static boolean isRated(Object p1)
    {
        return ((android.media.Rating) p1).isRated();
    }

    public static boolean isThumbUp(Object p1)
    {
        return ((android.media.Rating) p1).isThumbUp();
    }

    public static Object newHeartRating(boolean p1)
    {
        return android.media.Rating.newHeartRating(p1);
    }

    public static Object newPercentageRating(float p1)
    {
        return android.media.Rating.newPercentageRating(p1);
    }

    public static Object newStarRating(int p1, float p2)
    {
        return android.media.Rating.newStarRating(p1, p2);
    }

    public static Object newThumbRating(boolean p1)
    {
        return android.media.Rating.newThumbRating(p1);
    }

    public static Object newUnratedRating(int p1)
    {
        return android.media.Rating.newUnratedRating(p1);
    }
}
package android.support.v4.media;
public abstract class TransportController {

    public TransportController()
    {
        return;
    }

    public abstract int getBufferPercentage();

    public abstract long getCurrentPosition();

    public abstract long getDuration();

    public abstract int getTransportControlFlags();

    public abstract boolean isPlaying();

    public abstract void pausePlaying();

    public abstract void registerStateListener();

    public abstract void seekTo();

    public abstract void startPlaying();

    public abstract void stopPlaying();

    public abstract void unregisterStateListener();
}
package android.support.v4.media;
 class TransportMediator$2 implements android.view.KeyEvent$Callback {
    final synthetic android.support.v4.media.TransportMediator this$0;

    TransportMediator$2(android.support.v4.media.TransportMediator p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onKeyDown(int p2, android.view.KeyEvent p3)
    {
        int v0_1;
        if (!android.support.v4.media.TransportMediator.isMediaKey(p2)) {
            v0_1 = 0;
        } else {
            v0_1 = this.this$0.mCallbacks.onMediaButtonDown(p2, p3);
        }
        return v0_1;
    }

    public boolean onKeyLongPress(int p2, android.view.KeyEvent p3)
    {
        return 0;
    }

    public boolean onKeyMultiple(int p2, int p3, android.view.KeyEvent p4)
    {
        return 0;
    }

    public boolean onKeyUp(int p2, android.view.KeyEvent p3)
    {
        int v0_1;
        if (!android.support.v4.media.TransportMediator.isMediaKey(p2)) {
            v0_1 = 0;
        } else {
            v0_1 = this.this$0.mCallbacks.onMediaButtonUp(p2, p3);
        }
        return v0_1;
    }
}
package android.support.v4.media;
interface TransportMediatorCallback {

    public abstract long getPlaybackPosition();

    public abstract void handleAudioFocusChange();

    public abstract void handleKey();

    public abstract void playbackPositionUpdate();
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$1 implements android.view.ViewTreeObserver$OnWindowAttachListener {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$1(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onWindowAttached()
    {
        this.this$0.windowAttached();
        return;
    }

    public void onWindowDetached()
    {
        this.this$0.windowDetached();
        return;
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$2 implements android.view.ViewTreeObserver$OnWindowFocusChangeListener {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$2(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onWindowFocusChanged(boolean p2)
    {
        if (!p2) {
            this.this$0.loseFocus();
        } else {
            this.this$0.gainFocus();
        }
        return;
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$3 extends android.content.BroadcastReceiver {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$3(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p4, android.content.Intent p5)
    {
        try {
            this.this$0.mTransportCallback.handleKey(((android.view.KeyEvent) p5.getParcelableExtra("android.intent.extra.KEY_EVENT")));
        } catch (ClassCastException v0) {
            android.util.Log.w("TransportController", v0);
        }
        return;
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$4 implements android.media.AudioManager$OnAudioFocusChangeListener {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$4(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAudioFocusChange(int p2)
    {
        this.this$0.mTransportCallback.handleAudioFocusChange(p2);
        return;
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$5 implements android.media.RemoteControlClient$OnGetPlaybackPositionListener {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$5(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public long onGetPlaybackPosition()
    {
        return this.this$0.mTransportCallback.getPlaybackPosition();
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2$6 implements android.media.RemoteControlClient$OnPlaybackPositionUpdateListener {
    final synthetic android.support.v4.media.TransportMediatorJellybeanMR2 this$0;

    TransportMediatorJellybeanMR2$6(android.support.v4.media.TransportMediatorJellybeanMR2 p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onPlaybackPositionUpdate(long p2)
    {
        this.this$0.mTransportCallback.playbackPositionUpdate(p2);
        return;
    }
}
package android.support.v4.media;
 class TransportMediatorJellybeanMR2 {
    android.media.AudioManager$OnAudioFocusChangeListener mAudioFocusChangeListener;
    boolean mAudioFocused;
    final android.media.AudioManager mAudioManager;
    final android.content.Context mContext;
    boolean mFocused;
    final android.media.RemoteControlClient$OnGetPlaybackPositionListener mGetPlaybackPositionListener;
    final android.content.Intent mIntent;
    final android.content.BroadcastReceiver mMediaButtonReceiver;
    android.app.PendingIntent mPendingIntent;
    int mPlayState;
    final android.media.RemoteControlClient$OnPlaybackPositionUpdateListener mPlaybackPositionUpdateListener;
    final String mReceiverAction;
    final android.content.IntentFilter mReceiverFilter;
    android.media.RemoteControlClient mRemoteControl;
    final android.view.View mTargetView;
    final android.support.v4.media.TransportMediatorCallback mTransportCallback;
    final android.view.ViewTreeObserver$OnWindowAttachListener mWindowAttachListener;
    final android.view.ViewTreeObserver$OnWindowFocusChangeListener mWindowFocusListener;

    public TransportMediatorJellybeanMR2(android.content.Context p3, android.media.AudioManager p4, android.view.View p5, android.support.v4.media.TransportMediatorCallback p6)
    {
        this.mWindowAttachListener = new android.support.v4.media.TransportMediatorJellybeanMR2$1(this);
        this.mWindowFocusListener = new android.support.v4.media.TransportMediatorJellybeanMR2$2(this);
        this.mMediaButtonReceiver = new android.support.v4.media.TransportMediatorJellybeanMR2$3(this);
        this.mAudioFocusChangeListener = new android.support.v4.media.TransportMediatorJellybeanMR2$4(this);
        this.mGetPlaybackPositionListener = new android.support.v4.media.TransportMediatorJellybeanMR2$5(this);
        this.mPlaybackPositionUpdateListener = new android.support.v4.media.TransportMediatorJellybeanMR2$6(this);
        this.mPlayState = 0;
        this.mContext = p3;
        this.mAudioManager = p4;
        this.mTargetView = p5;
        this.mTransportCallback = p6;
        this.mReceiverAction = new StringBuilder().append(p3.getPackageName()).append(":transport:").append(System.identityHashCode(this)).toString();
        this.mIntent = new android.content.Intent(this.mReceiverAction);
        this.mIntent.setPackage(p3.getPackageName());
        this.mReceiverFilter = new android.content.IntentFilter();
        this.mReceiverFilter.addAction(this.mReceiverAction);
        this.mTargetView.getViewTreeObserver().addOnWindowAttachListener(this.mWindowAttachListener);
        this.mTargetView.getViewTreeObserver().addOnWindowFocusChangeListener(this.mWindowFocusListener);
        return;
    }

    public void destroy()
    {
        this.windowDetached();
        this.mTargetView.getViewTreeObserver().removeOnWindowAttachListener(this.mWindowAttachListener);
        this.mTargetView.getViewTreeObserver().removeOnWindowFocusChangeListener(this.mWindowFocusListener);
        return;
    }

    void dropAudioFocus()
    {
        if (this.mAudioFocused) {
            this.mAudioFocused = 0;
            this.mAudioManager.abandonAudioFocus(this.mAudioFocusChangeListener);
        }
        return;
    }

    void gainFocus()
    {
        if (!this.mFocused) {
            this.mFocused = 1;
            this.mAudioManager.registerMediaButtonEventReceiver(this.mPendingIntent);
            this.mAudioManager.registerRemoteControlClient(this.mRemoteControl);
            if (this.mPlayState == 3) {
                this.takeAudioFocus();
            }
        }
        return;
    }

    public Object getRemoteControlClient()
    {
        return this.mRemoteControl;
    }

    void loseFocus()
    {
        this.dropAudioFocus();
        if (this.mFocused) {
            this.mFocused = 0;
            this.mAudioManager.unregisterRemoteControlClient(this.mRemoteControl);
            this.mAudioManager.unregisterMediaButtonEventReceiver(this.mPendingIntent);
        }
        return;
    }

    public void pausePlaying()
    {
        if (this.mPlayState == 3) {
            this.mPlayState = 2;
            this.mRemoteControl.setPlaybackState(2);
        }
        this.dropAudioFocus();
        return;
    }

    public void refreshState(boolean p5, long p6, int p8)
    {
        if (this.mRemoteControl != null) {
            int v1;
            if (!p5) {
                v1 = 1;
            } else {
                v1 = 3;
            }
            android.media.RemoteControlClient v0_1;
            if (!p5) {
                v0_1 = 0;
            } else {
                v0_1 = 1065353216;
            }
            this.mRemoteControl.setPlaybackState(v1, p6, v0_1);
            this.mRemoteControl.setTransportControlFlags(p8);
        }
        return;
    }

    public void startPlaying()
    {
        if (this.mPlayState != 3) {
            this.mPlayState = 3;
            this.mRemoteControl.setPlaybackState(3);
        }
        if (this.mFocused) {
            this.takeAudioFocus();
        }
        return;
    }

    public void stopPlaying()
    {
        if (this.mPlayState != 1) {
            this.mPlayState = 1;
            this.mRemoteControl.setPlaybackState(1);
        }
        this.dropAudioFocus();
        return;
    }

    void takeAudioFocus()
    {
        if (!this.mAudioFocused) {
            this.mAudioFocused = 1;
            this.mAudioManager.requestAudioFocus(this.mAudioFocusChangeListener, 3, 1);
        }
        return;
    }

    void windowAttached()
    {
        this.mContext.registerReceiver(this.mMediaButtonReceiver, this.mReceiverFilter);
        this.mPendingIntent = android.app.PendingIntent.getBroadcast(this.mContext, 0, this.mIntent, 268435456);
        this.mRemoteControl = new android.media.RemoteControlClient(this.mPendingIntent);
        this.mRemoteControl.setOnGetPlaybackPositionListener(this.mGetPlaybackPositionListener);
        this.mRemoteControl.setPlaybackPositionUpdateListener(this.mPlaybackPositionUpdateListener);
        return;
    }

    void windowDetached()
    {
        this.loseFocus();
        if (this.mPendingIntent != null) {
            this.mContext.unregisterReceiver(this.mMediaButtonReceiver);
            this.mPendingIntent.cancel();
            this.mPendingIntent = 0;
            this.mRemoteControl = 0;
        }
        return;
    }
}
package android.support.v4.media;
public abstract class TransportPerformer {
    static final int AUDIOFOCUS_GAIN = 1;
    static final int AUDIOFOCUS_GAIN_TRANSIENT = 2;
    static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK = 3;
    static final int AUDIOFOCUS_LOSS = 255;
    static final int AUDIOFOCUS_LOSS_TRANSIENT = 254;
    static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK = 253;

    public TransportPerformer()
    {
        return;
    }

    public void onAudioFocusChange(int p10)
    {
        int v7 = 0;
        switch (p10) {
            case -1:
                v7 = 127;
                break;
        }
        if (v7 != 0) {
            long v2 = android.os.SystemClock.uptimeMillis();
            this.onMediaButtonDown(v7, new android.view.KeyEvent(v2, v2, 0, v7, 0));
            this.onMediaButtonUp(v7, new android.view.KeyEvent(v2, v2, 1, v7, 0));
        }
        return;
    }

    public int onGetBufferPercentage()
    {
        return 100;
    }

    public abstract long onGetCurrentPosition();

    public abstract long onGetDuration();

    public int onGetTransportControlFlags()
    {
        return 60;
    }

    public abstract boolean onIsPlaying();

    public boolean onMediaButtonDown(int p3, android.view.KeyEvent p4)
    {
        switch (p3) {
            case 79:
            case 85:
                if (!this.onIsPlaying()) {
                    this.onStart();
                } else {
                    this.onPause();
                }
                break;
            case 86:
                this.onStop();
                break;
            case 126:
                this.onStart();
                break;
            case 127:
                this.onPause();
                break;
        }
        return 1;
    }

    public boolean onMediaButtonUp(int p2, android.view.KeyEvent p3)
    {
        return 1;
    }

    public abstract void onPause();

    public abstract void onSeekTo();

    public abstract void onStart();

    public abstract void onStop();
}
package android.support.v4.media;
public class TransportStateListener {

    public TransportStateListener()
    {
        return;
    }

    public void onPlayingChanged(android.support.v4.media.TransportController p1)
    {
        return;
    }

    public void onTransportControlsChanged(android.support.v4.media.TransportController p1)
    {
        return;
    }
}
package android.support.v4.media;
public abstract class VolumeProviderCompat$Callback {

    public VolumeProviderCompat$Callback()
    {
        return;
    }

    public abstract void onVolumeChanged();
}
package android.support.v4.media;
public interface annotation VolumeProviderCompat$ControlType implements java.lang.annotation.Annotation {
}
package android.support.v4.media;
public abstract class VolumeProviderCompat {
    public static final int VOLUME_CONTROL_ABSOLUTE = 2;
    public static final int VOLUME_CONTROL_FIXED = 0;
    public static final int VOLUME_CONTROL_RELATIVE = 1;
    private android.support.v4.media.VolumeProviderCompat$Callback mCallback;
    private final int mControlType;
    private int mCurrentVolume;
    private final int mMaxVolume;
    private Object mVolumeProviderObj;

    public VolumeProviderCompat(int p1, int p2, int p3)
    {
        this.mControlType = p1;
        this.mMaxVolume = p2;
        this.mCurrentVolume = p3;
        return;
    }

    public final int getCurrentVolume()
    {
        return this.mCurrentVolume;
    }

    public final int getMaxVolume()
    {
        return this.mMaxVolume;
    }

    public final int getVolumeControl()
    {
        return this.mControlType;
    }

    public Object getVolumeProvider()
    {
        if ((this.mVolumeProviderObj == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            this.mVolumeProviderObj = android.support.v4.media.VolumeProviderCompatApi21.createVolumeProvider(this.mControlType, this.mMaxVolume, this.mCurrentVolume, new android.support.v4.media.VolumeProviderCompat$1(this));
            Object v0_2 = this.mVolumeProviderObj;
        } else {
            v0_2 = this.mVolumeProviderObj;
        }
        return v0_2;
    }

    public void onAdjustVolume(int p1)
    {
        return;
    }

    public void onSetVolumeTo(int p1)
    {
        return;
    }

    public void setCallback(android.support.v4.media.VolumeProviderCompat$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public final void setCurrentVolume(int p3)
    {
        this.mCurrentVolume = p3;
        Object v0 = this.getVolumeProvider();
        if (v0 != null) {
            android.support.v4.media.VolumeProviderCompatApi21.setCurrentVolume(v0, p3);
        }
        if (this.mCallback != null) {
            this.mCallback.onVolumeChanged(this);
        }
        return;
    }
}
package android.support.v4.media;
final class VolumeProviderCompatApi21$1 extends android.media.VolumeProvider {
    final synthetic android.support.v4.media.VolumeProviderCompatApi21$Delegate val$delegate;

    VolumeProviderCompatApi21$1(int p1, int p2, int p3, android.support.v4.media.VolumeProviderCompatApi21$Delegate p4)
    {
        this.val$delegate = p4;
        super(p1, p2, p3);
        return;
    }

    public void onAdjustVolume(int p2)
    {
        this.val$delegate.onAdjustVolume(p2);
        return;
    }

    public void onSetVolumeTo(int p2)
    {
        this.val$delegate.onSetVolumeTo(p2);
        return;
    }
}
package android.support.v4.media;
public interface VolumeProviderCompatApi21$Delegate {

    public abstract void onAdjustVolume();

    public abstract void onSetVolumeTo();
}
package android.support.v4.media;
 class VolumeProviderCompatApi21 {

    VolumeProviderCompatApi21()
    {
        return;
    }

    public static Object createVolumeProvider(int p1, int p2, int p3, android.support.v4.media.VolumeProviderCompatApi21$Delegate p4)
    {
        return new android.support.v4.media.VolumeProviderCompatApi21$1(p1, p2, p3, p4);
    }

    public static void setCurrentVolume(Object p0, int p1)
    {
        ((android.media.VolumeProvider) p0).setCurrentVolume(p1);
        return;
    }
}
package android.support.v4.media.session;
public interface IMediaControllerCallback implements android.os.IInterface {

    public abstract void onEvent();

    public abstract void onExtrasChanged();

    public abstract void onMetadataChanged();

    public abstract void onPlaybackStateChanged();

    public abstract void onQueueChanged();

    public abstract void onQueueTitleChanged();

    public abstract void onSessionDestroyed();

    public abstract void onVolumeInfoChanged();
}
package android.support.v4.media.session;
public interface IMediaSession implements android.os.IInterface {

    public abstract void adjustVolume();

    public abstract void fastForward();

    public abstract android.os.Bundle getExtras();

    public abstract long getFlags();

    public abstract android.app.PendingIntent getLaunchPendingIntent();

    public abstract android.support.v4.media.MediaMetadataCompat getMetadata();

    public abstract String getPackageName();

    public abstract android.support.v4.media.session.PlaybackStateCompat getPlaybackState();

    public abstract java.util.List getQueue();

    public abstract CharSequence getQueueTitle();

    public abstract int getRatingType();

    public abstract String getTag();

    public abstract android.support.v4.media.session.ParcelableVolumeInfo getVolumeAttributes();

    public abstract boolean isTransportControlEnabled();

    public abstract void next();

    public abstract void pause();

    public abstract void play();

    public abstract void playFromMediaId();

    public abstract void playFromSearch();

    public abstract void playFromUri();

    public abstract void prepare();

    public abstract void prepareFromMediaId();

    public abstract void prepareFromSearch();

    public abstract void prepareFromUri();

    public abstract void previous();

    public abstract void rate();

    public abstract void registerCallbackListener();

    public abstract void rewind();

    public abstract void seekTo();

    public abstract void sendCommand();

    public abstract void sendCustomAction();

    public abstract boolean sendMediaButton();

    public abstract void setVolumeTo();

    public abstract void skipToQueueItem();

    public abstract void stop();

    public abstract void unregisterCallbackListener();
}
package android.support.v4.media.session;
public class MediaButtonReceiver extends android.content.BroadcastReceiver {
    private static final String TAG = "MediaButtonReceiver";

    public MediaButtonReceiver()
    {
        return;
    }

    public static android.app.PendingIntent buildMediaButtonPendingIntent(android.content.Context p3, long p4)
    {
        android.app.PendingIntent v1_0;
        android.content.ComponentName v0 = android.support.v4.media.session.MediaButtonReceiver.getMediaButtonReceiverComponent(p3);
        if (v0 != null) {
            v1_0 = android.support.v4.media.session.MediaButtonReceiver.buildMediaButtonPendingIntent(p3, v0, p4);
        } else {
            android.util.Log.w("MediaButtonReceiver", "A unique media button receiver could not be found in the given context, so couldn\'t build a pending intent.");
            v1_0 = 0;
        }
        return v1_0;
    }

    public static android.app.PendingIntent buildMediaButtonPendingIntent(android.content.Context p6, android.content.ComponentName p7, long p8)
    {
        android.app.PendingIntent v2_0 = 0;
        if (p7 != null) {
            int v1 = android.support.v4.media.session.PlaybackStateCompat.toKeyCode(p8);
            if (v1 != 0) {
                android.content.Intent v0_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON");
                v0_1.setComponent(p7);
                v0_1.putExtra("android.intent.extra.KEY_EVENT", new android.view.KeyEvent(0, v1));
                v2_0 = android.app.PendingIntent.getBroadcast(p6, v1, v0_1, 0);
            } else {
                android.util.Log.w("MediaButtonReceiver", new StringBuilder().append("Cannot build a media button pending intent with the given action: ").append(p8).toString());
            }
        } else {
            android.util.Log.w("MediaButtonReceiver", "The component name of media button receiver should be provided.");
        }
        return v2_0;
    }

    static android.content.ComponentName getMediaButtonReceiverComponent(android.content.Context p7)
    {
        int v4_3;
        android.content.Intent v1_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON");
        v1_1.setPackage(p7.getPackageName());
        java.util.List v3 = p7.getPackageManager().queryBroadcastReceivers(v1_1, 0);
        if (v3.size() != 1) {
            if (v3.size() > 1) {
                android.util.Log.w("MediaButtonReceiver", "More than one BroadcastReceiver that handles android.intent.action.MEDIA_BUTTON was found, returning null.");
            }
            v4_3 = 0;
        } else {
            android.content.pm.ResolveInfo v2_1 = ((android.content.pm.ResolveInfo) v3.get(0));
            v4_3 = new android.content.ComponentName(v2_1.activityInfo.packageName, v2_1.activityInfo.name);
        }
        return v4_3;
    }

    public static android.view.KeyEvent handleIntent(android.support.v4.media.session.MediaSessionCompat p4, android.content.Intent p5)
    {
        if ((p4 != null) && ((p5 != null) && (("android.intent.action.MEDIA_BUTTON".equals(p5.getAction())) && (p5.hasExtra("android.intent.extra.KEY_EVENT"))))) {
            android.view.KeyEvent v0_1 = ((android.view.KeyEvent) p5.getParcelableExtra("android.intent.extra.KEY_EVENT"));
            p4.getController().dispatchMediaButtonEvent(v0_1);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public void onReceive(android.content.Context p9, android.content.Intent p10)
    {
        android.content.Intent v2_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON");
        v2_1.setPackage(p9.getPackageName());
        android.content.pm.PackageManager v1 = p9.getPackageManager();
        java.util.List v4 = v1.queryIntentServices(v2_1, 0);
        if (v4.isEmpty()) {
            v2_1.setAction("android.media.browse.MediaBrowserService");
            v4 = v1.queryIntentServices(v2_1, 0);
        }
        if (!v4.isEmpty()) {
            if (v4.size() == 1) {
                android.content.pm.ResolveInfo v3_1 = ((android.content.pm.ResolveInfo) v4.get(0));
                p10.setComponent(new android.content.ComponentName(v3_1.serviceInfo.packageName, v3_1.serviceInfo.name));
                p9.startService(p10);
                return;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Expected 1 Service that handles ").append(v2_1.getAction()).append(", found ").append(v4.size()).toString());
            }
        } else {
            throw new IllegalStateException("Could not find any Service that handles android.intent.action.MEDIA_BUTTON or a media browser service implementation");
        }
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$Callback$MessageHandler extends android.os.Handler {
    private static final int MSG_DESTROYED = 8;
    private static final int MSG_EVENT = 1;
    private static final int MSG_UPDATE_EXTRAS = 7;
    private static final int MSG_UPDATE_METADATA = 3;
    private static final int MSG_UPDATE_PLAYBACK_STATE = 2;
    private static final int MSG_UPDATE_QUEUE = 5;
    private static final int MSG_UPDATE_QUEUE_TITLE = 6;
    private static final int MSG_UPDATE_VOLUME = 4;
    final synthetic android.support.v4.media.session.MediaControllerCompat$Callback this$0;

    public MediaControllerCompat$Callback$MessageHandler(android.support.v4.media.session.MediaControllerCompat$Callback p1, android.os.Looper p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    public void handleMessage(android.os.Message p4)
    {
        if (this.this$0.mRegistered) {
            switch (p4.what) {
                case 1:
                    this.this$0.onSessionEvent(((String) p4.obj), p4.getData());
                    break;
                case 2:
                    this.this$0.onPlaybackStateChanged(((android.support.v4.media.session.PlaybackStateCompat) p4.obj));
                    break;
                case 3:
                    this.this$0.onMetadataChanged(((android.support.v4.media.MediaMetadataCompat) p4.obj));
                    break;
                case 4:
                    this.this$0.onAudioInfoChanged(((android.support.v4.media.session.MediaControllerCompat$PlaybackInfo) p4.obj));
                    break;
                case 5:
                    this.this$0.onQueueChanged(((java.util.List) p4.obj));
                    break;
                case 6:
                    this.this$0.onQueueTitleChanged(((CharSequence) p4.obj));
                    break;
                case 7:
                    this.this$0.onExtrasChanged(((android.os.Bundle) p4.obj));
                    break;
                case 8:
                    this.this$0.onSessionDestroyed();
                    break;
                default:
            }
        }
        return;
    }

    public void post(int p2, Object p3, android.os.Bundle p4)
    {
        android.os.Message v0 = this.obtainMessage(p2, p3);
        v0.setData(p4);
        v0.sendToTarget();
        return;
    }
}
package android.support.v4.media.session;
public abstract class MediaControllerCompat$Callback implements android.os.IBinder$DeathRecipient {
    private final Object mCallbackObj;
    android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler mHandler;
    boolean mRegistered;

    public MediaControllerCompat$Callback()
    {
        this.mRegistered = 0;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            this.mCallbackObj = new android.support.v4.media.session.MediaControllerCompat$Callback$StubCompat(this);
        } else {
            this.mCallbackObj = android.support.v4.media.session.MediaControllerCompatApi21.createCallback(new android.support.v4.media.session.MediaControllerCompat$Callback$StubApi21(this));
        }
        return;
    }

    static synthetic Object access$000(android.support.v4.media.session.MediaControllerCompat$Callback p1)
    {
        return p1.mCallbackObj;
    }

    static synthetic void access$100(android.support.v4.media.session.MediaControllerCompat$Callback p0, android.os.Handler p1)
    {
        p0.setHandler(p1);
        return;
    }

    private void setHandler(android.os.Handler p3)
    {
        this.mHandler = new android.support.v4.media.session.MediaControllerCompat$Callback$MessageHandler(this, p3.getLooper());
        return;
    }

    public void binderDied()
    {
        this.onSessionDestroyed();
        return;
    }

    public void onAudioInfoChanged(android.support.v4.media.session.MediaControllerCompat$PlaybackInfo p1)
    {
        return;
    }

    public void onExtrasChanged(android.os.Bundle p1)
    {
        return;
    }

    public void onMetadataChanged(android.support.v4.media.MediaMetadataCompat p1)
    {
        return;
    }

    public void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat p1)
    {
        return;
    }

    public void onQueueChanged(java.util.List p1)
    {
        return;
    }

    public void onQueueTitleChanged(CharSequence p1)
    {
        return;
    }

    public void onSessionDestroyed()
    {
        return;
    }

    public void onSessionEvent(String p1, android.os.Bundle p2)
    {
        return;
    }
}
package android.support.v4.media.session;
interface MediaControllerCompat$MediaControllerImpl {

    public abstract void adjustVolume();

    public abstract boolean dispatchMediaButtonEvent();

    public abstract android.os.Bundle getExtras();

    public abstract long getFlags();

    public abstract Object getMediaController();

    public abstract android.support.v4.media.MediaMetadataCompat getMetadata();

    public abstract String getPackageName();

    public abstract android.support.v4.media.session.MediaControllerCompat$PlaybackInfo getPlaybackInfo();

    public abstract android.support.v4.media.session.PlaybackStateCompat getPlaybackState();

    public abstract java.util.List getQueue();

    public abstract CharSequence getQueueTitle();

    public abstract int getRatingType();

    public abstract android.app.PendingIntent getSessionActivity();

    public abstract android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls();

    public abstract void registerCallback();

    public abstract void sendCommand();

    public abstract void setVolumeTo();

    public abstract void unregisterCallback();
}
package android.support.v4.media.session;
public final class MediaControllerCompat$PlaybackInfo {
    public static final int PLAYBACK_TYPE_LOCAL = 1;
    public static final int PLAYBACK_TYPE_REMOTE = 2;
    private final int mAudioStream;
    private final int mCurrentVolume;
    private final int mMaxVolume;
    private final int mPlaybackType;
    private final int mVolumeControl;

    MediaControllerCompat$PlaybackInfo(int p1, int p2, int p3, int p4, int p5)
    {
        this.mPlaybackType = p1;
        this.mAudioStream = p2;
        this.mVolumeControl = p3;
        this.mMaxVolume = p4;
        this.mCurrentVolume = p5;
        return;
    }

    public int getAudioStream()
    {
        return this.mAudioStream;
    }

    public int getCurrentVolume()
    {
        return this.mCurrentVolume;
    }

    public int getMaxVolume()
    {
        return this.mMaxVolume;
    }

    public int getPlaybackType()
    {
        return this.mPlaybackType;
    }

    public int getVolumeControl()
    {
        return this.mVolumeControl;
    }
}
package android.support.v4.media.session;
public abstract class MediaControllerCompat$TransportControls {

    MediaControllerCompat$TransportControls()
    {
        return;
    }

    public abstract void fastForward();

    public abstract void pause();

    public abstract void play();

    public abstract void playFromMediaId();

    public abstract void playFromSearch();

    public abstract void playFromUri();

    public abstract void prepare();

    public abstract void prepareFromMediaId();

    public abstract void prepareFromSearch();

    public abstract void prepareFromUri();

    public abstract void rewind();

    public abstract void seekTo();

    public abstract void sendCustomAction();

    public abstract void sendCustomAction();

    public abstract void setRating();

    public abstract void skipToNext();

    public abstract void skipToPrevious();

    public abstract void skipToQueueItem();

    public abstract void stop();
}
package android.support.v4.media.session;
public final class MediaControllerCompat {
    static final String TAG = "MediaControllerCompat";
    private final android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl mImpl;
    private final android.support.v4.media.session.MediaSessionCompat$Token mToken;

    public MediaControllerCompat(android.content.Context p3, android.support.v4.media.session.MediaSessionCompat$Token p4)
    {
        if (p4 != null) {
            this.mToken = p4;
            if (android.os.Build$VERSION.SDK_INT < 24) {
                if (android.os.Build$VERSION.SDK_INT < 23) {
                    if (android.os.Build$VERSION.SDK_INT < 21) {
                        this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplBase(this.mToken);
                    } else {
                        this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21(p3, p4);
                    }
                } else {
                    this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi23(p3, p4);
                }
            } else {
                this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi24(p3, p4);
            }
            return;
        } else {
            throw new IllegalArgumentException("sessionToken must not be null");
        }
    }

    public MediaControllerCompat(android.content.Context p3, android.support.v4.media.session.MediaSessionCompat p4)
    {
        if (p4 != null) {
            this.mToken = p4.getSessionToken();
            if (android.os.Build$VERSION.SDK_INT < 24) {
                if (android.os.Build$VERSION.SDK_INT < 23) {
                    if (android.os.Build$VERSION.SDK_INT < 21) {
                        this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplBase(this.mToken);
                    } else {
                        this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21(p3, p4);
                    }
                } else {
                    this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi23(p3, p4);
                }
            } else {
                this.mImpl = new android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi24(p3, p4);
            }
            return;
        } else {
            throw new IllegalArgumentException("session must not be null");
        }
    }

    public void adjustVolume(int p2, int p3)
    {
        this.mImpl.adjustVolume(p2, p3);
        return;
    }

    public boolean dispatchMediaButtonEvent(android.view.KeyEvent p3)
    {
        if (p3 != null) {
            return this.mImpl.dispatchMediaButtonEvent(p3);
        } else {
            throw new IllegalArgumentException("KeyEvent may not be null");
        }
    }

    public android.os.Bundle getExtras()
    {
        return this.mImpl.getExtras();
    }

    public long getFlags()
    {
        return this.mImpl.getFlags();
    }

    public Object getMediaController()
    {
        return this.mImpl.getMediaController();
    }

    public android.support.v4.media.MediaMetadataCompat getMetadata()
    {
        return this.mImpl.getMetadata();
    }

    public String getPackageName()
    {
        return this.mImpl.getPackageName();
    }

    public android.support.v4.media.session.MediaControllerCompat$PlaybackInfo getPlaybackInfo()
    {
        return this.mImpl.getPlaybackInfo();
    }

    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    {
        return this.mImpl.getPlaybackState();
    }

    public java.util.List getQueue()
    {
        return this.mImpl.getQueue();
    }

    public CharSequence getQueueTitle()
    {
        return this.mImpl.getQueueTitle();
    }

    public int getRatingType()
    {
        return this.mImpl.getRatingType();
    }

    public android.app.PendingIntent getSessionActivity()
    {
        return this.mImpl.getSessionActivity();
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mToken;
    }

    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    {
        return this.mImpl.getTransportControls();
    }

    public void registerCallback(android.support.v4.media.session.MediaControllerCompat$Callback p2)
    {
        this.registerCallback(p2, 0);
        return;
    }

    public void registerCallback(android.support.v4.media.session.MediaControllerCompat$Callback p3, android.os.Handler p4)
    {
        if (p3 != null) {
            if (p4 == null) {
                p4 = new android.os.Handler();
            }
            this.mImpl.registerCallback(p3, p4);
            return;
        } else {
            throw new IllegalArgumentException("callback cannot be null");
        }
    }

    public void sendCommand(String p3, android.os.Bundle p4, android.os.ResultReceiver p5)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            this.mImpl.sendCommand(p3, p4, p5);
            return;
        } else {
            throw new IllegalArgumentException("command cannot be null or empty");
        }
    }

    public void setVolumeTo(int p2, int p3)
    {
        this.mImpl.setVolumeTo(p2, p3);
        return;
    }

    public void unregisterCallback(android.support.v4.media.session.MediaControllerCompat$Callback p3)
    {
        if (p3 != null) {
            this.mImpl.unregisterCallback(p3);
            return;
        } else {
            throw new IllegalArgumentException("callback cannot be null");
        }
    }
}
package android.support.v4.media.session;
public interface MediaControllerCompatApi21$Callback {

    public abstract void onAudioInfoChanged();

    public abstract void onExtrasChanged();

    public abstract void onMetadataChanged();

    public abstract void onPlaybackStateChanged();

    public abstract void onQueueChanged();

    public abstract void onQueueTitleChanged();

    public abstract void onSessionDestroyed();

    public abstract void onSessionEvent();
}
package android.support.v4.media.session;
 class MediaControllerCompatApi21$CallbackProxy extends android.media.session.MediaController$Callback {
    protected final android.support.v4.media.session.MediaControllerCompatApi21$Callback mCallback;

    public MediaControllerCompatApi21$CallbackProxy(android.support.v4.media.session.MediaControllerCompatApi21$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo p7)
    {
        this.mCallback.onAudioInfoChanged(p7.getPlaybackType(), android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getLegacyAudioStream(p7), p7.getVolumeControl(), p7.getMaxVolume(), p7.getCurrentVolume());
        return;
    }

    public void onExtrasChanged(android.os.Bundle p2)
    {
        this.mCallback.onExtrasChanged(p2);
        return;
    }

    public void onMetadataChanged(android.media.MediaMetadata p2)
    {
        this.mCallback.onMetadataChanged(p2);
        return;
    }

    public void onPlaybackStateChanged(android.media.session.PlaybackState p2)
    {
        this.mCallback.onPlaybackStateChanged(p2);
        return;
    }

    public void onQueueChanged(java.util.List p2)
    {
        this.mCallback.onQueueChanged(p2);
        return;
    }

    public void onQueueTitleChanged(CharSequence p2)
    {
        this.mCallback.onQueueTitleChanged(p2);
        return;
    }

    public void onSessionDestroyed()
    {
        this.mCallback.onSessionDestroyed();
        return;
    }

    public void onSessionEvent(String p2, android.os.Bundle p3)
    {
        this.mCallback.onSessionEvent(p2, p3);
        return;
    }
}
package android.support.v4.media.session;
public class MediaControllerCompatApi21$PlaybackInfo {
    private static final int FLAG_SCO = 4;
    private static final int STREAM_BLUETOOTH_SCO = 6;
    private static final int STREAM_SYSTEM_ENFORCED = 7;

    public MediaControllerCompatApi21$PlaybackInfo()
    {
        return;
    }

    public static android.media.AudioAttributes getAudioAttributes(Object p1)
    {
        return ((android.media.session.MediaController$PlaybackInfo) p1).getAudioAttributes();
    }

    public static int getCurrentVolume(Object p1)
    {
        return ((android.media.session.MediaController$PlaybackInfo) p1).getCurrentVolume();
    }

    public static int getLegacyAudioStream(Object p2)
    {
        return android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.toLegacyStreamType(android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getAudioAttributes(p2));
    }

    public static int getMaxVolume(Object p1)
    {
        return ((android.media.session.MediaController$PlaybackInfo) p1).getMaxVolume();
    }

    public static int getPlaybackType(Object p1)
    {
        return ((android.media.session.MediaController$PlaybackInfo) p1).getPlaybackType();
    }

    public static int getVolumeControl(Object p1)
    {
        return ((android.media.session.MediaController$PlaybackInfo) p1).getVolumeControl();
    }

    private static int toLegacyStreamType(android.media.AudioAttributes p4)
    {
        int v0 = 3;
        if ((p4.getFlags() & 1) != 1) {
            if ((p4.getFlags() & 4) != 4) {
                switch (p4.getUsage()) {
                    case 1:
                    case 11:
                    case 12:
                    case 14:
                        break;
                    case 2:
                        v0 = 0;
                        break;
                    case 3:
                        v0 = 8;
                        break;
                    case 4:
                        v0 = 4;
                        break;
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        v0 = 5;
                        break;
                    case 6:
                        v0 = 2;
                        break;
                    case 1:
                    case 11:
                    case 12:
                    case 14:
                        break;
                    case 1:
                    case 11:
                    case 12:
                    case 14:
                        break;
                    case 13:
                        v0 = 1;
                    case 1:
                    case 11:
                    case 12:
                    case 14:
                        break;
                    default:
                }
            } else {
                v0 = 6;
            }
        } else {
            v0 = 7;
        }
        return v0;
    }
}
package android.support.v4.media.session;
public class MediaControllerCompatApi21$TransportControls {

    public MediaControllerCompatApi21$TransportControls()
    {
        return;
    }

    public static void fastForward(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).fastForward();
        return;
    }

    public static void pause(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).pause();
        return;
    }

    public static void play(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).play();
        return;
    }

    public static void playFromMediaId(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).playFromMediaId(p1, p2);
        return;
    }

    public static void playFromSearch(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).playFromSearch(p1, p2);
        return;
    }

    public static void rewind(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).rewind();
        return;
    }

    public static void seekTo(Object p1, long p2)
    {
        ((android.media.session.MediaController$TransportControls) p1).seekTo(p2);
        return;
    }

    public static void sendCustomAction(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).sendCustomAction(p1, p2);
        return;
    }

    public static void setRating(Object p0, Object p1)
    {
        ((android.media.session.MediaController$TransportControls) p0).setRating(((android.media.Rating) p1));
        return;
    }

    public static void skipToNext(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).skipToNext();
        return;
    }

    public static void skipToPrevious(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).skipToPrevious();
        return;
    }

    public static void skipToQueueItem(Object p1, long p2)
    {
        ((android.media.session.MediaController$TransportControls) p1).skipToQueueItem(p2);
        return;
    }

    public static void stop(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).stop();
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompatApi21 {

    MediaControllerCompatApi21()
    {
        return;
    }

    public static void adjustVolume(Object p0, int p1, int p2)
    {
        ((android.media.session.MediaController) p0).adjustVolume(p1, p2);
        return;
    }

    public static Object createCallback(android.support.v4.media.session.MediaControllerCompatApi21$Callback p1)
    {
        return new android.support.v4.media.session.MediaControllerCompatApi21$CallbackProxy(p1);
    }

    public static boolean dispatchMediaButtonEvent(Object p1, android.view.KeyEvent p2)
    {
        return ((android.media.session.MediaController) p1).dispatchMediaButtonEvent(p2);
    }

    public static Object fromToken(android.content.Context p1, Object p2)
    {
        return new android.media.session.MediaController(p1, ((android.media.session.MediaSession$Token) p2));
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.media.session.MediaController) p1).getExtras();
    }

    public static long getFlags(Object p2)
    {
        return ((android.media.session.MediaController) p2).getFlags();
    }

    public static Object getMetadata(Object p1)
    {
        return ((android.media.session.MediaController) p1).getMetadata();
    }

    public static String getPackageName(Object p1)
    {
        return ((android.media.session.MediaController) p1).getPackageName();
    }

    public static Object getPlaybackInfo(Object p1)
    {
        return ((android.media.session.MediaController) p1).getPlaybackInfo();
    }

    public static Object getPlaybackState(Object p1)
    {
        return ((android.media.session.MediaController) p1).getPlaybackState();
    }

    public static java.util.List getQueue(Object p2)
    {
        java.util.ArrayList v1_1;
        java.util.List v0 = ((android.media.session.MediaController) p2).getQueue();
        if (v0 != null) {
            v1_1 = new java.util.ArrayList(v0);
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public static CharSequence getQueueTitle(Object p1)
    {
        return ((android.media.session.MediaController) p1).getQueueTitle();
    }

    public static int getRatingType(Object p1)
    {
        return ((android.media.session.MediaController) p1).getRatingType();
    }

    public static android.app.PendingIntent getSessionActivity(Object p1)
    {
        return ((android.media.session.MediaController) p1).getSessionActivity();
    }

    public static Object getTransportControls(Object p1)
    {
        return ((android.media.session.MediaController) p1).getTransportControls();
    }

    public static void registerCallback(Object p0, Object p1, android.os.Handler p2)
    {
        ((android.media.session.MediaController) p0).registerCallback(((android.media.session.MediaController$Callback) p1), p2);
        return;
    }

    public static void sendCommand(Object p0, String p1, android.os.Bundle p2, android.os.ResultReceiver p3)
    {
        ((android.media.session.MediaController) p0).sendCommand(p1, p2, p3);
        return;
    }

    public static void setVolumeTo(Object p0, int p1, int p2)
    {
        ((android.media.session.MediaController) p0).setVolumeTo(p1, p2);
        return;
    }

    public static void unregisterCallback(Object p0, Object p1)
    {
        ((android.media.session.MediaController) p0).unregisterCallback(((android.media.session.MediaController$Callback) p1));
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompatApi23 {

    MediaControllerCompatApi23()
    {
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompatApi24 {

    MediaControllerCompatApi24()
    {
        return;
    }
}
package android.support.v4.media.session;
public abstract class MediaSessionCompat$Callback {
    final Object mCallbackObj;

    public MediaSessionCompat$Callback()
    {
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    this.mCallbackObj = 0;
                } else {
                    this.mCallbackObj = android.support.v4.media.session.MediaSessionCompatApi21.createCallback(new android.support.v4.media.session.MediaSessionCompat$Callback$StubApi21(this));
                }
            } else {
                this.mCallbackObj = android.support.v4.media.session.MediaSessionCompatApi23.createCallback(new android.support.v4.media.session.MediaSessionCompat$Callback$StubApi23(this));
            }
        } else {
            this.mCallbackObj = android.support.v4.media.session.MediaSessionCompatApi24.createCallback(new android.support.v4.media.session.MediaSessionCompat$Callback$StubApi24(this));
        }
        return;
    }

    public void onCommand(String p1, android.os.Bundle p2, android.os.ResultReceiver p3)
    {
        return;
    }

    public void onCustomAction(String p1, android.os.Bundle p2)
    {
        return;
    }

    public void onFastForward()
    {
        return;
    }

    public boolean onMediaButtonEvent(android.content.Intent p2)
    {
        return 0;
    }

    public void onPause()
    {
        return;
    }

    public void onPlay()
    {
        return;
    }

    public void onPlayFromMediaId(String p1, android.os.Bundle p2)
    {
        return;
    }

    public void onPlayFromSearch(String p1, android.os.Bundle p2)
    {
        return;
    }

    public void onPlayFromUri(android.net.Uri p1, android.os.Bundle p2)
    {
        return;
    }

    public void onPrepare()
    {
        return;
    }

    public void onPrepareFromMediaId(String p1, android.os.Bundle p2)
    {
        return;
    }

    public void onPrepareFromSearch(String p1, android.os.Bundle p2)
    {
        return;
    }

    public void onPrepareFromUri(android.net.Uri p1, android.os.Bundle p2)
    {
        return;
    }

    public void onRewind()
    {
        return;
    }

    public void onSeekTo(long p1)
    {
        return;
    }

    public void onSetRating(android.support.v4.media.RatingCompat p1)
    {
        return;
    }

    public void onSkipToNext()
    {
        return;
    }

    public void onSkipToPrevious()
    {
        return;
    }

    public void onSkipToQueueItem(long p1)
    {
        return;
    }

    public void onStop()
    {
        return;
    }
}
package android.support.v4.media.session;
interface MediaSessionCompat$MediaSessionImpl {

    public abstract String getCallingPackage();

    public abstract Object getMediaSession();

    public abstract Object getRemoteControlClient();

    public abstract android.support.v4.media.session.MediaSessionCompat$Token getSessionToken();

    public abstract boolean isActive();

    public abstract void release();

    public abstract void sendSessionEvent();

    public abstract void setActive();

    public abstract void setCallback();

    public abstract void setExtras();

    public abstract void setFlags();

    public abstract void setMediaButtonReceiver();

    public abstract void setMetadata();

    public abstract void setPlaybackState();

    public abstract void setPlaybackToLocal();

    public abstract void setPlaybackToRemote();

    public abstract void setQueue();

    public abstract void setQueueTitle();

    public abstract void setRatingType();

    public abstract void setSessionActivity();
}
package android.support.v4.media.session;
final class MediaSessionCompat$MediaSessionImplBase$Command {
    public final String command;
    public final android.os.Bundle extras;
    public final android.os.ResultReceiver stub;

    public MediaSessionCompat$MediaSessionImplBase$Command(String p1, android.os.Bundle p2, android.os.ResultReceiver p3)
    {
        this.command = p1;
        this.extras = p2;
        this.stub = p3;
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplBase$MessageHandler extends android.os.Handler {
    private static final int KEYCODE_MEDIA_PAUSE = 127;
    private static final int KEYCODE_MEDIA_PLAY = 126;
    private static final int MSG_ADJUST_VOLUME = 2;
    private static final int MSG_COMMAND = 1;
    private static final int MSG_CUSTOM_ACTION = 20;
    private static final int MSG_FAST_FORWARD = 16;
    private static final int MSG_MEDIA_BUTTON = 21;
    private static final int MSG_NEXT = 14;
    private static final int MSG_PAUSE = 12;
    private static final int MSG_PLAY = 7;
    private static final int MSG_PLAY_MEDIA_ID = 8;
    private static final int MSG_PLAY_SEARCH = 9;
    private static final int MSG_PLAY_URI = 10;
    private static final int MSG_PREPARE = 3;
    private static final int MSG_PREPARE_MEDIA_ID = 4;
    private static final int MSG_PREPARE_SEARCH = 5;
    private static final int MSG_PREPARE_URI = 6;
    private static final int MSG_PREVIOUS = 15;
    private static final int MSG_RATE = 19;
    private static final int MSG_REWIND = 17;
    private static final int MSG_SEEK_TO = 18;
    private static final int MSG_SET_VOLUME = 22;
    private static final int MSG_SKIP_TO_ITEM = 11;
    private static final int MSG_STOP = 13;
    final synthetic android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase this$0;

    public MediaSessionCompat$MediaSessionImplBase$MessageHandler(android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase p1, android.os.Looper p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    private void onMediaButtonEvent(android.view.KeyEvent p11, android.support.v4.media.session.MediaSessionCompat$Callback p12)
    {
        long v0 = 1;
        if ((p11 != null) && (p11.getAction() == 0)) {
            long v4;
            if (this.this$0.mState != null) {
                v4 = this.this$0.mState.getActions();
            } else {
                v4 = 0;
            }
            switch (p11.getKeyCode()) {
                case 79:
                case 85:
                    if ((this.this$0.mState == null) || (this.this$0.mState.getState() != 3)) {
                        int v2 = 0;
                    } else {
                        v2 = 1;
                    }
                    long v1;
                    if ((516 & v4) == 0) {
                        v1 = 0;
                    } else {
                        v1 = 1;
                    }
                    if ((514 & v4) == 0) {
                        v0 = 0;
                    }
                    if ((v2 == 0) || (v0 == 0)) {
                        if ((v2 == 0) && (v1 != 0)) {
                            p12.onPlay();
                        }
                    } else {
                        p12.onPause();
                    }
                    break;
                case 86:
                    if ((1 & v4) != 0) {
                        p12.onStop();
                    }
                    break;
                case 87:
                    if ((32 & v4) != 0) {
                        p12.onSkipToNext();
                    }
                    break;
                case 88:
                    if ((16 & v4) != 0) {
                        p12.onSkipToPrevious();
                    }
                    break;
                case 89:
                    if ((8 & v4) != 0) {
                        p12.onRewind();
                    }
                    break;
                case 90:
                    if ((64 & v4) != 0) {
                        p12.onFastForward();
                    }
                    break;
                case 126:
                    if ((4 & v4) != 0) {
                        p12.onPlay();
                    }
                    break;
                case 127:
                    if ((2 & v4) != 0) {
                        p12.onPause();
                    }
                    break;
                default:
            }
        }
        return;
    }

    public void handleMessage(android.os.Message p8)
    {
        android.support.v4.media.session.MediaSessionCompat$Callback v0 = this.this$0.mCallback;
        if (v0 != null) {
            switch (p8.what) {
                case 1:
                    android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$Command v1_1 = ((android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$Command) p8.obj);
                    v0.onCommand(v1_1.command, v1_1.extras, v1_1.stub);
                    break;
                case 2:
                    this.this$0.adjustVolume(((Integer) p8.obj).intValue(), 0);
                    break;
                case 3:
                    v0.onPrepare();
                    break;
                case 4:
                    v0.onPrepareFromMediaId(((String) p8.obj), p8.getData());
                    break;
                case 5:
                    v0.onPrepareFromSearch(((String) p8.obj), p8.getData());
                    break;
                case 6:
                    v0.onPrepareFromUri(((android.net.Uri) p8.obj), p8.getData());
                    break;
                case 7:
                    v0.onPlay();
                    break;
                case 8:
                    v0.onPlayFromMediaId(((String) p8.obj), p8.getData());
                    break;
                case 9:
                    v0.onPlayFromSearch(((String) p8.obj), p8.getData());
                    break;
                case 10:
                    v0.onPlayFromUri(((android.net.Uri) p8.obj), p8.getData());
                    break;
                case 11:
                    v0.onSkipToQueueItem(((Long) p8.obj).longValue());
                    break;
                case 12:
                    v0.onPause();
                    break;
                case 13:
                    v0.onStop();
                    break;
                case 14:
                    v0.onSkipToNext();
                    break;
                case 15:
                    v0.onSkipToPrevious();
                    break;
                case 16:
                    v0.onFastForward();
                    break;
                case 17:
                    v0.onRewind();
                    break;
                case 18:
                    v0.onSeekTo(((Long) p8.obj).longValue());
                    break;
                case 19:
                    v0.onSetRating(((android.support.v4.media.RatingCompat) p8.obj));
                    break;
                case 20:
                    v0.onCustomAction(((String) p8.obj), p8.getData());
                    break;
                case 21:
                    android.view.KeyEvent v3_1 = ((android.view.KeyEvent) p8.obj);
                    android.content.Intent v2_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON");
                    v2_1.putExtra("android.intent.extra.KEY_EVENT", v3_1);
                    if (!v0.onMediaButtonEvent(v2_1)) {
                        this.onMediaButtonEvent(v3_1, v0);
                    }
                    break;
                case 22:
                    this.this$0.setVolumeTo(((Integer) p8.obj).intValue(), 0);
                    break;
                default:
            }
        }
        return;
    }

    public void post(int p2)
    {
        this.post(p2, 0);
        return;
    }

    public void post(int p2, Object p3)
    {
        this.obtainMessage(p2, p3).sendToTarget();
        return;
    }

    public void post(int p2, Object p3, int p4)
    {
        this.obtainMessage(p2, p4, 0, p3).sendToTarget();
        return;
    }

    public void post(int p2, Object p3, android.os.Bundle p4)
    {
        android.os.Message v0 = this.obtainMessage(p2, p3);
        v0.setData(p4);
        v0.sendToTarget();
        return;
    }
}
package android.support.v4.media.session;
public interface MediaSessionCompat$OnActiveChangeListener {

    public abstract void onActiveChanged();
}
package android.support.v4.media.session;
final class MediaSessionCompat$QueueItem$1 implements android.os.Parcelable$Creator {

    MediaSessionCompat$QueueItem$1()
    {
        return;
    }

    public android.support.v4.media.session.MediaSessionCompat$QueueItem createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.session.MediaSessionCompat$QueueItem(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.MediaSessionCompat$QueueItem[] newArray(int p2)
    {
        android.support.v4.media.session.MediaSessionCompat$QueueItem[] v0 = new android.support.v4.media.session.MediaSessionCompat$QueueItem[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
public final class MediaSessionCompat$QueueItem implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR = None;
    public static final int UNKNOWN_ID = 255;
    private final android.support.v4.media.MediaDescriptionCompat mDescription;
    private final long mId;
    private Object mItem;

    static MediaSessionCompat$QueueItem()
    {
        android.support.v4.media.session.MediaSessionCompat$QueueItem.CREATOR = new android.support.v4.media.session.MediaSessionCompat$QueueItem$1();
        return;
    }

    MediaSessionCompat$QueueItem(android.os.Parcel p3)
    {
        this.mDescription = ((android.support.v4.media.MediaDescriptionCompat) android.support.v4.media.MediaDescriptionCompat.CREATOR.createFromParcel(p3));
        this.mId = p3.readLong();
        return;
    }

    public MediaSessionCompat$QueueItem(android.support.v4.media.MediaDescriptionCompat p3, long p4)
    {
        this(0, p3, p4);
        return;
    }

    private MediaSessionCompat$QueueItem(Object p4, android.support.v4.media.MediaDescriptionCompat p5, long p6)
    {
        if (p5 != null) {
            if (p6 != -1) {
                this.mDescription = p5;
                this.mId = p6;
                this.mItem = p4;
                return;
            } else {
                throw new IllegalArgumentException("Id cannot be QueueItem.UNKNOWN_ID");
            }
        } else {
            throw new IllegalArgumentException("Description cannot be null.");
        }
    }

    public static android.support.v4.media.session.MediaSessionCompat$QueueItem fromQueueItem(Object p6)
    {
        if ((p6 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.support.v4.media.session.MediaSessionCompat$QueueItem v4_2 = new android.support.v4.media.session.MediaSessionCompat$QueueItem(p6, android.support.v4.media.MediaDescriptionCompat.fromMediaDescription(android.support.v4.media.session.MediaSessionCompatApi21$QueueItem.getDescription(p6)), android.support.v4.media.session.MediaSessionCompatApi21$QueueItem.getQueueId(p6));
        } else {
            v4_2 = 0;
        }
        return v4_2;
    }

    public static java.util.List fromQueueItemList(java.util.List p4)
    {
        if ((p4 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            java.util.ArrayList v1_0 = new java.util.ArrayList();
            java.util.Iterator v2_1 = p4.iterator();
            while (v2_1.hasNext()) {
                v1_0.add(android.support.v4.media.session.MediaSessionCompat$QueueItem.fromQueueItem(v2_1.next()));
            }
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    public static android.support.v4.media.session.MediaSessionCompat$QueueItem obtain(Object p1)
    {
        return android.support.v4.media.session.MediaSessionCompat$QueueItem.fromQueueItem(p1);
    }

    public int describeContents()
    {
        return 0;
    }

    public android.support.v4.media.MediaDescriptionCompat getDescription()
    {
        return this.mDescription;
    }

    public long getQueueId()
    {
        return this.mId;
    }

    public Object getQueueItem()
    {
        if ((this.mItem == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            this.mItem = android.support.v4.media.session.MediaSessionCompatApi21$QueueItem.createItem(this.mDescription.getMediaDescription(), this.mId);
            Object v0_2 = this.mItem;
        } else {
            v0_2 = this.mItem;
        }
        return v0_2;
    }

    public String toString()
    {
        return new StringBuilder().append("MediaSession.QueueItem {Description=").append(this.mDescription).append(", Id=").append(this.mId).append(" }").toString();
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        this.mDescription.writeToParcel(p3, p4);
        p3.writeLong(this.mId);
        return;
    }
}
package android.support.v4.media.session;
final class MediaSessionCompat$ResultReceiverWrapper$1 implements android.os.Parcelable$Creator {

    MediaSessionCompat$ResultReceiverWrapper$1()
    {
        return;
    }

    public android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper[] newArray(int p2)
    {
        android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper[] v0 = new android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
final class MediaSessionCompat$ResultReceiverWrapper implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    private android.os.ResultReceiver mResultReceiver;

    static MediaSessionCompat$ResultReceiverWrapper()
    {
        android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper.CREATOR = new android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper$1();
        return;
    }

    MediaSessionCompat$ResultReceiverWrapper(android.os.Parcel p2)
    {
        this.mResultReceiver = ((android.os.ResultReceiver) android.os.ResultReceiver.CREATOR.createFromParcel(p2));
        return;
    }

    public MediaSessionCompat$ResultReceiverWrapper(android.os.ResultReceiver p1)
    {
        this.mResultReceiver = p1;
        return;
    }

    static synthetic android.os.ResultReceiver access$000(android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper p1)
    {
        return p1.mResultReceiver;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        this.mResultReceiver.writeToParcel(p2, p3);
        return;
    }
}
package android.support.v4.media.session;
public interface annotation MediaSessionCompat$SessionFlags implements java.lang.annotation.Annotation {
}
package android.support.v4.media.session;
final class MediaSessionCompat$Token$1 implements android.os.Parcelable$Creator {

    MediaSessionCompat$Token$1()
    {
        return;
    }

    public android.support.v4.media.session.MediaSessionCompat$Token createFromParcel(android.os.Parcel p4)
    {
        android.os.IBinder v0;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0 = p4.readStrongBinder();
        } else {
            v0 = p4.readParcelable(0);
        }
        return new android.support.v4.media.session.MediaSessionCompat$Token(v0);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.MediaSessionCompat$Token[] newArray(int p2)
    {
        android.support.v4.media.session.MediaSessionCompat$Token[] v0 = new android.support.v4.media.session.MediaSessionCompat$Token[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
public final class MediaSessionCompat$Token implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    private final Object mInner;

    static MediaSessionCompat$Token()
    {
        android.support.v4.media.session.MediaSessionCompat$Token.CREATOR = new android.support.v4.media.session.MediaSessionCompat$Token$1();
        return;
    }

    MediaSessionCompat$Token(Object p1)
    {
        this.mInner = p1;
        return;
    }

    public static android.support.v4.media.session.MediaSessionCompat$Token fromToken(Object p2)
    {
        if ((p2 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.support.v4.media.session.MediaSessionCompat$Token v0_2 = new android.support.v4.media.session.MediaSessionCompat$Token(android.support.v4.media.session.MediaSessionCompatApi21.verifyToken(p2));
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public int describeContents()
    {
        return 0;
    }

    public boolean equals(Object p5)
    {
        boolean v1_0 = 1;
        if (this != p5) {
            if ((p5 instanceof android.support.v4.media.session.MediaSessionCompat$Token)) {
                if (this.mInner != null) {
                    if (((android.support.v4.media.session.MediaSessionCompat$Token) p5).mInner != null) {
                        v1_0 = this.mInner.equals(((android.support.v4.media.session.MediaSessionCompat$Token) p5).mInner);
                    } else {
                        v1_0 = 0;
                    }
                } else {
                    if (((android.support.v4.media.session.MediaSessionCompat$Token) p5).mInner != null) {
                        v1_0 = 0;
                    }
                }
            } else {
                v1_0 = 0;
            }
        }
        return v1_0;
    }

    public Object getToken()
    {
        return this.mInner;
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mInner != null) {
            v0_2 = this.mInner.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        if (android.os.Build$VERSION.SDK_INT < 21) {
            p3.writeStrongBinder(((android.os.IBinder) this.mInner));
        } else {
            p3.writeParcelable(((android.os.Parcelable) this.mInner), p4);
        }
        return;
    }
}
package android.support.v4.media.session;
public class MediaSessionCompat {
    static final String ACTION_ARGUMENT_EXTRAS = "android.support.v4.media.session.action.ARGUMENT_EXTRAS";
    static final String ACTION_ARGUMENT_MEDIA_ID = "android.support.v4.media.session.action.ARGUMENT_MEDIA_ID";
    static final String ACTION_ARGUMENT_QUERY = "android.support.v4.media.session.action.ARGUMENT_QUERY";
    static final String ACTION_ARGUMENT_URI = "android.support.v4.media.session.action.ARGUMENT_URI";
    static final String ACTION_PLAY_FROM_URI = "android.support.v4.media.session.action.PLAY_FROM_URI";
    static final String ACTION_PREPARE = "android.support.v4.media.session.action.PREPARE";
    static final String ACTION_PREPARE_FROM_MEDIA_ID = "android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID";
    static final String ACTION_PREPARE_FROM_SEARCH = "android.support.v4.media.session.action.PREPARE_FROM_SEARCH";
    static final String ACTION_PREPARE_FROM_URI = "android.support.v4.media.session.action.PREPARE_FROM_URI";
    public static final int FLAG_HANDLES_MEDIA_BUTTONS = 1;
    public static final int FLAG_HANDLES_TRANSPORT_CONTROLS = 2;
    private static final int MAX_BITMAP_SIZE_IN_DP = 320;
    static final String TAG = "MediaSessionCompat";
    static int sMaxBitmapSize;
    private final java.util.ArrayList mActiveListeners;
    private final android.support.v4.media.session.MediaControllerCompat mController;
    private final android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl mImpl;

    private MediaSessionCompat(android.content.Context p2, android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl p3)
    {
        this.mActiveListeners = new java.util.ArrayList();
        this.mImpl = p3;
        this.mController = new android.support.v4.media.session.MediaControllerCompat(p2, this);
        return;
    }

    public MediaSessionCompat(android.content.Context p2, String p3)
    {
        this(p2, p3, 0, 0);
        return;
    }

    public MediaSessionCompat(android.content.Context p4, String p5, android.content.ComponentName p6, android.app.PendingIntent p7)
    {
        this.mActiveListeners = new java.util.ArrayList();
        if (p4 != null) {
            if (!android.text.TextUtils.isEmpty(p5)) {
                if (android.os.Build$VERSION.SDK_INT < 21) {
                    this.mImpl = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase(p4, p5, p6, p7);
                } else {
                    this.mImpl = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi21(p4, p5);
                }
                this.mController = new android.support.v4.media.session.MediaControllerCompat(p4, this);
                if (android.support.v4.media.session.MediaSessionCompat.sMaxBitmapSize == 0) {
                    android.support.v4.media.session.MediaSessionCompat.sMaxBitmapSize = ((int) android.util.TypedValue.applyDimension(1, 1134559232, p4.getResources().getDisplayMetrics()));
                }
                return;
            } else {
                throw new IllegalArgumentException("tag must not be null or empty");
            }
        } else {
            throw new IllegalArgumentException("context must not be null");
        }
    }

    public static android.support.v4.media.session.MediaSessionCompat fromMediaSession(android.content.Context p2, Object p3)
    {
        if ((p2 != null) && ((p3 != null) && (android.os.Build$VERSION.SDK_INT >= 21))) {
            android.support.v4.media.session.MediaSessionCompat v0_2 = new android.support.v4.media.session.MediaSessionCompat(p2, new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplApi21(p3));
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public static android.support.v4.media.session.MediaSessionCompat obtain(android.content.Context p1, Object p2)
    {
        return android.support.v4.media.session.MediaSessionCompat.fromMediaSession(p1, p2);
    }

    public void addOnActiveChangeListener(android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener p3)
    {
        if (p3 != null) {
            this.mActiveListeners.add(p3);
            return;
        } else {
            throw new IllegalArgumentException("Listener may not be null");
        }
    }

    public String getCallingPackage()
    {
        return this.mImpl.getCallingPackage();
    }

    public android.support.v4.media.session.MediaControllerCompat getController()
    {
        return this.mController;
    }

    public Object getMediaSession()
    {
        return this.mImpl.getMediaSession();
    }

    public Object getRemoteControlClient()
    {
        return this.mImpl.getRemoteControlClient();
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mImpl.getSessionToken();
    }

    public boolean isActive()
    {
        return this.mImpl.isActive();
    }

    public void release()
    {
        this.mImpl.release();
        return;
    }

    public void removeOnActiveChangeListener(android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener p3)
    {
        if (p3 != null) {
            this.mActiveListeners.remove(p3);
            return;
        } else {
            throw new IllegalArgumentException("Listener may not be null");
        }
    }

    public void sendSessionEvent(String p3, android.os.Bundle p4)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            this.mImpl.sendSessionEvent(p3, p4);
            return;
        } else {
            throw new IllegalArgumentException("event cannot be null or empty");
        }
    }

    public void setActive(boolean p4)
    {
        this.mImpl.setActive(p4);
        java.util.Iterator v1_2 = this.mActiveListeners.iterator();
        while (v1_2.hasNext()) {
            ((android.support.v4.media.session.MediaSessionCompat$OnActiveChangeListener) v1_2.next()).onActiveChanged();
        }
        return;
    }

    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback p2)
    {
        this.setCallback(p2, 0);
        return;
    }

    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback p2, android.os.Handler p3)
    {
        android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl v0 = this.mImpl;
        if (p3 == null) {
            p3 = new android.os.Handler();
        }
        v0.setCallback(p2, p3);
        return;
    }

    public void setExtras(android.os.Bundle p2)
    {
        this.mImpl.setExtras(p2);
        return;
    }

    public void setFlags(int p2)
    {
        this.mImpl.setFlags(p2);
        return;
    }

    public void setMediaButtonReceiver(android.app.PendingIntent p2)
    {
        this.mImpl.setMediaButtonReceiver(p2);
        return;
    }

    public void setMetadata(android.support.v4.media.MediaMetadataCompat p2)
    {
        this.mImpl.setMetadata(p2);
        return;
    }

    public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat p2)
    {
        this.mImpl.setPlaybackState(p2);
        return;
    }

    public void setPlaybackToLocal(int p2)
    {
        this.mImpl.setPlaybackToLocal(p2);
        return;
    }

    public void setPlaybackToRemote(android.support.v4.media.VolumeProviderCompat p3)
    {
        if (p3 != null) {
            this.mImpl.setPlaybackToRemote(p3);
            return;
        } else {
            throw new IllegalArgumentException("volumeProvider may not be null!");
        }
    }

    public void setQueue(java.util.List p2)
    {
        this.mImpl.setQueue(p2);
        return;
    }

    public void setQueueTitle(CharSequence p2)
    {
        this.mImpl.setQueueTitle(p2);
        return;
    }

    public void setRatingType(int p2)
    {
        this.mImpl.setRatingType(p2);
        return;
    }

    public void setSessionActivity(android.app.PendingIntent p2)
    {
        this.mImpl.setSessionActivity(p2);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi14 {
    private static final long ACTION_FAST_FORWARD = 64;
    private static final long ACTION_PAUSE = 2;
    private static final long ACTION_PLAY = 4;
    private static final long ACTION_PLAY_PAUSE = 512;
    private static final long ACTION_REWIND = 8;
    private static final long ACTION_SKIP_TO_NEXT = 32;
    private static final long ACTION_SKIP_TO_PREVIOUS = 16;
    private static final long ACTION_STOP = 1;
    private static final String METADATA_KEY_ALBUM = "android.media.metadata.ALBUM";
    private static final String METADATA_KEY_ALBUM_ART = "android.media.metadata.ALBUM_ART";
    private static final String METADATA_KEY_ALBUM_ARTIST = "android.media.metadata.ALBUM_ARTIST";
    private static final String METADATA_KEY_ART = "android.media.metadata.ART";
    private static final String METADATA_KEY_ARTIST = "android.media.metadata.ARTIST";
    private static final String METADATA_KEY_AUTHOR = "android.media.metadata.AUTHOR";
    private static final String METADATA_KEY_COMPILATION = "android.media.metadata.COMPILATION";
    private static final String METADATA_KEY_COMPOSER = "android.media.metadata.COMPOSER";
    private static final String METADATA_KEY_DATE = "android.media.metadata.DATE";
    private static final String METADATA_KEY_DISC_NUMBER = "android.media.metadata.DISC_NUMBER";
    private static final String METADATA_KEY_DURATION = "android.media.metadata.DURATION";
    private static final String METADATA_KEY_GENRE = "android.media.metadata.GENRE";
    private static final String METADATA_KEY_TITLE = "android.media.metadata.TITLE";
    private static final String METADATA_KEY_TRACK_NUMBER = "android.media.metadata.TRACK_NUMBER";
    private static final String METADATA_KEY_WRITER = "android.media.metadata.WRITER";
    static final int RCC_PLAYSTATE_NONE = 0;
    static final int STATE_BUFFERING = 6;
    static final int STATE_CONNECTING = 8;
    static final int STATE_ERROR = 7;
    static final int STATE_FAST_FORWARDING = 4;
    static final int STATE_NONE = 0;
    static final int STATE_PAUSED = 2;
    static final int STATE_PLAYING = 3;
    static final int STATE_REWINDING = 5;
    static final int STATE_SKIPPING_TO_NEXT = 10;
    static final int STATE_SKIPPING_TO_PREVIOUS = 9;
    static final int STATE_SKIPPING_TO_QUEUE_ITEM = 11;
    static final int STATE_STOPPED = 1;

    MediaSessionCompatApi14()
    {
        return;
    }

    static void buildOldMetadata(android.os.Bundle p4, android.media.RemoteControlClient$MetadataEditor p5)
    {
        if (p4 != null) {
            if (!p4.containsKey("android.media.metadata.ART")) {
                if (p4.containsKey("android.media.metadata.ALBUM_ART")) {
                    p5.putBitmap(100, ((android.graphics.Bitmap) p4.getParcelable("android.media.metadata.ALBUM_ART")));
                }
            } else {
                p5.putBitmap(100, ((android.graphics.Bitmap) p4.getParcelable("android.media.metadata.ART")));
            }
            if (p4.containsKey("android.media.metadata.ALBUM")) {
                p5.putString(1, p4.getString("android.media.metadata.ALBUM"));
            }
            if (p4.containsKey("android.media.metadata.ALBUM_ARTIST")) {
                p5.putString(13, p4.getString("android.media.metadata.ALBUM_ARTIST"));
            }
            if (p4.containsKey("android.media.metadata.ARTIST")) {
                p5.putString(2, p4.getString("android.media.metadata.ARTIST"));
            }
            if (p4.containsKey("android.media.metadata.AUTHOR")) {
                p5.putString(3, p4.getString("android.media.metadata.AUTHOR"));
            }
            if (p4.containsKey("android.media.metadata.COMPILATION")) {
                p5.putString(15, p4.getString("android.media.metadata.COMPILATION"));
            }
            if (p4.containsKey("android.media.metadata.COMPOSER")) {
                p5.putString(4, p4.getString("android.media.metadata.COMPOSER"));
            }
            if (p4.containsKey("android.media.metadata.DATE")) {
                p5.putString(5, p4.getString("android.media.metadata.DATE"));
            }
            if (p4.containsKey("android.media.metadata.DISC_NUMBER")) {
                p5.putLong(14, p4.getLong("android.media.metadata.DISC_NUMBER"));
            }
            if (p4.containsKey("android.media.metadata.DURATION")) {
                p5.putLong(9, p4.getLong("android.media.metadata.DURATION"));
            }
            if (p4.containsKey("android.media.metadata.GENRE")) {
                p5.putString(6, p4.getString("android.media.metadata.GENRE"));
            }
            if (p4.containsKey("android.media.metadata.TITLE")) {
                p5.putString(7, p4.getString("android.media.metadata.TITLE"));
            }
            if (p4.containsKey("android.media.metadata.TRACK_NUMBER")) {
                p5.putLong(0, p4.getLong("android.media.metadata.TRACK_NUMBER"));
            }
            if (p4.containsKey("android.media.metadata.WRITER")) {
                p5.putString(11, p4.getString("android.media.metadata.WRITER"));
            }
        }
        return;
    }

    public static Object createRemoteControlClient(android.app.PendingIntent p1)
    {
        return new android.media.RemoteControlClient(p1);
    }

    static int getRccStateFromState(int p1)
    {
        int v0;
        switch (p1) {
            case 0:
                v0 = 0;
                break;
            case 1:
                v0 = 1;
                break;
            case 2:
                v0 = 2;
                break;
            case 3:
                v0 = 3;
                break;
            case 4:
                v0 = 4;
                break;
            case 5:
                v0 = 5;
                break;
            case 6:
            case 8:
                v0 = 8;
                break;
            case 7:
                v0 = 9;
                break;
            case 9:
                v0 = 7;
                break;
            case 10:
            case 11:
                v0 = 6;
                break;
            default:
                v0 = -1;
        }
        return v0;
    }

    static int getRccTransportControlFlagsFromActions(long p6)
    {
        int v0 = 0;
        if ((1 & p6) != 0) {
            v0 = (0 | 32);
        }
        if ((2 & p6) != 0) {
            v0 |= 16;
        }
        if ((4 & p6) != 0) {
            v0 |= 4;
        }
        if ((8 & p6) != 0) {
            v0 |= 2;
        }
        if ((16 & p6) != 0) {
            v0 |= 1;
        }
        if ((32 & p6) != 0) {
            v0 |= 128;
        }
        if ((64 & p6) != 0) {
            v0 |= 64;
        }
        if ((512 & p6) != 0) {
            v0 |= 8;
        }
        return v0;
    }

    public static void registerRemoteControlClient(android.content.Context p2, Object p3)
    {
        ((android.media.AudioManager) p2.getSystemService("audio")).registerRemoteControlClient(((android.media.RemoteControlClient) p3));
        return;
    }

    public static void setMetadata(Object p2, android.os.Bundle p3)
    {
        android.media.RemoteControlClient$MetadataEditor v0 = ((android.media.RemoteControlClient) p2).editMetadata(1);
        android.support.v4.media.session.MediaSessionCompatApi14.buildOldMetadata(p3, v0);
        v0.apply();
        return;
    }

    public static void setState(Object p1, int p2)
    {
        ((android.media.RemoteControlClient) p1).setPlaybackState(android.support.v4.media.session.MediaSessionCompatApi14.getRccStateFromState(p2));
        return;
    }

    public static void setTransportControlFlags(Object p1, long p2)
    {
        ((android.media.RemoteControlClient) p1).setTransportControlFlags(android.support.v4.media.session.MediaSessionCompatApi14.getRccTransportControlFlagsFromActions(p2));
        return;
    }

    public static void unregisterRemoteControlClient(android.content.Context p2, Object p3)
    {
        ((android.media.AudioManager) p2.getSystemService("audio")).unregisterRemoteControlClient(((android.media.RemoteControlClient) p3));
        return;
    }
}
package android.support.v4.media.session;
interface MediaSessionCompatApi18$Callback {

    public abstract void onSeekTo();
}
package android.support.v4.media.session;
 class MediaSessionCompatApi18$OnPlaybackPositionUpdateListener implements android.media.RemoteControlClient$OnPlaybackPositionUpdateListener {
    protected final android.support.v4.media.session.MediaSessionCompatApi18$Callback mCallback;

    public MediaSessionCompatApi18$OnPlaybackPositionUpdateListener(android.support.v4.media.session.MediaSessionCompatApi18$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void onPlaybackPositionUpdate(long p2)
    {
        this.mCallback.onSeekTo(p2);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi18 {
    private static final long ACTION_SEEK_TO = 256;
    private static final String TAG = "MediaSessionCompatApi18";
    private static boolean sIsMbrPendingIntentSupported;

    static MediaSessionCompatApi18()
    {
        android.support.v4.media.session.MediaSessionCompatApi18.sIsMbrPendingIntentSupported = 1;
        return;
    }

    MediaSessionCompatApi18()
    {
        return;
    }

    public static Object createPlaybackPositionUpdateListener(android.support.v4.media.session.MediaSessionCompatApi18$Callback p1)
    {
        return new android.support.v4.media.session.MediaSessionCompatApi18$OnPlaybackPositionUpdateListener(p1);
    }

    static int getRccTransportControlFlagsFromActions(long p6)
    {
        int v0 = android.support.v4.media.session.MediaSessionCompatApi14.getRccTransportControlFlagsFromActions(p6);
        if ((256 & p6) != 0) {
            v0 |= 256;
        }
        return v0;
    }

    public static void registerMediaButtonEventReceiver(android.content.Context p4, android.app.PendingIntent p5, android.content.ComponentName p6)
    {
        android.media.AudioManager v0_1 = ((android.media.AudioManager) p4.getSystemService("audio"));
        if (android.support.v4.media.session.MediaSessionCompatApi18.sIsMbrPendingIntentSupported) {
            try {
                v0_1.registerMediaButtonEventReceiver(p5);
            } catch (NullPointerException v1) {
                android.util.Log.w("MediaSessionCompatApi18", "Unable to register media button event receiver with PendingIntent, falling back to ComponentName.");
                android.support.v4.media.session.MediaSessionCompatApi18.sIsMbrPendingIntentSupported = 0;
            }
        }
        if (!android.support.v4.media.session.MediaSessionCompatApi18.sIsMbrPendingIntentSupported) {
            v0_1.registerMediaButtonEventReceiver(p6);
        }
        return;
    }

    public static void setOnPlaybackPositionUpdateListener(Object p0, Object p1)
    {
        ((android.media.RemoteControlClient) p0).setPlaybackPositionUpdateListener(((android.media.RemoteControlClient$OnPlaybackPositionUpdateListener) p1));
        return;
    }

    public static void setState(Object p8, int p9, long p10, float p12, long p13)
    {
        long v0 = android.os.SystemClock.elapsedRealtime();
        if ((p9 == 3) && (p10 > 0)) {
            long v2 = 0;
            if (p13 > 0) {
                v2 = (v0 - p13);
                if ((p12 > 0) && (p12 != 1065353216)) {
                    v2 = ((long) (((float) v2) * p12));
                }
            }
            p10 += v2;
        }
        ((android.media.RemoteControlClient) p8).setPlaybackState(android.support.v4.media.session.MediaSessionCompatApi14.getRccStateFromState(p9), p10, p12);
        return;
    }

    public static void setTransportControlFlags(Object p1, long p2)
    {
        ((android.media.RemoteControlClient) p1).setTransportControlFlags(android.support.v4.media.session.MediaSessionCompatApi18.getRccTransportControlFlagsFromActions(p2));
        return;
    }

    public static void unregisterMediaButtonEventReceiver(android.content.Context p2, android.app.PendingIntent p3, android.content.ComponentName p4)
    {
        android.media.AudioManager v0_1 = ((android.media.AudioManager) p2.getSystemService("audio"));
        if (!android.support.v4.media.session.MediaSessionCompatApi18.sIsMbrPendingIntentSupported) {
            v0_1.unregisterMediaButtonEventReceiver(p4);
        } else {
            v0_1.unregisterMediaButtonEventReceiver(p3);
        }
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi19$OnMetadataUpdateListener implements android.media.RemoteControlClient$OnMetadataUpdateListener {
    protected final android.support.v4.media.session.MediaSessionCompatApi19$Callback mCallback;

    public MediaSessionCompatApi19$OnMetadataUpdateListener(android.support.v4.media.session.MediaSessionCompatApi19$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void onMetadataUpdate(int p2, Object p3)
    {
        if ((p2 == 268435457) && ((p3 instanceof android.media.Rating))) {
            this.mCallback.onSetRating(p3);
        }
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi19 {
    private static final long ACTION_SET_RATING = 128;
    private static final String METADATA_KEY_RATING = "android.media.metadata.RATING";
    private static final String METADATA_KEY_USER_RATING = "android.media.metadata.USER_RATING";
    private static final String METADATA_KEY_YEAR = "android.media.metadata.YEAR";

    MediaSessionCompatApi19()
    {
        return;
    }

    static void addNewMetadata(android.os.Bundle p4, android.media.RemoteControlClient$MetadataEditor p5)
    {
        if (p4 != null) {
            if (p4.containsKey("android.media.metadata.YEAR")) {
                p5.putLong(8, p4.getLong("android.media.metadata.YEAR"));
            }
            if (p4.containsKey("android.media.metadata.RATING")) {
                p5.putObject(101, p4.getParcelable("android.media.metadata.RATING"));
            }
            if (p4.containsKey("android.media.metadata.USER_RATING")) {
                p5.putObject(268435457, p4.getParcelable("android.media.metadata.USER_RATING"));
            }
        }
        return;
    }

    public static Object createMetadataUpdateListener(android.support.v4.media.session.MediaSessionCompatApi19$Callback p1)
    {
        return new android.support.v4.media.session.MediaSessionCompatApi19$OnMetadataUpdateListener(p1);
    }

    static int getRccTransportControlFlagsFromActions(long p6)
    {
        int v0 = android.support.v4.media.session.MediaSessionCompatApi18.getRccTransportControlFlagsFromActions(p6);
        if ((128 & p6) != 0) {
            v0 |= 512;
        }
        return v0;
    }

    public static void setMetadata(Object p6, android.os.Bundle p7, long p8)
    {
        android.media.RemoteControlClient$MetadataEditor v0 = ((android.media.RemoteControlClient) p6).editMetadata(1);
        android.support.v4.media.session.MediaSessionCompatApi14.buildOldMetadata(p7, v0);
        android.support.v4.media.session.MediaSessionCompatApi19.addNewMetadata(p7, v0);
        if ((128 & p8) != 0) {
            v0.addEditableKey(268435457);
        }
        v0.apply();
        return;
    }

    public static void setOnMetadataUpdateListener(Object p0, Object p1)
    {
        ((android.media.RemoteControlClient) p0).setMetadataUpdateListener(((android.media.RemoteControlClient$OnMetadataUpdateListener) p1));
        return;
    }

    public static void setTransportControlFlags(Object p1, long p2)
    {
        ((android.media.RemoteControlClient) p1).setTransportControlFlags(android.support.v4.media.session.MediaSessionCompatApi19.getRccTransportControlFlagsFromActions(p2));
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi21$CallbackProxy extends android.media.session.MediaSession$Callback {
    protected final android.support.v4.media.session.MediaSessionCompatApi21$Callback mCallback;

    public MediaSessionCompatApi21$CallbackProxy(android.support.v4.media.session.MediaSessionCompatApi21$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    public void onCommand(String p2, android.os.Bundle p3, android.os.ResultReceiver p4)
    {
        this.mCallback.onCommand(p2, p3, p4);
        return;
    }

    public void onCustomAction(String p2, android.os.Bundle p3)
    {
        this.mCallback.onCustomAction(p2, p3);
        return;
    }

    public void onFastForward()
    {
        this.mCallback.onFastForward();
        return;
    }

    public boolean onMediaButtonEvent(android.content.Intent p2)
    {
        if ((!this.mCallback.onMediaButtonEvent(p2)) && (!super.onMediaButtonEvent(p2))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void onPause()
    {
        this.mCallback.onPause();
        return;
    }

    public void onPlay()
    {
        this.mCallback.onPlay();
        return;
    }

    public void onPlayFromMediaId(String p2, android.os.Bundle p3)
    {
        this.mCallback.onPlayFromMediaId(p2, p3);
        return;
    }

    public void onPlayFromSearch(String p2, android.os.Bundle p3)
    {
        this.mCallback.onPlayFromSearch(p2, p3);
        return;
    }

    public void onRewind()
    {
        this.mCallback.onRewind();
        return;
    }

    public void onSeekTo(long p2)
    {
        this.mCallback.onSeekTo(p2);
        return;
    }

    public void onSetRating(android.media.Rating p2)
    {
        this.mCallback.onSetRating(p2);
        return;
    }

    public void onSkipToNext()
    {
        this.mCallback.onSkipToNext();
        return;
    }

    public void onSkipToPrevious()
    {
        this.mCallback.onSkipToPrevious();
        return;
    }

    public void onSkipToQueueItem(long p2)
    {
        this.mCallback.onSkipToQueueItem(p2);
        return;
    }

    public void onStop()
    {
        this.mCallback.onStop();
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi21$QueueItem {

    MediaSessionCompatApi21$QueueItem()
    {
        return;
    }

    public static Object createItem(Object p1, long p2)
    {
        return new android.media.session.MediaSession$QueueItem(((android.media.MediaDescription) p1), p2);
    }

    public static Object getDescription(Object p1)
    {
        return ((android.media.session.MediaSession$QueueItem) p1).getDescription();
    }

    public static long getQueueId(Object p2)
    {
        return ((android.media.session.MediaSession$QueueItem) p2).getQueueId();
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi21 {

    MediaSessionCompatApi21()
    {
        return;
    }

    public static Object createCallback(android.support.v4.media.session.MediaSessionCompatApi21$Callback p1)
    {
        return new android.support.v4.media.session.MediaSessionCompatApi21$CallbackProxy(p1);
    }

    public static Object createSession(android.content.Context p1, String p2)
    {
        return new android.media.session.MediaSession(p1, p2);
    }

    public static android.os.Parcelable getSessionToken(Object p1)
    {
        return ((android.media.session.MediaSession) p1).getSessionToken();
    }

    public static boolean isActive(Object p1)
    {
        return ((android.media.session.MediaSession) p1).isActive();
    }

    public static void release(Object p0)
    {
        ((android.media.session.MediaSession) p0).release();
        return;
    }

    public static void sendSessionEvent(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaSession) p0).sendSessionEvent(p1, p2);
        return;
    }

    public static void setActive(Object p0, boolean p1)
    {
        ((android.media.session.MediaSession) p0).setActive(p1);
        return;
    }

    public static void setCallback(Object p0, Object p1, android.os.Handler p2)
    {
        ((android.media.session.MediaSession) p0).setCallback(((android.media.session.MediaSession$Callback) p1), p2);
        return;
    }

    public static void setExtras(Object p0, android.os.Bundle p1)
    {
        ((android.media.session.MediaSession) p0).setExtras(p1);
        return;
    }

    public static void setFlags(Object p0, int p1)
    {
        ((android.media.session.MediaSession) p0).setFlags(p1);
        return;
    }

    public static void setMediaButtonReceiver(Object p0, android.app.PendingIntent p1)
    {
        ((android.media.session.MediaSession) p0).setMediaButtonReceiver(p1);
        return;
    }

    public static void setMetadata(Object p0, Object p1)
    {
        ((android.media.session.MediaSession) p0).setMetadata(((android.media.MediaMetadata) p1));
        return;
    }

    public static void setPlaybackState(Object p0, Object p1)
    {
        ((android.media.session.MediaSession) p0).setPlaybackState(((android.media.session.PlaybackState) p1));
        return;
    }

    public static void setPlaybackToLocal(Object p2, int p3)
    {
        android.media.AudioAttributes$Builder v0_1 = new android.media.AudioAttributes$Builder();
        v0_1.setLegacyStreamType(p3);
        ((android.media.session.MediaSession) p2).setPlaybackToLocal(v0_1.build());
        return;
    }

    public static void setPlaybackToRemote(Object p0, Object p1)
    {
        ((android.media.session.MediaSession) p0).setPlaybackToRemote(((android.media.VolumeProvider) p1));
        return;
    }

    public static void setQueue(Object p4, java.util.List p5)
    {
        if (p5 != null) {
            java.util.ArrayList v1_1 = new java.util.ArrayList();
            java.util.Iterator v2_1 = p5.iterator();
            while (v2_1.hasNext()) {
                v1_1.add(((android.media.session.MediaSession$QueueItem) v2_1.next()));
            }
            ((android.media.session.MediaSession) p4).setQueue(v1_1);
        } else {
            ((android.media.session.MediaSession) p4).setQueue(0);
        }
        return;
    }

    public static void setQueueTitle(Object p0, CharSequence p1)
    {
        ((android.media.session.MediaSession) p0).setQueueTitle(p1);
        return;
    }

    public static void setSessionActivity(Object p0, android.app.PendingIntent p1)
    {
        ((android.media.session.MediaSession) p0).setSessionActivity(p1);
        return;
    }

    public static Object verifySession(Object p2)
    {
        if (!(p2 instanceof android.media.session.MediaSession)) {
            throw new IllegalArgumentException("mediaSession is not a valid MediaSession object");
        } else {
            return p2;
        }
    }

    public static Object verifyToken(Object p2)
    {
        if (!(p2 instanceof android.media.session.MediaSession$Token)) {
            throw new IllegalArgumentException("token is not a valid MediaSession.Token object");
        } else {
            return p2;
        }
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi22 {

    MediaSessionCompatApi22()
    {
        return;
    }

    public static void setRatingType(Object p0, int p1)
    {
        ((android.media.session.MediaSession) p0).setRatingType(p1);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi23 {

    MediaSessionCompatApi23()
    {
        return;
    }

    public static Object createCallback(android.support.v4.media.session.MediaSessionCompatApi23$Callback p1)
    {
        return new android.support.v4.media.session.MediaSessionCompatApi23$CallbackProxy(p1);
    }
}
package android.support.v4.media.session;
 class MediaSessionCompatApi24 {
    private static final String TAG = "MediaSessionCompatApi24";

    MediaSessionCompatApi24()
    {
        return;
    }

    public static Object createCallback(android.support.v4.media.session.MediaSessionCompatApi24$Callback p1)
    {
        return new android.support.v4.media.session.MediaSessionCompatApi24$CallbackProxy(p1);
    }

    public static String getCallingPackage(Object p6)
    {
        try {
            Class[] v5_1 = new Class[0];
            int v3_0 = new Object[0];
            int v3_2 = ((String) ((android.media.session.MediaSession) p6).getClass().getMethod("getCallingPackage", v5_1).invoke(((android.media.session.MediaSession) p6), v3_0));
        } catch (IllegalAccessException v0) {
            android.util.Log.e("MediaSessionCompatApi24", "Cannot execute MediaSession.getCallingPackage()", v0);
            v3_2 = 0;
        } catch (IllegalAccessException v0) {
        } catch (IllegalAccessException v0) {
        }
        return v3_2;
    }
}
package android.support.v4.media.session;
final class ParcelableVolumeInfo$1 implements android.os.Parcelable$Creator {

    ParcelableVolumeInfo$1()
    {
        return;
    }

    public android.support.v4.media.session.ParcelableVolumeInfo createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.session.ParcelableVolumeInfo(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.ParcelableVolumeInfo[] newArray(int p2)
    {
        android.support.v4.media.session.ParcelableVolumeInfo[] v0 = new android.support.v4.media.session.ParcelableVolumeInfo[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
public class ParcelableVolumeInfo implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    public int audioStream;
    public int controlType;
    public int currentVolume;
    public int maxVolume;
    public int volumeType;

    static ParcelableVolumeInfo()
    {
        android.support.v4.media.session.ParcelableVolumeInfo.CREATOR = new android.support.v4.media.session.ParcelableVolumeInfo$1();
        return;
    }

    public ParcelableVolumeInfo(int p1, int p2, int p3, int p4, int p5)
    {
        this.volumeType = p1;
        this.audioStream = p2;
        this.controlType = p3;
        this.maxVolume = p4;
        this.currentVolume = p5;
        return;
    }

    public ParcelableVolumeInfo(android.os.Parcel p2)
    {
        this.volumeType = p2.readInt();
        this.controlType = p2.readInt();
        this.maxVolume = p2.readInt();
        this.currentVolume = p2.readInt();
        this.audioStream = p2.readInt();
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeInt(this.volumeType);
        p2.writeInt(this.controlType);
        p2.writeInt(this.maxVolume);
        p2.writeInt(this.currentVolume);
        p2.writeInt(this.audioStream);
        return;
    }
}
package android.support.v4.media.session;
final class PlaybackStateCompat$1 implements android.os.Parcelable$Creator {

    PlaybackStateCompat$1()
    {
        return;
    }

    public android.support.v4.media.session.PlaybackStateCompat createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.session.PlaybackStateCompat(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.PlaybackStateCompat[] newArray(int p2)
    {
        android.support.v4.media.session.PlaybackStateCompat[] v0 = new android.support.v4.media.session.PlaybackStateCompat[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
public interface annotation PlaybackStateCompat$Actions implements java.lang.annotation.Annotation {
}
package android.support.v4.media.session;
public final class PlaybackStateCompat$Builder {
    private long mActions;
    private long mActiveItemId;
    private long mBufferedPosition;
    private final java.util.List mCustomActions;
    private CharSequence mErrorMessage;
    private android.os.Bundle mExtras;
    private long mPosition;
    private float mRate;
    private int mState;
    private long mUpdateTime;

    public PlaybackStateCompat$Builder()
    {
        this.mCustomActions = new java.util.ArrayList();
        this.mActiveItemId = -1;
        return;
    }

    public PlaybackStateCompat$Builder(android.support.v4.media.session.PlaybackStateCompat p3)
    {
        this.mCustomActions = new java.util.ArrayList();
        this.mActiveItemId = -1;
        this.mState = p3.mState;
        this.mPosition = p3.mPosition;
        this.mRate = p3.mSpeed;
        this.mUpdateTime = p3.mUpdateTime;
        this.mBufferedPosition = p3.mBufferedPosition;
        this.mActions = p3.mActions;
        this.mErrorMessage = p3.mErrorMessage;
        if (p3.mCustomActions != null) {
            this.mCustomActions.addAll(p3.mCustomActions);
        }
        this.mActiveItemId = p3.mActiveItemId;
        this.mExtras = p3.mExtras;
        return;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder addCustomAction(android.support.v4.media.session.PlaybackStateCompat$CustomAction p3)
    {
        if (p3 != null) {
            this.mCustomActions.add(p3);
            return this;
        } else {
            throw new IllegalArgumentException("You may not add a null CustomAction to PlaybackStateCompat.");
        }
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder addCustomAction(String p3, String p4, int p5)
    {
        return this.addCustomAction(new android.support.v4.media.session.PlaybackStateCompat$CustomAction(p3, p4, p5, 0));
    }

    public android.support.v4.media.session.PlaybackStateCompat build()
    {
        return new android.support.v4.media.session.PlaybackStateCompat(this.mState, this.mPosition, this.mBufferedPosition, this.mRate, this.mActions, this.mErrorMessage, this.mUpdateTime, this.mCustomActions, this.mActiveItemId, this.mExtras);
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setActions(long p2)
    {
        this.mActions = p2;
        return this;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setActiveQueueItemId(long p2)
    {
        this.mActiveItemId = p2;
        return this;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setBufferedPosition(long p2)
    {
        this.mBufferedPosition = p2;
        return this;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setErrorMessage(CharSequence p1)
    {
        this.mErrorMessage = p1;
        return this;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setExtras(android.os.Bundle p1)
    {
        this.mExtras = p1;
        return this;
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setState(int p9, long p10, float p12)
    {
        return this.setState(p9, p10, p12, android.os.SystemClock.elapsedRealtime());
    }

    public android.support.v4.media.session.PlaybackStateCompat$Builder setState(int p1, long p2, float p4, long p5)
    {
        this.mState = p1;
        this.mPosition = p2;
        this.mUpdateTime = p5;
        this.mRate = p4;
        return this;
    }
}
package android.support.v4.media.session;
final class PlaybackStateCompat$CustomAction$1 implements android.os.Parcelable$Creator {

    PlaybackStateCompat$CustomAction$1()
    {
        return;
    }

    public android.support.v4.media.session.PlaybackStateCompat$CustomAction createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.media.session.PlaybackStateCompat$CustomAction(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.media.session.PlaybackStateCompat$CustomAction[] newArray(int p2)
    {
        android.support.v4.media.session.PlaybackStateCompat$CustomAction[] v0 = new android.support.v4.media.session.PlaybackStateCompat$CustomAction[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.media.session;
public final class PlaybackStateCompat$CustomAction$Builder {
    private final String mAction;
    private android.os.Bundle mExtras;
    private final int mIcon;
    private final CharSequence mName;

    public PlaybackStateCompat$CustomAction$Builder(String p3, CharSequence p4, int p5)
    {
        if (!android.text.TextUtils.isEmpty(p3)) {
            if (!android.text.TextUtils.isEmpty(p4)) {
                if (p5 != 0) {
                    this.mAction = p3;
                    this.mName = p4;
                    this.mIcon = p5;
                    return;
                } else {
                    throw new IllegalArgumentException("You must specify an icon resource id to build a CustomAction.");
                }
            } else {
                throw new IllegalArgumentException("You must specify a name to build a CustomAction.");
            }
        } else {
            throw new IllegalArgumentException("You must specify an action to build a CustomAction.");
        }
    }

    public android.support.v4.media.session.PlaybackStateCompat$CustomAction build()
    {
        return new android.support.v4.media.session.PlaybackStateCompat$CustomAction(this.mAction, this.mName, this.mIcon, this.mExtras);
    }

    public android.support.v4.media.session.PlaybackStateCompat$CustomAction$Builder setExtras(android.os.Bundle p1)
    {
        this.mExtras = p1;
        return this;
    }
}
package android.support.v4.media.session;
public final class PlaybackStateCompat$CustomAction implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    private final String mAction;
    private Object mCustomActionObj;
    private final android.os.Bundle mExtras;
    private final int mIcon;
    private final CharSequence mName;

    static PlaybackStateCompat$CustomAction()
    {
        android.support.v4.media.session.PlaybackStateCompat$CustomAction.CREATOR = new android.support.v4.media.session.PlaybackStateCompat$CustomAction$1();
        return;
    }

    PlaybackStateCompat$CustomAction(android.os.Parcel p2)
    {
        this.mAction = p2.readString();
        this.mName = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p2));
        this.mIcon = p2.readInt();
        this.mExtras = p2.readBundle();
        return;
    }

    PlaybackStateCompat$CustomAction(String p1, CharSequence p2, int p3, android.os.Bundle p4)
    {
        this.mAction = p1;
        this.mName = p2;
        this.mIcon = p3;
        this.mExtras = p4;
        return;
    }

    public static android.support.v4.media.session.PlaybackStateCompat$CustomAction fromCustomAction(Object p5)
    {
        if ((p5 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            android.support.v4.media.session.PlaybackStateCompat$CustomAction v0_0 = new android.support.v4.media.session.PlaybackStateCompat$CustomAction(android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction.getAction(p5), android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction.getName(p5), android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction.getIcon(p5), android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction.getExtras(p5));
            v0_0.mCustomActionObj = p5;
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public int describeContents()
    {
        return 0;
    }

    public String getAction()
    {
        return this.mAction;
    }

    public Object getCustomAction()
    {
        if ((this.mCustomActionObj == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            this.mCustomActionObj = android.support.v4.media.session.PlaybackStateCompatApi21$CustomAction.newInstance(this.mAction, this.mName, this.mIcon, this.mExtras);
            Object v0_2 = this.mCustomActionObj;
        } else {
            v0_2 = this.mCustomActionObj;
        }
        return v0_2;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public int getIcon()
    {
        return this.mIcon;
    }

    public CharSequence getName()
    {
        return this.mName;
    }

    public String toString()
    {
        return new StringBuilder().append("Action:mName=\'").append(this.mName).append(", mIcon=").append(this.mIcon).append(", mExtras=").append(this.mExtras).toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeString(this.mAction);
        android.text.TextUtils.writeToParcel(this.mName, p2, p3);
        p2.writeInt(this.mIcon);
        p2.writeBundle(this.mExtras);
        return;
    }
}
package android.support.v4.media.session;
public interface annotation PlaybackStateCompat$MediaKeyAction implements java.lang.annotation.Annotation {
}
package android.support.v4.media.session;
public interface annotation PlaybackStateCompat$State implements java.lang.annotation.Annotation {
}
package android.support.v4.media.session;
public final class PlaybackStateCompat implements android.os.Parcelable {
    public static final long ACTION_FAST_FORWARD = 64;
    public static final long ACTION_PAUSE = 2;
    public static final long ACTION_PLAY = 4;
    public static final long ACTION_PLAY_FROM_MEDIA_ID = 1024;
    public static final long ACTION_PLAY_FROM_SEARCH = 2048;
    public static final long ACTION_PLAY_FROM_URI = 8192;
    public static final long ACTION_PLAY_PAUSE = 512;
    public static final long ACTION_PREPARE = 16384;
    public static final long ACTION_PREPARE_FROM_MEDIA_ID = 32768;
    public static final long ACTION_PREPARE_FROM_SEARCH = 65536;
    public static final long ACTION_PREPARE_FROM_URI = 131072;
    public static final long ACTION_REWIND = 8;
    public static final long ACTION_SEEK_TO = 256;
    public static final long ACTION_SET_RATING = 128;
    public static final long ACTION_SKIP_TO_NEXT = 32;
    public static final long ACTION_SKIP_TO_PREVIOUS = 16;
    public static final long ACTION_SKIP_TO_QUEUE_ITEM = 4096;
    public static final long ACTION_STOP = 1;
    public static final android.os.Parcelable$Creator CREATOR = None;
    private static final int KEYCODE_MEDIA_PAUSE = 127;
    private static final int KEYCODE_MEDIA_PLAY = 126;
    public static final long PLAYBACK_POSITION_UNKNOWN = 255;
    public static final int STATE_BUFFERING = 6;
    public static final int STATE_CONNECTING = 8;
    public static final int STATE_ERROR = 7;
    public static final int STATE_FAST_FORWARDING = 4;
    public static final int STATE_NONE = 0;
    public static final int STATE_PAUSED = 2;
    public static final int STATE_PLAYING = 3;
    public static final int STATE_REWINDING = 5;
    public static final int STATE_SKIPPING_TO_NEXT = 10;
    public static final int STATE_SKIPPING_TO_PREVIOUS = 9;
    public static final int STATE_SKIPPING_TO_QUEUE_ITEM = 11;
    public static final int STATE_STOPPED = 1;
    final long mActions;
    final long mActiveItemId;
    final long mBufferedPosition;
    java.util.List mCustomActions;
    final CharSequence mErrorMessage;
    final android.os.Bundle mExtras;
    final long mPosition;
    final float mSpeed;
    final int mState;
    private Object mStateObj;
    final long mUpdateTime;

    static PlaybackStateCompat()
    {
        android.support.v4.media.session.PlaybackStateCompat.CREATOR = new android.support.v4.media.session.PlaybackStateCompat$1();
        return;
    }

    PlaybackStateCompat(int p3, long p4, long p6, float p8, long p9, CharSequence p11, long p12, java.util.List p14, long p15, android.os.Bundle p17)
    {
        this.mState = p3;
        this.mPosition = p4;
        this.mBufferedPosition = p6;
        this.mSpeed = p8;
        this.mActions = p9;
        this.mErrorMessage = p11;
        this.mUpdateTime = p12;
        this.mCustomActions = new java.util.ArrayList(p14);
        this.mActiveItemId = p15;
        this.mExtras = p17;
        return;
    }

    PlaybackStateCompat(android.os.Parcel p3)
    {
        this.mState = p3.readInt();
        this.mPosition = p3.readLong();
        this.mSpeed = p3.readFloat();
        this.mUpdateTime = p3.readLong();
        this.mBufferedPosition = p3.readLong();
        this.mActions = p3.readLong();
        this.mErrorMessage = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p3));
        this.mCustomActions = p3.createTypedArrayList(android.support.v4.media.session.PlaybackStateCompat$CustomAction.CREATOR);
        this.mActiveItemId = p3.readLong();
        this.mExtras = p3.readBundle();
        return;
    }

    public static android.support.v4.media.session.PlaybackStateCompat fromPlaybackState(Object p20)
    {
        if ((p20 != null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            java.util.List v19 = android.support.v4.media.session.PlaybackStateCompatApi21.getCustomActions(p20);
            java.util.ArrayList v14_0 = 0;
            if (v19 != null) {
                v14_0 = new java.util.ArrayList(v19.size());
                int v3_2 = v19.iterator();
                while (v3_2.hasNext()) {
                    v14_0.add(android.support.v4.media.session.PlaybackStateCompat$CustomAction.fromCustomAction(v3_2.next()));
                }
            }
            int v17;
            if (android.os.Build$VERSION.SDK_INT < 22) {
                v17 = 0;
            } else {
                v17 = android.support.v4.media.session.PlaybackStateCompatApi22.getExtras(p20);
            }
            android.support.v4.media.session.PlaybackStateCompat v2_1 = new android.support.v4.media.session.PlaybackStateCompat(android.support.v4.media.session.PlaybackStateCompatApi21.getState(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getPosition(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getBufferedPosition(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getPlaybackSpeed(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getActions(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getErrorMessage(p20), android.support.v4.media.session.PlaybackStateCompatApi21.getLastPositionUpdateTime(p20), v14_0, android.support.v4.media.session.PlaybackStateCompatApi21.getActiveQueueItemId(p20), v17);
            v2_1.mStateObj = p20;
        } else {
            v2_1 = 0;
        }
        return v2_1;
    }

    public static int toKeyCode(long p2)
    {
        int v0_11;
        if (p2 != 4) {
            if (p2 != 2) {
                if (p2 != 32) {
                    if (p2 != 16) {
                        if (p2 != 1) {
                            if (p2 != 64) {
                                if (p2 != 8) {
                                    if (p2 != 512) {
                                        v0_11 = 0;
                                    } else {
                                        v0_11 = 85;
                                    }
                                } else {
                                    v0_11 = 89;
                                }
                            } else {
                                v0_11 = 90;
                            }
                        } else {
                            v0_11 = 86;
                        }
                    } else {
                        v0_11 = 88;
                    }
                } else {
                    v0_11 = 87;
                }
            } else {
                v0_11 = 127;
            }
        } else {
            v0_11 = 126;
        }
        return v0_11;
    }

    public int describeContents()
    {
        return 0;
    }

    public long getActions()
    {
        return this.mActions;
    }

    public long getActiveQueueItemId()
    {
        return this.mActiveItemId;
    }

    public long getBufferedPosition()
    {
        return this.mBufferedPosition;
    }

    public java.util.List getCustomActions()
    {
        return this.mCustomActions;
    }

    public CharSequence getErrorMessage()
    {
        return this.mErrorMessage;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public long getLastPositionUpdateTime()
    {
        return this.mUpdateTime;
    }

    public float getPlaybackSpeed()
    {
        return this.mSpeed;
    }

    public Object getPlaybackState()
    {
        if ((this.mStateObj == null) && (android.os.Build$VERSION.SDK_INT >= 21)) {
            java.util.ArrayList v14_1 = 0;
            if (this.mCustomActions != null) {
                v14_1 = new java.util.ArrayList(this.mCustomActions.size());
                Object v3_4 = this.mCustomActions.iterator();
                while (v3_4.hasNext()) {
                    v14_1.add(((android.support.v4.media.session.PlaybackStateCompat$CustomAction) v3_4.next()).getCustomAction());
                }
            }
            if (android.os.Build$VERSION.SDK_INT < 22) {
                this.mStateObj = android.support.v4.media.session.PlaybackStateCompatApi21.newInstance(this.mState, this.mPosition, this.mBufferedPosition, this.mSpeed, this.mActions, this.mErrorMessage, this.mUpdateTime, v14_1, this.mActiveItemId);
            } else {
                this.mStateObj = android.support.v4.media.session.PlaybackStateCompatApi22.newInstance(this.mState, this.mPosition, this.mBufferedPosition, this.mSpeed, this.mActions, this.mErrorMessage, this.mUpdateTime, v14_1, this.mActiveItemId, this.mExtras);
            }
            Object v3_11 = this.mStateObj;
        } else {
            v3_11 = this.mStateObj;
        }
        return v3_11;
    }

    public long getPosition()
    {
        return this.mPosition;
    }

    public int getState()
    {
        return this.mState;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder("PlaybackState {");
        v0_1.append("state=").append(this.mState);
        v0_1.append(", position=").append(this.mPosition);
        v0_1.append(", buffered position=").append(this.mBufferedPosition);
        v0_1.append(", speed=").append(this.mSpeed);
        v0_1.append(", updated=").append(this.mUpdateTime);
        v0_1.append(", actions=").append(this.mActions);
        v0_1.append(", error=").append(this.mErrorMessage);
        v0_1.append(", custom actions=").append(this.mCustomActions);
        v0_1.append(", active item id=").append(this.mActiveItemId);
        v0_1.append("}");
        return v0_1.toString();
    }

    public void writeToParcel(android.os.Parcel p3, int p4)
    {
        p3.writeInt(this.mState);
        p3.writeLong(this.mPosition);
        p3.writeFloat(this.mSpeed);
        p3.writeLong(this.mUpdateTime);
        p3.writeLong(this.mBufferedPosition);
        p3.writeLong(this.mActions);
        android.text.TextUtils.writeToParcel(this.mErrorMessage, p3, p4);
        p3.writeTypedList(this.mCustomActions);
        p3.writeLong(this.mActiveItemId);
        p3.writeBundle(this.mExtras);
        return;
    }
}
package android.support.v4.media.session;
final class PlaybackStateCompatApi21$CustomAction {

    PlaybackStateCompatApi21$CustomAction()
    {
        return;
    }

    public static String getAction(Object p1)
    {
        return ((android.media.session.PlaybackState$CustomAction) p1).getAction();
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.media.session.PlaybackState$CustomAction) p1).getExtras();
    }

    public static int getIcon(Object p1)
    {
        return ((android.media.session.PlaybackState$CustomAction) p1).getIcon();
    }

    public static CharSequence getName(Object p1)
    {
        return ((android.media.session.PlaybackState$CustomAction) p1).getName();
    }

    public static Object newInstance(String p2, CharSequence p3, int p4, android.os.Bundle p5)
    {
        android.media.session.PlaybackState$CustomAction$Builder v0_1 = new android.media.session.PlaybackState$CustomAction$Builder(p2, p3, p4);
        v0_1.setExtras(p5);
        return v0_1.build();
    }
}
package android.support.v4.media.session;
 class PlaybackStateCompatApi21 {

    PlaybackStateCompatApi21()
    {
        return;
    }

    public static long getActions(Object p2)
    {
        return ((android.media.session.PlaybackState) p2).getActions();
    }

    public static long getActiveQueueItemId(Object p2)
    {
        return ((android.media.session.PlaybackState) p2).getActiveQueueItemId();
    }

    public static long getBufferedPosition(Object p2)
    {
        return ((android.media.session.PlaybackState) p2).getBufferedPosition();
    }

    public static java.util.List getCustomActions(Object p1)
    {
        return ((android.media.session.PlaybackState) p1).getCustomActions();
    }

    public static CharSequence getErrorMessage(Object p1)
    {
        return ((android.media.session.PlaybackState) p1).getErrorMessage();
    }

    public static long getLastPositionUpdateTime(Object p2)
    {
        return ((android.media.session.PlaybackState) p2).getLastPositionUpdateTime();
    }

    public static float getPlaybackSpeed(Object p1)
    {
        return ((android.media.session.PlaybackState) p1).getPlaybackSpeed();
    }

    public static long getPosition(Object p2)
    {
        return ((android.media.session.PlaybackState) p2).getPosition();
    }

    public static int getState(Object p1)
    {
        return ((android.media.session.PlaybackState) p1).getState();
    }

    public static Object newInstance(int p11, long p12, long p14, float p16, long p17, CharSequence p19, long p20, java.util.List p22, long p23)
    {
        android.media.session.PlaybackState$Builder v2_1 = new android.media.session.PlaybackState$Builder();
        v2_1.setState(p11, p12, p16, p20);
        v2_1.setBufferedPosition(p14);
        v2_1.setActions(p17);
        v2_1.setErrorMessage(p19);
        android.media.session.PlaybackState v3_0 = p22.iterator();
        while (v3_0.hasNext()) {
            v2_1.addCustomAction(((android.media.session.PlaybackState$CustomAction) v3_0.next()));
        }
        v2_1.setActiveQueueItemId(p23);
        return v2_1.build();
    }
}
package android.support.v4.media.session;
 class PlaybackStateCompatApi22 {

    PlaybackStateCompatApi22()
    {
        return;
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.media.session.PlaybackState) p1).getExtras();
    }

    public static Object newInstance(int p11, long p12, long p14, float p16, long p17, CharSequence p19, long p20, java.util.List p22, long p23, android.os.Bundle p25)
    {
        android.media.session.PlaybackState$Builder v2_1 = new android.media.session.PlaybackState$Builder();
        v2_1.setState(p11, p12, p16, p20);
        v2_1.setBufferedPosition(p14);
        v2_1.setActions(p17);
        v2_1.setErrorMessage(p19);
        android.media.session.PlaybackState v3_0 = p22.iterator();
        while (v3_0.hasNext()) {
            v2_1.addCustomAction(((android.media.session.PlaybackState$CustomAction) v3_0.next()));
        }
        v2_1.setActiveQueueItemId(p23);
        v2_1.setExtras(p25);
        return v2_1.build();
    }
}
package android.support.v4.net;
interface ConnectivityManagerCompat$ConnectivityManagerCompatImpl {

    public abstract int getRestrictBackgroundStatus();

    public abstract boolean isActiveNetworkMetered();
}
package android.support.v4.net;
public interface annotation ConnectivityManagerCompat$RestrictBackgroundStatus implements java.lang.annotation.Annotation {
}
package android.support.v4.net;
public final class ConnectivityManagerCompat {
    private static final android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl IMPL = None;
    public static final int RESTRICT_BACKGROUND_STATUS_DISABLED = 1;
    public static final int RESTRICT_BACKGROUND_STATUS_ENABLED = 3;
    public static final int RESTRICT_BACKGROUND_STATUS_WHITELISTED = 2;

    static ConnectivityManagerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 16) {
                if (android.os.Build$VERSION.SDK_INT < 13) {
                    android.support.v4.net.ConnectivityManagerCompat.IMPL = new android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl();
                } else {
                    android.support.v4.net.ConnectivityManagerCompat.IMPL = new android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl();
                }
            } else {
                android.support.v4.net.ConnectivityManagerCompat.IMPL = new android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl();
            }
        } else {
            android.support.v4.net.ConnectivityManagerCompat.IMPL = new android.support.v4.net.ConnectivityManagerCompat$Api24ConnectivityManagerCompatImpl();
        }
        return;
    }

    private ConnectivityManagerCompat()
    {
        return;
    }

    public static android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager p2, android.content.Intent p3)
    {
        int v1_1;
        android.net.NetworkInfo v0_1 = ((android.net.NetworkInfo) p3.getParcelableExtra("networkInfo"));
        if (v0_1 == null) {
            v1_1 = 0;
        } else {
            v1_1 = p2.getNetworkInfo(v0_1.getType());
        }
        return v1_1;
    }

    public static int getRestrictBackgroundStatus(android.net.ConnectivityManager p1)
    {
        return android.support.v4.net.ConnectivityManagerCompat.IMPL.getRestrictBackgroundStatus(p1);
    }

    public static boolean isActiveNetworkMetered(android.net.ConnectivityManager p1)
    {
        return android.support.v4.net.ConnectivityManagerCompat.IMPL.isActiveNetworkMetered(p1);
    }
}
package android.support.v4.net;
 class ConnectivityManagerCompatApi24 {

    ConnectivityManagerCompatApi24()
    {
        return;
    }

    public static int getRestrictBackgroundStatus(android.net.ConnectivityManager p1)
    {
        return p1.getRestrictBackgroundStatus();
    }
}
package android.support.v4.net;
 class ConnectivityManagerCompatHoneycombMR2 {

    ConnectivityManagerCompatHoneycombMR2()
    {
        return;
    }

    public static boolean isActiveNetworkMetered(android.net.ConnectivityManager p3)
    {
        int v2 = 1;
        android.net.NetworkInfo v0 = p3.getActiveNetworkInfo();
        if (v0 != null) {
            switch (v0.getType()) {
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 1:
                case 7:
                case 9:
                    v2 = 0;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 8:
                default:
                    break;
            }
        }
        return v2;
    }
}
package android.support.v4.net;
 class ConnectivityManagerCompatJellyBean {

    ConnectivityManagerCompatJellyBean()
    {
        return;
    }

    public static boolean isActiveNetworkMetered(android.net.ConnectivityManager p1)
    {
        return p1.isActiveNetworkMetered();
    }
}
package android.support.v4.net;
 class DatagramSocketWrapper$DatagramSocketImplWrapper extends java.net.SocketImpl {

    public DatagramSocketWrapper$DatagramSocketImplWrapper(java.net.DatagramSocket p2, java.io.FileDescriptor p3)
    {
        this.localport = p2.getLocalPort();
        this.fd = p3;
        return;
    }

    protected void accept(java.net.SocketImpl p2)
    {
        throw new UnsupportedOperationException();
    }

    protected int available()
    {
        throw new UnsupportedOperationException();
    }

    protected void bind(java.net.InetAddress p2, int p3)
    {
        throw new UnsupportedOperationException();
    }

    protected void close()
    {
        throw new UnsupportedOperationException();
    }

    protected void connect(String p2, int p3)
    {
        throw new UnsupportedOperationException();
    }

    protected void connect(java.net.InetAddress p2, int p3)
    {
        throw new UnsupportedOperationException();
    }

    protected void connect(java.net.SocketAddress p2, int p3)
    {
        throw new UnsupportedOperationException();
    }

    protected void create(boolean p2)
    {
        throw new UnsupportedOperationException();
    }

    protected java.io.InputStream getInputStream()
    {
        throw new UnsupportedOperationException();
    }

    public Object getOption(int p2)
    {
        throw new UnsupportedOperationException();
    }

    protected java.io.OutputStream getOutputStream()
    {
        throw new UnsupportedOperationException();
    }

    protected void listen(int p2)
    {
        throw new UnsupportedOperationException();
    }

    protected void sendUrgentData(int p2)
    {
        throw new UnsupportedOperationException();
    }

    public void setOption(int p2, Object p3)
    {
        throw new UnsupportedOperationException();
    }
}
package android.support.v4.net;
 class DatagramSocketWrapper extends java.net.Socket {

    public DatagramSocketWrapper(java.net.DatagramSocket p2, java.io.FileDescriptor p3)
    {
        super(new android.support.v4.net.DatagramSocketWrapper$DatagramSocketImplWrapper(p2, p3));
        return;
    }
}
package android.support.v4.net;
 class TrafficStatsCompat$BaseTrafficStatsCompatImpl$1 extends java.lang.ThreadLocal {
    final synthetic android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl this$0;

    TrafficStatsCompat$BaseTrafficStatsCompatImpl$1(android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl p1)
    {
        this.this$0 = p1;
        return;
    }

    protected android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags initialValue()
    {
        return new android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags();
    }

    protected bridge synthetic Object initialValue()
    {
        return this.initialValue();
    }
}
package android.support.v4.net;
 class TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags {
    public int statsTag;

    TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags()
    {
        this.statsTag = -1;
        return;
    }
}
package android.support.v4.net;
interface TrafficStatsCompat$TrafficStatsCompatImpl {

    public abstract void clearThreadStatsTag();

    public abstract int getThreadStatsTag();

    public abstract void incrementOperationCount();

    public abstract void incrementOperationCount();

    public abstract void setThreadStatsTag();

    public abstract void tagDatagramSocket();

    public abstract void tagSocket();

    public abstract void untagDatagramSocket();

    public abstract void untagSocket();
}
package android.support.v4.net;
public final class TrafficStatsCompat {
    private static final android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl IMPL;

    static TrafficStatsCompat()
    {
        if (!"N".equals(android.os.Build$VERSION.CODENAME)) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                android.support.v4.net.TrafficStatsCompat.IMPL = new android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl();
            } else {
                android.support.v4.net.TrafficStatsCompat.IMPL = new android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl();
            }
        } else {
            android.support.v4.net.TrafficStatsCompat.IMPL = new android.support.v4.net.TrafficStatsCompat$Api24TrafficStatsCompatImpl();
        }
        return;
    }

    private TrafficStatsCompat()
    {
        return;
    }

    public static void clearThreadStatsTag()
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.clearThreadStatsTag();
        return;
    }

    public static int getThreadStatsTag()
    {
        return android.support.v4.net.TrafficStatsCompat.IMPL.getThreadStatsTag();
    }

    public static void incrementOperationCount(int p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.incrementOperationCount(p1);
        return;
    }

    public static void incrementOperationCount(int p1, int p2)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.incrementOperationCount(p1, p2);
        return;
    }

    public static void setThreadStatsTag(int p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.setThreadStatsTag(p1);
        return;
    }

    public static void tagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.tagDatagramSocket(p1);
        return;
    }

    public static void tagSocket(java.net.Socket p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.tagSocket(p1);
        return;
    }

    public static void untagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.untagDatagramSocket(p1);
        return;
    }

    public static void untagSocket(java.net.Socket p1)
    {
        android.support.v4.net.TrafficStatsCompat.IMPL.untagSocket(p1);
        return;
    }
}
package android.support.v4.net;
public class TrafficStatsCompatApi24 {

    public TrafficStatsCompatApi24()
    {
        return;
    }

    public static void tagDatagramSocket(java.net.DatagramSocket p0)
    {
        android.net.TrafficStats.tagDatagramSocket(p0);
        return;
    }

    public static void untagDatagramSocket(java.net.DatagramSocket p0)
    {
        android.net.TrafficStats.untagDatagramSocket(p0);
        return;
    }
}
package android.support.v4.net;
 class TrafficStatsCompatIcs {

    TrafficStatsCompatIcs()
    {
        return;
    }

    public static void clearThreadStatsTag()
    {
        android.net.TrafficStats.clearThreadStatsTag();
        return;
    }

    public static int getThreadStatsTag()
    {
        return android.net.TrafficStats.getThreadStatsTag();
    }

    public static void incrementOperationCount(int p0)
    {
        android.net.TrafficStats.incrementOperationCount(p0);
        return;
    }

    public static void incrementOperationCount(int p0, int p1)
    {
        android.net.TrafficStats.incrementOperationCount(p0, p1);
        return;
    }

    public static void setThreadStatsTag(int p0)
    {
        android.net.TrafficStats.setThreadStatsTag(p0);
        return;
    }

    public static void tagDatagramSocket(java.net.DatagramSocket p3)
    {
        android.os.ParcelFileDescriptor v0 = android.os.ParcelFileDescriptor.fromDatagramSocket(p3);
        android.net.TrafficStats.tagSocket(new android.support.v4.net.DatagramSocketWrapper(p3, v0.getFileDescriptor()));
        v0.detachFd();
        return;
    }

    public static void tagSocket(java.net.Socket p0)
    {
        android.net.TrafficStats.tagSocket(p0);
        return;
    }

    public static void untagDatagramSocket(java.net.DatagramSocket p3)
    {
        android.os.ParcelFileDescriptor v0 = android.os.ParcelFileDescriptor.fromDatagramSocket(p3);
        android.net.TrafficStats.untagSocket(new android.support.v4.net.DatagramSocketWrapper(p3, v0.getFileDescriptor()));
        v0.detachFd();
        return;
    }

    public static void untagSocket(java.net.Socket p0)
    {
        android.net.TrafficStats.untagSocket(p0);
        return;
    }
}
package android.support.v4.os;
public final class AsyncTaskCompat {

    private AsyncTaskCompat()
    {
        return;
    }

    public static varargs android.os.AsyncTask executeParallel(android.os.AsyncTask p2, Object[] p3)
    {
        if (p2 != null) {
            if (android.os.Build$VERSION.SDK_INT < 11) {
                p2.execute(p3);
            } else {
                android.support.v4.os.AsyncTaskCompatHoneycomb.executeParallel(p2, p3);
            }
            return p2;
        } else {
            throw new IllegalArgumentException("task can not be null");
        }
    }
}
package android.support.v4.os;
 class AsyncTaskCompatHoneycomb {

    AsyncTaskCompatHoneycomb()
    {
        return;
    }

    static varargs void executeParallel(android.os.AsyncTask p1, Object[] p2)
    {
        p1.executeOnExecutor(android.os.AsyncTask.THREAD_POOL_EXECUTOR, p2);
        return;
    }
}
package android.support.v4.os;
public class BuildCompat {

    private BuildCompat()
    {
        return;
    }

    public static boolean isAtLeastN()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 24) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public static boolean isAtLeastNMR1()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 25) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }
}
package android.support.v4.os;
public interface CancellationSignal$OnCancelListener {

    public abstract void onCancel();
}
package android.support.v4.os;
public final class CancellationSignal {
    private boolean mCancelInProgress;
    private Object mCancellationSignalObj;
    private boolean mIsCanceled;
    private android.support.v4.os.CancellationSignal$OnCancelListener mOnCancelListener;

    public CancellationSignal()
    {
        return;
    }

    private void waitForCancelFinishedLocked()
    {
        while (this.mCancelInProgress) {
            try {
                this.wait();
            } catch (InterruptedException v0) {
            }
        }
        return;
    }

    public void cancel()
    {
        if (!this.mIsCanceled) {
            this.mIsCanceled = 1;
            this.mCancelInProgress = 1;
            android.support.v4.os.CancellationSignal$OnCancelListener v0 = this.mOnCancelListener;
            Object v1 = this.mCancellationSignalObj;
            try {
                if (v0 != null) {
                    v0.onCancel();
                }
            } catch (Throwable v2_1) {
                this.mCancelInProgress = 0;
                this.notifyAll();
                throw v2_1;
            }
            if (v1 != null) {
                android.support.v4.os.CancellationSignalCompatJellybean.cancel(v1);
            }
            try {
                this.mCancelInProgress = 0;
                this.notifyAll();
            } catch (Throwable v2_5) {
                throw v2_5;
            }
        } else {
        }
        return;
    }

    public Object getCancellationSignalObject()
    {
        Object v0_2;
        if (android.os.Build$VERSION.SDK_INT >= 16) {
            try {
                if (this.mCancellationSignalObj == null) {
                    this.mCancellationSignalObj = android.support.v4.os.CancellationSignalCompatJellybean.create();
                    if (this.mIsCanceled) {
                        android.support.v4.os.CancellationSignalCompatJellybean.cancel(this.mCancellationSignalObj);
                    }
                }
            } catch (Object v0_3) {
                throw v0_3;
            }
            v0_2 = this.mCancellationSignalObj;
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isCanceled()
    {
        try {
            return this.mIsCanceled;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public void setOnCancelListener(android.support.v4.os.CancellationSignal$OnCancelListener p2)
    {
        try {
            this.waitForCancelFinishedLocked();
        } catch (boolean v0_2) {
            throw v0_2;
        }
        if (this.mOnCancelListener != p2) {
            this.mOnCancelListener = p2;
            if ((this.mIsCanceled) && (p2 != null)) {
                p2.onCancel();
            } else {
            }
        } else {
        }
        return;
    }

    public void throwIfCanceled()
    {
        if (!this.isCanceled()) {
            return;
        } else {
            throw new android.support.v4.os.OperationCanceledException();
        }
    }
}
package android.support.v4.os;
 class CancellationSignalCompatJellybean {

    CancellationSignalCompatJellybean()
    {
        return;
    }

    public static void cancel(Object p0)
    {
        ((android.os.CancellationSignal) p0).cancel();
        return;
    }

    public static Object create()
    {
        return new android.os.CancellationSignal();
    }
}
package android.support.v4.os;
public final class EnvironmentCompat {
    public static final String MEDIA_UNKNOWN = "unknown";
    private static final String TAG = "EnvironmentCompat";

    private EnvironmentCompat()
    {
        return;
    }

    public static String getStorageState(java.io.File p7)
    {
        String v4_3;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            try {
                if (p7.getCanonicalPath().startsWith(android.os.Environment.getExternalStorageDirectory().getCanonicalPath())) {
                    v4_3 = android.os.Environment.getExternalStorageState();
                    return v4_3;
                }
            } catch (java.io.IOException v2) {
                android.util.Log.w("EnvironmentCompat", new StringBuilder().append("Failed to resolve canonical path: ").append(v2).toString());
            }
            v4_3 = "unknown";
        } else {
            v4_3 = android.support.v4.os.EnvironmentCompatKitKat.getStorageState(p7);
        }
        return v4_3;
    }
}
package android.support.v4.os;
 class EnvironmentCompatKitKat {

    EnvironmentCompatKitKat()
    {
        return;
    }

    public static String getStorageState(java.io.File p1)
    {
        return android.os.Environment.getStorageState(p1);
    }
}
package android.support.v4.os;
public interface IResultReceiver implements android.os.IInterface {

    public abstract void send();
}
package android.support.v4.os;
public class OperationCanceledException extends java.lang.RuntimeException {

    public OperationCanceledException()
    {
        this(0);
        return;
    }

    public OperationCanceledException(String p1)
    {
        if (p1 == null) {
            p1 = "The operation has been canceled.";
        }
        super(p1);
        return;
    }
}
package android.support.v4.os;
 class ParcelableCompat$CompatCreator implements android.os.Parcelable$Creator {
    final android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks;

    public ParcelableCompat$CompatCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        this.mCallbacks = p1;
        return;
    }

    public Object createFromParcel(android.os.Parcel p3)
    {
        return this.mCallbacks.createFromParcel(p3, 0);
    }

    public Object[] newArray(int p2)
    {
        return this.mCallbacks.newArray(p2);
    }
}
package android.support.v4.os;
public final class ParcelableCompat {

    private ParcelableCompat()
    {
        return;
    }

    public static android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks p2)
    {
        android.support.v4.os.ParcelableCompat$CompatCreator v0_2;
        if (android.os.Build$VERSION.SDK_INT < 13) {
            v0_2 = new android.support.v4.os.ParcelableCompat$CompatCreator(p2);
        } else {
            v0_2 = android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub.instantiate(p2);
        }
        return v0_2;
    }
}
package android.support.v4.os;
public interface ParcelableCompatCreatorCallbacks {

    public abstract Object createFromParcel();

    public abstract Object[] newArray();
}
package android.support.v4.os;
 class ParcelableCompatCreatorHoneycombMR2 implements android.os.Parcelable$ClassLoaderCreator {
    private final android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks;

    public ParcelableCompatCreatorHoneycombMR2(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        this.mCallbacks = p1;
        return;
    }

    public Object createFromParcel(android.os.Parcel p3)
    {
        return this.mCallbacks.createFromParcel(p3, 0);
    }

    public Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.mCallbacks.createFromParcel(p2, p3);
    }

    public Object[] newArray(int p2)
    {
        return this.mCallbacks.newArray(p2);
    }
}
package android.support.v4.os;
 class ParcelableCompatCreatorHoneycombMR2Stub {

    ParcelableCompatCreatorHoneycombMR2Stub()
    {
        return;
    }

    static android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks p1)
    {
        return new android.support.v4.os.ParcelableCompatCreatorHoneycombMR2(p1);
    }
}
package android.support.v4.os;
final class ResultReceiver$1 implements android.os.Parcelable$Creator {

    ResultReceiver$1()
    {
        return;
    }

    public android.support.v4.os.ResultReceiver createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.os.ResultReceiver(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.os.ResultReceiver[] newArray(int p2)
    {
        android.support.v4.os.ResultReceiver[] v0 = new android.support.v4.os.ResultReceiver[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.os;
 class ResultReceiver$MyRunnable implements java.lang.Runnable {
    final int mResultCode;
    final android.os.Bundle mResultData;
    final synthetic android.support.v4.os.ResultReceiver this$0;

    ResultReceiver$MyRunnable(android.support.v4.os.ResultReceiver p1, int p2, android.os.Bundle p3)
    {
        this.this$0 = p1;
        this.mResultCode = p2;
        this.mResultData = p3;
        return;
    }

    public void run()
    {
        this.this$0.onReceiveResult(this.mResultCode, this.mResultData);
        return;
    }
}
package android.support.v4.os;
public class ResultReceiver implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    final android.os.Handler mHandler;
    final boolean mLocal;
    android.support.v4.os.IResultReceiver mReceiver;

    static ResultReceiver()
    {
        android.support.v4.os.ResultReceiver.CREATOR = new android.support.v4.os.ResultReceiver$1();
        return;
    }

    public ResultReceiver(android.os.Handler p2)
    {
        this.mLocal = 1;
        this.mHandler = p2;
        return;
    }

    ResultReceiver(android.os.Parcel p2)
    {
        this.mLocal = 0;
        this.mHandler = 0;
        this.mReceiver = android.support.v4.os.IResultReceiver$Stub.asInterface(p2.readStrongBinder());
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    protected void onReceiveResult(int p1, android.os.Bundle p2)
    {
        return;
    }

    public void send(int p3, android.os.Bundle p4)
    {
        if (!this.mLocal) {
            if (this.mReceiver != null) {
                try {
                    this.mReceiver.send(p3, p4);
                } catch (android.os.RemoteException v0) {
                }
            }
        } else {
            if (this.mHandler == null) {
                this.onReceiveResult(p3, p4);
            } else {
                this.mHandler.post(new android.support.v4.os.ResultReceiver$MyRunnable(this, p3, p4));
            }
        }
        return;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        try {
            if (this.mReceiver == null) {
                this.mReceiver = new android.support.v4.os.ResultReceiver$MyResultReceiver(this);
            }
        } catch (android.os.IBinder v0_1) {
            throw v0_1;
        }
        p2.writeStrongBinder(this.mReceiver.asBinder());
        return;
    }
}
package android.support.v4.os;
public final class TraceCompat {

    private TraceCompat()
    {
        return;
    }

    public static void beginSection(String p2)
    {
        if (android.os.Build$VERSION.SDK_INT >= 18) {
            android.support.v4.os.TraceJellybeanMR2.beginSection(p2);
        }
        return;
    }

    public static void endSection()
    {
        if (android.os.Build$VERSION.SDK_INT >= 18) {
            android.support.v4.os.TraceJellybeanMR2.endSection();
        }
        return;
    }
}
package android.support.v4.os;
 class TraceJellybeanMR2 {

    TraceJellybeanMR2()
    {
        return;
    }

    public static void beginSection(String p0)
    {
        android.os.Trace.beginSection(p0);
        return;
    }

    public static void endSection()
    {
        android.os.Trace.endSection();
        return;
    }
}
package android.support.v4.os;
public class UserManagerCompat {

    private UserManagerCompat()
    {
        return;
    }

    public static boolean isUserRunningAndLocked(android.content.Context p1)
    {
        int v0_1;
        if (android.support.v4.os.UserManagerCompat.isUserUnlocked(p1)) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public static boolean isUserRunningAndUnlocked(android.content.Context p1)
    {
        return android.support.v4.os.UserManagerCompat.isUserUnlocked(p1);
    }

    public static boolean isUserUnlocked(android.content.Context p1)
    {
        int v0_1;
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            v0_1 = 1;
        } else {
            v0_1 = android.support.v4.os.UserManagerCompatApi24.isUserUnlocked(p1);
        }
        return v0_1;
    }
}
package android.support.v4.os;
public class UserManagerCompatApi24 {

    public UserManagerCompatApi24()
    {
        return;
    }

    public static boolean isUserUnlocked(android.content.Context p1)
    {
        return ((android.os.UserManager) p1.getSystemService(android.os.UserManager)).isUserUnlocked();
    }
}
package android.support.v4.print;
synthetic class PrintHelper$1 {
}
package android.support.v4.print;
public interface PrintHelper$OnPrintFinishCallback {

    public abstract void onFinish();
}
package android.support.v4.print;
interface PrintHelper$PrintHelperVersionImpl {

    public abstract int getColorMode();

    public abstract int getOrientation();

    public abstract int getScaleMode();

    public abstract void printBitmap();

    public abstract void printBitmap();

    public abstract void setColorMode();

    public abstract void setOrientation();

    public abstract void setScaleMode();
}
package android.support.v4.print;
public final class PrintHelper {
    public static final int COLOR_MODE_COLOR = 2;
    public static final int COLOR_MODE_MONOCHROME = 1;
    public static final int ORIENTATION_LANDSCAPE = 1;
    public static final int ORIENTATION_PORTRAIT = 2;
    public static final int SCALE_MODE_FILL = 2;
    public static final int SCALE_MODE_FIT = 1;
    android.support.v4.print.PrintHelper$PrintHelperVersionImpl mImpl;

    public PrintHelper(android.content.Context p3)
    {
        if (!android.support.v4.print.PrintHelper.systemSupportsPrint()) {
            this.mImpl = new android.support.v4.print.PrintHelper$PrintHelperStubImpl(0);
        } else {
            if (android.os.Build$VERSION.SDK_INT < 24) {
                if (android.os.Build$VERSION.SDK_INT < 23) {
                    if (android.os.Build$VERSION.SDK_INT < 20) {
                        this.mImpl = new android.support.v4.print.PrintHelper$PrintHelperKitkatImpl(p3);
                    } else {
                        this.mImpl = new android.support.v4.print.PrintHelper$PrintHelperApi20Impl(p3);
                    }
                } else {
                    this.mImpl = new android.support.v4.print.PrintHelper$PrintHelperApi23Impl(p3);
                }
            } else {
                this.mImpl = new android.support.v4.print.PrintHelper$PrintHelperApi24Impl(p3);
            }
        }
        return;
    }

    public static boolean systemSupportsPrint()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public int getColorMode()
    {
        return this.mImpl.getColorMode();
    }

    public int getOrientation()
    {
        return this.mImpl.getOrientation();
    }

    public int getScaleMode()
    {
        return this.mImpl.getScaleMode();
    }

    public void printBitmap(String p3, android.graphics.Bitmap p4)
    {
        this.mImpl.printBitmap(p3, p4, 0);
        return;
    }

    public void printBitmap(String p2, android.graphics.Bitmap p3, android.support.v4.print.PrintHelper$OnPrintFinishCallback p4)
    {
        this.mImpl.printBitmap(p2, p3, p4);
        return;
    }

    public void printBitmap(String p3, android.net.Uri p4)
    {
        this.mImpl.printBitmap(p3, p4, 0);
        return;
    }

    public void printBitmap(String p2, android.net.Uri p3, android.support.v4.print.PrintHelper$OnPrintFinishCallback p4)
    {
        this.mImpl.printBitmap(p2, p3, p4);
        return;
    }

    public void setColorMode(int p2)
    {
        this.mImpl.setColorMode(p2);
        return;
    }

    public void setOrientation(int p2)
    {
        this.mImpl.setOrientation(p2);
        return;
    }

    public void setScaleMode(int p2)
    {
        this.mImpl.setScaleMode(p2);
        return;
    }
}
package android.support.v4.print;
 class PrintHelperKitkat$1 extends android.print.PrintDocumentAdapter {
    private android.print.PrintAttributes mAttributes;
    final synthetic android.support.v4.print.PrintHelperKitkat this$0;
    final synthetic android.graphics.Bitmap val$bitmap;
    final synthetic android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback val$callback;
    final synthetic int val$fittingMode;
    final synthetic String val$jobName;

    PrintHelperKitkat$1(android.support.v4.print.PrintHelperKitkat p1, String p2, int p3, android.graphics.Bitmap p4, android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback p5)
    {
        this.this$0 = p1;
        this.val$jobName = p2;
        this.val$fittingMode = p3;
        this.val$bitmap = p4;
        this.val$callback = p5;
        return;
    }

    public void onFinish()
    {
        if (this.val$callback != null) {
            this.val$callback.onFinish();
        }
        return;
    }

    public void onLayout(android.print.PrintAttributes p5, android.print.PrintAttributes p6, android.os.CancellationSignal p7, android.print.PrintDocumentAdapter$LayoutResultCallback p8, android.os.Bundle p9)
    {
        int v0 = 1;
        this.mAttributes = p6;
        android.print.PrintDocumentInfo vtmp3 = new android.print.PrintDocumentInfo$Builder(this.val$jobName).setContentType(1).setPageCount(1).build();
        if (p6.equals(p5)) {
            v0 = 0;
        }
        p8.onLayoutFinished(vtmp3, v0);
        return;
    }

    public void onWrite(android.print.PageRange[] p8, android.os.ParcelFileDescriptor p9, android.os.CancellationSignal p10, android.print.PrintDocumentAdapter$WriteResultCallback p11)
    {
        android.support.v4.print.PrintHelperKitkat.access$000(this.this$0, this.mAttributes, this.val$fittingMode, this.val$bitmap, p9, p10, p11);
        return;
    }
}
package android.support.v4.print;
 class PrintHelperKitkat$2 extends android.os.AsyncTask {
    final synthetic android.support.v4.print.PrintHelperKitkat this$0;
    final synthetic android.print.PrintAttributes val$attributes;
    final synthetic android.graphics.Bitmap val$bitmap;
    final synthetic android.os.CancellationSignal val$cancellationSignal;
    final synthetic android.os.ParcelFileDescriptor val$fileDescriptor;
    final synthetic int val$fittingMode;
    final synthetic android.print.PrintAttributes val$pdfAttributes;
    final synthetic android.print.PrintDocumentAdapter$WriteResultCallback val$writeResultCallback;

    PrintHelperKitkat$2(android.support.v4.print.PrintHelperKitkat p1, android.os.CancellationSignal p2, android.print.PrintAttributes p3, android.graphics.Bitmap p4, android.print.PrintAttributes p5, int p6, android.os.ParcelFileDescriptor p7, android.print.PrintDocumentAdapter$WriteResultCallback p8)
    {
        this.this$0 = p1;
        this.val$cancellationSignal = p2;
        this.val$pdfAttributes = p3;
        this.val$bitmap = p4;
        this.val$attributes = p5;
        this.val$fittingMode = p6;
        this.val$fileDescriptor = p7;
        this.val$writeResultCallback = p8;
        return;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs Throwable doInBackground(Void[] p13)
    {
        Throwable v7 = 0;
        try {
            if (!this.val$cancellationSignal.isCanceled()) {
                android.print.pdf.PrintedPdfDocument v6_1 = new android.print.pdf.PrintedPdfDocument(this.this$0.mContext, this.val$pdfAttributes);
                android.graphics.Bitmap v4 = android.support.v4.print.PrintHelperKitkat.access$100(this.this$0, this.val$bitmap, this.val$pdfAttributes.getColorMode());
                if (!this.val$cancellationSignal.isCanceled()) {
                    try {
                        android.graphics.RectF v0_1;
                        android.graphics.pdf.PdfDocument$Page v5 = v6_1.startPage(1);
                    } catch (java.io.IOException v8_30) {
                        v6_1.close();
                        if (this.val$fileDescriptor != null) {
                            try {
                                this.val$fileDescriptor.close();
                            } catch (java.io.FileDescriptor v9) {
                            }
                        }
                        if (v4 != this.val$bitmap) {
                            v4.recycle();
                        }
                        throw v8_30;
                    }
                    if (!this.this$0.mIsMinMarginsHandlingCorrect) {
                        android.print.pdf.PrintedPdfDocument v1_1 = new android.print.pdf.PrintedPdfDocument(this.this$0.mContext, this.val$attributes);
                        android.graphics.pdf.PdfDocument$Page v2 = v1_1.startPage(1);
                        v0_1 = new android.graphics.RectF(v2.getInfo().getContentRect());
                        v1_1.finishPage(v2);
                        v1_1.close();
                    } else {
                        v0_1 = new android.graphics.RectF(v5.getInfo().getContentRect());
                    }
                    android.graphics.Matrix v3 = android.support.v4.print.PrintHelperKitkat.access$200(this.this$0, v4.getWidth(), v4.getHeight(), v0_1, this.val$fittingMode);
                    if (!this.this$0.mIsMinMarginsHandlingCorrect) {
                        v3.postTranslate(v0_1.left, v0_1.top);
                        v5.getCanvas().clipRect(v0_1);
                    }
                    v5.getCanvas().drawBitmap(v4, v3, 0);
                    v6_1.finishPage(v5);
                    if (!this.val$cancellationSignal.isCanceled()) {
                        v6_1.writeTo(new java.io.FileOutputStream(this.val$fileDescriptor.getFileDescriptor()));
                        v6_1.close();
                        if (this.val$fileDescriptor != null) {
                            try {
                                this.val$fileDescriptor.close();
                            } catch (java.io.IOException v8) {
                            }
                        }
                        if (v4 != this.val$bitmap) {
                            v4.recycle();
                        }
                    } else {
                        v6_1.close();
                        if (this.val$fileDescriptor != null) {
                            try {
                                this.val$fileDescriptor.close();
                            } catch (java.io.IOException v8) {
                            }
                        }
                        if (v4 != this.val$bitmap) {
                            v4.recycle();
                        }
                    }
                }
            }
        } catch (Throwable v7) {
        }
        return v7;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((Throwable) p1));
        return;
    }

    protected void onPostExecute(Throwable p5)
    {
        if (!this.val$cancellationSignal.isCanceled()) {
            if (p5 != null) {
                android.util.Log.e("PrintHelperKitkat", "Error writing printed content", p5);
                this.val$writeResultCallback.onWriteFailed(0);
            } else {
                android.print.PrintDocumentAdapter$WriteResultCallback v0_1 = this.val$writeResultCallback;
                int v1_1 = new android.print.PageRange[1];
                v1_1[0] = android.print.PageRange.ALL_PAGES;
                v0_1.onWriteFinished(v1_1);
            }
        } else {
            this.val$writeResultCallback.onWriteCancelled();
        }
        return;
    }
}
package android.support.v4.print;
 class PrintHelperKitkat$3$1$1 implements android.os.CancellationSignal$OnCancelListener {
    final synthetic android.support.v4.print.PrintHelperKitkat$3$1 this$2;

    PrintHelperKitkat$3$1$1(android.support.v4.print.PrintHelperKitkat$3$1 p1)
    {
        this.this$2 = p1;
        return;
    }

    public void onCancel()
    {
        android.support.v4.print.PrintHelperKitkat$3.access$300(this.this$2.this$1);
        this.this$2.cancel(0);
        return;
    }
}
package android.support.v4.print;
 class PrintHelperKitkat$3$1 extends android.os.AsyncTask {
    final synthetic android.support.v4.print.PrintHelperKitkat$3 this$1;
    final synthetic android.os.CancellationSignal val$cancellationSignal;
    final synthetic android.print.PrintDocumentAdapter$LayoutResultCallback val$layoutResultCallback;
    final synthetic android.print.PrintAttributes val$newPrintAttributes;
    final synthetic android.print.PrintAttributes val$oldPrintAttributes;

    PrintHelperKitkat$3$1(android.support.v4.print.PrintHelperKitkat$3 p1, android.os.CancellationSignal p2, android.print.PrintAttributes p3, android.print.PrintAttributes p4, android.print.PrintDocumentAdapter$LayoutResultCallback p5)
    {
        this.this$1 = p1;
        this.val$cancellationSignal = p2;
        this.val$newPrintAttributes = p3;
        this.val$oldPrintAttributes = p4;
        this.val$layoutResultCallback = p5;
        return;
    }

    protected varargs android.graphics.Bitmap doInBackground(android.net.Uri[] p4)
    {
        try {
            int v0_2 = android.support.v4.print.PrintHelperKitkat.access$400(this.this$1.this$0, this.this$1.val$imageFile, 3500);
        } catch (int v0) {
            v0_2 = 0;
        }
        return v0_2;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((android.net.Uri[]) p2));
    }

    protected void onCancelled(android.graphics.Bitmap p3)
    {
        this.val$layoutResultCallback.onLayoutCancelled();
        this.this$1.mLoadBitmap = 0;
        return;
    }

    protected bridge synthetic void onCancelled(Object p1)
    {
        this.onCancelled(((android.graphics.Bitmap) p1));
        return;
    }

    protected void onPostExecute(android.graphics.Bitmap p12)
    {
        super.onPostExecute(p12);
        if ((p12 != null) && ((!this.this$1.this$0.mPrintActivityRespectsOrientation) || (this.this$1.this$0.mOrientation == 0))) {
            android.print.PrintAttributes$MediaSize v9 = android.support.v4.print.PrintHelperKitkat$3.access$500(this.this$1).getMediaSize();
            if ((v9 != null) && (v9.isPortrait() != android.support.v4.print.PrintHelperKitkat.access$600(p12))) {
                android.graphics.Matrix v5_1 = new android.graphics.Matrix();
                v5_1.postRotate(1119092736);
                p12 = android.graphics.Bitmap.createBitmap(p12, 0, 0, p12.getWidth(), p12.getHeight(), v5_1, 1);
            }
        }
        this.this$1.mBitmap = p12;
        if (p12 == null) {
            this.val$layoutResultCallback.onLayoutFailed(0);
        } else {
            int v7;
            android.print.PrintDocumentInfo v8 = new android.print.PrintDocumentInfo$Builder(this.this$1.val$jobName).setContentType(1).setPageCount(1).build();
            if (this.val$newPrintAttributes.equals(this.val$oldPrintAttributes)) {
                v7 = 0;
            } else {
                v7 = 1;
            }
            this.val$layoutResultCallback.onLayoutFinished(v8, v7);
        }
        this.this$1.mLoadBitmap = 0;
        return;
    }

    protected bridge synthetic void onPostExecute(Object p1)
    {
        this.onPostExecute(((android.graphics.Bitmap) p1));
        return;
    }

    protected void onPreExecute()
    {
        this.val$cancellationSignal.setOnCancelListener(new android.support.v4.print.PrintHelperKitkat$3$1$1(this));
        return;
    }
}
package android.support.v4.print;
 class PrintHelperKitkat$3 extends android.print.PrintDocumentAdapter {
    private android.print.PrintAttributes mAttributes;
    android.graphics.Bitmap mBitmap;
    android.os.AsyncTask mLoadBitmap;
    final synthetic android.support.v4.print.PrintHelperKitkat this$0;
    final synthetic android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback val$callback;
    final synthetic int val$fittingMode;
    final synthetic android.net.Uri val$imageFile;
    final synthetic String val$jobName;

    PrintHelperKitkat$3(android.support.v4.print.PrintHelperKitkat p2, String p3, android.net.Uri p4, android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback p5, int p6)
    {
        this.this$0 = p2;
        this.val$jobName = p3;
        this.val$imageFile = p4;
        this.val$callback = p5;
        this.val$fittingMode = p6;
        this.mBitmap = 0;
        return;
    }

    static synthetic void access$300(android.support.v4.print.PrintHelperKitkat$3 p0)
    {
        p0.cancelLoad();
        return;
    }

    static synthetic android.print.PrintAttributes access$500(android.support.v4.print.PrintHelperKitkat$3 p1)
    {
        return p1.mAttributes;
    }

    private void cancelLoad()
    {
        android.support.v4.print.PrintHelperKitkat.access$700(this.this$0);
        try {
            if (this.this$0.mDecodeOptions != null) {
                this.this$0.mDecodeOptions.requestCancelDecode();
                this.this$0.mDecodeOptions = 0;
            }
        } catch (android.support.v4.print.PrintHelperKitkat v0_1) {
            throw v0_1;
        }
        return;
    }

    public void onFinish()
    {
        super.onFinish();
        this.cancelLoad();
        if (this.mLoadBitmap != null) {
            this.mLoadBitmap.cancel(1);
        }
        if (this.val$callback != null) {
            this.val$callback.onFinish();
        }
        if (this.mBitmap != null) {
            this.mBitmap.recycle();
            this.mBitmap = 0;
        }
        return;
    }

    public void onLayout(android.print.PrintAttributes p10, android.print.PrintAttributes p11, android.os.CancellationSignal p12, android.print.PrintDocumentAdapter$LayoutResultCallback p13, android.os.Bundle p14)
    {
        int v6 = 1;
        this.mAttributes = p11;
        if (!p12.isCanceled()) {
            if (this.mBitmap == null) {
                android.net.Uri[] v1_1 = new android.net.Uri[0];
                this.mLoadBitmap = new android.support.v4.print.PrintHelperKitkat$3$1(this, p12, p11, p10, p13).execute(v1_1);
            } else {
                android.print.PrintDocumentInfo vtmp4 = new android.print.PrintDocumentInfo$Builder(this.val$jobName).setContentType(1).setPageCount(1).build();
                if (p11.equals(p10)) {
                    v6 = 0;
                }
                p13.onLayoutFinished(vtmp4, v6);
            }
        } else {
            p13.onLayoutCancelled();
        }
        return;
    }

    public void onWrite(android.print.PageRange[] p8, android.os.ParcelFileDescriptor p9, android.os.CancellationSignal p10, android.print.PrintDocumentAdapter$WriteResultCallback p11)
    {
        android.support.v4.print.PrintHelperKitkat.access$000(this.this$0, this.mAttributes, this.val$fittingMode, this.mBitmap, p9, p10, p11);
        return;
    }
}
package android.support.v4.print;
public interface PrintHelperKitkat$OnPrintFinishCallback {

    public abstract void onFinish();
}
package android.support.v4.print;
 class PrintHelperKitkat {
    public static final int COLOR_MODE_COLOR = 2;
    public static final int COLOR_MODE_MONOCHROME = 1;
    private static final String LOG_TAG = "PrintHelperKitkat";
    private static final int MAX_PRINT_SIZE = 3500;
    public static final int ORIENTATION_LANDSCAPE = 1;
    public static final int ORIENTATION_PORTRAIT = 2;
    public static final int SCALE_MODE_FILL = 2;
    public static final int SCALE_MODE_FIT = 1;
    int mColorMode;
    final android.content.Context mContext;
    android.graphics.BitmapFactory$Options mDecodeOptions;
    protected boolean mIsMinMarginsHandlingCorrect;
    private final Object mLock;
    int mOrientation;
    protected boolean mPrintActivityRespectsOrientation;
    int mScaleMode;

    PrintHelperKitkat(android.content.Context p4)
    {
        this.mDecodeOptions = 0;
        this.mLock = new Object();
        this.mScaleMode = 2;
        this.mColorMode = 2;
        this.mPrintActivityRespectsOrientation = 1;
        this.mIsMinMarginsHandlingCorrect = 1;
        this.mContext = p4;
        return;
    }

    static synthetic void access$000(android.support.v4.print.PrintHelperKitkat p0, android.print.PrintAttributes p1, int p2, android.graphics.Bitmap p3, android.os.ParcelFileDescriptor p4, android.os.CancellationSignal p5, android.print.PrintDocumentAdapter$WriteResultCallback p6)
    {
        p0.writeBitmap(p1, p2, p3, p4, p5, p6);
        return;
    }

    static synthetic android.graphics.Bitmap access$100(android.support.v4.print.PrintHelperKitkat p1, android.graphics.Bitmap p2, int p3)
    {
        return p1.convertBitmapForColorMode(p2, p3);
    }

    static synthetic android.graphics.Matrix access$200(android.support.v4.print.PrintHelperKitkat p1, int p2, int p3, android.graphics.RectF p4, int p5)
    {
        return p1.getMatrix(p2, p3, p4, p5);
    }

    static synthetic android.graphics.Bitmap access$400(android.support.v4.print.PrintHelperKitkat p1, android.net.Uri p2, int p3)
    {
        return p1.loadConstrainedBitmap(p2, p3);
    }

    static synthetic boolean access$600(android.graphics.Bitmap p1)
    {
        return android.support.v4.print.PrintHelperKitkat.isPortrait(p1);
    }

    static synthetic Object access$700(android.support.v4.print.PrintHelperKitkat p1)
    {
        return p1.mLock;
    }

    private android.graphics.Bitmap convertBitmapForColorMode(android.graphics.Bitmap p10, int p11)
    {
        if (p11 == 1) {
            android.graphics.Bitmap v3 = android.graphics.Bitmap.createBitmap(p10.getWidth(), p10.getHeight(), android.graphics.Bitmap$Config.ARGB_8888);
            android.graphics.Canvas v0_1 = new android.graphics.Canvas(v3);
            android.graphics.Paint v4_1 = new android.graphics.Paint();
            android.graphics.ColorMatrix v1_1 = new android.graphics.ColorMatrix();
            v1_1.setSaturation(0);
            v4_1.setColorFilter(new android.graphics.ColorMatrixColorFilter(v1_1));
            v0_1.drawBitmap(p10, 0, 0, v4_1);
            v0_1.setBitmap(0);
            p10 = v3;
        }
        return p10;
    }

    private android.graphics.Matrix getMatrix(int p8, int p9, android.graphics.RectF p10, int p11)
    {
        float v1_0;
        android.graphics.Matrix v0_1 = new android.graphics.Matrix();
        float v1_1 = (p10.width() / ((float) p8));
        if (p11 != 2) {
            v1_0 = Math.min(v1_1, (p10.height() / ((float) p9)));
        } else {
            v1_0 = Math.max(v1_1, (p10.height() / ((float) p9)));
        }
        v0_1.postScale(v1_0, v1_0);
        v0_1.postTranslate(((p10.width() - (((float) p8) * v1_0)) / 1073741824), ((p10.height() - (((float) p9) * v1_0)) / 1073741824));
        return v0_1;
    }

    private static boolean isPortrait(android.graphics.Bitmap p2)
    {
        int v0_1;
        if (p2.getWidth() > p2.getHeight()) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    private android.graphics.Bitmap loadBitmap(android.net.Uri p6, android.graphics.BitmapFactory$Options p7)
    {
        if ((p6 != null) && (this.mContext != null)) {
            try {
                java.io.InputStream v0 = this.mContext.getContentResolver().openInputStream(p6);
                Throwable v2_1 = android.graphics.BitmapFactory.decodeStream(v0, 0, p7);
            } catch (Throwable v2_2) {
                if (v0 != null) {
                    try {
                        v0.close();
                    } catch (java.io.IOException v1_0) {
                        android.util.Log.w("PrintHelperKitkat", "close fail ", v1_0);
                    }
                }
                throw v2_2;
            }
            if (v0 != null) {
                try {
                    v0.close();
                } catch (java.io.IOException v1_1) {
                    android.util.Log.w("PrintHelperKitkat", "close fail ", v1_1);
                }
            }
            return v2_1;
        } else {
            throw new IllegalArgumentException("bad argument to loadBitmap");
        }
    }

    private android.graphics.Bitmap loadConstrainedBitmap(android.net.Uri p10, int p11)
    {
        Throwable v6_0 = 0;
        if ((p11 > 0) && ((p10 != null) && (this.mContext != null))) {
            android.graphics.BitmapFactory$Options v3_1 = new android.graphics.BitmapFactory$Options();
            v3_1.inJustDecodeBounds = 1;
            this.loadBitmap(p10, v3_1);
            int v5 = v3_1.outWidth;
            int v1 = v3_1.outHeight;
            if ((v5 > 0) && (v1 > 0)) {
                int v2 = Math.max(v5, v1);
                int v4 = 1;
                while (v2 > p11) {
                    v2 >>= 1;
                    v4 <<= 1;
                }
                if ((v4 > 0) && ((Math.min(v5, v1) / v4) > 0)) {
                    Object v7 = this.mLock;
                    this.mDecodeOptions = new android.graphics.BitmapFactory$Options();
                    this.mDecodeOptions.inMutable = 1;
                    this.mDecodeOptions.inSampleSize = v4;
                    try {
                        v6_0 = this.loadBitmap(p10, this.mDecodeOptions);
                        try {
                            this.mDecodeOptions = 0;
                        } catch (Throwable v6_8) {
                            throw v6_8;
                        }
                    } catch (Throwable v6_6) {
                        this.mDecodeOptions = 0;
                        throw v6_6;
                    }
                }
            }
            return v6_0;
        } else {
            throw new IllegalArgumentException("bad argument to getScaledBitmap");
        }
    }

    private void writeBitmap(android.print.PrintAttributes p10, int p11, android.graphics.Bitmap p12, android.os.ParcelFileDescriptor p13, android.os.CancellationSignal p14, android.print.PrintDocumentAdapter$WriteResultCallback p15)
    {
        android.print.PrintAttributes v3;
        if (!this.mIsMinMarginsHandlingCorrect) {
            v3 = this.copyAttributes(p10).setMinMargins(new android.print.PrintAttributes$Margins(0, 0, 0, 0)).build();
        } else {
            v3 = p10;
        }
        Void[] v1_2 = new Void[0];
        new android.support.v4.print.PrintHelperKitkat$2(this, p14, v3, p12, p10, p11, p13, p15).execute(v1_2);
        return;
    }

    protected android.print.PrintAttributes$Builder copyAttributes(android.print.PrintAttributes p4)
    {
        android.print.PrintAttributes$Builder v0 = new android.print.PrintAttributes$Builder().setMediaSize(p4.getMediaSize()).setResolution(p4.getResolution()).setMinMargins(p4.getMinMargins());
        if (p4.getColorMode() != 0) {
            v0.setColorMode(p4.getColorMode());
        }
        return v0;
    }

    public int getColorMode()
    {
        return this.mColorMode;
    }

    public int getOrientation()
    {
        int v0_1;
        if (this.mOrientation != 0) {
            v0_1 = this.mOrientation;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public int getScaleMode()
    {
        return this.mScaleMode;
    }

    public void printBitmap(String p10, android.graphics.Bitmap p11, android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback p12)
    {
        if (p11 != null) {
            android.print.PrintAttributes$MediaSize v7;
            if (!android.support.v4.print.PrintHelperKitkat.isPortrait(p11)) {
                v7 = android.print.PrintAttributes$MediaSize.UNKNOWN_LANDSCAPE;
            } else {
                v7 = android.print.PrintAttributes$MediaSize.UNKNOWN_PORTRAIT;
            }
            ((android.print.PrintManager) this.mContext.getSystemService("print")).print(p10, new android.support.v4.print.PrintHelperKitkat$1(this, p10, this.mScaleMode, p11, p12), new android.print.PrintAttributes$Builder().setMediaSize(v7).setColorMode(this.mColorMode).build());
        }
        return;
    }

    public void printBitmap(String p10, android.net.Uri p11, android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback p12)
    {
        android.support.v4.print.PrintHelperKitkat$3 v0_1 = new android.support.v4.print.PrintHelperKitkat$3(this, p10, p11, p12, this.mScaleMode);
        android.print.PrintManager v8_1 = ((android.print.PrintManager) this.mContext.getSystemService("print"));
        android.print.PrintAttributes$Builder v7_1 = new android.print.PrintAttributes$Builder();
        v7_1.setColorMode(this.mColorMode);
        if ((this.mOrientation != 1) && (this.mOrientation != 0)) {
            if (this.mOrientation == 2) {
                v7_1.setMediaSize(android.print.PrintAttributes$MediaSize.UNKNOWN_PORTRAIT);
            }
        } else {
            v7_1.setMediaSize(android.print.PrintAttributes$MediaSize.UNKNOWN_LANDSCAPE);
        }
        v8_1.print(p10, v0_1, v7_1.build());
        return;
    }

    public void setColorMode(int p1)
    {
        this.mColorMode = p1;
        return;
    }

    public void setOrientation(int p1)
    {
        this.mOrientation = p1;
        return;
    }

    public void setScaleMode(int p1)
    {
        this.mScaleMode = p1;
        return;
    }
}
package android.support.v4.provider;
public abstract class DocumentFile {
    static final String TAG = "DocumentFile";
    private final android.support.v4.provider.DocumentFile mParent;

    DocumentFile(android.support.v4.provider.DocumentFile p1)
    {
        this.mParent = p1;
        return;
    }

    public static android.support.v4.provider.DocumentFile fromFile(java.io.File p2)
    {
        return new android.support.v4.provider.RawDocumentFile(0, p2);
    }

    public static android.support.v4.provider.DocumentFile fromSingleUri(android.content.Context p3, android.net.Uri p4)
    {
        int v1_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.provider.SingleDocumentFile(0, p3, p4);
        }
        return v1_1;
    }

    public static android.support.v4.provider.DocumentFile fromTreeUri(android.content.Context p4, android.net.Uri p5)
    {
        int v1_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.provider.TreeDocumentFile(0, p4, android.support.v4.provider.DocumentsContractApi21.prepareTreeUri(p5));
        }
        return v1_1;
    }

    public static boolean isDocumentUri(android.content.Context p2, android.net.Uri p3)
    {
        int v1_1;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v1_1 = 0;
        } else {
            v1_1 = android.support.v4.provider.DocumentsContractApi19.isDocumentUri(p2, p3);
        }
        return v1_1;
    }

    public abstract boolean canRead();

    public abstract boolean canWrite();

    public abstract android.support.v4.provider.DocumentFile createDirectory();

    public abstract android.support.v4.provider.DocumentFile createFile();

    public abstract boolean delete();

    public abstract boolean exists();

    public android.support.v4.provider.DocumentFile findFile(String p6)
    {
        android.support.v4.provider.DocumentFile[] v2 = this.listFiles();
        int v1 = 0;
        while (v1 < v2.length) {
            int v0 = v2[v1];
            if (!p6.equals(v0.getName())) {
                v1++;
            }
            return v0;
        }
        v0 = 0;
        return v0;
    }

    public abstract String getName();

    public android.support.v4.provider.DocumentFile getParentFile()
    {
        return this.mParent;
    }

    public abstract String getType();

    public abstract android.net.Uri getUri();

    public abstract boolean isDirectory();

    public abstract boolean isFile();

    public abstract long lastModified();

    public abstract long length();

    public abstract android.support.v4.provider.DocumentFile[] listFiles();

    public abstract boolean renameTo();
}
package android.support.v4.provider;
 class DocumentsContractApi19 {
    private static final String TAG = "DocumentFile";

    DocumentsContractApi19()
    {
        return;
    }

    public static boolean canRead(android.content.Context p3, android.net.Uri p4)
    {
        int v0 = 0;
        if ((p3.checkCallingOrSelfUriPermission(p4, 1) == 0) && (!android.text.TextUtils.isEmpty(android.support.v4.provider.DocumentsContractApi19.getRawType(p3, p4)))) {
            v0 = 1;
        }
        return v0;
    }

    public static boolean canWrite(android.content.Context p5, android.net.Uri p6)
    {
        int v2 = 0;
        if (p5.checkCallingOrSelfUriPermission(p6, 2) == 0) {
            String v1 = android.support.v4.provider.DocumentsContractApi19.getRawType(p5, p6);
            int v0 = android.support.v4.provider.DocumentsContractApi19.queryForInt(p5, p6, "flags", 0);
            if (!android.text.TextUtils.isEmpty(v1)) {
                if ((v0 & 4) == 0) {
                    if ((!"vnd.android.document/directory".equals(v1)) || ((v0 & 8) == 0)) {
                        if ((!android.text.TextUtils.isEmpty(v1)) && ((v0 & 2) != 0)) {
                            v2 = 1;
                        }
                    } else {
                        v2 = 1;
                    }
                } else {
                    v2 = 1;
                }
            }
        }
        return v2;
    }

    private static void closeQuietly(AutoCloseable p2)
    {
        if (p2 != null) {
            try {
                p2.close();
            } catch (RuntimeException v0) {
                throw v0;
            } catch (Exception v1) {
            }
        }
        return;
    }

    public static boolean delete(android.content.Context p1, android.net.Uri p2)
    {
        return android.provider.DocumentsContract.deleteDocument(p1.getContentResolver(), p2);
    }

    public static boolean exists(android.content.Context p10, android.net.Uri p11)
    {
        android.content.ContentResolver v0 = p10.getContentResolver();
        try {
            int v1_3;
            String v2_5 = new String[1];
            v2_5[0] = "document_id";
            android.database.Cursor v6 = v0.query(p11, v2_5, 0, 0, 0);
        } catch (int v1_4) {
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            throw v1_4;
        } catch (Exception v7) {
            android.util.Log.w("DocumentFile", new StringBuilder().append("Failed query: ").append(v7).toString());
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            v1_3 = 0;
            return v1_3;
        }
        if (v6.getCount() <= 0) {
            v1_3 = 0;
        } else {
            v1_3 = 1;
        }
        android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
        return v1_3;
    }

    public static String getName(android.content.Context p2, android.net.Uri p3)
    {
        return android.support.v4.provider.DocumentsContractApi19.queryForString(p2, p3, "_display_name", 0);
    }

    private static String getRawType(android.content.Context p2, android.net.Uri p3)
    {
        return android.support.v4.provider.DocumentsContractApi19.queryForString(p2, p3, "mime_type", 0);
    }

    public static String getType(android.content.Context p2, android.net.Uri p3)
    {
        int v0 = android.support.v4.provider.DocumentsContractApi19.getRawType(p2, p3);
        if ("vnd.android.document/directory".equals(v0)) {
            v0 = 0;
        }
        return v0;
    }

    public static boolean isDirectory(android.content.Context p2, android.net.Uri p3)
    {
        return "vnd.android.document/directory".equals(android.support.v4.provider.DocumentsContractApi19.getRawType(p2, p3));
    }

    public static boolean isDocumentUri(android.content.Context p1, android.net.Uri p2)
    {
        return android.provider.DocumentsContract.isDocumentUri(p1, p2);
    }

    public static boolean isFile(android.content.Context p2, android.net.Uri p3)
    {
        int v1_0;
        String v0 = android.support.v4.provider.DocumentsContractApi19.getRawType(p2, p3);
        if ((!"vnd.android.document/directory".equals(v0)) && (!android.text.TextUtils.isEmpty(v0))) {
            v1_0 = 1;
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    public static long lastModified(android.content.Context p4, android.net.Uri p5)
    {
        return android.support.v4.provider.DocumentsContractApi19.queryForLong(p4, p5, "last_modified", 0);
    }

    public static long length(android.content.Context p4, android.net.Uri p5)
    {
        return android.support.v4.provider.DocumentsContractApi19.queryForLong(p4, p5, "_size", 0);
    }

    private static int queryForInt(android.content.Context p2, android.net.Uri p3, String p4, int p5)
    {
        return ((int) android.support.v4.provider.DocumentsContractApi19.queryForLong(p2, p3, p4, ((long) p5)));
    }

    private static long queryForLong(android.content.Context p9, android.net.Uri p10, String p11, long p12)
    {
        android.content.ContentResolver v0 = p9.getContentResolver();
        try {
            String v2_5 = new String[1];
            v2_5[0] = p11;
            android.database.Cursor v6 = v0.query(p10, v2_5, 0, 0, 0);
        } catch (int v1_6) {
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            throw v1_6;
        } catch (Exception v7) {
            android.util.Log.w("DocumentFile", new StringBuilder().append("Failed query: ").append(v7).toString());
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p12;
        }
        if ((!v6.moveToFirst()) || (v6.isNull(0))) {
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p12;
        } else {
            p12 = v6.getLong(0);
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p12;
        }
    }

    private static String queryForString(android.content.Context p8, android.net.Uri p9, String p10, String p11)
    {
        android.content.ContentResolver v0 = p8.getContentResolver();
        try {
            String v2_5 = new String[1];
            v2_5[0] = p10;
            android.database.Cursor v6 = v0.query(p9, v2_5, 0, 0, 0);
        } catch (int v1_6) {
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            throw v1_6;
        } catch (Exception v7) {
            android.util.Log.w("DocumentFile", new StringBuilder().append("Failed query: ").append(v7).toString());
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p11;
        }
        if ((!v6.moveToFirst()) || (v6.isNull(0))) {
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p11;
        } else {
            p11 = v6.getString(0);
            android.support.v4.provider.DocumentsContractApi19.closeQuietly(v6);
            return p11;
        }
    }
}
package android.support.v4.provider;
 class DocumentsContractApi21 {
    private static final String TAG = "DocumentFile";

    DocumentsContractApi21()
    {
        return;
    }

    private static void closeQuietly(AutoCloseable p2)
    {
        if (p2 != null) {
            try {
                p2.close();
            } catch (RuntimeException v0) {
                throw v0;
            } catch (Exception v1) {
            }
        }
        return;
    }

    public static android.net.Uri createDirectory(android.content.Context p1, android.net.Uri p2, String p3)
    {
        return android.support.v4.provider.DocumentsContractApi21.createFile(p1, p2, "vnd.android.document/directory", p3);
    }

    public static android.net.Uri createFile(android.content.Context p1, android.net.Uri p2, String p3, String p4)
    {
        return android.provider.DocumentsContract.createDocument(p1.getContentResolver(), p2, p3, p4);
    }

    public static android.net.Uri[] listFiles(android.content.Context p11, android.net.Uri p12)
    {
        android.content.ContentResolver v0 = p11.getContentResolver();
        android.net.Uri v1 = android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(p12, android.provider.DocumentsContract.getDocumentId(p12));
        java.util.ArrayList v10_1 = new java.util.ArrayList();
        try {
            android.net.Uri[] v2_0 = new String[1];
            v2_0[0] = "document_id";
            android.database.Cursor v6 = v0.query(v1, v2_0, 0, 0, 0);
        } catch (android.net.Uri[] v2_4) {
            android.support.v4.provider.DocumentsContractApi21.closeQuietly(v6);
            throw v2_4;
        } catch (Exception v9) {
            android.util.Log.w("DocumentFile", new StringBuilder().append("Failed query: ").append(v9).toString());
            android.support.v4.provider.DocumentsContractApi21.closeQuietly(v6);
            android.net.Uri[] v2_6 = new android.net.Uri[v10_1.size()];
            return ((android.net.Uri[]) v10_1.toArray(v2_6));
        }
        while (v6.moveToNext()) {
            v10_1.add(android.provider.DocumentsContract.buildDocumentUriUsingTree(p12, v6.getString(0)));
        }
        android.support.v4.provider.DocumentsContractApi21.closeQuietly(v6);
        v2_6 = new android.net.Uri[v10_1.size()];
        return ((android.net.Uri[]) v10_1.toArray(v2_6));
    }

    public static android.net.Uri prepareTreeUri(android.net.Uri p1)
    {
        return android.provider.DocumentsContract.buildDocumentUriUsingTree(p1, android.provider.DocumentsContract.getTreeDocumentId(p1));
    }

    public static android.net.Uri renameTo(android.content.Context p1, android.net.Uri p2, String p3)
    {
        return android.provider.DocumentsContract.renameDocument(p1.getContentResolver(), p2, p3);
    }
}
package android.support.v4.text;
synthetic class BidiFormatter$1 {
}
package android.support.v4.text;
public final class BidiFormatter$Builder {
    private int mFlags;
    private boolean mIsRtlContext;
    private android.support.v4.text.TextDirectionHeuristicCompat mTextDirectionHeuristicCompat;

    public BidiFormatter$Builder()
    {
        this.initialize(android.support.v4.text.BidiFormatter.access$000(java.util.Locale.getDefault()));
        return;
    }

    public BidiFormatter$Builder(java.util.Locale p2)
    {
        this.initialize(android.support.v4.text.BidiFormatter.access$000(p2));
        return;
    }

    public BidiFormatter$Builder(boolean p1)
    {
        this.initialize(p1);
        return;
    }

    private static android.support.v4.text.BidiFormatter getDefaultInstanceFromContext(boolean p1)
    {
        android.support.v4.text.BidiFormatter v0;
        if (!p1) {
            v0 = android.support.v4.text.BidiFormatter.access$300();
        } else {
            v0 = android.support.v4.text.BidiFormatter.access$200();
        }
        return v0;
    }

    private void initialize(boolean p2)
    {
        this.mIsRtlContext = p2;
        this.mTextDirectionHeuristicCompat = android.support.v4.text.BidiFormatter.access$100();
        this.mFlags = 2;
        return;
    }

    public android.support.v4.text.BidiFormatter build()
    {
        if ((this.mFlags != 2) || (this.mTextDirectionHeuristicCompat != android.support.v4.text.BidiFormatter.access$100())) {
            android.support.v4.text.BidiFormatter v0_1 = new android.support.v4.text.BidiFormatter(this.mIsRtlContext, this.mFlags, this.mTextDirectionHeuristicCompat, 0);
        } else {
            v0_1 = android.support.v4.text.BidiFormatter$Builder.getDefaultInstanceFromContext(this.mIsRtlContext);
        }
        return v0_1;
    }

    public android.support.v4.text.BidiFormatter$Builder setTextDirectionHeuristic(android.support.v4.text.TextDirectionHeuristicCompat p1)
    {
        this.mTextDirectionHeuristicCompat = p1;
        return this;
    }

    public android.support.v4.text.BidiFormatter$Builder stereoReset(boolean p2)
    {
        if (!p2) {
            this.mFlags = (this.mFlags & -3);
        } else {
            this.mFlags = (this.mFlags | 2);
        }
        return this;
    }
}
package android.support.v4.text;
 class BidiFormatter$DirectionalityEstimator {
    private static final byte[] DIR_TYPE_CACHE = None;
    private static final int DIR_TYPE_CACHE_SIZE = 1792;
    private int charIndex;
    private final boolean isHtml;
    private char lastChar;
    private final int length;
    private final CharSequence text;

    static BidiFormatter$DirectionalityEstimator()
    {
        byte[] v1_0 = new byte[1792];
        android.support.v4.text.BidiFormatter$DirectionalityEstimator.DIR_TYPE_CACHE = v1_0;
        int v0 = 0;
        while (v0 < 1792) {
            android.support.v4.text.BidiFormatter$DirectionalityEstimator.DIR_TYPE_CACHE[v0] = Character.getDirectionality(v0);
            v0++;
        }
        return;
    }

    BidiFormatter$DirectionalityEstimator(CharSequence p2, boolean p3)
    {
        this.text = p2;
        this.isHtml = p3;
        this.length = p2.length();
        return;
    }

    private static byte getCachedDirectionality(char p1)
    {
        byte v0_1;
        if (p1 >= 1792) {
            v0_1 = Character.getDirectionality(p1);
        } else {
            v0_1 = android.support.v4.text.BidiFormatter$DirectionalityEstimator.DIR_TYPE_CACHE[p1];
        }
        return v0_1;
    }

    private byte skipEntityBackward()
    {
        int v0 = this.charIndex;
        while (this.charIndex > 0) {
            char v1_4 = this.text;
            int v2_2 = (this.charIndex - 1);
            this.charIndex = v2_2;
            this.lastChar = v1_4.charAt(v2_2);
            if (this.lastChar != 38) {
                if (this.lastChar == 59) {
                    break;
                }
            } else {
                char v1_2 = 12;
            }
            return v1_2;
        }
        this.charIndex = v0;
        this.lastChar = 59;
        v1_2 = 13;
        return v1_2;
    }

    private byte skipEntityForward()
    {
        if ((int v0_3 == 59) || (this.charIndex >= this.length)) {
            return 12;
        } else {
            int v0_2 = this.text;
            int v1_2 = this.charIndex;
            this.charIndex = (v1_2 + 1);
            v0_3 = v0_2.charAt(v1_2);
            this.lastChar = v0_3;
        }
    }

    private byte skipTagBackward()
    {
        int v0 = this.charIndex;
        while (this.charIndex > 0) {
            char v2_9 = this.text;
            int v3_6 = (this.charIndex - 1);
            this.charIndex = v3_6;
            this.lastChar = v2_9.charAt(v3_6);
            if (this.lastChar != 60) {
                if (this.lastChar == 62) {
                    break;
                }
                if ((this.lastChar == 34) || (this.lastChar == 39)) {
                    char v1 = this.lastChar;
                    while (this.charIndex > 0) {
                        char v2_6 = this.text;
                        int v3_4 = (this.charIndex - 1);
                        this.charIndex = v3_4;
                        char v2_7 = v2_6.charAt(v3_4);
                        this.lastChar = v2_7;
                        if (v2_7 == v1) {
                            break;
                        }
                    }
                }
            } else {
                char v2_8 = 12;
            }
            return v2_8;
        }
        this.charIndex = v0;
        this.lastChar = 62;
        v2_8 = 13;
        return v2_8;
    }

    private byte skipTagForward()
    {
        int v0 = this.charIndex;
        while (this.charIndex < this.length) {
            char v2_10 = this.text;
            int v3_6 = this.charIndex;
            this.charIndex = (v3_6 + 1);
            this.lastChar = v2_10.charAt(v3_6);
            if (this.lastChar != 62) {
                if ((this.lastChar == 34) || (this.lastChar == 39)) {
                    char v1 = this.lastChar;
                    while (this.charIndex < this.length) {
                        char v2_6 = this.text;
                        int v3_5 = this.charIndex;
                        this.charIndex = (v3_5 + 1);
                        char v2_7 = v2_6.charAt(v3_5);
                        this.lastChar = v2_7;
                        if (v2_7 == v1) {
                            break;
                        }
                    }
                }
            } else {
                char v2_8 = 12;
            }
            return v2_8;
        }
        this.charIndex = v0;
        this.lastChar = 60;
        v2_8 = 13;
        return v2_8;
    }

    byte dirTypeBackward()
    {
        byte v1;
        this.lastChar = this.text.charAt((this.charIndex - 1));
        if (!Character.isLowSurrogate(this.lastChar)) {
            this.charIndex = (this.charIndex - 1);
            v1 = android.support.v4.text.BidiFormatter$DirectionalityEstimator.getCachedDirectionality(this.lastChar);
            if (this.isHtml) {
                if (this.lastChar != 62) {
                    if (this.lastChar == 59) {
                        v1 = this.skipEntityBackward();
                    }
                } else {
                    v1 = this.skipTagBackward();
                }
            }
        } else {
            int v0 = Character.codePointBefore(this.text, this.charIndex);
            this.charIndex = (this.charIndex - Character.charCount(v0));
            v1 = Character.getDirectionality(v0);
        }
        return v1;
    }

    byte dirTypeForward()
    {
        byte v1;
        this.lastChar = this.text.charAt(this.charIndex);
        if (!Character.isHighSurrogate(this.lastChar)) {
            this.charIndex = (this.charIndex + 1);
            v1 = android.support.v4.text.BidiFormatter$DirectionalityEstimator.getCachedDirectionality(this.lastChar);
            if (this.isHtml) {
                if (this.lastChar != 60) {
                    if (this.lastChar == 38) {
                        v1 = this.skipEntityForward();
                    }
                } else {
                    v1 = this.skipTagForward();
                }
            }
        } else {
            int v0 = Character.codePointAt(this.text, this.charIndex);
            this.charIndex = (this.charIndex + Character.charCount(v0));
            v1 = Character.getDirectionality(v0);
        }
        return v1;
    }

    int getEntryDir()
    {
        this.charIndex = 0;
        int v0 = 0;
        int v1 = 0;
        int v2 = 0;
        while ((this.charIndex < this.length) && (v2 == 0)) {
            switch (this.dirTypeForward()) {
                case 0:
                    if (v0 != 0) {
                        v2 = v0;
                    } else {
                        v1 = -1;
                    }
                    break;
                case 1:
                case 2:
                    if (v0 != 0) {
                        v2 = v0;
                    } else {
                        v1 = 1;
                    }
                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 11:
                case 12:
                case 13:
                default:
                    v2 = v0;
                    break;
                case 14:
                case 15:
                    v0++;
                    v1 = -1;
                    break;
                case 16:
                case 17:
                    v0++;
                    v1 = 1;
                    break;
                case 18:
                    v0--;
                    v1 = 0;
                    break;
            }
            return v1;
        }
        if (v2 != 0) {
            if (v1 != 0) {
                return v1;
            }
            while (this.charIndex > 0) {
                switch (this.dirTypeBackward()) {
                    case 14:
                    case 15:
                        if (v2 != v0) {
                            v0--;
                        } else {
                            v1 = -1;
                        }
                    case 16:
                    case 17:
                        if (v2 != v0) {
                            v0--;
                        } else {
                            v1 = 1;
                        }
                        break;
                    case 18:
                        v0++;
                        break;
                    default:
                }
            }
            v1 = 0;
        } else {
            v1 = 0;
        }
        return v1;
    }

    int getExitDir()
    {
        int v2 = -1;
        this.charIndex = this.length;
        int v0 = 0;
        int v1 = 0;
        while (this.charIndex > 0) {
            switch (this.dirTypeBackward()) {
                case 0:
                    if (v0 != 0) {
                        if (v1 == 0) {
                            v1 = v0;
                        }
                    }
                    break;
                case 1:
                case 2:
                    if (v0 != 0) {
                        if (v1 == 0) {
                            v1 = v0;
                        }
                    } else {
                        v2 = 1;
                    }
                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 11:
                case 12:
                case 13:
                default:
                    if (v1 == 0) {
                        v1 = v0;
                    }
                    break;
                case 14:
                case 15:
                    if (v1 != v0) {
                        v0--;
                    }
                    break;
                case 16:
                case 17:
                    if (v1 != v0) {
                        v0--;
                    } else {
                        v2 = 1;
                    }
                    break;
                case 18:
                    v0++;
                    break;
            }
            return v2;
        }
        v2 = 0;
        return v2;
    }
}
package android.support.v4.text;
public final class BidiFormatter {
    private static final int DEFAULT_FLAGS = 2;
    private static final android.support.v4.text.BidiFormatter DEFAULT_LTR_INSTANCE = None;
    private static final android.support.v4.text.BidiFormatter DEFAULT_RTL_INSTANCE = None;
    private static android.support.v4.text.TextDirectionHeuristicCompat DEFAULT_TEXT_DIRECTION_HEURISTIC = None;
    private static final int DIR_LTR = 255;
    private static final int DIR_RTL = 1;
    private static final int DIR_UNKNOWN = 0;
    private static final String EMPTY_STRING = "";
    private static final int FLAG_STEREO_RESET = 2;
    private static final char LRE = 8234;
    private static final char LRM = 8206;
    private static final String LRM_STRING = "";
    private static final char PDF = 8236;
    private static final char RLE = 8235;
    private static final char RLM = 8207;
    private static final String RLM_STRING;
    private final android.support.v4.text.TextDirectionHeuristicCompat mDefaultTextDirectionHeuristicCompat;
    private final int mFlags;
    private final boolean mIsRtlContext;

    static BidiFormatter()
    {
        android.support.v4.text.BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC = android.support.v4.text.TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR;
        android.support.v4.text.BidiFormatter.LRM_STRING = Character.toString(8206);
        android.support.v4.text.BidiFormatter.RLM_STRING = Character.toString(8207);
        android.support.v4.text.BidiFormatter.DEFAULT_LTR_INSTANCE = new android.support.v4.text.BidiFormatter(0, 2, android.support.v4.text.BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC);
        android.support.v4.text.BidiFormatter.DEFAULT_RTL_INSTANCE = new android.support.v4.text.BidiFormatter(1, 2, android.support.v4.text.BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC);
        return;
    }

    private BidiFormatter(boolean p1, int p2, android.support.v4.text.TextDirectionHeuristicCompat p3)
    {
        this.mIsRtlContext = p1;
        this.mFlags = p2;
        this.mDefaultTextDirectionHeuristicCompat = p3;
        return;
    }

    synthetic BidiFormatter(boolean p1, int p2, android.support.v4.text.TextDirectionHeuristicCompat p3, android.support.v4.text.BidiFormatter$1 p4)
    {
        this(p1, p2, p3);
        return;
    }

    static synthetic boolean access$000(java.util.Locale p1)
    {
        return android.support.v4.text.BidiFormatter.isRtlLocale(p1);
    }

    static synthetic android.support.v4.text.TextDirectionHeuristicCompat access$100()
    {
        return android.support.v4.text.BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC;
    }

    static synthetic android.support.v4.text.BidiFormatter access$200()
    {
        return android.support.v4.text.BidiFormatter.DEFAULT_RTL_INSTANCE;
    }

    static synthetic android.support.v4.text.BidiFormatter access$300()
    {
        return android.support.v4.text.BidiFormatter.DEFAULT_LTR_INSTANCE;
    }

    private static int getEntryDir(CharSequence p2)
    {
        return new android.support.v4.text.BidiFormatter$DirectionalityEstimator(p2, 0).getEntryDir();
    }

    private static int getExitDir(CharSequence p2)
    {
        return new android.support.v4.text.BidiFormatter$DirectionalityEstimator(p2, 0).getExitDir();
    }

    public static android.support.v4.text.BidiFormatter getInstance()
    {
        return new android.support.v4.text.BidiFormatter$Builder().build();
    }

    public static android.support.v4.text.BidiFormatter getInstance(java.util.Locale p1)
    {
        return new android.support.v4.text.BidiFormatter$Builder(p1).build();
    }

    public static android.support.v4.text.BidiFormatter getInstance(boolean p1)
    {
        return new android.support.v4.text.BidiFormatter$Builder(p1).build();
    }

    private static boolean isRtlLocale(java.util.Locale p2)
    {
        int v0 = 1;
        if (android.support.v4.text.TextUtilsCompat.getLayoutDirectionFromLocale(p2) != 1) {
            v0 = 0;
        }
        return v0;
    }

    private String markAfter(CharSequence p4, android.support.v4.text.TextDirectionHeuristicCompat p5)
    {
        String v1_3;
        boolean v0 = p5.isRtl(p4, 0, p4.length());
        if ((this.mIsRtlContext) || ((!v0) && (android.support.v4.text.BidiFormatter.getExitDir(p4) != 1))) {
            if ((!this.mIsRtlContext) || ((v0) && (android.support.v4.text.BidiFormatter.getExitDir(p4) != -1))) {
                v1_3 = "";
            } else {
                v1_3 = android.support.v4.text.BidiFormatter.RLM_STRING;
            }
        } else {
            v1_3 = android.support.v4.text.BidiFormatter.LRM_STRING;
        }
        return v1_3;
    }

    private String markBefore(CharSequence p4, android.support.v4.text.TextDirectionHeuristicCompat p5)
    {
        String v1_3;
        boolean v0 = p5.isRtl(p4, 0, p4.length());
        if ((this.mIsRtlContext) || ((!v0) && (android.support.v4.text.BidiFormatter.getEntryDir(p4) != 1))) {
            if ((!this.mIsRtlContext) || ((v0) && (android.support.v4.text.BidiFormatter.getEntryDir(p4) != -1))) {
                v1_3 = "";
            } else {
                v1_3 = android.support.v4.text.BidiFormatter.RLM_STRING;
            }
        } else {
            v1_3 = android.support.v4.text.BidiFormatter.LRM_STRING;
        }
        return v1_3;
    }

    public boolean getStereoReset()
    {
        int v0_2;
        if ((this.mFlags & 2) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isRtl(CharSequence p4)
    {
        return this.mDefaultTextDirectionHeuristicCompat.isRtl(p4, 0, p4.length());
    }

    public boolean isRtl(String p2)
    {
        return this.isRtl(p2);
    }

    public boolean isRtlContext()
    {
        return this.mIsRtlContext;
    }

    public CharSequence unicodeWrap(CharSequence p3)
    {
        return this.unicodeWrap(p3, this.mDefaultTextDirectionHeuristicCompat, 1);
    }

    public CharSequence unicodeWrap(CharSequence p2, android.support.v4.text.TextDirectionHeuristicCompat p3)
    {
        return this.unicodeWrap(p2, p3, 1);
    }

    public CharSequence unicodeWrap(CharSequence p5, android.support.v4.text.TextDirectionHeuristicCompat p6, boolean p7)
    {
        android.text.SpannableStringBuilder v1_0;
        if (p5 != null) {
            boolean v0 = p6.isRtl(p5, 0, p5.length());
            v1_0 = new android.text.SpannableStringBuilder();
            if ((this.getStereoReset()) && (p7)) {
                String v2_1;
                if (!v0) {
                    v2_1 = android.support.v4.text.TextDirectionHeuristicsCompat.LTR;
                } else {
                    v2_1 = android.support.v4.text.TextDirectionHeuristicsCompat.RTL;
                }
                v1_0.append(this.markBefore(p5, v2_1));
            }
            if (v0 == this.mIsRtlContext) {
                v1_0.append(p5);
            } else {
                String v2_4;
                if (!v0) {
                    v2_4 = 8234;
                } else {
                    v2_4 = 8235;
                }
                v1_0.append(v2_4);
                v1_0.append(p5);
                v1_0.append(8236);
            }
            if (p7) {
                String v2_6;
                if (!v0) {
                    v2_6 = android.support.v4.text.TextDirectionHeuristicsCompat.LTR;
                } else {
                    v2_6 = android.support.v4.text.TextDirectionHeuristicsCompat.RTL;
                }
                v1_0.append(this.markAfter(p5, v2_6));
            }
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    public CharSequence unicodeWrap(CharSequence p2, boolean p3)
    {
        return this.unicodeWrap(p2, this.mDefaultTextDirectionHeuristicCompat, p3);
    }

    public String unicodeWrap(String p3)
    {
        return this.unicodeWrap(p3, this.mDefaultTextDirectionHeuristicCompat, 1);
    }

    public String unicodeWrap(String p2, android.support.v4.text.TextDirectionHeuristicCompat p3)
    {
        return this.unicodeWrap(p2, p3, 1);
    }

    public String unicodeWrap(String p2, android.support.v4.text.TextDirectionHeuristicCompat p3, boolean p4)
    {
        String v0_1;
        if (p2 != null) {
            v0_1 = this.unicodeWrap(p2, p3, p4).toString();
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public String unicodeWrap(String p2, boolean p3)
    {
        return this.unicodeWrap(p2, this.mDefaultTextDirectionHeuristicCompat, p3);
    }
}
package android.support.v4.text;
interface ICUCompat$ICUCompatImpl {

    public abstract String maximizeAndGetScript();
}
package android.support.v4.text;
public final class ICUCompat {
    private static final android.support.v4.text.ICUCompat$ICUCompatImpl IMPL;

    static ICUCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 14) {
                android.support.v4.text.ICUCompat.IMPL = new android.support.v4.text.ICUCompat$ICUCompatImplBase();
            } else {
                android.support.v4.text.ICUCompat.IMPL = new android.support.v4.text.ICUCompat$ICUCompatImplIcs();
            }
        } else {
            android.support.v4.text.ICUCompat.IMPL = new android.support.v4.text.ICUCompat$ICUCompatImplLollipop();
        }
        return;
    }

    private ICUCompat()
    {
        return;
    }

    public static String maximizeAndGetScript(java.util.Locale p1)
    {
        return android.support.v4.text.ICUCompat.IMPL.maximizeAndGetScript(p1);
    }
}
package android.support.v4.text;
 class ICUCompatApi23 {
    private static final String TAG = "ICUCompatIcs";
    private static reflect.Method sAddLikelySubtagsMethod;

    static ICUCompatApi23()
    {
        try {
            Class v0 = Class.forName("libcore.icu.ICU");
            Class[] v3_1 = new Class[1];
            v3_1[0] = java.util.Locale;
            android.support.v4.text.ICUCompatApi23.sAddLikelySubtagsMethod = v0.getMethod("addLikelySubtags", v3_1);
            return;
        } catch (Exception v1) {
            throw new IllegalStateException(v1);
        }
    }

    ICUCompatApi23()
    {
        return;
    }

    public static String maximizeAndGetScript(java.util.Locale p4)
    {
        try {
            Object[] v0 = new Object[1];
            v0[0] = p4;
            String v2_1 = ((java.util.Locale) android.support.v4.text.ICUCompatApi23.sAddLikelySubtagsMethod.invoke(0, v0)).getScript();
        } catch (IllegalAccessException v1_1) {
            android.util.Log.w("ICUCompatIcs", v1_1);
            v2_1 = p4.getScript();
        } catch (IllegalAccessException v1_0) {
            android.util.Log.w("ICUCompatIcs", v1_0);
        }
        return v2_1;
    }
}
package android.support.v4.text;
 class ICUCompatIcs {
    private static final String TAG = "ICUCompatIcs";
    private static reflect.Method sAddLikelySubtagsMethod;
    private static reflect.Method sGetScriptMethod;

    static ICUCompatIcs()
    {
        try {
            Class v0 = Class.forName("libcore.icu.ICU");
        } catch (Exception v1) {
            android.support.v4.text.ICUCompatIcs.sGetScriptMethod = 0;
            android.support.v4.text.ICUCompatIcs.sAddLikelySubtagsMethod = 0;
            android.util.Log.w("ICUCompatIcs", v1);
            return;
        }
        if (v0 == null) {
            return;
        } else {
            Class[] v3_3 = new Class[1];
            v3_3[0] = String;
            android.support.v4.text.ICUCompatIcs.sGetScriptMethod = v0.getMethod("getScript", v3_3);
            Class[] v3_1 = new Class[1];
            v3_1[0] = String;
            android.support.v4.text.ICUCompatIcs.sAddLikelySubtagsMethod = v0.getMethod("addLikelySubtags", v3_1);
            return;
        }
    }

    ICUCompatIcs()
    {
        return;
    }

    private static String addLikelySubtags(java.util.Locale p5)
    {
        String v2 = p5.toString();
        try {
            String v3_1;
            if (android.support.v4.text.ICUCompatIcs.sAddLikelySubtagsMethod == null) {
                v3_1 = v2;
            } else {
                Object[] v0 = new Object[1];
                v0[0] = v2;
                v3_1 = ((String) android.support.v4.text.ICUCompatIcs.sAddLikelySubtagsMethod.invoke(0, v0));
            }
        } catch (reflect.InvocationTargetException v1_1) {
            android.util.Log.w("ICUCompatIcs", v1_1);
        } catch (reflect.InvocationTargetException v1_0) {
            android.util.Log.w("ICUCompatIcs", v1_0);
        }
        return v3_1;
    }

    private static String getScript(String p5)
    {
        try {
            int v2_2;
            if (android.support.v4.text.ICUCompatIcs.sGetScriptMethod == null) {
                v2_2 = 0;
            } else {
                Object[] v0 = new Object[1];
                v0[0] = p5;
                v2_2 = ((String) android.support.v4.text.ICUCompatIcs.sGetScriptMethod.invoke(0, v0));
            }
        } catch (reflect.InvocationTargetException v1_1) {
            android.util.Log.w("ICUCompatIcs", v1_1);
        } catch (reflect.InvocationTargetException v1_0) {
            android.util.Log.w("ICUCompatIcs", v1_0);
        }
        return v2_2;
    }

    public static String maximizeAndGetScript(java.util.Locale p2)
    {
        int v1;
        String v0 = android.support.v4.text.ICUCompatIcs.addLikelySubtags(p2);
        if (v0 == null) {
            v1 = 0;
        } else {
            v1 = android.support.v4.text.ICUCompatIcs.getScript(v0);
        }
        return v1;
    }
}
package android.support.v4.text;
public interface TextDirectionHeuristicCompat {

    public abstract boolean isRtl();

    public abstract boolean isRtl();
}
package android.support.v4.text;
interface TextDirectionHeuristicsCompat$TextDirectionAlgorithm {

    public abstract int checkRtl();
}
package android.support.v4.text;
public final class TextDirectionHeuristicsCompat {
    public static final android.support.v4.text.TextDirectionHeuristicCompat ANYRTL_LTR = None;
    public static final android.support.v4.text.TextDirectionHeuristicCompat FIRSTSTRONG_LTR = None;
    public static final android.support.v4.text.TextDirectionHeuristicCompat FIRSTSTRONG_RTL = None;
    public static final android.support.v4.text.TextDirectionHeuristicCompat LOCALE = None;
    public static final android.support.v4.text.TextDirectionHeuristicCompat LTR = None;
    public static final android.support.v4.text.TextDirectionHeuristicCompat RTL = None;
    private static final int STATE_FALSE = 1;
    private static final int STATE_TRUE = 0;
    private static final int STATE_UNKNOWN = 2;

    static TextDirectionHeuristicsCompat()
    {
        android.support.v4.text.TextDirectionHeuristicsCompat.LTR = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(0, 0);
        android.support.v4.text.TextDirectionHeuristicsCompat.RTL = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(0, 1);
        android.support.v4.text.TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(android.support.v4.text.TextDirectionHeuristicsCompat$FirstStrong.INSTANCE, 0);
        android.support.v4.text.TextDirectionHeuristicsCompat.FIRSTSTRONG_RTL = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(android.support.v4.text.TextDirectionHeuristicsCompat$FirstStrong.INSTANCE, 1);
        android.support.v4.text.TextDirectionHeuristicsCompat.ANYRTL_LTR = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong.INSTANCE_RTL, 0);
        android.support.v4.text.TextDirectionHeuristicsCompat.LOCALE = android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale.INSTANCE;
        return;
    }

    private TextDirectionHeuristicsCompat()
    {
        return;
    }

    static int isRtlText(int p1)
    {
        int v0;
        switch (p1) {
            case 0:
                v0 = 1;
                break;
            case 1:
            case 2:
                v0 = 0;
                break;
            default:
                v0 = 2;
        }
        return v0;
    }

    static int isRtlTextOrFormat(int p1)
    {
        int v0;
        switch (p1) {
            case 0:
            case 14:
            case 15:
                v0 = 1;
                break;
            case 1:
            case 2:
            case 16:
            case 17:
                v0 = 0;
                break;
            default:
                v0 = 2;
        }
        return v0;
    }
}
package android.support.v4.text;
 class TextUtilsCompat$TextUtilsCompatImpl {

    TextUtilsCompat$TextUtilsCompatImpl()
    {
        return;
    }

    private static int getLayoutDirectionFromFirstChar(java.util.Locale p2)
    {
        int v0 = 0;
        switch (Character.getDirectionality(p2.getDisplayName(p2).charAt(0))) {
            case 1:
            case 2:
                v0 = 1;
                break;
        }
        return v0;
    }

    public int getLayoutDirectionFromLocale(java.util.Locale p3)
    {
        if ((p3 == null) || (p3.equals(android.support.v4.text.TextUtilsCompat.ROOT))) {
            int v1_4 = 0;
        } else {
            String v0 = android.support.v4.text.ICUCompat.maximizeAndGetScript(p3);
            if (v0 != null) {
                if ((!v0.equalsIgnoreCase(android.support.v4.text.TextUtilsCompat.ARAB_SCRIPT_SUBTAG)) && (!v0.equalsIgnoreCase(android.support.v4.text.TextUtilsCompat.HEBR_SCRIPT_SUBTAG))) {
                } else {
                    v1_4 = 1;
                }
            } else {
                v1_4 = android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl.getLayoutDirectionFromFirstChar(p3);
            }
        }
        return v1_4;
    }

    public String htmlEncode(String p5)
    {
        StringBuilder v2_1 = new StringBuilder();
        int v1 = 0;
        while (v1 < p5.length()) {
            char v0 = p5.charAt(v1);
            switch (v0) {
                case 34:
                    v2_1.append("&quot;");
                    break;
                case 38:
                    v2_1.append("&amp;");
                    break;
                case 39:
                    v2_1.append("&#39;");
                    break;
                case 60:
                    v2_1.append("&lt;");
                    break;
                case 62:
                    v2_1.append("&gt;");
                    break;
                default:
                    v2_1.append(v0);
            }
            v1++;
        }
        return v2_1.toString();
    }
}
package android.support.v4.text;
public final class TextUtilsCompat {
    static String ARAB_SCRIPT_SUBTAG;
    static String HEBR_SCRIPT_SUBTAG;
    private static final android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl IMPL;
    public static final java.util.Locale ROOT;

    static TextUtilsCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 17) {
            android.support.v4.text.TextUtilsCompat.IMPL = new android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl();
        } else {
            android.support.v4.text.TextUtilsCompat.IMPL = new android.support.v4.text.TextUtilsCompat$TextUtilsCompatJellybeanMr1Impl();
        }
        android.support.v4.text.TextUtilsCompat.ROOT = new java.util.Locale("", "");
        android.support.v4.text.TextUtilsCompat.ARAB_SCRIPT_SUBTAG = "Arab";
        android.support.v4.text.TextUtilsCompat.HEBR_SCRIPT_SUBTAG = "Hebr";
        return;
    }

    private TextUtilsCompat()
    {
        return;
    }

    public static int getLayoutDirectionFromLocale(java.util.Locale p1)
    {
        return android.support.v4.text.TextUtilsCompat.IMPL.getLayoutDirectionFromLocale(p1);
    }

    public static String htmlEncode(String p1)
    {
        return android.support.v4.text.TextUtilsCompat.IMPL.htmlEncode(p1);
    }
}
package android.support.v4.text;
 class TextUtilsCompatJellybeanMr1 {

    TextUtilsCompatJellybeanMr1()
    {
        return;
    }

    public static int getLayoutDirectionFromLocale(java.util.Locale p1)
    {
        return android.text.TextUtils.getLayoutDirectionFromLocale(p1);
    }

    public static String htmlEncode(String p1)
    {
        return android.text.TextUtils.htmlEncode(p1);
    }
}
package android.support.v4.text.util;
final class LinkifyCompat$1 implements java.util.Comparator {

    LinkifyCompat$1()
    {
        return;
    }

    public final int compare(android.support.v4.text.util.LinkifyCompat$LinkSpec p5, android.support.v4.text.util.LinkifyCompat$LinkSpec p6)
    {
        int v0 = -1;
        if (p5.start >= p6.start) {
            if (p5.start <= p6.start) {
                if (p5.end >= p6.end) {
                    if (p5.end <= p6.end) {
                        v0 = 0;
                    }
                } else {
                    v0 = 1;
                }
            } else {
                v0 = 1;
            }
        }
        return v0;
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((android.support.v4.text.util.LinkifyCompat$LinkSpec) p2), ((android.support.v4.text.util.LinkifyCompat$LinkSpec) p3));
    }
}
package android.support.v4.text.util;
 class LinkifyCompat$LinkSpec {
    int end;
    android.text.style.URLSpan frameworkAddedSpan;
    int start;
    String url;

    LinkifyCompat$LinkSpec()
    {
        return;
    }
}
package android.support.v4.text.util;
public interface annotation LinkifyCompat$LinkifyMask implements java.lang.annotation.Annotation {
}
package android.support.v4.text.util;
public final class LinkifyCompat {
    private static final java.util.Comparator COMPARATOR;
    private static final String[] EMPTY_STRING;

    static LinkifyCompat()
    {
        android.support.v4.text.util.LinkifyCompat$1 v0_1 = new String[0];
        android.support.v4.text.util.LinkifyCompat.EMPTY_STRING = v0_1;
        android.support.v4.text.util.LinkifyCompat.COMPARATOR = new android.support.v4.text.util.LinkifyCompat$1();
        return;
    }

    private LinkifyCompat()
    {
        return;
    }

    private static void addLinkMovementMethod(android.widget.TextView p2)
    {
        android.text.method.MovementMethod v0 = p2.getMovementMethod();
        if (((v0 == null) || (!(v0 instanceof android.text.method.LinkMovementMethod))) && (p2.getLinksClickable())) {
            p2.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
        }
        return;
    }

    public static final void addLinks(android.widget.TextView p6, java.util.regex.Pattern p7, String p8)
    {
        android.support.v4.text.util.LinkifyCompat.addLinks(p6, p7, p8, 0, 0, 0);
        return;
    }

    public static final void addLinks(android.widget.TextView p6, java.util.regex.Pattern p7, String p8, android.text.util.Linkify$MatchFilter p9, android.text.util.Linkify$TransformFilter p10)
    {
        android.support.v4.text.util.LinkifyCompat.addLinks(p6, p7, p8, 0, p9, p10);
        return;
    }

    public static final void addLinks(android.widget.TextView p7, java.util.regex.Pattern p8, String p9, String[] p10, android.text.util.Linkify$MatchFilter p11, android.text.util.Linkify$TransformFilter p12)
    {
        android.text.SpannableString v0 = android.text.SpannableString.valueOf(p7.getText());
        if (android.support.v4.text.util.LinkifyCompat.addLinks(v0, p8, p9, p10, p11, p12)) {
            p7.setText(v0);
            android.support.v4.text.util.LinkifyCompat.addLinkMovementMethod(p7);
        }
        return;
    }

    public static final boolean addLinks(android.text.Spannable p12, int p13)
    {
        int v1_16;
        if (p13 != 0) {
            android.text.style.URLSpan[] v9_1 = ((android.text.style.URLSpan[]) p12.getSpans(0, p12.length(), android.text.style.URLSpan));
            int v7 = (v9_1.length - 1);
            while (v7 >= 0) {
                p12.removeSpan(v9_1[v7]);
                v7--;
            }
            if ((p13 & 4) != 0) {
                android.text.util.Linkify.addLinks(p12, 4);
            }
            java.util.ArrayList v0_1 = new java.util.ArrayList();
            if ((p13 & 1) != 0) {
                int v3_0 = new String[3];
                v3_0[0] = "http://";
                v3_0[1] = "https://";
                v3_0[2] = "rtsp://";
                android.support.v4.text.util.LinkifyCompat.gatherLinks(v0_1, p12, android.support.v4.util.PatternsCompat.AUTOLINK_WEB_URL, v3_0, android.text.util.Linkify.sUrlMatchFilter, 0);
            }
            if ((p13 & 2) != 0) {
                int v3_1 = new String[1];
                v3_1[0] = "mailto:";
                android.support.v4.text.util.LinkifyCompat.gatherLinks(v0_1, p12, android.support.v4.util.PatternsCompat.AUTOLINK_EMAIL_ADDRESS, v3_1, 0, 0);
            }
            if ((p13 & 8) != 0) {
                android.support.v4.text.util.LinkifyCompat.gatherMapLinks(v0_1, p12);
            }
            android.support.v4.text.util.LinkifyCompat.pruneOverlaps(v0_1, p12);
            if (v0_1.size() != 0) {
                int v1_15 = v0_1.iterator();
                while (v1_15.hasNext()) {
                    android.support.v4.text.util.LinkifyCompat$LinkSpec v8_1 = ((android.support.v4.text.util.LinkifyCompat$LinkSpec) v1_15.next());
                    if (v8_1.frameworkAddedSpan == null) {
                        android.support.v4.text.util.LinkifyCompat.applyLink(v8_1.url, v8_1.start, v8_1.end, p12);
                    }
                }
                v1_16 = 1;
            } else {
                v1_16 = 0;
            }
        } else {
            v1_16 = 0;
        }
        return v1_16;
    }

    public static final boolean addLinks(android.text.Spannable p6, java.util.regex.Pattern p7, String p8)
    {
        return android.support.v4.text.util.LinkifyCompat.addLinks(p6, p7, p8, 0, 0, 0);
    }

    public static final boolean addLinks(android.text.Spannable p6, java.util.regex.Pattern p7, String p8, android.text.util.Linkify$MatchFilter p9, android.text.util.Linkify$TransformFilter p10)
    {
        return android.support.v4.text.util.LinkifyCompat.addLinks(p6, p7, p8, 0, p9, p10);
    }

    public static final boolean addLinks(android.text.Spannable p12, java.util.regex.Pattern p13, String p14, String[] p15, android.text.util.Linkify$MatchFilter p16, android.text.util.Linkify$TransformFilter p17)
    {
        if (p14 == null) {
            p14 = "";
        }
        if ((p15 == null) || (p15.length < 1)) {
            p15 = android.support.v4.text.util.LinkifyCompat.EMPTY_STRING;
        }
        String[] v7 = new String[(p15.length + 1)];
        v7[0] = p14.toLowerCase(java.util.Locale.ROOT);
        int v4 = 0;
        while (v4 < p15.length) {
            String v10_7;
            String v6 = p15[v4];
            int v11_3 = (v4 + 1);
            if (v6 != null) {
                v10_7 = v6.toLowerCase(java.util.Locale.ROOT);
            } else {
                v10_7 = "";
            }
            v7[v11_3] = v10_7;
            v4++;
        }
        int v3 = 0;
        java.util.regex.Matcher v5 = p13.matcher(p12);
        while (v5.find()) {
            int v8 = v5.start();
            int v2 = v5.end();
            boolean v1 = 1;
            if (p16 != null) {
                v1 = p16.acceptMatch(p12, v8, v2);
            }
            if (v1) {
                android.support.v4.text.util.LinkifyCompat.applyLink(android.support.v4.text.util.LinkifyCompat.makeUrl(v5.group(0), v7, v5, p17), v8, v2, p12);
                v3 = 1;
            }
        }
        return v3;
    }

    public static final boolean addLinks(android.widget.TextView p5, int p6)
    {
        int v2 = 0;
        if (p6 != 0) {
            android.text.Spannable v1_1 = p5.getText();
            if (!(v1_1 instanceof android.text.Spannable)) {
                android.text.SpannableString v0 = android.text.SpannableString.valueOf(v1_1);
                if (android.support.v4.text.util.LinkifyCompat.addLinks(v0, p6)) {
                    android.support.v4.text.util.LinkifyCompat.addLinkMovementMethod(p5);
                    p5.setText(v0);
                    v2 = 1;
                }
            } else {
                if (android.support.v4.text.util.LinkifyCompat.addLinks(((android.text.Spannable) v1_1), p6)) {
                    android.support.v4.text.util.LinkifyCompat.addLinkMovementMethod(p5);
                    v2 = 1;
                }
            }
        }
        return v2;
    }

    private static void applyLink(String p2, int p3, int p4, android.text.Spannable p5)
    {
        p5.setSpan(new android.text.style.URLSpan(p2), p3, p4, 33);
        return;
    }

    private static void gatherLinks(java.util.ArrayList p6, android.text.Spannable p7, java.util.regex.Pattern p8, String[] p9, android.text.util.Linkify$MatchFilter p10, android.text.util.Linkify$TransformFilter p11)
    {
        java.util.regex.Matcher v1 = p8.matcher(p7);
        while (v1.find()) {
            int v3 = v1.start();
            int v0 = v1.end();
            if ((p10 == null) || (p10.acceptMatch(p7, v3, v0))) {
                android.support.v4.text.util.LinkifyCompat$LinkSpec v2_1 = new android.support.v4.text.util.LinkifyCompat$LinkSpec();
                v2_1.url = android.support.v4.text.util.LinkifyCompat.makeUrl(v1.group(0), p9, v1, p11);
                v2_1.start = v3;
                v2_1.end = v0;
                p6.add(v2_1);
            }
        }
        return;
    }

    private static final void gatherMapLinks(java.util.ArrayList p11, android.text.Spannable p12)
    {
        String v8 = p12.toString();
        int v1 = 0;
        try {
            while(true) {
                String v0 = android.webkit.WebView.findAddress(v8);
                android.support.v4.text.util.LinkifyCompat$LinkSpec v6_0.url = new StringBuilder().append("geo:0,0?q=").append(java.net.URLEncoder.encode(v0, "UTF-8")).toString();
                p11.add(v6_0);
            }
            return;
        } catch (java.io.UnsupportedEncodingException v2) {
            return;
        }
        if (v0 != null) {
            int v7 = v8.indexOf(v0);
            if (v7 >= 0) {
                v6_0 = new android.support.v4.text.util.LinkifyCompat$LinkSpec();
                int v4 = (v7 + v0.length());
                v6_0.start = (v1 + v7);
                v6_0.end = (v1 + v4);
                v8 = v8.substring(v4);
                v1 += v4;
                try {
                } catch (java.io.UnsupportedEncodingException v2) {
                }
            }
        }
        return;
    }

    private static String makeUrl(String p9, String[] p10, java.util.regex.Matcher p11, android.text.util.Linkify$TransformFilter p12)
    {
        if (p12 != null) {
            p9 = p12.transformUrl(p11, p9);
        }
        int v7 = 0;
        int v8 = 0;
        while (v8 < p10.length) {
            if (!p9.regionMatches(1, 0, p10[v8], 0, p10[v8].length())) {
                v8++;
            } else {
                v7 = 1;
                if (p9.regionMatches(0, 0, p10[v8], 0, p10[v8].length())) {
                    break;
                }
                p9 = new StringBuilder().append(p10[v8]).append(p9.substring(p10[v8].length())).toString();
                break;
            }
        }
        if ((v7 == 0) && (p10.length > 0)) {
            p9 = new StringBuilder().append(p10[0]).append(p9).toString();
        }
        return p9;
    }

    private static final void pruneOverlaps(java.util.ArrayList p11, android.text.Spannable p12)
    {
        android.text.style.URLSpan[] v7_1 = ((android.text.style.URLSpan[]) p12.getSpans(0, p12.length(), android.text.style.URLSpan));
        int v2_1 = 0;
        while (v2_1 < v7_1.length) {
            android.support.v4.text.util.LinkifyCompat$LinkSpec v6_1 = new android.support.v4.text.util.LinkifyCompat$LinkSpec();
            v6_1.frameworkAddedSpan = v7_1[v2_1];
            v6_1.start = p12.getSpanStart(v7_1[v2_1]);
            v6_1.end = p12.getSpanEnd(v7_1[v2_1]);
            p11.add(v6_1);
            v2_1++;
        }
        java.util.Collections.sort(p11, android.support.v4.text.util.LinkifyCompat.COMPARATOR);
        int v3 = p11.size();
        int v2_0 = 0;
        while (v2_0 < (v3 - 1)) {
            android.support.v4.text.util.LinkifyCompat$LinkSpec v0_1 = ((android.support.v4.text.util.LinkifyCompat$LinkSpec) p11.get(v2_0));
            android.support.v4.text.util.LinkifyCompat$LinkSpec v1_1 = ((android.support.v4.text.util.LinkifyCompat$LinkSpec) p11.get((v2_0 + 1)));
            int v4 = -1;
            if ((v0_1.start <= v1_1.start) && (v0_1.end > v1_1.start)) {
                if (v1_1.end > v0_1.end) {
                    if ((v0_1.end - v0_1.start) <= (v1_1.end - v1_1.start)) {
                        if ((v0_1.end - v0_1.start) < (v1_1.end - v1_1.start)) {
                            v4 = v2_0;
                        }
                    } else {
                        v4 = (v2_0 + 1);
                    }
                } else {
                    v4 = (v2_0 + 1);
                }
                if (v4 != -1) {
                    android.text.style.URLSpan v5 = ((android.support.v4.text.util.LinkifyCompat$LinkSpec) p11.get(v4)).frameworkAddedSpan;
                    if (v5 != null) {
                        p12.removeSpan(v5);
                    }
                    p11.remove(v4);
                    v3--;
                }
            }
            v2_0++;
        }
        return;
    }
}
package android.support.v4.util;
public class AtomicFile {
    private final java.io.File mBackupName;
    private final java.io.File mBaseName;

    public AtomicFile(java.io.File p4)
    {
        this.mBaseName = p4;
        this.mBackupName = new java.io.File(new StringBuilder().append(p4.getPath()).append(".bak").toString());
        return;
    }

    static boolean sync(java.io.FileOutputStream p1)
    {
        if (p1 == null) {
            int v0_1 = 1;
        } else {
            try {
                p1.getFD().sync();
            } catch (int v0) {
                v0_1 = 0;
            }
        }
        return v0_1;
    }

    public void delete()
    {
        this.mBaseName.delete();
        this.mBackupName.delete();
        return;
    }

    public void failWrite(java.io.FileOutputStream p4)
    {
        if (p4 != null) {
            android.support.v4.util.AtomicFile.sync(p4);
            try {
                p4.close();
                this.mBaseName.delete();
                this.mBackupName.renameTo(this.mBaseName);
            } catch (java.io.IOException v0) {
                android.util.Log.w("AtomicFile", "failWrite: Got exception:", v0);
            }
        }
        return;
    }

    public void finishWrite(java.io.FileOutputStream p4)
    {
        if (p4 != null) {
            android.support.v4.util.AtomicFile.sync(p4);
            try {
                p4.close();
                this.mBackupName.delete();
            } catch (java.io.IOException v0) {
                android.util.Log.w("AtomicFile", "finishWrite: Got exception:", v0);
            }
        }
        return;
    }

    public java.io.File getBaseFile()
    {
        return this.mBaseName;
    }

    public java.io.FileInputStream openRead()
    {
        if (this.mBackupName.exists()) {
            this.mBaseName.delete();
            this.mBackupName.renameTo(this.mBaseName);
        }
        return new java.io.FileInputStream(this.mBaseName);
    }

    public byte[] readFully()
    {
        java.io.FileInputStream v5 = this.openRead();
        int v4 = 0;
        try {
            byte[] v2 = new byte[v5.available()];
        } catch (int v6_2) {
            v5.close();
            throw v6_2;
        }
        do {
            int v0 = v5.read(v2, v4, (v2.length - v4));
            if (v0 > 0) {
                v4 += v0;
                int v1_0 = v5.available();
            } else {
                v5.close();
                return v2;
            }
        } while(v1_0 <= (v2.length - v4));
        byte[] v3 = new byte[(v4 + v1_0)];
        System.arraycopy(v2, 0, v3, 0, v4);
        v2 = v3;
    }

    public java.io.FileOutputStream startWrite()
    {
        if (this.mBaseName.exists()) {
            if (this.mBackupName.exists()) {
                this.mBaseName.delete();
            } else {
                if (!this.mBaseName.renameTo(this.mBackupName)) {
                    android.util.Log.w("AtomicFile", new StringBuilder().append("Couldn\'t rename file ").append(this.mBaseName).append(" to backup file ").append(this.mBackupName).toString());
                }
            }
        }
        try {
            java.io.FileOutputStream v3_1 = new java.io.FileOutputStream(this.mBaseName);
        } catch (java.io.FileNotFoundException v0) {
            if (this.mBaseName.getParentFile().mkdirs()) {
                try {
                    v3_1 = new java.io.FileOutputStream(this.mBaseName);
                } catch (java.io.FileNotFoundException v1) {
                    throw new java.io.IOException(new StringBuilder().append("Couldn\'t create ").append(this.mBaseName).toString());
                }
            } else {
                throw new java.io.IOException(new StringBuilder().append("Couldn\'t create directory ").append(this.mBaseName).toString());
            }
        }
        return v3_1;
    }
}
package android.support.v4.util;
public final class CircularArray {
    private int mCapacityBitmask;
    private Object[] mElements;
    private int mHead;
    private int mTail;

    public CircularArray()
    {
        this(8);
        return;
    }

    public CircularArray(int p4)
    {
        if (p4 >= 1) {
            if (p4 <= 1073741824) {
                int v0;
                if (Integer.bitCount(p4) == 1) {
                    v0 = p4;
                } else {
                    v0 = (Integer.highestOneBit((p4 - 1)) << 1);
                }
                this.mCapacityBitmask = (v0 - 1);
                Object[] v1_2 = new Object[v0];
                this.mElements = ((Object[]) v1_2);
                return;
            } else {
                throw new IllegalArgumentException("capacity must be <= 2^30");
            }
        } else {
            throw new IllegalArgumentException("capacity must be >= 1");
        }
    }

    private void doubleCapacity()
    {
        int v1 = this.mElements.length;
        int v3 = (v1 - this.mHead);
        int v2 = (v1 << 1);
        if (v2 >= 0) {
            Object[] v0_1 = new Object[v2];
            System.arraycopy(this.mElements, this.mHead, v0_1, 0, v3);
            System.arraycopy(this.mElements, 0, v0_1, v3, this.mHead);
            this.mElements = ((Object[]) v0_1);
            this.mHead = 0;
            this.mTail = v1;
            this.mCapacityBitmask = (v2 - 1);
            return;
        } else {
            throw new RuntimeException("Max array capacity exceeded");
        }
    }

    public void addFirst(Object p3)
    {
        this.mHead = ((this.mHead - 1) & this.mCapacityBitmask);
        this.mElements[this.mHead] = p3;
        if (this.mHead == this.mTail) {
            this.doubleCapacity();
        }
        return;
    }

    public void addLast(Object p3)
    {
        this.mElements[this.mTail] = p3;
        this.mTail = ((this.mTail + 1) & this.mCapacityBitmask);
        if (this.mTail == this.mHead) {
            this.doubleCapacity();
        }
        return;
    }

    public void clear()
    {
        this.removeFromStart(this.size());
        return;
    }

    public Object get(int p4)
    {
        if ((p4 >= 0) && (p4 < this.size())) {
            return this.mElements[((this.mHead + p4) & this.mCapacityBitmask)];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public Object getFirst()
    {
        if (this.mHead != this.mTail) {
            return this.mElements[this.mHead];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public Object getLast()
    {
        if (this.mHead != this.mTail) {
            return this.mElements[((this.mTail - 1) & this.mCapacityBitmask)];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.mHead != this.mTail) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public Object popFirst()
    {
        if (this.mHead != this.mTail) {
            Object v0 = this.mElements[this.mHead];
            this.mElements[this.mHead] = 0;
            this.mHead = ((this.mHead + 1) & this.mCapacityBitmask);
            return v0;
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public Object popLast()
    {
        if (this.mHead != this.mTail) {
            int v1 = ((this.mTail - 1) & this.mCapacityBitmask);
            Object v0 = this.mElements[v1];
            this.mElements[v1] = 0;
            this.mTail = v1;
            return v0;
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public void removeFromEnd(int p7)
    {
        if (p7 > 0) {
            if (p7 <= this.size()) {
                int v3 = 0;
                if (p7 < this.mTail) {
                    v3 = (this.mTail - p7);
                }
                int v0_0 = v3;
                while (v0_0 < this.mTail) {
                    this.mElements[v0_0] = 0;
                    v0_0++;
                }
                int v2 = (this.mTail - v3);
                int v7_1 = (p7 - v2);
                this.mTail = (this.mTail - v2);
                if (v7_1 > 0) {
                    this.mTail = this.mElements.length;
                    int v1 = (this.mTail - v7_1);
                    int v0_1 = v1;
                    while (v0_1 < this.mTail) {
                        this.mElements[v0_1] = 0;
                        v0_1++;
                    }
                    this.mTail = v1;
                }
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }
        return;
    }

    public void removeFromStart(int p7)
    {
        if (p7 > 0) {
            if (p7 <= this.size()) {
                int v0 = this.mElements.length;
                if (p7 < (v0 - this.mHead)) {
                    v0 = (this.mHead + p7);
                }
                int v1_0 = this.mHead;
                while (v1_0 < v0) {
                    this.mElements[v1_0] = 0;
                    v1_0++;
                }
                int v2 = (v0 - this.mHead);
                int v7_1 = (p7 - v2);
                this.mHead = ((this.mHead + v2) & this.mCapacityBitmask);
                if (v7_1 > 0) {
                    int v1_1 = 0;
                    while (v1_1 < v7_1) {
                        this.mElements[v1_1] = 0;
                        v1_1++;
                    }
                    this.mHead = v7_1;
                }
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }
        return;
    }

    public int size()
    {
        return ((this.mTail - this.mHead) & this.mCapacityBitmask);
    }
}
package android.support.v4.util;
public final class CircularIntArray {
    private int mCapacityBitmask;
    private int[] mElements;
    private int mHead;
    private int mTail;

    public CircularIntArray()
    {
        this(8);
        return;
    }

    public CircularIntArray(int p4)
    {
        if (p4 >= 1) {
            if (p4 <= 1073741824) {
                int v0;
                if (Integer.bitCount(p4) == 1) {
                    v0 = p4;
                } else {
                    v0 = (Integer.highestOneBit((p4 - 1)) << 1);
                }
                this.mCapacityBitmask = (v0 - 1);
                int[] v1_2 = new int[v0];
                this.mElements = v1_2;
                return;
            } else {
                throw new IllegalArgumentException("capacity must be <= 2^30");
            }
        } else {
            throw new IllegalArgumentException("capacity must be >= 1");
        }
    }

    private void doubleCapacity()
    {
        int v1 = this.mElements.length;
        int v3 = (v1 - this.mHead);
        int v2 = (v1 << 1);
        if (v2 >= 0) {
            int[] v0 = new int[v2];
            System.arraycopy(this.mElements, this.mHead, v0, 0, v3);
            System.arraycopy(this.mElements, 0, v0, v3, this.mHead);
            this.mElements = v0;
            this.mHead = 0;
            this.mTail = v1;
            this.mCapacityBitmask = (v2 - 1);
            return;
        } else {
            throw new RuntimeException("Max array capacity exceeded");
        }
    }

    public void addFirst(int p3)
    {
        this.mHead = ((this.mHead - 1) & this.mCapacityBitmask);
        this.mElements[this.mHead] = p3;
        if (this.mHead == this.mTail) {
            this.doubleCapacity();
        }
        return;
    }

    public void addLast(int p3)
    {
        this.mElements[this.mTail] = p3;
        this.mTail = ((this.mTail + 1) & this.mCapacityBitmask);
        if (this.mTail == this.mHead) {
            this.doubleCapacity();
        }
        return;
    }

    public void clear()
    {
        this.mTail = this.mHead;
        return;
    }

    public int get(int p4)
    {
        if ((p4 >= 0) && (p4 < this.size())) {
            return this.mElements[((this.mHead + p4) & this.mCapacityBitmask)];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public int getFirst()
    {
        if (this.mHead != this.mTail) {
            return this.mElements[this.mHead];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public int getLast()
    {
        if (this.mHead != this.mTail) {
            return this.mElements[((this.mTail - 1) & this.mCapacityBitmask)];
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.mHead != this.mTail) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public int popFirst()
    {
        if (this.mHead != this.mTail) {
            int v0 = this.mElements[this.mHead];
            this.mHead = ((this.mHead + 1) & this.mCapacityBitmask);
            return v0;
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public int popLast()
    {
        if (this.mHead != this.mTail) {
            int v1 = ((this.mTail - 1) & this.mCapacityBitmask);
            int v0 = this.mElements[v1];
            this.mTail = v1;
            return v0;
        } else {
            throw new ArrayIndexOutOfBoundsException();
        }
    }

    public void removeFromEnd(int p3)
    {
        if (p3 > 0) {
            if (p3 <= this.size()) {
                this.mTail = ((this.mTail - p3) & this.mCapacityBitmask);
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }
        return;
    }

    public void removeFromStart(int p3)
    {
        if (p3 > 0) {
            if (p3 <= this.size()) {
                this.mHead = ((this.mHead + p3) & this.mCapacityBitmask);
            } else {
                throw new ArrayIndexOutOfBoundsException();
            }
        }
        return;
    }

    public int size()
    {
        return ((this.mTail - this.mHead) & this.mCapacityBitmask);
    }
}
package android.support.v4.util;
 class ContainerHelpers {
    static final int[] EMPTY_INTS;
    static final long[] EMPTY_LONGS;
    static final Object[] EMPTY_OBJECTS;

    static ContainerHelpers()
    {
        Object[] v0_0 = new int[0];
        android.support.v4.util.ContainerHelpers.EMPTY_INTS = v0_0;
        Object[] v0_1 = new long[0];
        android.support.v4.util.ContainerHelpers.EMPTY_LONGS = v0_1;
        Object[] v0_2 = new Object[0];
        android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS = v0_2;
        return;
    }

    ContainerHelpers()
    {
        return;
    }

    static int binarySearch(int[] p5, int p6, int p7)
    {
        int v1 = 0;
        int v0 = (p6 - 1);
        while (v1 <= v0) {
            int v2 = ((v1 + v0) >> 1);
            int v3 = p5[v2];
            if (v3 >= p7) {
                if (v3 > p7) {
                    v0 = (v2 - 1);
                }
            } else {
                v1 = (v2 + 1);
            }
            return v2;
        }
        v2 = (v1 ^ -1);
        return v2;
    }

    static int binarySearch(long[] p6, int p7, long p8)
    {
        int v1 = 0;
        int v0 = (p7 - 1);
        while (v1 <= v0) {
            int v2 = ((v1 + v0) >> 1);
            long v4 = p6[v2];
            if (v4 >= p8) {
                if (v4 > p8) {
                    v0 = (v2 - 1);
                }
            } else {
                v1 = (v2 + 1);
            }
            return v2;
        }
        v2 = (v1 ^ -1);
        return v2;
    }

    public static boolean equal(Object p1, Object p2)
    {
        if ((p1 != p2) && ((p1 == null) || (!p1.equals(p2)))) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public static int idealByteArraySize(int p3)
    {
        int v0 = 4;
        while (v0 < 32) {
            if (p3 > ((1 << v0) - 12)) {
                v0++;
            } else {
                p3 = ((1 << v0) - 12);
                break;
            }
        }
        return p3;
    }

    public static int idealIntArraySize(int p1)
    {
        return (android.support.v4.util.ContainerHelpers.idealByteArraySize((p1 * 4)) / 4);
    }

    public static int idealLongArraySize(int p1)
    {
        return (android.support.v4.util.ContainerHelpers.idealByteArraySize((p1 * 8)) / 8);
    }
}
package android.support.v4.util;
public class DebugUtils {

    public DebugUtils()
    {
        return;
    }

    public static void buildShortClassTag(Object p3, StringBuilder p4)
    {
        if (p3 != null) {
            String v1 = p3.getClass().getSimpleName();
            if ((v1 == null) || (v1.length() <= 0)) {
                v1 = p3.getClass().getName();
                int v0 = v1.lastIndexOf(46);
                if (v0 > 0) {
                    v1 = v1.substring((v0 + 1));
                }
            }
            p4.append(v1);
            p4.append(123);
            p4.append(Integer.toHexString(System.identityHashCode(p3)));
        } else {
            p4.append("null");
        }
        return;
    }
}
package android.support.v4.util;
public class LogWriter extends java.io.Writer {
    private StringBuilder mBuilder;
    private final String mTag;

    public LogWriter(String p3)
    {
        this.mBuilder = new StringBuilder(128);
        this.mTag = p3;
        return;
    }

    private void flushBuilder()
    {
        if (this.mBuilder.length() > 0) {
            android.util.Log.d(this.mTag, this.mBuilder.toString());
            this.mBuilder.delete(0, this.mBuilder.length());
        }
        return;
    }

    public void close()
    {
        this.flushBuilder();
        return;
    }

    public void flush()
    {
        this.flushBuilder();
        return;
    }

    public void write(char[] p4, int p5, int p6)
    {
        int v1 = 0;
        while (v1 < p6) {
            char v0 = p4[(p5 + v1)];
            if (v0 != 10) {
                this.mBuilder.append(v0);
            } else {
                this.flushBuilder();
            }
            v1++;
        }
        return;
    }
}
package android.support.v4.util;
public class LongSparseArray implements java.lang.Cloneable {
    private static final Object DELETED;
    private boolean mGarbage;
    private long[] mKeys;
    private int mSize;
    private Object[] mValues;

    static LongSparseArray()
    {
        android.support.v4.util.LongSparseArray.DELETED = new Object();
        return;
    }

    public LongSparseArray()
    {
        this(10);
        return;
    }

    public LongSparseArray(int p3)
    {
        this.mGarbage = 0;
        if (p3 != 0) {
            int v3_1 = android.support.v4.util.ContainerHelpers.idealLongArraySize(p3);
            Object[] v0_2 = new long[v3_1];
            this.mKeys = v0_2;
            Object[] v0_3 = new Object[v3_1];
            this.mValues = v0_3;
        } else {
            this.mKeys = android.support.v4.util.ContainerHelpers.EMPTY_LONGS;
            this.mValues = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
        }
        this.mSize = 0;
        return;
    }

    private void gc()
    {
        int v2 = this.mSize;
        int v3 = 0;
        long[] v1 = this.mKeys;
        Object[] v5 = this.mValues;
        int v0 = 0;
        while (v0 < v2) {
            Object v4 = v5[v0];
            if (v4 != android.support.v4.util.LongSparseArray.DELETED) {
                if (v0 != v3) {
                    v1[v3] = v1[v0];
                    v5[v3] = v4;
                    v5[v0] = 0;
                }
                v3++;
            }
            v0++;
        }
        this.mGarbage = 0;
        this.mSize = v3;
        return;
    }

    public void append(long p8, Object p10)
    {
        if ((this.mSize == 0) || (p8 > this.mKeys[(this.mSize - 1)])) {
            if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                this.gc();
            }
            int v3 = this.mSize;
            if (v3 >= this.mKeys.length) {
                int v0 = android.support.v4.util.ContainerHelpers.idealLongArraySize((v3 + 1));
                long[] v1 = new long[v0];
                Object[] v2 = new Object[v0];
                System.arraycopy(this.mKeys, 0, v1, 0, this.mKeys.length);
                System.arraycopy(this.mValues, 0, v2, 0, this.mValues.length);
                this.mKeys = v1;
                this.mValues = v2;
            }
            this.mKeys[v3] = p8;
            this.mValues[v3] = p10;
            this.mSize = (v3 + 1);
        } else {
            this.put(p8, p10);
        }
        return;
    }

    public void clear()
    {
        int v1 = this.mSize;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0] = 0;
            v0++;
        }
        this.mSize = 0;
        this.mGarbage = 0;
        return;
    }

    public android.support.v4.util.LongSparseArray clone()
    {
        try {
            android.support.v4.util.LongSparseArray v1 = ((android.support.v4.util.LongSparseArray) super.clone());
            v1.mKeys = ((long[]) this.mKeys.clone());
            v1.mValues = ((Object[]) this.mValues.clone());
        } catch (CloneNotSupportedException v2) {
        }
        return v1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public void delete(long p4)
    {
        int v0 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p4);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.util.LongSparseArray.DELETED)) {
            this.mValues[v0] = android.support.v4.util.LongSparseArray.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public Object get(long p2)
    {
        return this.get(p2, 0);
    }

    public Object get(long p4, Object p6)
    {
        int v0 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p4);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.util.LongSparseArray.DELETED)) {
            p6 = this.mValues[v0];
        }
        return p6;
    }

    public int indexOfKey(long p4)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p4);
    }

    public int indexOfValue(Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        int v0 = 0;
        while (v0 < this.mSize) {
            if (this.mValues[v0] != p3) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public long keyAt(int p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mKeys[p3];
    }

    public void put(long p10, Object p12)
    {
        int v0_1 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p10);
        if (v0_1 < 0) {
            int v0_0 = (v0_1 ^ -1);
            if ((v0_0 >= this.mSize) || (this.mValues[v0_0] != android.support.v4.util.LongSparseArray.DELETED)) {
                if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                    this.gc();
                    v0_0 = (android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p10) ^ -1);
                }
                if (this.mSize >= this.mKeys.length) {
                    int v1 = android.support.v4.util.ContainerHelpers.idealLongArraySize((this.mSize + 1));
                    long[] v2 = new long[v1];
                    Object[] v3 = new Object[v1];
                    System.arraycopy(this.mKeys, 0, v2, 0, this.mKeys.length);
                    System.arraycopy(this.mValues, 0, v3, 0, this.mValues.length);
                    this.mKeys = v2;
                    this.mValues = v3;
                }
                if ((this.mSize - v0_0) != 0) {
                    System.arraycopy(this.mKeys, v0_0, this.mKeys, (v0_0 + 1), (this.mSize - v0_0));
                    System.arraycopy(this.mValues, v0_0, this.mValues, (v0_0 + 1), (this.mSize - v0_0));
                }
                this.mKeys[v0_0] = p10;
                this.mValues[v0_0] = p12;
                this.mSize = (this.mSize + 1);
            } else {
                this.mKeys[v0_0] = p10;
                this.mValues[v0_0] = p12;
            }
        } else {
            this.mValues[v0_1] = p12;
        }
        return;
    }

    public void remove(long p2)
    {
        this.delete(p2);
        return;
    }

    public void removeAt(int p3)
    {
        if (this.mValues[p3] != android.support.v4.util.LongSparseArray.DELETED) {
            this.mValues[p3] = android.support.v4.util.LongSparseArray.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public void setValueAt(int p2, Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        this.mValues[p2] = p3;
        return;
    }

    public int size()
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mSize;
    }

    public String toString()
    {
        String v5_3;
        if (this.size() > 0) {
            StringBuilder v0_1 = new StringBuilder((this.mSize * 28));
            v0_1.append(123);
            int v1 = 0;
            while (v1 < this.mSize) {
                if (v1 > 0) {
                    v0_1.append(", ");
                }
                v0_1.append(this.keyAt(v1));
                v0_1.append(61);
                Object v4 = this.valueAt(v1);
                if (v4 == this) {
                    v0_1.append("(this Map)");
                } else {
                    v0_1.append(v4);
                }
                v1++;
            }
            v0_1.append(125);
            v5_3 = v0_1.toString();
        } else {
            v5_3 = "{}";
        }
        return v5_3;
    }

    public Object valueAt(int p2)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mValues[p2];
    }
}
package android.support.v4.util;
public class LruCache {
    private int createCount;
    private int evictionCount;
    private int hitCount;
    private final java.util.LinkedHashMap map;
    private int maxSize;
    private int missCount;
    private int putCount;
    private int size;

    public LruCache(int p5)
    {
        if (p5 > 0) {
            this.maxSize = p5;
            this.map = new java.util.LinkedHashMap(0, 1061158912, 1);
            return;
        } else {
            throw new IllegalArgumentException("maxSize <= 0");
        }
    }

    private int safeSizeOf(Object p5, Object p6)
    {
        int v0 = this.sizeOf(p5, p6);
        if (v0 >= 0) {
            return v0;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Negative size: ").append(p5).append("=").append(p6).toString());
        }
    }

    protected Object create(Object p2)
    {
        return 0;
    }

    public final declared_synchronized int createCount()
    {
        try {
            return this.createCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    protected void entryRemoved(boolean p1, Object p2, Object p3, Object p4)
    {
        return;
    }

    public final void evictAll()
    {
        this.trimToSize(-1);
        return;
    }

    public final declared_synchronized int evictionCount()
    {
        try {
            return this.evictionCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object get(Object p5)
    {
        if (p5 != null) {
            Object v0;
            Object v1_1 = this.map.get(p5);
            if (v1_1 == null) {
                this.missCount = (this.missCount + 1);
                v0 = this.create(p5);
                if (v0 != null) {
                    try {
                        this.createCount = (this.createCount + 1);
                        Object v1_0 = this.map.put(p5, v0);
                    } catch (int v2_7) {
                        throw v2_7;
                    }
                    if (v1_0 == null) {
                        this.size = (this.size + this.safeSizeOf(p5, v0));
                    } else {
                        this.map.put(p5, v1_0);
                    }
                    if (v1_0 == null) {
                        this.trimToSize(this.maxSize);
                    } else {
                        this.entryRemoved(0, p5, v0, v1_0);
                        v0 = v1_0;
                    }
                } else {
                    v0 = 0;
                }
            } else {
                this.hitCount = (this.hitCount + 1);
                v0 = v1_1;
            }
            return v0;
        } else {
            throw new NullPointerException("key == null");
        }
    }

    public final declared_synchronized int hitCount()
    {
        try {
            return this.hitCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final declared_synchronized int maxSize()
    {
        try {
            return this.maxSize;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final declared_synchronized int missCount()
    {
        try {
            return this.missCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object put(Object p4, Object p5)
    {
        if ((p4 != null) && (p5 != null)) {
            this.putCount = (this.putCount + 1);
            this.size = (this.size + this.safeSizeOf(p4, p5));
            Object v0 = this.map.put(p4, p5);
            if (v0 != null) {
                this.size = (this.size - this.safeSizeOf(p4, v0));
            }
            if (v0 != null) {
                this.entryRemoved(0, p4, v0, p5);
            }
            this.trimToSize(this.maxSize);
            return v0;
        } else {
            throw new NullPointerException("key == null || value == null");
        }
    }

    public final declared_synchronized int putCount()
    {
        try {
            return this.putCount;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public final Object remove(Object p4)
    {
        if (p4 != null) {
            Object v0 = this.map.remove(p4);
            if (v0 != null) {
                this.size = (this.size - this.safeSizeOf(p4, v0));
            }
            if (v0 != null) {
                this.entryRemoved(0, p4, v0, 0);
            }
            return v0;
        } else {
            throw new NullPointerException("key == null");
        }
    }

    public void resize(int p3)
    {
        if (p3 > 0) {
            this.maxSize = p3;
            this.trimToSize(p3);
            return;
        } else {
            throw new IllegalArgumentException("maxSize <= 0");
        }
    }

    public final declared_synchronized int size()
    {
        try {
            return this.size;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    protected int sizeOf(Object p2, Object p3)
    {
        return 1;
    }

    public final declared_synchronized java.util.Map snapshot()
    {
        try {
            return new java.util.LinkedHashMap(this.map);
        } catch (Throwable v0_2) {
            throw v0_2;
        }
    }

    public final declared_synchronized String toString()
    {
        int v1 = 0;
        try {
            int v0 = (this.hitCount + this.missCount);
        } catch (String v2_5) {
            throw v2_5;
        }
        if (v0 != 0) {
            v1 = ((this.hitCount * 100) / v0);
        }
        Object[] v3_1 = new Object[4];
        v3_1[0] = Integer.valueOf(this.maxSize);
        v3_1[1] = Integer.valueOf(this.hitCount);
        v3_1[2] = Integer.valueOf(this.missCount);
        v3_1[3] = Integer.valueOf(v1);
        return String.format("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", v3_1);
    }

    public void trimToSize(int p7)
    {
        try {
            while ((this.size >= 0) && ((!this.map.isEmpty()) || (this.size == 0))) {
                if ((this.size > p7) && (!this.map.isEmpty())) {
                    java.util.Map$Entry v1_1 = ((java.util.Map$Entry) this.map.entrySet().iterator().next());
                    Object v0 = v1_1.getKey();
                    Object v2 = v1_1.getValue();
                    this.map.remove(v0);
                    this.size = (this.size - this.safeSizeOf(v0, v2));
                    this.evictionCount = (this.evictionCount + 1);
                    this.entryRemoved(1, v0, v2, 0);
                } else {
                    return;
                }
            }
        } catch (int v3_16) {
            throw v3_16;
        }
        throw new IllegalStateException(new StringBuilder().append(this.getClass().getName()).append(".sizeOf() is reporting inconsistent results!").toString());
    }
}
package android.support.v4.util;
final class MapCollections$ArrayIterator implements java.util.Iterator {
    boolean mCanRemove;
    int mIndex;
    final int mOffset;
    int mSize;
    final synthetic android.support.v4.util.MapCollections this$0;

    MapCollections$ArrayIterator(android.support.v4.util.MapCollections p2, int p3)
    {
        this.this$0 = p2;
        this.mCanRemove = 0;
        this.mOffset = p3;
        this.mSize = p2.colGetSize();
        return;
    }

    public boolean hasNext()
    {
        int v0_1;
        if (this.mIndex >= this.mSize) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public Object next()
    {
        Object v0 = this.this$0.colGetEntry(this.mIndex, this.mOffset);
        this.mIndex = (this.mIndex + 1);
        this.mCanRemove = 1;
        return v0;
    }

    public void remove()
    {
        if (this.mCanRemove) {
            this.mIndex = (this.mIndex - 1);
            this.mSize = (this.mSize - 1);
            this.mCanRemove = 0;
            this.this$0.colRemoveAt(this.mIndex);
            return;
        } else {
            throw new IllegalStateException();
        }
    }
}
package android.support.v4.util;
final class MapCollections$EntrySet implements java.util.Set {
    final synthetic android.support.v4.util.MapCollections this$0;

    MapCollections$EntrySet(android.support.v4.util.MapCollections p1)
    {
        this.this$0 = p1;
        return;
    }

    public bridge synthetic boolean add(Object p2)
    {
        return this.add(((java.util.Map$Entry) p2));
    }

    public boolean add(java.util.Map$Entry p2)
    {
        throw new UnsupportedOperationException();
    }

    public boolean addAll(java.util.Collection p7)
    {
        int v1 = this.this$0.colGetSize();
        int v2_3 = p7.iterator();
        while (v2_3.hasNext()) {
            java.util.Map$Entry v0_1 = ((java.util.Map$Entry) v2_3.next());
            this.this$0.colPut(v0_1.getKey(), v0_1.getValue());
        }
        int v2_2;
        if (v1 == this.this$0.colGetSize()) {
            v2_2 = 0;
        } else {
            v2_2 = 1;
        }
        return v2_2;
    }

    public void clear()
    {
        this.this$0.colClear();
        return;
    }

    public boolean contains(Object p7)
    {
        boolean v3_0 = 0;
        if ((p7 instanceof java.util.Map$Entry)) {
            int v2 = this.this$0.colIndexOfKey(((java.util.Map$Entry) p7).getKey());
            if (v2 >= 0) {
                v3_0 = android.support.v4.util.ContainerHelpers.equal(this.this$0.colGetEntry(v2, 1), ((java.util.Map$Entry) p7).getValue());
            }
        }
        return v3_0;
    }

    public boolean containsAll(java.util.Collection p3)
    {
        java.util.Iterator v0 = p3.iterator();
        while (v0.hasNext()) {
            if (!this.contains(v0.next())) {
                int v1_0 = 0;
            }
            return v1_0;
        }
        v1_0 = 1;
        return v1_0;
    }

    public boolean equals(Object p2)
    {
        return android.support.v4.util.MapCollections.equalsSetHelper(this, p2);
    }

    public int hashCode()
    {
        int v2 = 0;
        int v0 = (this.this$0.colGetSize() - 1);
        while (v0 >= 0) {
            int v6_1;
            Object v1 = this.this$0.colGetEntry(v0, 0);
            Object v3 = this.this$0.colGetEntry(v0, 1);
            if (v1 != null) {
                v6_1 = v1.hashCode();
            } else {
                v6_1 = 0;
            }
            int v4_3;
            if (v3 != null) {
                v4_3 = v3.hashCode();
            } else {
                v4_3 = 0;
            }
            v2 += (v4_3 ^ v6_1);
            v0--;
        }
        return v2;
    }

    public boolean isEmpty()
    {
        int v0_2;
        if (this.this$0.colGetSize() != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public java.util.Iterator iterator()
    {
        return new android.support.v4.util.MapCollections$MapIterator(this.this$0);
    }

    public boolean remove(Object p2)
    {
        throw new UnsupportedOperationException();
    }

    public boolean removeAll(java.util.Collection p2)
    {
        throw new UnsupportedOperationException();
    }

    public boolean retainAll(java.util.Collection p2)
    {
        throw new UnsupportedOperationException();
    }

    public int size()
    {
        return this.this$0.colGetSize();
    }

    public Object[] toArray()
    {
        throw new UnsupportedOperationException();
    }

    public Object[] toArray(Object[] p2)
    {
        throw new UnsupportedOperationException();
    }
}
package android.support.v4.util;
final class MapCollections$KeySet implements java.util.Set {
    final synthetic android.support.v4.util.MapCollections this$0;

    MapCollections$KeySet(android.support.v4.util.MapCollections p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean add(Object p2)
    {
        throw new UnsupportedOperationException();
    }

    public boolean addAll(java.util.Collection p2)
    {
        throw new UnsupportedOperationException();
    }

    public void clear()
    {
        this.this$0.colClear();
        return;
    }

    public boolean contains(Object p2)
    {
        int v0_2;
        if (this.this$0.colIndexOfKey(p2) < 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean containsAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.containsAllHelper(this.this$0.colGetMap(), p2);
    }

    public boolean equals(Object p2)
    {
        return android.support.v4.util.MapCollections.equalsSetHelper(this, p2);
    }

    public int hashCode()
    {
        int v2 = 0;
        int v0 = (this.this$0.colGetSize() - 1);
        while (v0 >= 0) {
            int v3_0;
            Object v1 = this.this$0.colGetEntry(v0, 0);
            if (v1 != null) {
                v3_0 = v1.hashCode();
            } else {
                v3_0 = 0;
            }
            v2 += v3_0;
            v0--;
        }
        return v2;
    }

    public boolean isEmpty()
    {
        int v0_2;
        if (this.this$0.colGetSize() != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public java.util.Iterator iterator()
    {
        return new android.support.v4.util.MapCollections$ArrayIterator(this.this$0, 0);
    }

    public boolean remove(Object p3)
    {
        int v1_1;
        int v0 = this.this$0.colIndexOfKey(p3);
        if (v0 < 0) {
            v1_1 = 0;
        } else {
            this.this$0.colRemoveAt(v0);
            v1_1 = 1;
        }
        return v1_1;
    }

    public boolean removeAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.removeAllHelper(this.this$0.colGetMap(), p2);
    }

    public boolean retainAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.retainAllHelper(this.this$0.colGetMap(), p2);
    }

    public int size()
    {
        return this.this$0.colGetSize();
    }

    public Object[] toArray()
    {
        return this.this$0.toArrayHelper(0);
    }

    public Object[] toArray(Object[] p3)
    {
        return this.this$0.toArrayHelper(p3, 0);
    }
}
package android.support.v4.util;
final class MapCollections$MapIterator implements java.util.Iterator, java.util.Map$Entry {
    int mEnd;
    boolean mEntryValid;
    int mIndex;
    final synthetic android.support.v4.util.MapCollections this$0;

    MapCollections$MapIterator(android.support.v4.util.MapCollections p2)
    {
        this.this$0 = p2;
        this.mEntryValid = 0;
        this.mEnd = (p2.colGetSize() - 1);
        this.mIndex = -1;
        return;
    }

    public final boolean equals(Object p7)
    {
        String v1_0 = 1;
        String v2_0 = 0;
        if (this.mEntryValid) {
            if ((p7 instanceof java.util.Map$Entry)) {
                if ((!android.support.v4.util.ContainerHelpers.equal(((java.util.Map$Entry) p7).getKey(), this.this$0.colGetEntry(this.mIndex, 0))) || (!android.support.v4.util.ContainerHelpers.equal(((java.util.Map$Entry) p7).getValue(), this.this$0.colGetEntry(this.mIndex, 1)))) {
                    v1_0 = 0;
                }
                v2_0 = v1_0;
            }
            return v2_0;
        } else {
            throw new IllegalStateException("This container does not support retaining Map.Entry objects");
        }
    }

    public Object getKey()
    {
        if (this.mEntryValid) {
            return this.this$0.colGetEntry(this.mIndex, 0);
        } else {
            throw new IllegalStateException("This container does not support retaining Map.Entry objects");
        }
    }

    public Object getValue()
    {
        if (this.mEntryValid) {
            return this.this$0.colGetEntry(this.mIndex, 1);
        } else {
            throw new IllegalStateException("This container does not support retaining Map.Entry objects");
        }
    }

    public boolean hasNext()
    {
        int v0_1;
        if (this.mIndex >= this.mEnd) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public final int hashCode()
    {
        int v2_0 = 0;
        if (this.mEntryValid) {
            int v3_1;
            Object v0 = this.this$0.colGetEntry(this.mIndex, 0);
            Object v1 = this.this$0.colGetEntry(this.mIndex, 1);
            if (v0 != null) {
                v3_1 = v0.hashCode();
            } else {
                v3_1 = 0;
            }
            if (v1 != null) {
                v2_0 = v1.hashCode();
            }
            return (v2_0 ^ v3_1);
        } else {
            throw new IllegalStateException("This container does not support retaining Map.Entry objects");
        }
    }

    public bridge synthetic Object next()
    {
        return this.next();
    }

    public java.util.Map$Entry next()
    {
        this.mIndex = (this.mIndex + 1);
        this.mEntryValid = 1;
        return this;
    }

    public void remove()
    {
        if (this.mEntryValid) {
            this.this$0.colRemoveAt(this.mIndex);
            this.mIndex = (this.mIndex - 1);
            this.mEnd = (this.mEnd - 1);
            this.mEntryValid = 0;
            return;
        } else {
            throw new IllegalStateException();
        }
    }

    public Object setValue(Object p3)
    {
        if (this.mEntryValid) {
            return this.this$0.colSetValue(this.mIndex, p3);
        } else {
            throw new IllegalStateException("This container does not support retaining Map.Entry objects");
        }
    }

    public final String toString()
    {
        return new StringBuilder().append(this.getKey()).append("=").append(this.getValue()).toString();
    }
}
package android.support.v4.util;
final class MapCollections$ValuesCollection implements java.util.Collection {
    final synthetic android.support.v4.util.MapCollections this$0;

    MapCollections$ValuesCollection(android.support.v4.util.MapCollections p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean add(Object p2)
    {
        throw new UnsupportedOperationException();
    }

    public boolean addAll(java.util.Collection p2)
    {
        throw new UnsupportedOperationException();
    }

    public void clear()
    {
        this.this$0.colClear();
        return;
    }

    public boolean contains(Object p2)
    {
        int v0_2;
        if (this.this$0.colIndexOfValue(p2) < 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean containsAll(java.util.Collection p3)
    {
        java.util.Iterator v0 = p3.iterator();
        while (v0.hasNext()) {
            if (!this.contains(v0.next())) {
                int v1_0 = 0;
            }
            return v1_0;
        }
        v1_0 = 1;
        return v1_0;
    }

    public boolean isEmpty()
    {
        int v0_2;
        if (this.this$0.colGetSize() != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public java.util.Iterator iterator()
    {
        return new android.support.v4.util.MapCollections$ArrayIterator(this.this$0, 1);
    }

    public boolean remove(Object p3)
    {
        int v1_1;
        int v0 = this.this$0.colIndexOfValue(p3);
        if (v0 < 0) {
            v1_1 = 0;
        } else {
            this.this$0.colRemoveAt(v0);
            v1_1 = 1;
        }
        return v1_1;
    }

    public boolean removeAll(java.util.Collection p7)
    {
        int v0 = this.this$0.colGetSize();
        int v1 = 0;
        int v3 = 0;
        while (v3 < v0) {
            if (p7.contains(this.this$0.colGetEntry(v3, 1))) {
                this.this$0.colRemoveAt(v3);
                v3--;
                v0--;
                v1 = 1;
            }
            v3++;
        }
        return v1;
    }

    public boolean retainAll(java.util.Collection p7)
    {
        int v0 = this.this$0.colGetSize();
        int v1 = 0;
        int v3 = 0;
        while (v3 < v0) {
            if (!p7.contains(this.this$0.colGetEntry(v3, 1))) {
                this.this$0.colRemoveAt(v3);
                v3--;
                v0--;
                v1 = 1;
            }
            v3++;
        }
        return v1;
    }

    public int size()
    {
        return this.this$0.colGetSize();
    }

    public Object[] toArray()
    {
        return this.this$0.toArrayHelper(1);
    }

    public Object[] toArray(Object[] p3)
    {
        return this.this$0.toArrayHelper(p3, 1);
    }
}
package android.support.v4.util;
abstract class MapCollections {
    android.support.v4.util.MapCollections$EntrySet mEntrySet;
    android.support.v4.util.MapCollections$KeySet mKeySet;
    android.support.v4.util.MapCollections$ValuesCollection mValues;

    MapCollections()
    {
        return;
    }

    public static boolean containsAllHelper(java.util.Map p2, java.util.Collection p3)
    {
        java.util.Iterator v0 = p3.iterator();
        while (v0.hasNext()) {
            if (!p2.containsKey(v0.next())) {
                int v1_0 = 0;
            }
            return v1_0;
        }
        v1_0 = 1;
        return v1_0;
    }

    public static boolean equalsSetHelper(java.util.Set p6, Object p7)
    {
        int v2 = 1;
        int v3 = 0;
        if (p6 != p7) {
            if ((p7 instanceof java.util.Set)) {
                try {
                    if ((p6.size() != ((java.util.Set) p7).size()) || (!p6.containsAll(((java.util.Set) p7)))) {
                        v2 = 0;
                    }
                } catch (ClassCastException v0) {
                } catch (ClassCastException v0) {
                }
                v3 = v2;
            }
        } else {
            v3 = 1;
        }
        return v3;
    }

    public static boolean removeAllHelper(java.util.Map p3, java.util.Collection p4)
    {
        int v1 = p3.size();
        java.util.Iterator v0 = p4.iterator();
        while (v0.hasNext()) {
            p3.remove(v0.next());
        }
        int v2_0;
        if (v1 == p3.size()) {
            v2_0 = 0;
        } else {
            v2_0 = 1;
        }
        return v2_0;
    }

    public static boolean retainAllHelper(java.util.Map p3, java.util.Collection p4)
    {
        int v1 = p3.size();
        java.util.Iterator v0 = p3.keySet().iterator();
        while (v0.hasNext()) {
            if (!p4.contains(v0.next())) {
                v0.remove();
            }
        }
        int v2_1;
        if (v1 == p3.size()) {
            v2_1 = 0;
        } else {
            v2_1 = 1;
        }
        return v2_1;
    }

    protected abstract void colClear();

    protected abstract Object colGetEntry();

    protected abstract java.util.Map colGetMap();

    protected abstract int colGetSize();

    protected abstract int colIndexOfKey();

    protected abstract int colIndexOfValue();

    protected abstract void colPut();

    protected abstract void colRemoveAt();

    protected abstract Object colSetValue();

    public java.util.Set getEntrySet()
    {
        if (this.mEntrySet == null) {
            this.mEntrySet = new android.support.v4.util.MapCollections$EntrySet(this);
        }
        return this.mEntrySet;
    }

    public java.util.Set getKeySet()
    {
        if (this.mKeySet == null) {
            this.mKeySet = new android.support.v4.util.MapCollections$KeySet(this);
        }
        return this.mKeySet;
    }

    public java.util.Collection getValues()
    {
        if (this.mValues == null) {
            this.mValues = new android.support.v4.util.MapCollections$ValuesCollection(this);
        }
        return this.mValues;
    }

    public Object[] toArrayHelper(int p5)
    {
        int v0 = this.colGetSize();
        Object[] v2 = new Object[v0];
        int v1 = 0;
        while (v1 < v0) {
            v2[v1] = this.colGetEntry(v1, p5);
            v1++;
        }
        return v2;
    }

    public Object[] toArrayHelper(Object[] p5, int p6)
    {
        int v0 = this.colGetSize();
        if (p5.length < v0) {
            p5 = ((Object[]) ((Object[]) reflect.Array.newInstance(p5.getClass().getComponentType(), v0)));
        }
        int v1 = 0;
        while (v1 < v0) {
            p5[v1] = this.colGetEntry(v1, p6);
            v1++;
        }
        if (p5.length > v0) {
            p5[v0] = 0;
        }
        return p5;
    }
}
package android.support.v4.util;
public class Pair {
    public final Object first;
    public final Object second;

    public Pair(Object p1, Object p2)
    {
        this.first = p1;
        this.second = p2;
        return;
    }

    public static android.support.v4.util.Pair create(Object p1, Object p2)
    {
        return new android.support.v4.util.Pair(p1, p2);
    }

    private static boolean objectsEqual(Object p1, Object p2)
    {
        if ((p1 != p2) && ((p1 == null) || (!p1.equals(p2)))) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean equals(Object p5)
    {
        int v1 = 0;
        if (((p5 instanceof android.support.v4.util.Pair)) && ((android.support.v4.util.Pair.objectsEqual(((android.support.v4.util.Pair) p5).first, this.first)) && (android.support.v4.util.Pair.objectsEqual(((android.support.v4.util.Pair) p5).second, this.second)))) {
            v1 = 1;
        }
        return v1;
    }

    public int hashCode()
    {
        int v0_3;
        int v1_0 = 0;
        if (this.first != null) {
            v0_3 = this.first.hashCode();
        } else {
            v0_3 = 0;
        }
        if (this.second != null) {
            v1_0 = this.second.hashCode();
        }
        return (v0_3 ^ v1_0);
    }

    public String toString()
    {
        return new StringBuilder().append("Pair{").append(String.valueOf(this.first)).append(" ").append(String.valueOf(this.second)).append("}").toString();
    }
}
package android.support.v4.util;
public final class PatternsCompat {
    public static final java.util.regex.Pattern AUTOLINK_EMAIL_ADDRESS = None;
    public static final java.util.regex.Pattern AUTOLINK_WEB_URL = None;
    public static final java.util.regex.Pattern DOMAIN_NAME = None;
    public static final java.util.regex.Pattern EMAIL_ADDRESS = None;
    private static final String EMAIL_ADDRESS_DOMAIN = "(?=.{1,255}(?:\\s|$|^))([a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    private static final String EMAIL_ADDRESS_LOCAL_PART = "[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%'](?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%'\\.]{1,62}[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%'])?";
    private static final String EMAIL_CHAR = "a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%'";
    private static final String HOST_NAME = "([a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    static final String IANA_TOP_LEVEL_DOMAINS = "(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))";
    public static final java.util.regex.Pattern IP_ADDRESS = None;
    private static final String IRI_LABEL = "[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}";
    private static final String LABEL_CHAR = "a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    private static final String PATH_AND_QUERY = "[/\\?](?:(?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]];/\\?:@&=#~\\-\\.\\+!\\*'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*";
    private static final String PORT_NUMBER = "\\:\\d{1,5}";
    private static final String PROTOCOL = "(?i:http|https|rtsp)://";
    private static final String PUNYCODE_TLD = "xn\\-\\-[\\w\\-]{0,58}\\w";
    private static final String RELAXED_DOMAIN_NAME = "";
    private static final java.util.regex.Pattern STRICT_DOMAIN_NAME = None;
    private static final String STRICT_HOST_NAME = "(?:(?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(?:(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))|xn\\-\\-[\\w\\-]{0,58}\\w))";
    private static final String STRICT_TLD = "(?:(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))|xn\\-\\-[\\w\\-]{0,58}\\w)";
    private static final String TLD = "(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})";
    private static final String TLD_CHAR = "a-zA-Z[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    private static final String UCS_CHAR = "[\xa0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\U00010000-\U0001fffd\U00020000-\U0002fffd\U00030000-\U0003fffd\U00040000-\U0004fffd\U00050000-\U0005fffd\U00060000-\U0006fffd\U00070000-\U0007fffd\U00080000-\U0008fffd\U00090000-\U0009fffd\U000a0000-\U000afffd\U000b0000-\U000bfffd\U000c0000-\U000cfffd\U000d0000-\U000dfffd\U000e1000-\U000efffd&&[^\xa0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]";
    private static final String USER_INFO = "(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@";
    public static final java.util.regex.Pattern WEB_URL = None;
    private static final String WEB_URL_WITHOUT_PROTOCOL = "";
    private static final String WEB_URL_WITH_PROTOCOL = "";
    private static final String WORD_BOUNDARY = "(?:\\b|$|^)";

    static PatternsCompat()
    {
        android.support.v4.util.PatternsCompat.IP_ADDRESS = java.util.regex.Pattern.compile("((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9]))");
        android.support.v4.util.PatternsCompat.DOMAIN_NAME = java.util.regex.Pattern.compile(new StringBuilder().append("(([a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63})|").append(android.support.v4.util.PatternsCompat.IP_ADDRESS).append(")").toString());
        android.support.v4.util.PatternsCompat.WEB_URL = java.util.regex.Pattern.compile(new StringBuilder().append("(((?:(?i:http|https|rtsp)://(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?(?:").append(android.support.v4.util.PatternsCompat.DOMAIN_NAME).append(")").append("(?:").append("\\:\\d{1,5}").append(")?").append(")").append("(").append("[/\\?](?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]];/\\?:@&=#~\\-\\.\\+!\\*\'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*").append(")?").append("(?:\\b|$|^)").append(")").toString());
        android.support.v4.util.PatternsCompat.STRICT_DOMAIN_NAME = java.util.regex.Pattern.compile(new StringBuilder().append("(?:(?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(?:(?:(?:aaa|aarp|abb|abbott|abogado|academy|accenture|accountant|accountants|aco|active|actor|ads|adult|aeg|aero|afl|agency|aig|airforce|airtel|allfinanz|alsace|amica|amsterdam|android|apartments|app|apple|aquarelle|aramco|archi|army|arpa|arte|asia|associates|attorney|auction|audio|auto|autos|axa|azure|a[cdefgilmoqrstuwxz])|(?:band|bank|bar|barcelona|barclaycard|barclays|bargains|bauhaus|bayern|bbc|bbva|bcn|beats|beer|bentley|berlin|best|bet|bharti|bible|bid|bike|bing|bingo|bio|biz|black|blackfriday|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|bom|bond|boo|boots|boutique|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|build|builders|business|buzz|bzh|b[abdefghijmnorstvwyz])|(?:cab|cafe|cal|camera|camp|cancerresearch|canon|capetown|capital|car|caravan|cards|care|career|careers|cars|cartier|casa|cash|casino|cat|catering|cba|cbn|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chat|cheap|chloe|christmas|chrome|church|cipriani|cisco|citic|city|cityeats|claims|cleaning|click|clinic|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|com|commbank|community|company|computer|comsec|condos|construction|consulting|contractors|cooking|cool|coop|corsica|country|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruises|csc|cuisinella|cymru|cyou|c[acdfghiklmnoruvwxyz])|(?:dabur|dad|dance|date|dating|datsun|day|dclk|deals|degree|delivery|dell|delta|democrat|dental|dentist|desi|design|dev|diamonds|diet|digital|direct|directory|discount|dnp|docs|dog|doha|domains|doosan|download|drive|durban|dvag|d[ejkmoz])|(?:earth|eat|edu|education|email|emerck|energy|engineer|engineering|enterprises|epson|equipment|erni|esq|estate|eurovision|eus|events|everbank|exchange|expert|exposed|express|e[cegrstu])|(?:fage|fail|fairwinds|faith|family|fan|fans|farm|fashion|feedback|ferrero|film|final|finance|financial|firmdale|fish|fishing|fit|fitness|flights|florist|flowers|flsmidth|fly|foo|football|forex|forsale|forum|foundation|frl|frogans|fund|furniture|futbol|fyi|f[ijkmor])|(?:gal|gallery|game|garden|gbiz|gdn|gea|gent|genting|ggee|gift|gifts|gives|giving|glass|gle|global|globo|gmail|gmo|gmx|gold|goldpoint|golf|goo|goog|google|gop|gov|grainger|graphics|gratis|green|gripe|group|gucci|guge|guide|guitars|guru|g[abdefghilmnpqrstuwy])|(?:hamburg|hangout|haus|healthcare|help|here|hermes|hiphop|hitachi|hiv|hockey|holdings|holiday|homedepot|homes|honda|horse|host|hosting|hoteles|hotmail|house|how|hsbc|hyundai|h[kmnrtu])|(?:ibm|icbc|ice|icu|ifm|iinet|immo|immobilien|industries|infiniti|info|ing|ink|institute|insure|int|international|investments|ipiranga|irish|ist|istanbul|itau|iwc|i[delmnoqrst])|(?:jaguar|java|jcb|jetzt|jewelry|jlc|jll|jobs|joburg|jprs|juegos|j[emop])|(?:kaufen|kddi|kia|kim|kinder|kitchen|kiwi|koeln|komatsu|krd|kred|kyoto|k[eghimnprwyz])|(?:lacaixa|lancaster|land|landrover|lasalle|lat|latrobe|law|lawyer|lds|lease|leclerc|legal|lexus|lgbt|liaison|lidl|life|lifestyle|lighting|limited|limo|linde|link|live|lixil|loan|loans|lol|london|lotte|lotto|love|ltd|ltda|lupin|luxe|luxury|l[abcikrstuvy])|(?:madrid|maif|maison|man|management|mango|market|marketing|markets|marriott|mba|media|meet|melbourne|meme|memorial|men|menu|meo|miami|microsoft|mil|mini|mma|mobi|moda|moe|moi|mom|monash|money|montblanc|mormon|mortgage|moscow|motorcycles|mov|movie|movistar|mtn|mtpc|mtr|museum|mutuelle|m[acdeghklmnopqrstuvwxyz])|(?:nadex|nagoya|name|navy|nec|net|netbank|network|neustar|new|news|nexus|ngo|nhk|nico|ninja|nissan|nokia|nra|nrw|ntt|nyc|n[acefgilopruz])|(?:obi|office|okinawa|omega|one|ong|onl|online|ooo|oracle|orange|org|organic|osaka|otsuka|ovh|om)|(?:page|panerai|paris|partners|parts|party|pet|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|ping|pink|pizza|place|play|playstation|plumbing|plus|pohl|poker|porn|post|praxi|press|pro|prod|productions|prof|properties|property|protection|pub|p[aefghklmnrstwy])|(?:qpon|quebec|qa)|(?:racing|realtor|realty|recipes|red|redstone|rehab|reise|reisen|reit|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rich|ricoh|rio|rip|rocher|rocks|rodeo|rsvp|ruhr|run|rwe|ryukyu|r[eosuw])|(?:saarland|sakura|sale|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|saxo|sbs|sca|scb|schmidt|scholarships|school|schule|schwarz|science|scor|scot|seat|security|seek|sener|services|seven|sew|sex|sexy|shiksha|shoes|show|shriram|singles|site|ski|sky|skype|sncf|soccer|social|software|sohu|solar|solutions|sony|soy|space|spiegel|spreadbetting|srl|stada|starhub|statoil|stc|stcgroup|stockholm|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiss|sydney|systems|s[abcdeghijklmnortuvxyz])|(?:tab|taipei|tatamotors|tatar|tattoo|tax|taxi|team|tech|technology|tel|telefonica|temasek|tennis|thd|theater|theatre|tickets|tienda|tips|tires|tirol|today|tokyo|tools|top|toray|toshiba|tours|town|toyota|toys|trade|trading|training|travel|trust|tui|t[cdfghjklmnortvwz])|(?:ubs|university|uno|uol|u[agksyz])|(?:vacations|vana|vegas|ventures|versicherung|vet|viajes|video|villas|vin|virgin|vision|vista|vistaprint|viva|vlaanderen|vodka|vote|voting|voto|voyage|v[aceginu])|(?:wales|walter|wang|watch|webcam|website|wed|wedding|weir|whoswho|wien|wiki|williamhill|win|windows|wine|wme|work|works|world|wtc|wtf|w[fs])|(?:\u03b5\u03bb|\u0431\u0435\u043b|\u0434\u0435\u0442\u0438|\u043a\u043e\u043c|\u043c\u043a\u0434|\u043c\u043e\u043d|\u043c\u043e\u0441\u043a\u0432\u0430|\u043e\u043d\u043b\u0430\u0439\u043d|\u043e\u0440\u0433|\u0440\u0443\u0441|\u0440\u0444|\u0441\u0430\u0439\u0442|\u0441\u0440\u0431|\u0443\u043a\u0440|\u049b\u0430\u0437|\u0570\u0561\u0575|\u05e7\u05d5\u05dd|\u0627\u0631\u0627\u0645\u0643\u0648|\u0627\u0644\u0627\u0631\u062f\u0646|\u0627\u0644\u062c\u0632\u0627\u0626\u0631|\u0627\u0644\u0633\u0639\u0648\u062f\u064a\u0629|\u0627\u0644\u0645\u063a\u0631\u0628|\u0627\u0645\u0627\u0631\u0627\u062a|\u0627\u06cc\u0631\u0627\u0646|\u0628\u0627\u0632\u0627\u0631|\u0628\u06be\u0627\u0631\u062a|\u062a\u0648\u0646\u0633|\u0633\u0648\u062f\u0627\u0646|\u0633\u0648\u0631\u064a\u0629|\u0634\u0628\u0643\u0629|\u0639\u0631\u0627\u0642|\u0639\u0645\u0627\u0646|\u0641\u0644\u0633\u0637\u064a\u0646|\u0642\u0637\u0631|\u0643\u0648\u0645|\u0645\u0635\u0631|\u0645\u0644\u064a\u0633\u064a\u0627|\u0645\u0648\u0642\u0639|\u0915\u0949\u092e|\u0928\u0947\u091f|\u092d\u093e\u0930\u0924|\u0938\u0902\u0917\u0920\u0928|\u09ad\u09be\u09b0\u09a4|\u0a2d\u0a3e\u0a30\u0a24|\u0aad\u0abe\u0ab0\u0aa4|\u0b87\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bbe|\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8|\u0b9a\u0bbf\u0b99\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0bc2\u0bb0\u0bcd|\u0c2d\u0c3e\u0c30\u0c24\u0c4d|\u0dbd\u0d82\u0d9a\u0dcf|\u0e04\u0e2d\u0e21|\u0e44\u0e17\u0e22|\u10d2\u10d4|\u307f\u3093\u306a|\u30b0\u30fc\u30b0\u30eb|\u30b3\u30e0|\u4e16\u754c|\u4e2d\u4fe1|\u4e2d\u56fd|\u4e2d\u570b|\u4e2d\u6587\u7f51|\u4f01\u4e1a|\u4f5b\u5c71|\u4fe1\u606f|\u5065\u5eb7|\u516b\u5366|\u516c\u53f8|\u516c\u76ca|\u53f0\u6e7e|\u53f0\u7063|\u5546\u57ce|\u5546\u5e97|\u5546\u6807|\u5728\u7ebf|\u5927\u62ff|\u5a31\u4e50|\u5de5\u884c|\u5e7f\u4e1c|\u6148\u5584|\u6211\u7231\u4f60|\u624b\u673a|\u653f\u52a1|\u653f\u5e9c|\u65b0\u52a0\u5761|\u65b0\u95fb|\u65f6\u5c1a|\u673a\u6784|\u6de1\u9a6c\u9521|\u6e38\u620f|\u70b9\u770b|\u79fb\u52a8|\u7ec4\u7ec7\u673a\u6784|\u7f51\u5740|\u7f51\u5e97|\u7f51\u7edc|\u8c37\u6b4c|\u96c6\u56e2|\u98de\u5229\u6d66|\u9910\u5385|\u9999\u6e2f|\ub2f7\ub137|\ub2f7\ucef4|\uc0bc\uc131|\ud55c\uad6d|xbox|xerox|xin|xn\\-\\-11b4c3d|xn\\-\\-1qqw23a|xn\\-\\-30rr7y|xn\\-\\-3bst00m|xn\\-\\-3ds443g|xn\\-\\-3e0b707e|xn\\-\\-3pxu8k|xn\\-\\-42c2d9a|xn\\-\\-45brj9c|xn\\-\\-45q11c|xn\\-\\-4gbrim|xn\\-\\-55qw42g|xn\\-\\-55qx5d|xn\\-\\-6frz82g|xn\\-\\-6qq986b3xl|xn\\-\\-80adxhks|xn\\-\\-80ao21a|xn\\-\\-80asehdb|xn\\-\\-80aswg|xn\\-\\-90a3ac|xn\\-\\-90ais|xn\\-\\-9dbq2a|xn\\-\\-9et52u|xn\\-\\-b4w605ferd|xn\\-\\-c1avg|xn\\-\\-c2br7g|xn\\-\\-cg4bki|xn\\-\\-clchc0ea0b2g2a9gcd|xn\\-\\-czr694b|xn\\-\\-czrs0t|xn\\-\\-czru2d|xn\\-\\-d1acj3b|xn\\-\\-d1alf|xn\\-\\-efvy88h|xn\\-\\-estv75g|xn\\-\\-fhbei|xn\\-\\-fiq228c5hs|xn\\-\\-fiq64b|xn\\-\\-fiqs8s|xn\\-\\-fiqz9s|xn\\-\\-fjq720a|xn\\-\\-flw351e|xn\\-\\-fpcrj9c3d|xn\\-\\-fzc2c9e2c|xn\\-\\-gecrj9c|xn\\-\\-h2brj9c|xn\\-\\-hxt814e|xn\\-\\-i1b6b1a6a2e|xn\\-\\-imr513n|xn\\-\\-io0a7i|xn\\-\\-j1aef|xn\\-\\-j1amh|xn\\-\\-j6w193g|xn\\-\\-kcrx77d1x4a|xn\\-\\-kprw13d|xn\\-\\-kpry57d|xn\\-\\-kput3i|xn\\-\\-l1acc|xn\\-\\-lgbbat1ad8j|xn\\-\\-mgb9awbf|xn\\-\\-mgba3a3ejt|xn\\-\\-mgba3a4f16a|xn\\-\\-mgbaam7a8h|xn\\-\\-mgbab2bd|xn\\-\\-mgbayh7gpa|xn\\-\\-mgbbh1a71e|xn\\-\\-mgbc0a9azcg|xn\\-\\-mgberp4a5d4ar|xn\\-\\-mgbpl2fh|xn\\-\\-mgbtx2b|xn\\-\\-mgbx4cd0ab|xn\\-\\-mk1bu44c|xn\\-\\-mxtq1m|xn\\-\\-ngbc5azd|xn\\-\\-node|xn\\-\\-nqv7f|xn\\-\\-nqv7fs00ema|xn\\-\\-nyqy26a|xn\\-\\-o3cw4h|xn\\-\\-ogbpf8fl|xn\\-\\-p1acf|xn\\-\\-p1ai|xn\\-\\-pgbs0dh|xn\\-\\-pssy2u|xn\\-\\-q9jyb4c|xn\\-\\-qcka1pmc|xn\\-\\-qxam|xn\\-\\-rhqv96g|xn\\-\\-s9brj9c|xn\\-\\-ses554g|xn\\-\\-t60b56a|xn\\-\\-tckwe|xn\\-\\-unup4y|xn\\-\\-vermgensberater\\-ctb|xn\\-\\-vermgensberatung\\-pwb|xn\\-\\-vhquv|xn\\-\\-vuq861b|xn\\-\\-wgbh1c|xn\\-\\-wgbl6a|xn\\-\\-xhq521b|xn\\-\\-xkc2al3hye2a|xn\\-\\-xkc2dl3a5ee0h|xn\\-\\-y9a3aq|xn\\-\\-yfro4i67o|xn\\-\\-ygbi2ammx|xn\\-\\-zfr164b|xperia|xxx|xyz)|(?:yachts|yamaxun|yandex|yodobashi|yoga|yokohama|youtube|y[et])|(?:zara|zip|zone|zuerich|z[amw]))|xn\\-\\-[\\w\\-]{0,58}\\w))|").append(android.support.v4.util.PatternsCompat.IP_ADDRESS).append(")").toString());
        android.support.v4.util.PatternsCompat.RELAXED_DOMAIN_NAME = new StringBuilder().append("(?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}(?:\\.(?=\\S))?)+|").append(android.support.v4.util.PatternsCompat.IP_ADDRESS).append(")").toString();
        android.support.v4.util.PatternsCompat.WEB_URL_WITHOUT_PROTOCOL = new StringBuilder().append("((?:\\b|$|^)(?<!:\\/\\/)((?:").append(android.support.v4.util.PatternsCompat.STRICT_DOMAIN_NAME).append(")").append("(?:").append("\\:\\d{1,5}").append(")?").append(")").append("(?:").append("[/\\?](?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]];/\\?:@&=#~\\-\\.\\+!\\*\'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*").append(")?").append("(?:\\b|$|^)").append(")").toString();
        android.support.v4.util.PatternsCompat.WEB_URL_WITH_PROTOCOL = new StringBuilder().append("((?:\\b|$|^)(?:(?:(?i:http|https|rtsp)://(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)(?:").append(android.support.v4.util.PatternsCompat.RELAXED_DOMAIN_NAME).append(")?").append("(?:").append("\\:\\d{1,5}").append(")?").append(")").append("(?:").append("[/\\?](?:(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]];/\\?:@&=#~\\-\\.\\+!\\*\'\\(\\),_\\$])|(?:%[a-fA-F0-9]{2}))*").append(")?").append("(?:\\b|$|^)").append(")").toString();
        android.support.v4.util.PatternsCompat.AUTOLINK_WEB_URL = java.util.regex.Pattern.compile(new StringBuilder().append("(").append(android.support.v4.util.PatternsCompat.WEB_URL_WITH_PROTOCOL).append("|").append(android.support.v4.util.PatternsCompat.WEB_URL_WITHOUT_PROTOCOL).append(")").toString());
        android.support.v4.util.PatternsCompat.AUTOLINK_EMAIL_ADDRESS = java.util.regex.Pattern.compile("((?:\\b|$|^)(?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'\\.]{1,62}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]\\+\\-_%\'])?@(?=.{1,255}(?:\\s|$|^))([a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]](?:[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]_\\-]{0,61}[a-zA-Z0-9[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]){0,1}\\.)+(xn\\-\\-[\\w\\-]{0,58}\\w|[a-zA-Z[\u00a0-\ud7ff\uf900-\ufdcf\ufdf0-\uffef\u10000-\u1fffd\u20000-\u2fffd\u30000-\u3fffd\u40000-\u4fffd\u50000-\u5fffd\u60000-\u6fffd\u70000-\u7fffd\u80000-\u8fffd\u90000-\u9fffd\ua0000-\uafffd\ub0000-\ubfffd\uc0000-\ucfffd\ud0000-\udfffd\ue1000-\uefffd&&[^\u00a0[\u2000-\u200a]\u2028\u2029\u202f\u3000]]]{2,63}))(?:\\b|$|^))");
        android.support.v4.util.PatternsCompat.EMAIL_ADDRESS = java.util.regex.Pattern.compile("[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}\\@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+");
        return;
    }

    private PatternsCompat()
    {
        return;
    }
}
package android.support.v4.util;
public interface Pools$Pool {

    public abstract Object acquire();

    public abstract boolean release();
}
package android.support.v4.util;
public final class Pools {

    private Pools()
    {
        return;
    }
}
package android.support.v4.util;
public class SimpleArrayMap {
    private static final int BASE_SIZE = 4;
    private static final int CACHE_SIZE = 10;
    private static final boolean DEBUG = False;
    private static final String TAG = "ArrayMap";
    static Object[] mBaseCache;
    static int mBaseCacheSize;
    static Object[] mTwiceBaseCache;
    static int mTwiceBaseCacheSize;
    Object[] mArray;
    int[] mHashes;
    int mSize;

    public SimpleArrayMap()
    {
        this.mHashes = android.support.v4.util.ContainerHelpers.EMPTY_INTS;
        this.mArray = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
        this.mSize = 0;
        return;
    }

    public SimpleArrayMap(int p2)
    {
        if (p2 != 0) {
            this.allocArrays(p2);
        } else {
            this.mHashes = android.support.v4.util.ContainerHelpers.EMPTY_INTS;
            this.mArray = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
        }
        this.mSize = 0;
        return;
    }

    public SimpleArrayMap(android.support.v4.util.SimpleArrayMap p1)
    {
        if (p1 != null) {
            this.putAll(p1);
        }
        return;
    }

    private void allocArrays(int p6)
    {
        if (p6 != 8) {
            if (p6 != 4) {
                int v1_14 = new int[p6];
                this.mHashes = v1_14;
                int v1_16 = new Object[(p6 << 1)];
                this.mArray = v1_16;
            } else {
                try {
                    if (android.support.v4.util.SimpleArrayMap.mBaseCache == null) {
                    } else {
                        Object[] v0_1 = android.support.v4.util.SimpleArrayMap.mBaseCache;
                        this.mArray = v0_1;
                        android.support.v4.util.SimpleArrayMap.mBaseCache = ((Object[]) ((Object[]) v0_1[0]));
                        this.mHashes = ((int[]) ((int[]) v0_1[1]));
                        v0_1[1] = 0;
                        v0_1[0] = 0;
                        android.support.v4.util.SimpleArrayMap.mBaseCacheSize = (android.support.v4.util.SimpleArrayMap.mBaseCacheSize - 1);
                    }
                } catch (int v1_12) {
                    throw v1_12;
                }
            }
        } else {
            if (android.support.v4.util.SimpleArrayMap.mTwiceBaseCache == null) {
            } else {
                Object[] v0_0 = android.support.v4.util.SimpleArrayMap.mTwiceBaseCache;
                this.mArray = v0_0;
                android.support.v4.util.SimpleArrayMap.mTwiceBaseCache = ((Object[]) ((Object[]) v0_0[0]));
                this.mHashes = ((int[]) ((int[]) v0_0[1]));
                v0_0[1] = 0;
                v0_0[0] = 0;
                android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize = (android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize - 1);
            }
        }
        return;
    }

    private static void freeArrays(int[] p5, Object[] p6, int p7)
    {
        try {
            if (p5.length != 8) {
                if (p5.length == 4) {
                    try {
                        if (android.support.v4.util.SimpleArrayMap.mBaseCacheSize < 10) {
                            p6[0] = android.support.v4.util.SimpleArrayMap.mBaseCache;
                            p6[1] = p5;
                            int v0_0 = ((p7 << 1) - 1);
                            while (v0_0 >= 2) {
                                p6[v0_0] = 0;
                                v0_0--;
                            }
                            android.support.v4.util.SimpleArrayMap.mBaseCache = p6;
                            android.support.v4.util.SimpleArrayMap.mBaseCacheSize = (android.support.v4.util.SimpleArrayMap.mBaseCacheSize + 1);
                        }
                    } catch (int v1_7) {
                        throw v1_7;
                    }
                }
            } else {
                if (android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize < 10) {
                    p6[0] = android.support.v4.util.SimpleArrayMap.mTwiceBaseCache;
                    p6[1] = p5;
                    int v0_1 = ((p7 << 1) - 1);
                    while (v0_1 >= 2) {
                        p6[v0_1] = 0;
                        v0_1--;
                    }
                    android.support.v4.util.SimpleArrayMap.mTwiceBaseCache = p6;
                    android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize = (android.support.v4.util.SimpleArrayMap.mTwiceBaseCacheSize + 1);
                }
            }
        } catch (int v1_15) {
            throw v1_15;
        }
        return;
    }

    public void clear()
    {
        if (this.mSize != 0) {
            android.support.v4.util.SimpleArrayMap.freeArrays(this.mHashes, this.mArray, this.mSize);
            this.mHashes = android.support.v4.util.ContainerHelpers.EMPTY_INTS;
            this.mArray = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
            this.mSize = 0;
        }
        return;
    }

    public boolean containsKey(Object p2)
    {
        int v0_1;
        if (this.indexOfKey(p2) < 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean containsValue(Object p2)
    {
        int v0_1;
        if (this.indexOfValue(p2) < 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void ensureCapacity(int p6)
    {
        if (this.mHashes.length < p6) {
            int[] v1 = this.mHashes;
            Object[] v0 = this.mArray;
            this.allocArrays(p6);
            if (this.mSize > 0) {
                System.arraycopy(v1, 0, this.mHashes, 0, this.mSize);
                System.arraycopy(v0, 0, this.mArray, 0, (this.mSize << 1));
            }
            android.support.v4.util.SimpleArrayMap.freeArrays(v1, v0, this.mSize);
        }
        return;
    }

    public boolean equals(Object p12)
    {
        int v7 = 1;
        if (this != p12) {
            if (!(p12 instanceof android.support.v4.util.SimpleArrayMap)) {
                if (!(p12 instanceof java.util.Map)) {
                    v7 = 0;
                } else {
                    if (this.size() == ((java.util.Map) p12).size()) {
                        int v0_0 = 0;
                        try {
                            while (v0_0 < this.mSize) {
                                Object v2_0 = this.keyAt(v0_0);
                                Object v5_0 = this.valueAt(v0_0);
                                Object v6_0 = ((java.util.Map) p12).get(v2_0);
                                if (v5_0 != null) {
                                    if (!v5_0.equals(v6_0)) {
                                        v7 = 0;
                                        break;
                                    }
                                } else {
                                    if ((v6_0 != null) || (!((java.util.Map) p12).containsKey(v2_0))) {
                                        v7 = 0;
                                        break;
                                    }
                                }
                                v0_0++;
                            }
                        } catch (ClassCastException v1) {
                            v7 = 0;
                        } catch (ClassCastException v1) {
                            v7 = 0;
                        }
                    } else {
                        v7 = 0;
                    }
                }
            } else {
                if (this.size() == ((android.support.v4.util.SimpleArrayMap) p12).size()) {
                    int v0_1 = 0;
                    try {
                        while (v0_1 < this.mSize) {
                            Object v2_1 = this.keyAt(v0_1);
                            Object v5_1 = this.valueAt(v0_1);
                            Object v6_1 = ((android.support.v4.util.SimpleArrayMap) p12).get(v2_1);
                            if (v5_1 != null) {
                                if (!v5_1.equals(v6_1)) {
                                    v7 = 0;
                                    break;
                                }
                            } else {
                                if ((v6_1 != null) || (!((android.support.v4.util.SimpleArrayMap) p12).containsKey(v2_1))) {
                                    v7 = 0;
                                    break;
                                }
                            }
                            v0_1++;
                        }
                    } catch (ClassCastException v1) {
                        v7 = 0;
                    } catch (ClassCastException v1) {
                        v7 = 0;
                    }
                } else {
                    v7 = 0;
                }
            }
        }
        return v7;
    }

    public Object get(Object p4)
    {
        int v1_0;
        int v0 = this.indexOfKey(p4);
        if (v0 < 0) {
            v1_0 = 0;
        } else {
            v1_0 = this.mArray[((v0 << 1) + 1)];
        }
        return v1_0;
    }

    public int hashCode()
    {
        int[] v1 = this.mHashes;
        Object[] v0 = this.mArray;
        int v3 = 0;
        int v2 = 0;
        int v5 = 1;
        int v4 = this.mSize;
        while (v2 < v4) {
            int v7_0;
            Object v6 = v0[v5];
            int v8 = v1[v2];
            if (v6 != null) {
                v7_0 = v6.hashCode();
            } else {
                v7_0 = 0;
            }
            v3 += (v7_0 ^ v8);
            v2++;
            v5 += 2;
        }
        return v3;
    }

    int indexOf(Object p7, int p8)
    {
        int v3;
        int v0 = this.mSize;
        if (v0 != 0) {
            v3 = android.support.v4.util.ContainerHelpers.binarySearch(this.mHashes, v0, p8);
            if ((v3 >= 0) && (!p7.equals(this.mArray[(v3 << 1)]))) {
                int v1 = (v3 + 1);
                while ((v1 < v0) && (this.mHashes[v1] == p8)) {
                    if (!p7.equals(this.mArray[(v1 << 1)])) {
                        v1++;
                    } else {
                        v3 = v1;
                    }
                }
                int v2 = (v3 - 1);
                while ((v2 >= 0) && (this.mHashes[v2] == p8)) {
                    if (!p7.equals(this.mArray[(v2 << 1)])) {
                        v2--;
                    } else {
                        v3 = v2;
                    }
                }
                v3 = (v1 ^ -1);
            }
        } else {
            v3 = -1;
        }
        return v3;
    }

    public int indexOfKey(Object p2)
    {
        int v0_1;
        if (p2 != null) {
            v0_1 = this.indexOf(p2, p2.hashCode());
        } else {
            v0_1 = this.indexOfNull();
        }
        return v0_1;
    }

    int indexOfNull()
    {
        int v3;
        int v0 = this.mSize;
        if (v0 != 0) {
            v3 = android.support.v4.util.ContainerHelpers.binarySearch(this.mHashes, v0, 0);
            if ((v3 >= 0) && (this.mArray[(v3 << 1)] != null)) {
                int v1 = (v3 + 1);
                while ((v1 < v0) && (this.mHashes[v1] == 0)) {
                    if (this.mArray[(v1 << 1)] != null) {
                        v1++;
                    } else {
                        v3 = v1;
                    }
                }
                int v2 = (v3 - 1);
                while ((v2 >= 0) && (this.mHashes[v2] == 0)) {
                    if (this.mArray[(v2 << 1)] != null) {
                        v2--;
                    } else {
                        v3 = v2;
                    }
                }
                v3 = (v1 ^ -1);
            }
        } else {
            v3 = -1;
        }
        return v3;
    }

    int indexOfValue(Object p5)
    {
        int v3_1;
        int v0 = (this.mSize * 2);
        Object[] v1 = this.mArray;
        if (p5 != null) {
            int v2_0 = 1;
            while (v2_0 < v0) {
                if (!p5.equals(v1[v2_0])) {
                    v2_0 += 2;
                } else {
                    v3_1 = (v2_0 >> 1);
                }
            }
            v3_1 = -1;
        } else {
            int v2_1 = 1;
            while (v2_1 < v0) {
                if (v1[v2_1] != null) {
                    v2_1 += 2;
                } else {
                    v3_1 = (v2_1 >> 1);
                }
            }
        }
        return v3_1;
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.mSize > 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public Object keyAt(int p3)
    {
        return this.mArray[(p3 << 1)];
    }

    public Object put(Object p12, Object p13)
    {
        int v0;
        int v1_0;
        int v2 = 8;
        if (p12 != null) {
            v0 = p12.hashCode();
            v1_0 = this.indexOf(p12, v0);
        } else {
            v0 = 0;
            v1_0 = this.indexOfNull();
        }
        int v5;
        if (v1_0 < 0) {
            int v1_1 = (v1_0 ^ -1);
            if (this.mSize >= this.mHashes.length) {
                if (this.mSize < 8) {
                    if (this.mSize < 4) {
                        v2 = 4;
                    }
                } else {
                    v2 = (this.mSize + (this.mSize >> 1));
                }
                int[] v4 = this.mHashes;
                Object[] v3 = this.mArray;
                this.allocArrays(v2);
                if (this.mHashes.length > 0) {
                    System.arraycopy(v4, 0, this.mHashes, 0, v4.length);
                    System.arraycopy(v3, 0, this.mArray, 0, v3.length);
                }
                android.support.v4.util.SimpleArrayMap.freeArrays(v4, v3, this.mSize);
            }
            if (v1_1 < this.mSize) {
                System.arraycopy(this.mHashes, v1_1, this.mHashes, (v1_1 + 1), (this.mSize - v1_1));
                System.arraycopy(this.mArray, (v1_1 << 1), this.mArray, ((v1_1 + 1) << 1), ((this.mSize - v1_1) << 1));
            }
            this.mHashes[v1_1] = v0;
            this.mArray[(v1_1 << 1)] = p12;
            this.mArray[((v1_1 << 1) + 1)] = p13;
            this.mSize = (this.mSize + 1);
            v5 = 0;
        } else {
            int v1_2 = ((v1_0 << 1) + 1);
            v5 = this.mArray[v1_2];
            this.mArray[v1_2] = p13;
        }
        return v5;
    }

    public void putAll(android.support.v4.util.SimpleArrayMap p7)
    {
        int v0 = p7.mSize;
        this.ensureCapacity((this.mSize + v0));
        if (this.mSize != 0) {
            int v1 = 0;
            while (v1 < v0) {
                this.put(p7.keyAt(v1), p7.valueAt(v1));
                v1++;
            }
        } else {
            if (v0 > 0) {
                System.arraycopy(p7.mHashes, 0, this.mHashes, 0, v0);
                System.arraycopy(p7.mArray, 0, this.mArray, 0, (v0 << 1));
                this.mSize = v0;
            }
        }
        return;
    }

    public Object remove(Object p3)
    {
        int v1;
        int v0 = this.indexOfKey(p3);
        if (v0 < 0) {
            v1 = 0;
        } else {
            v1 = this.removeAt(v0);
        }
        return v1;
    }

    public Object removeAt(int p11)
    {
        int v0 = 8;
        Object v3 = this.mArray[((p11 << 1) + 1)];
        if (this.mSize > 1) {
            if ((this.mHashes.length <= 8) || (this.mSize >= (this.mHashes.length / 3))) {
                this.mSize = (this.mSize - 1);
                if (p11 < this.mSize) {
                    System.arraycopy(this.mHashes, (p11 + 1), this.mHashes, p11, (this.mSize - p11));
                    System.arraycopy(this.mArray, ((p11 + 1) << 1), this.mArray, (p11 << 1), ((this.mSize - p11) << 1));
                }
                this.mArray[(this.mSize << 1)] = 0;
                this.mArray[((this.mSize << 1) + 1)] = 0;
            } else {
                if (this.mSize > 8) {
                    v0 = (this.mSize + (this.mSize >> 1));
                }
                int[] v2 = this.mHashes;
                Object[] v1 = this.mArray;
                this.allocArrays(v0);
                this.mSize = (this.mSize - 1);
                if (p11 > 0) {
                    System.arraycopy(v2, 0, this.mHashes, 0, p11);
                    System.arraycopy(v1, 0, this.mArray, 0, (p11 << 1));
                }
                if (p11 < this.mSize) {
                    System.arraycopy(v2, (p11 + 1), this.mHashes, p11, (this.mSize - p11));
                    System.arraycopy(v1, ((p11 + 1) << 1), this.mArray, (p11 << 1), ((this.mSize - p11) << 1));
                }
            }
        } else {
            android.support.v4.util.SimpleArrayMap.freeArrays(this.mHashes, this.mArray, this.mSize);
            this.mHashes = android.support.v4.util.ContainerHelpers.EMPTY_INTS;
            this.mArray = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
            this.mSize = 0;
        }
        return v3;
    }

    public Object setValueAt(int p3, Object p4)
    {
        int v3_1 = ((p3 << 1) + 1);
        Object v0 = this.mArray[v3_1];
        this.mArray[v3_1] = p4;
        return v0;
    }

    public int size()
    {
        return this.mSize;
    }

    public String toString()
    {
        String v4_3;
        if (!this.isEmpty()) {
            StringBuilder v0_1 = new StringBuilder((this.mSize * 28));
            v0_1.append(123);
            int v1 = 0;
            while (v1 < this.mSize) {
                if (v1 > 0) {
                    v0_1.append(", ");
                }
                Object v2 = this.keyAt(v1);
                if (v2 == this) {
                    v0_1.append("(this Map)");
                } else {
                    v0_1.append(v2);
                }
                v0_1.append(61);
                Object v3 = this.valueAt(v1);
                if (v3 == this) {
                    v0_1.append("(this Map)");
                } else {
                    v0_1.append(v3);
                }
                v1++;
            }
            v0_1.append(125);
            v4_3 = v0_1.toString();
        } else {
            v4_3 = "{}";
        }
        return v4_3;
    }

    public Object valueAt(int p3)
    {
        return this.mArray[((p3 << 1) + 1)];
    }
}
package android.support.v4.util;
public class SparseArrayCompat implements java.lang.Cloneable {
    private static final Object DELETED;
    private boolean mGarbage;
    private int[] mKeys;
    private int mSize;
    private Object[] mValues;

    static SparseArrayCompat()
    {
        android.support.v4.util.SparseArrayCompat.DELETED = new Object();
        return;
    }

    public SparseArrayCompat()
    {
        this(10);
        return;
    }

    public SparseArrayCompat(int p3)
    {
        this.mGarbage = 0;
        if (p3 != 0) {
            int v3_1 = android.support.v4.util.ContainerHelpers.idealIntArraySize(p3);
            Object[] v0_2 = new int[v3_1];
            this.mKeys = v0_2;
            Object[] v0_3 = new Object[v3_1];
            this.mValues = v0_3;
        } else {
            this.mKeys = android.support.v4.util.ContainerHelpers.EMPTY_INTS;
            this.mValues = android.support.v4.util.ContainerHelpers.EMPTY_OBJECTS;
        }
        this.mSize = 0;
        return;
    }

    private void gc()
    {
        int v2 = this.mSize;
        int v3 = 0;
        int[] v1 = this.mKeys;
        Object[] v5 = this.mValues;
        int v0 = 0;
        while (v0 < v2) {
            Object v4 = v5[v0];
            if (v4 != android.support.v4.util.SparseArrayCompat.DELETED) {
                if (v0 != v3) {
                    v1[v3] = v1[v0];
                    v5[v3] = v4;
                    v5[v0] = 0;
                }
                v3++;
            }
            v0++;
        }
        this.mGarbage = 0;
        this.mSize = v3;
        return;
    }

    public void append(int p8, Object p9)
    {
        if ((this.mSize == 0) || (p8 > this.mKeys[(this.mSize - 1)])) {
            if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                this.gc();
            }
            int v3 = this.mSize;
            if (v3 >= this.mKeys.length) {
                int v0 = android.support.v4.util.ContainerHelpers.idealIntArraySize((v3 + 1));
                int[] v1 = new int[v0];
                Object[] v2 = new Object[v0];
                System.arraycopy(this.mKeys, 0, v1, 0, this.mKeys.length);
                System.arraycopy(this.mValues, 0, v2, 0, this.mValues.length);
                this.mKeys = v1;
                this.mValues = v2;
            }
            this.mKeys[v3] = p8;
            this.mValues[v3] = p9;
            this.mSize = (v3 + 1);
        } else {
            this.put(p8, p9);
        }
        return;
    }

    public void clear()
    {
        int v1 = this.mSize;
        int v0 = 0;
        while (v0 < v1) {
            this.mValues[v0] = 0;
            v0++;
        }
        this.mSize = 0;
        this.mGarbage = 0;
        return;
    }

    public android.support.v4.util.SparseArrayCompat clone()
    {
        try {
            android.support.v4.util.SparseArrayCompat v1 = ((android.support.v4.util.SparseArrayCompat) super.clone());
            v1.mKeys = ((int[]) this.mKeys.clone());
            v1.mValues = ((Object[]) this.mValues.clone());
        } catch (CloneNotSupportedException v2) {
        }
        return v1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public void delete(int p4)
    {
        int v0 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p4);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.util.SparseArrayCompat.DELETED)) {
            this.mValues[v0] = android.support.v4.util.SparseArrayCompat.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public Object get(int p2)
    {
        return this.get(p2, 0);
    }

    public Object get(int p4, Object p5)
    {
        int v0 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p4);
        if ((v0 >= 0) && (this.mValues[v0] != android.support.v4.util.SparseArrayCompat.DELETED)) {
            p5 = this.mValues[v0];
        }
        return p5;
    }

    public int indexOfKey(int p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p3);
    }

    public int indexOfValue(Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        int v0 = 0;
        while (v0 < this.mSize) {
            if (this.mValues[v0] != p3) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public int keyAt(int p2)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mKeys[p2];
    }

    public void put(int p9, Object p10)
    {
        int v0_1 = android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p9);
        if (v0_1 < 0) {
            int v0_0 = (v0_1 ^ -1);
            if ((v0_0 >= this.mSize) || (this.mValues[v0_0] != android.support.v4.util.SparseArrayCompat.DELETED)) {
                if ((this.mGarbage) && (this.mSize >= this.mKeys.length)) {
                    this.gc();
                    v0_0 = (android.support.v4.util.ContainerHelpers.binarySearch(this.mKeys, this.mSize, p9) ^ -1);
                }
                if (this.mSize >= this.mKeys.length) {
                    int v1 = android.support.v4.util.ContainerHelpers.idealIntArraySize((this.mSize + 1));
                    int[] v2 = new int[v1];
                    Object[] v3 = new Object[v1];
                    System.arraycopy(this.mKeys, 0, v2, 0, this.mKeys.length);
                    System.arraycopy(this.mValues, 0, v3, 0, this.mValues.length);
                    this.mKeys = v2;
                    this.mValues = v3;
                }
                if ((this.mSize - v0_0) != 0) {
                    System.arraycopy(this.mKeys, v0_0, this.mKeys, (v0_0 + 1), (this.mSize - v0_0));
                    System.arraycopy(this.mValues, v0_0, this.mValues, (v0_0 + 1), (this.mSize - v0_0));
                }
                this.mKeys[v0_0] = p9;
                this.mValues[v0_0] = p10;
                this.mSize = (this.mSize + 1);
            } else {
                this.mKeys[v0_0] = p9;
                this.mValues[v0_0] = p10;
            }
        } else {
            this.mValues[v0_1] = p10;
        }
        return;
    }

    public void remove(int p1)
    {
        this.delete(p1);
        return;
    }

    public void removeAt(int p3)
    {
        if (this.mValues[p3] != android.support.v4.util.SparseArrayCompat.DELETED) {
            this.mValues[p3] = android.support.v4.util.SparseArrayCompat.DELETED;
            this.mGarbage = 1;
        }
        return;
    }

    public void removeAtRange(int p5, int p6)
    {
        int v0 = Math.min(this.mSize, (p5 + p6));
        int v1 = p5;
        while (v1 < v0) {
            this.removeAt(v1);
            v1++;
        }
        return;
    }

    public void setValueAt(int p2, Object p3)
    {
        if (this.mGarbage) {
            this.gc();
        }
        this.mValues[p2] = p3;
        return;
    }

    public int size()
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mSize;
    }

    public String toString()
    {
        String v4_3;
        if (this.size() > 0) {
            StringBuilder v0_1 = new StringBuilder((this.mSize * 28));
            v0_1.append(123);
            int v1 = 0;
            while (v1 < this.mSize) {
                if (v1 > 0) {
                    v0_1.append(", ");
                }
                v0_1.append(this.keyAt(v1));
                v0_1.append(61);
                Object v3 = this.valueAt(v1);
                if (v3 == this) {
                    v0_1.append("(this Map)");
                } else {
                    v0_1.append(v3);
                }
                v1++;
            }
            v0_1.append(125);
            v4_3 = v0_1.toString();
        } else {
            v4_3 = "{}";
        }
        return v4_3;
    }

    public Object valueAt(int p2)
    {
        if (this.mGarbage) {
            this.gc();
        }
        return this.mValues[p2];
    }
}
package android.support.v4.util;
public final class TimeUtils {
    public static final int HUNDRED_DAY_FIELD_LEN = 19;
    private static final int SECONDS_PER_DAY = 86400;
    private static final int SECONDS_PER_HOUR = 3600;
    private static final int SECONDS_PER_MINUTE = 60;
    private static char[] sFormatStr;
    private static final Object sFormatSync;

    static TimeUtils()
    {
        android.support.v4.util.TimeUtils.sFormatSync = new Object();
        char[] v0_3 = new char[24];
        android.support.v4.util.TimeUtils.sFormatStr = v0_3;
        return;
    }

    private TimeUtils()
    {
        return;
    }

    private static int accumField(int p1, int p2, boolean p3, int p4)
    {
        if ((p1 <= 99) && ((!p3) || (p4 < 3))) {
            if ((p1 <= 9) && ((!p3) || (p4 < 2))) {
                if ((!p3) && (p1 <= 0)) {
                    int v0_1 = 0;
                } else {
                    v0_1 = (p2 + 1);
                }
            } else {
                v0_1 = (p2 + 2);
            }
        } else {
            v0_1 = (p2 + 3);
        }
        return v0_1;
    }

    public static void formatDuration(long p4, long p6, java.io.PrintWriter p8)
    {
        if (p4 != 0) {
            android.support.v4.util.TimeUtils.formatDuration((p4 - p6), p8, 0);
        } else {
            p8.print("--");
        }
        return;
    }

    public static void formatDuration(long p2, java.io.PrintWriter p4)
    {
        android.support.v4.util.TimeUtils.formatDuration(p2, p4, 0);
        return;
    }

    public static void formatDuration(long p6, java.io.PrintWriter p8, int p9)
    {
        try {
            p8.print(new String(android.support.v4.util.TimeUtils.sFormatStr, 0, android.support.v4.util.TimeUtils.formatDurationLocked(p6, p9)));
            return;
        } catch (Throwable v1_2) {
            throw v1_2;
        }
    }

    public static void formatDuration(long p4, StringBuilder p6)
    {
        try {
            p6.append(android.support.v4.util.TimeUtils.sFormatStr, 0, android.support.v4.util.TimeUtils.formatDurationLocked(p4, 0));
            return;
        } catch (Throwable v1_2) {
            throw v1_2;
        }
    }

    private static int formatDurationLocked(long p20, int p22)
    {
        if (android.support.v4.util.TimeUtils.sFormatStr.length < p22) {
            int v4_16 = new char[p22];
            android.support.v4.util.TimeUtils.sFormatStr = v4_16;
        }
        int v4_5;
        char[] v2 = android.support.v4.util.TimeUtils.sFormatStr;
        if (p20 != 0) {
            int v16;
            if (p20 <= 0) {
                v16 = 45;
                p20 = (- p20);
            } else {
                v16 = 43;
            }
            int v13 = ((int) (p20 % 1000));
            int v17 = ((int) Math.floor(((double) (p20 / 1000))));
            int v3 = 0;
            int v12 = 0;
            int v14 = 0;
            if (v17 > 86400) {
                v3 = (v17 / 86400);
                v17 -= (86400 * v3);
            }
            if (v17 > 3600) {
                v12 = (v17 / 3600);
                v17 -= (v12 * 3600);
            }
            if (v17 > 60) {
                v14 = (v17 / 60);
                v17 -= (v14 * 60);
            }
            int v5_5 = 0;
            if (p22 != 0) {
                int v4_19;
                int v15_1 = android.support.v4.util.TimeUtils.accumField(v3, 1, 0, 0);
                if (v15_1 <= 0) {
                    v4_19 = 0;
                } else {
                    v4_19 = 1;
                }
                int v4_21;
                int v15_2 = (v15_1 + android.support.v4.util.TimeUtils.accumField(v12, 1, v4_19, 2));
                if (v15_2 <= 0) {
                    v4_21 = 0;
                } else {
                    v4_21 = 1;
                }
                int v4_23;
                int v15_3 = (v15_2 + android.support.v4.util.TimeUtils.accumField(v14, 1, v4_21, 2));
                if (v15_3 <= 0) {
                    v4_23 = 0;
                } else {
                    v4_23 = 1;
                }
                int v4_25;
                int v15_4 = (v15_3 + android.support.v4.util.TimeUtils.accumField(v17, 1, v4_23, 2));
                if (v15_4 <= 0) {
                    v4_25 = 0;
                } else {
                    v4_25 = 3;
                }
                int v15_0 = (v15_4 + (android.support.v4.util.TimeUtils.accumField(v13, 2, 1, v4_25) + 1));
                while (v15_0 < p22) {
                    v2[v5_5] = 32;
                    v5_5++;
                    v15_0++;
                }
            }
            int v19;
            v2[v5_5] = v16;
            int v5_7 = (v5_5 + 1);
            int v18 = v5_7;
            if (p22 == 0) {
                v19 = 0;
            } else {
                v19 = 1;
            }
            int v10_0;
            int v5_0 = android.support.v4.util.TimeUtils.printField(v2, v3, 100, v5_7, 0, 0);
            if (v5_0 == v18) {
                v10_0 = 0;
            } else {
                v10_0 = 1;
            }
            int v11_0;
            if (v19 == 0) {
                v11_0 = 0;
            } else {
                v11_0 = 2;
            }
            int v10_1;
            int v5_1 = android.support.v4.util.TimeUtils.printField(v2, v12, 104, v5_0, v10_0, v11_0);
            if (v5_1 == v18) {
                v10_1 = 0;
            } else {
                v10_1 = 1;
            }
            int v11_1;
            if (v19 == 0) {
                v11_1 = 0;
            } else {
                v11_1 = 2;
            }
            int v10_2;
            int v5_2 = android.support.v4.util.TimeUtils.printField(v2, v14, 109, v5_1, v10_1, v11_1);
            if (v5_2 == v18) {
                v10_2 = 0;
            } else {
                v10_2 = 1;
            }
            int v11_2;
            if (v19 == 0) {
                v11_2 = 0;
            } else {
                v11_2 = 2;
            }
            int v11_3;
            int v5_3 = android.support.v4.util.TimeUtils.printField(v2, v17, 115, v5_2, v10_2, v11_2);
            if ((v19 == 0) || (v5_3 == v18)) {
                v11_3 = 0;
            } else {
                v11_3 = 3;
            }
            int v5_4 = android.support.v4.util.TimeUtils.printField(v2, v13, 109, v5_3, 1, v11_3);
            v2[v5_4] = 115;
            v4_5 = (v5_4 + 1);
        } else {
            int v22_1 = (p22 - 1);
            while (0 < v22_1) {
                v2[0] = 32;
            }
            v2[0] = 48;
            v4_5 = 1;
        }
        return v4_5;
    }

    private static int printField(char[] p3, int p4, char p5, int p6, boolean p7, int p8)
    {
        if ((p7) || (p4 > 0)) {
            if (((p7) && (p8 >= 3)) || (p4 > 99)) {
                int v0_1 = (p4 / 100);
                p3[p6] = ((char) (v0_1 + 48));
                p6++;
                p4 -= (v0_1 * 100);
            }
            if (((p7) && (p8 >= 2)) || ((p4 > 9) || (p6 != p6))) {
                int v0_0 = (p4 / 10);
                p3[p6] = ((char) (v0_0 + 48));
                p6++;
                p4 -= (v0_0 * 10);
            }
            p3[p6] = ((char) (p4 + 48));
            int v6_1 = (p6 + 1);
            p3[v6_1] = p5;
            p6 = (v6_1 + 1);
        }
        return p6;
    }
}
package android.support.v4.view;
public abstract class AbsSavedState implements android.os.Parcelable {
    public static final android.os.Parcelable$Creator CREATOR;
    public static final android.support.v4.view.AbsSavedState EMPTY_STATE;
    private final android.os.Parcelable mSuperState;

    static AbsSavedState()
    {
        android.support.v4.view.AbsSavedState.EMPTY_STATE = new android.support.v4.view.AbsSavedState$1();
        android.support.v4.view.AbsSavedState.CREATOR = android.support.v4.os.ParcelableCompat.newCreator(new android.support.v4.view.AbsSavedState$2());
        return;
    }

    private AbsSavedState()
    {
        this.mSuperState = 0;
        return;
    }

    protected AbsSavedState(android.os.Parcel p2)
    {
        this(p2, 0);
        return;
    }

    protected AbsSavedState(android.os.Parcel p2, ClassLoader p3)
    {
        android.support.v4.view.AbsSavedState v0 = p2.readParcelable(p3);
        if (v0 == null) {
            v0 = android.support.v4.view.AbsSavedState.EMPTY_STATE;
        }
        this.mSuperState = v0;
        return;
    }

    protected AbsSavedState(android.os.Parcelable p3)
    {
        if (p3 != 0) {
            if (p3 == android.support.v4.view.AbsSavedState.EMPTY_STATE) {
                p3 = 0;
            }
            this.mSuperState = p3;
            return;
        } else {
            throw new IllegalArgumentException("superState must not be null");
        }
    }

    synthetic AbsSavedState(android.support.v4.view.AbsSavedState$1 p1)
    {
        return;
    }

    public int describeContents()
    {
        return 0;
    }

    public final android.os.Parcelable getSuperState()
    {
        return this.mSuperState;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        p2.writeParcelable(this.mSuperState, p3);
        return;
    }
}
package android.support.v4.view;
interface AccessibilityDelegateCompat$AccessibilityDelegateImpl {

    public abstract boolean dispatchPopulateAccessibilityEvent();

    public abstract android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider();

    public abstract Object newAccessiblityDelegateBridge();

    public abstract Object newAccessiblityDelegateDefaultImpl();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract boolean performAccessibilityAction();

    public abstract void sendAccessibilityEvent();

    public abstract void sendAccessibilityEventUnchecked();
}
package android.support.v4.view;
public class AccessibilityDelegateCompat {
    private static final Object DEFAULT_DELEGATE;
    private static final android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL;
    final Object mBridge;

    static AccessibilityDelegateCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                android.support.v4.view.AccessibilityDelegateCompat.IMPL = new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl();
            } else {
                android.support.v4.view.AccessibilityDelegateCompat.IMPL = new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl();
            }
        } else {
            android.support.v4.view.AccessibilityDelegateCompat.IMPL = new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl();
        }
        android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE = android.support.v4.view.AccessibilityDelegateCompat.IMPL.newAccessiblityDelegateDefaultImpl();
        return;
    }

    public AccessibilityDelegateCompat()
    {
        this.mBridge = android.support.v4.view.AccessibilityDelegateCompat.IMPL.newAccessiblityDelegateBridge(this);
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.dispatchPopulateAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View p3)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.getAccessibilityNodeProvider(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3);
    }

    Object getBridge()
    {
        return this.mBridge;
    }

    public void onInitializeAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onInitializeAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onInitializeAccessibilityNodeInfo(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.onPopulateAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.onRequestSendAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4, p5);
    }

    public boolean performAccessibilityAction(android.view.View p3, int p4, android.os.Bundle p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompat.IMPL.performAccessibilityAction(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4, p5);
    }

    public void sendAccessibilityEvent(android.view.View p3, int p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.sendAccessibilityEvent(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        android.support.v4.view.AccessibilityDelegateCompat.IMPL.sendAccessibilityEventUnchecked(android.support.v4.view.AccessibilityDelegateCompat.DEFAULT_DELEGATE, p3, p4);
        return;
    }
}
package android.support.v4.view;
final class AccessibilityDelegateCompatIcs$1 extends android.view.View$AccessibilityDelegate {
    final synthetic android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge;

    AccessibilityDelegateCompatIcs$1(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$bridge.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.view.accessibility.AccessibilityNodeInfo p3)
    {
        this.val$bridge.onInitializeAccessibilityNodeInfo(p2, p3);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$bridge.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$bridge.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }
}
package android.support.v4.view;
public interface AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge {

    public abstract boolean dispatchPopulateAccessibilityEvent();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract void sendAccessibilityEvent();

    public abstract void sendAccessibilityEventUnchecked();
}
package android.support.v4.view;
 class AccessibilityDelegateCompatIcs {

    AccessibilityDelegateCompatIcs()
    {
        return;
    }

    public static boolean dispatchPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return ((android.view.View$AccessibilityDelegate) p1).dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public static Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge p1)
    {
        return new android.support.v4.view.AccessibilityDelegateCompatIcs$1(p1);
    }

    public static Object newAccessibilityDelegateDefaultImpl()
    {
        return new android.view.View$AccessibilityDelegate();
    }

    public static void onInitializeAccessibilityEvent(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(Object p0, android.view.View p1, Object p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onInitializeAccessibilityNodeInfo(p1, ((android.view.accessibility.AccessibilityNodeInfo) p2));
        return;
    }

    public static void onPopulateAccessibilityEvent(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public static boolean onRequestSendAccessibilityEvent(Object p1, android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return ((android.view.View$AccessibilityDelegate) p1).onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public static void sendAccessibilityEvent(Object p0, android.view.View p1, int p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).sendAccessibilityEvent(p1, p2);
        return;
    }

    public static void sendAccessibilityEventUnchecked(Object p0, android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        ((android.view.View$AccessibilityDelegate) p0).sendAccessibilityEventUnchecked(p1, p2);
        return;
    }
}
package android.support.v4.view;
final class AccessibilityDelegateCompatJellyBean$1 extends android.view.View$AccessibilityDelegate {
    final synthetic android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge;

    AccessibilityDelegateCompatJellyBean$1(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean p1)
    {
        this.val$bridge = p1;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$bridge.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View p2)
    {
        return ((android.view.accessibility.AccessibilityNodeProvider) this.val$bridge.getAccessibilityNodeProvider(p2));
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.view.accessibility.AccessibilityNodeInfo p3)
    {
        this.val$bridge.onInitializeAccessibilityNodeInfo(p2, p3);
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$bridge.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public boolean performAccessibilityAction(android.view.View p2, int p3, android.os.Bundle p4)
    {
        return this.val$bridge.performAccessibilityAction(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$bridge.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$bridge.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }
}
package android.support.v4.view;
public interface AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean {

    public abstract boolean dispatchPopulateAccessibilityEvent();

    public abstract Object getAccessibilityNodeProvider();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract boolean performAccessibilityAction();

    public abstract void sendAccessibilityEvent();

    public abstract void sendAccessibilityEventUnchecked();
}
package android.support.v4.view;
 class AccessibilityDelegateCompatJellyBean {

    AccessibilityDelegateCompatJellyBean()
    {
        return;
    }

    public static Object getAccessibilityNodeProvider(Object p1, android.view.View p2)
    {
        return ((android.view.View$AccessibilityDelegate) p1).getAccessibilityNodeProvider(p2);
    }

    public static Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean p1)
    {
        return new android.support.v4.view.AccessibilityDelegateCompatJellyBean$1(p1);
    }

    public static boolean performAccessibilityAction(Object p1, android.view.View p2, int p3, android.os.Bundle p4)
    {
        return ((android.view.View$AccessibilityDelegate) p1).performAccessibilityAction(p2, p3, p4);
    }
}
package android.support.v4.view;
public interface ActionProvider$SubUiVisibilityListener {

    public abstract void onSubUiVisibilityChanged();
}
package android.support.v4.view;
public interface ActionProvider$VisibilityListener {

    public abstract void onActionProviderVisibilityChanged();
}
package android.support.v4.view;
public abstract class ActionProvider {
    private static final String TAG = "ActionProvider(support)";
    private final android.content.Context mContext;
    private android.support.v4.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener;
    private android.support.v4.view.ActionProvider$VisibilityListener mVisibilityListener;

    public ActionProvider(android.content.Context p1)
    {
        this.mContext = p1;
        return;
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public boolean hasSubMenu()
    {
        return 0;
    }

    public boolean isVisible()
    {
        return 1;
    }

    public abstract android.view.View onCreateActionView();

    public android.view.View onCreateActionView(android.view.MenuItem p2)
    {
        return this.onCreateActionView();
    }

    public boolean onPerformDefaultAction()
    {
        return 0;
    }

    public void onPrepareSubMenu(android.view.SubMenu p1)
    {
        return;
    }

    public boolean overridesItemVisibility()
    {
        return 0;
    }

    public void refreshVisibility()
    {
        if ((this.mVisibilityListener != null) && (this.overridesItemVisibility())) {
            this.mVisibilityListener.onActionProviderVisibilityChanged(this.isVisible());
        }
        return;
    }

    public void reset()
    {
        this.mVisibilityListener = 0;
        this.mSubUiVisibilityListener = 0;
        return;
    }

    public void setSubUiVisibilityListener(android.support.v4.view.ActionProvider$SubUiVisibilityListener p1)
    {
        this.mSubUiVisibilityListener = p1;
        return;
    }

    public void setVisibilityListener(android.support.v4.view.ActionProvider$VisibilityListener p4)
    {
        if ((this.mVisibilityListener != null) && (p4 != null)) {
            android.util.Log.w("ActionProvider(support)", new StringBuilder().append("setVisibilityListener: Setting a new ActionProvider.VisibilityListener when one is already set. Are you reusing this ").append(this.getClass().getSimpleName()).append(" instance while it is still in use somewhere else?").toString());
        }
        this.mVisibilityListener = p4;
        return;
    }

    public void subUiVisibilityChanged(boolean p2)
    {
        if (this.mSubUiVisibilityListener != null) {
            this.mSubUiVisibilityListener.onSubUiVisibilityChanged(p2);
        }
        return;
    }
}
package android.support.v4.view;
 class AsyncLayoutInflater$1 implements android.os.Handler$Callback {
    final synthetic android.support.v4.view.AsyncLayoutInflater this$0;

    AsyncLayoutInflater$1(android.support.v4.view.AsyncLayoutInflater p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean handleMessage(android.os.Message p6)
    {
        android.support.v4.view.AsyncLayoutInflater$InflateRequest v0_1 = ((android.support.v4.view.AsyncLayoutInflater$InflateRequest) p6.obj);
        if (v0_1.view == null) {
            v0_1.view = this.this$0.mInflater.inflate(v0_1.resid, v0_1.parent, 0);
        }
        v0_1.callback.onInflateFinished(v0_1.view, v0_1.resid, v0_1.parent);
        this.this$0.mInflateThread.releaseRequest(v0_1);
        return 1;
    }
}
package android.support.v4.view;
 class AsyncLayoutInflater$BasicInflater extends android.view.LayoutInflater {
    private static final String[] sClassPrefixList;

    static AsyncLayoutInflater$BasicInflater()
    {
        String[] v0_1 = new String[3];
        v0_1[0] = "android.widget.";
        v0_1[1] = "android.webkit.";
        v0_1[2] = "android.app.";
        android.support.v4.view.AsyncLayoutInflater$BasicInflater.sClassPrefixList = v0_1;
        return;
    }

    AsyncLayoutInflater$BasicInflater(android.content.Context p1)
    {
        super(p1);
        return;
    }

    public android.view.LayoutInflater cloneInContext(android.content.Context p2)
    {
        return new android.support.v4.view.AsyncLayoutInflater$BasicInflater(p2);
    }

    protected android.view.View onCreateView(String p7, android.util.AttributeSet p8)
    {
        String[] v3 = android.support.v4.view.AsyncLayoutInflater$BasicInflater.sClassPrefixList;
        int v4 = v3.length;
        int v2 = 0;
        while (v2 < v4) {
            try {
                android.view.View v1 = this.createView(p7, v3[v2], p8);
            } catch (ClassNotFoundException v5) {
                v2++;
            }
            if (v1 == null) {
            }
            return v1;
        }
        v1 = super.onCreateView(p7, p8);
        return v1;
    }
}
package android.support.v4.view;
 class AsyncLayoutInflater$InflateRequest {
    android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener callback;
    android.support.v4.view.AsyncLayoutInflater inflater;
    android.view.ViewGroup parent;
    int resid;
    android.view.View view;

    AsyncLayoutInflater$InflateRequest()
    {
        return;
    }
}
package android.support.v4.view;
 class AsyncLayoutInflater$InflateThread extends java.lang.Thread {
    private static final android.support.v4.view.AsyncLayoutInflater$InflateThread sInstance;
    private java.util.concurrent.ArrayBlockingQueue mQueue;
    private android.support.v4.util.Pools$SynchronizedPool mRequestPool;

    static AsyncLayoutInflater$InflateThread()
    {
        android.support.v4.view.AsyncLayoutInflater$InflateThread.sInstance = new android.support.v4.view.AsyncLayoutInflater$InflateThread();
        android.support.v4.view.AsyncLayoutInflater$InflateThread.sInstance.start();
        return;
    }

    private AsyncLayoutInflater$InflateThread()
    {
        this.mQueue = new java.util.concurrent.ArrayBlockingQueue(10);
        this.mRequestPool = new android.support.v4.util.Pools$SynchronizedPool(10);
        return;
    }

    public static android.support.v4.view.AsyncLayoutInflater$InflateThread getInstance()
    {
        return android.support.v4.view.AsyncLayoutInflater$InflateThread.sInstance;
    }

    public void enqueue(android.support.v4.view.AsyncLayoutInflater$InflateRequest p4)
    {
        try {
            this.mQueue.put(p4);
            return;
        } catch (InterruptedException v0) {
            throw new RuntimeException("Failed to enqueue async inflate request", v0);
        }
    }

    public android.support.v4.view.AsyncLayoutInflater$InflateRequest obtainRequest()
    {
        android.support.v4.view.AsyncLayoutInflater$InflateRequest v0_1 = ((android.support.v4.view.AsyncLayoutInflater$InflateRequest) this.mRequestPool.acquire());
        if (v0_1 == null) {
            v0_1 = new android.support.v4.view.AsyncLayoutInflater$InflateRequest();
        }
        return v0_1;
    }

    public void releaseRequest(android.support.v4.view.AsyncLayoutInflater$InflateRequest p3)
    {
        p3.callback = 0;
        p3.inflater = 0;
        p3.parent = 0;
        p3.resid = 0;
        p3.view = 0;
        this.mRequestPool.release(p3);
        return;
    }

    public void run()
    {
        try {
            while(true) {
                android.support.v4.view.AsyncLayoutInflater$InflateRequest v1_1 = ((android.support.v4.view.AsyncLayoutInflater$InflateRequest) this.mQueue.take());
                android.os.Message.obtain(v1_1.inflater.mHandler, 0, v1_1).sendToTarget();
            }
        } catch (RuntimeException v0_1) {
            android.util.Log.w("AsyncLayoutInflater", v0_1);
        }
        v1_1.view = v1_1.inflater.mInflater.inflate(v1_1.resid, v1_1.parent, 0);
    }
}
package android.support.v4.view;
public interface AsyncLayoutInflater$OnInflateFinishedListener {

    public abstract void onInflateFinished();
}
package android.support.v4.view;
public final class AsyncLayoutInflater {
    private static final String TAG = "AsyncLayoutInflater";
    android.os.Handler mHandler;
    private android.os.Handler$Callback mHandlerCallback;
    android.support.v4.view.AsyncLayoutInflater$InflateThread mInflateThread;
    android.view.LayoutInflater mInflater;

    public AsyncLayoutInflater(android.content.Context p3)
    {
        this.mHandlerCallback = new android.support.v4.view.AsyncLayoutInflater$1(this);
        this.mInflater = new android.support.v4.view.AsyncLayoutInflater$BasicInflater(p3);
        this.mHandler = new android.os.Handler(this.mHandlerCallback);
        this.mInflateThread = android.support.v4.view.AsyncLayoutInflater$InflateThread.getInstance();
        return;
    }

    public void inflate(int p4, android.view.ViewGroup p5, android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener p6)
    {
        if (p6 != null) {
            android.support.v4.view.AsyncLayoutInflater$InflateRequest v0 = this.mInflateThread.obtainRequest();
            v0.inflater = this;
            v0.resid = p4;
            v0.parent = p5;
            v0.callback = p6;
            this.mInflateThread.enqueue(v0);
            return;
        } else {
            throw new NullPointerException("callback argument may not be null!");
        }
    }
}
package android.support.v4.view;
interface GestureDetectorCompat$GestureDetectorCompatImpl {

    public abstract boolean isLongpressEnabled();

    public abstract boolean onTouchEvent();

    public abstract void setIsLongpressEnabled();

    public abstract void setOnDoubleTapListener();
}
package android.support.v4.view;
 class GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler extends android.os.Handler {
    final synthetic android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase this$0;

    GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase p1)
    {
        this.this$0 = p1;
        return;
    }

    GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase p2, android.os.Handler p3)
    {
        this.this$0 = p2;
        super(p3.getLooper());
        return;
    }

    public void handleMessage(android.os.Message p4)
    {
        switch (p4.what) {
            case 1:
                this.this$0.mListener.onShowPress(this.this$0.mCurrentDownEvent);
                break;
            case 2:
                this.this$0.dispatchLongPress();
                break;
            case 3:
                if (this.this$0.mDoubleTapListener == null) {
                } else {
                    if (this.this$0.mStillDown) {
                        this.this$0.mDeferConfirmSingleTap = 1;
                    } else {
                        this.this$0.mDoubleTapListener.onSingleTapConfirmed(this.this$0.mCurrentDownEvent);
                    }
                }
                break;
            default:
                throw new RuntimeException(new StringBuilder().append("Unknown message ").append(p4).toString());
        }
        return;
    }
}
package android.support.v4.view;
public final class GestureDetectorCompat {
    private final android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl mImpl;

    public GestureDetectorCompat(android.content.Context p2, android.view.GestureDetector$OnGestureListener p3)
    {
        this(p2, p3, 0);
        return;
    }

    public GestureDetectorCompat(android.content.Context p3, android.view.GestureDetector$OnGestureListener p4, android.os.Handler p5)
    {
        if (android.os.Build$VERSION.SDK_INT <= 17) {
            this.mImpl = new android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase(p3, p4, p5);
        } else {
            this.mImpl = new android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2(p3, p4, p5);
        }
        return;
    }

    public boolean isLongpressEnabled()
    {
        return this.mImpl.isLongpressEnabled();
    }

    public boolean onTouchEvent(android.view.MotionEvent p2)
    {
        return this.mImpl.onTouchEvent(p2);
    }

    public void setIsLongpressEnabled(boolean p2)
    {
        this.mImpl.setIsLongpressEnabled(p2);
        return;
    }

    public void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener p2)
    {
        this.mImpl.setOnDoubleTapListener(p2);
        return;
    }
}
package android.support.v4.view;
interface GravityCompat$GravityCompatImpl {

    public abstract void apply();

    public abstract void apply();

    public abstract void applyDisplay();

    public abstract int getAbsoluteGravity();
}
package android.support.v4.view;
public final class GravityCompat {
    public static final int END = 8388613;
    static final android.support.v4.view.GravityCompat$GravityCompatImpl IMPL = None;
    public static final int RELATIVE_HORIZONTAL_GRAVITY_MASK = 8388615;
    public static final int RELATIVE_LAYOUT_DIRECTION = 8388608;
    public static final int START = 8388611;

    static GravityCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 17) {
            android.support.v4.view.GravityCompat.IMPL = new android.support.v4.view.GravityCompat$GravityCompatImplBase();
        } else {
            android.support.v4.view.GravityCompat.IMPL = new android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1();
        }
        return;
    }

    private GravityCompat()
    {
        return;
    }

    public static void apply(int p9, int p10, int p11, android.graphics.Rect p12, int p13, int p14, android.graphics.Rect p15, int p16)
    {
        android.support.v4.view.GravityCompat.IMPL.apply(p9, p10, p11, p12, p13, p14, p15, p16);
        return;
    }

    public static void apply(int p7, int p8, int p9, android.graphics.Rect p10, android.graphics.Rect p11, int p12)
    {
        android.support.v4.view.GravityCompat.IMPL.apply(p7, p8, p9, p10, p11, p12);
        return;
    }

    public static void applyDisplay(int p1, android.graphics.Rect p2, android.graphics.Rect p3, int p4)
    {
        android.support.v4.view.GravityCompat.IMPL.applyDisplay(p1, p2, p3, p4);
        return;
    }

    public static int getAbsoluteGravity(int p1, int p2)
    {
        return android.support.v4.view.GravityCompat.IMPL.getAbsoluteGravity(p1, p2);
    }
}
package android.support.v4.view;
 class GravityCompatJellybeanMr1 {

    GravityCompatJellybeanMr1()
    {
        return;
    }

    public static void apply(int p0, int p1, int p2, android.graphics.Rect p3, int p4, int p5, android.graphics.Rect p6, int p7)
    {
        android.view.Gravity.apply(p0, p1, p2, p3, p4, p5, p6, p7);
        return;
    }

    public static void apply(int p0, int p1, int p2, android.graphics.Rect p3, android.graphics.Rect p4, int p5)
    {
        android.view.Gravity.apply(p0, p1, p2, p3, p4, p5);
        return;
    }

    public static void applyDisplay(int p0, android.graphics.Rect p1, android.graphics.Rect p2, int p3)
    {
        android.view.Gravity.applyDisplay(p0, p1, p2, p3);
        return;
    }

    public static int getAbsoluteGravity(int p1, int p2)
    {
        return android.view.Gravity.getAbsoluteGravity(p1, p2);
    }
}
package android.support.v4.view;
public final class InputDeviceCompat {
    public static final int SOURCE_ANY = 65280;
    public static final int SOURCE_CLASS_BUTTON = 1;
    public static final int SOURCE_CLASS_JOYSTICK = 16;
    public static final int SOURCE_CLASS_MASK = 255;
    public static final int SOURCE_CLASS_NONE = 0;
    public static final int SOURCE_CLASS_POINTER = 2;
    public static final int SOURCE_CLASS_POSITION = 8;
    public static final int SOURCE_CLASS_TRACKBALL = 4;
    public static final int SOURCE_DPAD = 513;
    public static final int SOURCE_GAMEPAD = 1025;
    public static final int SOURCE_HDMI = 33554433;
    public static final int SOURCE_JOYSTICK = 16777232;
    public static final int SOURCE_KEYBOARD = 257;
    public static final int SOURCE_MOUSE = 8194;
    public static final int SOURCE_STYLUS = 16386;
    public static final int SOURCE_TOUCHPAD = 1048584;
    public static final int SOURCE_TOUCHSCREEN = 4098;
    public static final int SOURCE_TOUCH_NAVIGATION = 2097152;
    public static final int SOURCE_TRACKBALL = 65540;
    public static final int SOURCE_UNKNOWN;

    private InputDeviceCompat()
    {
        return;
    }
}
package android.support.v4.view;
interface KeyEventCompat$KeyEventVersionImpl {

    public abstract boolean isCtrlPressed();

    public abstract boolean metaStateHasModifiers();

    public abstract boolean metaStateHasNoModifiers();

    public abstract int normalizeMetaState();
}
package android.support.v4.view;
public final class KeyEventCompat {
    static final android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL;

    static KeyEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.KeyEventCompat.IMPL = new android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl();
        } else {
            android.support.v4.view.KeyEventCompat.IMPL = new android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl();
        }
        return;
    }

    private KeyEventCompat()
    {
        return;
    }

    public static boolean dispatch(android.view.KeyEvent p1, android.view.KeyEvent$Callback p2, Object p3, Object p4)
    {
        return p1.dispatch(p2, ((android.view.KeyEvent$DispatcherState) p3), p4);
    }

    public static Object getKeyDispatcherState(android.view.View p1)
    {
        return p1.getKeyDispatcherState();
    }

    public static boolean hasModifiers(android.view.KeyEvent p2, int p3)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasModifiers(p2.getMetaState(), p3);
    }

    public static boolean hasNoModifiers(android.view.KeyEvent p2)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasNoModifiers(p2.getMetaState());
    }

    public static boolean isCtrlPressed(android.view.KeyEvent p1)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.isCtrlPressed(p1);
    }

    public static boolean isTracking(android.view.KeyEvent p1)
    {
        return p1.isTracking();
    }

    public static boolean metaStateHasModifiers(int p1, int p2)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasModifiers(p1, p2);
    }

    public static boolean metaStateHasNoModifiers(int p1)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.metaStateHasNoModifiers(p1);
    }

    public static int normalizeMetaState(int p1)
    {
        return android.support.v4.view.KeyEventCompat.IMPL.normalizeMetaState(p1);
    }

    public static void startTracking(android.view.KeyEvent p0)
    {
        p0.startTracking();
        return;
    }
}
package android.support.v4.view;
 class KeyEventCompatHoneycomb {

    KeyEventCompatHoneycomb()
    {
        return;
    }

    public static boolean isCtrlPressed(android.view.KeyEvent p1)
    {
        return p1.isCtrlPressed();
    }

    public static boolean metaStateHasModifiers(int p1, int p2)
    {
        return android.view.KeyEvent.metaStateHasModifiers(p1, p2);
    }

    public static boolean metaStateHasNoModifiers(int p1)
    {
        return android.view.KeyEvent.metaStateHasNoModifiers(p1);
    }

    public static int normalizeMetaState(int p1)
    {
        return android.view.KeyEvent.normalizeMetaState(p1);
    }
}
package android.support.v4.view;
interface LayoutInflaterCompat$LayoutInflaterCompatImpl {

    public abstract android.support.v4.view.LayoutInflaterFactory getFactory();

    public abstract void setFactory();
}
package android.support.v4.view;
public final class LayoutInflaterCompat {
    static final android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl IMPL;

    static LayoutInflaterCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 11) {
                android.support.v4.view.LayoutInflaterCompat.IMPL = new android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplBase();
            } else {
                android.support.v4.view.LayoutInflaterCompat.IMPL = new android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV11();
            }
        } else {
            android.support.v4.view.LayoutInflaterCompat.IMPL = new android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV21();
        }
        return;
    }

    private LayoutInflaterCompat()
    {
        return;
    }

    public static android.support.v4.view.LayoutInflaterFactory getFactory(android.view.LayoutInflater p1)
    {
        return android.support.v4.view.LayoutInflaterCompat.IMPL.getFactory(p1);
    }

    public static void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        android.support.v4.view.LayoutInflaterCompat.IMPL.setFactory(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class LayoutInflaterCompatBase$FactoryWrapper implements android.view.LayoutInflater$Factory {
    final android.support.v4.view.LayoutInflaterFactory mDelegateFactory;

    LayoutInflaterCompatBase$FactoryWrapper(android.support.v4.view.LayoutInflaterFactory p1)
    {
        this.mDelegateFactory = p1;
        return;
    }

    public android.view.View onCreateView(String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        return this.mDelegateFactory.onCreateView(0, p3, p4, p5);
    }

    public String toString()
    {
        return new StringBuilder().append(this.getClass().getName()).append("{").append(this.mDelegateFactory).append("}").toString();
    }
}
package android.support.v4.view;
 class LayoutInflaterCompatBase {

    LayoutInflaterCompatBase()
    {
        return;
    }

    static android.support.v4.view.LayoutInflaterFactory getFactory(android.view.LayoutInflater p2)
    {
        int v1_1;
        android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper v0_0 = p2.getFactory();
        if (!(v0_0 instanceof android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper)) {
            v1_1 = 0;
        } else {
            v1_1 = ((android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper) v0_0).mDelegateFactory;
        }
        return v1_1;
    }

    static void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        int v0_0;
        if (p2 == null) {
            v0_0 = 0;
        } else {
            v0_0 = new android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper(p2);
        }
        p1.setFactory(v0_0);
        return;
    }
}
package android.support.v4.view;
 class LayoutInflaterCompatHC {
    private static final String TAG = "LayoutInflaterCompatHC";
    private static boolean sCheckedField;
    private static reflect.Field sLayoutInflaterFactory2Field;

    LayoutInflaterCompatHC()
    {
        return;
    }

    static void forceSetFactory2(android.view.LayoutInflater p5, android.view.LayoutInflater$Factory2 p6)
    {
        if (!android.support.v4.view.LayoutInflaterCompatHC.sCheckedField) {
            try {
                android.support.v4.view.LayoutInflaterCompatHC.sLayoutInflaterFactory2Field = android.view.LayoutInflater.getDeclaredField("mFactory2");
                android.support.v4.view.LayoutInflaterCompatHC.sLayoutInflaterFactory2Field.setAccessible(1);
            } catch (IllegalAccessException v0_0) {
                android.util.Log.e("LayoutInflaterCompatHC", new StringBuilder().append("forceSetFactory2 Could not find field \'mFactory2\' on class ").append(android.view.LayoutInflater.getName()).append("; inflation may have unexpected results.").toString(), v0_0);
            }
            android.support.v4.view.LayoutInflaterCompatHC.sCheckedField = 1;
        }
        if (android.support.v4.view.LayoutInflaterCompatHC.sLayoutInflaterFactory2Field != null) {
            try {
                android.support.v4.view.LayoutInflaterCompatHC.sLayoutInflaterFactory2Field.set(p5, p6);
            } catch (IllegalAccessException v0_1) {
                android.util.Log.e("LayoutInflaterCompatHC", new StringBuilder().append("forceSetFactory2 could not set the Factory2 on LayoutInflater ").append(p5).append("; inflation may have unexpected results.").toString(), v0_1);
            }
        }
        return;
    }

    static void setFactory(android.view.LayoutInflater p3, android.support.v4.view.LayoutInflaterFactory p4)
    {
        int v1_0;
        if (p4 == null) {
            v1_0 = 0;
        } else {
            v1_0 = new android.support.v4.view.LayoutInflaterCompatHC$FactoryWrapperHC(p4);
        }
        p3.setFactory2(v1_0);
        android.view.LayoutInflater$Factory2 v0_1 = p3.getFactory();
        if (!(v0_1 instanceof android.view.LayoutInflater$Factory2)) {
            android.support.v4.view.LayoutInflaterCompatHC.forceSetFactory2(p3, v1_0);
        } else {
            android.support.v4.view.LayoutInflaterCompatHC.forceSetFactory2(p3, ((android.view.LayoutInflater$Factory2) v0_1));
        }
        return;
    }
}
package android.support.v4.view;
 class LayoutInflaterCompatLollipop {

    LayoutInflaterCompatLollipop()
    {
        return;
    }

    static void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        int v0_0;
        if (p2 == null) {
            v0_0 = 0;
        } else {
            v0_0 = new android.support.v4.view.LayoutInflaterCompatHC$FactoryWrapperHC(p2);
        }
        p1.setFactory2(v0_0);
        return;
    }
}
package android.support.v4.view;
public interface LayoutInflaterFactory {

    public abstract android.view.View onCreateView();
}
package android.support.v4.view;
interface MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl {

    public abstract int getLayoutDirection();

    public abstract int getMarginEnd();

    public abstract int getMarginStart();

    public abstract boolean isMarginRelative();

    public abstract void resolveLayoutDirection();

    public abstract void setLayoutDirection();

    public abstract void setMarginEnd();

    public abstract void setMarginStart();
}
package android.support.v4.view;
public final class MarginLayoutParamsCompat {
    static final android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl IMPL;

    static MarginLayoutParamsCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 17) {
            android.support.v4.view.MarginLayoutParamsCompat.IMPL = new android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImplBase();
        } else {
            android.support.v4.view.MarginLayoutParamsCompat.IMPL = new android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImplJbMr1();
        }
        return;
    }

    private MarginLayoutParamsCompat()
    {
        return;
    }

    public static int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams p2)
    {
        int v0 = android.support.v4.view.MarginLayoutParamsCompat.IMPL.getLayoutDirection(p2);
        if ((v0 != 0) && (v0 != 1)) {
            v0 = 0;
        }
        return v0;
    }

    public static int getMarginEnd(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return android.support.v4.view.MarginLayoutParamsCompat.IMPL.getMarginEnd(p1);
    }

    public static int getMarginStart(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return android.support.v4.view.MarginLayoutParamsCompat.IMPL.getMarginStart(p1);
    }

    public static boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return android.support.v4.view.MarginLayoutParamsCompat.IMPL.isMarginRelative(p1);
    }

    public static void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompat.IMPL.resolveLayoutDirection(p1, p2);
        return;
    }

    public static void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompat.IMPL.setLayoutDirection(p1, p2);
        return;
    }

    public static void setMarginEnd(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompat.IMPL.setMarginEnd(p1, p2);
        return;
    }

    public static void setMarginStart(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompat.IMPL.setMarginStart(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class MarginLayoutParamsCompatJellybeanMr1 {

    MarginLayoutParamsCompatJellybeanMr1()
    {
        return;
    }

    public static int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return p1.getLayoutDirection();
    }

    public static int getMarginEnd(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return p1.getMarginEnd();
    }

    public static int getMarginStart(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return p1.getMarginStart();
    }

    public static boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams p1)
    {
        return p1.isMarginRelative();
    }

    public static void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams p0, int p1)
    {
        p0.resolveLayoutDirection(p1);
        return;
    }

    public static void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams p0, int p1)
    {
        p0.setLayoutDirection(p1);
        return;
    }

    public static void setMarginEnd(android.view.ViewGroup$MarginLayoutParams p0, int p1)
    {
        p0.setMarginEnd(p1);
        return;
    }

    public static void setMarginStart(android.view.ViewGroup$MarginLayoutParams p0, int p1)
    {
        p0.setMarginStart(p1);
        return;
    }
}
package android.support.v4.view;
public final class MenuCompat {

    private MenuCompat()
    {
        return;
    }

    public static void setShowAsAction(android.view.MenuItem p0, int p1)
    {
        android.support.v4.view.MenuItemCompat.setShowAsAction(p0, p1);
        return;
    }
}
package android.support.v4.view;
interface MenuItemCompat$MenuVersionImpl {

    public abstract boolean collapseActionView();

    public abstract boolean expandActionView();

    public abstract android.view.View getActionView();

    public abstract boolean isActionViewExpanded();

    public abstract android.view.MenuItem setActionView();

    public abstract android.view.MenuItem setActionView();

    public abstract android.view.MenuItem setOnActionExpandListener();

    public abstract void setShowAsAction();
}
package android.support.v4.view;
public interface MenuItemCompat$OnActionExpandListener {

    public abstract boolean onMenuItemActionCollapse();

    public abstract boolean onMenuItemActionExpand();
}
package android.support.v4.view;
public final class MenuItemCompat {
    static final android.support.v4.view.MenuItemCompat$MenuVersionImpl IMPL = None;
    public static final int SHOW_AS_ACTION_ALWAYS = 2;
    public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW = 8;
    public static final int SHOW_AS_ACTION_IF_ROOM = 1;
    public static final int SHOW_AS_ACTION_NEVER = 0;
    public static final int SHOW_AS_ACTION_WITH_TEXT = 4;
    private static final String TAG = "MenuItemCompat";

    static MenuItemCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 14) {
            if (v0 < 11) {
                android.support.v4.view.MenuItemCompat.IMPL = new android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl();
            } else {
                android.support.v4.view.MenuItemCompat.IMPL = new android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl();
            }
        } else {
            android.support.v4.view.MenuItemCompat.IMPL = new android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl();
        }
        return;
    }

    private MenuItemCompat()
    {
        return;
    }

    public static boolean collapseActionView(android.view.MenuItem p1)
    {
        boolean v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.collapseActionView(p1);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).collapseActionView();
        }
        return v0_2;
    }

    public static boolean expandActionView(android.view.MenuItem p1)
    {
        boolean v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.expandActionView(p1);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).expandActionView();
        }
        return v0_2;
    }

    public static android.support.v4.view.ActionProvider getActionProvider(android.view.MenuItem p2)
    {
        int v0_2;
        if (!(p2 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            android.util.Log.w("MenuItemCompat", "getActionProvider: item does not implement SupportMenuItem; returning null");
            v0_2 = 0;
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p2).getSupportActionProvider();
        }
        return v0_2;
    }

    public static android.view.View getActionView(android.view.MenuItem p1)
    {
        android.view.View v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.getActionView(p1);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).getActionView();
        }
        return v0_2;
    }

    public static boolean isActionViewExpanded(android.view.MenuItem p1)
    {
        boolean v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.isActionViewExpanded(p1);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).isActionViewExpanded();
        }
        return v0_2;
    }

    public static android.view.MenuItem setActionProvider(android.view.MenuItem p2, android.support.v4.view.ActionProvider p3)
    {
        if (!(p2 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            android.util.Log.w("MenuItemCompat", "setActionProvider: item does not implement SupportMenuItem; ignoring");
        } else {
            p2 = ((android.support.v4.internal.view.SupportMenuItem) p2).setSupportActionProvider(p3);
        }
        return p2;
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, int p2)
    {
        android.view.MenuItem v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.setActionView(p1, p2);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).setActionView(p2);
        }
        return v0_2;
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        android.view.MenuItem v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.setActionView(p1, p2);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).setActionView(p2);
        }
        return v0_2;
    }

    public static android.view.MenuItem setOnActionExpandListener(android.view.MenuItem p1, android.support.v4.view.MenuItemCompat$OnActionExpandListener p2)
    {
        android.view.MenuItem v0_2;
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            v0_2 = android.support.v4.view.MenuItemCompat.IMPL.setOnActionExpandListener(p1, p2);
        } else {
            v0_2 = ((android.support.v4.internal.view.SupportMenuItem) p1).setSupportOnActionExpandListener(p2);
        }
        return v0_2;
    }

    public static void setShowAsAction(android.view.MenuItem p1, int p2)
    {
        if (!(p1 instanceof android.support.v4.internal.view.SupportMenuItem)) {
            android.support.v4.view.MenuItemCompat.IMPL.setShowAsAction(p1, p2);
        } else {
            ((android.support.v4.internal.view.SupportMenuItem) p1).setShowAsAction(p2);
        }
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompatHoneycomb {

    MenuItemCompatHoneycomb()
    {
        return;
    }

    public static android.view.View getActionView(android.view.MenuItem p1)
    {
        return p1.getActionView();
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, int p2)
    {
        return p1.setActionView(p2);
    }

    public static android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        return p1.setActionView(p2);
    }

    public static void setShowAsAction(android.view.MenuItem p0, int p1)
    {
        p0.setShowAsAction(p1);
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompatIcs$OnActionExpandListenerWrapper implements android.view.MenuItem$OnActionExpandListener {
    private android.support.v4.view.MenuItemCompatIcs$SupportActionExpandProxy mWrapped;

    public MenuItemCompatIcs$OnActionExpandListenerWrapper(android.support.v4.view.MenuItemCompatIcs$SupportActionExpandProxy p1)
    {
        this.mWrapped = p1;
        return;
    }

    public boolean onMenuItemActionCollapse(android.view.MenuItem p2)
    {
        return this.mWrapped.onMenuItemActionCollapse(p2);
    }

    public boolean onMenuItemActionExpand(android.view.MenuItem p2)
    {
        return this.mWrapped.onMenuItemActionExpand(p2);
    }
}
package android.support.v4.view;
interface MenuItemCompatIcs$SupportActionExpandProxy {

    public abstract boolean onMenuItemActionCollapse();

    public abstract boolean onMenuItemActionExpand();
}
package android.support.v4.view;
 class MenuItemCompatIcs {

    MenuItemCompatIcs()
    {
        return;
    }

    public static boolean collapseActionView(android.view.MenuItem p1)
    {
        return p1.collapseActionView();
    }

    public static boolean expandActionView(android.view.MenuItem p1)
    {
        return p1.expandActionView();
    }

    public static boolean isActionViewExpanded(android.view.MenuItem p1)
    {
        return p1.isActionViewExpanded();
    }

    public static android.view.MenuItem setOnActionExpandListener(android.view.MenuItem p1, android.support.v4.view.MenuItemCompatIcs$SupportActionExpandProxy p2)
    {
        return p1.setOnActionExpandListener(new android.support.v4.view.MenuItemCompatIcs$OnActionExpandListenerWrapper(p2));
    }
}
package android.support.v4.view;
interface MotionEventCompat$MotionEventVersionImpl {

    public abstract float getAxisValue();

    public abstract float getAxisValue();

    public abstract int getButtonState();
}
package android.support.v4.view;
public final class MotionEventCompat {
    public static final int ACTION_HOVER_ENTER = 9;
    public static final int ACTION_HOVER_EXIT = 10;
    public static final int ACTION_HOVER_MOVE = 7;
    public static final int ACTION_MASK = 255;
    public static final int ACTION_POINTER_DOWN = 5;
    public static final int ACTION_POINTER_INDEX_MASK = 65280;
    public static final int ACTION_POINTER_INDEX_SHIFT = 8;
    public static final int ACTION_POINTER_UP = 6;
    public static final int ACTION_SCROLL = 8;
    public static final int AXIS_BRAKE = 23;
    public static final int AXIS_DISTANCE = 24;
    public static final int AXIS_GAS = 22;
    public static final int AXIS_GENERIC_1 = 32;
    public static final int AXIS_GENERIC_10 = 41;
    public static final int AXIS_GENERIC_11 = 42;
    public static final int AXIS_GENERIC_12 = 43;
    public static final int AXIS_GENERIC_13 = 44;
    public static final int AXIS_GENERIC_14 = 45;
    public static final int AXIS_GENERIC_15 = 46;
    public static final int AXIS_GENERIC_16 = 47;
    public static final int AXIS_GENERIC_2 = 33;
    public static final int AXIS_GENERIC_3 = 34;
    public static final int AXIS_GENERIC_4 = 35;
    public static final int AXIS_GENERIC_5 = 36;
    public static final int AXIS_GENERIC_6 = 37;
    public static final int AXIS_GENERIC_7 = 38;
    public static final int AXIS_GENERIC_8 = 39;
    public static final int AXIS_GENERIC_9 = 40;
    public static final int AXIS_HAT_X = 15;
    public static final int AXIS_HAT_Y = 16;
    public static final int AXIS_HSCROLL = 10;
    public static final int AXIS_LTRIGGER = 17;
    public static final int AXIS_ORIENTATION = 8;
    public static final int AXIS_PRESSURE = 2;
    public static final int AXIS_RELATIVE_X = 27;
    public static final int AXIS_RELATIVE_Y = 28;
    public static final int AXIS_RTRIGGER = 18;
    public static final int AXIS_RUDDER = 20;
    public static final int AXIS_RX = 12;
    public static final int AXIS_RY = 13;
    public static final int AXIS_RZ = 14;
    public static final int AXIS_SIZE = 3;
    public static final int AXIS_THROTTLE = 19;
    public static final int AXIS_TILT = 25;
    public static final int AXIS_TOOL_MAJOR = 6;
    public static final int AXIS_TOOL_MINOR = 7;
    public static final int AXIS_TOUCH_MAJOR = 4;
    public static final int AXIS_TOUCH_MINOR = 5;
    public static final int AXIS_VSCROLL = 9;
    public static final int AXIS_WHEEL = 21;
    public static final int AXIS_X = 0;
    public static final int AXIS_Y = 1;
    public static final int AXIS_Z = 11;
    public static final int BUTTON_PRIMARY = 1;
    static final android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL;

    static MotionEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            if (android.os.Build$VERSION.SDK_INT < 12) {
                android.support.v4.view.MotionEventCompat.IMPL = new android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl();
            } else {
                android.support.v4.view.MotionEventCompat.IMPL = new android.support.v4.view.MotionEventCompat$HoneycombMr1MotionEventVersionImpl();
            }
        } else {
            android.support.v4.view.MotionEventCompat.IMPL = new android.support.v4.view.MotionEventCompat$ICSMotionEventVersionImpl();
        }
        return;
    }

    private MotionEventCompat()
    {
        return;
    }

    public static int findPointerIndex(android.view.MotionEvent p1, int p2)
    {
        return p1.findPointerIndex(p2);
    }

    public static int getActionIndex(android.view.MotionEvent p2)
    {
        return ((p2.getAction() & 65280) >> 8);
    }

    public static int getActionMasked(android.view.MotionEvent p1)
    {
        return (p1.getAction() & 255);
    }

    public static float getAxisValue(android.view.MotionEvent p1, int p2)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getAxisValue(p1, p2);
    }

    public static float getAxisValue(android.view.MotionEvent p1, int p2, int p3)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getAxisValue(p1, p2, p3);
    }

    public static int getButtonState(android.view.MotionEvent p1)
    {
        return android.support.v4.view.MotionEventCompat.IMPL.getButtonState(p1);
    }

    public static int getPointerCount(android.view.MotionEvent p1)
    {
        return p1.getPointerCount();
    }

    public static int getPointerId(android.view.MotionEvent p1, int p2)
    {
        return p1.getPointerId(p2);
    }

    public static int getSource(android.view.MotionEvent p1)
    {
        return p1.getSource();
    }

    public static float getX(android.view.MotionEvent p1, int p2)
    {
        return p1.getX(p2);
    }

    public static float getY(android.view.MotionEvent p1, int p2)
    {
        return p1.getY(p2);
    }

    public static boolean isFromSource(android.view.MotionEvent p1, int p2)
    {
        int v0_2;
        if ((p1.getSource() & p2) != p2) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }
}
package android.support.v4.view;
 class MotionEventCompatHoneycombMr1 {

    MotionEventCompatHoneycombMr1()
    {
        return;
    }

    static float getAxisValue(android.view.MotionEvent p1, int p2)
    {
        return p1.getAxisValue(p2);
    }

    static float getAxisValue(android.view.MotionEvent p1, int p2, int p3)
    {
        return p1.getAxisValue(p2, p3);
    }
}
package android.support.v4.view;
 class MotionEventCompatICS {

    MotionEventCompatICS()
    {
        return;
    }

    public static int getButtonState(android.view.MotionEvent p1)
    {
        return p1.getButtonState();
    }
}
package android.support.v4.view;
public interface NestedScrollingChild {

    public abstract boolean dispatchNestedFling();

    public abstract boolean dispatchNestedPreFling();

    public abstract boolean dispatchNestedPreScroll();

    public abstract boolean dispatchNestedScroll();

    public abstract boolean hasNestedScrollingParent();

    public abstract boolean isNestedScrollingEnabled();

    public abstract void setNestedScrollingEnabled();

    public abstract boolean startNestedScroll();

    public abstract void stopNestedScroll();
}
package android.support.v4.view;
public class NestedScrollingChildHelper {
    private boolean mIsNestedScrollingEnabled;
    private android.view.ViewParent mNestedScrollingParent;
    private int[] mTempNestedScrollConsumed;
    private final android.view.View mView;

    public NestedScrollingChildHelper(android.view.View p1)
    {
        this.mView = p1;
        return;
    }

    public boolean dispatchNestedFling(float p3, float p4, boolean p5)
    {
        if ((!this.isNestedScrollingEnabled()) || (this.mNestedScrollingParent == null)) {
            boolean v0_2 = 0;
        } else {
            v0_2 = android.support.v4.view.ViewParentCompat.onNestedFling(this.mNestedScrollingParent, this.mView, p3, p4, p5);
        }
        return v0_2;
    }

    public boolean dispatchNestedPreFling(float p3, float p4)
    {
        if ((!this.isNestedScrollingEnabled()) || (this.mNestedScrollingParent == null)) {
            boolean v0_2 = 0;
        } else {
            v0_2 = android.support.v4.view.ViewParentCompat.onNestedPreFling(this.mNestedScrollingParent, this.mView, p3, p4);
        }
        return v0_2;
    }

    public boolean dispatchNestedPreScroll(int p7, int p8, int[] p9, int[] p10)
    {
        int v2 = 0;
        if ((this.isNestedScrollingEnabled()) && (this.mNestedScrollingParent != null)) {
            if ((p7 == 0) && (p8 == 0)) {
                if (p10 != null) {
                    p10[0] = 0;
                    p10[1] = 0;
                }
            } else {
                int v0 = 0;
                int v1 = 0;
                if (p10 != null) {
                    this.mView.getLocationInWindow(p10);
                    v0 = p10[0];
                    v1 = p10[1];
                }
                if (p9 == null) {
                    if (this.mTempNestedScrollConsumed == null) {
                        int v4_3 = new int[2];
                        this.mTempNestedScrollConsumed = v4_3;
                    }
                    p9 = this.mTempNestedScrollConsumed;
                }
                p9[0] = 0;
                p9[1] = 0;
                android.support.v4.view.ViewParentCompat.onNestedPreScroll(this.mNestedScrollingParent, this.mView, p7, p8, p9);
                if (p10 != null) {
                    this.mView.getLocationInWindow(p10);
                    p10[0] = (p10[0] - v0);
                    p10[1] = (p10[1] - v1);
                }
                if ((p9[0] != 0) || (p9[1] != 0)) {
                    v2 = 1;
                }
            }
        }
        return v2;
    }

    public boolean dispatchNestedScroll(int p11, int p12, int p13, int p14, int[] p15)
    {
        if ((!this.isNestedScrollingEnabled()) || (this.mNestedScrollingParent == null)) {
            int v0_0 = 0;
        } else {
            if ((p11 == 0) && ((p12 == 0) && ((p13 == 0) && (p14 == 0)))) {
                if (p15 == null) {
                } else {
                    p15[0] = 0;
                    p15[1] = 0;
                }
            } else {
                int v6 = 0;
                int v7 = 0;
                if (p15 != null) {
                    this.mView.getLocationInWindow(p15);
                    v6 = p15[0];
                    v7 = p15[1];
                }
                android.support.v4.view.ViewParentCompat.onNestedScroll(this.mNestedScrollingParent, this.mView, p11, p12, p13, p14);
                if (p15 != null) {
                    this.mView.getLocationInWindow(p15);
                    p15[0] = (p15[0] - v6);
                    p15[1] = (p15[1] - v7);
                }
                v0_0 = 1;
            }
        }
        return v0_0;
    }

    public boolean hasNestedScrollingParent()
    {
        int v0_1;
        if (this.mNestedScrollingParent == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isNestedScrollingEnabled()
    {
        return this.mIsNestedScrollingEnabled;
    }

    public void onDetachedFromWindow()
    {
        android.support.v4.view.ViewCompat.stopNestedScroll(this.mView);
        return;
    }

    public void onStopNestedScroll(android.view.View p2)
    {
        android.support.v4.view.ViewCompat.stopNestedScroll(this.mView);
        return;
    }

    public void setNestedScrollingEnabled(boolean p2)
    {
        if (this.mIsNestedScrollingEnabled) {
            android.support.v4.view.ViewCompat.stopNestedScroll(this.mView);
        }
        this.mIsNestedScrollingEnabled = p2;
        return;
    }

    public boolean startNestedScroll(int p5)
    {
        int v2 = 1;
        if (!this.hasNestedScrollingParent()) {
            if (this.isNestedScrollingEnabled()) {
                android.view.ViewParent v1 = this.mView.getParent();
                android.view.View v0_0 = this.mView;
                while (v1 != null) {
                    if (!android.support.v4.view.ViewParentCompat.onStartNestedScroll(v1, v0_0, this.mView, p5)) {
                        if ((v1 instanceof android.view.View)) {
                            v0_0 = ((android.view.View) v1);
                        }
                        v1 = v1.getParent();
                    } else {
                        this.mNestedScrollingParent = v1;
                        android.support.v4.view.ViewParentCompat.onNestedScrollAccepted(v1, v0_0, this.mView, p5);
                    }
                    return v2;
                }
            }
            v2 = 0;
        }
        return v2;
    }

    public void stopNestedScroll()
    {
        if (this.mNestedScrollingParent != null) {
            android.support.v4.view.ViewParentCompat.onStopNestedScroll(this.mNestedScrollingParent, this.mView);
            this.mNestedScrollingParent = 0;
        }
        return;
    }
}
package android.support.v4.view;
public interface NestedScrollingParent {

    public abstract int getNestedScrollAxes();

    public abstract boolean onNestedFling();

    public abstract boolean onNestedPreFling();

    public abstract void onNestedPreScroll();

    public abstract void onNestedScroll();

    public abstract void onNestedScrollAccepted();

    public abstract boolean onStartNestedScroll();

    public abstract void onStopNestedScroll();
}
package android.support.v4.view;
public class NestedScrollingParentHelper {
    private int mNestedScrollAxes;
    private final android.view.ViewGroup mViewGroup;

    public NestedScrollingParentHelper(android.view.ViewGroup p1)
    {
        this.mViewGroup = p1;
        return;
    }

    public int getNestedScrollAxes()
    {
        return this.mNestedScrollAxes;
    }

    public void onNestedScrollAccepted(android.view.View p1, android.view.View p2, int p3)
    {
        this.mNestedScrollAxes = p3;
        return;
    }

    public void onStopNestedScroll(android.view.View p2)
    {
        this.mNestedScrollAxes = 0;
        return;
    }
}
package android.support.v4.view;
public interface OnApplyWindowInsetsListener {

    public abstract android.support.v4.view.WindowInsetsCompat onApplyWindowInsets();
}
package android.support.v4.view;
public abstract class PagerAdapter {
    public static final int POSITION_NONE = 254;
    public static final int POSITION_UNCHANGED = 255;
    private final android.database.DataSetObservable mObservable;
    private android.database.DataSetObserver mViewPagerObserver;

    public PagerAdapter()
    {
        this.mObservable = new android.database.DataSetObservable();
        return;
    }

    public void destroyItem(android.view.View p3, int p4, Object p5)
    {
        throw new UnsupportedOperationException("Required method destroyItem was not overridden");
    }

    public void destroyItem(android.view.ViewGroup p1, int p2, Object p3)
    {
        this.destroyItem(p1, p2, p3);
        return;
    }

    public void finishUpdate(android.view.View p1)
    {
        return;
    }

    public void finishUpdate(android.view.ViewGroup p1)
    {
        this.finishUpdate(p1);
        return;
    }

    public abstract int getCount();

    public int getItemPosition(Object p2)
    {
        return -1;
    }

    public CharSequence getPageTitle(int p2)
    {
        return 0;
    }

    public float getPageWidth(int p2)
    {
        return 1065353216;
    }

    public Object instantiateItem(android.view.View p3, int p4)
    {
        throw new UnsupportedOperationException("Required method instantiateItem was not overridden");
    }

    public Object instantiateItem(android.view.ViewGroup p2, int p3)
    {
        return this.instantiateItem(p2, p3);
    }

    public abstract boolean isViewFromObject();

    public void notifyDataSetChanged()
    {
        if (this.mViewPagerObserver != null) {
            this.mViewPagerObserver.onChanged();
        }
        this.mObservable.notifyChanged();
        return;
    }

    public void registerDataSetObserver(android.database.DataSetObserver p2)
    {
        this.mObservable.registerObserver(p2);
        return;
    }

    public void restoreState(android.os.Parcelable p1, ClassLoader p2)
    {
        return;
    }

    public android.os.Parcelable saveState()
    {
        return 0;
    }

    public void setPrimaryItem(android.view.View p1, int p2, Object p3)
    {
        return;
    }

    public void setPrimaryItem(android.view.ViewGroup p1, int p2, Object p3)
    {
        this.setPrimaryItem(p1, p2, p3);
        return;
    }

    void setViewPagerObserver(android.database.DataSetObserver p2)
    {
        try {
            this.mViewPagerObserver = p2;
            return;
        } catch (Throwable v0) {
            throw v0;
        }
    }

    public void startUpdate(android.view.View p1)
    {
        return;
    }

    public void startUpdate(android.view.ViewGroup p1)
    {
        this.startUpdate(p1);
        return;
    }

    public void unregisterDataSetObserver(android.database.DataSetObserver p2)
    {
        this.mObservable.unregisterObserver(p2);
        return;
    }
}
package android.support.v4.view;
 class PagerTabStrip$1 implements android.view.View$OnClickListener {
    final synthetic android.support.v4.view.PagerTabStrip this$0;

    PagerTabStrip$1(android.support.v4.view.PagerTabStrip p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        this.this$0.mPager.setCurrentItem((this.this$0.mPager.getCurrentItem() - 1));
        return;
    }
}
package android.support.v4.view;
 class PagerTabStrip$2 implements android.view.View$OnClickListener {
    final synthetic android.support.v4.view.PagerTabStrip this$0;

    PagerTabStrip$2(android.support.v4.view.PagerTabStrip p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        this.this$0.mPager.setCurrentItem((this.this$0.mPager.getCurrentItem() + 1));
        return;
    }
}
package android.support.v4.view;
interface PagerTitleStrip$PagerTitleStripImpl {

    public abstract void setSingleLineAllCaps();
}
package android.support.v4.view;
public class PagerTitleStrip extends android.view.ViewGroup {
    private static final int[] ATTRS = None;
    private static final android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl IMPL = None;
    private static final float SIDE_ALPHA = 1058642330;
    private static final String TAG = "PagerTitleStrip";
    private static final int[] TEXT_ATTRS = None;
    private static final int TEXT_SPACING = 16;
    android.widget.TextView mCurrText;
    private int mGravity;
    private int mLastKnownCurrentPage;
    float mLastKnownPositionOffset;
    android.widget.TextView mNextText;
    private int mNonPrimaryAlpha;
    private final android.support.v4.view.PagerTitleStrip$PageListener mPageListener;
    android.support.v4.view.ViewPager mPager;
    android.widget.TextView mPrevText;
    private int mScaledTextSpacing;
    int mTextColor;
    private boolean mUpdatingPositions;
    private boolean mUpdatingText;
    private ref.WeakReference mWatchingAdapter;

    static PagerTitleStrip()
    {
        android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase v0_1 = new int[4];
        v0_1 = {16842804, 16842901, 16842904, 16842927};
        android.support.v4.view.PagerTitleStrip.ATTRS = v0_1;
        android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase v0_8 = new int[1];
        v0_8[0] = 16843660;
        android.support.v4.view.PagerTitleStrip.TEXT_ATTRS = v0_8;
        if (android.os.Build$VERSION.SDK_INT < 14) {
            android.support.v4.view.PagerTitleStrip.IMPL = new android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase();
        } else {
            android.support.v4.view.PagerTitleStrip.IMPL = new android.support.v4.view.PagerTitleStrip$PagerTitleStripImplIcs();
        }
        return;
    }

    public PagerTitleStrip(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public PagerTitleStrip(android.content.Context p11, android.util.AttributeSet p12)
    {
        super(p11, p12);
        super.mLastKnownCurrentPage = -1;
        super.mLastKnownPositionOffset = -1082130432;
        super.mPageListener = new android.support.v4.view.PagerTitleStrip$PageListener(super);
        int v7_4 = new android.widget.TextView(p11);
        super.mPrevText = v7_4;
        super.addView(v7_4);
        int v7_6 = new android.widget.TextView(p11);
        super.mCurrText = v7_6;
        super.addView(v7_6);
        int v7_8 = new android.widget.TextView(p11);
        super.mNextText = v7_8;
        super.addView(v7_8);
        android.content.res.TypedArray v0 = p11.obtainStyledAttributes(p12, android.support.v4.view.PagerTitleStrip.ATTRS);
        int v4 = v0.getResourceId(0, 0);
        if (v4 != 0) {
            android.support.v4.widget.TextViewCompat.setTextAppearance(super.mPrevText, v4);
            android.support.v4.widget.TextViewCompat.setTextAppearance(super.mCurrText, v4);
            android.support.v4.widget.TextViewCompat.setTextAppearance(super.mNextText, v4);
        }
        int v6 = v0.getDimensionPixelSize(1, 0);
        if (v6 != 0) {
            super.setTextSize(0, ((float) v6));
        }
        if (v0.hasValue(2)) {
            int v5 = v0.getColor(2, 0);
            super.mPrevText.setTextColor(v5);
            super.mCurrText.setTextColor(v5);
            super.mNextText.setTextColor(v5);
        }
        super.mGravity = v0.getInteger(3, 80);
        v0.recycle();
        super.mTextColor = super.mCurrText.getTextColors().getDefaultColor();
        super.setNonPrimaryAlpha(1058642330);
        super.mPrevText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        super.mCurrText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        super.mNextText.setEllipsize(android.text.TextUtils$TruncateAt.END);
        boolean v1 = 0;
        if (v4 != 0) {
            android.content.res.TypedArray v3 = p11.obtainStyledAttributes(v4, android.support.v4.view.PagerTitleStrip.TEXT_ATTRS);
            v1 = v3.getBoolean(0, 0);
            v3.recycle();
        }
        if (!v1) {
            super.mPrevText.setSingleLine();
            super.mCurrText.setSingleLine();
            super.mNextText.setSingleLine();
        } else {
            android.support.v4.view.PagerTitleStrip.setSingleLineAllCaps(super.mPrevText);
            android.support.v4.view.PagerTitleStrip.setSingleLineAllCaps(super.mCurrText);
            android.support.v4.view.PagerTitleStrip.setSingleLineAllCaps(super.mNextText);
        }
        super.mScaledTextSpacing = ((int) (1098907648 * p11.getResources().getDisplayMetrics().density));
        return;
    }

    private static void setSingleLineAllCaps(android.widget.TextView p1)
    {
        android.support.v4.view.PagerTitleStrip.IMPL.setSingleLineAllCaps(p1);
        return;
    }

    int getMinHeight()
    {
        int v1 = 0;
        android.graphics.drawable.Drawable v0 = this.getBackground();
        if (v0 != null) {
            v1 = v0.getIntrinsicHeight();
        }
        return v1;
    }

    public int getTextSpacing()
    {
        return this.mScaledTextSpacing;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        android.view.ViewParent v2 = this.getParent();
        if ((v2 instanceof android.support.v4.view.ViewPager)) {
            int v3_2;
            android.support.v4.view.ViewPager v1_1 = ((android.support.v4.view.ViewPager) v2);
            android.support.v4.view.PagerAdapter v0 = v1_1.getAdapter();
            v1_1.setInternalPageChangeListener(this.mPageListener);
            v1_1.addOnAdapterChangeListener(this.mPageListener);
            this.mPager = v1_1;
            if (this.mWatchingAdapter == null) {
                v3_2 = 0;
            } else {
                v3_2 = ((android.support.v4.view.PagerAdapter) this.mWatchingAdapter.get());
            }
            this.updateAdapter(v3_2, v0);
            return;
        } else {
            throw new IllegalStateException("PagerTitleStrip must be a direct child of a ViewPager.");
        }
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        if (this.mPager != null) {
            this.updateAdapter(this.mPager.getAdapter(), 0);
            this.mPager.setInternalPageChangeListener(0);
            this.mPager.removeOnAdapterChangeListener(this.mPageListener);
            this.mPager = 0;
        }
        return;
    }

    protected void onLayout(boolean p4, int p5, int p6, int p7, int p8)
    {
        float v0 = 0;
        if (this.mPager != null) {
            if (this.mLastKnownPositionOffset >= 0) {
                v0 = this.mLastKnownPositionOffset;
            }
            this.updateTextPositions(this.mLastKnownCurrentPage, v0, 1);
        }
        return;
    }

    protected void onMeasure(int p16, int p17)
    {
        if (android.view.View$MeasureSpec.getMode(p16) == 1073741824) {
            int v4;
            int v6 = (this.getPaddingTop() + this.getPaddingBottom());
            int v1 = android.support.v4.view.PagerTitleStrip.getChildMeasureSpec(p17, v6, -2);
            int v12 = android.view.View$MeasureSpec.getSize(p16);
            int v3 = android.support.v4.view.PagerTitleStrip.getChildMeasureSpec(p16, ((int) (((float) v12) * 1045220557)), -2);
            this.mPrevText.measure(v3, v1);
            this.mCurrText.measure(v3, v1);
            this.mNextText.measure(v3, v1);
            if (android.view.View$MeasureSpec.getMode(p17) != 1073741824) {
                v4 = Math.max(this.getMinHeight(), (this.mCurrText.getMeasuredHeight() + v6));
            } else {
                v4 = android.view.View$MeasureSpec.getSize(p17);
            }
            this.setMeasuredDimension(v12, android.support.v4.view.ViewCompat.resolveSizeAndState(v4, p17, (android.support.v4.view.ViewCompat.getMeasuredState(this.mCurrText) << 16)));
            return;
        } else {
            throw new IllegalStateException("Must measure with an exact width");
        }
    }

    public void requestLayout()
    {
        if (!this.mUpdatingText) {
            super.requestLayout();
        }
        return;
    }

    public void setGravity(int p1)
    {
        this.mGravity = p1;
        this.requestLayout();
        return;
    }

    public void setNonPrimaryAlpha(float p5)
    {
        this.mNonPrimaryAlpha = (((int) (1132396544 * p5)) & 255);
        int v0 = ((this.mNonPrimaryAlpha << 24) | (this.mTextColor & 16777215));
        this.mPrevText.setTextColor(v0);
        this.mNextText.setTextColor(v0);
        return;
    }

    public void setTextColor(int p5)
    {
        this.mTextColor = p5;
        this.mCurrText.setTextColor(p5);
        int v0 = ((this.mNonPrimaryAlpha << 24) | (this.mTextColor & 16777215));
        this.mPrevText.setTextColor(v0);
        this.mNextText.setTextColor(v0);
        return;
    }

    public void setTextSize(int p2, float p3)
    {
        this.mPrevText.setTextSize(p2, p3);
        this.mCurrText.setTextSize(p2, p3);
        this.mNextText.setTextSize(p2, p3);
        return;
    }

    public void setTextSpacing(int p1)
    {
        this.mScaledTextSpacing = p1;
        this.requestLayout();
        return;
    }

    void updateAdapter(android.support.v4.view.PagerAdapter p2, android.support.v4.view.PagerAdapter p3)
    {
        if (p2 != null) {
            p2.unregisterDataSetObserver(this.mPageListener);
            this.mWatchingAdapter = 0;
        }
        if (p3 != null) {
            p3.registerDataSetObserver(this.mPageListener);
            this.mWatchingAdapter = new ref.WeakReference(p3);
        }
        if (this.mPager != null) {
            this.mLastKnownCurrentPage = -1;
            this.mLastKnownPositionOffset = -1082130432;
            this.updateText(this.mPager.getCurrentItem(), p3);
            this.requestLayout();
        }
        return;
    }

    void updateText(int p13, android.support.v4.view.PagerAdapter p14)
    {
        int v3;
        if (p14 == null) {
            v3 = 0;
        } else {
            v3 = p14.getCount();
        }
        this.mUpdatingText = 1;
        CharSequence v6_0 = 0;
        if ((p13 >= 1) && (p14 != null)) {
            v6_0 = p14.getPageTitle((p13 - 1));
        }
        float v9_3;
        this.mPrevText.setText(v6_0);
        int v10_0 = this.mCurrText;
        if ((p14 == null) || (p13 >= v3)) {
            v9_3 = 0;
        } else {
            v9_3 = p14.getPageTitle(p13);
        }
        v10_0.setText(v9_3);
        CharSequence v6_1 = 0;
        if (((p13 + 1) < v3) && (p14 != null)) {
            v6_1 = p14.getPageTitle((p13 + 1));
        }
        this.mNextText.setText(v6_1);
        int v2 = android.view.View$MeasureSpec.makeMeasureSpec(Math.max(0, ((int) (((float) ((this.getWidth() - this.getPaddingLeft()) - this.getPaddingRight())) * 1061997773))), -2147483648);
        int v1 = android.view.View$MeasureSpec.makeMeasureSpec(Math.max(0, ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom())), -2147483648);
        this.mPrevText.measure(v2, v1);
        this.mCurrText.measure(v2, v1);
        this.mNextText.measure(v2, v1);
        this.mLastKnownCurrentPage = p13;
        if (!this.mUpdatingPositions) {
            this.updateTextPositions(p13, this.mLastKnownPositionOffset, 0);
        }
        this.mUpdatingText = 0;
        return;
    }

    void updateTextPositions(int p46, float p47, boolean p48)
    {
        if (p46 == this.mLastKnownCurrentPage) {
            if ((p48) || (p47 != this.mLastKnownPositionOffset)) {
                this.mUpdatingPositions = 1;
                int v36 = this.mPrevText.getMeasuredWidth();
                int v18 = this.mCurrText.getMeasuredWidth();
                int v26 = this.mNextText.getMeasuredWidth();
                int v19 = (v18 / 2);
                int v38 = this.getWidth();
                int v37 = this.getHeight();
                int v29 = this.getPaddingLeft();
                int v30 = this.getPaddingRight();
                int v31 = this.getPaddingTop();
                int v28 = this.getPaddingBottom();
                int v40 = (v30 + v19);
                float v14 = (p47 + 1056964608);
                if (v14 > 1065353216) {
                    v14 -= 1065353216;
                }
                int v24;
                int v34;
                int v16;
                int v13 = (((v38 - v40) - ((int) (((float) ((v38 - (v29 + v19)) - v40)) * v14))) - (v18 / 2));
                int v15 = (v13 + v18);
                int v32 = this.mPrevText.getBaseline();
                int v11 = this.mCurrText.getBaseline();
                int v22 = this.mNextText.getBaseline();
                int v20 = Math.max(Math.max(v32, v11), v22);
                int v35 = (v20 - v32);
                int v17 = (v20 - v11);
                int v25 = (v20 - v22);
                int v21 = Math.max(Math.max((v35 + this.mPrevText.getMeasuredHeight()), (v17 + this.mCurrText.getMeasuredHeight())), (v25 + this.mNextText.getMeasuredHeight()));
                switch ((this.mGravity & 112)) {
                    case 16:
                        int v9 = ((((v37 - v31) - v28) - v21) / 2);
                        v34 = (v9 + v35);
                        v16 = (v9 + v17);
                        v24 = (v9 + v25);
                        break;
                    case 80:
                        int v8 = ((v37 - v28) - v21);
                        v34 = (v8 + v35);
                        v16 = (v8 + v17);
                        v24 = (v8 + v25);
                        break;
                    default:
                        v34 = (v31 + v35);
                        v16 = (v31 + v17);
                        v24 = (v31 + v25);
                }
                this.mCurrText.layout(v13, v16, v15, (this.mCurrText.getMeasuredHeight() + v16));
                int v33 = Math.min(v29, ((v13 - this.mScaledTextSpacing) - v36));
                this.mPrevText.layout(v33, v34, (v33 + v36), (this.mPrevText.getMeasuredHeight() + v34));
                int v23 = Math.max(((v38 - v30) - v26), (this.mScaledTextSpacing + v15));
                this.mNextText.layout(v23, v24, (v23 + v26), (this.mNextText.getMeasuredHeight() + v24));
                this.mLastKnownPositionOffset = p47;
                this.mUpdatingPositions = 0;
            }
        } else {
            this.updateText(p46, this.mPager.getAdapter());
        }
        return;
    }
}
package android.support.v4.view;
 class PagerTitleStripIcs$SingleLineAllCapsTransform extends android.text.method.SingleLineTransformationMethod {
    private static final String TAG = "SingleLineAllCapsTransform";
    private java.util.Locale mLocale;

    public PagerTitleStripIcs$SingleLineAllCapsTransform(android.content.Context p2)
    {
        this.mLocale = p2.getResources().getConfiguration().locale;
        return;
    }

    public CharSequence getTransformation(CharSequence p3, android.view.View p4)
    {
        int v0_0;
        CharSequence v3_1 = super.getTransformation(p3, p4);
        if (v3_1 == null) {
            v0_0 = 0;
        } else {
            v0_0 = v3_1.toString().toUpperCase(this.mLocale);
        }
        return v0_0;
    }
}
package android.support.v4.view;
 class PagerTitleStripIcs {

    PagerTitleStripIcs()
    {
        return;
    }

    public static void setSingleLineAllCaps(android.widget.TextView p2)
    {
        p2.setTransformationMethod(new android.support.v4.view.PagerTitleStripIcs$SingleLineAllCapsTransform(p2.getContext()));
        return;
    }
}
package android.support.v4.view;
interface PointerIconCompat$PointerIconCompatImpl {

    public abstract Object create();

    public abstract Object getSystemIcon();

    public abstract Object load();
}
package android.support.v4.view;
public final class PointerIconCompat {
    static final android.support.v4.view.PointerIconCompat$PointerIconCompatImpl IMPL = None;
    public static final int TYPE_ALIAS = 1010;
    public static final int TYPE_ALL_SCROLL = 1013;
    public static final int TYPE_ARROW = 1000;
    public static final int TYPE_CELL = 1006;
    public static final int TYPE_CONTEXT_MENU = 1001;
    public static final int TYPE_COPY = 1011;
    public static final int TYPE_CROSSHAIR = 1007;
    public static final int TYPE_DEFAULT = 1000;
    public static final int TYPE_GRAB = 1020;
    public static final int TYPE_GRABBING = 1021;
    public static final int TYPE_HAND = 1002;
    public static final int TYPE_HELP = 1003;
    public static final int TYPE_HORIZONTAL_DOUBLE_ARROW = 1014;
    public static final int TYPE_NO_DROP = 1012;
    public static final int TYPE_NULL = 0;
    public static final int TYPE_TEXT = 1008;
    public static final int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW = 1017;
    public static final int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW = 1016;
    public static final int TYPE_VERTICAL_DOUBLE_ARROW = 1015;
    public static final int TYPE_VERTICAL_TEXT = 1009;
    public static final int TYPE_WAIT = 1004;
    public static final int TYPE_ZOOM_IN = 1018;
    public static final int TYPE_ZOOM_OUT = 1019;
    private Object mPointerIcon;

    static PointerIconCompat()
    {
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            android.support.v4.view.PointerIconCompat.IMPL = new android.support.v4.view.PointerIconCompat$BasePointerIconCompatImpl();
        } else {
            android.support.v4.view.PointerIconCompat.IMPL = new android.support.v4.view.PointerIconCompat$Api24PointerIconCompatImpl();
        }
        return;
    }

    private PointerIconCompat(Object p1)
    {
        this.mPointerIcon = p1;
        return;
    }

    public static android.support.v4.view.PointerIconCompat create(android.graphics.Bitmap p2, float p3, float p4)
    {
        return new android.support.v4.view.PointerIconCompat(android.support.v4.view.PointerIconCompat.IMPL.create(p2, p3, p4));
    }

    public static android.support.v4.view.PointerIconCompat getSystemIcon(android.content.Context p2, int p3)
    {
        return new android.support.v4.view.PointerIconCompat(android.support.v4.view.PointerIconCompat.IMPL.getSystemIcon(p2, p3));
    }

    public static android.support.v4.view.PointerIconCompat load(android.content.res.Resources p2, int p3)
    {
        return new android.support.v4.view.PointerIconCompat(android.support.v4.view.PointerIconCompat.IMPL.load(p2, p3));
    }

    public Object getPointerIcon()
    {
        return this.mPointerIcon;
    }
}
package android.support.v4.view;
 class PointerIconCompatApi24 {

    PointerIconCompatApi24()
    {
        return;
    }

    public static Object create(android.graphics.Bitmap p1, float p2, float p3)
    {
        return android.view.PointerIcon.create(p1, p2, p3);
    }

    public static Object getSystemIcon(android.content.Context p1, int p2)
    {
        return android.view.PointerIcon.getSystemIcon(p1, p2);
    }

    public static Object load(android.content.res.Resources p1, int p2)
    {
        return android.view.PointerIcon.load(p1, p2);
    }
}
package android.support.v4.view;
interface ScaleGestureDetectorCompat$ScaleGestureDetectorImpl {

    public abstract boolean isQuickScaleEnabled();

    public abstract void setQuickScaleEnabled();
}
package android.support.v4.view;
public final class ScaleGestureDetectorCompat {
    static final android.support.v4.view.ScaleGestureDetectorCompat$ScaleGestureDetectorImpl IMPL;

    static ScaleGestureDetectorCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            android.support.v4.view.ScaleGestureDetectorCompat.IMPL = new android.support.v4.view.ScaleGestureDetectorCompat$BaseScaleGestureDetectorImpl();
        } else {
            android.support.v4.view.ScaleGestureDetectorCompat.IMPL = new android.support.v4.view.ScaleGestureDetectorCompat$ScaleGestureDetectorCompatKitKatImpl();
        }
        return;
    }

    private ScaleGestureDetectorCompat()
    {
        return;
    }

    public static boolean isQuickScaleEnabled(Object p1)
    {
        return android.support.v4.view.ScaleGestureDetectorCompat.IMPL.isQuickScaleEnabled(p1);
    }

    public static void setQuickScaleEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.ScaleGestureDetectorCompat.IMPL.setQuickScaleEnabled(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ScaleGestureDetectorCompatKitKat {

    private ScaleGestureDetectorCompatKitKat()
    {
        return;
    }

    public static boolean isQuickScaleEnabled(Object p1)
    {
        return ((android.view.ScaleGestureDetector) p1).isQuickScaleEnabled();
    }

    public static void setQuickScaleEnabled(Object p0, boolean p1)
    {
        ((android.view.ScaleGestureDetector) p0).setQuickScaleEnabled(p1);
        return;
    }
}
package android.support.v4.view;
public interface ScrollingView {

    public abstract int computeHorizontalScrollExtent();

    public abstract int computeHorizontalScrollOffset();

    public abstract int computeHorizontalScrollRange();

    public abstract int computeVerticalScrollExtent();

    public abstract int computeVerticalScrollOffset();

    public abstract int computeVerticalScrollRange();
}
package android.support.v4.view;
public interface TintableBackgroundView {

    public abstract android.content.res.ColorStateList getSupportBackgroundTintList();

    public abstract android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();

    public abstract void setSupportBackgroundTintList();

    public abstract void setSupportBackgroundTintMode();
}
package android.support.v4.view;
interface VelocityTrackerCompat$VelocityTrackerVersionImpl {

    public abstract float getXVelocity();

    public abstract float getYVelocity();
}
package android.support.v4.view;
public final class VelocityTrackerCompat {
    static final android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL;

    static VelocityTrackerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            android.support.v4.view.VelocityTrackerCompat.IMPL = new android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl();
        } else {
            android.support.v4.view.VelocityTrackerCompat.IMPL = new android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl();
        }
        return;
    }

    private VelocityTrackerCompat()
    {
        return;
    }

    public static float getXVelocity(android.view.VelocityTracker p1, int p2)
    {
        return android.support.v4.view.VelocityTrackerCompat.IMPL.getXVelocity(p1, p2);
    }

    public static float getYVelocity(android.view.VelocityTracker p1, int p2)
    {
        return android.support.v4.view.VelocityTrackerCompat.IMPL.getYVelocity(p1, p2);
    }
}
package android.support.v4.view;
 class VelocityTrackerCompatHoneycomb {

    VelocityTrackerCompatHoneycomb()
    {
        return;
    }

    public static float getXVelocity(android.view.VelocityTracker p1, int p2)
    {
        return p1.getXVelocity(p2);
    }

    public static float getYVelocity(android.view.VelocityTracker p1, int p2)
    {
        return p1.getYVelocity(p2);
    }
}
package android.support.v4.view;
public interface annotation ViewCompat$FocusDirection implements java.lang.annotation.Annotation {
}
package android.support.v4.view;
public interface annotation ViewCompat$FocusRealDirection implements java.lang.annotation.Annotation {
}
package android.support.v4.view;
public interface annotation ViewCompat$FocusRelativeDirection implements java.lang.annotation.Annotation {
}
package android.support.v4.view;
public interface annotation ViewCompat$ScrollIndicators implements java.lang.annotation.Annotation {
}
package android.support.v4.view;
interface ViewCompat$ViewCompatImpl {

    public abstract android.support.v4.view.ViewPropertyAnimatorCompat animate();

    public abstract boolean canScrollHorizontally();

    public abstract boolean canScrollVertically();

    public abstract int combineMeasuredStates();

    public abstract android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets();

    public abstract void dispatchFinishTemporaryDetach();

    public abstract boolean dispatchNestedFling();

    public abstract boolean dispatchNestedPreFling();

    public abstract boolean dispatchNestedPreScroll();

    public abstract boolean dispatchNestedScroll();

    public abstract void dispatchStartTemporaryDetach();

    public abstract int getAccessibilityLiveRegion();

    public abstract android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider();

    public abstract float getAlpha();

    public abstract android.content.res.ColorStateList getBackgroundTintList();

    public abstract android.graphics.PorterDuff$Mode getBackgroundTintMode();

    public abstract android.graphics.Rect getClipBounds();

    public abstract android.view.Display getDisplay();

    public abstract float getElevation();

    public abstract boolean getFitsSystemWindows();

    public abstract int getImportantForAccessibility();

    public abstract int getLabelFor();

    public abstract int getLayerType();

    public abstract int getLayoutDirection();

    public abstract android.graphics.Matrix getMatrix();

    public abstract int getMeasuredHeightAndState();

    public abstract int getMeasuredState();

    public abstract int getMeasuredWidthAndState();

    public abstract int getMinimumHeight();

    public abstract int getMinimumWidth();

    public abstract int getPaddingEnd();

    public abstract int getPaddingStart();

    public abstract android.view.ViewParent getParentForAccessibility();

    public abstract float getPivotX();

    public abstract float getPivotY();

    public abstract float getRotation();

    public abstract float getRotationX();

    public abstract float getRotationY();

    public abstract float getScaleX();

    public abstract float getScaleY();

    public abstract int getScrollIndicators();

    public abstract String getTransitionName();

    public abstract float getTranslationX();

    public abstract float getTranslationY();

    public abstract float getTranslationZ();

    public abstract int getWindowSystemUiVisibility();

    public abstract float getX();

    public abstract float getY();

    public abstract float getZ();

    public abstract boolean hasAccessibilityDelegate();

    public abstract boolean hasNestedScrollingParent();

    public abstract boolean hasOnClickListeners();

    public abstract boolean hasOverlappingRendering();

    public abstract boolean hasTransientState();

    public abstract boolean isAttachedToWindow();

    public abstract boolean isImportantForAccessibility();

    public abstract boolean isInLayout();

    public abstract boolean isLaidOut();

    public abstract boolean isLayoutDirectionResolved();

    public abstract boolean isNestedScrollingEnabled();

    public abstract boolean isPaddingRelative();

    public abstract void jumpDrawablesToCurrentState();

    public abstract void offsetLeftAndRight();

    public abstract void offsetTopAndBottom();

    public abstract android.support.v4.view.WindowInsetsCompat onApplyWindowInsets();

    public abstract void onInitializeAccessibilityEvent();

    public abstract void onInitializeAccessibilityNodeInfo();

    public abstract void onPopulateAccessibilityEvent();

    public abstract boolean performAccessibilityAction();

    public abstract void postInvalidateOnAnimation();

    public abstract void postInvalidateOnAnimation();

    public abstract void postOnAnimation();

    public abstract void postOnAnimationDelayed();

    public abstract void requestApplyInsets();

    public abstract int resolveSizeAndState();

    public abstract void setAccessibilityDelegate();

    public abstract void setAccessibilityLiveRegion();

    public abstract void setActivated();

    public abstract void setAlpha();

    public abstract void setBackground();

    public abstract void setBackgroundTintList();

    public abstract void setBackgroundTintMode();

    public abstract void setChildrenDrawingOrderEnabled();

    public abstract void setClipBounds();

    public abstract void setElevation();

    public abstract void setFitsSystemWindows();

    public abstract void setHasTransientState();

    public abstract void setImportantForAccessibility();

    public abstract void setLabelFor();

    public abstract void setLayerPaint();

    public abstract void setLayerType();

    public abstract void setLayoutDirection();

    public abstract void setNestedScrollingEnabled();

    public abstract void setOnApplyWindowInsetsListener();

    public abstract void setPaddingRelative();

    public abstract void setPivotX();

    public abstract void setPivotY();

    public abstract void setPointerIcon();

    public abstract void setRotation();

    public abstract void setRotationX();

    public abstract void setRotationY();

    public abstract void setSaveFromParentEnabled();

    public abstract void setScaleX();

    public abstract void setScaleY();

    public abstract void setScrollIndicators();

    public abstract void setScrollIndicators();

    public abstract void setTransitionName();

    public abstract void setTranslationX();

    public abstract void setTranslationY();

    public abstract void setTranslationZ();

    public abstract void setX();

    public abstract void setY();

    public abstract void setZ();

    public abstract boolean startNestedScroll();

    public abstract void stopNestedScroll();
}
package android.support.v4.view;
public class ViewCompat {
    public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE = 2;
    public static final int ACCESSIBILITY_LIVE_REGION_NONE = 0;
    public static final int ACCESSIBILITY_LIVE_REGION_POLITE = 1;
    private static final long FAKE_FRAME_TIME = 10;
    static final android.support.v4.view.ViewCompat$ViewCompatImpl IMPL = None;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO = 0;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO = 2;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS = 4;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_YES = 1;
    public static final int LAYER_TYPE_HARDWARE = 2;
    public static final int LAYER_TYPE_NONE = 0;
    public static final int LAYER_TYPE_SOFTWARE = 1;
    public static final int LAYOUT_DIRECTION_INHERIT = 2;
    public static final int LAYOUT_DIRECTION_LOCALE = 3;
    public static final int LAYOUT_DIRECTION_LTR = 0;
    public static final int LAYOUT_DIRECTION_RTL = 1;
    public static final int MEASURED_HEIGHT_STATE_SHIFT = 16;
    public static final int MEASURED_SIZE_MASK = 16777215;
    public static final int MEASURED_STATE_MASK = 4278190080;
    public static final int MEASURED_STATE_TOO_SMALL = 16777216;
    public static final int OVER_SCROLL_ALWAYS = 0;
    public static final int OVER_SCROLL_IF_CONTENT_SCROLLS = 1;
    public static final int OVER_SCROLL_NEVER = 2;
    public static final int SCROLL_AXIS_HORIZONTAL = 1;
    public static final int SCROLL_AXIS_NONE = 0;
    public static final int SCROLL_AXIS_VERTICAL = 2;
    public static final int SCROLL_INDICATOR_BOTTOM = 2;
    public static final int SCROLL_INDICATOR_END = 32;
    public static final int SCROLL_INDICATOR_LEFT = 4;
    public static final int SCROLL_INDICATOR_RIGHT = 8;
    public static final int SCROLL_INDICATOR_START = 16;
    public static final int SCROLL_INDICATOR_TOP = 1;
    private static final String TAG = "ViewCompat";

    static ViewCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (!android.support.v4.os.BuildCompat.isAtLeastN()) {
            if (v0 < 23) {
                if (v0 < 21) {
                    if (v0 < 19) {
                        if (v0 < 18) {
                            if (v0 < 17) {
                                if (v0 < 16) {
                                    if (v0 < 15) {
                                        if (v0 < 14) {
                                            if (v0 < 11) {
                                                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$BaseViewCompatImpl();
                                            } else {
                                                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$HCViewCompatImpl();
                                            }
                                        } else {
                                            android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$ICSViewCompatImpl();
                                        }
                                    } else {
                                        android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$ICSMr1ViewCompatImpl();
                                    }
                                } else {
                                    android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$JBViewCompatImpl();
                                }
                            } else {
                                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl();
                            }
                        } else {
                            android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$JbMr2ViewCompatImpl();
                        }
                    } else {
                        android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$KitKatViewCompatImpl();
                    }
                } else {
                    android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$LollipopViewCompatImpl();
                }
            } else {
                android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$MarshmallowViewCompatImpl();
            }
        } else {
            android.support.v4.view.ViewCompat.IMPL = new android.support.v4.view.ViewCompat$Api24ViewCompatImpl();
        }
        return;
    }

    protected ViewCompat()
    {
        return;
    }

    public static android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.animate(p1);
    }

    public static boolean canScrollHorizontally(android.view.View p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.canScrollHorizontally(p1, p2);
    }

    public static boolean canScrollVertically(android.view.View p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.canScrollVertically(p1, p2);
    }

    public static int combineMeasuredStates(int p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.combineMeasuredStates(p1, p2);
    }

    public static android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View p1, android.support.v4.view.WindowInsetsCompat p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.dispatchApplyWindowInsets(p1, p2);
    }

    public static void dispatchFinishTemporaryDetach(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.dispatchFinishTemporaryDetach(p1);
        return;
    }

    public static boolean dispatchNestedFling(android.view.View p1, float p2, float p3, boolean p4)
    {
        return android.support.v4.view.ViewCompat.IMPL.dispatchNestedFling(p1, p2, p3, p4);
    }

    public static boolean dispatchNestedPreFling(android.view.View p1, float p2, float p3)
    {
        return android.support.v4.view.ViewCompat.IMPL.dispatchNestedPreFling(p1, p2, p3);
    }

    public static boolean dispatchNestedPreScroll(android.view.View p6, int p7, int p8, int[] p9, int[] p10)
    {
        return android.support.v4.view.ViewCompat.IMPL.dispatchNestedPreScroll(p6, p7, p8, p9, p10);
    }

    public static boolean dispatchNestedScroll(android.view.View p7, int p8, int p9, int p10, int p11, int[] p12)
    {
        return android.support.v4.view.ViewCompat.IMPL.dispatchNestedScroll(p7, p8, p9, p10, p11, p12);
    }

    public static void dispatchStartTemporaryDetach(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.dispatchStartTemporaryDetach(p1);
        return;
    }

    public static int getAccessibilityLiveRegion(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getAccessibilityLiveRegion(p1);
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getAccessibilityNodeProvider(p1);
    }

    public static float getAlpha(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getAlpha(p1);
    }

    public static android.content.res.ColorStateList getBackgroundTintList(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getBackgroundTintList(p1);
    }

    public static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getBackgroundTintMode(p1);
    }

    public static android.graphics.Rect getClipBounds(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getClipBounds(p1);
    }

    public static android.view.Display getDisplay(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getDisplay(p1);
    }

    public static float getElevation(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getElevation(p1);
    }

    public static boolean getFitsSystemWindows(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getFitsSystemWindows(p1);
    }

    public static int getImportantForAccessibility(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getImportantForAccessibility(p1);
    }

    public static int getLabelFor(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getLabelFor(p1);
    }

    public static int getLayerType(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getLayerType(p1);
    }

    public static int getLayoutDirection(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getLayoutDirection(p1);
    }

    public static android.graphics.Matrix getMatrix(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMatrix(p1);
    }

    public static int getMeasuredHeightAndState(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMeasuredHeightAndState(p1);
    }

    public static int getMeasuredState(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMeasuredState(p1);
    }

    public static int getMeasuredWidthAndState(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMeasuredWidthAndState(p1);
    }

    public static int getMinimumHeight(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMinimumHeight(p1);
    }

    public static int getMinimumWidth(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getMinimumWidth(p1);
    }

    public static int getOverScrollMode(android.view.View p1)
    {
        return p1.getOverScrollMode();
    }

    public static int getPaddingEnd(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getPaddingEnd(p1);
    }

    public static int getPaddingStart(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getPaddingStart(p1);
    }

    public static android.view.ViewParent getParentForAccessibility(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getParentForAccessibility(p1);
    }

    public static float getPivotX(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getPivotX(p1);
    }

    public static float getPivotY(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getPivotY(p1);
    }

    public static float getRotation(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getRotation(p1);
    }

    public static float getRotationX(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getRotationX(p1);
    }

    public static float getRotationY(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getRotationY(p1);
    }

    public static float getScaleX(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getScaleX(p1);
    }

    public static float getScaleY(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getScaleY(p1);
    }

    public static int getScrollIndicators(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getScrollIndicators(p1);
    }

    public static String getTransitionName(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getTransitionName(p1);
    }

    public static float getTranslationX(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getTranslationX(p1);
    }

    public static float getTranslationY(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getTranslationY(p1);
    }

    public static float getTranslationZ(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getTranslationZ(p1);
    }

    public static int getWindowSystemUiVisibility(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getWindowSystemUiVisibility(p1);
    }

    public static float getX(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getX(p1);
    }

    public static float getY(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getY(p1);
    }

    public static float getZ(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.getZ(p1);
    }

    public static boolean hasAccessibilityDelegate(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.hasAccessibilityDelegate(p1);
    }

    public static boolean hasNestedScrollingParent(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.hasNestedScrollingParent(p1);
    }

    public static boolean hasOnClickListeners(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.hasOnClickListeners(p1);
    }

    public static boolean hasOverlappingRendering(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.hasOverlappingRendering(p1);
    }

    public static boolean hasTransientState(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.hasTransientState(p1);
    }

    public static boolean isAttachedToWindow(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isAttachedToWindow(p1);
    }

    public static boolean isImportantForAccessibility(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isImportantForAccessibility(p1);
    }

    public static boolean isInLayout(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isInLayout(p1);
    }

    public static boolean isLaidOut(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isLaidOut(p1);
    }

    public static boolean isLayoutDirectionResolved(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isLayoutDirectionResolved(p1);
    }

    public static boolean isNestedScrollingEnabled(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isNestedScrollingEnabled(p1);
    }

    public static boolean isOpaque(android.view.View p1)
    {
        return p1.isOpaque();
    }

    public static boolean isPaddingRelative(android.view.View p1)
    {
        return android.support.v4.view.ViewCompat.IMPL.isPaddingRelative(p1);
    }

    public static void jumpDrawablesToCurrentState(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.jumpDrawablesToCurrentState(p1);
        return;
    }

    public static void offsetLeftAndRight(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.offsetLeftAndRight(p1, p2);
        return;
    }

    public static void offsetTopAndBottom(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.offsetTopAndBottom(p1, p2);
        return;
    }

    public static android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View p1, android.support.v4.view.WindowInsetsCompat p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.onApplyWindowInsets(p1, p2);
    }

    public static void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(android.view.View p1, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onInitializeAccessibilityNodeInfo(p1, p2);
        return;
    }

    public static void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompat.IMPL.onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public static boolean performAccessibilityAction(android.view.View p1, int p2, android.os.Bundle p3)
    {
        return android.support.v4.view.ViewCompat.IMPL.performAccessibilityAction(p1, p2, p3);
    }

    public static void postInvalidateOnAnimation(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.postInvalidateOnAnimation(p1);
        return;
    }

    public static void postInvalidateOnAnimation(android.view.View p6, int p7, int p8, int p9, int p10)
    {
        android.support.v4.view.ViewCompat.IMPL.postInvalidateOnAnimation(p6, p7, p8, p9, p10);
        return;
    }

    public static void postOnAnimation(android.view.View p1, Runnable p2)
    {
        android.support.v4.view.ViewCompat.IMPL.postOnAnimation(p1, p2);
        return;
    }

    public static void postOnAnimationDelayed(android.view.View p2, Runnable p3, long p4)
    {
        android.support.v4.view.ViewCompat.IMPL.postOnAnimationDelayed(p2, p3, p4);
        return;
    }

    public static void requestApplyInsets(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.requestApplyInsets(p1);
        return;
    }

    public static int resolveSizeAndState(int p1, int p2, int p3)
    {
        return android.support.v4.view.ViewCompat.IMPL.resolveSizeAndState(p1, p2, p3);
    }

    public static void setAccessibilityDelegate(android.view.View p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setAccessibilityDelegate(p1, p2);
        return;
    }

    public static void setAccessibilityLiveRegion(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setAccessibilityLiveRegion(p1, p2);
        return;
    }

    public static void setActivated(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setActivated(p1, p2);
        return;
    }

    public static void setAlpha(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setAlpha(p1, p2);
        return;
    }

    public static void setBackground(android.view.View p1, android.graphics.drawable.Drawable p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setBackground(p1, p2);
        return;
    }

    public static void setBackgroundTintList(android.view.View p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setBackgroundTintList(p1, p2);
        return;
    }

    public static void setBackgroundTintMode(android.view.View p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setBackgroundTintMode(p1, p2);
        return;
    }

    public static void setChildrenDrawingOrderEnabled(android.view.ViewGroup p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setChildrenDrawingOrderEnabled(p1, p2);
        return;
    }

    public static void setClipBounds(android.view.View p1, android.graphics.Rect p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setClipBounds(p1, p2);
        return;
    }

    public static void setElevation(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setElevation(p1, p2);
        return;
    }

    public static void setFitsSystemWindows(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setFitsSystemWindows(p1, p2);
        return;
    }

    public static void setHasTransientState(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setHasTransientState(p1, p2);
        return;
    }

    public static void setImportantForAccessibility(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setImportantForAccessibility(p1, p2);
        return;
    }

    public static void setLabelFor(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setLabelFor(p1, p2);
        return;
    }

    public static void setLayerPaint(android.view.View p1, android.graphics.Paint p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setLayerPaint(p1, p2);
        return;
    }

    public static void setLayerType(android.view.View p1, int p2, android.graphics.Paint p3)
    {
        android.support.v4.view.ViewCompat.IMPL.setLayerType(p1, p2, p3);
        return;
    }

    public static void setLayoutDirection(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setLayoutDirection(p1, p2);
        return;
    }

    public static void setNestedScrollingEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setNestedScrollingEnabled(p1, p2);
        return;
    }

    public static void setOnApplyWindowInsetsListener(android.view.View p1, android.support.v4.view.OnApplyWindowInsetsListener p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setOnApplyWindowInsetsListener(p1, p2);
        return;
    }

    public static void setOverScrollMode(android.view.View p0, int p1)
    {
        p0.setOverScrollMode(p1);
        return;
    }

    public static void setPaddingRelative(android.view.View p6, int p7, int p8, int p9, int p10)
    {
        android.support.v4.view.ViewCompat.IMPL.setPaddingRelative(p6, p7, p8, p9, p10);
        return;
    }

    public static void setPivotX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setPivotX(p1, p2);
        return;
    }

    public static void setPivotY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setPivotY(p1, p2);
        return;
    }

    public static void setPointerIcon(android.view.View p1, android.support.v4.view.PointerIconCompat p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setPointerIcon(p1, p2);
        return;
    }

    public static void setRotation(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setRotation(p1, p2);
        return;
    }

    public static void setRotationX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setRotationX(p1, p2);
        return;
    }

    public static void setRotationY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setRotationY(p1, p2);
        return;
    }

    public static void setSaveFromParentEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setSaveFromParentEnabled(p1, p2);
        return;
    }

    public static void setScaleX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setScaleX(p1, p2);
        return;
    }

    public static void setScaleY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setScaleY(p1, p2);
        return;
    }

    public static void setScrollIndicators(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setScrollIndicators(p1, p2);
        return;
    }

    public static void setScrollIndicators(android.view.View p1, int p2, int p3)
    {
        android.support.v4.view.ViewCompat.IMPL.setScrollIndicators(p1, p2, p3);
        return;
    }

    public static void setTransitionName(android.view.View p1, String p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setTransitionName(p1, p2);
        return;
    }

    public static void setTranslationX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setTranslationX(p1, p2);
        return;
    }

    public static void setTranslationY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setTranslationY(p1, p2);
        return;
    }

    public static void setTranslationZ(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setTranslationZ(p1, p2);
        return;
    }

    public static void setX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setX(p1, p2);
        return;
    }

    public static void setY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setY(p1, p2);
        return;
    }

    public static void setZ(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompat.IMPL.setZ(p1, p2);
        return;
    }

    public static boolean startNestedScroll(android.view.View p1, int p2)
    {
        return android.support.v4.view.ViewCompat.IMPL.startNestedScroll(p1, p2);
    }

    public static void stopNestedScroll(android.view.View p1)
    {
        android.support.v4.view.ViewCompat.IMPL.stopNestedScroll(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatApi24 {

    ViewCompatApi24()
    {
        return;
    }

    public static void setPointerIcon(android.view.View p0, Object p1)
    {
        p0.setPointerIcon(((android.view.PointerIcon) p1));
        return;
    }
}
package android.support.v4.view;
 class ViewCompatBase {
    private static final String TAG = "ViewCompatBase";
    private static reflect.Field sMinHeightField;
    private static boolean sMinHeightFieldFetched;
    private static reflect.Field sMinWidthField;
    private static boolean sMinWidthFieldFetched;

    ViewCompatBase()
    {
        return;
    }

    static android.content.res.ColorStateList getBackgroundTintList(android.view.View p1)
    {
        int v0_1;
        if (!(p1 instanceof android.support.v4.view.TintableBackgroundView)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.TintableBackgroundView) p1).getSupportBackgroundTintList();
        }
        return v0_1;
    }

    static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View p1)
    {
        int v0_1;
        if (!(p1 instanceof android.support.v4.view.TintableBackgroundView)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.TintableBackgroundView) p1).getSupportBackgroundTintMode();
        }
        return v0_1;
    }

    static android.view.Display getDisplay(android.view.View p3)
    {
        int v1_1;
        if (!android.support.v4.view.ViewCompatBase.isAttachedToWindow(p3)) {
            v1_1 = 0;
        } else {
            v1_1 = ((android.view.WindowManager) p3.getContext().getSystemService("window")).getDefaultDisplay();
        }
        return v1_1;
    }

    static int getMinimumHeight(android.view.View p3)
    {
        if (!android.support.v4.view.ViewCompatBase.sMinHeightFieldFetched) {
            try {
                android.support.v4.view.ViewCompatBase.sMinHeightField = android.view.View.getDeclaredField("mMinHeight");
                android.support.v4.view.ViewCompatBase.sMinHeightField.setAccessible(1);
            } catch (Exception v0) {
            }
            android.support.v4.view.ViewCompatBase.sMinHeightFieldFetched = 1;
        }
        Exception v0_5;
        if (android.support.v4.view.ViewCompatBase.sMinHeightField == null) {
            v0_5 = 0;
        } else {
            try {
                v0_5 = ((Integer) android.support.v4.view.ViewCompatBase.sMinHeightField.get(p3)).intValue();
            } catch (Exception v0) {
            }
        }
        return v0_5;
    }

    static int getMinimumWidth(android.view.View p3)
    {
        if (!android.support.v4.view.ViewCompatBase.sMinWidthFieldFetched) {
            try {
                android.support.v4.view.ViewCompatBase.sMinWidthField = android.view.View.getDeclaredField("mMinWidth");
                android.support.v4.view.ViewCompatBase.sMinWidthField.setAccessible(1);
            } catch (Exception v0) {
            }
            android.support.v4.view.ViewCompatBase.sMinWidthFieldFetched = 1;
        }
        Exception v0_5;
        if (android.support.v4.view.ViewCompatBase.sMinWidthField == null) {
            v0_5 = 0;
        } else {
            try {
                v0_5 = ((Integer) android.support.v4.view.ViewCompatBase.sMinWidthField.get(p3)).intValue();
            } catch (Exception v0) {
            }
        }
        return v0_5;
    }

    static boolean isAttachedToWindow(android.view.View p1)
    {
        int v0_1;
        if (p1.getWindowToken() == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    static boolean isLaidOut(android.view.View p1)
    {
        if ((p1.getWidth() <= 0) || (p1.getHeight() <= 0)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    static void offsetLeftAndRight(android.view.View p7, int p8)
    {
        int v1 = p7.getLeft();
        p7.offsetLeftAndRight(p8);
        if (p8 != 0) {
            android.view.View v2_1 = p7.getParent();
            if (!(v2_1 instanceof android.view.View)) {
                p7.invalidate();
            } else {
                int v0 = Math.abs(p8);
                ((android.view.View) v2_1).invalidate((v1 - v0), p7.getTop(), ((p7.getWidth() + v1) + v0), p7.getBottom());
            }
        }
        return;
    }

    static void offsetTopAndBottom(android.view.View p7, int p8)
    {
        int v1 = p7.getTop();
        p7.offsetTopAndBottom(p8);
        if (p8 != 0) {
            android.view.View v2_1 = p7.getParent();
            if (!(v2_1 instanceof android.view.View)) {
                p7.invalidate();
            } else {
                int v0 = Math.abs(p8);
                ((android.view.View) v2_1).invalidate(p7.getLeft(), (v1 - v0), p7.getRight(), ((p7.getHeight() + v1) + v0));
            }
        }
        return;
    }

    static void setBackgroundTintList(android.view.View p1, android.content.res.ColorStateList p2)
    {
        if ((p1 instanceof android.support.v4.view.TintableBackgroundView)) {
            ((android.support.v4.view.TintableBackgroundView) p1).setSupportBackgroundTintList(p2);
        }
        return;
    }

    static void setBackgroundTintMode(android.view.View p1, android.graphics.PorterDuff$Mode p2)
    {
        if ((p1 instanceof android.support.v4.view.TintableBackgroundView)) {
            ((android.support.v4.view.TintableBackgroundView) p1).setSupportBackgroundTintMode(p2);
        }
        return;
    }
}
package android.support.v4.view;
 class ViewCompatHC {

    ViewCompatHC()
    {
        return;
    }

    public static int combineMeasuredStates(int p1, int p2)
    {
        return android.view.View.combineMeasuredStates(p1, p2);
    }

    public static float getAlpha(android.view.View p1)
    {
        return p1.getAlpha();
    }

    static long getFrameTime()
    {
        return android.animation.ValueAnimator.getFrameDelay();
    }

    public static int getLayerType(android.view.View p1)
    {
        return p1.getLayerType();
    }

    public static android.graphics.Matrix getMatrix(android.view.View p1)
    {
        return p1.getMatrix();
    }

    public static int getMeasuredHeightAndState(android.view.View p1)
    {
        return p1.getMeasuredHeightAndState();
    }

    public static int getMeasuredState(android.view.View p1)
    {
        return p1.getMeasuredState();
    }

    public static int getMeasuredWidthAndState(android.view.View p1)
    {
        return p1.getMeasuredWidthAndState();
    }

    public static float getPivotX(android.view.View p1)
    {
        return p1.getPivotX();
    }

    public static float getPivotY(android.view.View p1)
    {
        return p1.getPivotY();
    }

    public static float getRotation(android.view.View p1)
    {
        return p1.getRotation();
    }

    public static float getRotationX(android.view.View p1)
    {
        return p1.getRotationX();
    }

    public static float getRotationY(android.view.View p1)
    {
        return p1.getRotationY();
    }

    public static float getScaleX(android.view.View p1)
    {
        return p1.getScaleX();
    }

    public static float getScaleY(android.view.View p1)
    {
        return p1.getScaleY();
    }

    public static float getTranslationX(android.view.View p1)
    {
        return p1.getTranslationX();
    }

    public static float getTranslationY(android.view.View p1)
    {
        return p1.getTranslationY();
    }

    public static float getX(android.view.View p1)
    {
        return p1.getX();
    }

    public static float getY(android.view.View p1)
    {
        return p1.getY();
    }

    public static void jumpDrawablesToCurrentState(android.view.View p0)
    {
        p0.jumpDrawablesToCurrentState();
        return;
    }

    static void offsetLeftAndRight(android.view.View p2, int p3)
    {
        p2.offsetLeftAndRight(p3);
        if (p2.getVisibility() == 0) {
            android.support.v4.view.ViewCompatHC.tickleInvalidationFlag(p2);
            android.view.View v0_0 = p2.getParent();
            if ((v0_0 instanceof android.view.View)) {
                android.support.v4.view.ViewCompatHC.tickleInvalidationFlag(((android.view.View) v0_0));
            }
        }
        return;
    }

    static void offsetTopAndBottom(android.view.View p2, int p3)
    {
        p2.offsetTopAndBottom(p3);
        if (p2.getVisibility() == 0) {
            android.support.v4.view.ViewCompatHC.tickleInvalidationFlag(p2);
            android.view.View v0_0 = p2.getParent();
            if ((v0_0 instanceof android.view.View)) {
                android.support.v4.view.ViewCompatHC.tickleInvalidationFlag(((android.view.View) v0_0));
            }
        }
        return;
    }

    public static int resolveSizeAndState(int p1, int p2, int p3)
    {
        return android.view.View.resolveSizeAndState(p1, p2, p3);
    }

    public static void setActivated(android.view.View p0, boolean p1)
    {
        p0.setActivated(p1);
        return;
    }

    public static void setAlpha(android.view.View p0, float p1)
    {
        p0.setAlpha(p1);
        return;
    }

    public static void setLayerType(android.view.View p0, int p1, android.graphics.Paint p2)
    {
        p0.setLayerType(p1, p2);
        return;
    }

    public static void setPivotX(android.view.View p0, float p1)
    {
        p0.setPivotX(p1);
        return;
    }

    public static void setPivotY(android.view.View p0, float p1)
    {
        p0.setPivotY(p1);
        return;
    }

    public static void setRotation(android.view.View p0, float p1)
    {
        p0.setRotation(p1);
        return;
    }

    public static void setRotationX(android.view.View p0, float p1)
    {
        p0.setRotationX(p1);
        return;
    }

    public static void setRotationY(android.view.View p0, float p1)
    {
        p0.setRotationY(p1);
        return;
    }

    public static void setSaveFromParentEnabled(android.view.View p0, boolean p1)
    {
        p0.setSaveFromParentEnabled(p1);
        return;
    }

    public static void setScaleX(android.view.View p0, float p1)
    {
        p0.setScaleX(p1);
        return;
    }

    public static void setScaleY(android.view.View p0, float p1)
    {
        p0.setScaleY(p1);
        return;
    }

    public static void setTranslationX(android.view.View p0, float p1)
    {
        p0.setTranslationX(p1);
        return;
    }

    public static void setTranslationY(android.view.View p0, float p1)
    {
        p0.setTranslationY(p1);
        return;
    }

    public static void setX(android.view.View p0, float p1)
    {
        p0.setX(p1);
        return;
    }

    public static void setY(android.view.View p0, float p1)
    {
        p0.setY(p1);
        return;
    }

    private static void tickleInvalidationFlag(android.view.View p2)
    {
        float v0 = p2.getTranslationY();
        p2.setTranslationY((1065353216 + v0));
        p2.setTranslationY(v0);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatICS {

    ViewCompatICS()
    {
        return;
    }

    public static boolean canScrollHorizontally(android.view.View p1, int p2)
    {
        return p1.canScrollHorizontally(p2);
    }

    public static boolean canScrollVertically(android.view.View p1, int p2)
    {
        return p1.canScrollVertically(p2);
    }

    public static void onInitializeAccessibilityEvent(android.view.View p0, android.view.accessibility.AccessibilityEvent p1)
    {
        p0.onInitializeAccessibilityEvent(p1);
        return;
    }

    public static void onInitializeAccessibilityNodeInfo(android.view.View p0, Object p1)
    {
        p0.onInitializeAccessibilityNodeInfo(((android.view.accessibility.AccessibilityNodeInfo) p1));
        return;
    }

    public static void onPopulateAccessibilityEvent(android.view.View p0, android.view.accessibility.AccessibilityEvent p1)
    {
        p0.onPopulateAccessibilityEvent(p1);
        return;
    }

    public static void setAccessibilityDelegate(android.view.View p0, Object p1)
    {
        p0.setAccessibilityDelegate(((android.view.View$AccessibilityDelegate) p1));
        return;
    }

    public static void setFitsSystemWindows(android.view.View p0, boolean p1)
    {
        p0.setFitsSystemWindows(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatICSMr1 {

    ViewCompatICSMr1()
    {
        return;
    }

    public static boolean hasOnClickListeners(android.view.View p1)
    {
        return p1.hasOnClickListeners();
    }
}
package android.support.v4.view;
 class ViewCompatJB {

    ViewCompatJB()
    {
        return;
    }

    public static Object getAccessibilityNodeProvider(android.view.View p1)
    {
        return p1.getAccessibilityNodeProvider();
    }

    public static boolean getFitsSystemWindows(android.view.View p1)
    {
        return p1.getFitsSystemWindows();
    }

    public static int getImportantForAccessibility(android.view.View p1)
    {
        return p1.getImportantForAccessibility();
    }

    public static int getMinimumHeight(android.view.View p1)
    {
        return p1.getMinimumHeight();
    }

    public static int getMinimumWidth(android.view.View p1)
    {
        return p1.getMinimumWidth();
    }

    public static android.view.ViewParent getParentForAccessibility(android.view.View p1)
    {
        return p1.getParentForAccessibility();
    }

    public static boolean hasOverlappingRendering(android.view.View p1)
    {
        return p1.hasOverlappingRendering();
    }

    public static boolean hasTransientState(android.view.View p1)
    {
        return p1.hasTransientState();
    }

    public static boolean performAccessibilityAction(android.view.View p1, int p2, android.os.Bundle p3)
    {
        return p1.performAccessibilityAction(p2, p3);
    }

    public static void postInvalidateOnAnimation(android.view.View p0)
    {
        p0.postInvalidateOnAnimation();
        return;
    }

    public static void postInvalidateOnAnimation(android.view.View p0, int p1, int p2, int p3, int p4)
    {
        p0.postInvalidate(p1, p2, p3, p4);
        return;
    }

    public static void postOnAnimation(android.view.View p0, Runnable p1)
    {
        p0.postOnAnimation(p1);
        return;
    }

    public static void postOnAnimationDelayed(android.view.View p0, Runnable p1, long p2)
    {
        p0.postOnAnimationDelayed(p1, p2);
        return;
    }

    public static void requestApplyInsets(android.view.View p0)
    {
        p0.requestFitSystemWindows();
        return;
    }

    public static void setBackground(android.view.View p0, android.graphics.drawable.Drawable p1)
    {
        p0.setBackground(p1);
        return;
    }

    public static void setHasTransientState(android.view.View p0, boolean p1)
    {
        p0.setHasTransientState(p1);
        return;
    }

    public static void setImportantForAccessibility(android.view.View p0, int p1)
    {
        p0.setImportantForAccessibility(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatJellybeanMr1 {

    ViewCompatJellybeanMr1()
    {
        return;
    }

    public static android.view.Display getDisplay(android.view.View p1)
    {
        return p1.getDisplay();
    }

    public static int getLabelFor(android.view.View p1)
    {
        return p1.getLabelFor();
    }

    public static int getLayoutDirection(android.view.View p1)
    {
        return p1.getLayoutDirection();
    }

    public static int getPaddingEnd(android.view.View p1)
    {
        return p1.getPaddingEnd();
    }

    public static int getPaddingStart(android.view.View p1)
    {
        return p1.getPaddingStart();
    }

    public static int getWindowSystemUiVisibility(android.view.View p1)
    {
        return p1.getWindowSystemUiVisibility();
    }

    public static boolean isPaddingRelative(android.view.View p1)
    {
        return p1.isPaddingRelative();
    }

    public static void setLabelFor(android.view.View p0, int p1)
    {
        p0.setLabelFor(p1);
        return;
    }

    public static void setLayerPaint(android.view.View p0, android.graphics.Paint p1)
    {
        p0.setLayerPaint(p1);
        return;
    }

    public static void setLayoutDirection(android.view.View p0, int p1)
    {
        p0.setLayoutDirection(p1);
        return;
    }

    public static void setPaddingRelative(android.view.View p0, int p1, int p2, int p3, int p4)
    {
        p0.setPaddingRelative(p1, p2, p3, p4);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatJellybeanMr2 {

    ViewCompatJellybeanMr2()
    {
        return;
    }

    public static android.graphics.Rect getClipBounds(android.view.View p1)
    {
        return p1.getClipBounds();
    }

    public static boolean isInLayout(android.view.View p1)
    {
        return p1.isInLayout();
    }

    public static void setClipBounds(android.view.View p0, android.graphics.Rect p1)
    {
        p0.setClipBounds(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewCompatKitKat {

    ViewCompatKitKat()
    {
        return;
    }

    public static int getAccessibilityLiveRegion(android.view.View p1)
    {
        return p1.getAccessibilityLiveRegion();
    }

    public static boolean isAttachedToWindow(android.view.View p1)
    {
        return p1.isAttachedToWindow();
    }

    public static boolean isLaidOut(android.view.View p1)
    {
        return p1.isLaidOut();
    }

    public static boolean isLayoutDirectionResolved(android.view.View p1)
    {
        return p1.isLayoutDirectionResolved();
    }

    public static void setAccessibilityLiveRegion(android.view.View p0, int p1)
    {
        p0.setAccessibilityLiveRegion(p1);
        return;
    }
}
package android.support.v4.view;
final class ViewCompatLollipop$1 implements android.view.View$OnApplyWindowInsetsListener {
    final synthetic android.support.v4.view.ViewCompatLollipop$OnApplyWindowInsetsListenerBridge val$bridge;

    ViewCompatLollipop$1(android.support.v4.view.ViewCompatLollipop$OnApplyWindowInsetsListenerBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public android.view.WindowInsets onApplyWindowInsets(android.view.View p2, android.view.WindowInsets p3)
    {
        return ((android.view.WindowInsets) this.val$bridge.onApplyWindowInsets(p2, p3));
    }
}
package android.support.v4.view;
public interface ViewCompatLollipop$OnApplyWindowInsetsListenerBridge {

    public abstract Object onApplyWindowInsets();
}
package android.support.v4.view;
 class ViewCompatLollipop {
    private static ThreadLocal sThreadLocalRect;

    ViewCompatLollipop()
    {
        return;
    }

    public static Object dispatchApplyWindowInsets(android.view.View p2, Object p3)
    {
        android.view.WindowInsets v0 = p2.dispatchApplyWindowInsets(((android.view.WindowInsets) p3));
        if (v0 != ((android.view.WindowInsets) p3)) {
            p3 = new android.view.WindowInsets(v0);
        }
        return p3;
    }

    public static boolean dispatchNestedFling(android.view.View p1, float p2, float p3, boolean p4)
    {
        return p1.dispatchNestedFling(p2, p3, p4);
    }

    public static boolean dispatchNestedPreFling(android.view.View p1, float p2, float p3)
    {
        return p1.dispatchNestedPreFling(p2, p3);
    }

    public static boolean dispatchNestedPreScroll(android.view.View p1, int p2, int p3, int[] p4, int[] p5)
    {
        return p1.dispatchNestedPreScroll(p2, p3, p4, p5);
    }

    public static boolean dispatchNestedScroll(android.view.View p1, int p2, int p3, int p4, int p5, int[] p6)
    {
        return p1.dispatchNestedScroll(p2, p3, p4, p5, p6);
    }

    static android.content.res.ColorStateList getBackgroundTintList(android.view.View p1)
    {
        return p1.getBackgroundTintList();
    }

    static android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View p1)
    {
        return p1.getBackgroundTintMode();
    }

    public static float getElevation(android.view.View p1)
    {
        return p1.getElevation();
    }

    private static android.graphics.Rect getEmptyTempRect()
    {
        if (android.support.v4.view.ViewCompatLollipop.sThreadLocalRect == null) {
            android.support.v4.view.ViewCompatLollipop.sThreadLocalRect = new ThreadLocal();
        }
        android.graphics.Rect v0_1 = ((android.graphics.Rect) android.support.v4.view.ViewCompatLollipop.sThreadLocalRect.get());
        if (v0_1 == null) {
            v0_1 = new android.graphics.Rect();
            android.support.v4.view.ViewCompatLollipop.sThreadLocalRect.set(v0_1);
        }
        v0_1.setEmpty();
        return v0_1;
    }

    public static String getTransitionName(android.view.View p1)
    {
        return p1.getTransitionName();
    }

    public static float getTranslationZ(android.view.View p1)
    {
        return p1.getTranslationZ();
    }

    public static float getZ(android.view.View p1)
    {
        return p1.getZ();
    }

    public static boolean hasNestedScrollingParent(android.view.View p1)
    {
        return p1.hasNestedScrollingParent();
    }

    public static boolean isImportantForAccessibility(android.view.View p1)
    {
        return p1.isImportantForAccessibility();
    }

    public static boolean isNestedScrollingEnabled(android.view.View p1)
    {
        return p1.isNestedScrollingEnabled();
    }

    static void offsetLeftAndRight(android.view.View p8, int p9)
    {
        android.graphics.Rect v3 = android.support.v4.view.ViewCompatLollipop.getEmptyTempRect();
        int v0 = 0;
        android.view.View v2_0 = p8.getParent();
        if ((v2_0 instanceof android.view.View)) {
            android.view.View v1_1 = ((android.view.View) v2_0);
            v3.set(v1_1.getLeft(), v1_1.getTop(), v1_1.getRight(), v1_1.getBottom());
            if (v3.intersects(p8.getLeft(), p8.getTop(), p8.getRight(), p8.getBottom())) {
                v0 = 0;
            } else {
                v0 = 1;
            }
        }
        android.support.v4.view.ViewCompatHC.offsetLeftAndRight(p8, p9);
        if ((v0 != 0) && (v3.intersect(p8.getLeft(), p8.getTop(), p8.getRight(), p8.getBottom()))) {
            ((android.view.View) v2_0).invalidate(v3);
        }
        return;
    }

    static void offsetTopAndBottom(android.view.View p8, int p9)
    {
        android.graphics.Rect v3 = android.support.v4.view.ViewCompatLollipop.getEmptyTempRect();
        int v0 = 0;
        android.view.View v2_0 = p8.getParent();
        if ((v2_0 instanceof android.view.View)) {
            android.view.View v1_1 = ((android.view.View) v2_0);
            v3.set(v1_1.getLeft(), v1_1.getTop(), v1_1.getRight(), v1_1.getBottom());
            if (v3.intersects(p8.getLeft(), p8.getTop(), p8.getRight(), p8.getBottom())) {
                v0 = 0;
            } else {
                v0 = 1;
            }
        }
        android.support.v4.view.ViewCompatHC.offsetTopAndBottom(p8, p9);
        if ((v0 != 0) && (v3.intersect(p8.getLeft(), p8.getTop(), p8.getRight(), p8.getBottom()))) {
            ((android.view.View) v2_0).invalidate(v3);
        }
        return;
    }

    public static Object onApplyWindowInsets(android.view.View p2, Object p3)
    {
        android.view.WindowInsets v0 = p2.onApplyWindowInsets(((android.view.WindowInsets) p3));
        if (v0 != ((android.view.WindowInsets) p3)) {
            p3 = new android.view.WindowInsets(v0);
        }
        return p3;
    }

    public static void requestApplyInsets(android.view.View p0)
    {
        p0.requestApplyInsets();
        return;
    }

    static void setBackgroundTintList(android.view.View p4, android.content.res.ColorStateList p5)
    {
        p4.setBackgroundTintList(p5);
        if (android.os.Build$VERSION.SDK_INT == 21) {
            int v1;
            android.graphics.drawable.Drawable v0 = p4.getBackground();
            if ((p4.getBackgroundTintList() == null) || (p4.getBackgroundTintMode() == null)) {
                v1 = 0;
            } else {
                v1 = 1;
            }
            if ((v0 != null) && (v1 != 0)) {
                if (v0.isStateful()) {
                    v0.setState(p4.getDrawableState());
                }
                p4.setBackground(v0);
            }
        }
        return;
    }

    static void setBackgroundTintMode(android.view.View p4, android.graphics.PorterDuff$Mode p5)
    {
        p4.setBackgroundTintMode(p5);
        if (android.os.Build$VERSION.SDK_INT == 21) {
            int v1;
            android.graphics.drawable.Drawable v0 = p4.getBackground();
            if ((p4.getBackgroundTintList() == null) || (p4.getBackgroundTintMode() == null)) {
                v1 = 0;
            } else {
                v1 = 1;
            }
            if ((v0 != null) && (v1 != 0)) {
                if (v0.isStateful()) {
                    v0.setState(p4.getDrawableState());
                }
                p4.setBackground(v0);
            }
        }
        return;
    }

    public static void setElevation(android.view.View p0, float p1)
    {
        p0.setElevation(p1);
        return;
    }

    public static void setNestedScrollingEnabled(android.view.View p0, boolean p1)
    {
        p0.setNestedScrollingEnabled(p1);
        return;
    }

    public static void setOnApplyWindowInsetsListener(android.view.View p1, android.support.v4.view.ViewCompatLollipop$OnApplyWindowInsetsListenerBridge p2)
    {
        if (p2 != null) {
            p1.setOnApplyWindowInsetsListener(new android.support.v4.view.ViewCompatLollipop$1(p2));
        } else {
            p1.setOnApplyWindowInsetsListener(0);
        }
        return;
    }

    public static void setTransitionName(android.view.View p0, String p1)
    {
        p0.setTransitionName(p1);
        return;
    }

    public static void setTranslationZ(android.view.View p0, float p1)
    {
        p0.setTranslationZ(p1);
        return;
    }

    public static void setZ(android.view.View p0, float p1)
    {
        p0.setZ(p1);
        return;
    }

    public static boolean startNestedScroll(android.view.View p1, int p2)
    {
        return p1.startNestedScroll(p2);
    }

    public static void stopNestedScroll(android.view.View p0)
    {
        p0.stopNestedScroll();
        return;
    }
}
package android.support.v4.view;
 class ViewCompatMarshmallow {

    ViewCompatMarshmallow()
    {
        return;
    }

    public static int getScrollIndicators(android.view.View p1)
    {
        return p1.getScrollIndicators();
    }

    static void offsetLeftAndRight(android.view.View p0, int p1)
    {
        p0.offsetLeftAndRight(p1);
        return;
    }

    static void offsetTopAndBottom(android.view.View p0, int p1)
    {
        p0.offsetTopAndBottom(p1);
        return;
    }

    public static void setScrollIndicators(android.view.View p0, int p1)
    {
        p0.setScrollIndicators(p1);
        return;
    }

    public static void setScrollIndicators(android.view.View p0, int p1, int p2)
    {
        p0.setScrollIndicators(p1, p2);
        return;
    }
}
package android.support.v4.view;
interface ViewConfigurationCompat$ViewConfigurationVersionImpl {

    public abstract boolean hasPermanentMenuKey();
}
package android.support.v4.view;
public final class ViewConfigurationCompat {
    static final android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL;

    static ViewConfigurationCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            if (android.os.Build$VERSION.SDK_INT < 11) {
                android.support.v4.view.ViewConfigurationCompat.IMPL = new android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl();
            } else {
                android.support.v4.view.ViewConfigurationCompat.IMPL = new android.support.v4.view.ViewConfigurationCompat$HoneycombViewConfigurationVersionImpl();
            }
        } else {
            android.support.v4.view.ViewConfigurationCompat.IMPL = new android.support.v4.view.ViewConfigurationCompat$IcsViewConfigurationVersionImpl();
        }
        return;
    }

    private ViewConfigurationCompat()
    {
        return;
    }

    public static int getScaledPagingTouchSlop(android.view.ViewConfiguration p1)
    {
        return p1.getScaledPagingTouchSlop();
    }

    public static boolean hasPermanentMenuKey(android.view.ViewConfiguration p1)
    {
        return android.support.v4.view.ViewConfigurationCompat.IMPL.hasPermanentMenuKey(p1);
    }
}
package android.support.v4.view;
 class ViewConfigurationCompatICS {

    ViewConfigurationCompatICS()
    {
        return;
    }

    static boolean hasPermanentMenuKey(android.view.ViewConfiguration p1)
    {
        return p1.hasPermanentMenuKey();
    }
}
package android.support.v4.view;
interface ViewGroupCompat$ViewGroupCompatImpl {

    public abstract int getLayoutMode();

    public abstract int getNestedScrollAxes();

    public abstract boolean isTransitionGroup();

    public abstract boolean onRequestSendAccessibilityEvent();

    public abstract void setLayoutMode();

    public abstract void setMotionEventSplittingEnabled();

    public abstract void setTransitionGroup();
}
package android.support.v4.view;
public final class ViewGroupCompat {
    static final android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl IMPL = None;
    public static final int LAYOUT_MODE_CLIP_BOUNDS = 0;
    public static final int LAYOUT_MODE_OPTICAL_BOUNDS = 1;

    static ViewGroupCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 18) {
                if (v0 < 14) {
                    if (v0 < 11) {
                        android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl();
                    } else {
                        android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl();
                    }
                } else {
                    android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl();
                }
            } else {
                android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatJellybeanMR2Impl();
            }
        } else {
            android.support.v4.view.ViewGroupCompat.IMPL = new android.support.v4.view.ViewGroupCompat$ViewGroupCompatLollipopImpl();
        }
        return;
    }

    private ViewGroupCompat()
    {
        return;
    }

    public static int getLayoutMode(android.view.ViewGroup p1)
    {
        return android.support.v4.view.ViewGroupCompat.IMPL.getLayoutMode(p1);
    }

    public static int getNestedScrollAxes(android.view.ViewGroup p1)
    {
        return android.support.v4.view.ViewGroupCompat.IMPL.getNestedScrollAxes(p1);
    }

    public static boolean isTransitionGroup(android.view.ViewGroup p1)
    {
        return android.support.v4.view.ViewGroupCompat.IMPL.isTransitionGroup(p1);
    }

    public static boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return android.support.v4.view.ViewGroupCompat.IMPL.onRequestSendAccessibilityEvent(p1, p2, p3);
    }

    public static void setLayoutMode(android.view.ViewGroup p1, int p2)
    {
        android.support.v4.view.ViewGroupCompat.IMPL.setLayoutMode(p1, p2);
        return;
    }

    public static void setMotionEventSplittingEnabled(android.view.ViewGroup p1, boolean p2)
    {
        android.support.v4.view.ViewGroupCompat.IMPL.setMotionEventSplittingEnabled(p1, p2);
        return;
    }

    public static void setTransitionGroup(android.view.ViewGroup p1, boolean p2)
    {
        android.support.v4.view.ViewGroupCompat.IMPL.setTransitionGroup(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewGroupCompatHC {

    private ViewGroupCompatHC()
    {
        return;
    }

    public static void setMotionEventSplittingEnabled(android.view.ViewGroup p0, boolean p1)
    {
        p0.setMotionEventSplittingEnabled(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewGroupCompatIcs {

    ViewGroupCompatIcs()
    {
        return;
    }

    public static boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return p1.onRequestSendAccessibilityEvent(p2, p3);
    }
}
package android.support.v4.view;
 class ViewGroupCompatJellybeanMR2 {

    ViewGroupCompatJellybeanMR2()
    {
        return;
    }

    public static int getLayoutMode(android.view.ViewGroup p1)
    {
        return p1.getLayoutMode();
    }

    public static void setLayoutMode(android.view.ViewGroup p0, int p1)
    {
        p0.setLayoutMode(p1);
        return;
    }
}
package android.support.v4.view;
 class ViewGroupCompatLollipop {

    ViewGroupCompatLollipop()
    {
        return;
    }

    public static int getNestedScrollAxes(android.view.ViewGroup p1)
    {
        return p1.getNestedScrollAxes();
    }

    public static boolean isTransitionGroup(android.view.ViewGroup p1)
    {
        return p1.isTransitionGroup();
    }

    public static void setTransitionGroup(android.view.ViewGroup p0, boolean p1)
    {
        p0.setTransitionGroup(p1);
        return;
    }
}
package android.support.v4.view;
final class ViewPager$1 implements java.util.Comparator {

    ViewPager$1()
    {
        return;
    }

    public int compare(android.support.v4.view.ViewPager$ItemInfo p3, android.support.v4.view.ViewPager$ItemInfo p4)
    {
        return (p3.position - p4.position);
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((android.support.v4.view.ViewPager$ItemInfo) p2), ((android.support.v4.view.ViewPager$ItemInfo) p3));
    }
}
package android.support.v4.view;
final class ViewPager$2 implements android.view.animation.Interpolator {

    ViewPager$2()
    {
        return;
    }

    public float getInterpolation(float p3)
    {
        float v3_1 = (p3 - 1065353216);
        return (((((v3_1 * v3_1) * v3_1) * v3_1) * v3_1) + 1065353216);
    }
}
package android.support.v4.view;
 class ViewPager$3 implements java.lang.Runnable {
    final synthetic android.support.v4.view.ViewPager this$0;

    ViewPager$3(android.support.v4.view.ViewPager p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.setScrollState(0);
        this.this$0.populate();
        return;
    }
}
package android.support.v4.view;
public interface annotation ViewPager$DecorView implements java.lang.annotation.Annotation {
}
package android.support.v4.view;
 class ViewPager$ItemInfo {
    Object object;
    float offset;
    int position;
    boolean scrolling;
    float widthFactor;

    ViewPager$ItemInfo()
    {
        return;
    }
}
package android.support.v4.view;
public class ViewPager$LayoutParams extends android.view.ViewGroup$LayoutParams {
    int childIndex;
    public int gravity;
    public boolean isDecor;
    boolean needsMeasure;
    int position;
    float widthFactor;

    public ViewPager$LayoutParams()
    {
        super(-1, -1);
        super.widthFactor = 0;
        return;
    }

    public ViewPager$LayoutParams(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        super.widthFactor = 0;
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, android.support.v4.view.ViewPager.LAYOUT_ATTRS);
        super.gravity = v0.getInteger(0, 48);
        v0.recycle();
        return;
    }
}
package android.support.v4.view;
public interface ViewPager$OnAdapterChangeListener {

    public abstract void onAdapterChanged();
}
package android.support.v4.view;
public interface ViewPager$OnPageChangeListener {

    public abstract void onPageScrollStateChanged();

    public abstract void onPageScrolled();

    public abstract void onPageSelected();
}
package android.support.v4.view;
public interface ViewPager$PageTransformer {

    public abstract void transformPage();
}
package android.support.v4.view;
 class ViewPager$PagerObserver extends android.database.DataSetObserver {
    final synthetic android.support.v4.view.ViewPager this$0;

    ViewPager$PagerObserver(android.support.v4.view.ViewPager p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onChanged()
    {
        this.this$0.dataSetChanged();
        return;
    }

    public void onInvalidated()
    {
        this.this$0.dataSetChanged();
        return;
    }
}
package android.support.v4.view;
 class ViewPager$ViewPositionComparator implements java.util.Comparator {

    ViewPager$ViewPositionComparator()
    {
        return;
    }

    public int compare(android.view.View p5, android.view.View p6)
    {
        int v2_0;
        android.support.v4.view.ViewPager$LayoutParams v0_1 = ((android.support.v4.view.ViewPager$LayoutParams) p5.getLayoutParams());
        android.support.v4.view.ViewPager$LayoutParams v1_1 = ((android.support.v4.view.ViewPager$LayoutParams) p6.getLayoutParams());
        if (v0_1.isDecor == v1_1.isDecor) {
            v2_0 = (v0_1.position - v1_1.position);
        } else {
            if (!v0_1.isDecor) {
                v2_0 = -1;
            } else {
                v2_0 = 1;
            }
        }
        return v2_0;
    }

    public bridge synthetic int compare(Object p2, Object p3)
    {
        return this.compare(((android.view.View) p2), ((android.view.View) p3));
    }
}
package android.support.v4.view;
public class ViewPager extends android.view.ViewGroup {
    private static final int CLOSE_ENOUGH = 2;
    private static final java.util.Comparator COMPARATOR = None;
    private static final boolean DEBUG = False;
    private static final int DEFAULT_GUTTER_SIZE = 16;
    private static final int DEFAULT_OFFSCREEN_PAGES = 1;
    private static final int DRAW_ORDER_DEFAULT = 0;
    private static final int DRAW_ORDER_FORWARD = 1;
    private static final int DRAW_ORDER_REVERSE = 2;
    private static final int INVALID_POINTER = 255;
    static final int[] LAYOUT_ATTRS = None;
    private static final int MAX_SETTLE_DURATION = 600;
    private static final int MIN_DISTANCE_FOR_FLING = 25;
    private static final int MIN_FLING_VELOCITY = 400;
    public static final int SCROLL_STATE_DRAGGING = 1;
    public static final int SCROLL_STATE_IDLE = 0;
    public static final int SCROLL_STATE_SETTLING = 2;
    private static final String TAG = "ViewPager";
    private static final boolean USE_CACHE;
    private static final android.view.animation.Interpolator sInterpolator;
    private static final android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator;
    private int mActivePointerId;
    android.support.v4.view.PagerAdapter mAdapter;
    private java.util.List mAdapterChangeListeners;
    private int mBottomPageBounds;
    private boolean mCalledSuper;
    private int mChildHeightMeasureSpec;
    private int mChildWidthMeasureSpec;
    private int mCloseEnough;
    int mCurItem;
    private int mDecorChildCount;
    private int mDefaultGutterSize;
    private int mDrawingOrder;
    private java.util.ArrayList mDrawingOrderedChildren;
    private final Runnable mEndScrollRunnable;
    private int mExpectedAdapterCount;
    private long mFakeDragBeginTime;
    private boolean mFakeDragging;
    private boolean mFirstLayout;
    private float mFirstOffset;
    private int mFlingDistance;
    private int mGutterSize;
    private boolean mInLayout;
    private float mInitialMotionX;
    private float mInitialMotionY;
    private android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener;
    private boolean mIsBeingDragged;
    private boolean mIsScrollStarted;
    private boolean mIsUnableToDrag;
    private final java.util.ArrayList mItems;
    private float mLastMotionX;
    private float mLastMotionY;
    private float mLastOffset;
    private android.support.v4.widget.EdgeEffectCompat mLeftEdge;
    private android.graphics.drawable.Drawable mMarginDrawable;
    private int mMaximumVelocity;
    private int mMinimumVelocity;
    private boolean mNeedCalculatePageOffsets;
    private android.support.v4.view.ViewPager$PagerObserver mObserver;
    private int mOffscreenPageLimit;
    private android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener;
    private java.util.List mOnPageChangeListeners;
    private int mPageMargin;
    private android.support.v4.view.ViewPager$PageTransformer mPageTransformer;
    private int mPageTransformerLayerType;
    private boolean mPopulatePending;
    private android.os.Parcelable mRestoredAdapterState;
    private ClassLoader mRestoredClassLoader;
    private int mRestoredCurItem;
    private android.support.v4.widget.EdgeEffectCompat mRightEdge;
    private int mScrollState;
    private android.widget.Scroller mScroller;
    private boolean mScrollingCacheEnabled;
    private reflect.Method mSetChildrenDrawingOrderEnabled;
    private final android.support.v4.view.ViewPager$ItemInfo mTempItem;
    private final android.graphics.Rect mTempRect;
    private int mTopPageBounds;
    private int mTouchSlop;
    private android.view.VelocityTracker mVelocityTracker;

    static ViewPager()
    {
        android.support.v4.view.ViewPager$ViewPositionComparator v0_1 = new int[1];
        v0_1[0] = 16842931;
        android.support.v4.view.ViewPager.LAYOUT_ATTRS = v0_1;
        android.support.v4.view.ViewPager.COMPARATOR = new android.support.v4.view.ViewPager$1();
        android.support.v4.view.ViewPager.sInterpolator = new android.support.v4.view.ViewPager$2();
        android.support.v4.view.ViewPager.sPositionComparator = new android.support.v4.view.ViewPager$ViewPositionComparator();
        return;
    }

    public ViewPager(android.content.Context p6)
    {
        super(p6);
        super.mItems = new java.util.ArrayList();
        super.mTempItem = new android.support.v4.view.ViewPager$ItemInfo();
        super.mTempRect = new android.graphics.Rect();
        super.mRestoredCurItem = -1;
        super.mRestoredAdapterState = 0;
        super.mRestoredClassLoader = 0;
        super.mFirstOffset = -8388609;
        super.mLastOffset = 2139095039;
        super.mOffscreenPageLimit = 1;
        super.mActivePointerId = -1;
        super.mFirstLayout = 1;
        super.mNeedCalculatePageOffsets = 0;
        super.mEndScrollRunnable = new android.support.v4.view.ViewPager$3(super);
        super.mScrollState = 0;
        super.initViewPager();
        return;
    }

    public ViewPager(android.content.Context p6, android.util.AttributeSet p7)
    {
        super(p6, p7);
        super.mItems = new java.util.ArrayList();
        super.mTempItem = new android.support.v4.view.ViewPager$ItemInfo();
        super.mTempRect = new android.graphics.Rect();
        super.mRestoredCurItem = -1;
        super.mRestoredAdapterState = 0;
        super.mRestoredClassLoader = 0;
        super.mFirstOffset = -8388609;
        super.mLastOffset = 2139095039;
        super.mOffscreenPageLimit = 1;
        super.mActivePointerId = -1;
        super.mFirstLayout = 1;
        super.mNeedCalculatePageOffsets = 0;
        super.mEndScrollRunnable = new android.support.v4.view.ViewPager$3(super);
        super.mScrollState = 0;
        super.initViewPager();
        return;
    }

    private void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo p15, int p16, android.support.v4.view.ViewPager$ItemInfo p17)
    {
        int v6;
        int v1 = this.mAdapter.getCount();
        int v11 = this.getClientWidth();
        if (v11 <= 0) {
            v6 = 0;
        } else {
            v6 = (((float) this.mPageMargin) / ((float) v11));
        }
        if (p17 != null) {
            int v8 = p17.position;
            if (v8 >= p15.position) {
                if (v8 > p15.position) {
                    int v5_1 = (this.mItems.size() - 1);
                    float v7_3 = p17.offset;
                    int v9_3 = (v8 - 1);
                    while ((v9_3 >= p15.position) && (v5_1 >= 0)) {
                        android.support.v4.view.ViewPager$ItemInfo v3_8 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_1));
                        while ((v9_3 < v3_8.position) && (v5_1 > 0)) {
                            v5_1--;
                            v3_8 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_1));
                        }
                        while (v9_3 > v3_8.position) {
                            v7_3 -= (this.mAdapter.getPageWidth(v9_3) + v6);
                            v9_3--;
                        }
                        v7_3 -= (v3_8.widthFactor + v6);
                        v3_8.offset = v7_3;
                        v9_3--;
                    }
                }
            } else {
                int v5_0 = 0;
                float v7_2 = ((p17.offset + p17.widthFactor) + v6);
                int v9_2 = (v8 + 1);
                while ((v9_2 <= p15.position) && (v5_0 < this.mItems.size())) {
                    android.support.v4.view.ViewPager$ItemInfo v3_5 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_0));
                    while ((v9_2 > v3_5.position) && (v5_0 < (this.mItems.size() - 1))) {
                        v5_0++;
                        v3_5 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5_0));
                    }
                    while (v9_2 < v3_5.position) {
                        v7_2 += (this.mAdapter.getPageWidth(v9_2) + v6);
                        v9_2++;
                    }
                    v3_5.offset = v7_2;
                    v7_2 += (v3_5.widthFactor + v6);
                    v9_2++;
                }
            }
        }
        float v12_56;
        int v4 = this.mItems.size();
        float v7_1 = p15.offset;
        int v9_1 = (p15.position - 1);
        if (p15.position != 0) {
            v12_56 = -8388609;
        } else {
            v12_56 = p15.offset;
        }
        float v12_59;
        this.mFirstOffset = v12_56;
        if (p15.position != (v1 - 1)) {
            v12_59 = 2139095039;
        } else {
            v12_59 = ((p15.offset + p15.widthFactor) - 1065353216);
        }
        this.mLastOffset = v12_59;
        int v2_1 = (p16 - 1);
        while (v2_1 >= 0) {
            android.support.v4.view.ViewPager$ItemInfo v3_3 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v2_1));
            while (v9_1 > v3_3.position) {
                int v10_1 = (v9_1 - 1);
                v7_1 -= (this.mAdapter.getPageWidth(v9_1) + v6);
                v9_1 = v10_1;
            }
            v7_1 -= (v3_3.widthFactor + v6);
            v3_3.offset = v7_1;
            if (v3_3.position == 0) {
                this.mFirstOffset = v7_1;
            }
            v2_1--;
            v9_1--;
        }
        float v7_0 = ((p15.offset + p15.widthFactor) + v6);
        int v9_0 = (p15.position + 1);
        int v2_0 = (p16 + 1);
        while (v2_0 < v4) {
            android.support.v4.view.ViewPager$ItemInfo v3_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v2_0));
            while (v9_0 < v3_1.position) {
                int v10_0 = (v9_0 + 1);
                v7_0 += (this.mAdapter.getPageWidth(v9_0) + v6);
                v9_0 = v10_0;
            }
            if (v3_1.position == (v1 - 1)) {
                this.mLastOffset = ((v3_1.widthFactor + v7_0) - 1065353216);
            }
            v3_1.offset = v7_0;
            v7_0 += (v3_1.widthFactor + v6);
            v2_0++;
            v9_0++;
        }
        this.mNeedCalculatePageOffsets = 0;
        return;
    }

    private void completeScroll(boolean p12)
    {
        int v2;
        int v5 = 1;
        if (this.mScrollState != 2) {
            v2 = 0;
        } else {
            v2 = 1;
        }
        if (v2 != 0) {
            this.setScrollingCacheEnabled(0);
            if (this.mScroller.isFinished()) {
                v5 = 0;
            }
            if (v5 != 0) {
                this.mScroller.abortAnimation();
                int v3 = this.getScrollX();
                int v4 = this.getScrollY();
                int v6 = this.mScroller.getCurrX();
                int v7 = this.mScroller.getCurrY();
                if ((v3 != v6) || (v4 != v7)) {
                    this.scrollTo(v6, v7);
                    if (v6 != v3) {
                        this.pageScrolled(v6);
                    }
                }
            }
        }
        this.mPopulatePending = 0;
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            android.support.v4.view.ViewPager$ItemInfo v1_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            if (v1_1.scrolling) {
                v2 = 1;
                v1_1.scrolling = 0;
            }
            v0++;
        }
        if (v2 != 0) {
            if (!p12) {
                this.mEndScrollRunnable.run();
            } else {
                android.support.v4.view.ViewCompat.postOnAnimation(this, this.mEndScrollRunnable);
            }
        }
        return;
    }

    private int determineTargetPage(int p7, float p8, int p9, int p10)
    {
        if ((Math.abs(p10) <= this.mFlingDistance) || (Math.abs(p9) <= this.mMinimumVelocity)) {
            int v3;
            if (p7 < this.mCurItem) {
                v3 = 1058642330;
            } else {
                v3 = 1053609165;
            }
            int v2 = (p7 + ((int) (p8 + v3)));
        } else {
            if (p9 <= 0) {
                v2 = (p7 + 1);
            } else {
                v2 = p7;
            }
        }
        if (this.mItems.size() > 0) {
            v2 = Math.max(((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(0)).position, Math.min(v2, ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get((this.mItems.size() - 1))).position));
        }
        return v2;
    }

    private void dispatchOnPageScrolled(int p5, float p6, int p7)
    {
        if (this.mOnPageChangeListener != null) {
            this.mOnPageChangeListener.onPageScrolled(p5, p6, p7);
        }
        if (this.mOnPageChangeListeners != null) {
            int v0 = 0;
            int v2 = this.mOnPageChangeListeners.size();
            while (v0 < v2) {
                android.support.v4.view.ViewPager$OnPageChangeListener v1_1 = ((android.support.v4.view.ViewPager$OnPageChangeListener) this.mOnPageChangeListeners.get(v0));
                if (v1_1 != null) {
                    v1_1.onPageScrolled(p5, p6, p7);
                }
                v0++;
            }
        }
        if (this.mInternalPageChangeListener != null) {
            this.mInternalPageChangeListener.onPageScrolled(p5, p6, p7);
        }
        return;
    }

    private void dispatchOnPageSelected(int p5)
    {
        if (this.mOnPageChangeListener != null) {
            this.mOnPageChangeListener.onPageSelected(p5);
        }
        if (this.mOnPageChangeListeners != null) {
            int v0 = 0;
            int v2 = this.mOnPageChangeListeners.size();
            while (v0 < v2) {
                android.support.v4.view.ViewPager$OnPageChangeListener v1_1 = ((android.support.v4.view.ViewPager$OnPageChangeListener) this.mOnPageChangeListeners.get(v0));
                if (v1_1 != null) {
                    v1_1.onPageSelected(p5);
                }
                v0++;
            }
        }
        if (this.mInternalPageChangeListener != null) {
            this.mInternalPageChangeListener.onPageSelected(p5);
        }
        return;
    }

    private void dispatchOnScrollStateChanged(int p5)
    {
        if (this.mOnPageChangeListener != null) {
            this.mOnPageChangeListener.onPageScrollStateChanged(p5);
        }
        if (this.mOnPageChangeListeners != null) {
            int v0 = 0;
            int v2 = this.mOnPageChangeListeners.size();
            while (v0 < v2) {
                android.support.v4.view.ViewPager$OnPageChangeListener v1_1 = ((android.support.v4.view.ViewPager$OnPageChangeListener) this.mOnPageChangeListeners.get(v0));
                if (v1_1 != null) {
                    v1_1.onPageScrollStateChanged(p5);
                }
                v0++;
            }
        }
        if (this.mInternalPageChangeListener != null) {
            this.mInternalPageChangeListener.onPageScrollStateChanged(p5);
        }
        return;
    }

    private void enableLayers(boolean p6)
    {
        int v0 = this.getChildCount();
        int v1 = 0;
        while (v1 < v0) {
            int v2;
            if (!p6) {
                v2 = 0;
            } else {
                v2 = this.mPageTransformerLayerType;
            }
            android.support.v4.view.ViewCompat.setLayerType(this.getChildAt(v1), v2, 0);
            v1++;
        }
        return;
    }

    private void endDrag()
    {
        this.mIsBeingDragged = 0;
        this.mIsUnableToDrag = 0;
        if (this.mVelocityTracker != null) {
            this.mVelocityTracker.recycle();
            this.mVelocityTracker = 0;
        }
        return;
    }

    private android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect p5, android.view.View p6)
    {
        if (p5 == null) {
            p5 = new android.graphics.Rect();
        }
        if (p6 != null) {
            p5.left = p6.getLeft();
            p5.right = p6.getRight();
            p5.top = p6.getTop();
            p5.bottom = p6.getBottom();
            android.view.ViewParent v1 = p6.getParent();
            while (((v1 instanceof android.view.ViewGroup)) && (v1 != this)) {
                android.view.ViewGroup v0_1 = ((android.view.ViewGroup) v1);
                p5.left = (p5.left + v0_1.getLeft());
                p5.right = (p5.right + v0_1.getRight());
                p5.top = (p5.top + v0_1.getTop());
                p5.bottom = (p5.bottom + v0_1.getBottom());
                v1 = v0_1.getParent();
            }
        } else {
            p5.set(0, 0, 0, 0);
        }
        return p5;
    }

    private int getClientWidth()
    {
        return ((this.getMeasuredWidth() - this.getPaddingLeft()) - this.getPaddingRight());
    }

    private android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition()
    {
        int v11;
        float v8 = 0;
        int v12 = this.getClientWidth();
        if (v12 <= 0) {
            v11 = 0;
        } else {
            v11 = (((float) this.getScrollX()) / ((float) v12));
        }
        if (v12 > 0) {
            v8 = (((float) this.mPageMargin) / ((float) v12));
        }
        int v5 = -1;
        float v4 = 0;
        float v6 = 0;
        int v0 = 1;
        android.support.v4.view.ViewPager$ItemInfo v3 = 0;
        int v1 = 0;
        while (v1 < this.mItems.size()) {
            android.support.v4.view.ViewPager$ItemInfo v2_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v1));
            if ((v0 == 0) && (v2_1.position != (v5 + 1))) {
                v2_1 = this.mTempItem;
                v2_1.offset = ((v4 + v6) + v8);
                v2_1.position = (v5 + 1);
                v2_1.widthFactor = this.mAdapter.getPageWidth(v2_1.position);
                v1--;
            }
            float v9 = v2_1.offset;
            if ((v0 == 0) && (v11 < v9)) {
                break;
            }
            if ((v11 >= ((v2_1.widthFactor + v9) + v8)) && (v1 != (this.mItems.size() - 1))) {
                v0 = 0;
                v5 = v2_1.position;
                v4 = v9;
                v6 = v2_1.widthFactor;
                v3 = v2_1;
                v1++;
            } else {
                v3 = v2_1;
                break;
            }
        }
        return v3;
    }

    private static boolean isDecorView(android.view.View p2)
    {
        int v1_2;
        if (p2.getClass().getAnnotation(android.support.v4.view.ViewPager$DecorView) == null) {
            v1_2 = 0;
        } else {
            v1_2 = 1;
        }
        return v1_2;
    }

    private boolean isGutterDrag(float p4, float p5)
    {
        if (((p4 >= ((float) this.mGutterSize)) || (p5 <= 0)) && ((p4 <= ((float) (this.getWidth() - this.mGutterSize))) || (p5 >= 0))) {
            int v0_5 = 0;
        } else {
            v0_5 = 1;
        }
        return v0_5;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent p5)
    {
        int v2 = android.support.v4.view.MotionEventCompat.getActionIndex(p5);
        if (p5.getPointerId(v2) == this.mActivePointerId) {
            int v0;
            if (v2 != 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            this.mLastMotionX = p5.getX(v0);
            this.mActivePointerId = p5.getPointerId(v0);
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.clear();
            }
        }
        return;
    }

    private boolean pageScrolled(int p11)
    {
        IllegalStateException v7_0 = 0;
        if (this.mItems.size() != 0) {
            android.support.v4.view.ViewPager$ItemInfo v1 = this.infoForCurrentScrollPosition();
            int v5 = this.getClientWidth();
            int v0 = v1.position;
            float v4 = (((((float) p11) / ((float) v5)) - v1.offset) / (v1.widthFactor + (((float) this.mPageMargin) / ((float) v5))));
            int v3 = ((int) (((float) (v5 + this.mPageMargin)) * v4));
            this.mCalledSuper = 0;
            this.onPageScrolled(v0, v4, v3);
            if (this.mCalledSuper) {
                v7_0 = 1;
            } else {
                throw new IllegalStateException("onPageScrolled did not call superclass implementation");
            }
        } else {
            if (!this.mFirstLayout) {
                this.mCalledSuper = 0;
                this.onPageScrolled(0, 0, 0);
                if (!this.mCalledSuper) {
                    throw new IllegalStateException("onPageScrolled did not call superclass implementation");
                }
            }
        }
        return v7_0;
    }

    private boolean performDrag(float p18)
    {
        boolean v7 = 0;
        float v2 = (this.mLastMotionX - p18);
        this.mLastMotionX = p18;
        float v12 = (((float) this.getScrollX()) + v2);
        int v13 = this.getClientWidth();
        float v6 = (((float) v13) * this.mFirstOffset);
        float v11 = (((float) v13) * this.mLastOffset);
        int v5 = 1;
        int v10 = 1;
        android.support.v4.view.ViewPager$ItemInfo v3_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(0));
        android.support.v4.view.ViewPager$ItemInfo v4_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get((this.mItems.size() - 1)));
        if (v3_1.position != 0) {
            v5 = 0;
            v6 = (v3_1.offset * ((float) v13));
        }
        if (v4_1.position != (this.mAdapter.getCount() - 1)) {
            v10 = 0;
            v11 = (v4_1.offset * ((float) v13));
        }
        if (v12 >= v6) {
            if (v12 > v11) {
                if (v10 != 0) {
                    v7 = this.mRightEdge.onPull((Math.abs((v12 - v11)) / ((float) v13)));
                }
                v12 = v11;
            }
        } else {
            if (v5 != 0) {
                v7 = this.mLeftEdge.onPull((Math.abs((v6 - v12)) / ((float) v13)));
            }
            v12 = v6;
        }
        this.mLastMotionX = (this.mLastMotionX + (v12 - ((float) ((int) v12))));
        this.scrollTo(((int) v12), this.getScrollY());
        this.pageScrolled(((int) v12));
        return v7;
    }

    private void recomputeScrollPosition(int p12, int p13, int p14, int p15)
    {
        if ((p13 <= 0) || (this.mItems.isEmpty())) {
            int v4;
            android.support.v4.view.ViewPager$ItemInfo v0 = this.infoForPosition(this.mCurItem);
            if (v0 == null) {
                v4 = 0;
            } else {
                v4 = Math.min(v0.offset, this.mLastOffset);
            }
            int v5 = ((int) (((float) ((p12 - this.getPaddingLeft()) - this.getPaddingRight())) * v4));
            if (v5 != this.getScrollX()) {
                this.completeScroll(0);
                this.scrollTo(v5, this.getScrollY());
            }
        } else {
            if (this.mScroller.isFinished()) {
                this.scrollTo(((int) (((float) (((p12 - this.getPaddingLeft()) - this.getPaddingRight()) + p14)) * (((float) this.getScrollX()) / ((float) (((p13 - this.getPaddingLeft()) - this.getPaddingRight()) + p15))))), this.getScrollY());
            } else {
                this.mScroller.setFinalX((this.getCurrentItem() * this.getClientWidth()));
            }
        }
        return;
    }

    private void removeNonDecorViews()
    {
        int v1 = 0;
        while (v1 < this.getChildCount()) {
            if (!((android.support.v4.view.ViewPager$LayoutParams) this.getChildAt(v1).getLayoutParams()).isDecor) {
                this.removeViewAt(v1);
                v1--;
            }
            v1++;
        }
        return;
    }

    private void requestParentDisallowInterceptTouchEvent(boolean p2)
    {
        android.view.ViewParent v0 = this.getParent();
        if (v0 != null) {
            v0.requestDisallowInterceptTouchEvent(p2);
        }
        return;
    }

    private boolean resetTouch()
    {
        this.mActivePointerId = -1;
        this.endDrag();
        return (this.mLeftEdge.onRelease() | this.mRightEdge.onRelease());
    }

    private void scrollToItem(int p9, boolean p10, int p11, boolean p12)
    {
        android.support.v4.view.ViewPager$ItemInfo v0 = this.infoForPosition(p9);
        int v1 = 0;
        if (v0 != null) {
            v1 = ((int) (((float) this.getClientWidth()) * Math.max(this.mFirstOffset, Math.min(v0.offset, this.mLastOffset))));
        }
        if (!p10) {
            if (p12) {
                this.dispatchOnPageSelected(p9);
            }
            this.completeScroll(0);
            this.scrollTo(v1, 0);
            this.pageScrolled(v1);
        } else {
            this.smoothScrollTo(v1, 0, p11);
            if (p12) {
                this.dispatchOnPageSelected(p9);
            }
        }
        return;
    }

    private void setScrollingCacheEnabled(boolean p2)
    {
        if (this.mScrollingCacheEnabled != p2) {
            this.mScrollingCacheEnabled = p2;
        }
        return;
    }

    private void sortChildDrawingOrder()
    {
        if (this.mDrawingOrder != 0) {
            if (this.mDrawingOrderedChildren != null) {
                this.mDrawingOrderedChildren.clear();
            } else {
                this.mDrawingOrderedChildren = new java.util.ArrayList();
            }
            int v1 = this.getChildCount();
            int v2 = 0;
            while (v2 < v1) {
                this.mDrawingOrderedChildren.add(this.getChildAt(v2));
                v2++;
            }
            java.util.Collections.sort(this.mDrawingOrderedChildren, android.support.v4.view.ViewPager.sPositionComparator);
        }
        return;
    }

    public void addFocusables(java.util.ArrayList p8, int p9, int p10)
    {
        int v2 = p8.size();
        int v1 = this.getDescendantFocusability();
        if (v1 != 393216) {
            int v3 = 0;
            while (v3 < this.getChildCount()) {
                android.view.View v0 = this.getChildAt(v3);
                if (v0.getVisibility() == 0) {
                    android.support.v4.view.ViewPager$ItemInfo v4 = this.infoForChild(v0);
                    if ((v4 != null) && (v4.position == this.mCurItem)) {
                        v0.addFocusables(p8, p9, p10);
                    }
                }
                v3++;
            }
        }
        if (((v1 != 262144) || (v2 == p8.size())) && (((this.isFocusable()) && (((p10 & 1) != 1) || ((!this.isInTouchMode()) || (this.isFocusableInTouchMode())))) && (p8 != null))) {
            p8.add(this);
        }
        return;
    }

    android.support.v4.view.ViewPager$ItemInfo addNewItem(int p3, int p4)
    {
        android.support.v4.view.ViewPager$ItemInfo v0_1 = new android.support.v4.view.ViewPager$ItemInfo();
        v0_1.position = p3;
        v0_1.object = this.mAdapter.instantiateItem(this, p3);
        v0_1.widthFactor = this.mAdapter.getPageWidth(p3);
        if ((p4 >= 0) && (p4 < this.mItems.size())) {
            this.mItems.add(p4, v0_1);
        } else {
            this.mItems.add(v0_1);
        }
        return v0_1;
    }

    public void addOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener p2)
    {
        if (this.mAdapterChangeListeners == null) {
            this.mAdapterChangeListeners = new java.util.ArrayList();
        }
        this.mAdapterChangeListeners.add(p2);
        return;
    }

    public void addOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p2)
    {
        if (this.mOnPageChangeListeners == null) {
            this.mOnPageChangeListeners = new java.util.ArrayList();
        }
        this.mOnPageChangeListeners.add(p2);
        return;
    }

    public void addTouchables(java.util.ArrayList p6)
    {
        int v1 = 0;
        while (v1 < this.getChildCount()) {
            android.view.View v0 = this.getChildAt(v1);
            if (v0.getVisibility() == 0) {
                android.support.v4.view.ViewPager$ItemInfo v2 = this.infoForChild(v0);
                if ((v2 != null) && (v2.position == this.mCurItem)) {
                    v0.addTouchables(p6);
                }
            }
            v1++;
        }
        return;
    }

    public void addView(android.view.View p4, int p5, android.view.ViewGroup$LayoutParams p6)
    {
        if (!this.checkLayoutParams(p6)) {
            p6 = this.generateLayoutParams(p6);
        }
        ((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor = (((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor | android.support.v4.view.ViewPager.isDecorView(p4));
        if (!this.mInLayout) {
            super.addView(p4, p5, p6);
        } else {
            if ((((android.support.v4.view.ViewPager$LayoutParams) p6) == null) || (!((android.support.v4.view.ViewPager$LayoutParams) p6).isDecor)) {
                ((android.support.v4.view.ViewPager$LayoutParams) p6).needsMeasure = 1;
                this.addViewInLayout(p4, p5, p6);
            } else {
                throw new IllegalStateException("Cannot add pager decor view during layout");
            }
        }
        return;
    }

    public boolean arrowScroll(int p14)
    {
        int v1 = this.findFocus();
        if (v1 != this) {
            if (v1 != 0) {
                int v3 = 0;
                android.view.ViewParent v6_0 = v1.getParent();
                while ((v6_0 instanceof android.view.ViewGroup)) {
                    if (v6_0 != this) {
                        v6_0 = v6_0.getParent();
                    } else {
                        v3 = 1;
                        break;
                    }
                }
                if (v3 == 0) {
                    StringBuilder v7_1 = new StringBuilder();
                    v7_1.append(v1.getClass().getSimpleName());
                    android.view.ViewParent v6_1 = v1.getParent();
                    while ((v6_1 instanceof android.view.ViewGroup)) {
                        v7_1.append(" => ").append(v6_1.getClass().getSimpleName());
                        v6_1 = v6_1.getParent();
                    }
                    android.util.Log.e("ViewPager", new StringBuilder().append("arrowScroll tried to find focus based on non-child current focused view ").append(v7_1.toString()).toString());
                    v1 = 0;
                }
            }
        } else {
            v1 = 0;
        }
        boolean v2 = 0;
        android.view.View v4 = android.view.FocusFinder.getInstance().findNextFocus(this, v1, p14);
        if ((v4 == null) || (v4 == v1)) {
            if ((p14 != 17) && (p14 != 1)) {
                if ((p14 == 66) || (p14 == 2)) {
                    v2 = this.pageRight();
                }
            } else {
                v2 = this.pageLeft();
            }
        } else {
            if (p14 != 17) {
                if (p14 == 66) {
                    int v5_0 = this.getChildRectInPagerCoordinates(this.mTempRect, v4).left;
                    android.graphics.Rect vtmp15 = this.getChildRectInPagerCoordinates(this.mTempRect, v1);
                    if ((v1 == 0) || (v5_0 > vtmp15.left)) {
                        v2 = v4.requestFocus();
                    } else {
                        v2 = this.pageRight();
                    }
                }
            } else {
                int v5_1 = this.getChildRectInPagerCoordinates(this.mTempRect, v4).left;
                android.graphics.Rect vtmp7 = this.getChildRectInPagerCoordinates(this.mTempRect, v1);
                if ((v1 == 0) || (v5_1 < vtmp7.left)) {
                    v2 = v4.requestFocus();
                } else {
                    v2 = this.pageLeft();
                }
            }
        }
        if (v2) {
            this.playSoundEffect(android.view.SoundEffectConstants.getContantForFocusDirection(p14));
        }
        return v2;
    }

    public boolean beginFakeDrag()
    {
        int v4 = 0;
        if (!this.mIsBeingDragged) {
            this.mFakeDragging = 1;
            this.setScrollState(1);
            this.mLastMotionX = 0;
            this.mInitialMotionX = 0;
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.clear();
            } else {
                this.mVelocityTracker = android.view.VelocityTracker.obtain();
            }
            long v0 = android.os.SystemClock.uptimeMillis();
            android.view.MotionEvent v8 = android.view.MotionEvent.obtain(v0, v0, 0, 0, 0, 0);
            this.mVelocityTracker.addMovement(v8);
            v8.recycle();
            this.mFakeDragBeginTime = v0;
            v4 = 1;
        }
        return v4;
    }

    protected boolean canScroll(android.view.View p12, boolean p13, int p14, int p15, int p16)
    {
        int v0_3;
        if (!(p12 instanceof android.view.ViewGroup)) {
            if ((!p13) || (!android.support.v4.view.ViewCompat.canScrollHorizontally(p12, (- p14)))) {
                v0_3 = 0;
            } else {
                v0_3 = 1;
            }
        } else {
            int v9 = p12.getScrollX();
            int v10 = p12.getScrollY();
            int v8 = (((android.view.ViewGroup) p12).getChildCount() - 1);
            while (v8 >= 0) {
                android.view.View v1 = ((android.view.ViewGroup) p12).getChildAt(v8);
                if (((p15 + v9) < v1.getLeft()) || (((p15 + v9) >= v1.getRight()) || (((p16 + v10) < v1.getTop()) || (((p16 + v10) >= v1.getBottom()) || (!this.canScroll(v1, 1, p14, ((p15 + v9) - v1.getLeft()), ((p16 + v10) - v1.getTop()))))))) {
                    v8--;
                } else {
                    v0_3 = 1;
                }
            }
        }
        return v0_3;
    }

    public boolean canScrollHorizontally(int p7)
    {
        int v2 = 1;
        int v3 = 0;
        if (this.mAdapter != null) {
            int v1 = this.getClientWidth();
            int v0 = this.getScrollX();
            if (p7 >= 0) {
                if (p7 > 0) {
                    if (v0 >= ((int) (((float) v1) * this.mLastOffset))) {
                        v2 = 0;
                    }
                    v3 = v2;
                }
            } else {
                if (v0 <= ((int) (((float) v1) * this.mFirstOffset))) {
                    v2 = 0;
                }
                v3 = v2;
            }
        }
        return v3;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        if ((!(p2 instanceof android.support.v4.view.ViewPager$LayoutParams)) || (!super.checkLayoutParams(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void clearOnPageChangeListeners()
    {
        if (this.mOnPageChangeListeners != null) {
            this.mOnPageChangeListeners.clear();
        }
        return;
    }

    public void computeScroll()
    {
        this.mIsScrollStarted = 1;
        if ((this.mScroller.isFinished()) || (!this.mScroller.computeScrollOffset())) {
            this.completeScroll(1);
        } else {
            int v0 = this.getScrollX();
            int v1 = this.getScrollY();
            int v2 = this.mScroller.getCurrX();
            int v3 = this.mScroller.getCurrY();
            if ((v0 != v2) || (v1 != v3)) {
                this.scrollTo(v2, v3);
                if (!this.pageScrolled(v2)) {
                    this.mScroller.abortAnimation();
                    this.scrollTo(0, v3);
                }
            }
            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
        }
        return;
    }

    void dataSetChanged()
    {
        int v7;
        int v0 = this.mAdapter.getCount();
        this.mExpectedAdapterCount = v0;
        if ((this.mItems.size() >= ((this.mOffscreenPageLimit * 2) + 1)) || (this.mItems.size() >= v0)) {
            v7 = 0;
        } else {
            v7 = 1;
        }
        int v8 = this.mCurItem;
        int v5 = 0;
        int v3_0 = 0;
        while (v3_0 < this.mItems.size()) {
            android.support.v4.view.ViewPager$ItemInfo v4_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v3_0));
            int v9 = this.mAdapter.getItemPosition(v4_1.object);
            if (v9 != -1) {
                if (v9 != -2) {
                    if (v4_1.position != v9) {
                        if (v4_1.position == this.mCurItem) {
                            v8 = v9;
                        }
                        v4_1.position = v9;
                        v7 = 1;
                    }
                } else {
                    this.mItems.remove(v3_0);
                    v3_0--;
                    if (v5 == 0) {
                        this.mAdapter.startUpdate(this);
                        v5 = 1;
                    }
                    this.mAdapter.destroyItem(this, v4_1.position, v4_1.object);
                    v7 = 1;
                    if (this.mCurItem == v4_1.position) {
                        v8 = Math.max(0, Math.min(this.mCurItem, (v0 - 1)));
                        v7 = 1;
                    }
                }
            }
            v3_0++;
        }
        if (v5 != 0) {
            this.mAdapter.finishUpdate(this);
        }
        java.util.Collections.sort(this.mItems, android.support.v4.view.ViewPager.COMPARATOR);
        if (v7 != 0) {
            int v2 = this.getChildCount();
            int v3_1 = 0;
            while (v3_1 < v2) {
                android.support.v4.view.ViewPager$LayoutParams v6_1 = ((android.support.v4.view.ViewPager$LayoutParams) this.getChildAt(v3_1).getLayoutParams());
                if (!v6_1.isDecor) {
                    v6_1.widthFactor = 0;
                }
                v3_1++;
            }
            this.setCurrentItemInternal(v8, 0, 1);
            this.requestLayout();
        }
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        if ((!super.dispatchKeyEvent(p2)) && (!this.executeKeyEvent(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent p7)
    {
        int v4_4;
        if (p7.getEventType() != 4096) {
            int v1 = this.getChildCount();
            int v2 = 0;
            while (v2 < v1) {
                android.view.View v0 = this.getChildAt(v2);
                if (v0.getVisibility() == 0) {
                    android.support.v4.view.ViewPager$ItemInfo v3 = this.infoForChild(v0);
                    if ((v3 != null) && ((v3.position == this.mCurItem) && (v0.dispatchPopulateAccessibilityEvent(p7)))) {
                        v4_4 = 1;
                        return v4_4;
                    }
                }
                v2++;
            }
            v4_4 = 0;
        } else {
            v4_4 = super.dispatchPopulateAccessibilityEvent(p7);
        }
        return v4_4;
    }

    float distanceInfluenceForSnapDuration(float p5)
    {
        return ((float) Math.sin(((double) ((float) (((double) (p5 - 1056964608)) * 0.4712389167638204)))));
    }

    public void draw(android.graphics.Canvas p9)
    {
        super.draw(p9);
        int v1 = 0;
        int v2 = this.getOverScrollMode();
        if ((v2 != 0) && ((v2 != 1) || ((this.mAdapter == null) || (this.mAdapter.getCount() <= 1)))) {
            this.mLeftEdge.finish();
            this.mRightEdge.finish();
        } else {
            if (!this.mLeftEdge.isFinished()) {
                int v3_0 = p9.save();
                int v0_0 = ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom());
                int v4_0 = this.getWidth();
                p9.rotate(1132920832);
                p9.translate(((float) ((- v0_0) + this.getPaddingTop())), (this.mFirstOffset * ((float) v4_0)));
                this.mLeftEdge.setSize(v0_0, v4_0);
                v1 = (0 | this.mLeftEdge.draw(p9));
                p9.restoreToCount(v3_0);
            }
            if (!this.mRightEdge.isFinished()) {
                int v3_1 = p9.save();
                int v4_1 = this.getWidth();
                int v0_1 = ((this.getHeight() - this.getPaddingTop()) - this.getPaddingBottom());
                p9.rotate(1119092736);
                p9.translate(((float) (- this.getPaddingTop())), ((- (this.mLastOffset + 1065353216)) * ((float) v4_1)));
                this.mRightEdge.setSize(v0_1, v4_1);
                v1 |= this.mRightEdge.draw(p9);
                p9.restoreToCount(v3_1);
            }
        }
        if (v1 != 0) {
            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
        }
        return;
    }

    protected void drawableStateChanged()
    {
        super.drawableStateChanged();
        android.graphics.drawable.Drawable v0 = this.mMarginDrawable;
        if ((v0 != null) && (v0.isStateful())) {
            v0.setState(this.getDrawableState());
        }
        return;
    }

    public void endFakeDrag()
    {
        if (this.mFakeDragging) {
            if (this.mAdapter != null) {
                android.view.VelocityTracker v7 = this.mVelocityTracker;
                v7.computeCurrentVelocity(1000, ((float) this.mMaximumVelocity));
                int v2 = ((int) android.support.v4.view.VelocityTrackerCompat.getXVelocity(v7, this.mActivePointerId));
                this.mPopulatePending = 1;
                int v8 = this.getClientWidth();
                int v5 = this.getScrollX();
                android.support.v4.view.ViewPager$ItemInfo v1 = this.infoForCurrentScrollPosition();
                this.setCurrentItemInternal(this.determineTargetPage(v1.position, (((((float) v5) / ((float) v8)) - v1.offset) / v1.widthFactor), v2, ((int) (this.mLastMotionX - this.mInitialMotionX))), 1, 1, v2);
            }
            this.endDrag();
            this.mFakeDragging = 0;
            return;
        } else {
            throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
        }
    }

    public boolean executeKeyEvent(android.view.KeyEvent p5)
    {
        boolean v0 = 0;
        if (p5.getAction() == 0) {
            switch (p5.getKeyCode()) {
                case 21:
                    v0 = this.arrowScroll(17);
                    break;
                case 22:
                    v0 = this.arrowScroll(66);
                    break;
                case 61:
                    if (android.os.Build$VERSION.SDK_INT >= 11) {
                        if (!android.support.v4.view.KeyEventCompat.hasNoModifiers(p5)) {
                            if (android.support.v4.view.KeyEventCompat.hasModifiers(p5, 1)) {
                                v0 = this.arrowScroll(1);
                            }
                        } else {
                            v0 = this.arrowScroll(2);
                        }
                    }
                    break;
            }
        }
        return v0;
    }

    public void fakeDragBy(float p19)
    {
        if (this.mFakeDragging) {
            if (this.mAdapter != null) {
                this.mLastMotionX = (this.mLastMotionX + p19);
                float v16 = (((float) this.getScrollX()) - p19);
                int v17 = this.getClientWidth();
                float v13 = (((float) v17) * this.mFirstOffset);
                float v15 = (((float) v17) * this.mLastOffset);
                android.support.v4.view.ViewPager$ItemInfo v11_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(0));
                android.support.v4.view.ViewPager$ItemInfo v12_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get((this.mItems.size() - 1)));
                if (v11_1.position != 0) {
                    v13 = (v11_1.offset * ((float) v17));
                }
                if (v12_1.position != (this.mAdapter.getCount() - 1)) {
                    v15 = (v12_1.offset * ((float) v17));
                }
                if (v16 >= v13) {
                    if (v16 > v15) {
                        v16 = v15;
                    }
                } else {
                    v16 = v13;
                }
                this.mLastMotionX = (this.mLastMotionX + (v16 - ((float) ((int) v16))));
                this.scrollTo(((int) v16), this.getScrollY());
                this.pageScrolled(((int) v16));
                android.view.MotionEvent v10 = android.view.MotionEvent.obtain(this.mFakeDragBeginTime, android.os.SystemClock.uptimeMillis(), 2, this.mLastMotionX, 0, 0);
                this.mVelocityTracker.addMovement(v10);
                v10.recycle();
            }
            return;
        } else {
            throw new IllegalStateException("No fake drag in progress. Call beginFakeDrag first.");
        }
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.support.v4.view.ViewPager$LayoutParams();
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new android.support.v4.view.ViewPager$LayoutParams(this.getContext(), p3);
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        return this.generateDefaultLayoutParams();
    }

    public android.support.v4.view.PagerAdapter getAdapter()
    {
        return this.mAdapter;
    }

    protected int getChildDrawingOrder(int p5, int p6)
    {
        int v0;
        if (this.mDrawingOrder != 2) {
            v0 = p6;
        } else {
            v0 = ((p5 - 1) - p6);
        }
        return ((android.support.v4.view.ViewPager$LayoutParams) ((android.view.View) this.mDrawingOrderedChildren.get(v0)).getLayoutParams()).childIndex;
    }

    public int getCurrentItem()
    {
        return this.mCurItem;
    }

    public int getOffscreenPageLimit()
    {
        return this.mOffscreenPageLimit;
    }

    public int getPageMargin()
    {
        return this.mPageMargin;
    }

    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View p3)
    {
        while(true) {
            int v1_0;
            android.view.ViewParent v0 = p3.getParent();
            if (v0 == this) {
                v1_0 = this.infoForChild(p3);
            } else {
                if ((v0 == null) || (!(v0 instanceof android.view.View))) {
                    break;
                }
                p3 = ((android.view.View) v0);
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View p5)
    {
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            int v1_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            if (!this.mAdapter.isViewFromObject(p5, v1_0.object)) {
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int p4)
    {
        int v0 = 0;
        while (v0 < this.mItems.size()) {
            int v1_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v0));
            if (v1_0.position != p4) {
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    void initViewPager()
    {
        this.setWillNotDraw(0);
        this.setDescendantFocusability(262144);
        this.setFocusable(1);
        android.content.Context v1 = this.getContext();
        this.mScroller = new android.widget.Scroller(v1, android.support.v4.view.ViewPager.sInterpolator);
        android.view.ViewConfiguration v0 = android.view.ViewConfiguration.get(v1);
        float v2 = v1.getResources().getDisplayMetrics().density;
        this.mTouchSlop = v0.getScaledPagingTouchSlop();
        this.mMinimumVelocity = ((int) (1137180672 * v2));
        this.mMaximumVelocity = v0.getScaledMaximumFlingVelocity();
        this.mLeftEdge = new android.support.v4.widget.EdgeEffectCompat(v1);
        this.mRightEdge = new android.support.v4.widget.EdgeEffectCompat(v1);
        this.mFlingDistance = ((int) (1103626240 * v2));
        this.mCloseEnough = ((int) (1073741824 * v2));
        this.mDefaultGutterSize = ((int) (1098907648 * v2));
        android.support.v4.view.ViewCompat.setAccessibilityDelegate(this, new android.support.v4.view.ViewPager$MyAccessibilityDelegate(this));
        if (android.support.v4.view.ViewCompat.getImportantForAccessibility(this) == 0) {
            android.support.v4.view.ViewCompat.setImportantForAccessibility(this, 1);
        }
        android.support.v4.view.ViewCompat.setOnApplyWindowInsetsListener(this, new android.support.v4.view.ViewPager$4(this));
        return;
    }

    public boolean isFakeDragging()
    {
        return this.mFakeDragging;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.mFirstLayout = 1;
        return;
    }

    protected void onDetachedFromWindow()
    {
        this.removeCallbacks(this.mEndScrollRunnable);
        if ((this.mScroller != null) && (!this.mScroller.isFinished())) {
            this.mScroller.abortAnimation();
        }
        super.onDetachedFromWindow();
        return;
    }

    protected void onDraw(android.graphics.Canvas p19)
    {
        this = super.onDraw(p19);
        if ((this.mPageMargin > 0) && ((this.mMarginDrawable != null) && ((this.mItems.size() > 0) && (this.mAdapter != null)))) {
            int v10 = this.getScrollX();
            int v11 = this.getWidth();
            float v7 = (((float) this.mPageMargin) / ((float) v11));
            int v5 = 0;
            android.support.v4.view.ViewPager$ItemInfo v3_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(0));
            float v8 = v3_1.offset;
            int v4 = this.mItems.size();
            int v6 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get((v4 - 1))).position;
            int v9 = v3_1.position;
            while (v9 < v6) {
                while ((v9 > v3_1.position) && (v5 < v4)) {
                    v5++;
                    v3_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v5));
                }
                float v1;
                if (v9 != v3_1.position) {
                    float v12 = this.mAdapter.getPageWidth(v9);
                    v1 = ((v8 + v12) * ((float) v11));
                    v8 += (v12 + v7);
                } else {
                    v1 = ((v3_1.offset + v3_1.widthFactor) * ((float) v11));
                    v8 = ((v3_1.offset + v3_1.widthFactor) + v7);
                }
                if ((((float) this.mPageMargin) + v1) > ((float) v10)) {
                    this.mMarginDrawable.setBounds(Math.round(v1), this.mTopPageBounds, Math.round((((float) this.mPageMargin) + v1)), this.mBottomPageBounds);
                    this.mMarginDrawable.draw(p19);
                }
                if (v1 > ((float) (v10 + v11))) {
                    break;
                }
                v9++;
            }
        }
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p15)
    {
        int v0_22;
        int v6 = (p15.getAction() & 255);
        if ((v6 != 3) && (v6 != 1)) {
            if (v6 != 0) {
                if (!this.mIsBeingDragged) {
                    if (this.mIsUnableToDrag) {
                        v0_22 = 0;
                        return v0_22;
                    }
                } else {
                    v0_22 = 1;
                    return v0_22;
                }
            }
            switch (v6) {
                case 0:
                    int v0_58 = p15.getX();
                    this.mInitialMotionX = v0_58;
                    this.mLastMotionX = v0_58;
                    int v0_59 = p15.getY();
                    this.mInitialMotionY = v0_59;
                    this.mLastMotionY = v0_59;
                    this.mActivePointerId = p15.getPointerId(0);
                    this.mIsUnableToDrag = 0;
                    this.mIsScrollStarted = 1;
                    this.mScroller.computeScrollOffset();
                    if ((this.mScrollState != 2) || (Math.abs((this.mScroller.getFinalX() - this.mScroller.getCurrX())) <= this.mCloseEnough)) {
                        this.completeScroll(0);
                        this.mIsBeingDragged = 0;
                    } else {
                        this.mScroller.abortAnimation();
                        this.mPopulatePending = 0;
                        this.populate();
                        this.mIsBeingDragged = 1;
                        this.requestParentDisallowInterceptTouchEvent(1);
                        this.setScrollState(1);
                    }
                case 2:
                    int v7 = this.mActivePointerId;
                    if (v7 == -1) {
                    } else {
                        int v9 = p15.findPointerIndex(v7);
                        float v10 = p15.getX(v9);
                        float v8 = (v10 - this.mLastMotionX);
                        float v11 = Math.abs(v8);
                        float v12 = p15.getY(v9);
                        float v13 = Math.abs((v12 - this.mInitialMotionY));
                        if ((v8 == 0) || ((this.isGutterDrag(this.mLastMotionX, v8)) || (!this.canScroll(this, 0, ((int) v8), ((int) v10), ((int) v12))))) {
                            if ((v11 <= ((float) this.mTouchSlop)) || ((1056964608 * v11) <= v13)) {
                                if (v13 > ((float) this.mTouchSlop)) {
                                    this.mIsUnableToDrag = 1;
                                }
                            } else {
                                int v0_51;
                                this.mIsBeingDragged = 1;
                                this.requestParentDisallowInterceptTouchEvent(1);
                                this.setScrollState(1);
                                if (v8 <= 0) {
                                    v0_51 = (this.mInitialMotionX - ((float) this.mTouchSlop));
                                } else {
                                    v0_51 = (this.mInitialMotionX + ((float) this.mTouchSlop));
                                }
                                this.mLastMotionX = v0_51;
                                this.mLastMotionY = v12;
                                this.setScrollingCacheEnabled(1);
                            }
                            if ((!this.mIsBeingDragged) || (!this.performDrag(v10))) {
                            } else {
                                android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                            }
                        } else {
                            this.mLastMotionX = v10;
                            this.mLastMotionY = v12;
                            this.mIsUnableToDrag = 1;
                            v0_22 = 0;
                        }
                    }
                    break;
                case 6:
                    this.onSecondaryPointerUp(p15);
                    break;
            }
            if (this.mVelocityTracker == null) {
                this.mVelocityTracker = android.view.VelocityTracker.obtain();
            }
            this.mVelocityTracker.addMovement(p15);
            v0_22 = this.mIsBeingDragged;
        } else {
            this.resetTouch();
            v0_22 = 0;
        }
        return v0_22;
    }

    protected void onLayout(boolean p31, int p32, int p33, int p34, int p35)
    {
        int v9 = this.getChildCount();
        int v24 = (p34 - p32);
        int v11 = (p35 - p33);
        int v19 = this.getPaddingLeft();
        int v21 = this.getPaddingTop();
        int v20 = this.getPaddingRight();
        int v18 = this.getPaddingBottom();
        int v22 = this.getScrollX();
        int v10 = 0;
        int v14_1 = 0;
        while (v14_1 < v9) {
            android.view.View v5_0 = this.getChildAt(v14_1);
            if (v5_0.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v17_1 = ((android.support.v4.view.ViewPager$LayoutParams) v5_0.getLayoutParams());
                int v7 = 0;
                if (v17_1.isDecor) {
                    int v6_0;
                    int v23 = (v17_1.gravity & 112);
                    switch ((v17_1.gravity & 7)) {
                        case 1:
                            v6_0 = Math.max(((v24 - v5_0.getMeasuredWidth()) / 2), v19);
                            break;
                        case 2:
                        case 4:
                        default:
                            v6_0 = v19;
                            break;
                        case 3:
                            v6_0 = v19;
                            v19 += v5_0.getMeasuredWidth();
                            break;
                        case 5:
                            v6_0 = ((v24 - v20) - v5_0.getMeasuredWidth());
                            v20 += v5_0.getMeasuredWidth();
                            break;
                    }
                    int v7_0;
                    switch (v23) {
                        case 16:
                            v7_0 = Math.max(((v11 - v5_0.getMeasuredHeight()) / 2), v21);
                            break;
                        case 48:
                            v7_0 = v21;
                            v21 += v5_0.getMeasuredHeight();
                            break;
                        case 80:
                            v7_0 = ((v11 - v18) - v5_0.getMeasuredHeight());
                            v18 += v5_0.getMeasuredHeight();
                            break;
                        default:
                            v7_0 = v21;
                    }
                    int v6_1 = (v6_0 + v22);
                    v5_0.layout(v6_1, v7_0, (v5_0.getMeasuredWidth() + v6_1), (v5_0.getMeasuredHeight() + v7_0));
                    v10++;
                }
            }
            v14_1++;
        }
        int v8 = ((v24 - v19) - v20);
        int v14_0 = 0;
        while (v14_0 < v9) {
            android.view.View v5_1 = this.getChildAt(v14_0);
            if (v5_1.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v17_3 = ((android.support.v4.view.ViewPager$LayoutParams) v5_1.getLayoutParams());
                if (!v17_3.isDecor) {
                    android.support.v4.view.ViewPager$ItemInfo v15 = this.infoForChild(v5_1);
                    if (v15 != null) {
                        int v6_2 = (v19 + ((int) (((float) v8) * v15.offset)));
                        int v7_1 = v21;
                        if (v17_3.needsMeasure) {
                            v17_3.needsMeasure = 0;
                            v5_1.measure(android.view.View$MeasureSpec.makeMeasureSpec(((int) (((float) v8) * v17_3.widthFactor)), 1073741824), android.view.View$MeasureSpec.makeMeasureSpec(((v11 - v21) - v18), 1073741824));
                        }
                        v5_1.layout(v6_2, v7_1, (v5_1.getMeasuredWidth() + v6_2), (v5_1.getMeasuredHeight() + v7_1));
                    }
                }
            }
            v14_0++;
        }
        this.mTopPageBounds = v21;
        this.mBottomPageBounds = (v11 - v18);
        this.mDecorChildCount = v10;
        if (this.mFirstLayout) {
            this.scrollToItem(this.mCurItem, 0, 0, 0);
        }
        this.mFirstLayout = 0;
        return;
    }

    protected void onMeasure(int p24, int p25)
    {
        this.setMeasuredDimension(android.support.v4.view.ViewPager.getDefaultSize(0, p24), android.support.v4.view.ViewPager.getDefaultSize(0, p25));
        int v15 = this.getMeasuredWidth();
        this.mGutterSize = Math.min((v15 / 10), this.mDefaultGutterSize);
        int v5 = ((v15 - this.getPaddingLeft()) - this.getPaddingRight());
        int v4 = ((this.getMeasuredHeight() - this.getPaddingTop()) - this.getPaddingBottom());
        int v16_0 = this.getChildCount();
        int v12_1 = 0;
        while (v12_1 < v16_0) {
            android.view.View v3_0 = this.getChildAt(v12_1);
            if (v3_0.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v13_1 = ((android.support.v4.view.ViewPager$LayoutParams) v3_0.getLayoutParams());
                if ((v13_1 != null) && (v13_1.isDecor)) {
                    int v7;
                    int v11 = (v13_1.gravity & 7);
                    int v17 = (v13_1.gravity & 112);
                    int v18 = -2147483648;
                    int v8 = -2147483648;
                    if ((v17 != 48) && (v17 != 80)) {
                        v7 = 0;
                    } else {
                        v7 = 1;
                    }
                    if ((v11 != 3) && (v11 != 5)) {
                        int v6 = 0;
                    } else {
                        v6 = 1;
                    }
                    if (v7 == 0) {
                        if (v6 != 0) {
                            v8 = 1073741824;
                        }
                    } else {
                        v18 = 1073741824;
                    }
                    int v19 = v5;
                    int v9 = v4;
                    if (v13_1.width != -2) {
                        v18 = 1073741824;
                        if (v13_1.width != -1) {
                            v19 = v13_1.width;
                        }
                    }
                    if (v13_1.height != -2) {
                        v8 = 1073741824;
                        if (v13_1.height != -1) {
                            v9 = v13_1.height;
                        }
                    }
                    v3_0.measure(android.view.View$MeasureSpec.makeMeasureSpec(v19, v18), android.view.View$MeasureSpec.makeMeasureSpec(v9, v8));
                    if (v7 == 0) {
                        if (v6 != 0) {
                            v5 -= v3_0.getMeasuredWidth();
                        }
                    } else {
                        v4 -= v3_0.getMeasuredHeight();
                    }
                }
            }
            v12_1++;
        }
        this.mChildWidthMeasureSpec = android.view.View$MeasureSpec.makeMeasureSpec(v5, 1073741824);
        this.mChildHeightMeasureSpec = android.view.View$MeasureSpec.makeMeasureSpec(v4, 1073741824);
        this.mInLayout = 1;
        this.populate();
        this.mInLayout = 0;
        int v16_1 = this.getChildCount();
        int v12_0 = 0;
        while (v12_0 < v16_1) {
            android.view.View v3_1 = this.getChildAt(v12_0);
            if (v3_1.getVisibility() != 8) {
                android.support.v4.view.ViewPager$LayoutParams v13_3 = ((android.support.v4.view.ViewPager$LayoutParams) v3_1.getLayoutParams());
                if ((v13_3 == null) || (!v13_3.isDecor)) {
                    v3_1.measure(android.view.View$MeasureSpec.makeMeasureSpec(((int) (((float) v5) * v13_3.widthFactor)), 1073741824), this.mChildHeightMeasureSpec);
                }
            }
            v12_0++;
        }
        return;
    }

    protected void onPageScrolled(int p15, float p16, int p17)
    {
        if (this.mDecorChildCount > 0) {
            int v9_1 = this.getScrollX();
            int v7 = this.getPaddingLeft();
            int v8 = this.getPaddingRight();
            int v11 = this.getWidth();
            int v1_0 = this.getChildCount();
            int v5_0 = 0;
            while (v5_0 < v1_0) {
                android.view.View v0_1 = this.getChildAt(v5_0);
                android.support.v4.view.ViewPager$LayoutParams v6_3 = ((android.support.v4.view.ViewPager$LayoutParams) v0_1.getLayoutParams());
                if (v6_3.isDecor) {
                    int v2_0;
                    switch ((v6_3.gravity & 7)) {
                        case 1:
                            v2_0 = Math.max(((v11 - v0_1.getMeasuredWidth()) / 2), v7);
                            break;
                        case 2:
                        case 4:
                        default:
                            v2_0 = v7;
                            break;
                        case 3:
                            v2_0 = v7;
                            v7 += v0_1.getWidth();
                            break;
                        case 5:
                            v2_0 = ((v11 - v8) - v0_1.getMeasuredWidth());
                            v8 += v0_1.getMeasuredWidth();
                            break;
                    }
                    int v3 = ((v2_0 + v9_1) - v0_1.getLeft());
                    if (v3 != 0) {
                        v0_1.offsetLeftAndRight(v3);
                    }
                }
                v5_0++;
            }
        }
        void v14_1 = this.dispatchOnPageScrolled(p15, p16, p17);
        if (v14_1.mPageTransformer != null) {
            int v9_0 = v14_1.getScrollX();
            int v1_1 = v14_1.getChildCount();
            int v5_1 = 0;
            while (v5_1 < v1_1) {
                android.view.View v0_0 = v14_1.getChildAt(v5_1);
                if (!((android.support.v4.view.ViewPager$LayoutParams) v0_0.getLayoutParams()).isDecor) {
                    v14_1.mPageTransformer.transformPage(v0_0, (((float) (v0_0.getLeft() - v9_0)) / ((float) v14_1.getClientWidth())));
                }
                v5_1++;
            }
        }
        v14_1.mCalledSuper = 1;
        return;
    }

    protected boolean onRequestFocusInDescendants(int p10, android.graphics.Rect p11)
    {
        int v2;
        int v5;
        int v6;
        int v1 = this.getChildCount();
        if ((p10 & 2) == 0) {
            v6 = (v1 - 1);
            v5 = -1;
            v2 = -1;
        } else {
            v6 = 0;
            v5 = 1;
            v2 = v1;
        }
        int v3 = v6;
        while (v3 != v2) {
            android.view.View v0 = this.getChildAt(v3);
            if (v0.getVisibility() == 0) {
                android.support.v4.view.ViewPager$ItemInfo v4 = this.infoForChild(v0);
                if ((v4 != null) && ((v4.position == this.mCurItem) && (v0.requestFocus(p10, p11)))) {
                    int v7_0 = 1;
                    return v7_0;
                }
            }
            v3 += v5;
        }
        v7_0 = 0;
        return v7_0;
    }

    public void onRestoreInstanceState(android.os.Parcelable p5)
    {
        if ((p5 instanceof android.support.v4.view.ViewPager$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.view.ViewPager$SavedState) p5).getSuperState());
            if (this.mAdapter == null) {
                this.mRestoredCurItem = ((android.support.v4.view.ViewPager$SavedState) p5).position;
                this.mRestoredAdapterState = ((android.support.v4.view.ViewPager$SavedState) p5).adapterState;
                this.mRestoredClassLoader = ((android.support.v4.view.ViewPager$SavedState) p5).loader;
            } else {
                this.mAdapter.restoreState(((android.support.v4.view.ViewPager$SavedState) p5).adapterState, ((android.support.v4.view.ViewPager$SavedState) p5).loader);
                this.setCurrentItemInternal(((android.support.v4.view.ViewPager$SavedState) p5).position, 0, 1);
            }
        } else {
            super.onRestoreInstanceState(p5);
        }
        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.view.ViewPager$SavedState v0_1 = new android.support.v4.view.ViewPager$SavedState(super.onSaveInstanceState());
        v0_1.position = this.mCurItem;
        if (this.mAdapter != null) {
            v0_1.adapterState = this.mAdapter.saveState();
        }
        return v0_1;
    }

    protected void onSizeChanged(int p3, int p4, int p5, int p6)
    {
        super.onSizeChanged(p3, p4, p5, p6);
        if (p3 != p5) {
            this.recomputeScrollPosition(p3, p5, this.mPageMargin, this.mPageMargin);
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p30)
    {
        int v25_49;
        if (!this.mFakeDragging) {
            if ((p30.getAction() != 0) || (p30.getEdgeFlags() == 0)) {
                if ((this.mAdapter != null) && (this.mAdapter.getCount() != 0)) {
                    if (this.mVelocityTracker == null) {
                        this.mVelocityTracker = android.view.VelocityTracker.obtain();
                    }
                    this.mVelocityTracker.addMovement(p30);
                    int v12 = 0;
                    switch ((p30.getAction() & 255)) {
                        case 0:
                            this.mScroller.abortAnimation();
                            this.mPopulatePending = 0;
                            this.populate();
                            int v25_45 = p30.getX();
                            this.mInitialMotionX = v25_45;
                            this.mLastMotionX = v25_45;
                            int v25_46 = p30.getY();
                            this.mInitialMotionY = v25_46;
                            this.mLastMotionY = v25_46;
                            this.mActivePointerId = p30.getPointerId(0);
                            break;
                        case 1:
                            if (!this.mIsBeingDragged) {
                            } else {
                                android.view.VelocityTracker v19 = this.mVelocityTracker;
                                v19.computeCurrentVelocity(1000, ((float) this.mMaximumVelocity));
                                int v10 = ((int) android.support.v4.view.VelocityTrackerCompat.getXVelocity(v19, this.mActivePointerId));
                                this.mPopulatePending = 1;
                                int v20 = this.getClientWidth();
                                int v17 = this.getScrollX();
                                android.support.v4.view.ViewPager$ItemInfo v8 = this.infoForCurrentScrollPosition();
                                this.setCurrentItemInternal(this.determineTargetPage(v8.position, (((((float) v17) / ((float) v20)) - v8.offset) / (v8.widthFactor + (((float) this.mPageMargin) / ((float) v20)))), v10, ((int) (p30.getX(p30.findPointerIndex(this.mActivePointerId)) - this.mInitialMotionX))), 1, 1, v10);
                                v12 = this.resetTouch();
                            }
                            break;
                        case 2:
                            if (!this.mIsBeingDragged) {
                                int v16 = p30.findPointerIndex(this.mActivePointerId);
                                if (v16 != -1) {
                                    float v21_0 = p30.getX(v16);
                                    float v22 = Math.abs((v21_0 - this.mLastMotionX));
                                    float v23 = p30.getY(v16);
                                    float v24 = Math.abs((v23 - this.mLastMotionY));
                                    if ((v22 > ((float) this.mTouchSlop)) && (v22 > v24)) {
                                        int v25_15;
                                        this.mIsBeingDragged = 1;
                                        this.requestParentDisallowInterceptTouchEvent(1);
                                        if ((v21_0 - this.mInitialMotionX) <= 0) {
                                            v25_15 = (this.mInitialMotionX - ((float) this.mTouchSlop));
                                        } else {
                                            v25_15 = (this.mInitialMotionX + ((float) this.mTouchSlop));
                                        }
                                        this.mLastMotionX = v25_15;
                                        this.mLastMotionY = v23;
                                        this.setScrollState(1);
                                        this.setScrollingCacheEnabled(1);
                                        android.view.ViewParent v15 = this.getParent();
                                        if (v15 != null) {
                                            v15.requestDisallowInterceptTouchEvent(1);
                                        }
                                    }
                                } else {
                                    v12 = this.resetTouch();
                                }
                            }
                            if (!this.mIsBeingDragged) {
                            } else {
                                v12 = (0 | this.performDrag(p30.getX(p30.findPointerIndex(this.mActivePointerId))));
                            }
                            break;
                        case 3:
                            if (this.mIsBeingDragged) {
                                this.scrollToItem(this.mCurItem, 1, 0, 0);
                                v12 = this.resetTouch();
                            } else {
                            }
                        case 4:
                        default:
                            break;
                        case 5:
                            int v9 = android.support.v4.view.MotionEventCompat.getActionIndex(p30);
                            this.mLastMotionX = p30.getX(v9);
                            this.mActivePointerId = p30.getPointerId(v9);
                            break;
                        case 6:
                            this = this.onSecondaryPointerUp(p30);
                            this.mLastMotionX = p30.getX(p30.findPointerIndex(this.mActivePointerId));
                            break;
                    }
                    if (v12 != 0) {
                        android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                    }
                    v25_49 = 1;
                } else {
                    v25_49 = 0;
                }
            } else {
                v25_49 = 0;
            }
        } else {
            v25_49 = 1;
        }
        return v25_49;
    }

    boolean pageLeft()
    {
        int v0 = 1;
        if (this.mCurItem <= 0) {
            v0 = 0;
        } else {
            this.setCurrentItem((this.mCurItem - 1), 1);
        }
        return v0;
    }

    boolean pageRight()
    {
        int v0 = 1;
        if ((this.mAdapter == null) || (this.mCurItem >= (this.mAdapter.getCount() - 1))) {
            v0 = 0;
        } else {
            this.setCurrentItem((this.mCurItem + 1), 1);
        }
        return v0;
    }

    void populate()
    {
        this.populate(this.mCurItem);
        return;
    }

    void populate(int p30)
    {
        android.support.v4.view.ViewPager$ItemInfo v20 = 0;
        if (this.mCurItem != p30) {
            v20 = this.infoForPosition(this.mCurItem);
            this.mCurItem = p30;
        }
        if (this.mAdapter != null) {
            if (!this.mPopulatePending) {
                if (this.getWindowToken() != null) {
                    this.mAdapter.startUpdate(this);
                    int v21 = this.mOffscreenPageLimit;
                    int v25 = Math.max(0, (this.mCurItem - v21));
                    int v4 = this.mAdapter.getCount();
                    int v12 = Math.min((v4 - 1), (this.mCurItem + v21));
                    if (v4 == this.mExpectedAdapterCount) {
                        android.support.v4.view.ViewPager$ItemInfo v9 = 0;
                        int v8 = 0;
                        while (v8 < this.mItems.size()) {
                            int v16_8 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v8));
                            if (v16_8.position < this.mCurItem) {
                                v8++;
                            } else {
                                if (v16_8.position != this.mCurItem) {
                                    break;
                                }
                                v9 = v16_8;
                                break;
                            }
                        }
                        if ((v9 == null) && (v4 > 0)) {
                            v9 = this.addNewItem(this.mCurItem, v8);
                        }
                        if (v9 != null) {
                            int v16_0;
                            float v13 = 0;
                            int v17_0 = (v8 - 1);
                            if (v17_0 < 0) {
                                v16_0 = 0;
                            } else {
                                v16_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_0));
                            }
                            float v18;
                            int v7 = this.getClientWidth();
                            if (v7 > 0) {
                                v18 = ((1073741824 - v9.widthFactor) + (((float) this.getPaddingLeft()) / ((float) v7)));
                            } else {
                                v18 = 0;
                            }
                            int v22_0 = (this.mCurItem - 1);
                            while (v22_0 >= 0) {
                                if ((v13 < v18) || (v22_0 >= v25)) {
                                    if ((v16_0 == 0) || (v22_0 != v16_0.position)) {
                                        v13 += this.addNewItem(v22_0, (v17_0 + 1)).widthFactor;
                                        v8++;
                                        if (v17_0 < 0) {
                                            v16_0 = 0;
                                        } else {
                                            v16_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_0));
                                        }
                                    } else {
                                        v13 += v16_0.widthFactor;
                                        v17_0--;
                                        if (v17_0 < 0) {
                                            v16_0 = 0;
                                        } else {
                                            v16_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_0));
                                        }
                                    }
                                } else {
                                    if (v16_0 == 0) {
                                        break;
                                    }
                                    if ((v22_0 == v16_0.position) && (!v16_0.scrolling)) {
                                        this.mItems.remove(v17_0);
                                        this.mAdapter.destroyItem(this, v22_0, v16_0.object);
                                        v17_0--;
                                        v8--;
                                        if (v17_0 < 0) {
                                            v16_0 = 0;
                                        } else {
                                            v16_0 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_0));
                                        }
                                    }
                                }
                                v22_0--;
                            }
                            float v14 = v9.widthFactor;
                            int v17_1 = (v8 + 1);
                            if (v14 < 1073741824) {
                                int v16_2;
                                if (v17_1 >= this.mItems.size()) {
                                    v16_2 = 0;
                                } else {
                                    v16_2 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_1));
                                }
                                float v24;
                                if (v7 > 0) {
                                    v24 = ((((float) this.getPaddingRight()) / ((float) v7)) + 1073741824);
                                } else {
                                    v24 = 0;
                                }
                                int v22_1 = (this.mCurItem + 1);
                                while (v22_1 < v4) {
                                    if ((v14 < v24) || (v22_1 <= v12)) {
                                        if ((v16_2 == 0) || (v22_1 != v16_2.position)) {
                                            int v16_3 = this.addNewItem(v22_1, v17_1);
                                            v17_1++;
                                            v14 += v16_3.widthFactor;
                                            if (v17_1 >= this.mItems.size()) {
                                                v16_2 = 0;
                                            } else {
                                                v16_2 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_1));
                                            }
                                        } else {
                                            v14 += v16_2.widthFactor;
                                            v17_1++;
                                            if (v17_1 >= this.mItems.size()) {
                                                v16_2 = 0;
                                            } else {
                                                v16_2 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_1));
                                            }
                                        }
                                    } else {
                                        if (v16_2 == 0) {
                                            break;
                                        }
                                        if ((v22_1 == v16_2.position) && (!v16_2.scrolling)) {
                                            this.mItems.remove(v17_1);
                                            this.mAdapter.destroyItem(this, v22_1, v16_2.object);
                                            if (v17_1 >= this.mItems.size()) {
                                                v16_2 = 0;
                                            } else {
                                                v16_2 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v17_1));
                                            }
                                        }
                                    }
                                    v22_1++;
                                }
                            }
                            this.calculatePageOffsets(v9, v8, v20);
                        }
                        android.support.v4.view.ViewPager$ItemInfo v26_65;
                        if (v9 == null) {
                            v26_65 = 0;
                        } else {
                            v26_65 = v9.object;
                        }
                        this.mAdapter.setPrimaryItem(this, this.mCurItem, v26_65);
                        this.mAdapter.finishUpdate(this);
                        int v6 = this.getChildCount();
                        int v15_0 = 0;
                        while (v15_0 < v6) {
                            android.view.View v5_1 = this.getChildAt(v15_0);
                            android.support.v4.view.ViewPager$LayoutParams v19_1 = ((android.support.v4.view.ViewPager$LayoutParams) v5_1.getLayoutParams());
                            v19_1.childIndex = v15_0;
                            if ((!v19_1.isDecor) && (v19_1.widthFactor == 0)) {
                                int v16_6 = this.infoForChild(v5_1);
                                if (v16_6 != 0) {
                                    v19_1.widthFactor = v16_6.widthFactor;
                                    v19_1.position = v16_6.position;
                                }
                            }
                            v15_0++;
                        }
                        void v29_1 = this.sortChildDrawingOrder();
                        if (v29_1.hasFocus()) {
                            int v16_4;
                            android.view.View v10 = v29_1.findFocus();
                            if (v10 == null) {
                                v16_4 = 0;
                            } else {
                                v16_4 = v29_1.infoForAnyChild(v10);
                            }
                            if ((v16_4 == 0) || (v16_4.position != v29_1.mCurItem)) {
                                int v15_1 = 0;
                                while (v15_1 < v29_1.getChildCount()) {
                                    android.view.View v5_0 = v29_1.getChildAt(v15_1);
                                    int v16_5 = v29_1.infoForChild(v5_0);
                                    if ((v16_5 != 0) && ((v16_5.position == v29_1.mCurItem) && (v5_0.requestFocus(2)))) {
                                        break;
                                    }
                                    v15_1++;
                                }
                            }
                        }
                    } else {
                        try {
                            String v23 = this.getResources().getResourceName(this.getId());
                        } catch (android.content.res.Resources$NotFoundException v11) {
                            v23 = Integer.toHexString(this.getId());
                        }
                        throw new IllegalStateException(new StringBuilder().append("The application\'s PagerAdapter changed the adapter\'s contents without calling PagerAdapter#notifyDataSetChanged! Expected adapter item count: ").append(this.mExpectedAdapterCount).append(", found: ").append(v4).append(" Pager id: ").append(v23).append(" Pager class: ").append(this.getClass()).append(" Problematic adapter: ").append(this.mAdapter.getClass()).toString());
                    }
                }
            } else {
                this.sortChildDrawingOrder();
            }
        } else {
            this.sortChildDrawingOrder();
        }
        return;
    }

    public void removeOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener p2)
    {
        if (this.mAdapterChangeListeners != null) {
            this.mAdapterChangeListeners.remove(p2);
        }
        return;
    }

    public void removeOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p2)
    {
        if (this.mOnPageChangeListeners != null) {
            this.mOnPageChangeListeners.remove(p2);
        }
        return;
    }

    public void removeView(android.view.View p2)
    {
        if (!this.mInLayout) {
            super.removeView(p2);
        } else {
            this.removeViewInLayout(p2);
        }
        return;
    }

    public void setAdapter(android.support.v4.view.PagerAdapter p12)
    {
        if (this.mAdapter != null) {
            this.mAdapter.setViewPagerObserver(0);
            this.mAdapter.startUpdate(this);
            int v1_1 = 0;
            while (v1_1 < this.mItems.size()) {
                android.support.v4.view.ViewPager$ItemInfo v2_1 = ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v1_1));
                this.mAdapter.destroyItem(this, v2_1.position, v2_1.object);
                v1_1++;
            }
            this.mAdapter.finishUpdate(this);
            this.mItems.clear();
            this.removeNonDecorViews();
            this.mCurItem = 0;
            this.scrollTo(0, 0);
        }
        android.support.v4.view.PagerAdapter v3 = this.mAdapter;
        this.mAdapter = p12;
        this.mExpectedAdapterCount = 0;
        if (this.mAdapter != null) {
            if (this.mObserver == null) {
                this.mObserver = new android.support.v4.view.ViewPager$PagerObserver(this);
            }
            this.mAdapter.setViewPagerObserver(this.mObserver);
            this.mPopulatePending = 0;
            boolean v4 = this.mFirstLayout;
            this.mFirstLayout = 1;
            this.mExpectedAdapterCount = this.mAdapter.getCount();
            if (this.mRestoredCurItem < 0) {
                if (v4) {
                    this.requestLayout();
                } else {
                    this.populate();
                }
            } else {
                this.mAdapter.restoreState(this.mRestoredAdapterState, this.mRestoredClassLoader);
                this.setCurrentItemInternal(this.mRestoredCurItem, 0, 1);
                this.mRestoredCurItem = -1;
                this.mRestoredAdapterState = 0;
                this.mRestoredClassLoader = 0;
            }
        }
        if ((this.mAdapterChangeListeners != null) && (!this.mAdapterChangeListeners.isEmpty())) {
            int v1_0 = 0;
            int v0 = this.mAdapterChangeListeners.size();
            while (v1_0 < v0) {
                ((android.support.v4.view.ViewPager$OnAdapterChangeListener) this.mAdapterChangeListeners.get(v1_0)).onAdapterChanged(this, v3, p12);
                v1_0++;
            }
        }
        return;
    }

    void setChildrenDrawingOrderEnabledCompat(boolean p7)
    {
        if (android.os.Build$VERSION.SDK_INT >= 7) {
            if (this.mSetChildrenDrawingOrderEnabled == null) {
                try {
                    int v3_2 = new Class[1];
                    v3_2[0] = Boolean.TYPE;
                    this.mSetChildrenDrawingOrderEnabled = android.view.ViewGroup.getDeclaredMethod("setChildrenDrawingOrderEnabled", v3_2);
                } catch (Exception v0_0) {
                    android.util.Log.e("ViewPager", "Can\'t find setChildrenDrawingOrderEnabled", v0_0);
                }
                String v1_3 = this.mSetChildrenDrawingOrderEnabled;
                String v2_3 = new Object[1];
                v2_3[0] = Boolean.valueOf(p7);
                v1_3.invoke(this, v2_3);
                return;
            }
            try {
            } catch (Exception v0_1) {
                android.util.Log.e("ViewPager", "Error changing children drawing order", v0_1);
            }
        }
        return;
    }

    public void setCurrentItem(int p3)
    {
        int v0_1;
        this.mPopulatePending = 0;
        if (this.mFirstLayout) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.setCurrentItemInternal(p3, v0_1, 0);
        return;
    }

    public void setCurrentItem(int p2, boolean p3)
    {
        this.mPopulatePending = 0;
        this.setCurrentItemInternal(p2, p3, 0);
        return;
    }

    void setCurrentItemInternal(int p2, boolean p3, boolean p4)
    {
        this.setCurrentItemInternal(p2, p3, p4, 0);
        return;
    }

    void setCurrentItemInternal(int p6, boolean p7, boolean p8, int p9)
    {
        int v0 = 1;
        if ((this.mAdapter != null) && (this.mAdapter.getCount() > 0)) {
            if ((p8) || ((this.mCurItem != p6) || (this.mItems.size() == 0))) {
                if (p6 >= 0) {
                    if (p6 >= this.mAdapter.getCount()) {
                        p6 = (this.mAdapter.getCount() - 1);
                    }
                } else {
                    p6 = 0;
                }
                int v2 = this.mOffscreenPageLimit;
                if ((p6 > (this.mCurItem + v2)) || (p6 < (this.mCurItem - v2))) {
                    int v1 = 0;
                    while (v1 < this.mItems.size()) {
                        ((android.support.v4.view.ViewPager$ItemInfo) this.mItems.get(v1)).scrolling = 1;
                        v1++;
                    }
                }
                if (this.mCurItem == p6) {
                    v0 = 0;
                }
                if (!this.mFirstLayout) {
                    this.populate(p6);
                    this.scrollToItem(p6, p7, p9, v0);
                } else {
                    this.mCurItem = p6;
                    if (v0 != 0) {
                        this.dispatchOnPageSelected(p6);
                    }
                    this.requestLayout();
                }
            } else {
                this.setScrollingCacheEnabled(0);
            }
        } else {
            this.setScrollingCacheEnabled(0);
        }
        return;
    }

    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p2)
    {
        android.support.v4.view.ViewPager$OnPageChangeListener v0 = this.mInternalPageChangeListener;
        this.mInternalPageChangeListener = p2;
        return v0;
    }

    public void setOffscreenPageLimit(int p5)
    {
        if (p5 < 1) {
            android.util.Log.w("ViewPager", new StringBuilder().append("Requested offscreen page limit ").append(p5).append(" too small; defaulting to ").append(1).toString());
            p5 = 1;
        }
        if (p5 != this.mOffscreenPageLimit) {
            this.mOffscreenPageLimit = p5;
            this.populate();
        }
        return;
    }

    public void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener p1)
    {
        this.mOnPageChangeListener = p1;
        return;
    }

    public void setPageMargin(int p3)
    {
        int v0 = this.mPageMargin;
        this.mPageMargin = p3;
        this.recomputeScrollPosition(this.getWidth(), this.getWidth(), p3, v0);
        this.requestLayout();
        return;
    }

    public void setPageMarginDrawable(int p2)
    {
        this.setPageMarginDrawable(android.support.v4.content.ContextCompat.getDrawable(this.getContext(), p2));
        return;
    }

    public void setPageMarginDrawable(android.graphics.drawable.Drawable p2)
    {
        this.mMarginDrawable = p2;
        if (p2 != null) {
            this.refreshDrawableState();
        }
        int v0;
        if (p2 != null) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.setWillNotDraw(v0);
        this.invalidate();
        return;
    }

    public void setPageTransformer(boolean p2, android.support.v4.view.ViewPager$PageTransformer p3)
    {
        this.setPageTransformer(p2, p3, 2);
        return;
    }

    public void setPageTransformer(boolean p7, android.support.v4.view.ViewPager$PageTransformer p8, int p9)
    {
        int v2 = 1;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            int v0;
            if (p8 == null) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            int v4_0;
            if (this.mPageTransformer == null) {
                v4_0 = 0;
            } else {
                v4_0 = 1;
            }
            int v1;
            if (v0 == v4_0) {
                v1 = 0;
            } else {
                v1 = 1;
            }
            this.mPageTransformer = p8;
            this.setChildrenDrawingOrderEnabledCompat(v0);
            if (v0 == 0) {
                this.mDrawingOrder = 0;
            } else {
                if (p7) {
                    v2 = 2;
                }
                this.mDrawingOrder = v2;
                this.mPageTransformerLayerType = p9;
            }
            if (v1 != 0) {
                this.populate();
            }
        }
        return;
    }

    void setScrollState(int p2)
    {
        if (this.mScrollState != p2) {
            this.mScrollState = p2;
            if (this.mPageTransformer != null) {
                int v0_2;
                if (p2 == 0) {
                    v0_2 = 0;
                } else {
                    v0_2 = 1;
                }
                this.enableLayers(v0_2);
            }
            this.dispatchOnScrollStateChanged(p2);
        }
        return;
    }

    void smoothScrollTo(int p2, int p3)
    {
        this.smoothScrollTo(p2, p3, 0);
        return;
    }

    void smoothScrollTo(int p17, int p18, int p19)
    {
        if (this.getChildCount() != 0) {
            if ((this.mScroller == null) || (this.mScroller.isFinished())) {
                int v12 = 0;
            } else {
                v12 = 1;
            }
            int v2;
            if (v12 == 0) {
                v2 = this.getScrollX();
            } else {
                if (!this.mIsScrollStarted) {
                    v2 = this.mScroller.getStartX();
                } else {
                    v2 = this.mScroller.getCurrX();
                }
                this.mScroller.abortAnimation();
                this.setScrollingCacheEnabled(0);
            }
            int v3 = this.getScrollY();
            int v4 = (p17 - v2);
            int v5 = (p18 - v3);
            if ((v4 != 0) || (v5 != 0)) {
                int v6_1;
                this.setScrollingCacheEnabled(1);
                this.setScrollState(2);
                int v13 = this.getClientWidth();
                int v9 = (v13 / 2);
                float v7 = (((float) v9) + (((float) v9) * this.distanceInfluenceForSnapDuration(Math.min(1065353216, ((1065353216 * ((float) Math.abs(v4))) / ((float) v13))))));
                int v19_1 = Math.abs(p19);
                if (v19_1 <= 0) {
                    v6_1 = ((int) ((1065353216 + (((float) Math.abs(v4)) / (((float) this.mPageMargin) + (((float) v13) * this.mAdapter.getPageWidth(this.mCurItem))))) * 1120403456));
                } else {
                    v6_1 = (Math.round((1148846080 * Math.abs((v7 / ((float) v19_1))))) * 4);
                }
                int v6_0 = Math.min(v6_1, 600);
                this.mIsScrollStarted = 0;
                this.mScroller.startScroll(v2, v3, v4, v5, v6_0);
                android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
            } else {
                this.completeScroll(0);
                this.populate();
                this.setScrollState(0);
            }
        } else {
            this.setScrollingCacheEnabled(0);
        }
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable p2)
    {
        if ((!super.verifyDrawable(p2)) && (p2 != this.mMarginDrawable)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }
}
package android.support.v4.view;
interface ViewParentCompat$ViewParentCompatImpl {

    public abstract void notifySubtreeAccessibilityStateChanged();

    public abstract boolean onNestedFling();

    public abstract boolean onNestedPreFling();

    public abstract void onNestedPreScroll();

    public abstract void onNestedScroll();

    public abstract void onNestedScrollAccepted();

    public abstract boolean onStartNestedScroll();

    public abstract void onStopNestedScroll();

    public abstract boolean requestSendAccessibilityEvent();
}
package android.support.v4.view;
public final class ViewParentCompat {
    static final android.support.v4.view.ViewParentCompat$ViewParentCompatImpl IMPL;

    static ViewParentCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 19) {
                if (v0 < 14) {
                    android.support.v4.view.ViewParentCompat.IMPL = new android.support.v4.view.ViewParentCompat$ViewParentCompatStubImpl();
                } else {
                    android.support.v4.view.ViewParentCompat.IMPL = new android.support.v4.view.ViewParentCompat$ViewParentCompatICSImpl();
                }
            } else {
                android.support.v4.view.ViewParentCompat.IMPL = new android.support.v4.view.ViewParentCompat$ViewParentCompatKitKatImpl();
            }
        } else {
            android.support.v4.view.ViewParentCompat.IMPL = new android.support.v4.view.ViewParentCompat$ViewParentCompatLollipopImpl();
        }
        return;
    }

    private ViewParentCompat()
    {
        return;
    }

    public static void notifySubtreeAccessibilityStateChanged(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        android.support.v4.view.ViewParentCompat.IMPL.notifySubtreeAccessibilityStateChanged(p1, p2, p3, p4);
        return;
    }

    public static boolean onNestedFling(android.view.ViewParent p6, android.view.View p7, float p8, float p9, boolean p10)
    {
        return android.support.v4.view.ViewParentCompat.IMPL.onNestedFling(p6, p7, p8, p9, p10);
    }

    public static boolean onNestedPreFling(android.view.ViewParent p1, android.view.View p2, float p3, float p4)
    {
        return android.support.v4.view.ViewParentCompat.IMPL.onNestedPreFling(p1, p2, p3, p4);
    }

    public static void onNestedPreScroll(android.view.ViewParent p6, android.view.View p7, int p8, int p9, int[] p10)
    {
        android.support.v4.view.ViewParentCompat.IMPL.onNestedPreScroll(p6, p7, p8, p9, p10);
        return;
    }

    public static void onNestedScroll(android.view.ViewParent p7, android.view.View p8, int p9, int p10, int p11, int p12)
    {
        android.support.v4.view.ViewParentCompat.IMPL.onNestedScroll(p7, p8, p9, p10, p11, p12);
        return;
    }

    public static void onNestedScrollAccepted(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        android.support.v4.view.ViewParentCompat.IMPL.onNestedScrollAccepted(p1, p2, p3, p4);
        return;
    }

    public static boolean onStartNestedScroll(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        return android.support.v4.view.ViewParentCompat.IMPL.onStartNestedScroll(p1, p2, p3, p4);
    }

    public static void onStopNestedScroll(android.view.ViewParent p1, android.view.View p2)
    {
        android.support.v4.view.ViewParentCompat.IMPL.onStopNestedScroll(p1, p2);
        return;
    }

    public static boolean requestSendAccessibilityEvent(android.view.ViewParent p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return android.support.v4.view.ViewParentCompat.IMPL.requestSendAccessibilityEvent(p1, p2, p3);
    }
}
package android.support.v4.view;
 class ViewParentCompatICS {

    ViewParentCompatICS()
    {
        return;
    }

    public static boolean requestSendAccessibilityEvent(android.view.ViewParent p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return p1.requestSendAccessibilityEvent(p2, p3);
    }
}
package android.support.v4.view;
 class ViewParentCompatKitKat {

    ViewParentCompatKitKat()
    {
        return;
    }

    public static void notifySubtreeAccessibilityStateChanged(android.view.ViewParent p0, android.view.View p1, android.view.View p2, int p3)
    {
        p0.notifySubtreeAccessibilityStateChanged(p1, p2, p3);
        return;
    }
}
package android.support.v4.view;
 class ViewParentCompatLollipop {
    private static final String TAG = "ViewParentCompat";

    ViewParentCompatLollipop()
    {
        return;
    }

    public static boolean onNestedFling(android.view.ViewParent p4, android.view.View p5, float p6, float p7, boolean p8)
    {
        try {
            int v1_0 = p4.onNestedFling(p5, p6, p7, p8);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onNestedFling").toString(), v0);
            v1_0 = 0;
        }
        return v1_0;
    }

    public static boolean onNestedPreFling(android.view.ViewParent p4, android.view.View p5, float p6, float p7)
    {
        try {
            int v1_0 = p4.onNestedPreFling(p5, p6, p7);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onNestedPreFling").toString(), v0);
            v1_0 = 0;
        }
        return v1_0;
    }

    public static void onNestedPreScroll(android.view.ViewParent p4, android.view.View p5, int p6, int p7, int[] p8)
    {
        try {
            p4.onNestedPreScroll(p5, p6, p7, p8);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onNestedPreScroll").toString(), v0);
        }
        return;
    }

    public static void onNestedScroll(android.view.ViewParent p4, android.view.View p5, int p6, int p7, int p8, int p9)
    {
        try {
            p4.onNestedScroll(p5, p6, p7, p8, p9);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onNestedScroll").toString(), v0);
        }
        return;
    }

    public static void onNestedScrollAccepted(android.view.ViewParent p4, android.view.View p5, android.view.View p6, int p7)
    {
        try {
            p4.onNestedScrollAccepted(p5, p6, p7);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onNestedScrollAccepted").toString(), v0);
        }
        return;
    }

    public static boolean onStartNestedScroll(android.view.ViewParent p4, android.view.View p5, android.view.View p6, int p7)
    {
        try {
            int v1_0 = p4.onStartNestedScroll(p5, p6, p7);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onStartNestedScroll").toString(), v0);
            v1_0 = 0;
        }
        return v1_0;
    }

    public static void onStopNestedScroll(android.view.ViewParent p4, android.view.View p5)
    {
        try {
            p4.onStopNestedScroll(p5);
        } catch (AbstractMethodError v0) {
            android.util.Log.e("ViewParentCompat", new StringBuilder().append("ViewParent ").append(p4).append(" does not implement interface ").append("method onStopNestedScroll").toString(), v0);
        }
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl$Starter implements java.lang.Runnable {
    ref.WeakReference mViewRef;
    android.support.v4.view.ViewPropertyAnimatorCompat mVpa;
    final synthetic android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl this$0;

    ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl$Starter(android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl p2, android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        this.this$0 = p2;
        this.mViewRef = new ref.WeakReference(p4);
        this.mVpa = p3;
        return;
    }

    public void run()
    {
        android.view.View v0_1 = ((android.view.View) this.mViewRef.get());
        if (v0_1 != null) {
            this.this$0.startAnimation(this.mVpa, v0_1);
        }
        return;
    }
}
package android.support.v4.view;
interface ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl {

    public abstract void alpha();

    public abstract void alphaBy();

    public abstract void cancel();

    public abstract long getDuration();

    public abstract android.view.animation.Interpolator getInterpolator();

    public abstract long getStartDelay();

    public abstract void rotation();

    public abstract void rotationBy();

    public abstract void rotationX();

    public abstract void rotationXBy();

    public abstract void rotationY();

    public abstract void rotationYBy();

    public abstract void scaleX();

    public abstract void scaleXBy();

    public abstract void scaleY();

    public abstract void scaleYBy();

    public abstract void setDuration();

    public abstract void setInterpolator();

    public abstract void setListener();

    public abstract void setStartDelay();

    public abstract void setUpdateListener();

    public abstract void start();

    public abstract void translationX();

    public abstract void translationXBy();

    public abstract void translationY();

    public abstract void translationYBy();

    public abstract void translationZ();

    public abstract void translationZBy();

    public abstract void withEndAction();

    public abstract void withLayer();

    public abstract void withStartAction();

    public abstract void x();

    public abstract void xBy();

    public abstract void y();

    public abstract void yBy();

    public abstract void z();

    public abstract void zBy();
}
package android.support.v4.view;
public final class ViewPropertyAnimatorCompat {
    static final android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl IMPL = None;
    static final int LISTENER_TAG_ID = 2113929216;
    private static final String TAG = "ViewAnimatorCompat";
    Runnable mEndAction;
    int mOldLayerType;
    Runnable mStartAction;
    private ref.WeakReference mView;

    static ViewPropertyAnimatorCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 19) {
                if (v0 < 18) {
                    if (v0 < 16) {
                        if (v0 < 14) {
                            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl();
                        } else {
                            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl();
                        }
                    } else {
                        android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$JBViewPropertyAnimatorCompatImpl();
                    }
                } else {
                    android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$JBMr2ViewPropertyAnimatorCompatImpl();
                }
            } else {
                android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$KitKatViewPropertyAnimatorCompatImpl();
            }
        } else {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL = new android.support.v4.view.ViewPropertyAnimatorCompat$LollipopViewPropertyAnimatorCompatImpl();
        }
        return;
    }

    ViewPropertyAnimatorCompat(android.view.View p2)
    {
        this.mStartAction = 0;
        this.mEndAction = 0;
        this.mOldLayerType = -1;
        this.mView = new ref.WeakReference(p2);
        return;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat alpha(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.alpha(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat alphaBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.alphaBy(this, v0_1, p3);
        }
        return this;
    }

    public void cancel()
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.cancel(this, v0_1);
        }
        return;
    }

    public long getDuration()
    {
        long v2;
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 == null) {
            v2 = 0;
        } else {
            v2 = android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.getDuration(this, v0_1);
        }
        return v2;
    }

    public android.view.animation.Interpolator getInterpolator()
    {
        int v1_1;
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 == null) {
            v1_1 = 0;
        } else {
            v1_1 = android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.getInterpolator(this, v0_1);
        }
        return v1_1;
    }

    public long getStartDelay()
    {
        long v2;
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 == null) {
            v2 = 0;
        } else {
            v2 = android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.getStartDelay(this, v0_1);
        }
        return v2;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotation(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotation(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotationBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotationBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotationX(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotationX(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotationXBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotationXBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotationY(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotationY(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat rotationYBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.rotationYBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat scaleX(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.scaleX(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat scaleXBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.scaleXBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat scaleY(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.scaleY(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat scaleYBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.scaleYBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat setDuration(long p4)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.setDuration(this, v0_1, p4);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.setInterpolator(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat setListener(android.support.v4.view.ViewPropertyAnimatorListener p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.setListener(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat setStartDelay(long p4)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.setStartDelay(this, v0_1, p4);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat setUpdateListener(android.support.v4.view.ViewPropertyAnimatorUpdateListener p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.setUpdateListener(this, v0_1, p3);
        }
        return this;
    }

    public void start()
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.start(this, v0_1);
        }
        return;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationX(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationX(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationXBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationXBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationY(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationY(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationYBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationYBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationZ(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationZ(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat translationZBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.translationZBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat withEndAction(Runnable p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.withEndAction(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat withLayer()
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.withLayer(this, v0_1);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat withStartAction(Runnable p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.withStartAction(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat x(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.x(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat xBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.xBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat y(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.y(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat yBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.yBy(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat z(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.z(this, v0_1, p3);
        }
        return this;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat zBy(float p3)
    {
        android.view.View v0_1 = ((android.view.View) this.mView.get());
        if (v0_1 != null) {
            android.support.v4.view.ViewPropertyAnimatorCompat.IMPL.zBy(this, v0_1, p3);
        }
        return this;
    }
}
package android.support.v4.view;
final class ViewPropertyAnimatorCompatICS$1 extends android.animation.AnimatorListenerAdapter {
    final synthetic android.support.v4.view.ViewPropertyAnimatorListener val$listener;
    final synthetic android.view.View val$view;

    ViewPropertyAnimatorCompatICS$1(android.support.v4.view.ViewPropertyAnimatorListener p1, android.view.View p2)
    {
        this.val$listener = p1;
        this.val$view = p2;
        return;
    }

    public void onAnimationCancel(android.animation.Animator p3)
    {
        this.val$listener.onAnimationCancel(this.val$view);
        return;
    }

    public void onAnimationEnd(android.animation.Animator p3)
    {
        this.val$listener.onAnimationEnd(this.val$view);
        return;
    }

    public void onAnimationStart(android.animation.Animator p3)
    {
        this.val$listener.onAnimationStart(this.val$view);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompatICS {

    ViewPropertyAnimatorCompatICS()
    {
        return;
    }

    public static void alpha(android.view.View p1, float p2)
    {
        p1.animate().alpha(p2);
        return;
    }

    public static void alphaBy(android.view.View p1, float p2)
    {
        p1.animate().alphaBy(p2);
        return;
    }

    public static void cancel(android.view.View p1)
    {
        p1.animate().cancel();
        return;
    }

    public static long getDuration(android.view.View p2)
    {
        return p2.animate().getDuration();
    }

    public static long getStartDelay(android.view.View p2)
    {
        return p2.animate().getStartDelay();
    }

    public static void rotation(android.view.View p1, float p2)
    {
        p1.animate().rotation(p2);
        return;
    }

    public static void rotationBy(android.view.View p1, float p2)
    {
        p1.animate().rotationBy(p2);
        return;
    }

    public static void rotationX(android.view.View p1, float p2)
    {
        p1.animate().rotationX(p2);
        return;
    }

    public static void rotationXBy(android.view.View p1, float p2)
    {
        p1.animate().rotationXBy(p2);
        return;
    }

    public static void rotationY(android.view.View p1, float p2)
    {
        p1.animate().rotationY(p2);
        return;
    }

    public static void rotationYBy(android.view.View p1, float p2)
    {
        p1.animate().rotationYBy(p2);
        return;
    }

    public static void scaleX(android.view.View p1, float p2)
    {
        p1.animate().scaleX(p2);
        return;
    }

    public static void scaleXBy(android.view.View p1, float p2)
    {
        p1.animate().scaleXBy(p2);
        return;
    }

    public static void scaleY(android.view.View p1, float p2)
    {
        p1.animate().scaleY(p2);
        return;
    }

    public static void scaleYBy(android.view.View p1, float p2)
    {
        p1.animate().scaleYBy(p2);
        return;
    }

    public static void setDuration(android.view.View p1, long p2)
    {
        p1.animate().setDuration(p2);
        return;
    }

    public static void setInterpolator(android.view.View p1, android.view.animation.Interpolator p2)
    {
        p1.animate().setInterpolator(p2);
        return;
    }

    public static void setListener(android.view.View p2, android.support.v4.view.ViewPropertyAnimatorListener p3)
    {
        if (p3 == null) {
            p2.animate().setListener(0);
        } else {
            p2.animate().setListener(new android.support.v4.view.ViewPropertyAnimatorCompatICS$1(p3, p2));
        }
        return;
    }

    public static void setStartDelay(android.view.View p1, long p2)
    {
        p1.animate().setStartDelay(p2);
        return;
    }

    public static void start(android.view.View p1)
    {
        p1.animate().start();
        return;
    }

    public static void translationX(android.view.View p1, float p2)
    {
        p1.animate().translationX(p2);
        return;
    }

    public static void translationXBy(android.view.View p1, float p2)
    {
        p1.animate().translationXBy(p2);
        return;
    }

    public static void translationY(android.view.View p1, float p2)
    {
        p1.animate().translationY(p2);
        return;
    }

    public static void translationYBy(android.view.View p1, float p2)
    {
        p1.animate().translationYBy(p2);
        return;
    }

    public static void x(android.view.View p1, float p2)
    {
        p1.animate().x(p2);
        return;
    }

    public static void xBy(android.view.View p1, float p2)
    {
        p1.animate().xBy(p2);
        return;
    }

    public static void y(android.view.View p1, float p2)
    {
        p1.animate().y(p2);
        return;
    }

    public static void yBy(android.view.View p1, float p2)
    {
        p1.animate().yBy(p2);
        return;
    }
}
package android.support.v4.view;
final class ViewPropertyAnimatorCompatJB$1 extends android.animation.AnimatorListenerAdapter {
    final synthetic android.support.v4.view.ViewPropertyAnimatorListener val$listener;
    final synthetic android.view.View val$view;

    ViewPropertyAnimatorCompatJB$1(android.support.v4.view.ViewPropertyAnimatorListener p1, android.view.View p2)
    {
        this.val$listener = p1;
        this.val$view = p2;
        return;
    }

    public void onAnimationCancel(android.animation.Animator p3)
    {
        this.val$listener.onAnimationCancel(this.val$view);
        return;
    }

    public void onAnimationEnd(android.animation.Animator p3)
    {
        this.val$listener.onAnimationEnd(this.val$view);
        return;
    }

    public void onAnimationStart(android.animation.Animator p3)
    {
        this.val$listener.onAnimationStart(this.val$view);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompatJB {

    ViewPropertyAnimatorCompatJB()
    {
        return;
    }

    public static void setListener(android.view.View p2, android.support.v4.view.ViewPropertyAnimatorListener p3)
    {
        if (p3 == null) {
            p2.animate().setListener(0);
        } else {
            p2.animate().setListener(new android.support.v4.view.ViewPropertyAnimatorCompatJB$1(p3, p2));
        }
        return;
    }

    public static void withEndAction(android.view.View p1, Runnable p2)
    {
        p1.animate().withEndAction(p2);
        return;
    }

    public static void withLayer(android.view.View p1)
    {
        p1.animate().withLayer();
        return;
    }

    public static void withStartAction(android.view.View p1, Runnable p2)
    {
        p1.animate().withStartAction(p2);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompatJellybeanMr2 {

    ViewPropertyAnimatorCompatJellybeanMr2()
    {
        return;
    }

    public static android.view.animation.Interpolator getInterpolator(android.view.View p1)
    {
        return ((android.view.animation.Interpolator) p1.animate().getInterpolator());
    }
}
package android.support.v4.view;
final class ViewPropertyAnimatorCompatKK$1 implements android.animation.ValueAnimator$AnimatorUpdateListener {
    final synthetic android.support.v4.view.ViewPropertyAnimatorUpdateListener val$listener;
    final synthetic android.view.View val$view;

    ViewPropertyAnimatorCompatKK$1(android.support.v4.view.ViewPropertyAnimatorUpdateListener p1, android.view.View p2)
    {
        this.val$listener = p1;
        this.val$view = p2;
        return;
    }

    public void onAnimationUpdate(android.animation.ValueAnimator p3)
    {
        this.val$listener.onAnimationUpdate(this.val$view);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompatKK {

    ViewPropertyAnimatorCompatKK()
    {
        return;
    }

    public static void setUpdateListener(android.view.View p2, android.support.v4.view.ViewPropertyAnimatorUpdateListener p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatKK$1 v0_0 = 0;
        if (p3 != null) {
            v0_0 = new android.support.v4.view.ViewPropertyAnimatorCompatKK$1(p3, p2);
        }
        p2.animate().setUpdateListener(v0_0);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompatLollipop {

    ViewPropertyAnimatorCompatLollipop()
    {
        return;
    }

    public static void translationZ(android.view.View p1, float p2)
    {
        p1.animate().translationZ(p2);
        return;
    }

    public static void translationZBy(android.view.View p1, float p2)
    {
        p1.animate().translationZBy(p2);
        return;
    }

    public static void z(android.view.View p1, float p2)
    {
        p1.animate().z(p2);
        return;
    }

    public static void zBy(android.view.View p1, float p2)
    {
        p1.animate().zBy(p2);
        return;
    }
}
package android.support.v4.view;
public interface ViewPropertyAnimatorListener {

    public abstract void onAnimationCancel();

    public abstract void onAnimationEnd();

    public abstract void onAnimationStart();
}
package android.support.v4.view;
public interface ViewPropertyAnimatorUpdateListener {

    public abstract void onAnimationUpdate();
}
package android.support.v4.view;
public final class WindowCompat {
    public static final int FEATURE_ACTION_BAR = 8;
    public static final int FEATURE_ACTION_BAR_OVERLAY = 9;
    public static final int FEATURE_ACTION_MODE_OVERLAY = 10;

    private WindowCompat()
    {
        return;
    }
}
package android.support.v4.view;
interface WindowInsetsCompat$WindowInsetsCompatImpl {

    public abstract android.support.v4.view.WindowInsetsCompat consumeStableInsets();

    public abstract android.support.v4.view.WindowInsetsCompat consumeSystemWindowInsets();

    public abstract Object getSourceWindowInsets();

    public abstract int getStableInsetBottom();

    public abstract int getStableInsetLeft();

    public abstract int getStableInsetRight();

    public abstract int getStableInsetTop();

    public abstract int getSystemWindowInsetBottom();

    public abstract int getSystemWindowInsetLeft();

    public abstract int getSystemWindowInsetRight();

    public abstract int getSystemWindowInsetTop();

    public abstract boolean hasInsets();

    public abstract boolean hasStableInsets();

    public abstract boolean hasSystemWindowInsets();

    public abstract boolean isConsumed();

    public abstract boolean isRound();

    public abstract android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets();

    public abstract android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets();
}
package android.support.v4.view;
public class WindowInsetsCompat {
    private static final android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatImpl IMPL;
    private final Object mInsets;

    static WindowInsetsCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 21) {
            if (v0 < 20) {
                android.support.v4.view.WindowInsetsCompat.IMPL = new android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatBaseImpl();
            } else {
                android.support.v4.view.WindowInsetsCompat.IMPL = new android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatApi20Impl();
            }
        } else {
            android.support.v4.view.WindowInsetsCompat.IMPL = new android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatApi21Impl();
        }
        return;
    }

    public WindowInsetsCompat(android.support.v4.view.WindowInsetsCompat p3)
    {
        Object v0_1;
        if (p3 != null) {
            v0_1 = android.support.v4.view.WindowInsetsCompat.IMPL.getSourceWindowInsets(p3.mInsets);
        } else {
            v0_1 = 0;
        }
        this.mInsets = v0_1;
        return;
    }

    WindowInsetsCompat(Object p1)
    {
        this.mInsets = p1;
        return;
    }

    static Object unwrap(android.support.v4.view.WindowInsetsCompat p1)
    {
        Object v0;
        if (p1 != null) {
            v0 = p1.mInsets;
        } else {
            v0 = 0;
        }
        return v0;
    }

    static android.support.v4.view.WindowInsetsCompat wrap(Object p1)
    {
        android.support.v4.view.WindowInsetsCompat v0_1;
        if (p1 != null) {
            v0_1 = new android.support.v4.view.WindowInsetsCompat(p1);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public android.support.v4.view.WindowInsetsCompat consumeStableInsets()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.consumeStableInsets(this.mInsets);
    }

    public android.support.v4.view.WindowInsetsCompat consumeSystemWindowInsets()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.consumeSystemWindowInsets(this.mInsets);
    }

    public boolean equals(Object p6)
    {
        Object v1_0 = 1;
        if (this != p6) {
            if ((p6 != null) && (this.getClass() == p6.getClass())) {
                if (this.mInsets != null) {
                    v1_0 = this.mInsets.equals(((android.support.v4.view.WindowInsetsCompat) p6).mInsets);
                } else {
                    if (((android.support.v4.view.WindowInsetsCompat) p6).mInsets != null) {
                        v1_0 = 0;
                    }
                }
            } else {
                v1_0 = 0;
            }
        }
        return v1_0;
    }

    public int getStableInsetBottom()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getStableInsetBottom(this.mInsets);
    }

    public int getStableInsetLeft()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getStableInsetLeft(this.mInsets);
    }

    public int getStableInsetRight()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getStableInsetRight(this.mInsets);
    }

    public int getStableInsetTop()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getStableInsetTop(this.mInsets);
    }

    public int getSystemWindowInsetBottom()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getSystemWindowInsetBottom(this.mInsets);
    }

    public int getSystemWindowInsetLeft()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getSystemWindowInsetLeft(this.mInsets);
    }

    public int getSystemWindowInsetRight()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getSystemWindowInsetRight(this.mInsets);
    }

    public int getSystemWindowInsetTop()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.getSystemWindowInsetTop(this.mInsets);
    }

    public boolean hasInsets()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.hasInsets(this.mInsets);
    }

    public boolean hasStableInsets()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.hasStableInsets(this.mInsets);
    }

    public boolean hasSystemWindowInsets()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.hasSystemWindowInsets(this.mInsets);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mInsets != null) {
            v0_2 = this.mInsets.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isConsumed()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.isConsumed(this.mInsets);
    }

    public boolean isRound()
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.isRound(this.mInsets);
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(int p7, int p8, int p9, int p10)
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.replaceSystemWindowInsets(this.mInsets, p7, p8, p9, p10);
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(android.graphics.Rect p3)
    {
        return android.support.v4.view.WindowInsetsCompat.IMPL.replaceSystemWindowInsets(this.mInsets, p3);
    }
}
package android.support.v4.view;
 class WindowInsetsCompatApi20 {

    WindowInsetsCompatApi20()
    {
        return;
    }

    public static Object consumeSystemWindowInsets(Object p1)
    {
        return ((android.view.WindowInsets) p1).consumeSystemWindowInsets();
    }

    public static Object getSourceWindowInsets(Object p1)
    {
        return new android.view.WindowInsets(((android.view.WindowInsets) p1));
    }

    public static int getSystemWindowInsetBottom(Object p1)
    {
        return ((android.view.WindowInsets) p1).getSystemWindowInsetBottom();
    }

    public static int getSystemWindowInsetLeft(Object p1)
    {
        return ((android.view.WindowInsets) p1).getSystemWindowInsetLeft();
    }

    public static int getSystemWindowInsetRight(Object p1)
    {
        return ((android.view.WindowInsets) p1).getSystemWindowInsetRight();
    }

    public static int getSystemWindowInsetTop(Object p1)
    {
        return ((android.view.WindowInsets) p1).getSystemWindowInsetTop();
    }

    public static boolean hasInsets(Object p1)
    {
        return ((android.view.WindowInsets) p1).hasInsets();
    }

    public static boolean hasSystemWindowInsets(Object p1)
    {
        return ((android.view.WindowInsets) p1).hasSystemWindowInsets();
    }

    public static boolean isRound(Object p1)
    {
        return ((android.view.WindowInsets) p1).isRound();
    }

    public static Object replaceSystemWindowInsets(Object p1, int p2, int p3, int p4, int p5)
    {
        return ((android.view.WindowInsets) p1).replaceSystemWindowInsets(p2, p3, p4, p5);
    }
}
package android.support.v4.view;
 class WindowInsetsCompatApi21 {

    WindowInsetsCompatApi21()
    {
        return;
    }

    public static Object consumeStableInsets(Object p1)
    {
        return ((android.view.WindowInsets) p1).consumeStableInsets();
    }

    public static int getStableInsetBottom(Object p1)
    {
        return ((android.view.WindowInsets) p1).getStableInsetBottom();
    }

    public static int getStableInsetLeft(Object p1)
    {
        return ((android.view.WindowInsets) p1).getStableInsetLeft();
    }

    public static int getStableInsetRight(Object p1)
    {
        return ((android.view.WindowInsets) p1).getStableInsetRight();
    }

    public static int getStableInsetTop(Object p1)
    {
        return ((android.view.WindowInsets) p1).getStableInsetTop();
    }

    public static boolean hasStableInsets(Object p1)
    {
        return ((android.view.WindowInsets) p1).hasStableInsets();
    }

    public static boolean isConsumed(Object p1)
    {
        return ((android.view.WindowInsets) p1).isConsumed();
    }

    public static Object replaceSystemWindowInsets(Object p1, android.graphics.Rect p2)
    {
        return ((android.view.WindowInsets) p1).replaceSystemWindowInsets(p2);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityEventCompat$AccessibilityEventVersionImpl {

    public abstract void appendRecord();

    public abstract int getAction();

    public abstract int getContentChangeTypes();

    public abstract int getMovementGranularity();

    public abstract Object getRecord();

    public abstract int getRecordCount();

    public abstract void setAction();

    public abstract void setContentChangeTypes();

    public abstract void setMovementGranularity();
}
package android.support.v4.view.accessibility;
public final class AccessibilityEventCompat {
    public static final int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION = 4;
    public static final int CONTENT_CHANGE_TYPE_SUBTREE = 1;
    public static final int CONTENT_CHANGE_TYPE_TEXT = 2;
    public static final int CONTENT_CHANGE_TYPE_UNDEFINED = 0;
    private static final android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl IMPL = None;
    public static final int TYPES_ALL_MASK = 255;
    public static final int TYPE_ANNOUNCEMENT = 16384;
    public static final int TYPE_ASSIST_READING_CONTEXT = 16777216;
    public static final int TYPE_GESTURE_DETECTION_END = 524288;
    public static final int TYPE_GESTURE_DETECTION_START = 262144;
    public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END = 1024;
    public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START = 512;
    public static final int TYPE_TOUCH_INTERACTION_END = 2097152;
    public static final int TYPE_TOUCH_INTERACTION_START = 1048576;
    public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED = 32768;
    public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED = 65536;
    public static final int TYPE_VIEW_CONTEXT_CLICKED = 8388608;
    public static final int TYPE_VIEW_HOVER_ENTER = 128;
    public static final int TYPE_VIEW_HOVER_EXIT = 256;
    public static final int TYPE_VIEW_SCROLLED = 4096;
    public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED = 8192;
    public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY = 131072;
    public static final int TYPE_WINDOWS_CHANGED = 4194304;
    public static final int TYPE_WINDOW_CONTENT_CHANGED = 2048;

    static AccessibilityEventCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            if (android.os.Build$VERSION.SDK_INT < 16) {
                if (android.os.Build$VERSION.SDK_INT < 14) {
                    android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl();
                } else {
                    android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl();
                }
            } else {
                android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventJellyBeanImpl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventKitKatImpl();
        }
        return;
    }

    private AccessibilityEventCompat()
    {
        return;
    }

    public static void appendRecord(android.view.accessibility.AccessibilityEvent p2, android.support.v4.view.accessibility.AccessibilityRecordCompat p3)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.appendRecord(p2, p3.getImpl());
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat asRecord(android.view.accessibility.AccessibilityEvent p1)
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(p1);
    }

    public static int getContentChangeTypes(android.view.accessibility.AccessibilityEvent p1)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getContentChangeTypes(p1);
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getRecord(p2, p3));
    }

    public static int getRecordCount(android.view.accessibility.AccessibilityEvent p1)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getRecordCount(p1);
    }

    public static void setContentChangeTypes(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.setContentChangeTypes(p1, p2);
        return;
    }

    public int getAction(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getAction(p2);
    }

    public int getMovementGranularity(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.getMovementGranularity(p2);
    }

    public void setAction(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.setAction(p2, p3);
        return;
    }

    public void setMovementGranularity(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompat.IMPL.setMovementGranularity(p2, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompatIcs {

    AccessibilityEventCompatIcs()
    {
        return;
    }

    public static void appendRecord(android.view.accessibility.AccessibilityEvent p0, Object p1)
    {
        p0.appendRecord(((android.view.accessibility.AccessibilityRecord) p1));
        return;
    }

    public static Object getRecord(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        return p1.getRecord(p2);
    }

    public static int getRecordCount(android.view.accessibility.AccessibilityEvent p1)
    {
        return p1.getRecordCount();
    }

    public static void setScrollable(android.view.accessibility.AccessibilityEvent p0, boolean p1)
    {
        p0.setScrollable(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompatJellyBean {

    AccessibilityEventCompatJellyBean()
    {
        return;
    }

    public static int getAction(android.view.accessibility.AccessibilityEvent p1)
    {
        return p1.getAction();
    }

    public static int getMovementGranularity(android.view.accessibility.AccessibilityEvent p1)
    {
        return p1.getMovementGranularity();
    }

    public static void setAction(android.view.accessibility.AccessibilityEvent p0, int p1)
    {
        p0.setAction(p1);
        return;
    }

    public static void setMovementGranularity(android.view.accessibility.AccessibilityEvent p0, int p1)
    {
        p0.setMovementGranularity(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompatKitKat {

    AccessibilityEventCompatKitKat()
    {
        return;
    }

    public static int getContentChangeTypes(android.view.accessibility.AccessibilityEvent p1)
    {
        return p1.getContentChangeTypes();
    }

    public static void setContentChangeTypes(android.view.accessibility.AccessibilityEvent p0, int p1)
    {
        p0.setContentChangeTypes(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityManagerCompat$AccessibilityManagerVersionImpl {

    public abstract boolean addAccessibilityStateChangeListener();

    public abstract boolean addTouchExplorationStateChangeListener();

    public abstract java.util.List getEnabledAccessibilityServiceList();

    public abstract java.util.List getInstalledAccessibilityServiceList();

    public abstract boolean isTouchExplorationEnabled();

    public abstract android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper newAccessibilityStateChangeListener();

    public abstract android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper newTouchExplorationStateChangeListener();

    public abstract boolean removeAccessibilityStateChangeListener();

    public abstract boolean removeTouchExplorationStateChangeListener();
}
package android.support.v4.view.accessibility;
public interface AccessibilityManagerCompat$AccessibilityStateChangeListener {

    public abstract void onAccessibilityStateChanged();
}
package android.support.v4.view.accessibility;
public interface AccessibilityManagerCompat$TouchExplorationStateChangeListener {

    public abstract void onTouchExplorationStateChanged();
}
package android.support.v4.view.accessibility;
public final class AccessibilityManagerCompat {
    private static final android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl IMPL;

    static AccessibilityManagerCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerStubImpl();
            } else {
                android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerKitKatImpl();
        }
        return;
    }

    private AccessibilityManagerCompat()
    {
        return;
    }

    public static boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.addAccessibilityStateChangeListener(p1, p2);
    }

    public static boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.addTouchExplorationStateChangeListener(p1, p2);
    }

    public static java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1, int p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.getEnabledAccessibilityServiceList(p1, p2);
    }

    public static java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.getInstalledAccessibilityServiceList(p1);
    }

    public static boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p1)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.isTouchExplorationEnabled(p1);
    }

    public static boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.removeAccessibilityStateChangeListener(p1, p2);
    }

    public static boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompat.IMPL.removeTouchExplorationStateChangeListener(p1, p2);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge {

    public abstract void onAccessibilityStateChanged();
}
package android.support.v4.view.accessibility;
public class AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper implements android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener {
    Object mListener;
    android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge mListenerBridge;

    public AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper(Object p1, android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge p2)
    {
        this.mListener = p1;
        this.mListenerBridge = p2;
        return;
    }

    public boolean equals(Object p6)
    {
        Object v1_0 = 1;
        if (this != p6) {
            if ((p6 != null) && (this.getClass() == p6.getClass())) {
                if (this.mListener != null) {
                    v1_0 = this.mListener.equals(((android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper) p6).mListener);
                } else {
                    if (((android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper) p6).mListener != null) {
                        v1_0 = 0;
                    }
                }
            } else {
                v1_0 = 0;
            }
        }
        return v1_0;
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mListener != null) {
            v0_2 = this.mListener.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public void onAccessibilityStateChanged(boolean p2)
    {
        this.mListenerBridge.onAccessibilityStateChanged(p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompatIcs {

    AccessibilityManagerCompatIcs()
    {
        return;
    }

    public static boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper p2)
    {
        return p1.addAccessibilityStateChangeListener(p2);
    }

    public static java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1, int p2)
    {
        return p1.getEnabledAccessibilityServiceList(p2);
    }

    public static java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p1)
    {
        return p1.getInstalledAccessibilityServiceList();
    }

    public static boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p1)
    {
        return p1.isTouchExplorationEnabled();
    }

    public static boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p1, android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper p2)
    {
        return p1.removeAccessibilityStateChangeListener(p2);
    }
}
package android.support.v4.view.accessibility;
final class AccessibilityManagerCompatKitKat$1 implements android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener {
    final synthetic android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge val$bridge;

    AccessibilityManagerCompatKitKat$1(android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public void onTouchExplorationStateChanged(boolean p2)
    {
        this.val$bridge.onTouchExplorationStateChanged(p2);
        return;
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge {

    public abstract void onTouchExplorationStateChanged();
}
package android.support.v4.view.accessibility;
public class AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper implements android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener {
    final Object mListener;
    final android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge mListenerBridge;

    public AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper(Object p1, android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge p2)
    {
        this.mListener = p1;
        this.mListenerBridge = p2;
        return;
    }

    public boolean equals(Object p6)
    {
        Object v1_0 = 1;
        if (this != p6) {
            if ((p6 != null) && (this.getClass() == p6.getClass())) {
                if (this.mListener != null) {
                    v1_0 = this.mListener.equals(((android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper) p6).mListener);
                } else {
                    if (((android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper) p6).mListener != null) {
                        v1_0 = 0;
                    }
                }
            } else {
                v1_0 = 0;
            }
        }
        return v1_0;
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mListener != null) {
            v0_2 = this.mListener.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public void onTouchExplorationStateChanged(boolean p2)
    {
        this.mListenerBridge.onTouchExplorationStateChanged(p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompatKitKat {

    AccessibilityManagerCompatKitKat()
    {
        return;
    }

    public static boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p1, Object p2)
    {
        return p1.addTouchExplorationStateChangeListener(((android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener) p2));
    }

    public static Object newTouchExplorationStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge p1)
    {
        return new android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$1(p1);
    }

    public static boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p1, Object p2)
    {
        return p1.removeTouchExplorationStateChangeListener(((android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener) p2));
    }
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeInfoCompat$AccessibilityActionCompat {
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_ACCESSIBILITY_FOCUS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_ACCESSIBILITY_FOCUS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_FOCUS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_SELECTION;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLICK;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COLLAPSE;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CONTEXT_CLICK;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COPY;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CUT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_DISMISS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_EXPAND;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_FOCUS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_LONG_CLICK;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_AT_MOVEMENT_GRANULARITY;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_HTML_ELEMENT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PASTE;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_HTML_ELEMENT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_BACKWARD;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_DOWN;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_FORWARD;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_LEFT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_RIGHT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_TO_POSITION;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_UP;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SELECT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_PROGRESS;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_SELECTION;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_TEXT;
    public static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SHOW_ON_SCREEN;
    final Object mAction;

    static AccessibilityNodeInfoCompat$AccessibilityActionCompat()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_FOCUS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(1, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CLEAR_FOCUS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(2, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SELECT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(4, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CLEAR_SELECTION = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(8, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CLICK = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(16, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_LONG_CLICK = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(32, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_ACCESSIBILITY_FOCUS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(64, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(128, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(256, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(512, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_NEXT_HTML_ELEMENT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(1024, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_PREVIOUS_HTML_ELEMENT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(2048, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_FORWARD = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(4096, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_BACKWARD = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(8192, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_COPY = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(16384, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_PASTE = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(32768, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CUT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(65536, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SET_SELECTION = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(131072, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_EXPAND = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(262144, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_COLLAPSE = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(524288, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_DISMISS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(1048576, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SET_TEXT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(2097152, 0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SHOW_ON_SCREEN = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionShowOnScreen());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_TO_POSITION = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionScrollToPosition());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_UP = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionScrollUp());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_LEFT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionScrollLeft());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_DOWN = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionScrollDown());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SCROLL_RIGHT = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionScrollRight());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CONTEXT_CLICK = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionContextClick());
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_SET_PROGRESS = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionSetProgress());
        return;
    }

    public AccessibilityNodeInfoCompat$AccessibilityActionCompat(int p2, CharSequence p3)
    {
        this(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.newAccessibilityAction(p2, p3));
        return;
    }

    AccessibilityNodeInfoCompat$AccessibilityActionCompat(Object p1)
    {
        this.mAction = p1;
        return;
    }

    public int getId()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getAccessibilityActionId(this.mAction);
    }

    public CharSequence getLabel()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getAccessibilityActionLabel(this.mAction);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl {

    public abstract void addAction();

    public abstract void addAction();

    public abstract void addChild();

    public abstract void addChild();

    public abstract boolean canOpenPopup();

    public abstract java.util.List findAccessibilityNodeInfosByText();

    public abstract java.util.List findAccessibilityNodeInfosByViewId();

    public abstract Object findFocus();

    public abstract Object focusSearch();

    public abstract int getAccessibilityActionId();

    public abstract CharSequence getAccessibilityActionLabel();

    public abstract Object getActionContextClick();

    public abstract java.util.List getActionList();

    public abstract Object getActionScrollDown();

    public abstract Object getActionScrollLeft();

    public abstract Object getActionScrollRight();

    public abstract Object getActionScrollToPosition();

    public abstract Object getActionScrollUp();

    public abstract Object getActionSetProgress();

    public abstract Object getActionShowOnScreen();

    public abstract int getActions();

    public abstract void getBoundsInParent();

    public abstract void getBoundsInScreen();

    public abstract Object getChild();

    public abstract int getChildCount();

    public abstract CharSequence getClassName();

    public abstract Object getCollectionInfo();

    public abstract int getCollectionInfoColumnCount();

    public abstract int getCollectionInfoRowCount();

    public abstract int getCollectionInfoSelectionMode();

    public abstract int getCollectionItemColumnIndex();

    public abstract int getCollectionItemColumnSpan();

    public abstract Object getCollectionItemInfo();

    public abstract int getCollectionItemRowIndex();

    public abstract int getCollectionItemRowSpan();

    public abstract CharSequence getContentDescription();

    public abstract int getDrawingOrder();

    public abstract CharSequence getError();

    public abstract android.os.Bundle getExtras();

    public abstract int getInputType();

    public abstract Object getLabelFor();

    public abstract Object getLabeledBy();

    public abstract int getLiveRegion();

    public abstract int getMaxTextLength();

    public abstract int getMovementGranularities();

    public abstract CharSequence getPackageName();

    public abstract Object getParent();

    public abstract Object getRangeInfo();

    public abstract CharSequence getRoleDescription();

    public abstract CharSequence getText();

    public abstract int getTextSelectionEnd();

    public abstract int getTextSelectionStart();

    public abstract Object getTraversalAfter();

    public abstract Object getTraversalBefore();

    public abstract String getViewIdResourceName();

    public abstract Object getWindow();

    public abstract int getWindowId();

    public abstract boolean isAccessibilityFocused();

    public abstract boolean isCheckable();

    public abstract boolean isChecked();

    public abstract boolean isClickable();

    public abstract boolean isCollectionInfoHierarchical();

    public abstract boolean isCollectionItemHeading();

    public abstract boolean isCollectionItemSelected();

    public abstract boolean isContentInvalid();

    public abstract boolean isContextClickable();

    public abstract boolean isDismissable();

    public abstract boolean isEditable();

    public abstract boolean isEnabled();

    public abstract boolean isFocusable();

    public abstract boolean isFocused();

    public abstract boolean isImportantForAccessibility();

    public abstract boolean isLongClickable();

    public abstract boolean isMultiLine();

    public abstract boolean isPassword();

    public abstract boolean isScrollable();

    public abstract boolean isSelected();

    public abstract boolean isVisibleToUser();

    public abstract Object newAccessibilityAction();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract Object obtainCollectionInfo();

    public abstract Object obtainCollectionInfo();

    public abstract Object obtainCollectionItemInfo();

    public abstract Object obtainCollectionItemInfo();

    public abstract Object obtainRangeInfo();

    public abstract boolean performAction();

    public abstract boolean performAction();

    public abstract void recycle();

    public abstract boolean refresh();

    public abstract boolean removeAction();

    public abstract boolean removeChild();

    public abstract boolean removeChild();

    public abstract void setAccessibilityFocused();

    public abstract void setBoundsInParent();

    public abstract void setBoundsInScreen();

    public abstract void setCanOpenPopup();

    public abstract void setCheckable();

    public abstract void setChecked();

    public abstract void setClassName();

    public abstract void setClickable();

    public abstract void setCollectionInfo();

    public abstract void setCollectionItemInfo();

    public abstract void setContentDescription();

    public abstract void setContentInvalid();

    public abstract void setContextClickable();

    public abstract void setDismissable();

    public abstract void setDrawingOrder();

    public abstract void setEditable();

    public abstract void setEnabled();

    public abstract void setError();

    public abstract void setFocusable();

    public abstract void setFocused();

    public abstract void setImportantForAccessibility();

    public abstract void setInputType();

    public abstract void setLabelFor();

    public abstract void setLabelFor();

    public abstract void setLabeledBy();

    public abstract void setLabeledBy();

    public abstract void setLiveRegion();

    public abstract void setLongClickable();

    public abstract void setMaxTextLength();

    public abstract void setMovementGranularities();

    public abstract void setMultiLine();

    public abstract void setPackageName();

    public abstract void setParent();

    public abstract void setParent();

    public abstract void setPassword();

    public abstract void setRangeInfo();

    public abstract void setRoleDescription();

    public abstract void setScrollable();

    public abstract void setSelected();

    public abstract void setSource();

    public abstract void setSource();

    public abstract void setText();

    public abstract void setTextSelection();

    public abstract void setTraversalAfter();

    public abstract void setTraversalAfter();

    public abstract void setTraversalBefore();

    public abstract void setTraversalBefore();

    public abstract void setViewIdResourceName();

    public abstract void setVisibleToUser();
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeInfoCompat$CollectionInfoCompat {
    public static final int SELECTION_MODE_MULTIPLE = 2;
    public static final int SELECTION_MODE_NONE = 0;
    public static final int SELECTION_MODE_SINGLE = 1;
    final Object mInfo;

    AccessibilityNodeInfoCompat$CollectionInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat obtain(int p2, int p3, boolean p4)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtainCollectionInfo(p2, p3, p4));
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat obtain(int p2, int p3, boolean p4, int p5)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtainCollectionInfo(p2, p3, p4, p5));
    }

    public int getColumnCount()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionInfoColumnCount(this.mInfo);
    }

    public int getRowCount()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionInfoRowCount(this.mInfo);
    }

    public int getSelectionMode()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionInfoSelectionMode(this.mInfo);
    }

    public boolean isHierarchical()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isCollectionInfoHierarchical(this.mInfo);
    }
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeInfoCompat$CollectionItemInfoCompat {
    final Object mInfo;

    AccessibilityNodeInfoCompat$CollectionItemInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat obtain(int p7, int p8, int p9, int p10, boolean p11)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtainCollectionItemInfo(p7, p8, p9, p10, p11));
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat obtain(int p8, int p9, int p10, int p11, boolean p12, boolean p13)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtainCollectionItemInfo(p8, p9, p10, p11, p12, p13));
    }

    public int getColumnIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionItemColumnIndex(this.mInfo);
    }

    public int getColumnSpan()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionItemColumnSpan(this.mInfo);
    }

    public int getRowIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionItemRowIndex(this.mInfo);
    }

    public int getRowSpan()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionItemRowSpan(this.mInfo);
    }

    public boolean isHeading()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isCollectionItemHeading(this.mInfo);
    }

    public boolean isSelected()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isCollectionItemSelected(this.mInfo);
    }
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeInfoCompat$RangeInfoCompat {
    public static final int RANGE_TYPE_FLOAT = 1;
    public static final int RANGE_TYPE_INT = 0;
    public static final int RANGE_TYPE_PERCENT = 2;
    final Object mInfo;

    AccessibilityNodeInfoCompat$RangeInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat obtain(int p2, float p3, float p4, float p5)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtainRangeInfo(p2, p3, p4, p5));
    }

    public float getCurrent()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$RangeInfo.getCurrent(this.mInfo);
    }

    public float getMax()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$RangeInfo.getMax(this.mInfo);
    }

    public float getMin()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$RangeInfo.getMin(this.mInfo);
    }

    public int getType()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$RangeInfo.getType(this.mInfo);
    }
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeInfoCompat {
    public static final int ACTION_ACCESSIBILITY_FOCUS = 64;
    public static final String ACTION_ARGUMENT_COLUMN_INT = "android.view.accessibility.action.ARGUMENT_COLUMN_INT";
    public static final String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN = "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN";
    public static final String ACTION_ARGUMENT_HTML_ELEMENT_STRING = "ACTION_ARGUMENT_HTML_ELEMENT_STRING";
    public static final String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT = "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT";
    public static final String ACTION_ARGUMENT_PROGRESS_VALUE = "android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE";
    public static final String ACTION_ARGUMENT_ROW_INT = "android.view.accessibility.action.ARGUMENT_ROW_INT";
    public static final String ACTION_ARGUMENT_SELECTION_END_INT = "ACTION_ARGUMENT_SELECTION_END_INT";
    public static final String ACTION_ARGUMENT_SELECTION_START_INT = "ACTION_ARGUMENT_SELECTION_START_INT";
    public static final String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE = "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE";
    public static final int ACTION_CLEAR_ACCESSIBILITY_FOCUS = 128;
    public static final int ACTION_CLEAR_FOCUS = 2;
    public static final int ACTION_CLEAR_SELECTION = 8;
    public static final int ACTION_CLICK = 16;
    public static final int ACTION_COLLAPSE = 524288;
    public static final int ACTION_COPY = 16384;
    public static final int ACTION_CUT = 65536;
    public static final int ACTION_DISMISS = 1048576;
    public static final int ACTION_EXPAND = 262144;
    public static final int ACTION_FOCUS = 1;
    public static final int ACTION_LONG_CLICK = 32;
    public static final int ACTION_NEXT_AT_MOVEMENT_GRANULARITY = 256;
    public static final int ACTION_NEXT_HTML_ELEMENT = 1024;
    public static final int ACTION_PASTE = 32768;
    public static final int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY = 512;
    public static final int ACTION_PREVIOUS_HTML_ELEMENT = 2048;
    public static final int ACTION_SCROLL_BACKWARD = 8192;
    public static final int ACTION_SCROLL_FORWARD = 4096;
    public static final int ACTION_SELECT = 4;
    public static final int ACTION_SET_SELECTION = 131072;
    public static final int ACTION_SET_TEXT = 2097152;
    public static final int FOCUS_ACCESSIBILITY = 2;
    public static final int FOCUS_INPUT = 1;
    static final android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL = None;
    public static final int MOVEMENT_GRANULARITY_CHARACTER = 1;
    public static final int MOVEMENT_GRANULARITY_LINE = 4;
    public static final int MOVEMENT_GRANULARITY_PAGE = 16;
    public static final int MOVEMENT_GRANULARITY_PARAGRAPH = 8;
    public static final int MOVEMENT_GRANULARITY_WORD = 2;
    private final Object mInfo;

    static AccessibilityNodeInfoCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 23) {
                if (android.os.Build$VERSION.SDK_INT < 22) {
                    if (android.os.Build$VERSION.SDK_INT < 21) {
                        if (android.os.Build$VERSION.SDK_INT < 19) {
                            if (android.os.Build$VERSION.SDK_INT < 18) {
                                if (android.os.Build$VERSION.SDK_INT < 17) {
                                    if (android.os.Build$VERSION.SDK_INT < 16) {
                                        if (android.os.Build$VERSION.SDK_INT < 14) {
                                            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl();
                                        } else {
                                            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl();
                                        }
                                    } else {
                                        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl();
                                    }
                                } else {
                                    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr1Impl();
                                }
                            } else {
                                android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl();
                            }
                        } else {
                            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl();
                        }
                    } else {
                        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi21Impl();
                    }
                } else {
                    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi22Impl();
                }
            } else {
                android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi23Impl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi24Impl();
        }
        return;
    }

    public AccessibilityNodeInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    private static String getActionSymbolicName(int p1)
    {
        String v0;
        switch (p1) {
            case 1:
                v0 = "ACTION_FOCUS";
                break;
            case 2:
                v0 = "ACTION_CLEAR_FOCUS";
                break;
            case 4:
                v0 = "ACTION_SELECT";
                break;
            case 8:
                v0 = "ACTION_CLEAR_SELECTION";
                break;
            case 16:
                v0 = "ACTION_CLICK";
                break;
            case 32:
                v0 = "ACTION_LONG_CLICK";
                break;
            case 64:
                v0 = "ACTION_ACCESSIBILITY_FOCUS";
                break;
            case 128:
                v0 = "ACTION_CLEAR_ACCESSIBILITY_FOCUS";
                break;
            case 256:
                v0 = "ACTION_NEXT_AT_MOVEMENT_GRANULARITY";
                break;
            case 512:
                v0 = "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY";
                break;
            case 1024:
                v0 = "ACTION_NEXT_HTML_ELEMENT";
                break;
            case 2048:
                v0 = "ACTION_PREVIOUS_HTML_ELEMENT";
                break;
            case 4096:
                v0 = "ACTION_SCROLL_FORWARD";
                break;
            case 8192:
                v0 = "ACTION_SCROLL_BACKWARD";
                break;
            case 16384:
                v0 = "ACTION_COPY";
                break;
            case 32768:
                v0 = "ACTION_PASTE";
                break;
            case 65536:
                v0 = "ACTION_CUT";
                break;
            case 131072:
                v0 = "ACTION_SET_SELECTION";
                break;
            default:
                v0 = "ACTION_UNKNOWN";
        }
        return v0;
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain());
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain(p2.mInfo));
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View p1)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain(p1));
    }

    public static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View p1, int p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.obtain(p1, p2));
    }

    static android.support.v4.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(Object p1)
    {
        int v0_0;
        if (p1 == null) {
            v0_0 = 0;
        } else {
            v0_0 = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(p1);
        }
        return v0_0;
    }

    public void addAction(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addAction(this.mInfo, p3);
        return;
    }

    public void addAction(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addAction(this.mInfo, p4.mAction);
        return;
    }

    public void addChild(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addChild(this.mInfo, p3);
        return;
    }

    public void addChild(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.addChild(this.mInfo, p3, p4);
        return;
    }

    public boolean canOpenPopup()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.canOpenPopup(this.mInfo);
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (this.mInfo != null) {
                        if (!this.mInfo.equals(((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p6).mInfo)) {
                            v1 = 0;
                        }
                    } else {
                        if (((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p6).mInfo != null) {
                            v1 = 0;
                        }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public java.util.List findAccessibilityNodeInfosByText(String p8)
    {
        java.util.ArrayList v4_1 = new java.util.ArrayList();
        java.util.List v3 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.findAccessibilityNodeInfosByText(this.mInfo, p8);
        int v2 = v3.size();
        int v0 = 0;
        while (v0 < v2) {
            v4_1.add(new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(v3.get(v0)));
            v0++;
        }
        return v4_1;
    }

    public java.util.List findAccessibilityNodeInfosByViewId(String p6)
    {
        java.util.List v2_0;
        java.util.List v1 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.findAccessibilityNodeInfosByViewId(this.mInfo, p6);
        if (v1 == null) {
            v2_0 = java.util.Collections.emptyList();
        } else {
            v2_0 = new java.util.ArrayList();
            java.util.Iterator v3_1 = v1.iterator();
            while (v3_1.hasNext()) {
                v2_0.add(new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(v3_1.next()));
            }
        }
        return v2_0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.findFocus(this.mInfo, p3));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat focusSearch(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.focusSearch(this.mInfo, p3));
    }

    public java.util.List getActionList()
    {
        java.util.List v4_0;
        java.util.List v2 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActionList(this.mInfo);
        if (v2 == null) {
            v4_0 = java.util.Collections.emptyList();
        } else {
            v4_0 = new java.util.ArrayList();
            int v1 = v2.size();
            int v3 = 0;
            while (v3 < v1) {
                v4_0.add(new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat(v2.get(v3)));
                v3++;
            }
        }
        return v4_0;
    }

    public int getActions()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getActions(this.mInfo);
    }

    public void getBoundsInParent(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getBoundsInParent(this.mInfo, p3);
        return;
    }

    public void getBoundsInScreen(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getBoundsInScreen(this.mInfo, p3);
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getChild(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getChild(this.mInfo, p3));
    }

    public int getChildCount()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getChildCount(this.mInfo);
    }

    public CharSequence getClassName()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getClassName(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat getCollectionInfo()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat v1_2;
        Object v0 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionInfo(this.mInfo);
        if (v0 != null) {
            v1_2 = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat(v0);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat getCollectionItemInfo()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat v1_2;
        Object v0 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getCollectionItemInfo(this.mInfo);
        if (v0 != null) {
            v1_2 = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat(v0);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public CharSequence getContentDescription()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getContentDescription(this.mInfo);
    }

    public int getDrawingOrder()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getDrawingOrder(this.mInfo);
    }

    public CharSequence getError()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getError(this.mInfo);
    }

    public android.os.Bundle getExtras()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getExtras(this.mInfo);
    }

    public Object getInfo()
    {
        return this.mInfo;
    }

    public int getInputType()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getInputType(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getLabelFor()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getLabelFor(this.mInfo));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getLabeledBy()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getLabeledBy(this.mInfo));
    }

    public int getLiveRegion()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getLiveRegion(this.mInfo);
    }

    public int getMaxTextLength()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getMaxTextLength(this.mInfo);
    }

    public int getMovementGranularities()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getMovementGranularities(this.mInfo);
    }

    public CharSequence getPackageName()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getPackageName(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getParent()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getParent(this.mInfo));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat getRangeInfo()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat v1_2;
        Object v0 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getRangeInfo(this.mInfo);
        if (v0 != null) {
            v1_2 = new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat(v0);
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public CharSequence getRoleDescription()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getRoleDescription(this.mInfo);
    }

    public CharSequence getText()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getText(this.mInfo);
    }

    public int getTextSelectionEnd()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getTextSelectionEnd(this.mInfo);
    }

    public int getTextSelectionStart()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getTextSelectionStart(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getTraversalAfter()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getTraversalAfter(this.mInfo));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getTraversalBefore()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getTraversalBefore(this.mInfo));
    }

    public String getViewIdResourceName()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getViewIdResourceName(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityWindowInfoCompat getWindow()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getWindow(this.mInfo));
    }

    public int getWindowId()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.getWindowId(this.mInfo);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mInfo != null) {
            v0_2 = this.mInfo.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isAccessibilityFocused()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isAccessibilityFocused(this.mInfo);
    }

    public boolean isCheckable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isCheckable(this.mInfo);
    }

    public boolean isChecked()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isChecked(this.mInfo);
    }

    public boolean isClickable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isClickable(this.mInfo);
    }

    public boolean isContentInvalid()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isContentInvalid(this.mInfo);
    }

    public boolean isContextClickable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isContextClickable(this.mInfo);
    }

    public boolean isDismissable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isDismissable(this.mInfo);
    }

    public boolean isEditable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isEditable(this.mInfo);
    }

    public boolean isEnabled()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isEnabled(this.mInfo);
    }

    public boolean isFocusable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isFocusable(this.mInfo);
    }

    public boolean isFocused()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isFocused(this.mInfo);
    }

    public boolean isImportantForAccessibility()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isImportantForAccessibility(this.mInfo);
    }

    public boolean isLongClickable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isLongClickable(this.mInfo);
    }

    public boolean isMultiLine()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isMultiLine(this.mInfo);
    }

    public boolean isPassword()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isPassword(this.mInfo);
    }

    public boolean isScrollable()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isScrollable(this.mInfo);
    }

    public boolean isSelected()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isSelected(this.mInfo);
    }

    public boolean isVisibleToUser()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.isVisibleToUser(this.mInfo);
    }

    public boolean performAction(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.performAction(this.mInfo, p3);
    }

    public boolean performAction(int p3, android.os.Bundle p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.performAction(this.mInfo, p3, p4);
    }

    public void recycle()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.recycle(this.mInfo);
        return;
    }

    public boolean refresh()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.refresh(this.mInfo);
    }

    public boolean removeAction(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.removeAction(this.mInfo, p4.mAction);
    }

    public boolean removeChild(android.view.View p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.removeChild(this.mInfo, p3);
    }

    public boolean removeChild(android.view.View p3, int p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.removeChild(this.mInfo, p3, p4);
    }

    public void setAccessibilityFocused(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setAccessibilityFocused(this.mInfo, p3);
        return;
    }

    public void setBoundsInParent(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setBoundsInParent(this.mInfo, p3);
        return;
    }

    public void setBoundsInScreen(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setBoundsInScreen(this.mInfo, p3);
        return;
    }

    public void setCanOpenPopup(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setCanOpenPopup(this.mInfo, p3);
        return;
    }

    public void setCheckable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setCheckable(this.mInfo, p3);
        return;
    }

    public void setChecked(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setChecked(this.mInfo, p3);
        return;
    }

    public void setClassName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setClassName(this.mInfo, p3);
        return;
    }

    public void setClickable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setClickable(this.mInfo, p3);
        return;
    }

    public void setCollectionInfo(Object p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setCollectionInfo(this.mInfo, ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat) p4).mInfo);
        return;
    }

    public void setCollectionItemInfo(Object p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setCollectionItemInfo(this.mInfo, ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat) p4).mInfo);
        return;
    }

    public void setContentDescription(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setContentDescription(this.mInfo, p3);
        return;
    }

    public void setContentInvalid(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setContentInvalid(this.mInfo, p3);
        return;
    }

    public void setContextClickable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setContextClickable(this.mInfo, p3);
        return;
    }

    public void setDismissable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setDismissable(this.mInfo, p3);
        return;
    }

    public void setDrawingOrder(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setDrawingOrder(this.mInfo, p3);
        return;
    }

    public void setEditable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setEditable(this.mInfo, p3);
        return;
    }

    public void setEnabled(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setEnabled(this.mInfo, p3);
        return;
    }

    public void setError(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setError(this.mInfo, p3);
        return;
    }

    public void setFocusable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setFocusable(this.mInfo, p3);
        return;
    }

    public void setFocused(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setFocused(this.mInfo, p3);
        return;
    }

    public void setImportantForAccessibility(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setImportantForAccessibility(this.mInfo, p3);
        return;
    }

    public void setInputType(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setInputType(this.mInfo, p3);
        return;
    }

    public void setLabelFor(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLabelFor(this.mInfo, p3);
        return;
    }

    public void setLabelFor(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLabelFor(this.mInfo, p3, p4);
        return;
    }

    public void setLabeledBy(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLabeledBy(this.mInfo, p3);
        return;
    }

    public void setLabeledBy(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLabeledBy(this.mInfo, p3, p4);
        return;
    }

    public void setLiveRegion(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLiveRegion(this.mInfo, p3);
        return;
    }

    public void setLongClickable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setLongClickable(this.mInfo, p3);
        return;
    }

    public void setMaxTextLength(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setMaxTextLength(this.mInfo, p3);
        return;
    }

    public void setMovementGranularities(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setMovementGranularities(this.mInfo, p3);
        return;
    }

    public void setMultiLine(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setMultiLine(this.mInfo, p3);
        return;
    }

    public void setPackageName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setPackageName(this.mInfo, p3);
        return;
    }

    public void setParent(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setParent(this.mInfo, p3);
        return;
    }

    public void setParent(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setParent(this.mInfo, p3, p4);
        return;
    }

    public void setPassword(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setPassword(this.mInfo, p3);
        return;
    }

    public void setRangeInfo(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setRangeInfo(this.mInfo, p4.mInfo);
        return;
    }

    public void setRoleDescription(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setRoleDescription(this.mInfo, p3);
        return;
    }

    public void setScrollable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setScrollable(this.mInfo, p3);
        return;
    }

    public void setSelected(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setSelected(this.mInfo, p3);
        return;
    }

    public void setSource(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setSource(this.mInfo, p3);
        return;
    }

    public void setSource(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setSource(this.mInfo, p3, p4);
        return;
    }

    public void setText(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setText(this.mInfo, p3);
        return;
    }

    public void setTextSelection(int p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setTextSelection(this.mInfo, p3, p4);
        return;
    }

    public void setTraversalAfter(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setTraversalAfter(this.mInfo, p3);
        return;
    }

    public void setTraversalAfter(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setTraversalAfter(this.mInfo, p3, p4);
        return;
    }

    public void setTraversalBefore(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setTraversalBefore(this.mInfo, p3);
        return;
    }

    public void setTraversalBefore(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setTraversalBefore(this.mInfo, p3, p4);
        return;
    }

    public void setViewIdResourceName(String p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setViewIdResourceName(this.mInfo, p3);
        return;
    }

    public void setVisibleToUser(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.IMPL.setVisibleToUser(this.mInfo, p3);
        return;
    }

    public String toString()
    {
        StringBuilder v3_1 = new StringBuilder();
        v3_1.append(super.toString());
        android.graphics.Rect v2_1 = new android.graphics.Rect();
        this.getBoundsInParent(v2_1);
        v3_1.append(new StringBuilder().append("; boundsInParent: ").append(v2_1).toString());
        this.getBoundsInScreen(v2_1);
        v3_1.append(new StringBuilder().append("; boundsInScreen: ").append(v2_1).toString());
        v3_1.append("; packageName: ").append(this.getPackageName());
        v3_1.append("; className: ").append(this.getClassName());
        v3_1.append("; text: ").append(this.getText());
        v3_1.append("; contentDescription: ").append(this.getContentDescription());
        v3_1.append("; viewId: ").append(this.getViewIdResourceName());
        v3_1.append("; checkable: ").append(this.isCheckable());
        v3_1.append("; checked: ").append(this.isChecked());
        v3_1.append("; focusable: ").append(this.isFocusable());
        v3_1.append("; focused: ").append(this.isFocused());
        v3_1.append("; selected: ").append(this.isSelected());
        v3_1.append("; clickable: ").append(this.isClickable());
        v3_1.append("; longClickable: ").append(this.isLongClickable());
        v3_1.append("; enabled: ").append(this.isEnabled());
        v3_1.append("; password: ").append(this.isPassword());
        v3_1.append(new StringBuilder().append("; scrollable: ").append(this.isScrollable()).toString());
        v3_1.append("; [");
        int v1 = this.getActions();
        while (v1 != 0) {
            int v0 = (1 << Integer.numberOfTrailingZeros(v1));
            v1 &= (v0 ^ -1);
            v3_1.append(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActionSymbolicName(v0));
            if (v1 != 0) {
                v3_1.append(", ");
            }
        }
        v3_1.append("]");
        return v3_1.toString();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi21$CollectionInfo {

    AccessibilityNodeInfoCompatApi21$CollectionInfo()
    {
        return;
    }

    public static int getSelectionMode(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionInfo) p1).getSelectionMode();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi21$CollectionItemInfo {

    AccessibilityNodeInfoCompatApi21$CollectionItemInfo()
    {
        return;
    }

    public static boolean isSelected(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).isSelected();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi21 {

    AccessibilityNodeInfoCompatApi21()
    {
        return;
    }

    static void addAction(Object p0, Object p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addAction(((android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction) p1));
        return;
    }

    static int getAccessibilityActionId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction) p1).getId();
    }

    static CharSequence getAccessibilityActionLabel(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction) p1).getLabel();
    }

    static java.util.List getActionList(Object p1)
    {
        return ((java.util.List) ((android.view.accessibility.AccessibilityNodeInfo) p1).getActionList());
    }

    public static CharSequence getError(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getError();
    }

    public static int getMaxTextLength(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getMaxTextLength();
    }

    public static Object getWindow(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getWindow();
    }

    static Object newAccessibilityAction(int p1, CharSequence p2)
    {
        return new android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction(p1, p2);
    }

    public static Object obtainCollectionInfo(int p1, int p2, boolean p3, int p4)
    {
        return android.view.accessibility.AccessibilityNodeInfo$CollectionInfo.obtain(p1, p2, p3, p4);
    }

    public static Object obtainCollectionItemInfo(int p1, int p2, int p3, int p4, boolean p5, boolean p6)
    {
        return android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo.obtain(p1, p2, p3, p4, p5, p6);
    }

    public static boolean removeAction(Object p1, Object p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).removeAction(((android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction) p2));
    }

    public static boolean removeChild(Object p1, android.view.View p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).removeChild(p2);
    }

    public static boolean removeChild(Object p1, android.view.View p2, int p3)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).removeChild(p2, p3);
    }

    public static void setError(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setError(p1);
        return;
    }

    public static void setMaxTextLength(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setMaxTextLength(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi22 {

    AccessibilityNodeInfoCompatApi22()
    {
        return;
    }

    public static Object getTraversalAfter(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getTraversalAfter();
    }

    public static Object getTraversalBefore(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getTraversalBefore();
    }

    public static void setTraversalAfter(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setTraversalAfter(p1);
        return;
    }

    public static void setTraversalAfter(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setTraversalAfter(p1, p2);
        return;
    }

    public static void setTraversalBefore(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setTraversalBefore(p1);
        return;
    }

    public static void setTraversalBefore(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setTraversalBefore(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi23 {

    AccessibilityNodeInfoCompatApi23()
    {
        return;
    }

    public static Object getActionContextClick()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_CONTEXT_CLICK;
    }

    public static Object getActionScrollDown()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SCROLL_DOWN;
    }

    public static Object getActionScrollLeft()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SCROLL_LEFT;
    }

    public static Object getActionScrollRight()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SCROLL_RIGHT;
    }

    public static Object getActionScrollToPosition()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SCROLL_TO_POSITION;
    }

    public static Object getActionScrollUp()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SCROLL_UP;
    }

    public static Object getActionShowOnScreen()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SHOW_ON_SCREEN;
    }

    public static boolean isContextClickable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isContextClickable();
    }

    public static void setContextClickable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setContextClickable(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatApi24 {

    AccessibilityNodeInfoCompatApi24()
    {
        return;
    }

    public static Object getActionSetProgress()
    {
        return android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction.ACTION_SET_PROGRESS;
    }

    public static int getDrawingOrder(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getDrawingOrder();
    }

    public static boolean isImportantForAccessibility(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isImportantForAccessibility();
    }

    public static void setDrawingOrder(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setDrawingOrder(p1);
        return;
    }

    public static void setImportantForAccessibility(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setImportantForAccessibility(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatIcs {

    AccessibilityNodeInfoCompatIcs()
    {
        return;
    }

    public static void addAction(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addAction(p1);
        return;
    }

    public static void addChild(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addChild(p1);
        return;
    }

    public static java.util.List findAccessibilityNodeInfosByText(Object p1, String p2)
    {
        return ((java.util.List) ((android.view.accessibility.AccessibilityNodeInfo) p1).findAccessibilityNodeInfosByText(p2));
    }

    public static int getActions(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getActions();
    }

    public static void getBoundsInParent(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).getBoundsInParent(p1);
        return;
    }

    public static void getBoundsInScreen(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).getBoundsInScreen(p1);
        return;
    }

    public static Object getChild(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getChild(p2);
    }

    public static int getChildCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getChildCount();
    }

    public static CharSequence getClassName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getClassName();
    }

    public static CharSequence getContentDescription(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getContentDescription();
    }

    public static CharSequence getPackageName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getPackageName();
    }

    public static Object getParent(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getParent();
    }

    public static CharSequence getText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getText();
    }

    public static int getWindowId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getWindowId();
    }

    public static boolean isCheckable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isCheckable();
    }

    public static boolean isChecked(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isChecked();
    }

    public static boolean isClickable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isClickable();
    }

    public static boolean isEnabled(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isEnabled();
    }

    public static boolean isFocusable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isFocusable();
    }

    public static boolean isFocused(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isFocused();
    }

    public static boolean isLongClickable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isLongClickable();
    }

    public static boolean isPassword(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isPassword();
    }

    public static boolean isScrollable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isScrollable();
    }

    public static boolean isSelected(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isSelected();
    }

    public static Object obtain()
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain();
    }

    public static Object obtain(android.view.View p1)
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain(p1);
    }

    public static Object obtain(Object p1)
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain(((android.view.accessibility.AccessibilityNodeInfo) p1));
    }

    public static boolean performAction(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).performAction(p2);
    }

    public static void recycle(Object p0)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).recycle();
        return;
    }

    public static void setBoundsInParent(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setBoundsInParent(p1);
        return;
    }

    public static void setBoundsInScreen(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setBoundsInScreen(p1);
        return;
    }

    public static void setCheckable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setCheckable(p1);
        return;
    }

    public static void setChecked(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setChecked(p1);
        return;
    }

    public static void setClassName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setClassName(p1);
        return;
    }

    public static void setClickable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setClickable(p1);
        return;
    }

    public static void setContentDescription(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setContentDescription(p1);
        return;
    }

    public static void setEnabled(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setEnabled(p1);
        return;
    }

    public static void setFocusable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setFocusable(p1);
        return;
    }

    public static void setFocused(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setFocused(p1);
        return;
    }

    public static void setLongClickable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLongClickable(p1);
        return;
    }

    public static void setPackageName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setPackageName(p1);
        return;
    }

    public static void setParent(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setParent(p1);
        return;
    }

    public static void setPassword(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setPassword(p1);
        return;
    }

    public static void setScrollable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setScrollable(p1);
        return;
    }

    public static void setSelected(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setSelected(p1);
        return;
    }

    public static void setSource(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setSource(p1);
        return;
    }

    public static void setText(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setText(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatJellyBean {

    AccessibilityNodeInfoCompatJellyBean()
    {
        return;
    }

    public static void addChild(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).addChild(p1, p2);
        return;
    }

    public static Object findFocus(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).findFocus(p2);
    }

    public static Object focusSearch(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).focusSearch(p2);
    }

    public static int getMovementGranularities(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getMovementGranularities();
    }

    public static boolean isAccessibilityFocused(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isAccessibilityFocused();
    }

    public static boolean isVisibleToUser(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isVisibleToUser();
    }

    public static Object obtain(android.view.View p1, int p2)
    {
        return android.view.accessibility.AccessibilityNodeInfo.obtain(p1, p2);
    }

    public static boolean performAction(Object p1, int p2, android.os.Bundle p3)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).performAction(p2, p3);
    }

    public static void setAccesibilityFocused(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setAccessibilityFocused(p1);
        return;
    }

    public static void setMovementGranularities(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setMovementGranularities(p1);
        return;
    }

    public static void setParent(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setParent(p1, p2);
        return;
    }

    public static void setSource(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setSource(p1, p2);
        return;
    }

    public static void setVisibleToUser(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setVisibleToUser(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatJellybeanMr1 {

    AccessibilityNodeInfoCompatJellybeanMr1()
    {
        return;
    }

    public static Object getLabelFor(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getLabelFor();
    }

    public static Object getLabeledBy(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getLabeledBy();
    }

    public static void setLabelFor(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLabelFor(p1);
        return;
    }

    public static void setLabelFor(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLabelFor(p1, p2);
        return;
    }

    public static void setLabeledBy(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLabeledBy(p1);
        return;
    }

    public static void setLabeledBy(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLabeledBy(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatJellybeanMr2 {

    AccessibilityNodeInfoCompatJellybeanMr2()
    {
        return;
    }

    public static java.util.List findAccessibilityNodeInfosByViewId(Object p1, String p2)
    {
        return ((java.util.List) ((android.view.accessibility.AccessibilityNodeInfo) p1).findAccessibilityNodeInfosByViewId(p2));
    }

    public static int getTextSelectionEnd(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getTextSelectionEnd();
    }

    public static int getTextSelectionStart(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getTextSelectionStart();
    }

    public static String getViewIdResourceName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getViewIdResourceName();
    }

    public static boolean isEditable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isEditable();
    }

    public static boolean refresh(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).refresh();
    }

    public static void setEditable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setEditable(p1);
        return;
    }

    public static void setTextSelection(Object p0, int p1, int p2)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setTextSelection(p1, p2);
        return;
    }

    public static void setViewIdResourceName(Object p0, String p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setViewIdResourceName(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatKitKat$CollectionInfo {

    AccessibilityNodeInfoCompatKitKat$CollectionInfo()
    {
        return;
    }

    static int getColumnCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionInfo) p1).getColumnCount();
    }

    static int getRowCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionInfo) p1).getRowCount();
    }

    static boolean isHierarchical(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionInfo) p1).isHierarchical();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatKitKat$CollectionItemInfo {

    AccessibilityNodeInfoCompatKitKat$CollectionItemInfo()
    {
        return;
    }

    static int getColumnIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).getColumnIndex();
    }

    static int getColumnSpan(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).getColumnSpan();
    }

    static int getRowIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).getRowIndex();
    }

    static int getRowSpan(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).getRowSpan();
    }

    static boolean isHeading(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1).isHeading();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatKitKat$RangeInfo {

    AccessibilityNodeInfoCompatKitKat$RangeInfo()
    {
        return;
    }

    static float getCurrent(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$RangeInfo) p1).getCurrent();
    }

    static float getMax(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$RangeInfo) p1).getMax();
    }

    static float getMin(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$RangeInfo) p1).getMin();
    }

    static int getType(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo$RangeInfo) p1).getType();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompatKitKat {
    private static final String ROLE_DESCRIPTION_KEY = "AccessibilityNodeInfo.roleDescription";
    private static final String TRAITS_KEY = "android.view.accessibility.AccessibilityNodeInfo.traits";
    private static final long TRAIT_HAS_IMAGE = 1;
    private static final byte TRAIT_UNSET = -0x1;

    AccessibilityNodeInfoCompatKitKat()
    {
        return;
    }

    public static boolean canOpenPopup(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).canOpenPopup();
    }

    static Object getCollectionInfo(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getCollectionInfo();
    }

    static Object getCollectionItemInfo(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getCollectionItemInfo();
    }

    public static android.os.Bundle getExtras(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getExtras();
    }

    public static int getInputType(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getInputType();
    }

    static int getLiveRegion(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getLiveRegion();
    }

    static Object getRangeInfo(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).getRangeInfo();
    }

    public static CharSequence getRoleDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getExtras(p2).getCharSequence("AccessibilityNodeInfo.roleDescription");
    }

    private static long getTraits(Object p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getExtras(p4).getLong("android.view.accessibility.AccessibilityNodeInfo.traits", -1);
    }

    public static boolean isContentInvalid(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isContentInvalid();
    }

    public static boolean isDismissable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isDismissable();
    }

    public static boolean isMultiLine(Object p1)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) p1).isMultiLine();
    }

    public static Object obtainCollectionInfo(int p1, int p2, boolean p3)
    {
        return android.view.accessibility.AccessibilityNodeInfo$CollectionInfo.obtain(p1, p2, p3);
    }

    public static Object obtainCollectionInfo(int p1, int p2, boolean p3, int p4)
    {
        return android.view.accessibility.AccessibilityNodeInfo$CollectionInfo.obtain(p1, p2, p3);
    }

    public static Object obtainCollectionItemInfo(int p1, int p2, int p3, int p4, boolean p5)
    {
        return android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo.obtain(p1, p2, p3, p4, p5);
    }

    public static Object obtainRangeInfo(int p1, float p2, float p3, float p4)
    {
        return android.view.accessibility.AccessibilityNodeInfo$RangeInfo.obtain(p1, p2, p3, p4);
    }

    public static void setCanOpenPopup(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setCanOpenPopup(p1);
        return;
    }

    public static void setCollectionInfo(Object p0, Object p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setCollectionInfo(((android.view.accessibility.AccessibilityNodeInfo$CollectionInfo) p1));
        return;
    }

    public static void setCollectionItemInfo(Object p0, Object p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setCollectionItemInfo(((android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo) p1));
        return;
    }

    public static void setContentInvalid(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setContentInvalid(p1);
        return;
    }

    public static void setDismissable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setDismissable(p1);
        return;
    }

    public static void setInputType(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setInputType(p1);
        return;
    }

    static void setLiveRegion(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setLiveRegion(p1);
        return;
    }

    public static void setMultiLine(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setMultiLine(p1);
        return;
    }

    public static void setRangeInfo(Object p0, Object p1)
    {
        ((android.view.accessibility.AccessibilityNodeInfo) p0).setRangeInfo(((android.view.accessibility.AccessibilityNodeInfo$RangeInfo) p1));
        return;
    }

    public static void setRoleDescription(Object p2, CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getExtras(p2).putCharSequence("AccessibilityNodeInfo.roleDescription", p3);
        return;
    }

    private static void setTrait(Object p7, long p8)
    {
        android.os.Bundle v0 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getExtras(p7);
        v0.putLong("android.view.accessibility.AccessibilityNodeInfo.traits", (v0.getLong("android.view.accessibility.AccessibilityNodeInfo.traits", 0) | p8));
        return;
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl {

    public abstract Object newAccessibilityNodeProviderBridge();
}
package android.support.v4.view.accessibility;
public class AccessibilityNodeProviderCompat {
    public static final int HOST_VIEW_ID = 255;
    private static final android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL;
    private final Object mProvider;

    static AccessibilityNodeProviderCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            if (android.os.Build$VERSION.SDK_INT < 16) {
                android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl();
            } else {
                android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl();
        }
        return;
    }

    public AccessibilityNodeProviderCompat()
    {
        this.mProvider = android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.IMPL.newAccessibilityNodeProviderBridge(this);
        return;
    }

    public AccessibilityNodeProviderCompat(Object p1)
    {
        this.mProvider = p1;
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int p2)
    {
        return 0;
    }

    public java.util.List findAccessibilityNodeInfosByText(String p2, int p3)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int p2)
    {
        return 0;
    }

    public Object getProvider()
    {
        return this.mProvider;
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return 0;
    }
}
package android.support.v4.view.accessibility;
final class AccessibilityNodeProviderCompatJellyBean$1 extends android.view.accessibility.AccessibilityNodeProvider {
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge;

    AccessibilityNodeProviderCompatJellyBean$1(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) this.val$bridge.createAccessibilityNodeInfo(p2));
    }

    public java.util.List findAccessibilityNodeInfosByText(String p2, int p3)
    {
        return this.val$bridge.findAccessibilityNodeInfosByText(p2, p3);
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return this.val$bridge.performAction(p2, p3, p4);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge {

    public abstract Object createAccessibilityNodeInfo();

    public abstract java.util.List findAccessibilityNodeInfosByText();

    public abstract boolean performAction();
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompatJellyBean {

    AccessibilityNodeProviderCompatJellyBean()
    {
        return;
    }

    public static Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge p1)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1(p1);
    }
}
package android.support.v4.view.accessibility;
final class AccessibilityNodeProviderCompatKitKat$1 extends android.view.accessibility.AccessibilityNodeProvider {
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge val$bridge;

    AccessibilityNodeProviderCompatKitKat$1(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge p1)
    {
        this.val$bridge = p1;
        return;
    }

    public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) this.val$bridge.createAccessibilityNodeInfo(p2));
    }

    public java.util.List findAccessibilityNodeInfosByText(String p2, int p3)
    {
        return this.val$bridge.findAccessibilityNodeInfosByText(p2, p3);
    }

    public android.view.accessibility.AccessibilityNodeInfo findFocus(int p2)
    {
        return ((android.view.accessibility.AccessibilityNodeInfo) this.val$bridge.findFocus(p2));
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return this.val$bridge.performAction(p2, p3, p4);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge {

    public abstract Object createAccessibilityNodeInfo();

    public abstract java.util.List findAccessibilityNodeInfosByText();

    public abstract Object findFocus();

    public abstract boolean performAction();
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompatKitKat {

    AccessibilityNodeProviderCompatKitKat()
    {
        return;
    }

    public static Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge p1)
    {
        return new android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1(p1);
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityRecordCompat$AccessibilityRecordImpl {

    public abstract int getAddedCount();

    public abstract CharSequence getBeforeText();

    public abstract CharSequence getClassName();

    public abstract CharSequence getContentDescription();

    public abstract int getCurrentItemIndex();

    public abstract int getFromIndex();

    public abstract int getItemCount();

    public abstract int getMaxScrollX();

    public abstract int getMaxScrollY();

    public abstract android.os.Parcelable getParcelableData();

    public abstract int getRemovedCount();

    public abstract int getScrollX();

    public abstract int getScrollY();

    public abstract android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource();

    public abstract java.util.List getText();

    public abstract int getToIndex();

    public abstract int getWindowId();

    public abstract boolean isChecked();

    public abstract boolean isEnabled();

    public abstract boolean isFullScreen();

    public abstract boolean isPassword();

    public abstract boolean isScrollable();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract void recycle();

    public abstract void setAddedCount();

    public abstract void setBeforeText();

    public abstract void setChecked();

    public abstract void setClassName();

    public abstract void setContentDescription();

    public abstract void setCurrentItemIndex();

    public abstract void setEnabled();

    public abstract void setFromIndex();

    public abstract void setFullScreen();

    public abstract void setItemCount();

    public abstract void setMaxScrollX();

    public abstract void setMaxScrollY();

    public abstract void setParcelableData();

    public abstract void setPassword();

    public abstract void setRemovedCount();

    public abstract void setScrollX();

    public abstract void setScrollY();

    public abstract void setScrollable();

    public abstract void setSource();

    public abstract void setSource();

    public abstract void setToIndex();
}
package android.support.v4.view.accessibility;
public class AccessibilityRecordCompat {
    private static final android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl IMPL;
    private final Object mRecord;

    static AccessibilityRecordCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            if (android.os.Build$VERSION.SDK_INT < 15) {
                if (android.os.Build$VERSION.SDK_INT < 14) {
                    android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl();
                } else {
                    android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl();
                }
            } else {
                android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl();
        }
        return;
    }

    public AccessibilityRecordCompat(Object p1)
    {
        this.mRecord = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat obtain()
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.obtain());
    }

    public static android.support.v4.view.accessibility.AccessibilityRecordCompat obtain(android.support.v4.view.accessibility.AccessibilityRecordCompat p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityRecordCompat(android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.obtain(p3.mRecord));
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (this.mRecord != null) {
                        if (!this.mRecord.equals(((android.support.v4.view.accessibility.AccessibilityRecordCompat) p6).mRecord)) {
                            v1 = 0;
                        }
                    } else {
                        if (((android.support.v4.view.accessibility.AccessibilityRecordCompat) p6).mRecord != null) {
                            v1 = 0;
                        }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public int getAddedCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getAddedCount(this.mRecord);
    }

    public CharSequence getBeforeText()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getBeforeText(this.mRecord);
    }

    public CharSequence getClassName()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getClassName(this.mRecord);
    }

    public CharSequence getContentDescription()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getContentDescription(this.mRecord);
    }

    public int getCurrentItemIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getCurrentItemIndex(this.mRecord);
    }

    public int getFromIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getFromIndex(this.mRecord);
    }

    public Object getImpl()
    {
        return this.mRecord;
    }

    public int getItemCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getItemCount(this.mRecord);
    }

    public int getMaxScrollX()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getMaxScrollX(this.mRecord);
    }

    public int getMaxScrollY()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getMaxScrollY(this.mRecord);
    }

    public android.os.Parcelable getParcelableData()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getParcelableData(this.mRecord);
    }

    public int getRemovedCount()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getRemovedCount(this.mRecord);
    }

    public int getScrollX()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getScrollX(this.mRecord);
    }

    public int getScrollY()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getScrollY(this.mRecord);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getSource(this.mRecord);
    }

    public java.util.List getText()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getText(this.mRecord);
    }

    public int getToIndex()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getToIndex(this.mRecord);
    }

    public int getWindowId()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.getWindowId(this.mRecord);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mRecord != null) {
            v0_2 = this.mRecord.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isChecked()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isChecked(this.mRecord);
    }

    public boolean isEnabled()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isEnabled(this.mRecord);
    }

    public boolean isFullScreen()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isFullScreen(this.mRecord);
    }

    public boolean isPassword()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isPassword(this.mRecord);
    }

    public boolean isScrollable()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.isScrollable(this.mRecord);
    }

    public void recycle()
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.recycle(this.mRecord);
        return;
    }

    public void setAddedCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setAddedCount(this.mRecord, p3);
        return;
    }

    public void setBeforeText(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setBeforeText(this.mRecord, p3);
        return;
    }

    public void setChecked(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setChecked(this.mRecord, p3);
        return;
    }

    public void setClassName(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setClassName(this.mRecord, p3);
        return;
    }

    public void setContentDescription(CharSequence p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setContentDescription(this.mRecord, p3);
        return;
    }

    public void setCurrentItemIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setCurrentItemIndex(this.mRecord, p3);
        return;
    }

    public void setEnabled(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setEnabled(this.mRecord, p3);
        return;
    }

    public void setFromIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setFromIndex(this.mRecord, p3);
        return;
    }

    public void setFullScreen(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setFullScreen(this.mRecord, p3);
        return;
    }

    public void setItemCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setItemCount(this.mRecord, p3);
        return;
    }

    public void setMaxScrollX(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setMaxScrollX(this.mRecord, p3);
        return;
    }

    public void setMaxScrollY(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setMaxScrollY(this.mRecord, p3);
        return;
    }

    public void setParcelableData(android.os.Parcelable p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setParcelableData(this.mRecord, p3);
        return;
    }

    public void setPassword(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setPassword(this.mRecord, p3);
        return;
    }

    public void setRemovedCount(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setRemovedCount(this.mRecord, p3);
        return;
    }

    public void setScrollX(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollX(this.mRecord, p3);
        return;
    }

    public void setScrollY(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollY(this.mRecord, p3);
        return;
    }

    public void setScrollable(boolean p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setScrollable(this.mRecord, p3);
        return;
    }

    public void setSource(android.view.View p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setSource(this.mRecord, p3);
        return;
    }

    public void setSource(android.view.View p3, int p4)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setSource(this.mRecord, p3, p4);
        return;
    }

    public void setToIndex(int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompat.IMPL.setToIndex(this.mRecord, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompatIcs {

    AccessibilityRecordCompatIcs()
    {
        return;
    }

    public static int getAddedCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getAddedCount();
    }

    public static CharSequence getBeforeText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getBeforeText();
    }

    public static CharSequence getClassName(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getClassName();
    }

    public static CharSequence getContentDescription(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getContentDescription();
    }

    public static int getCurrentItemIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getCurrentItemIndex();
    }

    public static int getFromIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getFromIndex();
    }

    public static int getItemCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getItemCount();
    }

    public static android.os.Parcelable getParcelableData(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getParcelableData();
    }

    public static int getRemovedCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getRemovedCount();
    }

    public static int getScrollX(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getScrollX();
    }

    public static int getScrollY(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getScrollY();
    }

    public static Object getSource(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getSource();
    }

    public static java.util.List getText(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getText();
    }

    public static int getToIndex(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getToIndex();
    }

    public static int getWindowId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getWindowId();
    }

    public static boolean isChecked(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isChecked();
    }

    public static boolean isEnabled(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isEnabled();
    }

    public static boolean isFullScreen(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isFullScreen();
    }

    public static boolean isPassword(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isPassword();
    }

    public static boolean isScrollable(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).isScrollable();
    }

    public static Object obtain()
    {
        return android.view.accessibility.AccessibilityRecord.obtain();
    }

    public static Object obtain(Object p1)
    {
        return android.view.accessibility.AccessibilityRecord.obtain(((android.view.accessibility.AccessibilityRecord) p1));
    }

    public static void recycle(Object p0)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).recycle();
        return;
    }

    public static void setAddedCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setAddedCount(p1);
        return;
    }

    public static void setBeforeText(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setBeforeText(p1);
        return;
    }

    public static void setChecked(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setChecked(p1);
        return;
    }

    public static void setClassName(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setClassName(p1);
        return;
    }

    public static void setContentDescription(Object p0, CharSequence p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setContentDescription(p1);
        return;
    }

    public static void setCurrentItemIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setCurrentItemIndex(p1);
        return;
    }

    public static void setEnabled(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setEnabled(p1);
        return;
    }

    public static void setFromIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setFromIndex(p1);
        return;
    }

    public static void setFullScreen(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setFullScreen(p1);
        return;
    }

    public static void setItemCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setItemCount(p1);
        return;
    }

    public static void setParcelableData(Object p0, android.os.Parcelable p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setParcelableData(p1);
        return;
    }

    public static void setPassword(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setPassword(p1);
        return;
    }

    public static void setRemovedCount(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setRemovedCount(p1);
        return;
    }

    public static void setScrollX(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollX(p1);
        return;
    }

    public static void setScrollY(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollY(p1);
        return;
    }

    public static void setScrollable(Object p0, boolean p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setScrollable(p1);
        return;
    }

    public static void setSource(Object p0, android.view.View p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setSource(p1);
        return;
    }

    public static void setToIndex(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setToIndex(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompatIcsMr1 {

    AccessibilityRecordCompatIcsMr1()
    {
        return;
    }

    public static int getMaxScrollX(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getMaxScrollX();
    }

    public static int getMaxScrollY(Object p1)
    {
        return ((android.view.accessibility.AccessibilityRecord) p1).getMaxScrollY();
    }

    public static void setMaxScrollX(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setMaxScrollX(p1);
        return;
    }

    public static void setMaxScrollY(Object p0, int p1)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setMaxScrollY(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompatJellyBean {

    AccessibilityRecordCompatJellyBean()
    {
        return;
    }

    public static void setSource(Object p0, android.view.View p1, int p2)
    {
        ((android.view.accessibility.AccessibilityRecord) p0).setSource(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
interface AccessibilityWindowInfoCompat$AccessibilityWindowInfoImpl {

    public abstract Object getAnchor();

    public abstract void getBoundsInScreen();

    public abstract Object getChild();

    public abstract int getChildCount();

    public abstract int getId();

    public abstract int getLayer();

    public abstract Object getParent();

    public abstract Object getRoot();

    public abstract CharSequence getTitle();

    public abstract int getType();

    public abstract boolean isAccessibilityFocused();

    public abstract boolean isActive();

    public abstract boolean isFocused();

    public abstract Object obtain();

    public abstract Object obtain();

    public abstract void recycle();
}
package android.support.v4.view.accessibility;
public class AccessibilityWindowInfoCompat {
    private static final android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoImpl IMPL = None;
    public static final int TYPE_ACCESSIBILITY_OVERLAY = 4;
    public static final int TYPE_APPLICATION = 1;
    public static final int TYPE_INPUT_METHOD = 2;
    public static final int TYPE_SPLIT_SCREEN_DIVIDER = 5;
    public static final int TYPE_SYSTEM = 3;
    private static final int UNDEFINED = 255;
    private Object mInfo;

    static AccessibilityWindowInfoCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 24) {
            if (android.os.Build$VERSION.SDK_INT < 21) {
                android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoStubImpl();
            } else {
                android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi21Impl();
            }
        } else {
            android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL = new android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi24Impl();
        }
        return;
    }

    private AccessibilityWindowInfoCompat(Object p1)
    {
        this.mInfo = p1;
        return;
    }

    public static android.support.v4.view.accessibility.AccessibilityWindowInfoCompat obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.obtain());
    }

    public static android.support.v4.view.accessibility.AccessibilityWindowInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat p2)
    {
        android.support.v4.view.accessibility.AccessibilityWindowInfoCompat v0_2;
        if (p2 != null) {
            v0_2 = android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.obtain(p2.mInfo));
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    private static String typeToString(int p1)
    {
        String v0;
        switch (p1) {
            case 1:
                v0 = "TYPE_APPLICATION";
                break;
            case 2:
                v0 = "TYPE_INPUT_METHOD";
                break;
            case 3:
                v0 = "TYPE_SYSTEM";
                break;
            case 4:
                v0 = "TYPE_ACCESSIBILITY_OVERLAY";
                break;
            default:
                v0 = "<UNKNOWN>";
        }
        return v0;
    }

    static android.support.v4.view.accessibility.AccessibilityWindowInfoCompat wrapNonNullInstance(Object p1)
    {
        int v0_0;
        if (p1 == null) {
            v0_0 = 0;
        } else {
            v0_0 = new android.support.v4.view.accessibility.AccessibilityWindowInfoCompat(p1);
        }
        return v0_0;
    }

    public boolean equals(Object p6)
    {
        int v1 = 1;
        if (this != p6) {
            if (p6 != null) {
                if (this.getClass() == p6.getClass()) {
                    if (this.mInfo != null) {
                        if (!this.mInfo.equals(((android.support.v4.view.accessibility.AccessibilityWindowInfoCompat) p6).mInfo)) {
                            v1 = 0;
                        }
                    } else {
                        if (((android.support.v4.view.accessibility.AccessibilityWindowInfoCompat) p6).mInfo != null) {
                            v1 = 0;
                        }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getAnchor()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getAnchor(this.mInfo));
    }

    public void getBoundsInScreen(android.graphics.Rect p3)
    {
        android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getBoundsInScreen(this.mInfo, p3);
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityWindowInfoCompat getChild(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getChild(this.mInfo, p3));
    }

    public int getChildCount()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getChildCount(this.mInfo);
    }

    public int getId()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getId(this.mInfo);
    }

    public int getLayer()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getLayer(this.mInfo);
    }

    public android.support.v4.view.accessibility.AccessibilityWindowInfoCompat getParent()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getParent(this.mInfo));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getRoot()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getRoot(this.mInfo));
    }

    public CharSequence getTitle()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getTitle(this.mInfo);
    }

    public int getType()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.getType(this.mInfo);
    }

    public int hashCode()
    {
        int v0_2;
        if (this.mInfo != null) {
            v0_2 = this.mInfo.hashCode();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public boolean isAccessibilityFocused()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.isAccessibilityFocused(this.mInfo);
    }

    public boolean isActive()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.isActive(this.mInfo);
    }

    public boolean isFocused()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.isFocused(this.mInfo);
    }

    public void recycle()
    {
        android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.IMPL.recycle(this.mInfo);
        return;
    }

    public String toString()
    {
        String v2_13;
        int v3 = 1;
        StringBuilder v1_1 = new StringBuilder();
        android.graphics.Rect v0_1 = new android.graphics.Rect();
        this.getBoundsInScreen(v0_1);
        v1_1.append("AccessibilityWindowInfo[");
        v1_1.append("id=").append(this.getId());
        v1_1.append(", type=").append(android.support.v4.view.accessibility.AccessibilityWindowInfoCompat.typeToString(this.getType()));
        v1_1.append(", layer=").append(this.getLayer());
        v1_1.append(", bounds=").append(v0_1);
        v1_1.append(", focused=").append(this.isFocused());
        v1_1.append(", active=").append(this.isActive());
        StringBuilder vtmp20 = v1_1.append(", hasParent=");
        if (this.getParent() == null) {
            v2_13 = 0;
        } else {
            v2_13 = 1;
        }
        vtmp20.append(v2_13);
        String v2_15 = v1_1.append(", hasChildren=");
        if (this.getChildCount() <= 0) {
            v3 = 0;
        }
        v2_15.append(v3);
        v1_1.append(93);
        return v1_1.toString();
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityWindowInfoCompatApi21 {

    AccessibilityWindowInfoCompatApi21()
    {
        return;
    }

    public static void getBoundsInScreen(Object p0, android.graphics.Rect p1)
    {
        ((android.view.accessibility.AccessibilityWindowInfo) p0).getBoundsInScreen(p1);
        return;
    }

    public static Object getChild(Object p1, int p2)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getChild(p2);
    }

    public static int getChildCount(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getChildCount();
    }

    public static int getId(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getId();
    }

    public static int getLayer(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getLayer();
    }

    public static Object getParent(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getParent();
    }

    public static Object getRoot(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getRoot();
    }

    public static int getType(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getType();
    }

    public static boolean isAccessibilityFocused(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).isAccessibilityFocused();
    }

    public static boolean isActive(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).isActive();
    }

    public static boolean isFocused(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).isFocused();
    }

    public static Object obtain()
    {
        return android.view.accessibility.AccessibilityWindowInfo.obtain();
    }

    public static Object obtain(Object p1)
    {
        return android.view.accessibility.AccessibilityWindowInfo.obtain(((android.view.accessibility.AccessibilityWindowInfo) p1));
    }

    public static void recycle(Object p0)
    {
        ((android.view.accessibility.AccessibilityWindowInfo) p0).recycle();
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityWindowInfoCompatApi24 {

    AccessibilityWindowInfoCompatApi24()
    {
        return;
    }

    public static Object getAnchor(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getAnchor();
    }

    public static CharSequence getTitle(Object p1)
    {
        return ((android.view.accessibility.AccessibilityWindowInfo) p1).getTitle();
    }
}
package android.support.v4.view.animation;
abstract class LookupTableInterpolator implements android.view.animation.Interpolator {
    private final float mStepSize;
    private final float[] mValues;

    public LookupTableInterpolator(float[] p3)
    {
        this.mValues = p3;
        this.mStepSize = (1065353216 / ((float) (this.mValues.length - 1)));
        return;
    }

    public float getInterpolation(float p8)
    {
        float v4_0 = 1065353216;
        if (p8 < 1065353216) {
            if (p8 > 0) {
                int v1 = Math.min(((int) (((float) (this.mValues.length - 1)) * p8)), (this.mValues.length - 2));
                v4_0 = (this.mValues[v1] + ((this.mValues[(v1 + 1)] - this.mValues[v1]) * ((p8 - (((float) v1) * this.mStepSize)) / this.mStepSize)));
            } else {
                v4_0 = 0;
            }
        }
        return v4_0;
    }
}
package android.support.v4.view.animation;
public final class PathInterpolatorCompat {

    private PathInterpolatorCompat()
    {
        return;
    }

    public static android.view.animation.Interpolator create(float p2, float p3)
    {
        android.view.animation.Interpolator v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatBase.create(p2, p3);
        } else {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatApi21.create(p2, p3);
        }
        return v0_1;
    }

    public static android.view.animation.Interpolator create(float p2, float p3, float p4, float p5)
    {
        android.view.animation.Interpolator v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatBase.create(p2, p3, p4, p5);
        } else {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatApi21.create(p2, p3, p4, p5);
        }
        return v0_1;
    }

    public static android.view.animation.Interpolator create(android.graphics.Path p2)
    {
        android.view.animation.Interpolator v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatBase.create(p2);
        } else {
            v0_1 = android.support.v4.view.animation.PathInterpolatorCompatApi21.create(p2);
        }
        return v0_1;
    }
}
package android.support.v4.view.animation;
 class PathInterpolatorCompatApi21 {

    private PathInterpolatorCompatApi21()
    {
        return;
    }

    public static android.view.animation.Interpolator create(float p1, float p2)
    {
        return new android.view.animation.PathInterpolator(p1, p2);
    }

    public static android.view.animation.Interpolator create(float p1, float p2, float p3, float p4)
    {
        return new android.view.animation.PathInterpolator(p1, p2, p3, p4);
    }

    public static android.view.animation.Interpolator create(android.graphics.Path p1)
    {
        return new android.view.animation.PathInterpolator(p1);
    }
}
package android.support.v4.view.animation;
 class PathInterpolatorCompatBase {

    private PathInterpolatorCompatBase()
    {
        return;
    }

    public static android.view.animation.Interpolator create(float p1, float p2)
    {
        return new android.support.v4.view.animation.PathInterpolatorGingerbread(p1, p2);
    }

    public static android.view.animation.Interpolator create(float p1, float p2, float p3, float p4)
    {
        return new android.support.v4.view.animation.PathInterpolatorGingerbread(p1, p2, p3, p4);
    }

    public static android.view.animation.Interpolator create(android.graphics.Path p1)
    {
        return new android.support.v4.view.animation.PathInterpolatorGingerbread(p1);
    }
}
package android.support.v4.view.animation;
 class PathInterpolatorGingerbread implements android.view.animation.Interpolator {
    private static final float PRECISION = 990057071;
    private final float[] mX;
    private final float[] mY;

    public PathInterpolatorGingerbread(float p2, float p3)
    {
        this(android.support.v4.view.animation.PathInterpolatorGingerbread.createQuad(p2, p3));
        return;
    }

    public PathInterpolatorGingerbread(float p2, float p3, float p4, float p5)
    {
        this(android.support.v4.view.animation.PathInterpolatorGingerbread.createCubic(p2, p3, p4, p5));
        return;
    }

    public PathInterpolatorGingerbread(android.graphics.Path p10)
    {
        android.graphics.PathMeasure v4_1 = new android.graphics.PathMeasure(p10, 0);
        float v3 = v4_1.getLength();
        int v2 = (((int) (v3 / 990057071)) + 1);
        float[] v6_0 = new float[v2];
        this.mX = v6_0;
        float[] v6_1 = new float[v2];
        this.mY = v6_1;
        float[] v5 = new float[2];
        int v1 = 0;
        while (v1 < v2) {
            v4_1.getPosTan(((((float) v1) * v3) / ((float) (v2 - 1))), v5, 0);
            this.mX[v1] = v5[0];
            this.mY[v1] = v5[1];
            v1++;
        }
        return;
    }

    private static android.graphics.Path createCubic(float p7, float p8, float p9, float p10)
    {
        android.graphics.Path v0_1 = new android.graphics.Path();
        v0_1.moveTo(0, 0);
        v0_1.cubicTo(p7, p8, p9, p10, 1065353216, 1065353216);
        return v0_1;
    }

    private static android.graphics.Path createQuad(float p3, float p4)
    {
        android.graphics.Path v0_1 = new android.graphics.Path();
        v0_1.moveTo(0, 0);
        v0_1.quadTo(p3, p4, 1065353216, 1065353216);
        return v0_1;
    }

    public float getInterpolation(float p12)
    {
        float v8_0 = 0;
        if (p12 > 0) {
            if (p12 < 1065353216) {
                int v4 = 0;
                int v0 = (this.mX.length - 1);
                while ((v0 - v4) > 1) {
                    int v3 = ((v4 + v0) / 2);
                    if (p12 >= this.mX[v3]) {
                        v4 = v3;
                    } else {
                        v0 = v3;
                    }
                }
                float v7 = (this.mX[v0] - this.mX[v4]);
                if (v7 != 0) {
                    float v5 = this.mY[v4];
                    v8_0 = (((this.mY[v0] - v5) * ((p12 - this.mX[v4]) / v7)) + v5);
                } else {
                    v8_0 = this.mY[v4];
                }
            } else {
                v8_0 = 1065353216;
            }
        }
        return v8_0;
    }
}
package android.support.v4.widget;
 class AutoScrollHelper$ClampedScroller {
    private long mDeltaTime;
    private int mDeltaX;
    private int mDeltaY;
    private int mEffectiveRampDown;
    private int mRampDownDuration;
    private int mRampUpDuration;
    private long mStartTime;
    private long mStopTime;
    private float mStopValue;
    private float mTargetVelocityX;
    private float mTargetVelocityY;

    AutoScrollHelper$ClampedScroller()
    {
        this.mStartTime = -0.0;
        this.mStopTime = -1;
        this.mDeltaTime = 0;
        this.mDeltaX = 0;
        this.mDeltaY = 0;
        return;
    }

    private float getValueAt(long p12)
    {
        float v4_0 = 0;
        if (p12 >= this.mStartTime) {
            if ((this.mStopTime >= 0) && (p12 >= this.mStopTime)) {
                v4_0 = ((android.support.v4.widget.AutoScrollHelper.constrain((((float) (p12 - this.mStopTime)) / ((float) this.mEffectiveRampDown)), 0, 1065353216) * this.mStopValue) + (1065353216 - this.mStopValue));
            } else {
                v4_0 = (android.support.v4.widget.AutoScrollHelper.constrain((((float) (p12 - this.mStartTime)) / ((float) this.mRampUpDuration)), 0, 1065353216) * 1056964608);
            }
        }
        return v4_0;
    }

    private float interpolateValue(float p3)
    {
        return (((-1065353216 * p3) * p3) + (1082130432 * p3));
    }

    public void computeScrollDelta()
    {
        if (this.mDeltaTime != 0) {
            long v0 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
            float v4 = this.interpolateValue(this.getValueAt(v0));
            long v2 = (v0 - this.mDeltaTime);
            this.mDeltaTime = v0;
            this.mDeltaX = ((int) ((((float) v2) * v4) * this.mTargetVelocityX));
            this.mDeltaY = ((int) ((((float) v2) * v4) * this.mTargetVelocityY));
            return;
        } else {
            throw new RuntimeException("Cannot compute scroll delta before calling start()");
        }
    }

    public int getDeltaX()
    {
        return this.mDeltaX;
    }

    public int getDeltaY()
    {
        return this.mDeltaY;
    }

    public int getHorizontalDirection()
    {
        return ((int) (this.mTargetVelocityX / Math.abs(this.mTargetVelocityX)));
    }

    public int getVerticalDirection()
    {
        return ((int) (this.mTargetVelocityY / Math.abs(this.mTargetVelocityY)));
    }

    public boolean isFinished()
    {
        if ((this.mStopTime <= 0) || (android.view.animation.AnimationUtils.currentAnimationTimeMillis() <= (this.mStopTime + ((long) this.mEffectiveRampDown)))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void requestStop()
    {
        long v0 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
        this.mEffectiveRampDown = android.support.v4.widget.AutoScrollHelper.constrain(((int) (v0 - this.mStartTime)), 0, this.mRampDownDuration);
        this.mStopValue = this.getValueAt(v0);
        this.mStopTime = v0;
        return;
    }

    public void setRampDownDuration(int p1)
    {
        this.mRampDownDuration = p1;
        return;
    }

    public void setRampUpDuration(int p1)
    {
        this.mRampUpDuration = p1;
        return;
    }

    public void setTargetVelocity(float p1, float p2)
    {
        this.mTargetVelocityX = p1;
        this.mTargetVelocityY = p2;
        return;
    }

    public void start()
    {
        this.mStartTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
        this.mStopTime = -1;
        this.mDeltaTime = this.mStartTime;
        this.mStopValue = 1056964608;
        this.mDeltaX = 0;
        this.mDeltaY = 0;
        return;
    }
}
package android.support.v4.widget;
 class AutoScrollHelper$ScrollAnimationRunnable implements java.lang.Runnable {
    final synthetic android.support.v4.widget.AutoScrollHelper this$0;

    AutoScrollHelper$ScrollAnimationRunnable(android.support.v4.widget.AutoScrollHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        if (this.this$0.mAnimating) {
            if (this.this$0.mNeedsReset) {
                this.this$0.mNeedsReset = 0;
                this.this$0.mScroller.start();
            }
            android.support.v4.widget.AutoScrollHelper$ClampedScroller v2 = this.this$0.mScroller;
            if ((!v2.isFinished()) && (this.this$0.shouldAnimate())) {
                if (this.this$0.mNeedsCancel) {
                    this.this$0.mNeedsCancel = 0;
                    this.this$0.cancelTargetTouch();
                }
                v2.computeScrollDelta();
                this.this$0.scrollTargetBy(v2.getDeltaX(), v2.getDeltaY());
                android.support.v4.view.ViewCompat.postOnAnimation(this.this$0.mTarget, this);
            } else {
                this.this$0.mAnimating = 0;
            }
        }
        return;
    }
}
package android.support.v4.widget;
public abstract class AutoScrollHelper implements android.view.View$OnTouchListener {
    private static final int DEFAULT_ACTIVATION_DELAY = 0;
    private static final int DEFAULT_EDGE_TYPE = 1;
    private static final float DEFAULT_MAXIMUM_EDGE = 2139095039;
    private static final int DEFAULT_MAXIMUM_VELOCITY_DIPS = 1575;
    private static final int DEFAULT_MINIMUM_VELOCITY_DIPS = 315;
    private static final int DEFAULT_RAMP_DOWN_DURATION = 500;
    private static final int DEFAULT_RAMP_UP_DURATION = 500;
    private static final float DEFAULT_RELATIVE_EDGE = 1045220557;
    private static final float DEFAULT_RELATIVE_VELOCITY = 16256;
    public static final int EDGE_TYPE_INSIDE = 0;
    public static final int EDGE_TYPE_INSIDE_EXTEND = 1;
    public static final int EDGE_TYPE_OUTSIDE = 2;
    private static final int HORIZONTAL = 0;
    public static final float NO_MAX = 2139095039;
    public static final float NO_MIN = 0;
    public static final float RELATIVE_UNSPECIFIED = 0;
    private static final int VERTICAL = 1;
    private int mActivationDelay;
    private boolean mAlreadyDelayed;
    boolean mAnimating;
    private final android.view.animation.Interpolator mEdgeInterpolator;
    private int mEdgeType;
    private boolean mEnabled;
    private boolean mExclusive;
    private float[] mMaximumEdges;
    private float[] mMaximumVelocity;
    private float[] mMinimumVelocity;
    boolean mNeedsCancel;
    boolean mNeedsReset;
    private float[] mRelativeEdges;
    private float[] mRelativeVelocity;
    private Runnable mRunnable;
    final android.support.v4.widget.AutoScrollHelper$ClampedScroller mScroller;
    final android.view.View mTarget;

    static AutoScrollHelper()
    {
        android.support.v4.widget.AutoScrollHelper.DEFAULT_ACTIVATION_DELAY = android.view.ViewConfiguration.getTapTimeout();
        return;
    }

    public AutoScrollHelper(android.view.View p10)
    {
        this.mScroller = new android.support.v4.widget.AutoScrollHelper$ClampedScroller();
        this.mEdgeInterpolator = new android.view.animation.AccelerateInterpolator();
        int v3_1 = new float[2];
        v3_1 = {0, 0};
        this.mRelativeEdges = v3_1;
        int v3_2 = new float[2];
        v3_2 = {2139095039, 2139095039};
        this.mMaximumEdges = v3_2;
        int v3_3 = new float[2];
        v3_3 = {0, 0};
        this.mRelativeVelocity = v3_3;
        int v3_4 = new float[2];
        v3_4 = {0, 0};
        this.mMinimumVelocity = v3_4;
        int v3_5 = new float[2];
        v3_5 = {2139095039, 2139095039};
        this.mMaximumVelocity = v3_5;
        this.mTarget = p10;
        android.util.DisplayMetrics v1 = android.content.res.Resources.getSystem().getDisplayMetrics();
        int v0 = ((int) ((1153753088 * v1.density) + 1056964608));
        int v2 = ((int) ((1134395392 * v1.density) + 1056964608));
        this.setMaximumVelocity(((float) v0), ((float) v0));
        this.setMinimumVelocity(((float) v2), ((float) v2));
        this.setEdgeType(1);
        this.setMaximumEdges(2139095039, 2139095039);
        this.setRelativeEdges(1045220557, 1045220557);
        this.setRelativeVelocity(1065353216, 1065353216);
        this.setActivationDelay(android.support.v4.widget.AutoScrollHelper.DEFAULT_ACTIVATION_DELAY);
        this.setRampUpDuration(500);
        this.setRampDownDuration(500);
        return;
    }

    private float computeTargetVelocity(int p10, float p11, float p12, float p13)
    {
        float v7_0 = 0;
        float v6 = this.getEdgeValue(this.mRelativeEdges[p10], p12, this.mMaximumEdges[p10], p11);
        if (v6 != 0) {
            float v2 = this.mMinimumVelocity[p10];
            float v1 = this.mMaximumVelocity[p10];
            float v5 = (this.mRelativeVelocity[p10] * p13);
            if (v6 <= 0) {
                v7_0 = (- android.support.v4.widget.AutoScrollHelper.constrain(((- v6) * v5), v2, v1));
            } else {
                v7_0 = android.support.v4.widget.AutoScrollHelper.constrain((v6 * v5), v2, v1);
            }
        }
        return v7_0;
    }

    static float constrain(float p1, float p2, float p3)
    {
        if (p1 <= p3) {
            if (p1 >= p2) {
                p3 = p1;
            } else {
                p3 = p2;
            }
        }
        return p3;
    }

    static int constrain(int p0, int p1, int p2)
    {
        if (p0 <= p2) {
            if (p0 >= p1) {
                p2 = p0;
            } else {
                p2 = p1;
            }
        }
        return p2;
    }

    private float constrainEdgeValue(float p5, float p6)
    {
        float v0_0 = 0;
        if (p6 != 0) {
            switch (this.mEdgeType) {
                case 0:
                case 1:
                    if (p5 < p6) {
                        if (p5 < 0) {
                            if ((this.mAnimating) && (this.mEdgeType == 1)) {
                                v0_0 = 1065353216;
                            }
                        } else {
                            v0_0 = (1065353216 - (p5 / p6));
                        }
                    }
                    break;
                case 2:
                    if (p5 < 0) {
                        v0_0 = (p5 / (- p6));
                    }
                    break;
                default:
            }
        }
        return v0_0;
    }

    private float getEdgeValue(float p8, float p9, float p10, float p11)
    {
        float v1;
        android.view.animation.Interpolator v5_0 = 0;
        float v0 = android.support.v4.widget.AutoScrollHelper.constrain((p8 * p9), 0, p10);
        float v2 = (this.constrainEdgeValue((p9 - p11), v0) - this.constrainEdgeValue(p11, v0));
        if (v2 >= 0) {
            if (v2 > 0) {
                v1 = this.mEdgeInterpolator.getInterpolation(v2);
                v5_0 = android.support.v4.widget.AutoScrollHelper.constrain(v1, -1082130432, 1065353216);
            }
        } else {
            v1 = (- this.mEdgeInterpolator.getInterpolation((- v2)));
        }
        return v5_0;
    }

    private void requestStop()
    {
        if (!this.mNeedsReset) {
            this.mScroller.requestStop();
        } else {
            this.mAnimating = 0;
        }
        return;
    }

    private void startAnimating()
    {
        if (this.mRunnable == null) {
            this.mRunnable = new android.support.v4.widget.AutoScrollHelper$ScrollAnimationRunnable(this);
        }
        this.mAnimating = 1;
        this.mNeedsReset = 1;
        if ((this.mAlreadyDelayed) || (this.mActivationDelay <= 0)) {
            this.mRunnable.run();
        } else {
            android.support.v4.view.ViewCompat.postOnAnimationDelayed(this.mTarget, this.mRunnable, ((long) this.mActivationDelay));
        }
        this.mAlreadyDelayed = 1;
        return;
    }

    public abstract boolean canTargetScrollHorizontally();

    public abstract boolean canTargetScrollVertically();

    void cancelTargetTouch()
    {
        long v0 = android.os.SystemClock.uptimeMillis();
        android.view.MotionEvent v8 = android.view.MotionEvent.obtain(v0, v0, 3, 0, 0, 0);
        this.mTarget.onTouchEvent(v8);
        v8.recycle();
        return;
    }

    public boolean isEnabled()
    {
        return this.mEnabled;
    }

    public boolean isExclusive()
    {
        return this.mExclusive;
    }

    public boolean onTouch(android.view.View p9, android.view.MotionEvent p10)
    {
        int v3 = 1;
        int v4 = 0;
        if (this.mEnabled) {
            switch (android.support.v4.view.MotionEventCompat.getActionMasked(p10)) {
                case 0:
                    this.mNeedsCancel = 1;
                    this.mAlreadyDelayed = 0;
                    this.mScroller.setTargetVelocity(this.computeTargetVelocity(0, p10.getX(), ((float) p9.getWidth()), ((float) this.mTarget.getWidth())), this.computeTargetVelocity(1, p10.getY(), ((float) p9.getHeight()), ((float) this.mTarget.getHeight())));
                    if ((this.mAnimating) || (!this.shouldAnimate())) {
                    } else {
                        this.startAnimating();
                    }
                    break;
                case 1:
                case 3:
                    this.requestStop();
                    break;
                default:
                    if (!this.mExclusive) {
                        v3 = 0;
                        v4 = v3;
                    } else {
                        if (!this.mAnimating) {
                        } else {
                        }
                    }
            }
            if ((!this.mExclusive) || (!this.mAnimating)) {
            }
        }
        return v4;
    }

    public abstract void scrollTargetBy();

    public android.support.v4.widget.AutoScrollHelper setActivationDelay(int p1)
    {
        this.mActivationDelay = p1;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setEdgeType(int p1)
    {
        this.mEdgeType = p1;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setEnabled(boolean p2)
    {
        if ((this.mEnabled) && (!p2)) {
            this.requestStop();
        }
        this.mEnabled = p2;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setExclusive(boolean p1)
    {
        this.mExclusive = p1;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setMaximumEdges(float p3, float p4)
    {
        this.mMaximumEdges[0] = p3;
        this.mMaximumEdges[1] = p4;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setMaximumVelocity(float p5, float p6)
    {
        this.mMaximumVelocity[0] = (p5 / 1148846080);
        this.mMaximumVelocity[1] = (p6 / 1148846080);
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setMinimumVelocity(float p5, float p6)
    {
        this.mMinimumVelocity[0] = (p5 / 1148846080);
        this.mMinimumVelocity[1] = (p6 / 1148846080);
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setRampDownDuration(int p2)
    {
        this.mScroller.setRampDownDuration(p2);
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setRampUpDuration(int p2)
    {
        this.mScroller.setRampUpDuration(p2);
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setRelativeEdges(float p3, float p4)
    {
        this.mRelativeEdges[0] = p3;
        this.mRelativeEdges[1] = p4;
        return this;
    }

    public android.support.v4.widget.AutoScrollHelper setRelativeVelocity(float p5, float p6)
    {
        this.mRelativeVelocity[0] = (p5 / 1148846080);
        this.mRelativeVelocity[1] = (p6 / 1148846080);
        return this;
    }

    boolean shouldAnimate()
    {
        int v3_1;
        android.support.v4.widget.AutoScrollHelper$ClampedScroller v1 = this.mScroller;
        int v2 = v1.getVerticalDirection();
        int v0 = v1.getHorizontalDirection();
        if (((v2 == 0) || (!this.canTargetScrollVertically(v2))) && ((v0 == 0) || (!this.canTargetScrollHorizontally(v0)))) {
            v3_1 = 0;
        } else {
            v3_1 = 1;
        }
        return v3_1;
    }
}
package android.support.v4.widget;
 class CircleImageView$OvalShadow extends android.graphics.drawable.shapes.OvalShape {
    private android.graphics.RadialGradient mRadialGradient;
    private android.graphics.Paint mShadowPaint;
    final synthetic android.support.v4.widget.CircleImageView this$0;

    CircleImageView$OvalShadow(android.support.v4.widget.CircleImageView p2, int p3)
    {
        this.this$0 = p2;
        this.mShadowPaint = new android.graphics.Paint();
        p2.mShadowRadius = p3;
        this.updateRadialGradient(((int) this.rect().width()));
        return;
    }

    private void updateRadialGradient(int p8)
    {
        int[] v4_1 = new int[2];
        v4_1 = {1023410176, 0};
        this.mRadialGradient = new android.graphics.RadialGradient(((float) (p8 / 2)), ((float) (p8 / 2)), ((float) this.this$0.mShadowRadius), v4_1, 0, android.graphics.Shader$TileMode.CLAMP);
        this.mShadowPaint.setShader(this.mRadialGradient);
        return;
    }

    public void draw(android.graphics.Canvas p7, android.graphics.Paint p8)
    {
        int v1 = this.this$0.getWidth();
        int v0 = this.this$0.getHeight();
        p7.drawCircle(((float) (v1 / 2)), ((float) (v0 / 2)), ((float) (v1 / 2)), this.mShadowPaint);
        p7.drawCircle(((float) (v1 / 2)), ((float) (v0 / 2)), ((float) ((v1 / 2) - this.this$0.mShadowRadius)), p8);
        return;
    }

    protected void onResize(float p2, float p3)
    {
        super.onResize(p2, p3);
        this.updateRadialGradient(((int) p2));
        return;
    }
}
package android.support.v4.widget;
 class CircleImageView extends android.widget.ImageView {
    private static final int FILL_SHADOW_COLOR = 1023410176;
    private static final int KEY_SHADOW_COLOR = 503316480;
    private static final int SHADOW_ELEVATION = 4;
    private static final float SHADOW_RADIUS = 16480;
    private static final float X_OFFSET = 0;
    private static final float Y_OFFSET = 16352;
    private android.view.animation.Animation$AnimationListener mListener;
    int mShadowRadius;

    CircleImageView(android.content.Context p12, int p13)
    {
        android.graphics.drawable.ShapeDrawable v0_1;
        super(p12);
        float v1 = super.getContext().getResources().getDisplayMetrics().density;
        int v5 = ((int) (1071644672 * v1));
        int v4 = ((int) (0 * v1));
        super.mShadowRadius = ((int) (1080033280 * v1));
        if (!super.elevationSupported()) {
            v0_1 = new android.graphics.drawable.ShapeDrawable(new android.support.v4.widget.CircleImageView$OvalShadow(super, super.mShadowRadius));
            android.support.v4.view.ViewCompat.setLayerType(super, 1, v0_1.getPaint());
            v0_1.getPaint().setShadowLayer(((float) super.mShadowRadius), ((float) v4), ((float) v5), 503316480);
            super.setPadding(super.mShadowRadius, super.mShadowRadius, super.mShadowRadius, super.mShadowRadius);
        } else {
            v0_1 = new android.graphics.drawable.ShapeDrawable(new android.graphics.drawable.shapes.OvalShape());
            android.support.v4.view.ViewCompat.setElevation(super, (1082130432 * v1));
        }
        v0_1.getPaint().setColor(p13);
        android.support.v4.view.ViewCompat.setBackground(super, v0_1);
        return;
    }

    private boolean elevationSupported()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onAnimationEnd()
    {
        super.onAnimationEnd();
        if (this.mListener != null) {
            this.mListener.onAnimationEnd(this.getAnimation());
        }
        return;
    }

    public void onAnimationStart()
    {
        super.onAnimationStart();
        if (this.mListener != null) {
            this.mListener.onAnimationStart(this.getAnimation());
        }
        return;
    }

    protected void onMeasure(int p4, int p5)
    {
        super.onMeasure(p4, p5);
        if (!this.elevationSupported()) {
            this.setMeasuredDimension((this.getMeasuredWidth() + (this.mShadowRadius * 2)), (this.getMeasuredHeight() + (this.mShadowRadius * 2)));
        }
        return;
    }

    public void setAnimationListener(android.view.animation.Animation$AnimationListener p1)
    {
        this.mListener = p1;
        return;
    }

    public void setBackgroundColor(int p2)
    {
        if ((this.getBackground() instanceof android.graphics.drawable.ShapeDrawable)) {
            ((android.graphics.drawable.ShapeDrawable) this.getBackground()).getPaint().setColor(p2);
        }
        return;
    }

    public void setBackgroundColorRes(int p2)
    {
        this.setBackgroundColor(android.support.v4.content.ContextCompat.getColor(this.getContext(), p2));
        return;
    }
}
package android.support.v4.widget;
interface CompoundButtonCompat$CompoundButtonCompatImpl {

    public abstract android.graphics.drawable.Drawable getButtonDrawable();

    public abstract android.content.res.ColorStateList getButtonTintList();

    public abstract android.graphics.PorterDuff$Mode getButtonTintMode();

    public abstract void setButtonTintList();

    public abstract void setButtonTintMode();
}
package android.support.v4.widget;
public final class CompoundButtonCompat {
    private static final android.support.v4.widget.CompoundButtonCompat$CompoundButtonCompatImpl IMPL;

    static CompoundButtonCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 23) {
            if (v0 < 21) {
                android.support.v4.widget.CompoundButtonCompat.IMPL = new android.support.v4.widget.CompoundButtonCompat$BaseCompoundButtonCompat();
            } else {
                android.support.v4.widget.CompoundButtonCompat.IMPL = new android.support.v4.widget.CompoundButtonCompat$LollipopCompoundButtonImpl();
            }
        } else {
            android.support.v4.widget.CompoundButtonCompat.IMPL = new android.support.v4.widget.CompoundButtonCompat$Api23CompoundButtonImpl();
        }
        return;
    }

    private CompoundButtonCompat()
    {
        return;
    }

    public static android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton p1)
    {
        return android.support.v4.widget.CompoundButtonCompat.IMPL.getButtonDrawable(p1);
    }

    public static android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton p1)
    {
        return android.support.v4.widget.CompoundButtonCompat.IMPL.getButtonTintList(p1);
    }

    public static android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton p1)
    {
        return android.support.v4.widget.CompoundButtonCompat.IMPL.getButtonTintMode(p1);
    }

    public static void setButtonTintList(android.widget.CompoundButton p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.widget.CompoundButtonCompat.IMPL.setButtonTintList(p1, p2);
        return;
    }

    public static void setButtonTintMode(android.widget.CompoundButton p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.widget.CompoundButtonCompat.IMPL.setButtonTintMode(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class CompoundButtonCompatApi23 {

    CompoundButtonCompatApi23()
    {
        return;
    }

    static android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton p1)
    {
        return p1.getButtonDrawable();
    }
}
package android.support.v4.widget;
 class CompoundButtonCompatGingerbread {
    private static final String TAG = "CompoundButtonCompatGingerbread";
    private static reflect.Field sButtonDrawableField;
    private static boolean sButtonDrawableFieldFetched;

    CompoundButtonCompatGingerbread()
    {
        return;
    }

    static android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton p5)
    {
        if (!android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableFieldFetched) {
            try {
                android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableField = android.widget.CompoundButton.getDeclaredField("mButtonDrawable");
                android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableField.setAccessible(1);
            } catch (IllegalAccessException v0_0) {
                android.util.Log.i("CompoundButtonCompatGingerbread", "Failed to retrieve mButtonDrawable field", v0_0);
            }
            android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableFieldFetched = 1;
        }
        String v1_5;
        if (android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableField == null) {
            v1_5 = 0;
        } else {
            try {
                v1_5 = ((android.graphics.drawable.Drawable) android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableField.get(p5));
            } catch (IllegalAccessException v0_1) {
                android.util.Log.i("CompoundButtonCompatGingerbread", "Failed to get button drawable via reflection", v0_1);
                android.support.v4.widget.CompoundButtonCompatGingerbread.sButtonDrawableField = 0;
            }
        }
        return v1_5;
    }

    static android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton p1)
    {
        int v0_1;
        if (!(p1 instanceof android.support.v4.widget.TintableCompoundButton)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.widget.TintableCompoundButton) p1).getSupportButtonTintList();
        }
        return v0_1;
    }

    static android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton p1)
    {
        int v0_1;
        if (!(p1 instanceof android.support.v4.widget.TintableCompoundButton)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.widget.TintableCompoundButton) p1).getSupportButtonTintMode();
        }
        return v0_1;
    }

    static void setButtonTintList(android.widget.CompoundButton p1, android.content.res.ColorStateList p2)
    {
        if ((p1 instanceof android.support.v4.widget.TintableCompoundButton)) {
            ((android.support.v4.widget.TintableCompoundButton) p1).setSupportButtonTintList(p2);
        }
        return;
    }

    static void setButtonTintMode(android.widget.CompoundButton p1, android.graphics.PorterDuff$Mode p2)
    {
        if ((p1 instanceof android.support.v4.widget.TintableCompoundButton)) {
            ((android.support.v4.widget.TintableCompoundButton) p1).setSupportButtonTintMode(p2);
        }
        return;
    }
}
package android.support.v4.widget;
 class CompoundButtonCompatLollipop {

    CompoundButtonCompatLollipop()
    {
        return;
    }

    static android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton p1)
    {
        return p1.getButtonTintList();
    }

    static android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton p1)
    {
        return p1.getButtonTintMode();
    }

    static void setButtonTintList(android.widget.CompoundButton p0, android.content.res.ColorStateList p1)
    {
        p0.setButtonTintList(p1);
        return;
    }

    static void setButtonTintMode(android.widget.CompoundButton p0, android.graphics.PorterDuff$Mode p1)
    {
        p0.setButtonTintMode(p1);
        return;
    }
}
package android.support.v4.widget;
 class ContentLoadingProgressBar$1 implements java.lang.Runnable {
    final synthetic android.support.v4.widget.ContentLoadingProgressBar this$0;

    ContentLoadingProgressBar$1(android.support.v4.widget.ContentLoadingProgressBar p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.mPostedHide = 0;
        this.this$0.mStartTime = -1;
        this.this$0.setVisibility(8);
        return;
    }
}
package android.support.v4.widget;
 class ContentLoadingProgressBar$2 implements java.lang.Runnable {
    final synthetic android.support.v4.widget.ContentLoadingProgressBar this$0;

    ContentLoadingProgressBar$2(android.support.v4.widget.ContentLoadingProgressBar p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.mPostedShow = 0;
        if (!this.this$0.mDismissed) {
            this.this$0.mStartTime = System.currentTimeMillis();
            this.this$0.setVisibility(0);
        }
        return;
    }
}
package android.support.v4.widget;
public class ContentLoadingProgressBar extends android.widget.ProgressBar {
    private static final int MIN_DELAY = 500;
    private static final int MIN_SHOW_TIME = 500;
    private final Runnable mDelayedHide;
    private final Runnable mDelayedShow;
    boolean mDismissed;
    boolean mPostedHide;
    boolean mPostedShow;
    long mStartTime;

    public ContentLoadingProgressBar(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public ContentLoadingProgressBar(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5, 0);
        super.mStartTime = -1;
        super.mPostedHide = 0;
        super.mPostedShow = 0;
        super.mDismissed = 0;
        super.mDelayedHide = new android.support.v4.widget.ContentLoadingProgressBar$1(super);
        super.mDelayedShow = new android.support.v4.widget.ContentLoadingProgressBar$2(super);
        return;
    }

    private void removeCallbacks()
    {
        this.removeCallbacks(this.mDelayedHide);
        this.removeCallbacks(this.mDelayedShow);
        return;
    }

    public void hide()
    {
        this.mDismissed = 1;
        this.removeCallbacks(this.mDelayedShow);
        long v0 = (System.currentTimeMillis() - this.mStartTime);
        if ((v0 < 500) && (this.mStartTime != -1)) {
            if (!this.mPostedHide) {
                this.postDelayed(this.mDelayedHide, (500 - v0));
                this.mPostedHide = 1;
            }
        } else {
            this.setVisibility(8);
        }
        return;
    }

    public void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.removeCallbacks();
        return;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.removeCallbacks();
        return;
    }

    public void show()
    {
        this.mStartTime = -1;
        this.mDismissed = 0;
        this.removeCallbacks(this.mDelayedHide);
        if (!this.mPostedShow) {
            this.postDelayed(this.mDelayedShow, 500);
            this.mPostedShow = 1;
        }
        return;
    }
}
package android.support.v4.widget;
 class CursorAdapter$ChangeObserver extends android.database.ContentObserver {
    final synthetic android.support.v4.widget.CursorAdapter this$0;

    CursorAdapter$ChangeObserver(android.support.v4.widget.CursorAdapter p2)
    {
        this.this$0 = p2;
        super(new android.os.Handler());
        return;
    }

    public boolean deliverSelfNotifications()
    {
        return 1;
    }

    public void onChange(boolean p2)
    {
        this.this$0.onContentChanged();
        return;
    }
}
package android.support.v4.widget;
 class CursorAdapter$MyDataSetObserver extends android.database.DataSetObserver {
    final synthetic android.support.v4.widget.CursorAdapter this$0;

    CursorAdapter$MyDataSetObserver(android.support.v4.widget.CursorAdapter p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onChanged()
    {
        this.this$0.mDataValid = 1;
        this.this$0.notifyDataSetChanged();
        return;
    }

    public void onInvalidated()
    {
        this.this$0.mDataValid = 0;
        this.this$0.notifyDataSetInvalidated();
        return;
    }
}
package android.support.v4.widget;
interface CursorFilter$CursorFilterClient {

    public abstract void changeCursor();

    public abstract CharSequence convertToString();

    public abstract android.database.Cursor getCursor();

    public abstract android.database.Cursor runQueryOnBackgroundThread();
}
package android.support.v4.widget;
 class CursorFilter extends android.widget.Filter {
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient;

    CursorFilter(android.support.v4.widget.CursorFilter$CursorFilterClient p1)
    {
        this.mClient = p1;
        return;
    }

    public CharSequence convertResultToString(Object p2)
    {
        return this.mClient.convertToString(((android.database.Cursor) p2));
    }

    protected android.widget.Filter$FilterResults performFiltering(CharSequence p4)
    {
        android.database.Cursor v0 = this.mClient.runQueryOnBackgroundThread(p4);
        android.widget.Filter$FilterResults v1_1 = new android.widget.Filter$FilterResults();
        if (v0 == null) {
            v1_1.count = 0;
            v1_1.values = 0;
        } else {
            v1_1.count = v0.getCount();
            v1_1.values = v0;
        }
        return v1_1;
    }

    protected void publishResults(CharSequence p4, android.widget.Filter$FilterResults p5)
    {
        android.database.Cursor vtmp1 = this.mClient.getCursor();
        if ((p5.values != null) && (p5.values != vtmp1)) {
            this.mClient.changeCursor(((android.database.Cursor) p5.values));
        }
        return;
    }
}
package android.support.v4.widget;
interface DrawerLayout$DrawerLayoutCompatImpl {

    public abstract void applyMarginInsets();

    public abstract void configureApplyInsets();

    public abstract void dispatchChildInsets();

    public abstract android.graphics.drawable.Drawable getDefaultStatusBarBackground();

    public abstract int getTopInset();
}
package android.support.v4.widget;
public interface DrawerLayout$DrawerListener {

    public abstract void onDrawerClosed();

    public abstract void onDrawerOpened();

    public abstract void onDrawerSlide();

    public abstract void onDrawerStateChanged();
}
package android.support.v4.widget;
public class DrawerLayout$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
    private static final int FLAG_IS_CLOSING = 4;
    private static final int FLAG_IS_OPENED = 1;
    private static final int FLAG_IS_OPENING = 2;
    public int gravity;
    boolean isPeeking;
    float onScreen;
    int openState;

    public DrawerLayout$LayoutParams(int p2, int p3)
    {
        super(p2, p3);
        super.gravity = 0;
        return;
    }

    public DrawerLayout$LayoutParams(int p1, int p2, int p3)
    {
        this(p1, p2);
        this.gravity = p3;
        return;
    }

    public DrawerLayout$LayoutParams(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        super.gravity = 0;
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, android.support.v4.widget.DrawerLayout.LAYOUT_ATTRS);
        super.gravity = v0.getInt(0, 0);
        v0.recycle();
        return;
    }

    public DrawerLayout$LayoutParams(android.support.v4.widget.DrawerLayout$LayoutParams p2)
    {
        super(p2);
        super.gravity = 0;
        super.gravity = p2.gravity;
        return;
    }

    public DrawerLayout$LayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        super(p2);
        super.gravity = 0;
        return;
    }

    public DrawerLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams p2)
    {
        super(p2);
        super.gravity = 0;
        return;
    }
}
package android.support.v4.widget;
 class DrawerLayout$ViewDragCallback$1 implements java.lang.Runnable {
    final synthetic android.support.v4.widget.DrawerLayout$ViewDragCallback this$1;

    DrawerLayout$ViewDragCallback$1(android.support.v4.widget.DrawerLayout$ViewDragCallback p1)
    {
        this.this$1 = p1;
        return;
    }

    public void run()
    {
        this.this$1.peekDrawer();
        return;
    }
}
package android.support.v4.widget;
 class DrawerLayoutCompatApi21$InsetsListener implements android.view.View$OnApplyWindowInsetsListener {

    DrawerLayoutCompatApi21$InsetsListener()
    {
        return;
    }

    public android.view.WindowInsets onApplyWindowInsets(android.view.View p3, android.view.WindowInsets p4)
    {
        android.view.WindowInsets v1_1;
        if (p4.getSystemWindowInsetTop() <= 0) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        ((android.support.v4.widget.DrawerLayoutImpl) p3).setChildInsets(p4, v1_1);
        return p4.consumeSystemWindowInsets();
    }
}
package android.support.v4.widget;
 class DrawerLayoutCompatApi21 {
    private static final int[] THEME_ATTRS;

    static DrawerLayoutCompatApi21()
    {
        int[] v0_1 = new int[1];
        v0_1[0] = 16843828;
        android.support.v4.widget.DrawerLayoutCompatApi21.THEME_ATTRS = v0_1;
        return;
    }

    DrawerLayoutCompatApi21()
    {
        return;
    }

    public static void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams p5, Object p6, int p7)
    {
        android.view.WindowInsets v0_1 = ((android.view.WindowInsets) p6);
        if (p7 != 3) {
            if (p7 == 5) {
                v0_1 = ((android.view.WindowInsets) p6).replaceSystemWindowInsets(0, ((android.view.WindowInsets) p6).getSystemWindowInsetTop(), ((android.view.WindowInsets) p6).getSystemWindowInsetRight(), ((android.view.WindowInsets) p6).getSystemWindowInsetBottom());
            }
        } else {
            v0_1 = ((android.view.WindowInsets) p6).replaceSystemWindowInsets(((android.view.WindowInsets) p6).getSystemWindowInsetLeft(), ((android.view.WindowInsets) p6).getSystemWindowInsetTop(), 0, ((android.view.WindowInsets) p6).getSystemWindowInsetBottom());
        }
        p5.leftMargin = v0_1.getSystemWindowInsetLeft();
        p5.topMargin = v0_1.getSystemWindowInsetTop();
        p5.rightMargin = v0_1.getSystemWindowInsetRight();
        p5.bottomMargin = v0_1.getSystemWindowInsetBottom();
        return;
    }

    public static void configureApplyInsets(android.view.View p1)
    {
        if ((p1 instanceof android.support.v4.widget.DrawerLayoutImpl)) {
            p1.setOnApplyWindowInsetsListener(new android.support.v4.widget.DrawerLayoutCompatApi21$InsetsListener());
            p1.setSystemUiVisibility(1280);
        }
        return;
    }

    public static void dispatchChildInsets(android.view.View p5, Object p6, int p7)
    {
        android.view.WindowInsets v0_1 = ((android.view.WindowInsets) p6);
        if (p7 != 3) {
            if (p7 == 5) {
                v0_1 = ((android.view.WindowInsets) p6).replaceSystemWindowInsets(0, ((android.view.WindowInsets) p6).getSystemWindowInsetTop(), ((android.view.WindowInsets) p6).getSystemWindowInsetRight(), ((android.view.WindowInsets) p6).getSystemWindowInsetBottom());
            }
        } else {
            v0_1 = ((android.view.WindowInsets) p6).replaceSystemWindowInsets(((android.view.WindowInsets) p6).getSystemWindowInsetLeft(), ((android.view.WindowInsets) p6).getSystemWindowInsetTop(), 0, ((android.view.WindowInsets) p6).getSystemWindowInsetBottom());
        }
        p5.dispatchApplyWindowInsets(v0_1);
        return;
    }

    public static android.graphics.drawable.Drawable getDefaultStatusBarBackground(android.content.Context p2)
    {
        android.content.res.TypedArray v0 = p2.obtainStyledAttributes(android.support.v4.widget.DrawerLayoutCompatApi21.THEME_ATTRS);
        try {
            Throwable v1_2 = v0.getDrawable(0);
            v0.recycle();
            return v1_2;
        } catch (Throwable v1_3) {
            v0.recycle();
            throw v1_3;
        }
    }

    public static int getTopInset(Object p1)
    {
        int v0;
        if (p1 == null) {
            v0 = 0;
        } else {
            v0 = ((android.view.WindowInsets) p1).getSystemWindowInsetTop();
        }
        return v0;
    }
}
package android.support.v4.widget;
interface DrawerLayoutImpl {

    public abstract void setChildInsets();
}
package android.support.v4.widget;
interface EdgeEffectCompat$EdgeEffectImpl {

    public abstract boolean draw();

    public abstract void finish();

    public abstract boolean isFinished();

    public abstract Object newEdgeEffect();

    public abstract boolean onAbsorb();

    public abstract boolean onPull();

    public abstract boolean onPull();

    public abstract boolean onRelease();

    public abstract void setSize();
}
package android.support.v4.widget;
public final class EdgeEffectCompat {
    private static final android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL;
    private Object mEdgeEffect;

    static EdgeEffectCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 21) {
            if (android.os.Build$VERSION.SDK_INT < 14) {
                android.support.v4.widget.EdgeEffectCompat.IMPL = new android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl();
            } else {
                android.support.v4.widget.EdgeEffectCompat.IMPL = new android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl();
            }
        } else {
            android.support.v4.widget.EdgeEffectCompat.IMPL = new android.support.v4.widget.EdgeEffectCompat$EdgeEffectLollipopImpl();
        }
        return;
    }

    public EdgeEffectCompat(android.content.Context p2)
    {
        this.mEdgeEffect = android.support.v4.widget.EdgeEffectCompat.IMPL.newEdgeEffect(p2);
        return;
    }

    public boolean draw(android.graphics.Canvas p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.draw(this.mEdgeEffect, p3);
    }

    public void finish()
    {
        android.support.v4.widget.EdgeEffectCompat.IMPL.finish(this.mEdgeEffect);
        return;
    }

    public boolean isFinished()
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.isFinished(this.mEdgeEffect);
    }

    public boolean onAbsorb(int p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onAbsorb(this.mEdgeEffect, p3);
    }

    public boolean onPull(float p3)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onPull(this.mEdgeEffect, p3);
    }

    public boolean onPull(float p3, float p4)
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onPull(this.mEdgeEffect, p3, p4);
    }

    public boolean onRelease()
    {
        return android.support.v4.widget.EdgeEffectCompat.IMPL.onRelease(this.mEdgeEffect);
    }

    public void setSize(int p3, int p4)
    {
        android.support.v4.widget.EdgeEffectCompat.IMPL.setSize(this.mEdgeEffect, p3, p4);
        return;
    }
}
package android.support.v4.widget;
 class EdgeEffectCompatIcs {

    EdgeEffectCompatIcs()
    {
        return;
    }

    public static boolean draw(Object p1, android.graphics.Canvas p2)
    {
        return ((android.widget.EdgeEffect) p1).draw(p2);
    }

    public static void finish(Object p0)
    {
        ((android.widget.EdgeEffect) p0).finish();
        return;
    }

    public static boolean isFinished(Object p1)
    {
        return ((android.widget.EdgeEffect) p1).isFinished();
    }

    public static Object newEdgeEffect(android.content.Context p1)
    {
        return new android.widget.EdgeEffect(p1);
    }

    public static boolean onAbsorb(Object p1, int p2)
    {
        ((android.widget.EdgeEffect) p1).onAbsorb(p2);
        return 1;
    }

    public static boolean onPull(Object p1, float p2)
    {
        ((android.widget.EdgeEffect) p1).onPull(p2);
        return 1;
    }

    public static boolean onRelease(Object p2)
    {
        ((android.widget.EdgeEffect) p2).onRelease();
        return ((android.widget.EdgeEffect) p2).isFinished();
    }

    public static void setSize(Object p0, int p1, int p2)
    {
        ((android.widget.EdgeEffect) p0).setSize(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class EdgeEffectCompatLollipop {

    EdgeEffectCompatLollipop()
    {
        return;
    }

    public static boolean onPull(Object p1, float p2, float p3)
    {
        ((android.widget.EdgeEffect) p1).onPull(p2, p3);
        return 1;
    }
}
package android.support.v4.widget;
public interface FocusStrategy$BoundsAdapter {

    public abstract void obtainBounds();
}
package android.support.v4.widget;
public interface FocusStrategy$CollectionAdapter {

    public abstract Object get();

    public abstract int size();
}
package android.support.v4.widget;
 class FocusStrategy$SequentialComparator implements java.util.Comparator {
    private final android.support.v4.widget.FocusStrategy$BoundsAdapter mAdapter;
    private final boolean mIsLayoutRtl;
    private final android.graphics.Rect mTemp1;
    private final android.graphics.Rect mTemp2;

    FocusStrategy$SequentialComparator(boolean p2, android.support.v4.widget.FocusStrategy$BoundsAdapter p3)
    {
        this.mTemp1 = new android.graphics.Rect();
        this.mTemp2 = new android.graphics.Rect();
        this.mIsLayoutRtl = p2;
        this.mAdapter = p3;
        return;
    }

    public int compare(Object p7, Object p8)
    {
        int v2 = 1;
        int v3 = -1;
        android.graphics.Rect v0 = this.mTemp1;
        android.graphics.Rect v1 = this.mTemp2;
        this.mAdapter.obtainBounds(p7, v0);
        this.mAdapter.obtainBounds(p8, v1);
        if (v0.top >= v1.top) {
            if (v0.top <= v1.top) {
                if (v0.left >= v1.left) {
                    if (v0.left <= v1.left) {
                        if (v0.bottom >= v1.bottom) {
                            if (v0.bottom <= v1.bottom) {
                                if (v0.right >= v1.right) {
                                    if (v0.right <= v1.right) {
                                        v3 = 0;
                                    } else {
                                        if (!this.mIsLayoutRtl) {
                                            v3 = 1;
                                        }
                                    }
                                } else {
                                    if (!this.mIsLayoutRtl) {
                                        v2 = -1;
                                    }
                                    v3 = v2;
                                }
                            } else {
                                v3 = 1;
                            }
                        }
                    } else {
                        if (!this.mIsLayoutRtl) {
                            v3 = 1;
                        }
                    }
                } else {
                    if (!this.mIsLayoutRtl) {
                        v2 = -1;
                    }
                    v3 = v2;
                }
            } else {
                v3 = 1;
            }
        }
        return v3;
    }
}
package android.support.v4.widget;
 class FocusStrategy {

    FocusStrategy()
    {
        return;
    }

    private static boolean beamBeats(int p6, android.graphics.Rect p7, android.graphics.Rect p8, android.graphics.Rect p9)
    {
        int v2 = 1;
        boolean v0 = android.support.v4.widget.FocusStrategy.beamsOverlap(p6, p7, p8);
        if ((!android.support.v4.widget.FocusStrategy.beamsOverlap(p6, p7, p9)) && (v0)) {
            if ((android.support.v4.widget.FocusStrategy.isToDirectionOf(p6, p7, p9)) && ((p6 != 17) && ((p6 != 66) && (android.support.v4.widget.FocusStrategy.majorAxisDistance(p6, p7, p8) >= android.support.v4.widget.FocusStrategy.majorAxisDistanceToFarEdge(p6, p7, p9))))) {
                v2 = 0;
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    private static boolean beamsOverlap(int p4, android.graphics.Rect p5, android.graphics.Rect p6)
    {
        String v0_0 = 1;
        switch (p4) {
            case 17:
            case 66:
                if ((p6.bottom < p5.top) || (p6.top > p5.bottom)) {
                    v0_0 = 0;
                } else {
                }
                break;
            case 33:
            case 130:
                if ((p6.right >= p5.left) && (p6.left <= p5.right)) {
                } else {
                    v0_0 = 0;
                }
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_0;
    }

    public static Object findNextFocusInAbsoluteDirection(Object p8, android.support.v4.widget.FocusStrategy$CollectionAdapter p9, android.support.v4.widget.FocusStrategy$BoundsAdapter p10, Object p11, android.graphics.Rect p12, int p13)
    {
        android.graphics.Rect v0_1 = new android.graphics.Rect(p12);
        switch (p13) {
            case 17:
                v0_1.offset((p12.width() + 1), 0);
                break;
            case 33:
                v0_1.offset(0, (p12.height() + 1));
                break;
            case 66:
                v0_1.offset((- (p12.width() + 1)), 0);
                break;
            case 130:
                v0_1.offset(0, (- (p12.height() + 1)));
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        Object v1 = 0;
        int v2 = p9.size(p8);
        android.graphics.Rect v4_1 = new android.graphics.Rect();
        int v5 = 0;
        while (v5 < v2) {
            Object v3 = p9.get(p8, v5);
            if (v3 != p11) {
                p10.obtainBounds(v3, v4_1);
                if (android.support.v4.widget.FocusStrategy.isBetterCandidate(p13, p12, v4_1, v0_1)) {
                    v0_1.set(v4_1);
                    v1 = v3;
                }
            }
            v5++;
        }
        return v1;
    }

    public static Object findNextFocusInRelativeDirection(Object p6, android.support.v4.widget.FocusStrategy$CollectionAdapter p7, android.support.v4.widget.FocusStrategy$BoundsAdapter p8, Object p9, int p10, boolean p11, boolean p12)
    {
        int v1 = p7.size(p6);
        java.util.ArrayList v3_1 = new java.util.ArrayList(v1);
        int v2 = 0;
        while (v2 < v1) {
            v3_1.add(p7.get(p6, v2));
            v2++;
        }
        Object v4_0;
        java.util.Collections.sort(v3_1, new android.support.v4.widget.FocusStrategy$SequentialComparator(p11, p8));
        switch (p10) {
            case 1:
                v4_0 = android.support.v4.widget.FocusStrategy.getPreviousFocusable(p9, v3_1, p12);
                break;
            case 2:
                v4_0 = android.support.v4.widget.FocusStrategy.getNextFocusable(p9, v3_1, p12);
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_FORWARD, FOCUS_BACKWARD}.");
        }
        return v4_0;
    }

    private static Object getNextFocusable(Object p3, java.util.ArrayList p4, boolean p5)
    {
        Object v2_2;
        int v0 = p4.size();
        if (p3 != null) {
            v2_2 = p4.lastIndexOf(p3);
        } else {
            v2_2 = -1;
        }
        Object v2_0;
        int v1 = (v2_2 + 1);
        if (v1 >= v0) {
            if ((!p5) || (v0 <= 0)) {
                v2_0 = 0;
            } else {
                v2_0 = p4.get(0);
            }
        } else {
            v2_0 = p4.get(v1);
        }
        return v2_0;
    }

    private static Object getPreviousFocusable(Object p3, java.util.ArrayList p4, boolean p5)
    {
        Object v2_2;
        int v0 = p4.size();
        if (p3 != null) {
            v2_2 = p4.indexOf(p3);
        } else {
            v2_2 = v0;
        }
        Object v2_0;
        int v1 = (v2_2 - 1);
        if (v1 < 0) {
            if ((!p5) || (v0 <= 0)) {
                v2_0 = 0;
            } else {
                v2_0 = p4.get((v0 - 1));
            }
        } else {
            v2_0 = p4.get(v1);
        }
        return v2_0;
    }

    private static int getWeightedDistanceFor(int p2, int p3)
    {
        return (((p2 * 13) * p2) + (p3 * p3));
    }

    private static boolean isBetterCandidate(int p6, android.graphics.Rect p7, android.graphics.Rect p8, android.graphics.Rect p9)
    {
        int v2 = 1;
        if (android.support.v4.widget.FocusStrategy.isCandidate(p7, p8, p6)) {
            if ((android.support.v4.widget.FocusStrategy.isCandidate(p7, p9, p6)) && (!android.support.v4.widget.FocusStrategy.beamBeats(p6, p7, p8, p9))) {
                if (!android.support.v4.widget.FocusStrategy.beamBeats(p6, p7, p9, p8)) {
                    if (android.support.v4.widget.FocusStrategy.getWeightedDistanceFor(android.support.v4.widget.FocusStrategy.majorAxisDistance(p6, p7, p8), android.support.v4.widget.FocusStrategy.minorAxisDistance(p6, p7, p8)) >= android.support.v4.widget.FocusStrategy.getWeightedDistanceFor(android.support.v4.widget.FocusStrategy.majorAxisDistance(p6, p7, p9), android.support.v4.widget.FocusStrategy.minorAxisDistance(p6, p7, p9))) {
                        v2 = 0;
                    }
                } else {
                    v2 = 0;
                }
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    private static boolean isCandidate(android.graphics.Rect p4, android.graphics.Rect p5, int p6)
    {
        String v0_0 = 1;
        switch (p6) {
            case 17:
                if (((p4.right <= p5.right) && (p4.left < p5.right)) || (p4.left <= p5.left)) {
                    v0_0 = 0;
                } else {
                }
                break;
            case 33:
                if (((p4.bottom > p5.bottom) || (p4.top >= p5.bottom)) && (p4.top > p5.top)) {
                } else {
                    v0_0 = 0;
                }
                break;
            case 66:
                if (((p4.left < p5.left) || (p4.right <= p5.left)) && (p4.right < p5.right)) {
                } else {
                    v0_0 = 0;
                }
                break;
            case 130:
                if (((p4.top < p5.top) || (p4.bottom <= p5.top)) && (p4.bottom < p5.bottom)) {
                } else {
                    v0_0 = 0;
                }
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_0;
    }

    private static boolean isToDirectionOf(int p4, android.graphics.Rect p5, android.graphics.Rect p6)
    {
        String v0_0 = 1;
        switch (p4) {
            case 17:
                if (p5.left < p6.right) {
                    v0_0 = 0;
                } else {
                }
                break;
            case 33:
                if (p5.top >= p6.bottom) {
                } else {
                    v0_0 = 0;
                }
                break;
            case 66:
                if (p5.right <= p6.left) {
                } else {
                    v0_0 = 0;
                }
                break;
            case 130:
                if (p5.bottom <= p6.top) {
                } else {
                    v0_0 = 0;
                }
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_0;
    }

    private static int majorAxisDistance(int p2, android.graphics.Rect p3, android.graphics.Rect p4)
    {
        return Math.max(0, android.support.v4.widget.FocusStrategy.majorAxisDistanceRaw(p2, p3, p4));
    }

    private static int majorAxisDistanceRaw(int p2, android.graphics.Rect p3, android.graphics.Rect p4)
    {
        int v0_2;
        switch (p2) {
            case 17:
                v0_2 = (p3.left - p4.right);
                break;
            case 33:
                v0_2 = (p3.top - p4.bottom);
                break;
            case 66:
                v0_2 = (p4.left - p3.right);
                break;
            case 130:
                v0_2 = (p4.top - p3.bottom);
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_2;
    }

    private static int majorAxisDistanceToFarEdge(int p2, android.graphics.Rect p3, android.graphics.Rect p4)
    {
        return Math.max(1, android.support.v4.widget.FocusStrategy.majorAxisDistanceToFarEdgeRaw(p2, p3, p4));
    }

    private static int majorAxisDistanceToFarEdgeRaw(int p2, android.graphics.Rect p3, android.graphics.Rect p4)
    {
        int v0_2;
        switch (p2) {
            case 17:
                v0_2 = (p3.left - p4.left);
                break;
            case 33:
                v0_2 = (p3.top - p4.top);
                break;
            case 66:
                v0_2 = (p4.right - p3.right);
                break;
            case 130:
                v0_2 = (p4.bottom - p3.bottom);
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_2;
    }

    private static int minorAxisDistance(int p3, android.graphics.Rect p4, android.graphics.Rect p5)
    {
        int v0_2;
        switch (p3) {
            case 17:
            case 66:
                v0_2 = Math.abs(((p4.top + (p4.height() / 2)) - (p5.top + (p5.height() / 2))));
                break;
            case 33:
            case 130:
                v0_2 = Math.abs(((p4.left + (p4.width() / 2)) - (p5.left + (p5.width() / 2))));
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return v0_2;
    }
}
package android.support.v4.widget;
interface ListPopupWindowCompat$ListPopupWindowImpl {

    public abstract android.view.View$OnTouchListener createDragToOpenListener();
}
package android.support.v4.widget;
public final class ListPopupWindowCompat {
    static final android.support.v4.widget.ListPopupWindowCompat$ListPopupWindowImpl IMPL;

    static ListPopupWindowCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            android.support.v4.widget.ListPopupWindowCompat.IMPL = new android.support.v4.widget.ListPopupWindowCompat$BaseListPopupWindowImpl();
        } else {
            android.support.v4.widget.ListPopupWindowCompat.IMPL = new android.support.v4.widget.ListPopupWindowCompat$KitKatListPopupWindowImpl();
        }
        return;
    }

    private ListPopupWindowCompat()
    {
        return;
    }

    public static android.view.View$OnTouchListener createDragToOpenListener(Object p1, android.view.View p2)
    {
        return android.support.v4.widget.ListPopupWindowCompat.IMPL.createDragToOpenListener(p1, p2);
    }
}
package android.support.v4.widget;
 class ListPopupWindowCompatKitKat {

    ListPopupWindowCompatKitKat()
    {
        return;
    }

    public static android.view.View$OnTouchListener createDragToOpenListener(Object p1, android.view.View p2)
    {
        return ((android.widget.ListPopupWindow) p1).createDragToOpenListener(p2);
    }
}
package android.support.v4.widget;
public final class ListViewCompat {

    private ListViewCompat()
    {
        return;
    }

    public static void scrollListBy(android.widget.ListView p2, int p3)
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            android.support.v4.widget.ListViewCompatGingerbread.scrollListBy(p2, p3);
        } else {
            android.support.v4.widget.ListViewCompatKitKat.scrollListBy(p2, p3);
        }
        return;
    }
}
package android.support.v4.widget;
 class ListViewCompatGingerbread {

    ListViewCompatGingerbread()
    {
        return;
    }

    static void scrollListBy(android.widget.ListView p4, int p5)
    {
        int v0 = p4.getFirstVisiblePosition();
        if (v0 != -1) {
            android.view.View v1 = p4.getChildAt(0);
            if (v1 != null) {
                p4.setSelectionFromTop(v0, (v1.getTop() - p5));
            }
        }
        return;
    }
}
package android.support.v4.widget;
 class ListViewCompatKitKat {

    ListViewCompatKitKat()
    {
        return;
    }

    static void scrollListBy(android.widget.ListView p0, int p1)
    {
        p0.scrollListBy(p1);
        return;
    }
}
package android.support.v4.widget;
 class MaterialProgressDrawable$1 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.MaterialProgressDrawable this$0;
    final synthetic android.support.v4.widget.MaterialProgressDrawable$Ring val$ring;

    MaterialProgressDrawable$1(android.support.v4.widget.MaterialProgressDrawable p1, android.support.v4.widget.MaterialProgressDrawable$Ring p2)
    {
        this.this$0 = p1;
        this.val$ring = p2;
        return;
    }

    public void applyTransformation(float p15, android.view.animation.Transformation p16)
    {
        if (!this.this$0.mFinishing) {
            float v3 = this.this$0.getMinProgressArc(this.val$ring);
            float v7 = this.val$ring.getStartingEndTrim();
            float v9 = this.val$ring.getStartingStartTrim();
            float v8 = this.val$ring.getStartingRotation();
            this.this$0.updateRingColor(p15, this.val$ring);
            if (p15 <= 1056964608) {
                this.val$ring.setStartTrim((v9 + ((1061997773 - v3) * android.support.v4.widget.MaterialProgressDrawable.MATERIAL_INTERPOLATOR.getInterpolation((p15 / 1056964608)))));
            }
            if (p15 > 1056964608) {
                this.val$ring.setEndTrim((v7 + (android.support.v4.widget.MaterialProgressDrawable.MATERIAL_INTERPOLATOR.getInterpolation(((p15 - 1056964608) / 1056964608)) * (1061997773 - v3))));
            }
            this.val$ring.setRotation((v8 + (1048576000 * p15)));
            this.this$0.setRotation(((1129840640 * p15) + (1149698048 * (this.this$0.mRotationCount / 1084227584))));
        } else {
            this.this$0.applyFinishTranslation(p15, this.val$ring);
        }
        return;
    }
}
package android.support.v4.widget;
 class MaterialProgressDrawable$2 implements android.view.animation.Animation$AnimationListener {
    final synthetic android.support.v4.widget.MaterialProgressDrawable this$0;
    final synthetic android.support.v4.widget.MaterialProgressDrawable$Ring val$ring;

    MaterialProgressDrawable$2(android.support.v4.widget.MaterialProgressDrawable p1, android.support.v4.widget.MaterialProgressDrawable$Ring p2)
    {
        this.this$0 = p1;
        this.val$ring = p2;
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p1)
    {
        return;
    }

    public void onAnimationRepeat(android.view.animation.Animation p4)
    {
        this.val$ring.storeOriginals();
        this.val$ring.goToNextColor();
        this.val$ring.setStartTrim(this.val$ring.getEndTrim());
        if (!this.this$0.mFinishing) {
            this.this$0.mRotationCount = ((this.this$0.mRotationCount + 1065353216) % 1084227584);
        } else {
            this.this$0.mFinishing = 0;
            p4.setDuration(1332);
            this.val$ring.setShowArrow(0);
        }
        return;
    }

    public void onAnimationStart(android.view.animation.Animation p3)
    {
        this.this$0.mRotationCount = 0;
        return;
    }
}
package android.support.v4.widget;
 class MaterialProgressDrawable$3 implements android.graphics.drawable.Drawable$Callback {
    final synthetic android.support.v4.widget.MaterialProgressDrawable this$0;

    MaterialProgressDrawable$3(android.support.v4.widget.MaterialProgressDrawable p1)
    {
        this.this$0 = p1;
        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable p2)
    {
        this.this$0.invalidateSelf();
        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable p2, Runnable p3, long p4)
    {
        this.this$0.scheduleSelf(p3, p4);
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable p2, Runnable p3)
    {
        this.this$0.unscheduleSelf(p3);
        return;
    }
}
package android.support.v4.widget;
public interface annotation MaterialProgressDrawable$ProgressDrawableSize implements java.lang.annotation.Annotation {
}
package android.support.v4.widget;
 class MaterialProgressDrawable$Ring {
    private int mAlpha;
    private android.graphics.Path mArrow;
    private int mArrowHeight;
    private final android.graphics.Paint mArrowPaint;
    private float mArrowScale;
    private int mArrowWidth;
    private int mBackgroundColor;
    private final android.graphics.drawable.Drawable$Callback mCallback;
    private final android.graphics.Paint mCirclePaint;
    private int mColorIndex;
    private int[] mColors;
    private int mCurrentColor;
    private float mEndTrim;
    private final android.graphics.Paint mPaint;
    private double mRingCenterRadius;
    private float mRotation;
    private boolean mShowArrow;
    private float mStartTrim;
    private float mStartingEndTrim;
    private float mStartingRotation;
    private float mStartingStartTrim;
    private float mStrokeInset;
    private float mStrokeWidth;
    private final android.graphics.RectF mTempBounds;

    MaterialProgressDrawable$Ring(android.graphics.drawable.Drawable$Callback p4)
    {
        this.mTempBounds = new android.graphics.RectF();
        this.mPaint = new android.graphics.Paint();
        this.mArrowPaint = new android.graphics.Paint();
        this.mStartTrim = 0;
        this.mEndTrim = 0;
        this.mRotation = 0;
        this.mStrokeWidth = 1084227584;
        this.mStrokeInset = 1075838976;
        this.mCirclePaint = new android.graphics.Paint(1);
        this.mCallback = p4;
        this.mPaint.setStrokeCap(android.graphics.Paint$Cap.SQUARE);
        this.mPaint.setAntiAlias(1);
        this.mPaint.setStyle(android.graphics.Paint$Style.STROKE);
        this.mArrowPaint.setStyle(android.graphics.Paint$Style.FILL);
        this.mArrowPaint.setAntiAlias(1);
        return;
    }

    private void drawTriangle(android.graphics.Canvas p9, float p10, float p11, android.graphics.Rect p12)
    {
        if (this.mShowArrow) {
            if (this.mArrow != null) {
                this.mArrow.reset();
            } else {
                this.mArrow = new android.graphics.Path();
                this.mArrow.setFillType(android.graphics.Path$FillType.EVEN_ODD);
            }
            float v0 = (((float) (((int) this.mStrokeInset) / 2)) * this.mArrowScale);
            float v1 = ((float) ((this.mRingCenterRadius * Math.cos(0)) + ((double) p12.exactCenterX())));
            float v2 = ((float) ((this.mRingCenterRadius * Math.sin(0)) + ((double) p12.exactCenterY())));
            this.mArrow.moveTo(0, 0);
            this.mArrow.lineTo((((float) this.mArrowWidth) * this.mArrowScale), 0);
            this.mArrow.lineTo(((((float) this.mArrowWidth) * this.mArrowScale) / 1073741824), (((float) this.mArrowHeight) * this.mArrowScale));
            this.mArrow.offset((v1 - v0), v2);
            this.mArrow.close();
            this.mArrowPaint.setColor(this.mCurrentColor);
            p9.rotate(((p10 + p11) - 1084227584), p12.exactCenterX(), p12.exactCenterY());
            p9.drawPath(this.mArrow, this.mArrowPaint);
        }
        return;
    }

    private int getNextColorIndex()
    {
        return ((this.mColorIndex + 1) % this.mColors.length);
    }

    private void invalidateSelf()
    {
        this.mCallback.invalidateDrawable(0);
        return;
    }

    public void draw(android.graphics.Canvas p9, android.graphics.Rect p10)
    {
        android.graphics.RectF v1 = this.mTempBounds;
        v1.set(p10);
        v1.inset(this.mStrokeInset, this.mStrokeInset);
        float v2 = ((this.mStartTrim + this.mRotation) * 1135869952);
        float v3 = (((this.mEndTrim + this.mRotation) * 1135869952) - v2);
        this.mPaint.setColor(this.mCurrentColor);
        p9.drawArc(v1, v2, v3, 0, this.mPaint);
        this.drawTriangle(p9, v2, v3, p10);
        if (this.mAlpha < 255) {
            this.mCirclePaint.setColor(this.mBackgroundColor);
            this.mCirclePaint.setAlpha((255 - this.mAlpha));
            p9.drawCircle(p10.exactCenterX(), p10.exactCenterY(), ((float) (p10.width() / 2)), this.mCirclePaint);
        }
        return;
    }

    public int getAlpha()
    {
        return this.mAlpha;
    }

    public double getCenterRadius()
    {
        return this.mRingCenterRadius;
    }

    public float getEndTrim()
    {
        return this.mEndTrim;
    }

    public float getInsets()
    {
        return this.mStrokeInset;
    }

    public int getNextColor()
    {
        return this.mColors[this.getNextColorIndex()];
    }

    public float getRotation()
    {
        return this.mRotation;
    }

    public float getStartTrim()
    {
        return this.mStartTrim;
    }

    public int getStartingColor()
    {
        return this.mColors[this.mColorIndex];
    }

    public float getStartingEndTrim()
    {
        return this.mStartingEndTrim;
    }

    public float getStartingRotation()
    {
        return this.mStartingRotation;
    }

    public float getStartingStartTrim()
    {
        return this.mStartingStartTrim;
    }

    public float getStrokeWidth()
    {
        return this.mStrokeWidth;
    }

    public void goToNextColor()
    {
        this.setColorIndex(this.getNextColorIndex());
        return;
    }

    public void resetOriginals()
    {
        this.mStartingStartTrim = 0;
        this.mStartingEndTrim = 0;
        this.mStartingRotation = 0;
        this.setStartTrim(0);
        this.setEndTrim(0);
        this.setRotation(0);
        return;
    }

    public void setAlpha(int p1)
    {
        this.mAlpha = p1;
        return;
    }

    public void setArrowDimensions(float p2, float p3)
    {
        this.mArrowWidth = ((int) p2);
        this.mArrowHeight = ((int) p3);
        return;
    }

    public void setArrowScale(float p2)
    {
        if (p2 != this.mArrowScale) {
            this.mArrowScale = p2;
            this.invalidateSelf();
        }
        return;
    }

    public void setBackgroundColor(int p1)
    {
        this.mBackgroundColor = p1;
        return;
    }

    public void setCenterRadius(double p2)
    {
        this.mRingCenterRadius = p2;
        return;
    }

    public void setColor(int p1)
    {
        this.mCurrentColor = p1;
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter p2)
    {
        this.mPaint.setColorFilter(p2);
        this.invalidateSelf();
        return;
    }

    public void setColorIndex(int p3)
    {
        this.mColorIndex = p3;
        this.mCurrentColor = this.mColors[this.mColorIndex];
        return;
    }

    public void setColors(int[] p2)
    {
        this.mColors = p2;
        this.setColorIndex(0);
        return;
    }

    public void setEndTrim(float p1)
    {
        this.mEndTrim = p1;
        this.invalidateSelf();
        return;
    }

    public void setInsets(int p8, int p9)
    {
        float v0;
        float v1 = ((float) Math.min(p8, p9));
        if ((this.mRingCenterRadius > 0) && (v1 >= 0)) {
            v0 = ((float) (((double) (v1 / 1073741824)) - this.mRingCenterRadius));
        } else {
            v0 = ((float) Math.ceil(((double) (this.mStrokeWidth / 1073741824))));
        }
        this.mStrokeInset = v0;
        return;
    }

    public void setRotation(float p1)
    {
        this.mRotation = p1;
        this.invalidateSelf();
        return;
    }

    public void setShowArrow(boolean p2)
    {
        if (this.mShowArrow != p2) {
            this.mShowArrow = p2;
            this.invalidateSelf();
        }
        return;
    }

    public void setStartTrim(float p1)
    {
        this.mStartTrim = p1;
        this.invalidateSelf();
        return;
    }

    public void setStrokeWidth(float p2)
    {
        this.mStrokeWidth = p2;
        this.mPaint.setStrokeWidth(p2);
        this.invalidateSelf();
        return;
    }

    public void storeOriginals()
    {
        this.mStartingStartTrim = this.mStartTrim;
        this.mStartingEndTrim = this.mEndTrim;
        this.mStartingRotation = this.mRotation;
        return;
    }
}
package android.support.v4.widget;
 class MaterialProgressDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Animatable {
    private static final int ANIMATION_DURATION = 1332;
    private static final int ARROW_HEIGHT = 5;
    private static final int ARROW_HEIGHT_LARGE = 6;
    private static final float ARROW_OFFSET_ANGLE = 16544;
    private static final int ARROW_WIDTH = 10;
    private static final int ARROW_WIDTH_LARGE = 12;
    private static final float CENTER_RADIUS = 16652;
    private static final float CENTER_RADIUS_LARGE = 16712;
    private static final int CIRCLE_DIAMETER = 40;
    private static final int CIRCLE_DIAMETER_LARGE = 56;
    private static final int[] COLORS = None;
    private static final float COLOR_START_DELAY_OFFSET = 16192;
    static final int DEFAULT = 1;
    private static final float END_TRIM_START_DELAY_OFFSET = 63;
    private static final float FULL_ROTATION = 17543;
    static final int LARGE = 0;
    private static final android.view.animation.Interpolator LINEAR_INTERPOLATOR = None;
    static final android.view.animation.Interpolator MATERIAL_INTERPOLATOR = None;
    private static final float MAX_PROGRESS_ARC = 1061997773;
    private static final float NUM_POINTS = 16544;
    private static final float START_TRIM_DURATION_OFFSET = 63;
    private static final float STROKE_WIDTH = 16416;
    private static final float STROKE_WIDTH_LARGE = 16448;
    private android.view.animation.Animation mAnimation;
    private final java.util.ArrayList mAnimators;
    private final android.graphics.drawable.Drawable$Callback mCallback;
    boolean mFinishing;
    private double mHeight;
    private android.view.View mParent;
    private android.content.res.Resources mResources;
    private final android.support.v4.widget.MaterialProgressDrawable$Ring mRing;
    private float mRotation;
    float mRotationCount;
    private double mWidth;

    static MaterialProgressDrawable()
    {
        android.support.v4.widget.MaterialProgressDrawable.LINEAR_INTERPOLATOR = new android.view.animation.LinearInterpolator();
        android.support.v4.widget.MaterialProgressDrawable.MATERIAL_INTERPOLATOR = new android.support.v4.view.animation.FastOutSlowInInterpolator();
        int[] v0_5 = new int[1];
        v0_5[0] = -16777216;
        android.support.v4.widget.MaterialProgressDrawable.COLORS = v0_5;
        return;
    }

    MaterialProgressDrawable(android.content.Context p3, android.view.View p4)
    {
        this.mAnimators = new java.util.ArrayList();
        this.mCallback = new android.support.v4.widget.MaterialProgressDrawable$3(this);
        this.mParent = p4;
        this.mResources = p3.getResources();
        this.mRing = new android.support.v4.widget.MaterialProgressDrawable$Ring(this.mCallback);
        this.mRing.setColors(android.support.v4.widget.MaterialProgressDrawable.COLORS);
        this.updateSizes(1);
        this.setupAnimators();
        return;
    }

    private int evaluateColorChange(float p13, int p14, int p15)
    {
        int v8 = Integer.valueOf(p14).intValue();
        int v5 = ((v8 >> 24) & 255);
        int v9 = ((v8 >> 16) & 255);
        int v7 = ((v8 >> 8) & 255);
        int v6 = (v8 & 255);
        int v3 = Integer.valueOf(p15).intValue();
        return (((((((int) (((float) (((v3 >> 24) & 255) - v5)) * p13)) + v5) << 24) | ((((int) (((float) (((v3 >> 16) & 255) - v9)) * p13)) + v9) << 16)) | ((((int) (((float) (((v3 >> 8) & 255) - v7)) * p13)) + v7) << 8)) | (((int) (((float) ((v3 & 255) - v6)) * p13)) + v6));
    }

    private float getRotation()
    {
        return this.mRotation;
    }

    private void setSizeParameters(double p8, double p10, double p12, double p14, float p16, float p17)
    {
        android.support.v4.widget.MaterialProgressDrawable$Ring v1 = this.mRing;
        float v2 = this.mResources.getDisplayMetrics().density;
        this.mWidth = (((double) v2) * p8);
        this.mHeight = (((double) v2) * p10);
        v1.setStrokeWidth((((float) p14) * v2));
        v1.setCenterRadius((((double) v2) * p12));
        v1.setColorIndex(0);
        v1.setArrowDimensions((p16 * v2), (p17 * v2));
        v1.setInsets(((int) this.mWidth), ((int) this.mHeight));
        return;
    }

    private void setupAnimators()
    {
        android.support.v4.widget.MaterialProgressDrawable$Ring v1 = this.mRing;
        android.support.v4.widget.MaterialProgressDrawable$1 v0_1 = new android.support.v4.widget.MaterialProgressDrawable$1(this, v1);
        v0_1.setRepeatCount(-1);
        v0_1.setRepeatMode(1);
        v0_1.setInterpolator(android.support.v4.widget.MaterialProgressDrawable.LINEAR_INTERPOLATOR);
        v0_1.setAnimationListener(new android.support.v4.widget.MaterialProgressDrawable$2(this, v1));
        this.mAnimation = v0_1;
        return;
    }

    void applyFinishTranslation(float p9, android.support.v4.widget.MaterialProgressDrawable$Ring p10)
    {
        this.updateRingColor(p9, p10);
        float v3 = ((float) (Math.floor(((double) (p10.getStartingRotation() / 1061997773))) + 1.0));
        p10.setStartTrim((p10.getStartingStartTrim() + (((p10.getStartingEndTrim() - this.getMinProgressArc(p10)) - p10.getStartingStartTrim()) * p9)));
        p10.setEndTrim(p10.getStartingEndTrim());
        p10.setRotation((p10.getStartingRotation() + ((v3 - p10.getStartingRotation()) * p9)));
        return;
    }

    public void draw(android.graphics.Canvas p6)
    {
        android.graphics.Rect v0 = this.getBounds();
        int v1 = p6.save();
        p6.rotate(this.mRotation, v0.exactCenterX(), v0.exactCenterY());
        this.mRing.draw(p6, v0);
        p6.restoreToCount(v1);
        return;
    }

    public int getAlpha()
    {
        return this.mRing.getAlpha();
    }

    public int getIntrinsicHeight()
    {
        return ((int) this.mHeight);
    }

    public int getIntrinsicWidth()
    {
        return ((int) this.mWidth);
    }

    float getMinProgressArc(android.support.v4.widget.MaterialProgressDrawable$Ring p7)
    {
        return ((float) Math.toRadians((((double) p7.getStrokeWidth()) / (6.283185307179586 * p7.getCenterRadius()))));
    }

    public int getOpacity()
    {
        return -3;
    }

    public boolean isRunning()
    {
        java.util.ArrayList v2 = this.mAnimators;
        int v0 = v2.size();
        int v3 = 0;
        while (v3 < v0) {
            android.view.animation.Animation v1_1 = ((android.view.animation.Animation) v2.get(v3));
            if ((!v1_1.hasStarted()) || (v1_1.hasEnded())) {
                v3++;
            } else {
                int v4_2 = 1;
            }
            return v4_2;
        }
        v4_2 = 0;
        return v4_2;
    }

    public void setAlpha(int p2)
    {
        this.mRing.setAlpha(p2);
        return;
    }

    public void setArrowScale(float p2)
    {
        this.mRing.setArrowScale(p2);
        return;
    }

    public void setBackgroundColor(int p2)
    {
        this.mRing.setBackgroundColor(p2);
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter p2)
    {
        this.mRing.setColorFilter(p2);
        return;
    }

    public varargs void setColorSchemeColors(int[] p3)
    {
        this.mRing.setColors(p3);
        this.mRing.setColorIndex(0);
        return;
    }

    public void setProgressRotation(float p2)
    {
        this.mRing.setRotation(p2);
        return;
    }

    void setRotation(float p1)
    {
        this.mRotation = p1;
        this.invalidateSelf();
        return;
    }

    public void setStartEndTrim(float p2, float p3)
    {
        this.mRing.setStartTrim(p2);
        this.mRing.setEndTrim(p3);
        return;
    }

    public void showArrow(boolean p2)
    {
        this.mRing.setShowArrow(p2);
        return;
    }

    public void start()
    {
        this.mAnimation.reset();
        this.mRing.storeOriginals();
        if (this.mRing.getEndTrim() == this.mRing.getStartTrim()) {
            this.mRing.setColorIndex(0);
            this.mRing.resetOriginals();
            this.mAnimation.setDuration(1332);
            this.mParent.startAnimation(this.mAnimation);
        } else {
            this.mFinishing = 1;
            this.mAnimation.setDuration(666);
            this.mParent.startAnimation(this.mAnimation);
        }
        return;
    }

    public void stop()
    {
        this.mParent.clearAnimation();
        this.setRotation(0);
        this.mRing.setShowArrow(0);
        this.mRing.setColorIndex(0);
        this.mRing.resetOriginals();
        return;
    }

    void updateRingColor(float p4, android.support.v4.widget.MaterialProgressDrawable$Ring p5)
    {
        if (p4 > 1061158912) {
            p5.setColor(this.evaluateColorChange(((p4 - 1061158912) / 1048576000), p5.getStartingColor(), p5.getNextColor()));
        }
        return;
    }

    public void updateSizes(int p15)
    {
        if (p15 != 0) {
            this.setSizeParameters(40.0, 40.0, 8.75, 2.5, 1092616192, 1084227584);
        } else {
            this.setSizeParameters(56.0, 56.0, 12.5, 3.0, 1094713344, 1086324736);
        }
        return;
    }
}
package android.support.v4.widget;
public interface NestedScrollView$OnScrollChangeListener {

    public abstract void onScrollChange();
}
package android.support.v4.widget;
final class NestedScrollView$SavedState$1 implements android.os.Parcelable$Creator {

    NestedScrollView$SavedState$1()
    {
        return;
    }

    public android.support.v4.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel p2)
    {
        return new android.support.v4.widget.NestedScrollView$SavedState(p2);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2)
    {
        return this.createFromParcel(p2);
    }

    public android.support.v4.widget.NestedScrollView$SavedState[] newArray(int p2)
    {
        android.support.v4.widget.NestedScrollView$SavedState[] v0 = new android.support.v4.widget.NestedScrollView$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.widget;
 class NestedScrollView$SavedState extends android.view.View$BaseSavedState {
    public static final android.os.Parcelable$Creator CREATOR;
    public int scrollPosition;

    static NestedScrollView$SavedState()
    {
        android.support.v4.widget.NestedScrollView$SavedState.CREATOR = new android.support.v4.widget.NestedScrollView$SavedState$1();
        return;
    }

    NestedScrollView$SavedState(android.os.Parcel p2)
    {
        super(p2);
        super.scrollPosition = p2.readInt();
        return;
    }

    NestedScrollView$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("HorizontalScrollView.SavedState{").append(Integer.toHexString(System.identityHashCode(this))).append(" scrollPosition=").append(this.scrollPosition).append("}").toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeInt(this.scrollPosition);
        return;
    }
}
package android.support.v4.widget;
interface PopupMenuCompat$PopupMenuImpl {

    public abstract android.view.View$OnTouchListener getDragToOpenListener();
}
package android.support.v4.widget;
public final class PopupMenuCompat {
    static final android.support.v4.widget.PopupMenuCompat$PopupMenuImpl IMPL;

    static PopupMenuCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 19) {
            android.support.v4.widget.PopupMenuCompat.IMPL = new android.support.v4.widget.PopupMenuCompat$BasePopupMenuImpl();
        } else {
            android.support.v4.widget.PopupMenuCompat.IMPL = new android.support.v4.widget.PopupMenuCompat$KitKatPopupMenuImpl();
        }
        return;
    }

    private PopupMenuCompat()
    {
        return;
    }

    public static android.view.View$OnTouchListener getDragToOpenListener(Object p1)
    {
        return android.support.v4.widget.PopupMenuCompat.IMPL.getDragToOpenListener(p1);
    }
}
package android.support.v4.widget;
 class PopupMenuCompatKitKat {

    PopupMenuCompatKitKat()
    {
        return;
    }

    public static android.view.View$OnTouchListener getDragToOpenListener(Object p1)
    {
        return ((android.widget.PopupMenu) p1).getDragToOpenListener();
    }
}
package android.support.v4.widget;
interface PopupWindowCompat$PopupWindowImpl {

    public abstract boolean getOverlapAnchor();

    public abstract int getWindowLayoutType();

    public abstract void setOverlapAnchor();

    public abstract void setWindowLayoutType();

    public abstract void showAsDropDown();
}
package android.support.v4.widget;
public final class PopupWindowCompat {
    static final android.support.v4.widget.PopupWindowCompat$PopupWindowImpl IMPL;

    static PopupWindowCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 23) {
            if (v0 < 21) {
                if (v0 < 19) {
                    android.support.v4.widget.PopupWindowCompat.IMPL = new android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl();
                } else {
                    android.support.v4.widget.PopupWindowCompat.IMPL = new android.support.v4.widget.PopupWindowCompat$KitKatPopupWindowImpl();
                }
            } else {
                android.support.v4.widget.PopupWindowCompat.IMPL = new android.support.v4.widget.PopupWindowCompat$Api21PopupWindowImpl();
            }
        } else {
            android.support.v4.widget.PopupWindowCompat.IMPL = new android.support.v4.widget.PopupWindowCompat$Api23PopupWindowImpl();
        }
        return;
    }

    private PopupWindowCompat()
    {
        return;
    }

    public static boolean getOverlapAnchor(android.widget.PopupWindow p1)
    {
        return android.support.v4.widget.PopupWindowCompat.IMPL.getOverlapAnchor(p1);
    }

    public static int getWindowLayoutType(android.widget.PopupWindow p1)
    {
        return android.support.v4.widget.PopupWindowCompat.IMPL.getWindowLayoutType(p1);
    }

    public static void setOverlapAnchor(android.widget.PopupWindow p1, boolean p2)
    {
        android.support.v4.widget.PopupWindowCompat.IMPL.setOverlapAnchor(p1, p2);
        return;
    }

    public static void setWindowLayoutType(android.widget.PopupWindow p1, int p2)
    {
        android.support.v4.widget.PopupWindowCompat.IMPL.setWindowLayoutType(p1, p2);
        return;
    }

    public static void showAsDropDown(android.widget.PopupWindow p6, android.view.View p7, int p8, int p9, int p10)
    {
        android.support.v4.widget.PopupWindowCompat.IMPL.showAsDropDown(p6, p7, p8, p9, p10);
        return;
    }
}
package android.support.v4.widget;
 class PopupWindowCompatApi21 {
    private static final String TAG = "PopupWindowCompatApi21";
    private static reflect.Field sOverlapAnchorField;

    static PopupWindowCompatApi21()
    {
        try {
            android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField = android.widget.PopupWindow.getDeclaredField("mOverlapAnchor");
            android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField.setAccessible(1);
        } catch (NoSuchFieldException v0) {
            android.util.Log.i("PopupWindowCompatApi21", "Could not fetch mOverlapAnchor field from PopupWindow", v0);
        }
        return;
    }

    PopupWindowCompatApi21()
    {
        return;
    }

    static boolean getOverlapAnchor(android.widget.PopupWindow p3)
    {
        String v1_1;
        if (android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField == null) {
            v1_1 = 0;
        } else {
            try {
                v1_1 = ((Boolean) android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField.get(p3)).booleanValue();
            } catch (IllegalAccessException v0) {
                android.util.Log.i("PopupWindowCompatApi21", "Could not get overlap anchor field in PopupWindow", v0);
            }
        }
        return v1_1;
    }

    static void setOverlapAnchor(android.widget.PopupWindow p3, boolean p4)
    {
        if (android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField != null) {
            try {
                android.support.v4.widget.PopupWindowCompatApi21.sOverlapAnchorField.set(p3, Boolean.valueOf(p4));
            } catch (IllegalAccessException v0) {
                android.util.Log.i("PopupWindowCompatApi21", "Could not set overlap anchor field in PopupWindow", v0);
            }
        }
        return;
    }
}
package android.support.v4.widget;
 class PopupWindowCompatApi23 {

    PopupWindowCompatApi23()
    {
        return;
    }

    static boolean getOverlapAnchor(android.widget.PopupWindow p1)
    {
        return p1.getOverlapAnchor();
    }

    static int getWindowLayoutType(android.widget.PopupWindow p1)
    {
        return p1.getWindowLayoutType();
    }

    static void setOverlapAnchor(android.widget.PopupWindow p0, boolean p1)
    {
        p0.setOverlapAnchor(p1);
        return;
    }

    static void setWindowLayoutType(android.widget.PopupWindow p0, int p1)
    {
        p0.setWindowLayoutType(p1);
        return;
    }
}
package android.support.v4.widget;
 class PopupWindowCompatKitKat {

    PopupWindowCompatKitKat()
    {
        return;
    }

    public static void showAsDropDown(android.widget.PopupWindow p0, android.view.View p1, int p2, int p3, int p4)
    {
        p0.showAsDropDown(p1, p2, p3, p4);
        return;
    }
}
package android.support.v4.widget;
public final class ScrollerCompat {
    private final boolean mIsIcsOrNewer;
    android.widget.OverScroller mScroller;

    ScrollerCompat(boolean p2, android.content.Context p3, android.view.animation.Interpolator p4)
    {
        android.widget.OverScroller v0_1;
        this.mIsIcsOrNewer = p2;
        if (p4 == null) {
            v0_1 = new android.widget.OverScroller(p3);
        } else {
            v0_1 = new android.widget.OverScroller(p3, p4);
        }
        this.mScroller = v0_1;
        return;
    }

    public static android.support.v4.widget.ScrollerCompat create(android.content.Context p1)
    {
        return android.support.v4.widget.ScrollerCompat.create(p1, 0);
    }

    public static android.support.v4.widget.ScrollerCompat create(android.content.Context p3, android.view.animation.Interpolator p4)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 14) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return new android.support.v4.widget.ScrollerCompat(v0_1, p3, p4);
    }

    public void abortAnimation()
    {
        this.mScroller.abortAnimation();
        return;
    }

    public boolean computeScrollOffset()
    {
        return this.mScroller.computeScrollOffset();
    }

    public void fling(int p10, int p11, int p12, int p13, int p14, int p15, int p16, int p17)
    {
        this.mScroller.fling(p10, p11, p12, p13, p14, p15, p16, p17);
        return;
    }

    public void fling(int p12, int p13, int p14, int p15, int p16, int p17, int p18, int p19, int p20, int p21)
    {
        this.mScroller.fling(p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
        return;
    }

    public float getCurrVelocity()
    {
        int v0_1;
        if (!this.mIsIcsOrNewer) {
            v0_1 = 0;
        } else {
            v0_1 = android.support.v4.widget.ScrollerCompatIcs.getCurrVelocity(this.mScroller);
        }
        return v0_1;
    }

    public int getCurrX()
    {
        return this.mScroller.getCurrX();
    }

    public int getCurrY()
    {
        return this.mScroller.getCurrY();
    }

    public int getFinalX()
    {
        return this.mScroller.getFinalX();
    }

    public int getFinalY()
    {
        return this.mScroller.getFinalY();
    }

    public boolean isFinished()
    {
        return this.mScroller.isFinished();
    }

    public boolean isOverScrolled()
    {
        return this.mScroller.isOverScrolled();
    }

    public void notifyHorizontalEdgeReached(int p2, int p3, int p4)
    {
        this.mScroller.notifyHorizontalEdgeReached(p2, p3, p4);
        return;
    }

    public void notifyVerticalEdgeReached(int p2, int p3, int p4)
    {
        this.mScroller.notifyVerticalEdgeReached(p2, p3, p4);
        return;
    }

    public boolean springBack(int p8, int p9, int p10, int p11, int p12, int p13)
    {
        return this.mScroller.springBack(p8, p9, p10, p11, p12, p13);
    }

    public void startScroll(int p2, int p3, int p4, int p5)
    {
        this.mScroller.startScroll(p2, p3, p4, p5);
        return;
    }

    public void startScroll(int p7, int p8, int p9, int p10, int p11)
    {
        this.mScroller.startScroll(p7, p8, p9, p10, p11);
        return;
    }
}
package android.support.v4.widget;
 class ScrollerCompatIcs {

    ScrollerCompatIcs()
    {
        return;
    }

    public static float getCurrVelocity(Object p1)
    {
        return ((android.widget.OverScroller) p1).getCurrVelocity();
    }
}
package android.support.v4.widget;
public interface SearchViewCompat$OnCloseListener {

    public abstract boolean onClose();
}
package android.support.v4.widget;
public interface SearchViewCompat$OnQueryTextListener {

    public abstract boolean onQueryTextChange();

    public abstract boolean onQueryTextSubmit();
}
package android.support.v4.widget;
interface SearchViewCompat$SearchViewCompatImpl {

    public abstract CharSequence getQuery();

    public abstract boolean isIconified();

    public abstract boolean isQueryRefinementEnabled();

    public abstract boolean isSubmitButtonEnabled();

    public abstract Object newOnCloseListener();

    public abstract Object newOnQueryTextListener();

    public abstract android.view.View newSearchView();

    public abstract void setIconified();

    public abstract void setImeOptions();

    public abstract void setInputType();

    public abstract void setMaxWidth();

    public abstract void setOnCloseListener();

    public abstract void setOnQueryTextListener();

    public abstract void setQuery();

    public abstract void setQueryHint();

    public abstract void setQueryRefinementEnabled();

    public abstract void setSearchableInfo();

    public abstract void setSubmitButtonEnabled();
}
package android.support.v4.widget;
public final class SearchViewCompat {
    private static final android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl IMPL;

    static SearchViewCompat()
    {
        if (android.os.Build$VERSION.SDK_INT < 14) {
            if (android.os.Build$VERSION.SDK_INT < 11) {
                android.support.v4.widget.SearchViewCompat.IMPL = new android.support.v4.widget.SearchViewCompat$SearchViewCompatStubImpl();
            } else {
                android.support.v4.widget.SearchViewCompat.IMPL = new android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl();
            }
        } else {
            android.support.v4.widget.SearchViewCompat.IMPL = new android.support.v4.widget.SearchViewCompat$SearchViewCompatIcsImpl();
        }
        return;
    }

    private SearchViewCompat(android.content.Context p1)
    {
        return;
    }

    public static CharSequence getQuery(android.view.View p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.getQuery(p1);
    }

    public static boolean isIconified(android.view.View p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.isIconified(p1);
    }

    public static boolean isQueryRefinementEnabled(android.view.View p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.isQueryRefinementEnabled(p1);
    }

    public static boolean isSubmitButtonEnabled(android.view.View p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.isSubmitButtonEnabled(p1);
    }

    public static android.view.View newSearchView(android.content.Context p1)
    {
        return android.support.v4.widget.SearchViewCompat.IMPL.newSearchView(p1);
    }

    public static void setIconified(android.view.View p1, boolean p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setIconified(p1, p2);
        return;
    }

    public static void setImeOptions(android.view.View p1, int p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setImeOptions(p1, p2);
        return;
    }

    public static void setInputType(android.view.View p1, int p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setInputType(p1, p2);
        return;
    }

    public static void setMaxWidth(android.view.View p1, int p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setMaxWidth(p1, p2);
        return;
    }

    public static void setOnCloseListener(android.view.View p1, android.support.v4.widget.SearchViewCompat$OnCloseListener p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setOnCloseListener(p1, p2);
        return;
    }

    public static void setOnQueryTextListener(android.view.View p1, android.support.v4.widget.SearchViewCompat$OnQueryTextListener p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setOnQueryTextListener(p1, p2);
        return;
    }

    public static void setQuery(android.view.View p1, CharSequence p2, boolean p3)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setQuery(p1, p2, p3);
        return;
    }

    public static void setQueryHint(android.view.View p1, CharSequence p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setQueryHint(p1, p2);
        return;
    }

    public static void setQueryRefinementEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setQueryRefinementEnabled(p1, p2);
        return;
    }

    public static void setSearchableInfo(android.view.View p1, android.content.ComponentName p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setSearchableInfo(p1, p2);
        return;
    }

    public static void setSubmitButtonEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.widget.SearchViewCompat.IMPL.setSubmitButtonEnabled(p1, p2);
        return;
    }
}
package android.support.v4.widget;
final class SearchViewCompatHoneycomb$1 implements android.widget.SearchView$OnQueryTextListener {
    final synthetic android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge val$listener;

    SearchViewCompatHoneycomb$1(android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge p1)
    {
        this.val$listener = p1;
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return this.val$listener.onQueryTextChange(p2);
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return this.val$listener.onQueryTextSubmit(p2);
    }
}
package android.support.v4.widget;
final class SearchViewCompatHoneycomb$2 implements android.widget.SearchView$OnCloseListener {
    final synthetic android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge val$listener;

    SearchViewCompatHoneycomb$2(android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge p1)
    {
        this.val$listener = p1;
        return;
    }

    public boolean onClose()
    {
        return this.val$listener.onClose();
    }
}
package android.support.v4.widget;
interface SearchViewCompatHoneycomb$OnCloseListenerCompatBridge {

    public abstract boolean onClose();
}
package android.support.v4.widget;
interface SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge {

    public abstract boolean onQueryTextChange();

    public abstract boolean onQueryTextSubmit();
}
package android.support.v4.widget;
 class SearchViewCompatHoneycomb {

    SearchViewCompatHoneycomb()
    {
        return;
    }

    public static void checkIfLegalArg(android.view.View p2)
    {
        if (p2 != null) {
            if ((p2 instanceof android.widget.SearchView)) {
                return;
            } else {
                throw new IllegalArgumentException("searchView must be an instance ofandroid.widget.SearchView");
            }
        } else {
            throw new IllegalArgumentException("searchView must be non-null");
        }
    }

    public static CharSequence getQuery(android.view.View p1)
    {
        return ((android.widget.SearchView) p1).getQuery();
    }

    public static boolean isIconified(android.view.View p1)
    {
        return ((android.widget.SearchView) p1).isIconified();
    }

    public static boolean isQueryRefinementEnabled(android.view.View p1)
    {
        return ((android.widget.SearchView) p1).isQueryRefinementEnabled();
    }

    public static boolean isSubmitButtonEnabled(android.view.View p1)
    {
        return ((android.widget.SearchView) p1).isSubmitButtonEnabled();
    }

    public static Object newOnCloseListener(android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge p1)
    {
        return new android.support.v4.widget.SearchViewCompatHoneycomb$2(p1);
    }

    public static Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge p1)
    {
        return new android.support.v4.widget.SearchViewCompatHoneycomb$1(p1);
    }

    public static android.view.View newSearchView(android.content.Context p1)
    {
        return new android.widget.SearchView(p1);
    }

    public static void setIconified(android.view.View p0, boolean p1)
    {
        ((android.widget.SearchView) p0).setIconified(p1);
        return;
    }

    public static void setMaxWidth(android.view.View p0, int p1)
    {
        ((android.widget.SearchView) p0).setMaxWidth(p1);
        return;
    }

    public static void setOnCloseListener(android.view.View p0, Object p1)
    {
        ((android.widget.SearchView) p0).setOnCloseListener(((android.widget.SearchView$OnCloseListener) p1));
        return;
    }

    public static void setOnQueryTextListener(android.view.View p0, Object p1)
    {
        ((android.widget.SearchView) p0).setOnQueryTextListener(((android.widget.SearchView$OnQueryTextListener) p1));
        return;
    }

    public static void setQuery(android.view.View p0, CharSequence p1, boolean p2)
    {
        ((android.widget.SearchView) p0).setQuery(p1, p2);
        return;
    }

    public static void setQueryHint(android.view.View p0, CharSequence p1)
    {
        ((android.widget.SearchView) p0).setQueryHint(p1);
        return;
    }

    public static void setQueryRefinementEnabled(android.view.View p0, boolean p1)
    {
        ((android.widget.SearchView) p0).setQueryRefinementEnabled(p1);
        return;
    }

    public static void setSearchableInfo(android.view.View p4, android.content.ComponentName p5)
    {
        ((android.widget.SearchView) p4).setSearchableInfo(((android.app.SearchManager) ((android.widget.SearchView) p4).getContext().getSystemService("search")).getSearchableInfo(p5));
        return;
    }

    public static void setSubmitButtonEnabled(android.view.View p0, boolean p1)
    {
        ((android.widget.SearchView) p0).setSubmitButtonEnabled(p1);
        return;
    }
}
package android.support.v4.widget;
public class SearchViewCompatIcs$MySearchView extends android.widget.SearchView {

    public SearchViewCompatIcs$MySearchView(android.content.Context p1)
    {
        super(p1);
        return;
    }

    public void onActionViewCollapsed()
    {
        this.setQuery("", 0);
        super.onActionViewCollapsed();
        return;
    }
}
package android.support.v4.widget;
 class SearchViewCompatIcs {

    SearchViewCompatIcs()
    {
        return;
    }

    public static android.view.View newSearchView(android.content.Context p1)
    {
        return new android.support.v4.widget.SearchViewCompatIcs$MySearchView(p1);
    }

    public static void setImeOptions(android.view.View p0, int p1)
    {
        ((android.widget.SearchView) p0).setImeOptions(p1);
        return;
    }

    public static void setInputType(android.view.View p0, int p1)
    {
        ((android.widget.SearchView) p0).setInputType(p1);
        return;
    }
}
package android.support.v4.widget;
public interface SimpleCursorAdapter$CursorToStringConverter {

    public abstract CharSequence convertToString();
}
package android.support.v4.widget;
public interface SimpleCursorAdapter$ViewBinder {

    public abstract boolean setViewValue();
}
package android.support.v4.widget;
 class SlidingPaneLayout$DisableLayerRunnable implements java.lang.Runnable {
    final android.view.View mChildView;
    final synthetic android.support.v4.widget.SlidingPaneLayout this$0;

    SlidingPaneLayout$DisableLayerRunnable(android.support.v4.widget.SlidingPaneLayout p1, android.view.View p2)
    {
        this.this$0 = p1;
        this.mChildView = p2;
        return;
    }

    public void run()
    {
        if (this.mChildView.getParent() == this.this$0) {
            android.support.v4.view.ViewCompat.setLayerType(this.mChildView, 0, 0);
            this.this$0.invalidateChildRegion(this.mChildView);
        }
        this.this$0.mPostedRunnables.remove(this);
        return;
    }
}
package android.support.v4.widget;
public class SlidingPaneLayout$LayoutParams extends android.view.ViewGroup$MarginLayoutParams {
    private static final int[] ATTRS;
    android.graphics.Paint dimPaint;
    boolean dimWhenOffset;
    boolean slideable;
    public float weight;

    static SlidingPaneLayout$LayoutParams()
    {
        int[] v0_1 = new int[1];
        v0_1[0] = 16843137;
        android.support.v4.widget.SlidingPaneLayout$LayoutParams.ATTRS = v0_1;
        return;
    }

    public SlidingPaneLayout$LayoutParams()
    {
        super(-1, -1);
        super.weight = 0;
        return;
    }

    public SlidingPaneLayout$LayoutParams(int p2, int p3)
    {
        super(p2, p3);
        super.weight = 0;
        return;
    }

    public SlidingPaneLayout$LayoutParams(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        super.weight = 0;
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, android.support.v4.widget.SlidingPaneLayout$LayoutParams.ATTRS);
        super.weight = v0.getFloat(0, 0);
        v0.recycle();
        return;
    }

    public SlidingPaneLayout$LayoutParams(android.support.v4.widget.SlidingPaneLayout$LayoutParams p2)
    {
        super(p2);
        super.weight = 0;
        super.weight = p2.weight;
        return;
    }

    public SlidingPaneLayout$LayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        super(p2);
        super.weight = 0;
        return;
    }

    public SlidingPaneLayout$LayoutParams(android.view.ViewGroup$MarginLayoutParams p2)
    {
        super(p2);
        super.weight = 0;
        return;
    }
}
package android.support.v4.widget;
public interface SlidingPaneLayout$PanelSlideListener {

    public abstract void onPanelClosed();

    public abstract void onPanelOpened();

    public abstract void onPanelSlide();
}
package android.support.v4.widget;
interface SlidingPaneLayout$SlidingPanelLayoutImpl {

    public abstract void invalidateChildRegion();
}
package android.support.v4.widget;
public class SlidingPaneLayout extends android.view.ViewGroup {
    private static final int DEFAULT_FADE_COLOR = 3435973836;
    private static final int DEFAULT_OVERHANG_SIZE = 32;
    static final android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL = None;
    private static final int MIN_FLING_VELOCITY = 400;
    private static final String TAG = "SlidingPaneLayout";
    private boolean mCanSlide;
    private int mCoveredFadeColor;
    final android.support.v4.widget.ViewDragHelper mDragHelper;
    private boolean mFirstLayout;
    private float mInitialMotionX;
    private float mInitialMotionY;
    boolean mIsUnableToDrag;
    private final int mOverhangSize;
    private android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener;
    private int mParallaxBy;
    private float mParallaxOffset;
    final java.util.ArrayList mPostedRunnables;
    boolean mPreservedOpenState;
    private android.graphics.drawable.Drawable mShadowDrawableLeft;
    private android.graphics.drawable.Drawable mShadowDrawableRight;
    float mSlideOffset;
    int mSlideRange;
    android.view.View mSlideableView;
    private int mSliderFadeColor;
    private final android.graphics.Rect mTmpRect;

    static SlidingPaneLayout()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 17) {
            if (v0 < 16) {
                android.support.v4.widget.SlidingPaneLayout.IMPL = new android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase();
            } else {
                android.support.v4.widget.SlidingPaneLayout.IMPL = new android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB();
            }
        } else {
            android.support.v4.widget.SlidingPaneLayout.IMPL = new android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1();
        }
        return;
    }

    public SlidingPaneLayout(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public SlidingPaneLayout(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public SlidingPaneLayout(android.content.Context p6, android.util.AttributeSet p7, int p8)
    {
        super(p6, p7, p8);
        super.mSliderFadeColor = -858993460;
        super.mFirstLayout = 1;
        super.mTmpRect = new android.graphics.Rect();
        super.mPostedRunnables = new java.util.ArrayList();
        float v0 = p6.getResources().getDisplayMetrics().density;
        super.mOverhangSize = ((int) ((1107296256 * v0) + 1056964608));
        android.view.ViewConfiguration.get(p6);
        super.setWillNotDraw(0);
        android.support.v4.view.ViewCompat.setAccessibilityDelegate(super, new android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate(super));
        android.support.v4.view.ViewCompat.setImportantForAccessibility(super, 1);
        super.mDragHelper = android.support.v4.widget.ViewDragHelper.create(super, 1056964608, new android.support.v4.widget.SlidingPaneLayout$DragHelperCallback(super));
        super.mDragHelper.setMinVelocity((1137180672 * v0));
        return;
    }

    private boolean closePane(android.view.View p3, int p4)
    {
        int v0 = 0;
        if ((this.mFirstLayout) || (this.smoothSlideTo(0, p4))) {
            this.mPreservedOpenState = 0;
            v0 = 1;
        }
        return v0;
    }

    private void dimChildView(android.view.View p10, float p11, int p12)
    {
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v4_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) p10.getLayoutParams());
        if ((p11 <= 0) || (p12 == 0)) {
            if (android.support.v4.view.ViewCompat.getLayerType(p10) != 0) {
                if (v4_1.dimPaint != null) {
                    v4_1.dimPaint.setColorFilter(0);
                }
                android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable v2_1 = new android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable(this, p10);
                this.mPostedRunnables.add(v2_1);
                android.support.v4.view.ViewCompat.postOnAnimation(this, v2_1);
            }
        } else {
            int v1 = ((((int) (((float) ((-16777216 & p12) >> 24)) * p11)) << 24) | (16777215 & p12));
            if (v4_1.dimPaint == null) {
                v4_1.dimPaint = new android.graphics.Paint();
            }
            v4_1.dimPaint.setColorFilter(new android.graphics.PorterDuffColorFilter(v1, android.graphics.PorterDuff$Mode.SRC_OVER));
            if (android.support.v4.view.ViewCompat.getLayerType(p10) != 2) {
                android.support.v4.view.ViewCompat.setLayerType(p10, 2, v4_1.dimPaint);
            }
            this.invalidateChildRegion(p10);
        }
        return;
    }

    private boolean openPane(android.view.View p3, int p4)
    {
        int v0 = 1;
        if ((!this.mFirstLayout) && (!this.smoothSlideTo(1065353216, p4))) {
            v0 = 0;
        } else {
            this.mPreservedOpenState = 1;
        }
        return v0;
    }

    private void parallaxOtherViews(float p13)
    {
        int v1;
        boolean v4 = this.isLayoutRtlSupport();
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v7_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) this.mSlideableView.getLayoutParams());
        if (!v7_1.dimWhenOffset) {
            v1 = 0;
        } else {
            float v9_0;
            if (!v4) {
                v9_0 = v7_1.leftMargin;
            } else {
                v9_0 = v7_1.rightMargin;
            }
            if (v9_0 > 0) {
            } else {
                v1 = 1;
            }
        }
        int v0 = this.getChildCount();
        int v3 = 0;
        while (v3 < v0) {
            android.view.View v8 = this.getChildAt(v3);
            if (v8 != this.mSlideableView) {
                int v6 = ((int) ((1065353216 - this.mParallaxOffset) * ((float) this.mParallaxBy)));
                this.mParallaxOffset = p13;
                int v2 = (v6 - ((int) ((1065353216 - p13) * ((float) this.mParallaxBy))));
                if (v4) {
                    v2 = (- v2);
                }
                v8.offsetLeftAndRight(v2);
                if (v1 != 0) {
                    float v9_9;
                    if (!v4) {
                        v9_9 = (1065353216 - this.mParallaxOffset);
                    } else {
                        v9_9 = (this.mParallaxOffset - 1065353216);
                    }
                    this.dimChildView(v8, v9_9, this.mCoveredFadeColor);
                }
            }
            v3++;
        }
        return;
    }

    private static boolean viewIsOpaque(android.view.View p5)
    {
        int v1 = 1;
        if (!p5.isOpaque()) {
            if (android.os.Build$VERSION.SDK_INT < 18) {
                android.graphics.drawable.Drawable v0 = p5.getBackground();
                if (v0 == null) {
                    v1 = 0;
                } else {
                    if (v0.getOpacity() != -1) {
                        v1 = 0;
                    }
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    protected boolean canScroll(android.view.View p12, boolean p13, int p14, int p15, int p16)
    {
        int v0_3;
        if (!(p12 instanceof android.view.ViewGroup)) {
            if (p13) {
                if (!this.isLayoutRtlSupport()) {
                    p14 = (- p14);
                }
                if (android.support.v4.view.ViewCompat.canScrollHorizontally(p12, p14)) {
                    v0_3 = 1;
                    return v0_3;
                }
            }
            v0_3 = 0;
        } else {
            int v9 = p12.getScrollX();
            int v10 = p12.getScrollY();
            int v8 = (((android.view.ViewGroup) p12).getChildCount() - 1);
            while (v8 >= 0) {
                android.view.View v1 = ((android.view.ViewGroup) p12).getChildAt(v8);
                if (((p15 + v9) < v1.getLeft()) || (((p15 + v9) >= v1.getRight()) || (((p16 + v10) < v1.getTop()) || (((p16 + v10) >= v1.getBottom()) || (!this.canScroll(v1, 1, p14, ((p15 + v9) - v1.getLeft()), ((p16 + v10) - v1.getTop()))))))) {
                    v8--;
                } else {
                    v0_3 = 1;
                }
            }
        }
        return v0_3;
    }

    public boolean canSlide()
    {
        return this.mCanSlide;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        if ((!(p2 instanceof android.support.v4.widget.SlidingPaneLayout$LayoutParams)) || (!super.checkLayoutParams(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean closePane()
    {
        return this.closePane(this.mSlideableView, 0);
    }

    public void computeScroll()
    {
        if (this.mDragHelper.continueSettling(1)) {
            if (this.mCanSlide) {
                android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
            } else {
                this.mDragHelper.abort();
            }
        }
        return;
    }

    void dispatchOnPanelClosed(android.view.View p2)
    {
        if (this.mPanelSlideListener != null) {
            this.mPanelSlideListener.onPanelClosed(p2);
        }
        this.sendAccessibilityEvent(32);
        return;
    }

    void dispatchOnPanelOpened(android.view.View p2)
    {
        if (this.mPanelSlideListener != null) {
            this.mPanelSlideListener.onPanelOpened(p2);
        }
        this.sendAccessibilityEvent(32);
        return;
    }

    void dispatchOnPanelSlide(android.view.View p3)
    {
        if (this.mPanelSlideListener != null) {
            this.mPanelSlideListener.onPanelSlide(p3, this.mSlideOffset);
        }
        return;
    }

    public void draw(android.graphics.Canvas p11)
    {
        android.graphics.drawable.Drawable v4;
        super.draw(p11);
        if (!this.isLayoutRtlSupport()) {
            v4 = this.mShadowDrawableLeft;
        } else {
            v4 = this.mShadowDrawableRight;
        }
        int v5;
        if (this.getChildCount() <= 1) {
            v5 = 0;
        } else {
            v5 = this.getChildAt(1);
        }
        if ((v5 != 0) && (v4 != null)) {
            int v3;
            int v2;
            int v7 = v5.getTop();
            int v0 = v5.getBottom();
            int v6 = v4.getIntrinsicWidth();
            if (!this.isLayoutRtlSupport()) {
                v3 = v5.getLeft();
                v2 = (v3 - v6);
            } else {
                v2 = v5.getRight();
                v3 = (v2 + v6);
            }
            v4.setBounds(v2, v7, v3, v0);
            v4.draw(p11);
        }
        return;
    }

    protected boolean drawChild(android.graphics.Canvas p8, android.view.View p9, long p10)
    {
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v1_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) p9.getLayoutParams());
        int v3 = p8.save(2);
        if ((this.mCanSlide) && ((!v1_1.slideable) && (this.mSlideableView != null))) {
            p8.getClipBounds(this.mTmpRect);
            if (!this.isLayoutRtlSupport()) {
                this.mTmpRect.right = Math.min(this.mTmpRect.right, this.mSlideableView.getLeft());
            } else {
                this.mTmpRect.left = Math.max(this.mTmpRect.left, this.mSlideableView.getRight());
            }
            p8.clipRect(this.mTmpRect);
        }
        boolean v2;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            if ((!v1_1.dimWhenOffset) || (this.mSlideOffset <= 0)) {
                if (p9.isDrawingCacheEnabled()) {
                    p9.setDrawingCacheEnabled(0);
                }
                v2 = super.drawChild(p8, p9, p10);
            } else {
                if (!p9.isDrawingCacheEnabled()) {
                    p9.setDrawingCacheEnabled(1);
                }
                android.graphics.Bitmap v0 = p9.getDrawingCache();
                if (v0 == null) {
                    android.util.Log.e("SlidingPaneLayout", new StringBuilder().append("drawChild: child view ").append(p9).append(" returned null drawing cache").toString());
                    v2 = super.drawChild(p8, p9, p10);
                } else {
                    p8.drawBitmap(v0, ((float) p9.getLeft()), ((float) p9.getTop()), v1_1.dimPaint);
                    v2 = 0;
                }
            }
        } else {
            v2 = super.drawChild(p8, p9, p10);
        }
        p8.restoreToCount(v3);
        return v2;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.support.v4.widget.SlidingPaneLayout$LayoutParams();
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new android.support.v4.widget.SlidingPaneLayout$LayoutParams(this.getContext(), p3);
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v0_2;
        if (!(p2 instanceof android.view.ViewGroup$MarginLayoutParams)) {
            v0_2 = new android.support.v4.widget.SlidingPaneLayout$LayoutParams(p2);
        } else {
            v0_2 = new android.support.v4.widget.SlidingPaneLayout$LayoutParams(((android.view.ViewGroup$MarginLayoutParams) p2));
        }
        return v0_2;
    }

    public int getCoveredFadeColor()
    {
        return this.mCoveredFadeColor;
    }

    public int getParallaxDistance()
    {
        return this.mParallaxBy;
    }

    public int getSliderFadeColor()
    {
        return this.mSliderFadeColor;
    }

    void invalidateChildRegion(android.view.View p2)
    {
        android.support.v4.widget.SlidingPaneLayout.IMPL.invalidateChildRegion(this, p2);
        return;
    }

    boolean isDimmed(android.view.View p5)
    {
        int v1 = 0;
        if (p5 != null) {
            android.support.v4.widget.SlidingPaneLayout$LayoutParams v0_0 = p5.getLayoutParams();
            if ((this.mCanSlide) && ((((android.support.v4.widget.SlidingPaneLayout$LayoutParams) v0_0).dimWhenOffset) && (this.mSlideOffset > 0))) {
                v1 = 1;
            }
        }
        return v1;
    }

    boolean isLayoutRtlSupport()
    {
        int v0 = 1;
        if (android.support.v4.view.ViewCompat.getLayoutDirection(this) != 1) {
            v0 = 0;
        }
        return v0;
    }

    public boolean isOpen()
    {
        if ((this.mCanSlide) && (this.mSlideOffset != 1065353216)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isSlideable()
    {
        return this.mCanSlide;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.mFirstLayout = 1;
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.mFirstLayout = 1;
        int v2 = 0;
        int v0 = this.mPostedRunnables.size();
        while (v2 < v0) {
            ((android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable) this.mPostedRunnables.get(v2)).run();
            v2++;
        }
        this.mPostedRunnables.clear();
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p14)
    {
        int v0 = android.support.v4.view.MotionEventCompat.getActionMasked(p14);
        if ((!this.mCanSlide) && ((v0 == 0) && (this.getChildCount() > 1))) {
            android.view.View v5 = this.getChildAt(1);
            if (v5 != null) {
                int v9_3;
                if (this.mDragHelper.isViewUnder(v5, ((int) p14.getX()), ((int) p14.getY()))) {
                    v9_3 = 0;
                } else {
                    v9_3 = 1;
                }
                this.mPreservedOpenState = v9_3;
            }
        }
        if ((this.mCanSlide) && ((!this.mIsUnableToDrag) || (v0 == 0))) {
            if ((v0 != 3) && (v0 != 1)) {
                int v4 = 0;
                switch (v0) {
                    case 0:
                        this.mIsUnableToDrag = 0;
                        float v7_1 = p14.getX();
                        float v8_1 = p14.getY();
                        this.mInitialMotionX = v7_1;
                        this.mInitialMotionY = v8_1;
                        if ((this.mDragHelper.isViewUnder(this.mSlideableView, ((int) v7_1), ((int) v8_1))) && (this.isDimmed(this.mSlideableView))) {
                            v4 = 1;
                        } else {
                        }
                    case 1:
                        break;
                    case 2:
                        float v7_0 = p14.getX();
                        float v8_0 = p14.getY();
                        float v1 = Math.abs((v7_0 - this.mInitialMotionX));
                        float v2 = Math.abs((v8_0 - this.mInitialMotionY));
                        if ((v1 <= ((float) this.mDragHelper.getTouchSlop())) || (v2 <= v1)) {
                        } else {
                            this.mDragHelper.cancel();
                            this.mIsUnableToDrag = 1;
                            int v9_19 = 0;
                        }
                        break;
                    default:
                        if (this.mDragHelper.shouldInterceptTouchEvent(p14)) {
                            v9_19 = 1;
                        } else {
                            if (v4 == 0) {
                                v9_19 = 0;
                            } else {
                            }
                        }
                }
                if ((!this.mDragHelper.shouldInterceptTouchEvent(p14)) && (v4 == 0)) {
                }
            } else {
                this.mDragHelper.cancel();
                v9_19 = 0;
            }
        } else {
            this.mDragHelper.cancel();
            v9_19 = super.onInterceptTouchEvent(p14);
        }
        return v9_19;
    }

    protected void onLayout(boolean p29, int p30, int p31, int p32, int p33)
    {
        boolean v12 = this.isLayoutRtlSupport();
        if (!v12) {
            this.mDragHelper.setEdgeTrackingEnabled(1);
        } else {
            this.mDragHelper.setEdgeTrackingEnabled(2);
        }
        int v19;
        int v23 = (p32 - p30);
        if (!v12) {
            v19 = this.getPaddingLeft();
        } else {
            v19 = this.getPaddingRight();
        }
        int v18;
        if (!v12) {
            v18 = this.getPaddingRight();
        } else {
            v18 = this.getPaddingLeft();
        }
        int v20 = this.getPaddingTop();
        int v6 = this.getChildCount();
        int v24 = v19;
        int v16 = v24;
        if (this.mFirstLayout) {
            if ((!this.mCanSlide) || (!this.mPreservedOpenState)) {
                int v25_30 = 0;
            } else {
                v25_30 = 1065353216;
            }
            this.mSlideOffset = v25_30;
        }
        int v11_0 = 0;
        while (v11_0 < v6) {
            android.view.View v4 = this.getChildAt(v11_0);
            if (v4.getVisibility() != 8) {
                android.support.v4.widget.SlidingPaneLayout$LayoutParams v13_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) v4.getLayoutParams());
                int v10 = v4.getMeasuredWidth();
                int v17 = 0;
                if (!v13_1.slideable) {
                    if ((!this.mCanSlide) || (this.mParallaxBy == 0)) {
                        v24 = v16;
                    } else {
                        v17 = ((int) ((1065353216 - this.mSlideOffset) * ((float) this.mParallaxBy)));
                        v24 = v16;
                    }
                } else {
                    int v14;
                    int v22 = ((Math.min(v16, ((v23 - v18) - this.mOverhangSize)) - v24) - (v13_1.leftMargin + v13_1.rightMargin));
                    this.mSlideRange = v22;
                    if (!v12) {
                        v14 = v13_1.leftMargin;
                    } else {
                        v14 = v13_1.rightMargin;
                    }
                    int v25_18;
                    if ((((v24 + v14) + v22) + (v10 / 2)) <= (v23 - v18)) {
                        v25_18 = 0;
                    } else {
                        v25_18 = 1;
                    }
                    v13_1.dimWhenOffset = v25_18;
                    int v21 = ((int) (((float) v22) * this.mSlideOffset));
                    v24 += (v21 + v14);
                    this.mSlideOffset = (((float) v21) / ((float) this.mSlideRange));
                }
                int v8;
                int v7;
                if (!v12) {
                    v7 = (v24 - v17);
                    v8 = (v7 + v10);
                } else {
                    v8 = ((v23 - v24) + v17);
                    v7 = (v8 - v10);
                }
                v4.layout(v7, v20, v8, (v20 + v4.getMeasuredHeight()));
                v16 += v4.getWidth();
            }
            v11_0++;
        }
        if (this.mFirstLayout) {
            if (!this.mCanSlide) {
                int v11_1 = 0;
                while (v11_1 < v6) {
                    this.dimChildView(this.getChildAt(v11_1), 0, this.mSliderFadeColor);
                    v11_1++;
                }
            } else {
                if (this.mParallaxBy != 0) {
                    this.parallaxOtherViews(this.mSlideOffset);
                }
                if (((android.support.v4.widget.SlidingPaneLayout$LayoutParams) this.mSlideableView.getLayoutParams()).dimWhenOffset) {
                    this.dimChildView(this.mSlideableView, this.mSlideOffset, this.mSliderFadeColor);
                }
            }
            this.updateObscuredViewsVisibility(this.mSlideableView);
        }
        this.mFirstLayout = 0;
        return;
    }

    protected void onMeasure(int p32, int p33)
    {
        int v25 = android.view.View$MeasureSpec.getMode(p32);
        int v27 = android.view.View$MeasureSpec.getSize(p32);
        int v12 = android.view.View$MeasureSpec.getMode(p33);
        int v13 = android.view.View$MeasureSpec.getSize(p33);
        if (v25 == 1073741824) {
            if (v12 == 0) {
                if (!this.isInEditMode()) {
                    throw new IllegalStateException("Height must not be UNSPECIFIED");
                } else {
                    if (v12 == 0) {
                        v12 = -2147483648;
                        v13 = 300;
                    }
                }
            }
        } else {
            if (!this.isInEditMode()) {
                throw new IllegalStateException("Width must have an exact value or MATCH_PARENT");
            } else {
                if ((v25 != -2147483648) && (v25 == 0)) {
                    v27 = 300;
                }
            }
        }
        int v16 = 0;
        int v18 = -1;
        switch (v12) {
            case -2147483648:
                v18 = ((v13 - this.getPaddingTop()) - this.getPaddingBottom());
                break;
            case 1073741824:
                v18 = ((v13 - this.getPaddingTop()) - this.getPaddingBottom());
                v16 = v18;
                break;
        }
        float v23 = 0;
        int v4 = 0;
        int v24 = ((v27 - this.getPaddingLeft()) - this.getPaddingRight());
        int v26 = v24;
        int v6 = this.getChildCount();
        if (v6 > 2) {
            android.util.Log.e("SlidingPaneLayout", "onMeasure: More than two child views are not supported.");
        }
        this.mSlideableView = 0;
        int v15_1 = 0;
        while (v15_1 < v6) {
            android.view.View v5_1 = this.getChildAt(v15_1);
            android.support.v4.widget.SlidingPaneLayout$LayoutParams v17_3 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) v5_1.getLayoutParams());
            if (v5_1.getVisibility() != 8) {
                if (v17_3.weight > 0) {
                    v23 += v17_3.weight;
                    if (v17_3.width == 0) {
                        v15_1++;
                    }
                }
                int v10_3;
                int v14_1 = (v17_3.leftMargin + v17_3.rightMargin);
                if (v17_3.width != -2) {
                    if (v17_3.width != -1) {
                        v10_3 = android.view.View$MeasureSpec.makeMeasureSpec(v17_3.width, 1073741824);
                    } else {
                        v10_3 = android.view.View$MeasureSpec.makeMeasureSpec((v24 - v14_1), 1073741824);
                    }
                } else {
                    v10_3 = android.view.View$MeasureSpec.makeMeasureSpec((v24 - v14_1), -2147483648);
                }
                int v8_2;
                if (v17_3.height != -2) {
                    if (v17_3.height != -1) {
                        v8_2 = android.view.View$MeasureSpec.makeMeasureSpec(v17_3.height, 1073741824);
                    } else {
                        v8_2 = android.view.View$MeasureSpec.makeMeasureSpec(v18, 1073741824);
                    }
                } else {
                    v8_2 = android.view.View$MeasureSpec.makeMeasureSpec(v18, -2147483648);
                }
                v5_1.measure(v10_3, v8_2);
                int v9 = v5_1.getMeasuredWidth();
                int v7 = v5_1.getMeasuredHeight();
                if ((v12 == -2147483648) && (v7 > v16)) {
                    v16 = Math.min(v7, v18);
                }
                int v29_59;
                v26 -= v9;
                if (v26 >= 0) {
                    v29_59 = 0;
                } else {
                    v29_59 = 1;
                }
                v17_3.slideable = v29_59;
                v4 |= v29_59;
                if (v17_3.slideable) {
                    this.mSlideableView = v5_1;
                }
            } else {
                v17_3.dimWhenOffset = 0;
            }
        }
        if ((v4 != 0) || (v23 > 0)) {
            int v11 = (v24 - this.mOverhangSize);
            int v15_0 = 0;
            while (v15_0 < v6) {
                android.view.View v5_0 = this.getChildAt(v15_0);
                if (v5_0.getVisibility() != 8) {
                    android.support.v4.widget.SlidingPaneLayout$LayoutParams v17_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) v5_0.getLayoutParams());
                    if (v5_0.getVisibility() != 8) {
                        if ((v17_1.width != 0) || (v17_1.weight <= 0)) {
                            int v22 = 0;
                        } else {
                            v22 = 1;
                        }
                        int v20_0;
                        if (v22 == 0) {
                            v20_0 = v5_0.getMeasuredWidth();
                        } else {
                            v20_0 = 0;
                        }
                        if ((v4 == 0) || (v5_0 == this.mSlideableView)) {
                            if (v17_1.weight > 0) {
                                int v8_0;
                                if (v17_1.width != 0) {
                                    v8_0 = android.view.View$MeasureSpec.makeMeasureSpec(v5_0.getMeasuredHeight(), 1073741824);
                                } else {
                                    if (v17_1.height != -2) {
                                        if (v17_1.height != -1) {
                                            v8_0 = android.view.View$MeasureSpec.makeMeasureSpec(v17_1.height, 1073741824);
                                        } else {
                                            v8_0 = android.view.View$MeasureSpec.makeMeasureSpec(v18, 1073741824);
                                        }
                                    } else {
                                        v8_0 = android.view.View$MeasureSpec.makeMeasureSpec(v18, -2147483648);
                                    }
                                }
                                if (v4 == 0) {
                                    v5_0.measure(android.view.View$MeasureSpec.makeMeasureSpec((v20_0 + ((int) ((v17_1.weight * ((float) Math.max(0, v26))) / v23))), 1073741824), v8_0);
                                } else {
                                    int v21 = (v24 - (v17_1.leftMargin + v17_1.rightMargin));
                                    int v10_1 = android.view.View$MeasureSpec.makeMeasureSpec(v21, 1073741824);
                                    if (v20_0 != v21) {
                                        v5_0.measure(v10_1, v8_0);
                                    }
                                }
                            }
                        } else {
                            if ((v17_1.width < 0) && ((v20_0 > v11) || (v17_1.weight > 0))) {
                                int v8_1;
                                if (v22 == 0) {
                                    v8_1 = android.view.View$MeasureSpec.makeMeasureSpec(v5_0.getMeasuredHeight(), 1073741824);
                                } else {
                                    if (v17_1.height != -2) {
                                        if (v17_1.height != -1) {
                                            v8_1 = android.view.View$MeasureSpec.makeMeasureSpec(v17_1.height, 1073741824);
                                        } else {
                                            v8_1 = android.view.View$MeasureSpec.makeMeasureSpec(v18, 1073741824);
                                        }
                                    } else {
                                        v8_1 = android.view.View$MeasureSpec.makeMeasureSpec(v18, -2147483648);
                                    }
                                }
                                v5_0.measure(android.view.View$MeasureSpec.makeMeasureSpec(v11, 1073741824), v8_1);
                            }
                        }
                    }
                }
                v15_0++;
            }
        }
        this.setMeasuredDimension(v27, ((this.getPaddingTop() + v16) + this.getPaddingBottom()));
        this.mCanSlide = v4;
        if ((this.mDragHelper.getViewDragState() != 0) && (v4 == 0)) {
            this.mDragHelper.abort();
        }
        return;
    }

    void onPanelDragged(int p11)
    {
        if (this.mSlideableView != null) {
            int v4;
            boolean v1 = this.isLayoutRtlSupport();
            android.support.v4.widget.SlidingPaneLayout$LayoutParams v2_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) this.mSlideableView.getLayoutParams());
            int v0 = this.mSlideableView.getWidth();
            if (!v1) {
                v4 = p11;
            } else {
                v4 = ((this.getWidth() - p11) - v0);
            }
            int v5;
            if (!v1) {
                v5 = this.getPaddingLeft();
            } else {
                v5 = this.getPaddingRight();
            }
            int v3;
            if (!v1) {
                v3 = v2_1.leftMargin;
            } else {
                v3 = v2_1.rightMargin;
            }
            this.mSlideOffset = (((float) (v4 - (v5 + v3))) / ((float) this.mSlideRange));
            if (this.mParallaxBy != 0) {
                this.parallaxOtherViews(this.mSlideOffset);
            }
            if (v2_1.dimWhenOffset) {
                this.dimChildView(this.mSlideableView, this.mSlideOffset, this.mSliderFadeColor);
            }
            this.dispatchOnPanelSlide(this.mSlideableView);
        } else {
            this.mSlideOffset = 0;
        }
        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable p3)
    {
        if ((p3 instanceof android.support.v4.widget.SlidingPaneLayout$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.widget.SlidingPaneLayout$SavedState) p3).getSuperState());
            if (!((android.support.v4.widget.SlidingPaneLayout$SavedState) p3).isOpen) {
                this.closePane();
            } else {
                this.openPane();
            }
            this.mPreservedOpenState = ((android.support.v4.widget.SlidingPaneLayout$SavedState) p3).isOpen;
        } else {
            super.onRestoreInstanceState(p3);
        }
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        boolean v2_1;
        android.support.v4.widget.SlidingPaneLayout$SavedState v0_1 = new android.support.v4.widget.SlidingPaneLayout$SavedState(super.onSaveInstanceState());
        if (!this.isSlideable()) {
            v2_1 = this.mPreservedOpenState;
        } else {
            v2_1 = this.isOpen();
        }
        v0_1.isOpen = v2_1;
        return v0_1;
    }

    protected void onSizeChanged(int p2, int p3, int p4, int p5)
    {
        super.onSizeChanged(p2, p3, p4, p5);
        if (p2 != p4) {
            this.mFirstLayout = 1;
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p12)
    {
        int v4;
        if (this.mCanSlide) {
            this.mDragHelper.processTouchEvent(p12);
            v4 = 1;
            switch ((p12.getAction() & 255)) {
                case 0:
                    float v5_1 = p12.getX();
                    float v6_1 = p12.getY();
                    this.mInitialMotionX = v5_1;
                    this.mInitialMotionY = v6_1;
                    break;
                case 1:
                    if (this.isDimmed(this.mSlideableView)) {
                        float v5_0 = p12.getX();
                        float v6_0 = p12.getY();
                        if (((((v5_0 - this.mInitialMotionX) * (v5_0 - this.mInitialMotionX)) + ((v6_0 - this.mInitialMotionY) * (v6_0 - this.mInitialMotionY))) < ((float) (this.mDragHelper.getTouchSlop() * this.mDragHelper.getTouchSlop()))) && (this.mDragHelper.isViewUnder(this.mSlideableView, ((int) v5_0), ((int) v6_0)))) {
                            this.closePane(this.mSlideableView, 0);
                        }
                    }
                    break;
                default:
            }
        } else {
            v4 = super.onTouchEvent(p12);
        }
        return v4;
    }

    public boolean openPane()
    {
        return this.openPane(this.mSlideableView, 0);
    }

    public void requestChildFocus(android.view.View p2, android.view.View p3)
    {
        super.requestChildFocus(p2, p3);
        if ((!this.isInTouchMode()) && (!this.mCanSlide)) {
            int v0_3;
            if (p2 != this.mSlideableView) {
                v0_3 = 0;
            } else {
                v0_3 = 1;
            }
            this.mPreservedOpenState = v0_3;
        }
        return;
    }

    void setAllChildrenVisible()
    {
        int v2 = 0;
        int v1 = this.getChildCount();
        while (v2 < v1) {
            android.view.View v0 = this.getChildAt(v2);
            if (v0.getVisibility() == 4) {
                v0.setVisibility(0);
            }
            v2++;
        }
        return;
    }

    public void setCoveredFadeColor(int p1)
    {
        this.mCoveredFadeColor = p1;
        return;
    }

    public void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener p1)
    {
        this.mPanelSlideListener = p1;
        return;
    }

    public void setParallaxDistance(int p1)
    {
        this.mParallaxBy = p1;
        this.requestLayout();
        return;
    }

    public void setShadowDrawable(android.graphics.drawable.Drawable p1)
    {
        this.setShadowDrawableLeft(p1);
        return;
    }

    public void setShadowDrawableLeft(android.graphics.drawable.Drawable p1)
    {
        this.mShadowDrawableLeft = p1;
        return;
    }

    public void setShadowDrawableRight(android.graphics.drawable.Drawable p1)
    {
        this.mShadowDrawableRight = p1;
        return;
    }

    public void setShadowResource(int p2)
    {
        this.setShadowDrawable(this.getResources().getDrawable(p2));
        return;
    }

    public void setShadowResourceLeft(int p2)
    {
        this.setShadowDrawableLeft(android.support.v4.content.ContextCompat.getDrawable(this.getContext(), p2));
        return;
    }

    public void setShadowResourceRight(int p2)
    {
        this.setShadowDrawableRight(android.support.v4.content.ContextCompat.getDrawable(this.getContext(), p2));
        return;
    }

    public void setSliderFadeColor(int p1)
    {
        this.mSliderFadeColor = p1;
        return;
    }

    public void smoothSlideClosed()
    {
        this.closePane();
        return;
    }

    public void smoothSlideOpen()
    {
        this.openPane();
        return;
    }

    boolean smoothSlideTo(float p10, int p11)
    {
        int v5 = 0;
        if (this.mCanSlide) {
            int v4;
            android.support.v4.widget.SlidingPaneLayout$LayoutParams v2_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) this.mSlideableView.getLayoutParams());
            if (!this.isLayoutRtlSupport()) {
                v4 = ((int) (((float) (this.getPaddingLeft() + v2_1.leftMargin)) + (((float) this.mSlideRange) * p10)));
            } else {
                v4 = ((int) (((float) this.getWidth()) - ((((float) (this.getPaddingRight() + v2_1.rightMargin)) + (((float) this.mSlideRange) * p10)) + ((float) this.mSlideableView.getWidth()))));
            }
            if (this.mDragHelper.smoothSlideViewTo(this.mSlideableView, v4, this.mSlideableView.getTop())) {
                this.setAllChildrenVisible();
                android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                v5 = 1;
            }
        }
        return v5;
    }

    void updateObscuredViewsVisibility(android.view.View p22)
    {
        int v15;
        boolean v12 = this.isLayoutRtlSupport();
        if (!v12) {
            v15 = this.getPaddingLeft();
        } else {
            v15 = (this.getWidth() - this.getPaddingRight());
        }
        int v10;
        if (!v12) {
            v10 = (this.getWidth() - this.getPaddingRight());
        } else {
            v10 = this.getPaddingLeft();
        }
        int v16;
        int v2;
        int v13;
        int v14;
        int v17 = this.getPaddingTop();
        int v3 = (this.getHeight() - this.getPaddingBottom());
        if ((p22 == null) || (!android.support.v4.widget.SlidingPaneLayout.viewIsOpaque(p22))) {
            v2 = 0;
            v16 = 0;
            v14 = 0;
            v13 = 0;
        } else {
            v13 = p22.getLeft();
            v14 = p22.getRight();
            v16 = p22.getTop();
            v2 = p22.getBottom();
        }
        int v11 = 0;
        int v5 = this.getChildCount();
        while (v11 < v5) {
            android.view.View v4 = this.getChildAt(v11);
            if (v4 == p22) {
                break;
            }
            if (v4.getVisibility() != 8) {
                int v19_4;
                if (!v12) {
                    v19_4 = v15;
                } else {
                    v19_4 = v10;
                }
                int v19_7;
                int v7 = Math.max(v19_4, v4.getLeft());
                int v9 = Math.max(v17, v4.getTop());
                if (!v12) {
                    v19_7 = v10;
                } else {
                    v19_7 = v15;
                }
                int v18;
                int v8 = Math.min(v19_7, v4.getRight());
                int vtmp26 = Math.min(v3, v4.getBottom());
                if ((v7 < v13) || ((v9 < v16) || ((v8 > v14) || (vtmp26 > v2)))) {
                    v18 = 0;
                } else {
                    v18 = 4;
                }
                v4.setVisibility(v18);
            }
            v11++;
        }
        return;
    }
}
package android.support.v4.widget;
public class Space extends android.view.View {

    public Space(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public Space(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public Space(android.content.Context p2, android.util.AttributeSet p3, int p4)
    {
        super(p2, p3, p4);
        if (super.getVisibility() == 0) {
            super.setVisibility(4);
        }
        return;
    }

    private static int getDefaultSize2(int p3, int p4)
    {
        int v0 = p3;
        int v1 = android.view.View$MeasureSpec.getMode(p4);
        int v2 = android.view.View$MeasureSpec.getSize(p4);
        switch (v1) {
            case -2147483648:
                v0 = Math.min(p3, v2);
                break;
            case 0:
                v0 = p3;
                break;
            case 1073741824:
                v0 = v2;
                break;
        }
        return v0;
    }

    public void draw(android.graphics.Canvas p1)
    {
        return;
    }

    protected void onMeasure(int p3, int p4)
    {
        this.setMeasuredDimension(android.support.v4.widget.Space.getDefaultSize2(this.getSuggestedMinimumWidth(), p3), android.support.v4.widget.Space.getDefaultSize2(this.getSuggestedMinimumHeight(), p4));
        return;
    }
}
package android.support.v4.widget;
final class SwipeProgressBar {
    private static final int ANIMATION_DURATION_MS = 2000;
    private static final int COLOR1 = 3003121664;
    private static final int COLOR2 = 2147483648;
    private static final int COLOR3 = 1291845632;
    private static final int COLOR4 = 436207616;
    private static final int FINISH_ANIMATION_DURATION_MS = 1000;
    private static final android.view.animation.Interpolator INTERPOLATOR;
    private android.graphics.Rect mBounds;
    private final android.graphics.RectF mClipRect;
    private int mColor1;
    private int mColor2;
    private int mColor3;
    private int mColor4;
    private long mFinishTime;
    private final android.graphics.Paint mPaint;
    private android.view.View mParent;
    private boolean mRunning;
    private long mStartTime;
    private float mTriggerPercentage;

    static SwipeProgressBar()
    {
        android.support.v4.widget.SwipeProgressBar.INTERPOLATOR = new android.support.v4.view.animation.FastOutSlowInInterpolator();
        return;
    }

    SwipeProgressBar(android.view.View p2)
    {
        this.mPaint = new android.graphics.Paint();
        this.mClipRect = new android.graphics.RectF();
        this.mBounds = new android.graphics.Rect();
        this.mParent = p2;
        this.mColor1 = -1291845632;
        this.mColor2 = -2147483648;
        this.mColor3 = 1291845632;
        this.mColor4 = 436207616;
        return;
    }

    private void drawCircle(android.graphics.Canvas p4, float p5, float p6, int p7, float p8)
    {
        this.mPaint.setColor(p7);
        p4.save();
        p4.translate(p5, p6);
        p4.scale(android.support.v4.widget.SwipeProgressBar.INTERPOLATOR.getInterpolation(p8), android.support.v4.widget.SwipeProgressBar.INTERPOLATOR.getInterpolation(p8));
        p4.drawCircle(0, 0, p5, this.mPaint);
        p4.restore();
        return;
    }

    private void drawTrigger(android.graphics.Canvas p5, int p6, int p7)
    {
        this.mPaint.setColor(this.mColor1);
        p5.drawCircle(((float) p6), ((float) p7), (((float) p6) * this.mTriggerPercentage), this.mPaint);
        return;
    }

    void draw(android.graphics.Canvas p26)
    {
        int v24 = this.mBounds.width();
        int v17 = this.mBounds.height();
        int v9 = (v24 / 2);
        int v10 = (v17 / 2);
        int v11 = 0;
        int v23 = p26.save();
        p26.clipRect(this.mBounds);
        if ((!this.mRunning) && (this.mFinishTime <= 0)) {
            if ((this.mTriggerPercentage <= 0) || (((double) this.mTriggerPercentage) > 1.0)) {
                p26.restoreToCount(v23);
            } else {
                this.drawTrigger(p26, v9, v10);
            }
        } else {
            long v20 = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
            long v18 = ((v20 - this.mStartTime) / 2000);
            float v22 = (((float) ((v20 - this.mStartTime) % 2000)) / 1101004800);
            if (!this.mRunning) {
                if ((v20 - this.mFinishTime) < 1000) {
                    float v8 = (((float) (v24 / 2)) * android.support.v4.widget.SwipeProgressBar.INTERPOLATOR.getInterpolation(((((float) ((v20 - this.mFinishTime) % 1000)) / 1092616192) / 1120403456)));
                    this.mClipRect.set((((float) v9) - v8), 0, (((float) v9) + v8), ((float) v17));
                    p26.saveLayerAlpha(this.mClipRect, 0, 0);
                    v11 = 1;
                } else {
                    this.mFinishTime = 0;
                    return;
                }
            }
            if (v18 != 0) {
                if ((v22 < 0) || (v22 >= 1103626240)) {
                    if ((v22 < 1103626240) || (v22 >= 1112014848)) {
                        if ((v22 < 1112014848) || (v22 >= 1117126656)) {
                            p26.drawColor(this.mColor3);
                        } else {
                            p26.drawColor(this.mColor2);
                        }
                    } else {
                        p26.drawColor(this.mColor1);
                    }
                } else {
                    p26.drawColor(this.mColor4);
                }
            } else {
                p26.drawColor(this.mColor1);
            }
            if ((v22 >= 0) && (v22 <= 1103626240)) {
                this.drawCircle(p26, ((float) v9), ((float) v10), this.mColor1, (((1103626240 + v22) * 1073741824) / 1120403456));
            }
            if ((v22 >= 0) && (v22 <= 1112014848)) {
                this.drawCircle(p26, ((float) v9), ((float) v10), this.mColor2, ((1073741824 * v22) / 1120403456));
            }
            if ((v22 >= 1103626240) && (v22 <= 1117126656)) {
                this.drawCircle(p26, ((float) v9), ((float) v10), this.mColor3, (((v22 - 1103626240) * 1073741824) / 1120403456));
            }
            if ((v22 >= 1112014848) && (v22 <= 1120403456)) {
                this.drawCircle(p26, ((float) v9), ((float) v10), this.mColor4, (((v22 - 1112014848) * 1073741824) / 1120403456));
            }
            if ((v22 >= 1117126656) && (v22 <= 1120403456)) {
                this.drawCircle(p26, ((float) v9), ((float) v10), this.mColor1, (((v22 - 1117126656) * 1073741824) / 1120403456));
            }
            if ((this.mTriggerPercentage > 0) && (v11 != 0)) {
                p26.restoreToCount(v23);
                v23 = p26.save();
                p26.clipRect(this.mBounds);
                this.drawTrigger(p26, v9, v10);
            }
            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this.mParent, this.mBounds.left, this.mBounds.top, this.mBounds.right, this.mBounds.bottom);
        }
        return;
    }

    boolean isRunning()
    {
        if ((!this.mRunning) && (this.mFinishTime <= 0)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    void setBounds(int p2, int p3, int p4, int p5)
    {
        this.mBounds.left = p2;
        this.mBounds.top = p3;
        this.mBounds.right = p4;
        this.mBounds.bottom = p5;
        return;
    }

    void setColorScheme(int p1, int p2, int p3, int p4)
    {
        this.mColor1 = p1;
        this.mColor2 = p2;
        this.mColor3 = p3;
        this.mColor4 = p4;
        return;
    }

    void setTriggerPercentage(float p6)
    {
        this.mTriggerPercentage = p6;
        this.mStartTime = 0;
        android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this.mParent, this.mBounds.left, this.mBounds.top, this.mBounds.right, this.mBounds.bottom);
        return;
    }

    void start()
    {
        if (!this.mRunning) {
            this.mTriggerPercentage = 0;
            this.mStartTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
            this.mRunning = 1;
            this.mParent.postInvalidate();
        }
        return;
    }

    void stop()
    {
        if (this.mRunning) {
            this.mTriggerPercentage = 0;
            this.mFinishTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
            this.mRunning = 0;
            this.mParent.postInvalidate();
        }
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$1 implements android.view.animation.Animation$AnimationListener {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$1(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p3)
    {
        if (!this.this$0.mRefreshing) {
            this.this$0.reset();
        } else {
            this.this$0.mProgress.setAlpha(255);
            this.this$0.mProgress.start();
            if ((this.this$0.mNotify) && (this.this$0.mListener != null)) {
                this.this$0.mListener.onRefresh();
            }
            this.this$0.mCurrentTargetOffsetTop = this.this$0.mCircleView.getTop();
        }
        return;
    }

    public void onAnimationRepeat(android.view.animation.Animation p1)
    {
        return;
    }

    public void onAnimationStart(android.view.animation.Animation p1)
    {
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$2 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$2(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void applyTransformation(float p2, android.view.animation.Transformation p3)
    {
        this.this$0.setAnimationProgress(p2);
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$3 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$3(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void applyTransformation(float p3, android.view.animation.Transformation p4)
    {
        this.this$0.setAnimationProgress((1065353216 - p3));
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$4 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;
    final synthetic int val$endingAlpha;
    final synthetic int val$startingAlpha;

    SwipeRefreshLayout$4(android.support.v4.widget.SwipeRefreshLayout p1, int p2, int p3)
    {
        this.this$0 = p1;
        this.val$startingAlpha = p2;
        this.val$endingAlpha = p3;
        return;
    }

    public void applyTransformation(float p5, android.view.animation.Transformation p6)
    {
        this.this$0.mProgress.setAlpha(((int) (((float) this.val$startingAlpha) + (((float) (this.val$endingAlpha - this.val$startingAlpha)) * p5))));
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$5 implements android.view.animation.Animation$AnimationListener {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$5(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p3)
    {
        if (!this.this$0.mScale) {
            this.this$0.startScaleDownAnimation(0);
        }
        return;
    }

    public void onAnimationRepeat(android.view.animation.Animation p1)
    {
        return;
    }

    public void onAnimationStart(android.view.animation.Animation p1)
    {
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$6 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$6(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void applyTransformation(float p6, android.view.animation.Transformation p7)
    {
        int v0;
        v0 = 0;
        if (this.this$0.mUsingCustomStart) {
            v0 = this.this$0.mSpinnerOffsetEnd;
        } else {
            v0 = (this.this$0.mSpinnerOffsetEnd - Math.abs(this.this$0.mOriginalOffsetTop));
        }
        this.this$0.setTargetOffsetTopAndBottom(((this.this$0.mFrom + ((int) (((float) (v0 - this.this$0.mFrom)) * p6))) - this.this$0.mCircleView.getTop()), 0);
        this.this$0.mProgress.setArrowScale((1065353216 - p6));
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$7 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$7(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void applyTransformation(float p2, android.view.animation.Transformation p3)
    {
        this.this$0.moveToStart(p2);
        return;
    }
}
package android.support.v4.widget;
 class SwipeRefreshLayout$8 extends android.view.animation.Animation {
    final synthetic android.support.v4.widget.SwipeRefreshLayout this$0;

    SwipeRefreshLayout$8(android.support.v4.widget.SwipeRefreshLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void applyTransformation(float p4, android.view.animation.Transformation p5)
    {
        this.this$0.setAnimationProgress((this.this$0.mStartingScale + ((- this.this$0.mStartingScale) * p4)));
        this.this$0.moveToStart(p4);
        return;
    }
}
package android.support.v4.widget;
public interface SwipeRefreshLayout$OnChildScrollUpCallback {

    public abstract boolean canChildScrollUp();
}
package android.support.v4.widget;
public interface SwipeRefreshLayout$OnRefreshListener {

    public abstract void onRefresh();
}
package android.support.v4.widget;
interface TextViewCompat$TextViewCompatImpl {

    public abstract android.graphics.drawable.Drawable[] getCompoundDrawablesRelative();

    public abstract int getMaxLines();

    public abstract int getMinLines();

    public abstract void setCompoundDrawablesRelative();

    public abstract void setCompoundDrawablesRelativeWithIntrinsicBounds();

    public abstract void setCompoundDrawablesRelativeWithIntrinsicBounds();

    public abstract void setTextAppearance();
}
package android.support.v4.widget;
public final class TextViewCompat {
    static final android.support.v4.widget.TextViewCompat$TextViewCompatImpl IMPL;

    static TextViewCompat()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 23) {
            if (v0 < 18) {
                if (v0 < 17) {
                    if (v0 < 16) {
                        android.support.v4.widget.TextViewCompat.IMPL = new android.support.v4.widget.TextViewCompat$BaseTextViewCompatImpl();
                    } else {
                        android.support.v4.widget.TextViewCompat.IMPL = new android.support.v4.widget.TextViewCompat$JbTextViewCompatImpl();
                    }
                } else {
                    android.support.v4.widget.TextViewCompat.IMPL = new android.support.v4.widget.TextViewCompat$JbMr1TextViewCompatImpl();
                }
            } else {
                android.support.v4.widget.TextViewCompat.IMPL = new android.support.v4.widget.TextViewCompat$JbMr2TextViewCompatImpl();
            }
        } else {
            android.support.v4.widget.TextViewCompat.IMPL = new android.support.v4.widget.TextViewCompat$Api23TextViewCompatImpl();
        }
        return;
    }

    private TextViewCompat()
    {
        return;
    }

    public static android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p1)
    {
        return android.support.v4.widget.TextViewCompat.IMPL.getCompoundDrawablesRelative(p1);
    }

    public static int getMaxLines(android.widget.TextView p1)
    {
        return android.support.v4.widget.TextViewCompat.IMPL.getMaxLines(p1);
    }

    public static int getMinLines(android.widget.TextView p1)
    {
        return android.support.v4.widget.TextViewCompat.IMPL.getMinLines(p1);
    }

    public static void setCompoundDrawablesRelative(android.widget.TextView p6, android.graphics.drawable.Drawable p7, android.graphics.drawable.Drawable p8, android.graphics.drawable.Drawable p9, android.graphics.drawable.Drawable p10)
    {
        android.support.v4.widget.TextViewCompat.IMPL.setCompoundDrawablesRelative(p6, p7, p8, p9, p10);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p6, int p7, int p8, int p9, int p10)
    {
        android.support.v4.widget.TextViewCompat.IMPL.setCompoundDrawablesRelativeWithIntrinsicBounds(p6, p7, p8, p9, p10);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p6, android.graphics.drawable.Drawable p7, android.graphics.drawable.Drawable p8, android.graphics.drawable.Drawable p9, android.graphics.drawable.Drawable p10)
    {
        android.support.v4.widget.TextViewCompat.IMPL.setCompoundDrawablesRelativeWithIntrinsicBounds(p6, p7, p8, p9, p10);
        return;
    }

    public static void setTextAppearance(android.widget.TextView p1, int p2)
    {
        android.support.v4.widget.TextViewCompat.IMPL.setTextAppearance(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompatApi23 {

    TextViewCompatApi23()
    {
        return;
    }

    public static void setTextAppearance(android.widget.TextView p0, int p1)
    {
        p0.setTextAppearance(p1);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompatGingerbread {
    private static final int LINES = 1;
    private static final String LOG_TAG = "TextViewCompatGingerbread";
    private static reflect.Field sMaxModeField;
    private static boolean sMaxModeFieldFetched;
    private static reflect.Field sMaximumField;
    private static boolean sMaximumFieldFetched;
    private static reflect.Field sMinModeField;
    private static boolean sMinModeFieldFetched;
    private static reflect.Field sMinimumField;
    private static boolean sMinimumFieldFetched;

    TextViewCompatGingerbread()
    {
        return;
    }

    static android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p1)
    {
        return p1.getCompoundDrawables();
    }

    static int getMaxLines(android.widget.TextView p2)
    {
        if (!android.support.v4.widget.TextViewCompatGingerbread.sMaxModeFieldFetched) {
            android.support.v4.widget.TextViewCompatGingerbread.sMaxModeField = android.support.v4.widget.TextViewCompatGingerbread.retrieveField("mMaxMode");
            android.support.v4.widget.TextViewCompatGingerbread.sMaxModeFieldFetched = 1;
        }
        if ((android.support.v4.widget.TextViewCompatGingerbread.sMaxModeField == null) || (android.support.v4.widget.TextViewCompatGingerbread.retrieveIntFromField(android.support.v4.widget.TextViewCompatGingerbread.sMaxModeField, p2) != 1)) {
            int v0_7 = -1;
        } else {
            if (!android.support.v4.widget.TextViewCompatGingerbread.sMaximumFieldFetched) {
                android.support.v4.widget.TextViewCompatGingerbread.sMaximumField = android.support.v4.widget.TextViewCompatGingerbread.retrieveField("mMaximum");
                android.support.v4.widget.TextViewCompatGingerbread.sMaximumFieldFetched = 1;
            }
            if (android.support.v4.widget.TextViewCompatGingerbread.sMaximumField == null) {
            } else {
                v0_7 = android.support.v4.widget.TextViewCompatGingerbread.retrieveIntFromField(android.support.v4.widget.TextViewCompatGingerbread.sMaximumField, p2);
            }
        }
        return v0_7;
    }

    static int getMinLines(android.widget.TextView p2)
    {
        if (!android.support.v4.widget.TextViewCompatGingerbread.sMinModeFieldFetched) {
            android.support.v4.widget.TextViewCompatGingerbread.sMinModeField = android.support.v4.widget.TextViewCompatGingerbread.retrieveField("mMinMode");
            android.support.v4.widget.TextViewCompatGingerbread.sMinModeFieldFetched = 1;
        }
        if ((android.support.v4.widget.TextViewCompatGingerbread.sMinModeField == null) || (android.support.v4.widget.TextViewCompatGingerbread.retrieveIntFromField(android.support.v4.widget.TextViewCompatGingerbread.sMinModeField, p2) != 1)) {
            int v0_7 = -1;
        } else {
            if (!android.support.v4.widget.TextViewCompatGingerbread.sMinimumFieldFetched) {
                android.support.v4.widget.TextViewCompatGingerbread.sMinimumField = android.support.v4.widget.TextViewCompatGingerbread.retrieveField("mMinimum");
                android.support.v4.widget.TextViewCompatGingerbread.sMinimumFieldFetched = 1;
            }
            if (android.support.v4.widget.TextViewCompatGingerbread.sMinimumField == null) {
            } else {
                v0_7 = android.support.v4.widget.TextViewCompatGingerbread.retrieveIntFromField(android.support.v4.widget.TextViewCompatGingerbread.sMinimumField, p2);
            }
        }
        return v0_7;
    }

    private static reflect.Field retrieveField(String p5)
    {
        try {
            reflect.Field v1 = android.widget.TextView.getDeclaredField(p5);
            v1.setAccessible(1);
        } catch (NoSuchFieldException v0) {
            android.util.Log.e("TextViewCompatGingerbread", new StringBuilder().append("Could not retrieve ").append(p5).append(" field.").toString());
        }
        return v1;
    }

    private static int retrieveIntFromField(reflect.Field p4, android.widget.TextView p5)
    {
        try {
            int v1_0 = p4.getInt(p5);
        } catch (IllegalAccessException v0) {
            android.util.Log.d("TextViewCompatGingerbread", new StringBuilder().append("Could not retrieve value of ").append(p4.getName()).append(" field.").toString());
            v1_0 = -1;
        }
        return v1_0;
    }

    static void setTextAppearance(android.widget.TextView p1, int p2)
    {
        p1.setTextAppearance(p1.getContext(), p2);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompatJb {

    TextViewCompatJb()
    {
        return;
    }

    static int getMaxLines(android.widget.TextView p1)
    {
        return p1.getMaxLines();
    }

    static int getMinLines(android.widget.TextView p1)
    {
        return p1.getMinLines();
    }
}
package android.support.v4.widget;
 class TextViewCompatJbMr1 {

    TextViewCompatJbMr1()
    {
        return;
    }

    public static android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p7)
    {
        int v2 = 1;
        if (p7.getLayoutDirection() != 1) {
            v2 = 0;
        }
        android.graphics.drawable.Drawable[] v0 = p7.getCompoundDrawables();
        if (v2 != 0) {
            android.graphics.drawable.Drawable v1 = v0[0];
            v0[0] = v0[2];
            v0[2] = v1;
        }
        return v0;
    }

    public static void setCompoundDrawablesRelative(android.widget.TextView p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5, android.graphics.drawable.Drawable p6)
    {
        int v0 = 1;
        if (p2.getLayoutDirection() != 1) {
            v0 = 0;
        }
        android.graphics.drawable.Drawable v1_1;
        if (v0 == 0) {
            v1_1 = p3;
        } else {
            v1_1 = p5;
        }
        if (v0 == 0) {
            p3 = p5;
        }
        p2.setCompoundDrawables(v1_1, p4, p3, p6);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p2, int p3, int p4, int p5, int p6)
    {
        int v0 = 1;
        if (p2.getLayoutDirection() != 1) {
            v0 = 0;
        }
        int v1_1;
        if (v0 == 0) {
            v1_1 = p3;
        } else {
            v1_1 = p5;
        }
        if (v0 == 0) {
            p3 = p5;
        }
        p2.setCompoundDrawablesWithIntrinsicBounds(v1_1, p4, p3, p6);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5, android.graphics.drawable.Drawable p6)
    {
        int v0 = 1;
        if (p2.getLayoutDirection() != 1) {
            v0 = 0;
        }
        android.graphics.drawable.Drawable v1_1;
        if (v0 == 0) {
            v1_1 = p3;
        } else {
            v1_1 = p5;
        }
        if (v0 == 0) {
            p3 = p5;
        }
        p2.setCompoundDrawablesWithIntrinsicBounds(v1_1, p4, p3, p6);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompatJbMr2 {

    TextViewCompatJbMr2()
    {
        return;
    }

    public static android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p1)
    {
        return p1.getCompoundDrawablesRelative();
    }

    public static void setCompoundDrawablesRelative(android.widget.TextView p0, android.graphics.drawable.Drawable p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4)
    {
        p0.setCompoundDrawablesRelative(p1, p2, p3, p4);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p0, int p1, int p2, int p3, int p4)
    {
        p0.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4);
        return;
    }

    public static void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p0, android.graphics.drawable.Drawable p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4)
    {
        p0.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4);
        return;
    }
}
package android.support.v4.widget;
public interface TintableCompoundButton {

    public abstract android.content.res.ColorStateList getSupportButtonTintList();

    public abstract android.graphics.PorterDuff$Mode getSupportButtonTintMode();

    public abstract void setSupportButtonTintList();

    public abstract void setSupportButtonTintMode();
}
package android.support.v4.widget;
final class ViewDragHelper$1 implements android.view.animation.Interpolator {

    ViewDragHelper$1()
    {
        return;
    }

    public float getInterpolation(float p3)
    {
        float v3_1 = (p3 - 1065353216);
        return (((((v3_1 * v3_1) * v3_1) * v3_1) * v3_1) + 1065353216);
    }
}
package android.support.v4.widget;
 class ViewDragHelper$2 implements java.lang.Runnable {
    final synthetic android.support.v4.widget.ViewDragHelper this$0;

    ViewDragHelper$2(android.support.v4.widget.ViewDragHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.setDragState(0);
        return;
    }
}
package android.support.v4.widget;
public abstract class ViewDragHelper$Callback {

    public ViewDragHelper$Callback()
    {
        return;
    }

    public int clampViewPositionHorizontal(android.view.View p2, int p3, int p4)
    {
        return 0;
    }

    public int clampViewPositionVertical(android.view.View p2, int p3, int p4)
    {
        return 0;
    }

    public int getOrderedChildIndex(int p1)
    {
        return p1;
    }

    public int getViewHorizontalDragRange(android.view.View p2)
    {
        return 0;
    }

    public int getViewVerticalDragRange(android.view.View p2)
    {
        return 0;
    }

    public void onEdgeDragStarted(int p1, int p2)
    {
        return;
    }

    public boolean onEdgeLock(int p2)
    {
        return 0;
    }

    public void onEdgeTouched(int p1, int p2)
    {
        return;
    }

    public void onViewCaptured(android.view.View p1, int p2)
    {
        return;
    }

    public void onViewDragStateChanged(int p1)
    {
        return;
    }

    public void onViewPositionChanged(android.view.View p1, int p2, int p3, int p4, int p5)
    {
        return;
    }

    public void onViewReleased(android.view.View p1, float p2, float p3)
    {
        return;
    }

    public abstract boolean tryCaptureView();
}
package android.support.v4.widget;
public class ViewDragHelper {
    private static final int BASE_SETTLE_DURATION = 256;
    public static final int DIRECTION_ALL = 3;
    public static final int DIRECTION_HORIZONTAL = 1;
    public static final int DIRECTION_VERTICAL = 2;
    public static final int EDGE_ALL = 15;
    public static final int EDGE_BOTTOM = 8;
    public static final int EDGE_LEFT = 1;
    public static final int EDGE_RIGHT = 2;
    private static final int EDGE_SIZE = 20;
    public static final int EDGE_TOP = 4;
    public static final int INVALID_POINTER = 255;
    private static final int MAX_SETTLE_DURATION = 600;
    public static final int STATE_DRAGGING = 1;
    public static final int STATE_IDLE = 0;
    public static final int STATE_SETTLING = 2;
    private static final String TAG = "ViewDragHelper";
    private static final android.view.animation.Interpolator sInterpolator;
    private int mActivePointerId;
    private final android.support.v4.widget.ViewDragHelper$Callback mCallback;
    private android.view.View mCapturedView;
    private int mDragState;
    private int[] mEdgeDragsInProgress;
    private int[] mEdgeDragsLocked;
    private int mEdgeSize;
    private int[] mInitialEdgesTouched;
    private float[] mInitialMotionX;
    private float[] mInitialMotionY;
    private float[] mLastMotionX;
    private float[] mLastMotionY;
    private float mMaxVelocity;
    private float mMinVelocity;
    private final android.view.ViewGroup mParentView;
    private int mPointersDown;
    private boolean mReleaseInProgress;
    private android.support.v4.widget.ScrollerCompat mScroller;
    private final Runnable mSetIdleRunnable;
    private int mTouchSlop;
    private int mTrackingEdges;
    private android.view.VelocityTracker mVelocityTracker;

    static ViewDragHelper()
    {
        android.support.v4.widget.ViewDragHelper.sInterpolator = new android.support.v4.widget.ViewDragHelper$1();
        return;
    }

    private ViewDragHelper(android.content.Context p5, android.view.ViewGroup p6, android.support.v4.widget.ViewDragHelper$Callback p7)
    {
        this.mActivePointerId = -1;
        this.mSetIdleRunnable = new android.support.v4.widget.ViewDragHelper$2(this);
        if (p6 != null) {
            if (p7 != null) {
                this.mParentView = p6;
                this.mCallback = p7;
                android.view.ViewConfiguration v1 = android.view.ViewConfiguration.get(p5);
                this.mEdgeSize = ((int) ((1101004800 * p5.getResources().getDisplayMetrics().density) + 1056964608));
                this.mTouchSlop = v1.getScaledTouchSlop();
                this.mMaxVelocity = ((float) v1.getScaledMaximumFlingVelocity());
                this.mMinVelocity = ((float) v1.getScaledMinimumFlingVelocity());
                this.mScroller = android.support.v4.widget.ScrollerCompat.create(p5, android.support.v4.widget.ViewDragHelper.sInterpolator);
                return;
            } else {
                throw new IllegalArgumentException("Callback may not be null");
            }
        } else {
            throw new IllegalArgumentException("Parent view may not be null");
        }
    }

    private boolean checkNewEdgeDrag(float p6, float p7, int p8, int p9)
    {
        int v2 = 0;
        float v0 = Math.abs(p6);
        float v1 = Math.abs(p7);
        if (((this.mInitialEdgesTouched[p8] & p9) == p9) && (((this.mTrackingEdges & p9) != 0) && (((this.mEdgeDragsLocked[p8] & p9) != p9) && (((this.mEdgeDragsInProgress[p8] & p9) != p9) && ((v0 > ((float) this.mTouchSlop)) || (v1 > ((float) this.mTouchSlop))))))) {
            if ((v0 >= (1056964608 * v1)) || (!this.mCallback.onEdgeLock(p9))) {
                if (((this.mEdgeDragsInProgress[p8] & p9) == 0) && (v0 > ((float) this.mTouchSlop))) {
                    v2 = 1;
                }
            } else {
                float v3_24 = this.mEdgeDragsLocked;
                v3_24[p8] = (v3_24[p8] | p9);
            }
        }
        return v2;
    }

    private boolean checkTouchSlop(android.view.View p8, float p9, float p10)
    {
        int v2 = 1;
        if (p8 != null) {
            int v0;
            if (this.mCallback.getViewHorizontalDragRange(p8) <= 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            int v1;
            if (this.mCallback.getViewVerticalDragRange(p8) <= 0) {
                v1 = 0;
            } else {
                v1 = 1;
            }
            if ((v0 == 0) || (v1 == 0)) {
                if (v0 == 0) {
                    if (v1 == 0) {
                        v2 = 0;
                    } else {
                        if (Math.abs(p10) <= ((float) this.mTouchSlop)) {
                            v2 = 0;
                        }
                    }
                } else {
                    if (Math.abs(p9) <= ((float) this.mTouchSlop)) {
                        v2 = 0;
                    }
                }
            } else {
                if (((p9 * p9) + (p10 * p10)) <= ((float) (this.mTouchSlop * this.mTouchSlop))) {
                    v2 = 0;
                }
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    private float clampMag(float p4, float p5, float p6)
    {
        float v0 = Math.abs(p4);
        if (v0 >= p5) {
            if (v0 <= p6) {
                p6 = p4;
            } else {
                if (p4 <= 0) {
                    p6 = (- p6);
                }
            }
        } else {
            p6 = 0;
        }
        return p6;
    }

    private int clampMag(int p2, int p3, int p4)
    {
        int v0 = Math.abs(p2);
        if (v0 >= p3) {
            if (v0 <= p4) {
                p4 = p2;
            } else {
                if (p2 <= 0) {
                    p4 = (- p4);
                }
            }
        } else {
            p4 = 0;
        }
        return p4;
    }

    private void clearMotionHistory()
    {
        if (this.mInitialMotionX != null) {
            java.util.Arrays.fill(this.mInitialMotionX, 0);
            java.util.Arrays.fill(this.mInitialMotionY, 0);
            java.util.Arrays.fill(this.mLastMotionX, 0);
            java.util.Arrays.fill(this.mLastMotionY, 0);
            java.util.Arrays.fill(this.mInitialEdgesTouched, 0);
            java.util.Arrays.fill(this.mEdgeDragsInProgress, 0);
            java.util.Arrays.fill(this.mEdgeDragsLocked, 0);
            this.mPointersDown = 0;
        }
        return;
    }

    private void clearMotionHistory(int p4)
    {
        if ((this.mInitialMotionX != null) && (this.isPointerDown(p4))) {
            this.mInitialMotionX[p4] = 0;
            this.mInitialMotionY[p4] = 0;
            this.mLastMotionX[p4] = 0;
            this.mLastMotionY[p4] = 0;
            this.mInitialEdgesTouched[p4] = 0;
            this.mEdgeDragsInProgress[p4] = 0;
            this.mEdgeDragsLocked[p4] = 0;
            this.mPointersDown = (this.mPointersDown & ((1 << p4) ^ -1));
        }
        return;
    }

    private int computeAxisDuration(int p11, int p12, int p13)
    {
        int v6_11;
        if (p11 != 0) {
            int v2;
            int v5 = this.mParentView.getWidth();
            int v3 = (v5 / 2);
            float v0 = (((float) v3) + (((float) v3) * this.distanceInfluenceForSnapDuration(Math.min(1065353216, (((float) Math.abs(p11)) / ((float) v5))))));
            int v12_1 = Math.abs(p12);
            if (v12_1 <= 0) {
                v2 = ((int) (((((float) Math.abs(p11)) / ((float) p13)) + 1065353216) * 1132462080));
            } else {
                v2 = (Math.round((1148846080 * Math.abs((v0 / ((float) v12_1))))) * 4);
            }
            v6_11 = Math.min(v2, 600);
        } else {
            v6_11 = 0;
        }
        return v6_11;
    }

    private int computeSettleDuration(android.view.View p15, int p16, int p17, int p18, int p19)
    {
        float v9;
        int v18_1 = this.clampMag(p18, ((int) this.mMinVelocity), ((int) this.mMaxVelocity));
        int v19_1 = this.clampMag(p19, ((int) this.mMinVelocity), ((int) this.mMaxVelocity));
        int v2 = Math.abs(p16);
        int v3 = Math.abs(p17);
        int v4 = Math.abs(v18_1);
        int v5 = Math.abs(v19_1);
        int v7 = (v4 + v5);
        int v6 = (v2 + v3);
        if (v18_1 == 0) {
            v9 = (((float) v2) / ((float) v6));
        } else {
            v9 = (((float) v4) / ((float) v7));
        }
        float v11;
        if (v19_1 == 0) {
            v11 = (((float) v3) / ((float) v6));
        } else {
            v11 = (((float) v5) / ((float) v7));
        }
        return ((int) ((((float) this.computeAxisDuration(p16, v18_1, this.mCallback.getViewHorizontalDragRange(p15))) * v9) + (((float) this.computeAxisDuration(p17, v19_1, this.mCallback.getViewVerticalDragRange(p15))) * v11)));
    }

    public static android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup p3, float p4, android.support.v4.widget.ViewDragHelper$Callback p5)
    {
        android.support.v4.widget.ViewDragHelper v0 = android.support.v4.widget.ViewDragHelper.create(p3, p5);
        v0.mTouchSlop = ((int) (((float) v0.mTouchSlop) * (1065353216 / p4)));
        return v0;
    }

    public static android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup p2, android.support.v4.widget.ViewDragHelper$Callback p3)
    {
        return new android.support.v4.widget.ViewDragHelper(p2.getContext(), p2, p3);
    }

    private void dispatchViewReleased(float p5, float p6)
    {
        this.mReleaseInProgress = 1;
        this.mCallback.onViewReleased(this.mCapturedView, p5, p6);
        this.mReleaseInProgress = 0;
        if (this.mDragState == 1) {
            this.setDragState(0);
        }
        return;
    }

    private float distanceInfluenceForSnapDuration(float p5)
    {
        return ((float) Math.sin(((double) ((float) (((double) (p5 - 1056964608)) * 0.4712389167638204)))));
    }

    private void dragTo(int p9, int p10, int p11, int p12)
    {
        int v2 = p9;
        int v3 = p10;
        int v6 = this.mCapturedView.getLeft();
        int v7 = this.mCapturedView.getTop();
        if (p11 != 0) {
            v2 = this.mCallback.clampViewPositionHorizontal(this.mCapturedView, p9, p11);
            android.support.v4.view.ViewCompat.offsetLeftAndRight(this.mCapturedView, (v2 - v6));
        }
        if (p12 != 0) {
            v3 = this.mCallback.clampViewPositionVertical(this.mCapturedView, p10, p12);
            android.support.v4.view.ViewCompat.offsetTopAndBottom(this.mCapturedView, (v3 - v7));
        }
        if ((p11 != 0) || (p12 != 0)) {
            this.mCallback.onViewPositionChanged(this.mCapturedView, v2, v3, (v2 - v6), (v3 - v7));
        }
        return;
    }

    private void ensureMotionHistorySizeForId(int p11)
    {
        if ((this.mInitialMotionX == null) || (this.mInitialMotionX.length <= p11)) {
            float[] v3 = new float[(p11 + 1)];
            float[] v4 = new float[(p11 + 1)];
            float[] v5 = new float[(p11 + 1)];
            float[] v6 = new float[(p11 + 1)];
            int[] v2 = new int[(p11 + 1)];
            int[] v0 = new int[(p11 + 1)];
            int[] v1 = new int[(p11 + 1)];
            if (this.mInitialMotionX != null) {
                System.arraycopy(this.mInitialMotionX, 0, v3, 0, this.mInitialMotionX.length);
                System.arraycopy(this.mInitialMotionY, 0, v4, 0, this.mInitialMotionY.length);
                System.arraycopy(this.mLastMotionX, 0, v5, 0, this.mLastMotionX.length);
                System.arraycopy(this.mLastMotionY, 0, v6, 0, this.mLastMotionY.length);
                System.arraycopy(this.mInitialEdgesTouched, 0, v2, 0, this.mInitialEdgesTouched.length);
                System.arraycopy(this.mEdgeDragsInProgress, 0, v0, 0, this.mEdgeDragsInProgress.length);
                System.arraycopy(this.mEdgeDragsLocked, 0, v1, 0, this.mEdgeDragsLocked.length);
            }
            this.mInitialMotionX = v3;
            this.mInitialMotionY = v4;
            this.mLastMotionX = v5;
            this.mLastMotionY = v6;
            this.mInitialEdgesTouched = v2;
            this.mEdgeDragsInProgress = v0;
            this.mEdgeDragsLocked = v1;
        }
        return;
    }

    private boolean forceSettleCapturedViewAt(int p12, int p13, int p14, int p15)
    {
        int v0_0 = 0;
        int v10 = this.mCapturedView.getLeft();
        int v6 = this.mCapturedView.getTop();
        int v2 = (p12 - v10);
        int v3 = (p13 - v6);
        if ((v2 != 0) || (v3 != 0)) {
            this.mScroller.startScroll(v10, v6, v2, v3, this.computeSettleDuration(this.mCapturedView, v2, v3, p14, p15));
            this.setDragState(2);
            v0_0 = 1;
        } else {
            this.mScroller.abortAnimation();
            this.setDragState(0);
        }
        return v0_0;
    }

    private int getEdgesTouched(int p4, int p5)
    {
        int v0 = 0;
        if (p4 < (this.mParentView.getLeft() + this.mEdgeSize)) {
            v0 = (0 | 1);
        }
        if (p5 < (this.mParentView.getTop() + this.mEdgeSize)) {
            v0 |= 4;
        }
        if (p4 > (this.mParentView.getRight() - this.mEdgeSize)) {
            v0 |= 2;
        }
        if (p5 > (this.mParentView.getBottom() - this.mEdgeSize)) {
            v0 |= 8;
        }
        return v0;
    }

    private boolean isValidPointerForActionMove(int p4)
    {
        int v0_1;
        if (this.isPointerDown(p4)) {
            v0_1 = 1;
        } else {
            android.util.Log.e("ViewDragHelper", new StringBuilder().append("Ignoring pointerId=").append(p4).append(" because ACTION_DOWN was not received ").append("for this pointer before ACTION_MOVE. It likely happened because ").append(" ViewDragHelper did not receive all the events in the event stream.").toString());
            v0_1 = 0;
        }
        return v0_1;
    }

    private void releaseViewForPointerUp()
    {
        this.mVelocityTracker.computeCurrentVelocity(1000, this.mMaxVelocity);
        this.dispatchViewReleased(this.clampMag(android.support.v4.view.VelocityTrackerCompat.getXVelocity(this.mVelocityTracker, this.mActivePointerId), this.mMinVelocity, this.mMaxVelocity), this.clampMag(android.support.v4.view.VelocityTrackerCompat.getYVelocity(this.mVelocityTracker, this.mActivePointerId), this.mMinVelocity, this.mMaxVelocity));
        return;
    }

    private void reportNewEdgeDrags(float p4, float p5, int p6)
    {
        int v0 = 0;
        if (this.checkNewEdgeDrag(p4, p5, p6, 1)) {
            v0 = (0 | 1);
        }
        if (this.checkNewEdgeDrag(p5, p4, p6, 4)) {
            v0 |= 4;
        }
        if (this.checkNewEdgeDrag(p4, p5, p6, 2)) {
            v0 |= 2;
        }
        if (this.checkNewEdgeDrag(p5, p4, p6, 8)) {
            v0 |= 8;
        }
        if (v0 != 0) {
            android.support.v4.widget.ViewDragHelper$Callback v1_5 = this.mEdgeDragsInProgress;
            v1_5[p6] = (v1_5[p6] | v0);
            this.mCallback.onEdgeDragStarted(v0, p6);
        }
        return;
    }

    private void saveInitialMotion(float p4, float p5, int p6)
    {
        this.ensureMotionHistorySizeForId(p6);
        int v0_0 = this.mInitialMotionX;
        this.mLastMotionX[p6] = p4;
        v0_0[p6] = p4;
        int v0_3 = this.mInitialMotionY;
        this.mLastMotionY[p6] = p5;
        v0_3[p6] = p5;
        this.mInitialEdgesTouched[p6] = this.getEdgesTouched(((int) p4), ((int) p5));
        this.mPointersDown = (this.mPointersDown | (1 << p6));
        return;
    }

    private void saveLastMotion(android.view.MotionEvent p7)
    {
        int v1 = p7.getPointerCount();
        int v0 = 0;
        while (v0 < v1) {
            int v2 = p7.getPointerId(v0);
            if (this.isValidPointerForActionMove(v2)) {
                float v3 = p7.getX(v0);
                float v4 = p7.getY(v0);
                this.mLastMotionX[v2] = v3;
                this.mLastMotionY[v2] = v4;
            }
            v0++;
        }
        return;
    }

    public void abort()
    {
        this.cancel();
        if (this.mDragState == 2) {
            int v6 = this.mScroller.getCurrX();
            int v7 = this.mScroller.getCurrY();
            this.mScroller.abortAnimation();
            int v2 = this.mScroller.getCurrX();
            int v3 = this.mScroller.getCurrY();
            this.mCallback.onViewPositionChanged(this.mCapturedView, v2, v3, (v2 - v6), (v3 - v7));
        }
        this.setDragState(0);
        return;
    }

    protected boolean canScroll(android.view.View p14, boolean p15, int p16, int p17, int p18, int p19)
    {
        int v1_5;
        if (!(p14 instanceof android.view.ViewGroup)) {
            if ((!p15) || ((!android.support.v4.view.ViewCompat.canScrollHorizontally(p14, (- p16))) && (!android.support.v4.view.ViewCompat.canScrollVertically(p14, (- p17))))) {
                v1_5 = 0;
            } else {
                v1_5 = 1;
            }
        } else {
            int v11 = p14.getScrollX();
            int v12 = p14.getScrollY();
            int v10 = (((android.view.ViewGroup) p14).getChildCount() - 1);
            while (v10 >= 0) {
                android.view.View v2 = ((android.view.ViewGroup) p14).getChildAt(v10);
                if (((p18 + v11) < v2.getLeft()) || (((p18 + v11) >= v2.getRight()) || (((p19 + v12) < v2.getTop()) || (((p19 + v12) >= v2.getBottom()) || (!this.canScroll(v2, 1, p16, p17, ((p18 + v11) - v2.getLeft()), ((p19 + v12) - v2.getTop()))))))) {
                    v10--;
                } else {
                    v1_5 = 1;
                }
            }
        }
        return v1_5;
    }

    public void cancel()
    {
        this.mActivePointerId = -1;
        this.clearMotionHistory();
        if (this.mVelocityTracker != null) {
            this.mVelocityTracker.recycle();
            this.mVelocityTracker = 0;
        }
        return;
    }

    public void captureChildView(android.view.View p4, int p5)
    {
        if (p4.getParent() == this.mParentView) {
            this.mCapturedView = p4;
            this.mActivePointerId = p5;
            this.mCallback.onViewCaptured(p4, p5);
            this.setDragState(1);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("captureChildView: parameter must be a descendant of the ViewDragHelper\'s tracked parent view (").append(this.mParentView).append(")").toString());
        }
    }

    public boolean checkTouchSlop(int p4)
    {
        int v1 = 0;
        while (v1 < this.mInitialMotionX.length) {
            if (!this.checkTouchSlop(p4, v1)) {
                v1++;
            } else {
                int v2_1 = 1;
            }
            return v2_1;
        }
        v2_1 = 0;
        return v2_1;
    }

    public boolean checkTouchSlop(int p10, int p11)
    {
        int v4 = 1;
        if (this.isPointerDown(p11)) {
            int v0;
            if ((p10 & 1) != 1) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            int v1;
            if ((p10 & 2) != 2) {
                v1 = 0;
            } else {
                v1 = 1;
            }
            float v2 = (this.mLastMotionX[p11] - this.mInitialMotionX[p11]);
            float v3 = (this.mLastMotionY[p11] - this.mInitialMotionY[p11]);
            if ((v0 == 0) || (v1 == 0)) {
                if (v0 == 0) {
                    if (v1 == 0) {
                        v4 = 0;
                    } else {
                        if (Math.abs(v3) <= ((float) this.mTouchSlop)) {
                            v4 = 0;
                        }
                    }
                } else {
                    if (Math.abs(v2) <= ((float) this.mTouchSlop)) {
                        v4 = 0;
                    }
                }
            } else {
                if (((v2 * v2) + (v3 * v3)) <= ((float) (this.mTouchSlop * this.mTouchSlop))) {
                    v4 = 0;
                }
            }
        } else {
            v4 = 0;
        }
        return v4;
    }

    public boolean continueSettling(boolean p10)
    {
        if (this.mDragState == 2) {
            int v6 = this.mScroller.computeScrollOffset();
            int v2 = this.mScroller.getCurrX();
            int v3 = this.mScroller.getCurrY();
            int v4 = (v2 - this.mCapturedView.getLeft());
            int v5 = (v3 - this.mCapturedView.getTop());
            if (v4 != 0) {
                android.support.v4.view.ViewCompat.offsetLeftAndRight(this.mCapturedView, v4);
            }
            if (v5 != 0) {
                android.support.v4.view.ViewCompat.offsetTopAndBottom(this.mCapturedView, v5);
            }
            if ((v4 != 0) || (v5 != 0)) {
                this.mCallback.onViewPositionChanged(this.mCapturedView, v2, v3, v4, v5);
            }
            if ((v6 != 0) && ((v2 == this.mScroller.getFinalX()) && (v3 == this.mScroller.getFinalY()))) {
                this.mScroller.abortAnimation();
                v6 = 0;
            }
            if (v6 == 0) {
                if (!p10) {
                    this.setDragState(0);
                } else {
                    this.mParentView.post(this.mSetIdleRunnable);
                }
            }
        }
        android.view.ViewGroup v0_17;
        if (this.mDragState != 2) {
            v0_17 = 0;
        } else {
            v0_17 = 1;
        }
        return v0_17;
    }

    public android.view.View findTopChildUnder(int p6, int p7)
    {
        int v2 = (this.mParentView.getChildCount() - 1);
        while (v2 >= 0) {
            int v0 = this.mParentView.getChildAt(this.mCallback.getOrderedChildIndex(v2));
            if ((p6 < v0.getLeft()) || ((p6 >= v0.getRight()) || ((p7 < v0.getTop()) || (p7 >= v0.getBottom())))) {
                v2--;
            }
            return v0;
        }
        v0 = 0;
        return v0;
    }

    public void flingCapturedView(int p10, int p11, int p12, int p13)
    {
        if (this.mReleaseInProgress) {
            this.mScroller.fling(this.mCapturedView.getLeft(), this.mCapturedView.getTop(), ((int) android.support.v4.view.VelocityTrackerCompat.getXVelocity(this.mVelocityTracker, this.mActivePointerId)), ((int) android.support.v4.view.VelocityTrackerCompat.getYVelocity(this.mVelocityTracker, this.mActivePointerId)), p10, p12, p11, p13);
            this.setDragState(2);
            return;
        } else {
            throw new IllegalStateException("Cannot flingCapturedView outside of a call to Callback#onViewReleased");
        }
    }

    public int getActivePointerId()
    {
        return this.mActivePointerId;
    }

    public android.view.View getCapturedView()
    {
        return this.mCapturedView;
    }

    public int getEdgeSize()
    {
        return this.mEdgeSize;
    }

    public float getMinVelocity()
    {
        return this.mMinVelocity;
    }

    public int getTouchSlop()
    {
        return this.mTouchSlop;
    }

    public int getViewDragState()
    {
        return this.mDragState;
    }

    public boolean isCapturedViewUnder(int p2, int p3)
    {
        return this.isViewUnder(this.mCapturedView, p2, p3);
    }

    public boolean isEdgeTouched(int p4)
    {
        int v1 = 0;
        while (v1 < this.mInitialEdgesTouched.length) {
            if (!this.isEdgeTouched(p4, v1)) {
                v1++;
            } else {
                int v2_1 = 1;
            }
            return v2_1;
        }
        v2_1 = 0;
        return v2_1;
    }

    public boolean isEdgeTouched(int p2, int p3)
    {
        if ((!this.isPointerDown(p3)) || ((this.mInitialEdgesTouched[p3] & p2) == 0)) {
            int v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    public boolean isPointerDown(int p4)
    {
        int v0 = 1;
        if ((this.mPointersDown & (1 << p4)) == 0) {
            v0 = 0;
        }
        return v0;
    }

    public boolean isViewUnder(android.view.View p3, int p4, int p5)
    {
        int v0 = 0;
        if ((p3 != null) && ((p4 >= p3.getLeft()) && ((p4 < p3.getRight()) && ((p5 >= p3.getTop()) && (p5 < p3.getBottom()))))) {
            v0 = 1;
        }
        return v0;
    }

    public void processTouchEvent(android.view.MotionEvent p22)
    {
        int v3 = android.support.v4.view.MotionEventCompat.getActionMasked(p22);
        int v4 = android.support.v4.view.MotionEventCompat.getActionIndex(p22);
        if (v3 == 0) {
            this.cancel();
        }
        if (this.mVelocityTracker == null) {
            this.mVelocityTracker = android.view.VelocityTracker.obtain();
        }
        this.mVelocityTracker.addMovement(p22);
        switch (v3) {
            case 0:
                float v17_2 = p22.getX();
                float v18_2 = p22.getY();
                int v15_2 = p22.getPointerId(0);
                android.view.View v16_2 = this.findTopChildUnder(((int) v17_2), ((int) v18_2));
                this.saveInitialMotion(v17_2, v18_2, v15_2);
                this.tryCaptureViewForDrag(v16_2, v15_2);
                int v7_1 = this.mInitialEdgesTouched[v15_2];
                if ((this.mTrackingEdges & v7_1) == 0) {
                } else {
                    this.mCallback.onEdgeTouched((this.mTrackingEdges & v7_1), v15_2);
                }
                break;
            case 1:
                if (this.mDragState == 1) {
                    this = this.releaseViewForPointerUp();
                }
                this.cancel();
                break;
            case 2:
                if (this.mDragState != 1) {
                    int v14_0 = p22.getPointerCount();
                    int v8_0 = 0;
                    while (v8_0 < v14_0) {
                        int v15_0 = p22.getPointerId(v8_0);
                        if (this.isValidPointerForActionMove(v15_0)) {
                            float v17_0 = p22.getX(v8_0);
                            float v18_0 = p22.getY(v8_0);
                            float v5 = (v17_0 - this.mInitialMotionX[v15_0]);
                            float v6 = (v18_0 - this.mInitialMotionY[v15_0]);
                            this.reportNewEdgeDrags(v5, v6, v15_0);
                            if (this.mDragState == 1) {
                                break;
                            }
                            android.view.View v16_1 = this.findTopChildUnder(((int) v17_0), ((int) v18_0));
                            if ((this.checkTouchSlop(v16_1, v5, v6)) && (this.tryCaptureViewForDrag(v16_1, v15_0))) {
                                break;
                            }
                        }
                        v8_0++;
                    }
                    this.saveLastMotion(p22);
                } else {
                    if (!this.isValidPointerForActionMove(this.mActivePointerId)) {
                    } else {
                        int v12 = p22.findPointerIndex(this.mActivePointerId);
                        int v10 = ((int) (p22.getX(v12) - this.mLastMotionX[this.mActivePointerId]));
                        int v11 = ((int) (p22.getY(v12) - this.mLastMotionY[this.mActivePointerId]));
                        this.dragTo((this.mCapturedView.getLeft() + v10), (this.mCapturedView.getTop() + v11), v10, v11);
                        this.saveLastMotion(p22);
                    }
                }
                break;
            case 3:
                if (this.mDragState == 1) {
                    this.dispatchViewReleased(0, 0);
                }
                this.cancel();
            case 4:
            default:
                break;
            case 5:
                int v15_3 = p22.getPointerId(v4);
                float v17_4 = p22.getX(v4);
                float v18_4 = p22.getY(v4);
                this.saveInitialMotion(v17_4, v18_4, v15_3);
                if (this.mDragState != 0) {
                    if (!this.isCapturedViewUnder(((int) v17_4), ((int) v18_4))) {
                    } else {
                        this.tryCaptureViewForDrag(this.mCapturedView, v15_3);
                    }
                } else {
                    this.tryCaptureViewForDrag(this.findTopChildUnder(((int) v17_4), ((int) v18_4)), v15_3);
                    int v7_0 = this.mInitialEdgesTouched[v15_3];
                    if ((this.mTrackingEdges & v7_0) == 0) {
                    } else {
                        this.mCallback.onEdgeTouched((this.mTrackingEdges & v7_0), v15_3);
                    }
                }
                break;
            case 6:
                int v15_1 = p22.getPointerId(v4);
                if ((this.mDragState == 1) && (v15_1 == this.mActivePointerId)) {
                    int v13 = -1;
                    int v14_1 = p22.getPointerCount();
                    int v8_1 = 0;
                    while (v8_1 < v14_1) {
                        int v9 = p22.getPointerId(v8_1);
                        if ((v9 == this.mActivePointerId) || ((this.findTopChildUnder(((int) p22.getX(v8_1)), ((int) p22.getY(v8_1))) != this.mCapturedView) || (!this.tryCaptureViewForDrag(this.mCapturedView, v9)))) {
                            v8_1++;
                        } else {
                            v13 = this.mActivePointerId;
                            break;
                        }
                    }
                    if (v13 == -1) {
                        this = this.releaseViewForPointerUp();
                    }
                }
                this.clearMotionHistory(v15_1);
                break;
        }
        return;
    }

    void setDragState(int p3)
    {
        this.mParentView.removeCallbacks(this.mSetIdleRunnable);
        if (this.mDragState != p3) {
            this.mDragState = p3;
            this.mCallback.onViewDragStateChanged(p3);
            if (this.mDragState == 0) {
                this.mCapturedView = 0;
            }
        }
        return;
    }

    public void setEdgeTrackingEnabled(int p1)
    {
        this.mTrackingEdges = p1;
        return;
    }

    public void setMinVelocity(float p1)
    {
        this.mMinVelocity = p1;
        return;
    }

    public boolean settleCapturedViewAt(int p4, int p5)
    {
        if (this.mReleaseInProgress) {
            return this.forceSettleCapturedViewAt(p4, p5, ((int) android.support.v4.view.VelocityTrackerCompat.getXVelocity(this.mVelocityTracker, this.mActivePointerId)), ((int) android.support.v4.view.VelocityTrackerCompat.getYVelocity(this.mVelocityTracker, this.mActivePointerId)));
        } else {
            throw new IllegalStateException("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");
        }
    }

    public boolean shouldInterceptTouchEvent(android.view.MotionEvent p27)
    {
        int v4 = android.support.v4.view.MotionEventCompat.getActionMasked(p27);
        int v5 = android.support.v4.view.MotionEventCompat.getActionIndex(p27);
        if (v4 == 0) {
            this.cancel();
        }
        if (this.mVelocityTracker == null) {
            this.mVelocityTracker = android.view.VelocityTracker.obtain();
        }
        this.mVelocityTracker.addMovement(p27);
        switch (v4) {
            case 0:
                float v22_1 = p27.getX();
                float v23_1 = p27.getY();
                int v17_1 = p27.getPointerId(0);
                this.saveInitialMotion(v22_1, v23_1, v17_1);
                android.view.View v20_1 = this.findTopChildUnder(((int) v22_1), ((int) v23_1));
                if ((v20_1 == this.mCapturedView) && (this.mDragState == 2)) {
                    this.tryCaptureViewForDrag(v20_1, v17_1);
                }
                int v8_0 = this.mInitialEdgesTouched[v17_1];
                if ((this.mTrackingEdges & v8_0) == 0) {
                } else {
                    this.mCallback.onEdgeTouched((this.mTrackingEdges & v8_0), v17_1);
                }
                break;
            case 1:
            case 3:
                this.cancel();
                break;
            case 2:
                if ((this.mInitialMotionX == null) || (this.mInitialMotionY == null)) {
                } else {
                    int v16 = p27.getPointerCount();
                    int v10 = 0;
                    while (v10 < v16) {
                        int v17_0 = p27.getPointerId(v10);
                        if (this.isValidPointerForActionMove(v17_0)) {
                            int v15;
                            float v22_0 = p27.getX(v10);
                            float v23_0 = p27.getY(v10);
                            float v6 = (v22_0 - this.mInitialMotionX[v17_0]);
                            float v7 = (v23_0 - this.mInitialMotionY[v17_0]);
                            android.view.View v20_0 = this.findTopChildUnder(((int) v22_0), ((int) v23_0));
                            if ((v20_0 == null) || (!this.checkTouchSlop(v20_0, v6, v7))) {
                                v15 = 0;
                            } else {
                                v15 = 1;
                            }
                            if (v15 != 0) {
                                int v13 = v20_0.getLeft();
                                int v11 = this.mCallback.clampViewPositionHorizontal(v20_0, (v13 + ((int) v6)), ((int) v6));
                                int v14 = v20_0.getTop();
                                int v12 = this.mCallback.clampViewPositionVertical(v20_0, (v14 + ((int) v7)), ((int) v7));
                                int v9 = this.mCallback.getViewHorizontalDragRange(v20_0);
                                int v21 = this.mCallback.getViewVerticalDragRange(v20_0);
                                if (((v9 == 0) || ((v9 > 0) && (v11 == v13))) && ((v21 == 0) || ((v21 > 0) && (v12 == v14)))) {
                                    break;
                                }
                            }
                            this.reportNewEdgeDrags(v6, v7, v17_0);
                            if ((this.mDragState == 1) || ((v15 != 0) && (this.tryCaptureViewForDrag(v20_0, v17_0)))) {
                                break;
                            }
                        }
                        v10++;
                    }
                    this = this.saveLastMotion(p27);
                }
                break;
            case 4:
            default:
                break;
            case 5:
                int v17_3 = p27.getPointerId(v5);
                float v22_2 = p27.getX(v5);
                float v23_2 = p27.getY(v5);
                this.saveInitialMotion(v22_2, v23_2, v17_3);
                if (this.mDragState != 0) {
                    if (this.mDragState != 2) {
                    } else {
                        android.view.View v20_2 = this.findTopChildUnder(((int) v22_2), ((int) v23_2));
                        if (v20_2 != this.mCapturedView) {
                        } else {
                            this.tryCaptureViewForDrag(v20_2, v17_3);
                        }
                    }
                } else {
                    int v8_1 = this.mInitialEdgesTouched[v17_3];
                    if ((this.mTrackingEdges & v8_1) == 0) {
                    } else {
                        this.mCallback.onEdgeTouched((this.mTrackingEdges & v8_1), v17_3);
                    }
                }
                break;
            case 6:
                this.clearMotionHistory(p27.getPointerId(v5));
                break;
        }
        boolean v24_27;
        if (this.mDragState != 1) {
            v24_27 = 0;
        } else {
            v24_27 = 1;
        }
        return v24_27;
    }

    public boolean smoothSlideViewTo(android.view.View p4, int p5, int p6)
    {
        this.mCapturedView = p4;
        this.mActivePointerId = -1;
        boolean v0 = this.forceSettleCapturedViewAt(p5, p6, 0, 0);
        if ((!v0) && ((this.mDragState == 0) && (this.mCapturedView != null))) {
            this.mCapturedView = 0;
        }
        return v0;
    }

    boolean tryCaptureViewForDrag(android.view.View p3, int p4)
    {
        int v0 = 1;
        if ((p3 != this.mCapturedView) || (this.mActivePointerId != p4)) {
            if ((p3 == null) || (!this.mCallback.tryCaptureView(p3, p4))) {
                v0 = 0;
            } else {
                this.mActivePointerId = p4;
                this.captureChildView(p3, p4);
            }
        }
        return v0;
    }
}
package android.bluetooth;
 class IBluetooth$Stub$Proxy implements android.bluetooth.IBluetooth {
    private android.os.IBinder mRemote;

    IBluetooth$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public String getInterfaceDescriptor()
    {
        return "android.bluetooth.IBluetooth";
    }

    public String getRemoteAlias(String p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetooth");
            v0.writeString(p7);
            this.mRemote.transact(1, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public boolean setRemoteAlias(String p7, String p8)
    {
        int v2 = 0;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetooth");
            v0.writeString(p7);
            v0.writeString(p8);
            this.mRemote.transact(2, v0, v1, 0);
            v1.readException();
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (v1.readInt() != 0) {
            v2 = 1;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }
}
package android.bluetooth;
public abstract class IBluetooth$Stub extends android.os.Binder implements android.bluetooth.IBluetooth {
    private static final String DESCRIPTOR = "android.bluetooth.IBluetooth";
    static final int TRANSACTION_getRemoteAlias = 1;
    static final int TRANSACTION_setRemoteAlias = 2;

    public IBluetooth$Stub()
    {
        this.attachInterface(this, "android.bluetooth.IBluetooth");
        return;
    }

    public static android.bluetooth.IBluetooth asInterface(android.os.IBinder p2)
    {
        android.bluetooth.IBluetooth v0_0;
        if (p2 != null) {
            android.bluetooth.IBluetooth v0_1 = p2.queryLocalInterface("android.bluetooth.IBluetooth");
            if ((v0_1 == null) || (!(v0_1 instanceof android.bluetooth.IBluetooth))) {
                v0_0 = new android.bluetooth.IBluetooth$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.bluetooth.IBluetooth) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p6, android.os.Parcel p7, android.os.Parcel p8, int p9)
    {
        boolean v4 = 1;
        switch (p6) {
            case 1:
                p7.enforceInterface("android.bluetooth.IBluetooth");
                boolean v2_1 = this.getRemoteAlias(p7.readString());
                p8.writeNoException();
                p8.writeString(v2_1);
                break;
            case 2:
                int v3_0;
                p7.enforceInterface("android.bluetooth.IBluetooth");
                boolean v2_0 = this.setRemoteAlias(p7.readString(), p7.readString());
                p8.writeNoException();
                if (!v2_0) {
                    v3_0 = 0;
                } else {
                    v3_0 = 1;
                }
                p8.writeInt(v3_0);
                break;
            case 1598968902:
                p8.writeString("android.bluetooth.IBluetooth");
                break;
            default:
                v4 = super.onTransact(p6, p7, p8, p9);
        }
        return v4;
    }
}
package android.bluetooth;
 class IBluetoothA2dp$Stub$Proxy implements android.bluetooth.IBluetoothA2dp {
    private android.os.IBinder mRemote;

    IBluetoothA2dp$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public boolean connect(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(3, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean connectSink(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(1, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean disconnect(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(4, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean disconnectSink(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(2, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public android.bluetooth.BluetoothDevice[] getConnectedSinks()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
            this.mRemote.transact(7, v0, v1, 0);
            v1.readException();
            android.bluetooth.BluetoothDevice[] v2_1 = ((android.bluetooth.BluetoothDevice[]) v1.createTypedArray(android.bluetooth.BluetoothDevice.CREATOR));
            v1.recycle();
            v0.recycle();
            return v2_1;
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
    }

    public int getConnectionState(android.bluetooth.BluetoothDevice p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (android.os.IBinder v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(10, v0, v1, 0);
        v1.readException();
        int v2 = v1.readInt();
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public String getInterfaceDescriptor()
    {
        return "android.bluetooth.IBluetoothA2dp";
    }

    public android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
            this.mRemote.transact(8, v0, v1, 0);
            v1.readException();
            android.bluetooth.BluetoothDevice[] v2_1 = ((android.bluetooth.BluetoothDevice[]) v1.createTypedArray(android.bluetooth.BluetoothDevice.CREATOR));
            v1.recycle();
            v0.recycle();
            return v2_1;
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
    }

    public int getPriority(android.bluetooth.BluetoothDevice p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (android.os.IBinder v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(13, v0, v1, 0);
        v1.readException();
        int v2 = v1.readInt();
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public int getSinkPriority(android.bluetooth.BluetoothDevice p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (android.os.IBinder v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(14, v0, v1, 0);
        v1.readException();
        int v2 = v1.readInt();
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public int getSinkState(android.bluetooth.BluetoothDevice p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (android.os.IBinder v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(9, v0, v1, 0);
        v1.readException();
        int v2 = v1.readInt();
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean isA2dpPlaying(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(15, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean resumeSink(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(6, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean setPriority(android.bluetooth.BluetoothDevice p8, int p9)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        v0.writeInt(p9);
        this.mRemote.transact(12, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean setSinkPriority(android.bluetooth.BluetoothDevice p8, int p9)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        v0.writeInt(p9);
        this.mRemote.transact(11, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public boolean suspendSink(android.bluetooth.BluetoothDevice p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.bluetooth.IBluetoothA2dp");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(5, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }
}
package android.bluetooth;
public abstract class IBluetoothA2dp$Stub extends android.os.Binder implements android.bluetooth.IBluetoothA2dp {
    private static final String DESCRIPTOR = "android.bluetooth.IBluetoothA2dp";
    static final int TRANSACTION_connect = 3;
    static final int TRANSACTION_connectSink = 1;
    static final int TRANSACTION_disconnect = 4;
    static final int TRANSACTION_disconnectSink = 2;
    static final int TRANSACTION_getConnectedSinks = 7;
    static final int TRANSACTION_getConnectionState = 10;
    static final int TRANSACTION_getNonDisconnectedSinks = 8;
    static final int TRANSACTION_getPriority = 13;
    static final int TRANSACTION_getSinkPriority = 14;
    static final int TRANSACTION_getSinkState = 9;
    static final int TRANSACTION_isA2dpPlaying = 15;
    static final int TRANSACTION_resumeSink = 6;
    static final int TRANSACTION_setPriority = 12;
    static final int TRANSACTION_setSinkPriority = 11;
    static final int TRANSACTION_suspendSink = 5;

    public IBluetoothA2dp$Stub()
    {
        this.attachInterface(this, "android.bluetooth.IBluetoothA2dp");
        return;
    }

    public static android.bluetooth.IBluetoothA2dp asInterface(android.os.IBinder p2)
    {
        android.bluetooth.IBluetoothA2dp v0_0;
        if (p2 != null) {
            android.bluetooth.IBluetoothA2dp v0_1 = p2.queryLocalInterface("android.bluetooth.IBluetoothA2dp");
            if ((v0_1 == null) || (!(v0_1 instanceof android.bluetooth.IBluetoothA2dp))) {
                v0_0 = new android.bluetooth.IBluetoothA2dp$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.bluetooth.IBluetoothA2dp) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p7, android.os.Parcel p8, android.os.Parcel p9, int p10)
    {
        boolean v3_0 = 0;
        boolean v4 = 1;
        switch (p7) {
            case 1:
                int v0_14;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_14 = 0;
                } else {
                    v0_14 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_9 = this.connectSink(v0_14);
                p9.writeNoException();
                if (v2_9) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 2:
                int v0_12;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_12 = 0;
                } else {
                    v0_12 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_8 = this.disconnectSink(v0_12);
                p9.writeNoException();
                if (v2_8) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 3:
                int v0_10;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_10 = 0;
                } else {
                    v0_10 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_7 = this.connect(v0_10);
                p9.writeNoException();
                if (v2_7) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 4:
                int v0_8;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_8 = 0;
                } else {
                    v0_8 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_6 = this.disconnect(v0_8);
                p9.writeNoException();
                if (v2_6) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 5:
                int v0_6;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_6 = 0;
                } else {
                    v0_6 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_4 = this.suspendSink(v0_6);
                p9.writeNoException();
                if (v2_4) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 6:
                int v0_4;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_4 = 0;
                } else {
                    v0_4 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_3 = this.resumeSink(v0_4);
                p9.writeNoException();
                if (v2_3) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 7:
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                boolean v2_2 = this.getConnectedSinks();
                p9.writeNoException();
                p9.writeTypedArray(v2_2, 1);
                break;
            case 8:
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                boolean v2_1 = this.getNonDisconnectedSinks();
                p9.writeNoException();
                p9.writeTypedArray(v2_1, 1);
                break;
            case 9:
                int v0_1;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_1 = 0;
                } else {
                    v0_1 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_0 = this.getSinkState(v0_1);
                p9.writeNoException();
                p9.writeInt(v2_0);
                break;
            case 10:
                int v0_24;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_24 = 0;
                } else {
                    v0_24 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_14 = this.getConnectionState(v0_24);
                p9.writeNoException();
                p9.writeInt(v2_14);
                break;
            case 11:
                int v0_22;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_22 = 0;
                } else {
                    v0_22 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_13 = this.setSinkPriority(v0_22, p8.readInt());
                p9.writeNoException();
                if (v2_13) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 12:
                int v0_20;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_20 = 0;
                } else {
                    v0_20 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_12 = this.setPriority(v0_20, p8.readInt());
                p9.writeNoException();
                if (v2_12) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 13:
                int v0_18;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_18 = 0;
                } else {
                    v0_18 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_11 = this.getPriority(v0_18);
                p9.writeNoException();
                p9.writeInt(v2_11);
                break;
            case 14:
                int v0_16;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_16 = 0;
                } else {
                    v0_16 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_10 = this.getSinkPriority(v0_16);
                p9.writeNoException();
                p9.writeInt(v2_10);
                break;
            case 15:
                int v0_0;
                p8.enforceInterface("android.bluetooth.IBluetoothA2dp");
                if (p8.readInt() == 0) {
                    v0_0 = 0;
                } else {
                    v0_0 = ((android.bluetooth.BluetoothDevice) android.bluetooth.BluetoothDevice.CREATOR.createFromParcel(p8));
                }
                boolean v2_5 = this.isA2dpPlaying(v0_0);
                p9.writeNoException();
                if (v2_5) {
                    v3_0 = 1;
                }
                p9.writeInt(v3_0);
                break;
            case 1598968902:
                p9.writeString("android.bluetooth.IBluetoothA2dp");
                break;
            default:
                v4 = super.onTransact(p7, p8, p9, p10);
        }
        return v4;
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl implements android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl {

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl()
    {
        return;
    }

    public boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getDescription(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getId(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return 0;
    }

    public String loadDescription(android.accessibilityservice.AccessibilityServiceInfo p2, android.content.pm.PackageManager p3)
    {
        return 0;
    }
}
package android.support.v4.animation;
 class GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator implements android.support.v4.animation.ValueAnimatorCompat {
    private long mDuration;
    private boolean mEnded;
    private float mFraction;
    java.util.List mListeners;
    private Runnable mLoopRunnable;
    private long mStartTime;
    private boolean mStarted;
    android.view.View mTarget;
    java.util.List mUpdateListeners;

    public GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator()
    {
        this.mListeners = new java.util.ArrayList();
        this.mUpdateListeners = new java.util.ArrayList();
        this.mDuration = 200;
        this.mFraction = 0;
        this.mStarted = 0;
        this.mEnded = 0;
        this.mLoopRunnable = new android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator$1(this);
        return;
    }

    static synthetic long access$000(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p2)
    {
        return p2.getTime();
    }

    static synthetic long access$100(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p2)
    {
        return p2.mStartTime;
    }

    static synthetic long access$200(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p2)
    {
        return p2.mDuration;
    }

    static synthetic float access$300(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p1)
    {
        return p1.mFraction;
    }

    static synthetic float access$302(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p0, float p1)
    {
        p0.mFraction = p1;
        return p1;
    }

    static synthetic void access$400(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p0)
    {
        p0.notifyUpdateListeners();
        return;
    }

    static synthetic void access$500(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p0)
    {
        p0.dispatchEnd();
        return;
    }

    static synthetic Runnable access$600(android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator p1)
    {
        return p1.mLoopRunnable;
    }

    private void dispatchCancel()
    {
        int v0 = (this.mListeners.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.animation.AnimatorListenerCompat) this.mListeners.get(v0)).onAnimationCancel(this);
            v0--;
        }
        return;
    }

    private void dispatchEnd()
    {
        int v0 = (this.mListeners.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.animation.AnimatorListenerCompat) this.mListeners.get(v0)).onAnimationEnd(this);
            v0--;
        }
        return;
    }

    private void dispatchStart()
    {
        int v0 = (this.mListeners.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.animation.AnimatorListenerCompat) this.mListeners.get(v0)).onAnimationStart(this);
            v0--;
        }
        return;
    }

    private long getTime()
    {
        return this.mTarget.getDrawingTime();
    }

    private void notifyUpdateListeners()
    {
        int v0 = (this.mUpdateListeners.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.animation.AnimatorUpdateListenerCompat) this.mUpdateListeners.get(v0)).onAnimationUpdate(this);
            v0--;
        }
        return;
    }

    public void addListener(android.support.v4.animation.AnimatorListenerCompat p2)
    {
        this.mListeners.add(p2);
        return;
    }

    public void addUpdateListener(android.support.v4.animation.AnimatorUpdateListenerCompat p2)
    {
        this.mUpdateListeners.add(p2);
        return;
    }

    public void cancel()
    {
        if (!this.mEnded) {
            this.mEnded = 1;
            if (this.mStarted) {
                this.dispatchCancel();
            }
            this.dispatchEnd();
        }
        return;
    }

    public float getAnimatedFraction()
    {
        return this.mFraction;
    }

    public void setDuration(long p2)
    {
        if (!this.mStarted) {
            this.mDuration = p2;
        }
        return;
    }

    public void setTarget(android.view.View p1)
    {
        this.mTarget = p1;
        return;
    }

    public void start()
    {
        if (!this.mStarted) {
            this.mStarted = 1;
            this.dispatchStart();
            this.mFraction = 0;
            this.mStartTime = this.getTime();
            this.mTarget.postDelayed(this.mLoopRunnable, 16);
        }
        return;
    }
}
package android.support.v4.animation;
 class GingerbreadAnimatorCompatProvider implements android.support.v4.animation.AnimatorProvider {

    GingerbreadAnimatorCompatProvider()
    {
        return;
    }

    public void clearInterpolator(android.view.View p1)
    {
        return;
    }

    public android.support.v4.animation.ValueAnimatorCompat emptyValueAnimator()
    {
        return new android.support.v4.animation.GingerbreadAnimatorCompatProvider$GingerbreadFloatValueAnimator();
    }
}
package android.support.v4.animation;
 class HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat implements android.support.v4.animation.ValueAnimatorCompat {
    final android.animation.Animator mWrapped;

    public HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat(android.animation.Animator p1)
    {
        this.mWrapped = p1;
        return;
    }

    public void addListener(android.support.v4.animation.AnimatorListenerCompat p3)
    {
        this.mWrapped.addListener(new android.support.v4.animation.HoneycombMr1AnimatorCompatProvider$AnimatorListenerCompatWrapper(p3, this));
        return;
    }

    public void addUpdateListener(android.support.v4.animation.AnimatorUpdateListenerCompat p3)
    {
        if ((this.mWrapped instanceof android.animation.ValueAnimator)) {
            ((android.animation.ValueAnimator) this.mWrapped).addUpdateListener(new android.support.v4.animation.HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat$1(this, p3));
        }
        return;
    }

    public void cancel()
    {
        this.mWrapped.cancel();
        return;
    }

    public float getAnimatedFraction()
    {
        return ((android.animation.ValueAnimator) this.mWrapped).getAnimatedFraction();
    }

    public void setDuration(long p2)
    {
        this.mWrapped.setDuration(p2);
        return;
    }

    public void setTarget(android.view.View p2)
    {
        this.mWrapped.setTarget(p2);
        return;
    }

    public void start()
    {
        this.mWrapped.start();
        return;
    }
}
package android.support.v4.animation;
 class HoneycombMr1AnimatorCompatProvider implements android.support.v4.animation.AnimatorProvider {
    private android.animation.TimeInterpolator mDefaultInterpolator;

    HoneycombMr1AnimatorCompatProvider()
    {
        return;
    }

    public void clearInterpolator(android.view.View p3)
    {
        if (this.mDefaultInterpolator == null) {
            this.mDefaultInterpolator = new android.animation.ValueAnimator().getInterpolator();
        }
        p3.animate().setInterpolator(this.mDefaultInterpolator);
        return;
    }

    public android.support.v4.animation.ValueAnimatorCompat emptyValueAnimator()
    {
        android.animation.ValueAnimator v1_1 = new float[2];
        v1_1 = {0, 1065353216};
        return new android.support.v4.animation.HoneycombMr1AnimatorCompatProvider$HoneycombValueAnimatorCompat(android.animation.ValueAnimator.ofFloat(v1_1));
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggle$ActionBarDrawerToggleImplBase implements android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl {

    ActionBarDrawerToggle$ActionBarDrawerToggleImplBase()
    {
        return;
    }

    public android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity p2)
    {
        return 0;
    }

    public Object setActionBarDescription(Object p1, android.app.Activity p2, int p3)
    {
        return p1;
    }

    public Object setActionBarUpIndicator(Object p1, android.app.Activity p2, android.graphics.drawable.Drawable p3, int p4)
    {
        return p1;
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggle$ActionBarDrawerToggleImplHC implements android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl {

    ActionBarDrawerToggle$ActionBarDrawerToggleImplHC()
    {
        return;
    }

    public android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity p2)
    {
        return android.support.v4.app.ActionBarDrawerToggleHoneycomb.getThemeUpIndicator(p2);
    }

    public Object setActionBarDescription(Object p2, android.app.Activity p3, int p4)
    {
        return android.support.v4.app.ActionBarDrawerToggleHoneycomb.setActionBarDescription(p2, p3, p4);
    }

    public Object setActionBarUpIndicator(Object p2, android.app.Activity p3, android.graphics.drawable.Drawable p4, int p5)
    {
        return android.support.v4.app.ActionBarDrawerToggleHoneycomb.setActionBarUpIndicator(p2, p3, p4, p5);
    }
}
package android.support.v4.app;
 class ActionBarDrawerToggle$ActionBarDrawerToggleImplJellybeanMR2 implements android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl {

    ActionBarDrawerToggle$ActionBarDrawerToggleImplJellybeanMR2()
    {
        return;
    }

    public android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity p2)
    {
        return android.support.v4.app.ActionBarDrawerToggleJellybeanMR2.getThemeUpIndicator(p2);
    }

    public Object setActionBarDescription(Object p2, android.app.Activity p3, int p4)
    {
        return android.support.v4.app.ActionBarDrawerToggleJellybeanMR2.setActionBarDescription(p2, p3, p4);
    }

    public Object setActionBarUpIndicator(Object p2, android.app.Activity p3, android.graphics.drawable.Drawable p4, int p5)
    {
        return android.support.v4.app.ActionBarDrawerToggleJellybeanMR2.setActionBarUpIndicator(p2, p3, p4, p5);
    }
}
package android.support.v4.app;
public class ActionBarDrawerToggle implements android.support.v4.widget.DrawerLayout$DrawerListener {
    private static final int ID_HOME = 16908332;
    private static final android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl IMPL = None;
    private static final float TOGGLE_DRAWABLE_OFFSET = 1051372203;
    final android.app.Activity mActivity;
    private final android.support.v4.app.ActionBarDrawerToggle$Delegate mActivityImpl;
    private final int mCloseDrawerContentDescRes;
    private android.graphics.drawable.Drawable mDrawerImage;
    private final int mDrawerImageResource;
    private boolean mDrawerIndicatorEnabled;
    private final android.support.v4.widget.DrawerLayout mDrawerLayout;
    private boolean mHasCustomUpIndicator;
    private android.graphics.drawable.Drawable mHomeAsUpIndicator;
    private final int mOpenDrawerContentDescRes;
    private Object mSetIndicatorInfo;
    private android.support.v4.app.ActionBarDrawerToggle$SlideDrawable mSlider;

    static ActionBarDrawerToggle()
    {
        int v0 = android.os.Build$VERSION.SDK_INT;
        if (v0 < 18) {
            if (v0 < 11) {
                android.support.v4.app.ActionBarDrawerToggle.IMPL = new android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplBase();
            } else {
                android.support.v4.app.ActionBarDrawerToggle.IMPL = new android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplHC();
            }
        } else {
            android.support.v4.app.ActionBarDrawerToggle.IMPL = new android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplJellybeanMR2();
        }
        return;
    }

    public ActionBarDrawerToggle(android.app.Activity p8, android.support.v4.widget.DrawerLayout p9, int p10, int p11, int p12)
    {
        int v3;
        if (android.support.v4.app.ActionBarDrawerToggle.assumeMaterial(p8)) {
            v3 = 0;
        } else {
            v3 = 1;
        }
        this(p8, p9, v3, p10, p11, p12);
        return;
    }

    public ActionBarDrawerToggle(android.app.Activity p3, android.support.v4.widget.DrawerLayout p4, boolean p5, int p6, int p7, int p8)
    {
        this.mDrawerIndicatorEnabled = 1;
        this.mActivity = p3;
        if (!(p3 instanceof android.support.v4.app.ActionBarDrawerToggle$DelegateProvider)) {
            this.mActivityImpl = 0;
        } else {
            this.mActivityImpl = ((android.support.v4.app.ActionBarDrawerToggle$DelegateProvider) p3).getDrawerToggleDelegate();
        }
        int v0_6;
        this.mDrawerLayout = p4;
        this.mDrawerImageResource = p6;
        this.mOpenDrawerContentDescRes = p7;
        this.mCloseDrawerContentDescRes = p8;
        this.mHomeAsUpIndicator = this.getThemeUpIndicator();
        this.mDrawerImage = android.support.v4.content.ContextCompat.getDrawable(p3, p6);
        this.mSlider = new android.support.v4.app.ActionBarDrawerToggle$SlideDrawable(this, this.mDrawerImage);
        if (!p5) {
            v0_6 = 0;
        } else {
            v0_6 = 1051372203;
        }
        this.mSlider.setOffset(v0_6);
        return;
    }

    private static boolean assumeMaterial(android.content.Context p2)
    {
        if ((p2.getApplicationInfo().targetSdkVersion < 21) || (android.os.Build$VERSION.SDK_INT < 21)) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    android.graphics.drawable.Drawable getThemeUpIndicator()
    {
        android.graphics.drawable.Drawable v0_2;
        if (this.mActivityImpl == null) {
            v0_2 = android.support.v4.app.ActionBarDrawerToggle.IMPL.getThemeUpIndicator(this.mActivity);
        } else {
            v0_2 = this.mActivityImpl.getThemeUpIndicator();
        }
        return v0_2;
    }

    public boolean isDrawerIndicatorEnabled()
    {
        return this.mDrawerIndicatorEnabled;
    }

    public void onConfigurationChanged(android.content.res.Configuration p3)
    {
        if (!this.mHasCustomUpIndicator) {
            this.mHomeAsUpIndicator = this.getThemeUpIndicator();
        }
        this.mDrawerImage = android.support.v4.content.ContextCompat.getDrawable(this.mActivity, this.mDrawerImageResource);
        this.syncState();
        return;
    }

    public void onDrawerClosed(android.view.View p3)
    {
        this.mSlider.setPosition(0);
        if (this.mDrawerIndicatorEnabled) {
            this.setActionBarDescription(this.mOpenDrawerContentDescRes);
        }
        return;
    }

    public void onDrawerOpened(android.view.View p3)
    {
        this.mSlider.setPosition(1065353216);
        if (this.mDrawerIndicatorEnabled) {
            this.setActionBarDescription(this.mCloseDrawerContentDescRes);
        }
        return;
    }

    public void onDrawerSlide(android.view.View p5, float p6)
    {
        float v0_0;
        float v0_1 = this.mSlider.getPosition();
        if (p6 <= 1056964608) {
            v0_0 = Math.min(v0_1, (p6 * 1073741824));
        } else {
            v0_0 = Math.max(v0_1, (Math.max(0, (p6 - 1056964608)) * 1073741824));
        }
        this.mSlider.setPosition(v0_0);
        return;
    }

    public void onDrawerStateChanged(int p1)
    {
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p4)
    {
        if ((p4 == null) || ((p4.getItemId() != 16908332) || (!this.mDrawerIndicatorEnabled))) {
            int v0_3 = 0;
        } else {
            if (!this.mDrawerLayout.isDrawerVisible(8388611)) {
                this.mDrawerLayout.openDrawer(8388611);
            } else {
                this.mDrawerLayout.closeDrawer(8388611);
            }
            v0_3 = 1;
        }
        return v0_3;
    }

    void setActionBarDescription(int p4)
    {
        if (this.mActivityImpl == null) {
            this.mSetIndicatorInfo = android.support.v4.app.ActionBarDrawerToggle.IMPL.setActionBarDescription(this.mSetIndicatorInfo, this.mActivity, p4);
        } else {
            this.mActivityImpl.setActionBarDescription(p4);
        }
        return;
    }

    void setActionBarUpIndicator(android.graphics.drawable.Drawable p4, int p5)
    {
        if (this.mActivityImpl == null) {
            this.mSetIndicatorInfo = android.support.v4.app.ActionBarDrawerToggle.IMPL.setActionBarUpIndicator(this.mSetIndicatorInfo, this.mActivity, p4, p5);
        } else {
            this.mActivityImpl.setActionBarUpIndicator(p4, p5);
        }
        return;
    }

    public void setDrawerIndicatorEnabled(boolean p4)
    {
        if (p4 != this.mDrawerIndicatorEnabled) {
            if (!p4) {
                this.setActionBarUpIndicator(this.mHomeAsUpIndicator, 0);
            } else {
                int v0_2;
                if (!this.mDrawerLayout.isDrawerOpen(8388611)) {
                    v0_2 = this.mOpenDrawerContentDescRes;
                } else {
                    v0_2 = this.mCloseDrawerContentDescRes;
                }
                this.setActionBarUpIndicator(this.mSlider, v0_2);
            }
            this.mDrawerIndicatorEnabled = p4;
        }
        return;
    }

    public void setHomeAsUpIndicator(int p3)
    {
        android.graphics.drawable.Drawable v0 = 0;
        if (p3 != 0) {
            v0 = android.support.v4.content.ContextCompat.getDrawable(this.mActivity, p3);
        }
        this.setHomeAsUpIndicator(v0);
        return;
    }

    public void setHomeAsUpIndicator(android.graphics.drawable.Drawable p3)
    {
        if (p3 != null) {
            this.mHomeAsUpIndicator = p3;
            this.mHasCustomUpIndicator = 1;
        } else {
            this.mHomeAsUpIndicator = this.getThemeUpIndicator();
            this.mHasCustomUpIndicator = 0;
        }
        if (!this.mDrawerIndicatorEnabled) {
            this.setActionBarUpIndicator(this.mHomeAsUpIndicator, 0);
        }
        return;
    }

    public void syncState()
    {
        if (!this.mDrawerLayout.isDrawerOpen(8388611)) {
            this.mSlider.setPosition(0);
        } else {
            this.mSlider.setPosition(1065353216);
        }
        if (this.mDrawerIndicatorEnabled) {
            int v0_4;
            if (!this.mDrawerLayout.isDrawerOpen(8388611)) {
                v0_4 = this.mOpenDrawerContentDescRes;
            } else {
                v0_4 = this.mCloseDrawerContentDescRes;
            }
            this.setActionBarUpIndicator(this.mSlider, v0_4);
        }
        return;
    }
}
package android.support.v4.app;
 class ActivityCompat$SharedElementCallback21Impl extends android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 {
    private android.support.v4.app.SharedElementCallback mCallback;

    public ActivityCompat$SharedElementCallback21Impl(android.support.v4.app.SharedElementCallback p1)
    {
        this.mCallback = p1;
        return;
    }

    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View p2, android.graphics.Matrix p3, android.graphics.RectF p4)
    {
        return this.mCallback.onCaptureSharedElementSnapshot(p2, p3, p4);
    }

    public android.view.View onCreateSnapshotView(android.content.Context p2, android.os.Parcelable p3)
    {
        return this.mCallback.onCreateSnapshotView(p2, p3);
    }

    public void onMapSharedElements(java.util.List p2, java.util.Map p3)
    {
        this.mCallback.onMapSharedElements(p2, p3);
        return;
    }

    public void onRejectSharedElements(java.util.List p2)
    {
        this.mCallback.onRejectSharedElements(p2);
        return;
    }

    public void onSharedElementEnd(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementEnd(p2, p3, p4);
        return;
    }

    public void onSharedElementStart(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementStart(p2, p3, p4);
        return;
    }
}
package android.support.v4.app;
 class ActivityCompat$SharedElementCallback23Impl$1 implements android.support.v4.app.SharedElementCallback$OnSharedElementsReadyListener {
    final synthetic android.support.v4.app.ActivityCompat$SharedElementCallback23Impl this$0;
    final synthetic android.support.v4.app.ActivityCompatApi23$OnSharedElementsReadyListenerBridge val$listener;

    ActivityCompat$SharedElementCallback23Impl$1(android.support.v4.app.ActivityCompat$SharedElementCallback23Impl p1, android.support.v4.app.ActivityCompatApi23$OnSharedElementsReadyListenerBridge p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onSharedElementsReady()
    {
        this.val$listener.onSharedElementsReady();
        return;
    }
}
package android.support.v4.app;
public class ActivityCompat extends android.support.v4.content.ContextCompat {

    protected ActivityCompat()
    {
        return;
    }

    private static android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 createCallback(android.support.v4.app.SharedElementCallback p1)
    {
        android.support.v4.app.ActivityCompat$SharedElementCallback21Impl v0_0 = 0;
        if (p1 != null) {
            v0_0 = new android.support.v4.app.ActivityCompat$SharedElementCallback21Impl(p1);
        }
        return v0_0;
    }

    private static android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 createCallback23(android.support.v4.app.SharedElementCallback p1)
    {
        android.support.v4.app.ActivityCompat$SharedElementCallback23Impl v0_0 = 0;
        if (p1 != null) {
            v0_0 = new android.support.v4.app.ActivityCompat$SharedElementCallback23Impl(p1);
        }
        return v0_0;
    }

    public static void finishAffinity(android.app.Activity p2)
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            p2.finish();
        } else {
            android.support.v4.app.ActivityCompatJB.finishAffinity(p2);
        }
        return;
    }

    public static void finishAfterTransition(android.app.Activity p2)
    {
        if (android.os.Build$VERSION.SDK_INT < 21) {
            p2.finish();
        } else {
            android.support.v4.app.ActivityCompatApi21.finishAfterTransition(p2);
        }
        return;
    }

    public static android.net.Uri getReferrer(android.app.Activity p5)
    {
        int v1_0;
        if (android.os.Build$VERSION.SDK_INT < 22) {
            android.content.Intent v0 = p5.getIntent();
            v1_0 = ((android.net.Uri) v0.getParcelableExtra("android.intent.extra.REFERRER"));
            if (v1_0 == 0) {
                String v2 = v0.getStringExtra("android.intent.extra.REFERRER_NAME");
                if (v2 == null) {
                    v1_0 = 0;
                } else {
                    v1_0 = android.net.Uri.parse(v2);
                }
            }
        } else {
            v1_0 = android.support.v4.app.ActivityCompatApi22.getReferrer(p5);
        }
        return v1_0;
    }

    public static boolean invalidateOptionsMenu(android.app.Activity p2)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 11) {
            v0_1 = 0;
        } else {
            android.support.v4.app.ActivityCompatHoneycomb.invalidateOptionsMenu(p2);
            v0_1 = 1;
        }
        return v0_1;
    }

    public static void postponeEnterTransition(android.app.Activity p2)
    {
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.support.v4.app.ActivityCompatApi21.postponeEnterTransition(p2);
        }
        return;
    }

    public static void requestPermissions(android.app.Activity p3, String[] p4, int p5)
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            if ((p3 instanceof android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback)) {
                new android.os.Handler(android.os.Looper.getMainLooper()).post(new android.support.v4.app.ActivityCompat$1(p4, p3, p5));
            }
        } else {
            android.support.v4.app.ActivityCompatApi23.requestPermissions(p3, p4, p5);
        }
        return;
    }

    public static void setEnterSharedElementCallback(android.app.Activity p2, android.support.v4.app.SharedElementCallback p3)
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            if (android.os.Build$VERSION.SDK_INT >= 21) {
                android.support.v4.app.ActivityCompatApi21.setEnterSharedElementCallback(p2, android.support.v4.app.ActivityCompat.createCallback(p3));
            }
        } else {
            android.support.v4.app.ActivityCompatApi23.setEnterSharedElementCallback(p2, android.support.v4.app.ActivityCompat.createCallback23(p3));
        }
        return;
    }

    public static void setExitSharedElementCallback(android.app.Activity p2, android.support.v4.app.SharedElementCallback p3)
    {
        if (android.os.Build$VERSION.SDK_INT < 23) {
            if (android.os.Build$VERSION.SDK_INT >= 21) {
                android.support.v4.app.ActivityCompatApi21.setExitSharedElementCallback(p2, android.support.v4.app.ActivityCompat.createCallback(p3));
            }
        } else {
            android.support.v4.app.ActivityCompatApi23.setExitSharedElementCallback(p2, android.support.v4.app.ActivityCompat.createCallback23(p3));
        }
        return;
    }

    public static boolean shouldShowRequestPermissionRationale(android.app.Activity p2, String p3)
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 23) {
            v0_1 = 0;
        } else {
            v0_1 = android.support.v4.app.ActivityCompatApi23.shouldShowRequestPermissionRationale(p2, p3);
        }
        return v0_1;
    }

    public static void startActivityForResult(android.app.Activity p2, android.content.Intent p3, int p4, android.os.Bundle p5)
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            p2.startActivityForResult(p3, p4);
        } else {
            android.support.v4.app.ActivityCompatJB.startActivityForResult(p2, p3, p4, p5);
        }
        return;
    }

    public static void startIntentSenderForResult(android.app.Activity p2, android.content.IntentSender p3, int p4, android.content.Intent p5, int p6, int p7, int p8, android.os.Bundle p9)
    {
        if (android.os.Build$VERSION.SDK_INT < 16) {
            p2.startIntentSenderForResult(p3, p4, p5, p6, p7, p8);
        } else {
            android.support.v4.app.ActivityCompatJB.startIntentSenderForResult(p2, p3, p4, p5, p6, p7, p8, p9);
        }
        return;
    }

    public static void startPostponedEnterTransition(android.app.Activity p2)
    {
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.support.v4.app.ActivityCompatApi21.startPostponedEnterTransition(p2);
        }
        return;
    }
}
package android.support.v4.app;
public abstract class ActivityCompatApi23$SharedElementCallback23 extends android.support.v4.app.ActivityCompatApi21$SharedElementCallback21 {

    public ActivityCompatApi23$SharedElementCallback23()
    {
        return;
    }

    public abstract void onSharedElementsArrived();
}
package android.support.v4.app;
 class ActivityCompatApi23$SharedElementCallbackImpl$1 implements android.support.v4.app.ActivityCompatApi23$OnSharedElementsReadyListenerBridge {
    final synthetic android.support.v4.app.ActivityCompatApi23$SharedElementCallbackImpl this$0;
    final synthetic android.app.SharedElementCallback$OnSharedElementsReadyListener val$listener;

    ActivityCompatApi23$SharedElementCallbackImpl$1(android.support.v4.app.ActivityCompatApi23$SharedElementCallbackImpl p1, android.app.SharedElementCallback$OnSharedElementsReadyListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onSharedElementsReady()
    {
        this.val$listener.onSharedElementsReady();
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat$ActivityOptionsImpl21 extends android.support.v4.app.ActivityOptionsCompat {
    private final android.support.v4.app.ActivityOptionsCompat21 mImpl;

    ActivityOptionsCompat$ActivityOptionsImpl21(android.support.v4.app.ActivityOptionsCompat21 p1)
    {
        this.mImpl = p1;
        return;
    }

    public android.os.Bundle toBundle()
    {
        return this.mImpl.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat p4)
    {
        if ((p4 instanceof android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21)) {
            this.mImpl.update(((android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl21) p4).mImpl);
        }
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat$ActivityOptionsImpl23 extends android.support.v4.app.ActivityOptionsCompat {
    private final android.support.v4.app.ActivityOptionsCompat23 mImpl;

    ActivityOptionsCompat$ActivityOptionsImpl23(android.support.v4.app.ActivityOptionsCompat23 p1)
    {
        this.mImpl = p1;
        return;
    }

    public void requestUsageTimeReport(android.app.PendingIntent p2)
    {
        this.mImpl.requestUsageTimeReport(p2);
        return;
    }

    public android.os.Bundle toBundle()
    {
        return this.mImpl.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat p4)
    {
        if ((p4 instanceof android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23)) {
            this.mImpl.update(((android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl23) p4).mImpl);
        }
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat$ActivityOptionsImpl24 extends android.support.v4.app.ActivityOptionsCompat {
    private final android.support.v4.app.ActivityOptionsCompat24 mImpl;

    ActivityOptionsCompat$ActivityOptionsImpl24(android.support.v4.app.ActivityOptionsCompat24 p1)
    {
        this.mImpl = p1;
        return;
    }

    public android.graphics.Rect getLaunchBounds()
    {
        return this.mImpl.getLaunchBounds();
    }

    public void requestUsageTimeReport(android.app.PendingIntent p2)
    {
        this.mImpl.requestUsageTimeReport(p2);
        return;
    }

    public android.support.v4.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect p3)
    {
        return new android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24(this.mImpl.setLaunchBounds(p3));
    }

    public android.os.Bundle toBundle()
    {
        return this.mImpl.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat p4)
    {
        if ((p4 instanceof android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24)) {
            this.mImpl.update(((android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImpl24) p4).mImpl);
        }
        return;
    }
}
package android.support.v4.app;
 class ActivityOptionsCompat$ActivityOptionsImplJB extends android.support.v4.app.ActivityOptionsCompat {
    private final android.support.v4.app.ActivityOptionsCompatJB mImpl;

    ActivityOptionsCompat$ActivityOptionsImplJB(android.support.v4.app.ActivityOptionsCompatJB p1)
    {
        this.mImpl = p1;
        return;
    }

    public android.os.Bundle toBundle()
    {
        return this.mImpl.toBundle();
    }

    public void update(android.support.v4.app.ActivityOptionsCompat p4)
    {
        if ((p4 instanceof android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB)) {
            this.mImpl.update(((android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB) p4).mImpl);
        }
        return;
    }
}
package android.support.v4.app;
 class AppOpsManagerCompat$AppOpsManager23 extends android.support.v4.app.AppOpsManagerCompat$AppOpsManagerImpl {

    AppOpsManagerCompat$AppOpsManager23()
    {
        return;
    }

    public int noteOp(android.content.Context p2, String p3, int p4, String p5)
    {
        return android.support.v4.app.AppOpsManagerCompat23.noteOp(p2, p3, p4, p5);
    }

    public int noteProxyOp(android.content.Context p2, String p3, String p4)
    {
        return android.support.v4.app.AppOpsManagerCompat23.noteProxyOp(p2, p3, p4);
    }

    public String permissionToOp(String p2)
    {
        return android.support.v4.app.AppOpsManagerCompat23.permissionToOp(p2);
    }
}
package android.support.v4.app;
 class BackStackRecord$1 implements android.support.v4.app.FragmentTransitionCompat21$ViewRetriever {
    final synthetic android.support.v4.app.BackStackRecord this$0;
    final synthetic android.support.v4.app.Fragment val$inFragment;

    BackStackRecord$1(android.support.v4.app.BackStackRecord p1, android.support.v4.app.Fragment p2)
    {
        this.this$0 = p1;
        this.val$inFragment = p2;
        return;
    }

    public android.view.View getView()
    {
        return this.val$inFragment.getView();
    }
}
package android.support.v4.app;
final class BackStackRecord extends android.support.v4.app.FragmentTransaction implements android.support.v4.app.FragmentManager$BackStackEntry, java.lang.Runnable {
    static final int OP_ADD = 1;
    static final int OP_ATTACH = 7;
    static final int OP_DETACH = 6;
    static final int OP_HIDE = 4;
    static final int OP_NULL = 0;
    static final int OP_REMOVE = 3;
    static final int OP_REPLACE = 2;
    static final int OP_SHOW = 5;
    static final boolean SUPPORTS_TRANSITIONS = False;
    static final String TAG = "FragmentManager";
    boolean mAddToBackStack;
    boolean mAllowAddToBackStack;
    int mBreadCrumbShortTitleRes;
    CharSequence mBreadCrumbShortTitleText;
    int mBreadCrumbTitleRes;
    CharSequence mBreadCrumbTitleText;
    boolean mCommitted;
    int mEnterAnim;
    int mExitAnim;
    android.support.v4.app.BackStackRecord$Op mHead;
    int mIndex;
    final android.support.v4.app.FragmentManagerImpl mManager;
    String mName;
    int mNumOp;
    int mPopEnterAnim;
    int mPopExitAnim;
    java.util.ArrayList mSharedElementSourceNames;
    java.util.ArrayList mSharedElementTargetNames;
    android.support.v4.app.BackStackRecord$Op mTail;
    int mTransition;
    int mTransitionStyle;

    static BackStackRecord()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        android.support.v4.app.BackStackRecord.SUPPORTS_TRANSITIONS = v0_1;
        return;
    }

    public BackStackRecord(android.support.v4.app.FragmentManagerImpl p2)
    {
        this.mAllowAddToBackStack = 1;
        this.mIndex = -1;
        this.mManager = p2;
        return;
    }

    private android.support.v4.app.BackStackRecord$TransitionState beginTransition(android.util.SparseArray p9, android.util.SparseArray p10, boolean p11)
    {
        int v2_1 = new android.support.v4.app.BackStackRecord$TransitionState(this);
        v2_1.nonExistentView = new android.view.View(this.mManager.mHost.getContext());
        int v6 = 0;
        int v7_0 = 0;
        while (v7_0 < p9.size()) {
            if (this.configureTransitions(p9.keyAt(v7_0), v2_1, p11, p9, p10)) {
                v6 = 1;
            }
            v7_0++;
        }
        int v7_1 = 0;
        while (v7_1 < p10.size()) {
            int v1_0 = p10.keyAt(v7_1);
            if ((p9.get(v1_0) == null) && (this.configureTransitions(v1_0, v2_1, p11, p9, p10))) {
                v6 = 1;
            }
            v7_1++;
        }
        if (v6 == 0) {
            v2_1 = 0;
        }
        return v2_1;
    }

    private void calculateFragments(android.util.SparseArray p7, android.util.SparseArray p8)
    {
        if (this.mManager.mContainer.onHasView()) {
            android.support.v4.app.BackStackRecord$Op v3 = this.mHead;
            while (v3 != null) {
                switch (v3.cmd) {
                    case 1:
                        this.setLastIn(p7, p8, v3.fragment);
                        break;
                    case 2:
                        int v0 = v3.fragment;
                        if (this.mManager.mAdded != null) {
                            int v1 = 0;
                            while (v1 < this.mManager.mAdded.size()) {
                                android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) this.mManager.mAdded.get(v1));
                                if ((v0 == 0) || (v2_1.mContainerId == v0.mContainerId)) {
                                    if (v2_1 != v0) {
                                        android.support.v4.app.BackStackRecord.setFirstOut(p7, p8, v2_1);
                                    } else {
                                        v0 = 0;
                                        p8.remove(v2_1.mContainerId);
                                    }
                                }
                                v1++;
                            }
                        }
                        this.setLastIn(p7, p8, v3.fragment);
                        break;
                    case 3:
                        android.support.v4.app.BackStackRecord.setFirstOut(p7, p8, v3.fragment);
                        break;
                    case 4:
                        android.support.v4.app.BackStackRecord.setFirstOut(p7, p8, v3.fragment);
                        break;
                    case 5:
                        this.setLastIn(p7, p8, v3.fragment);
                        break;
                    case 6:
                        android.support.v4.app.BackStackRecord.setFirstOut(p7, p8, v3.fragment);
                        break;
                    case 7:
                        this.setLastIn(p7, p8, v3.fragment);
                        break;
                }
                v3 = v3.next;
            }
        }
        return;
    }

    private static Object captureExitingViews(Object p1, android.support.v4.app.Fragment p2, java.util.ArrayList p3, android.support.v4.util.ArrayMap p4, android.view.View p5)
    {
        if (p1 != null) {
            p1 = android.support.v4.app.FragmentTransitionCompat21.captureExitingViews(p1, p2.getView(), p3, p4, p5);
        }
        return p1;
    }

    private boolean configureTransitions(int p43, android.support.v4.app.BackStackRecord$TransitionState p44, boolean p45, android.util.SparseArray p46, android.util.SparseArray p47)
    {
        int v4_2;
        android.view.ViewGroup v6_1 = ((android.view.ViewGroup) this.mManager.mContainer.onFindViewById(p43));
        if (v6_1 != null) {
            android.support.v4.app.Fragment v8_1 = ((android.support.v4.app.Fragment) p47.get(p43));
            android.support.v4.app.Fragment v9_1 = ((android.support.v4.app.Fragment) p46.get(p43));
            Object v12 = android.support.v4.app.BackStackRecord.getEnterTransition(v8_1, p45);
            int v7 = android.support.v4.app.BackStackRecord.getSharedElementTransition(v8_1, v9_1, p45);
            Object v13_0 = android.support.v4.app.BackStackRecord.getExitTransition(v9_1, p45);
            int v24 = 0;
            java.util.ArrayList v11_1 = new java.util.ArrayList();
            if (v7 != 0) {
                v24 = this.remapSharedElements(p44, v9_1, p45);
                if (!v24.isEmpty()) {
                    android.support.v4.app.SharedElementCallback v38;
                    if (!p45) {
                        v38 = v8_1.mEnterTransitionCallback;
                    } else {
                        v38 = v9_1.mEnterTransitionCallback;
                    }
                    if (v38 != null) {
                        java.util.ArrayList v40 = new java.util.ArrayList;
                        v40(v24.keySet());
                        java.util.ArrayList v41 = new java.util.ArrayList;
                        v41(v24.values());
                        v38.onSharedElementStart(v40, v41, 0);
                    }
                    this.prepareSharedElementTransition(p44, v6_1, v7, v8_1, v9_1, p45, v11_1, v12, v13_0);
                } else {
                    v7 = 0;
                    v24 = 0;
                }
            }
            if ((v12 != null) || ((v7 != 0) || (v13_0 != null))) {
                java.util.ArrayList v23_1 = new java.util.ArrayList();
                Object v13_1 = android.support.v4.app.BackStackRecord.captureExitingViews(v13_0, v9_1, v23_1, v24, p44.nonExistentView);
                if ((this.mSharedElementTargetNames != null) && (v24 != 0)) {
                    android.view.View v39_1 = ((android.view.View) v24.get(this.mSharedElementTargetNames.get(0)));
                    if (v39_1 != null) {
                        if (v13_1 != null) {
                            android.support.v4.app.FragmentTransitionCompat21.setEpicenter(v13_1, v39_1);
                        }
                        if (v7 != 0) {
                            android.support.v4.app.FragmentTransitionCompat21.setEpicenter(v7, v39_1);
                        }
                    }
                }
                android.support.v4.app.BackStackRecord$1 v18 = new android.support.v4.app.BackStackRecord$1;
                v18(this, v8_1);
                java.util.ArrayList v22_1 = new java.util.ArrayList();
                android.support.v4.util.ArrayMap v25_1 = new android.support.v4.util.ArrayMap();
                boolean v37 = 1;
                if (v8_1 != null) {
                    if (!p45) {
                        v37 = v8_1.getAllowEnterTransitionOverlap();
                    } else {
                        v37 = v8_1.getAllowReturnTransitionOverlap();
                    }
                }
                Object v34 = android.support.v4.app.FragmentTransitionCompat21.mergeTransitions(v12, v13_1, v7, v37);
                if (v34 != null) {
                    android.support.v4.app.FragmentTransitionCompat21.addTransitionTargets(v12, v7, v13_1, v6_1, v18, p44.nonExistentView, p44.enteringEpicenterView, p44.nameOverrides, v22_1, v23_1, v24, v25_1, v11_1);
                    this.excludeHiddenFragmentsAfterEnter(v6_1, p44, p43, v34);
                    android.support.v4.app.FragmentTransitionCompat21.excludeTarget(v34, p44.nonExistentView, 1);
                    this.excludeHiddenFragments(p44, p43, v34);
                    android.support.v4.app.FragmentTransitionCompat21.beginDelayedTransition(v6_1, v34);
                    android.support.v4.app.FragmentTransitionCompat21.cleanupTransitions(v6_1, p44.nonExistentView, v12, v22_1, v13_1, v23_1, v7, v11_1, v34, p44.hiddenFragmentViews, v25_1);
                }
                if (v34 == null) {
                    v4_2 = 0;
                } else {
                    v4_2 = 1;
                }
            } else {
                v4_2 = 0;
            }
        } else {
            v4_2 = 0;
        }
        return v4_2;
    }

    private void doAddOp(int p7, android.support.v4.app.Fragment p8, String p9, int p10)
    {
        Class v0 = p8.getClass();
        int v1 = v0.getModifiers();
        if ((!v0.isAnonymousClass()) && ((reflect.Modifier.isPublic(v1)) && ((!v0.isMemberClass()) || (reflect.Modifier.isStatic(v1))))) {
            p8.mFragmentManager = this.mManager;
            if (p9 != null) {
                if ((p8.mTag == null) || (p9.equals(p8.mTag))) {
                    p8.mTag = p9;
                } else {
                    throw new IllegalStateException(new StringBuilder().append("Can\'t change tag of fragment ").append(p8).append(": was ").append(p8.mTag).append(" now ").append(p9).toString());
                }
            }
            if (p7 != 0) {
                if (p7 != -1) {
                    if ((p8.mFragmentId == 0) || (p8.mFragmentId == p7)) {
                        p8.mFragmentId = p7;
                        p8.mContainerId = p7;
                    } else {
                        throw new IllegalStateException(new StringBuilder().append("Can\'t change container ID of fragment ").append(p8).append(": was ").append(p8.mFragmentId).append(" now ").append(p7).toString());
                    }
                } else {
                    throw new IllegalArgumentException(new StringBuilder().append("Can\'t add fragment ").append(p8).append(" with tag ").append(p9).append(" to container view with no id").toString());
                }
            }
            android.support.v4.app.BackStackRecord$Op v2_1 = new android.support.v4.app.BackStackRecord$Op();
            v2_1.cmd = p10;
            v2_1.fragment = p8;
            this.addOp(v2_1);
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("Fragment ").append(v0.getCanonicalName()).append(" must be a public static class to be  properly recreated from").append(" instance state.").toString());
        }
    }

    private void excludeHiddenFragmentsAfterEnter(android.view.View p8, android.support.v4.app.BackStackRecord$TransitionState p9, int p10, Object p11)
    {
        p8.getViewTreeObserver().addOnPreDrawListener(new android.support.v4.app.BackStackRecord$3(this, p8, p9, p10, p11));
        return;
    }

    private static Object getEnterTransition(android.support.v4.app.Fragment p1, boolean p2)
    {
        Object v0_1;
        if (p1 != null) {
            Object v0_0;
            if (!p2) {
                v0_0 = p1.getEnterTransition();
            } else {
                v0_0 = p1.getReenterTransition();
            }
            v0_1 = android.support.v4.app.FragmentTransitionCompat21.cloneTransition(v0_0);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    private static Object getExitTransition(android.support.v4.app.Fragment p1, boolean p2)
    {
        Object v0_1;
        if (p1 != null) {
            Object v0_0;
            if (!p2) {
                v0_0 = p1.getExitTransition();
            } else {
                v0_0 = p1.getReturnTransition();
            }
            v0_1 = android.support.v4.app.FragmentTransitionCompat21.cloneTransition(v0_0);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    private static Object getSharedElementTransition(android.support.v4.app.Fragment p1, android.support.v4.app.Fragment p2, boolean p3)
    {
        if ((p1 != null) && (p2 != null)) {
            Object v0_0;
            if (!p3) {
                v0_0 = p1.getSharedElementEnterTransition();
            } else {
                v0_0 = p2.getSharedElementReturnTransition();
            }
            Object v0_1 = android.support.v4.app.FragmentTransitionCompat21.wrapSharedElementTransition(v0_0);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    private android.support.v4.util.ArrayMap mapEnteringSharedElements(android.support.v4.app.BackStackRecord$TransitionState p5, android.support.v4.app.Fragment p6, boolean p7)
    {
        android.support.v4.util.ArrayMap v0_1 = new android.support.v4.util.ArrayMap();
        android.view.View v1 = p6.getView();
        if ((v1 != null) && (this.mSharedElementSourceNames != null)) {
            android.support.v4.app.FragmentTransitionCompat21.findNamedViews(v0_1, v1);
            if (!p7) {
                v0_1.retainAll(this.mSharedElementTargetNames);
            } else {
                v0_1 = android.support.v4.app.BackStackRecord.remapNames(this.mSharedElementSourceNames, this.mSharedElementTargetNames, v0_1);
            }
        }
        return v0_1;
    }

    private void prepareSharedElementTransition(android.support.v4.app.BackStackRecord$TransitionState p13, android.view.View p14, Object p15, android.support.v4.app.Fragment p16, android.support.v4.app.Fragment p17, boolean p18, java.util.ArrayList p19, Object p20, Object p21)
    {
        if (p15 != null) {
            p14.getViewTreeObserver().addOnPreDrawListener(new android.support.v4.app.BackStackRecord$2(this, p14, p15, p19, p13, p20, p21, p18, p16, p17));
        }
        return;
    }

    private static android.support.v4.util.ArrayMap remapNames(java.util.ArrayList p5, java.util.ArrayList p6, android.support.v4.util.ArrayMap p7)
    {
        if (!p7.isEmpty()) {
            android.support.v4.util.ArrayMap v2_1 = new android.support.v4.util.ArrayMap();
            int v1 = p5.size();
            int v0 = 0;
            while (v0 < v1) {
                android.view.View v3_1 = ((android.view.View) p7.get(p5.get(v0)));
                if (v3_1 != null) {
                    v2_1.put(p6.get(v0), v3_1);
                }
                v0++;
            }
            p7 = v2_1;
        }
        return p7;
    }

    private android.support.v4.util.ArrayMap remapSharedElements(android.support.v4.app.BackStackRecord$TransitionState p5, android.support.v4.app.Fragment p6, boolean p7)
    {
        android.support.v4.util.ArrayMap v0_1 = new android.support.v4.util.ArrayMap();
        if (this.mSharedElementSourceNames != null) {
            android.support.v4.app.FragmentTransitionCompat21.findNamedViews(v0_1, p6.getView());
            if (!p7) {
                v0_1 = android.support.v4.app.BackStackRecord.remapNames(this.mSharedElementSourceNames, this.mSharedElementTargetNames, v0_1);
            } else {
                v0_1.retainAll(this.mSharedElementTargetNames);
            }
        }
        if (!p7) {
            if (p6.mExitTransitionCallback != null) {
                p6.mExitTransitionCallback.onMapSharedElements(this.mSharedElementTargetNames, v0_1);
            }
            this.setNameOverrides(p5, v0_1, 0);
        } else {
            if (p6.mEnterTransitionCallback != null) {
                p6.mEnterTransitionCallback.onMapSharedElements(this.mSharedElementTargetNames, v0_1);
            }
            this.setBackNameOverrides(p5, v0_1, 0);
        }
        return v0_1;
    }

    private void setBackNameOverrides(android.support.v4.app.BackStackRecord$TransitionState p8, android.support.v4.util.ArrayMap p9, boolean p10)
    {
        int v0;
        if (this.mSharedElementTargetNames != null) {
            v0 = this.mSharedElementTargetNames.size();
        } else {
            v0 = 0;
        }
        int v1 = 0;
        while (v1 < v0) {
            String v3_1 = ((String) this.mSharedElementSourceNames.get(v1));
            android.view.View v5_1 = ((android.view.View) p9.get(((String) this.mSharedElementTargetNames.get(v1))));
            if (v5_1 != null) {
                String v4 = android.support.v4.app.FragmentTransitionCompat21.getTransitionName(v5_1);
                if (!p10) {
                    android.support.v4.app.BackStackRecord.setNameOverride(p8.nameOverrides, v4, v3_1);
                } else {
                    android.support.v4.app.BackStackRecord.setNameOverride(p8.nameOverrides, v3_1, v4);
                }
            }
            v1++;
        }
        return;
    }

    private static void setFirstOut(android.util.SparseArray p2, android.util.SparseArray p3, android.support.v4.app.Fragment p4)
    {
        if (p4 != null) {
            int v0 = p4.mContainerId;
            if ((v0 != 0) && (!p4.isHidden())) {
                if ((p4.isAdded()) && ((p4.getView() != null) && (p2.get(v0) == null))) {
                    p2.put(v0, p4);
                }
                if (p3.get(v0) == p4) {
                    p3.remove(v0);
                }
            }
        }
        return;
    }

    private void setLastIn(android.util.SparseArray p8, android.util.SparseArray p9, android.support.v4.app.Fragment p10)
    {
        if (p10 != null) {
            int v6 = p10.mContainerId;
            if (v6 != 0) {
                if (!p10.isAdded()) {
                    p9.put(v6, p10);
                }
                if (p8.get(v6) == p10) {
                    p8.remove(v6);
                }
            }
            if ((p10.mState < 1) && (this.mManager.mCurState >= 1)) {
                this.mManager.makeActive(p10);
                this.mManager.moveToState(p10, 1, 0, 0, 0);
            }
        }
        return;
    }

    private static void setNameOverride(android.support.v4.util.ArrayMap p2, String p3, String p4)
    {
        if ((p3 != null) && (p4 != null)) {
            int v0 = 0;
            while (v0 < p2.size()) {
                if (!p3.equals(p2.valueAt(v0))) {
                    v0++;
                } else {
                    p2.setValueAt(v0, p4);
                }
            }
            p2.put(p3, p4);
        }
        return;
    }

    private void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState p6, android.support.v4.util.ArrayMap p7, boolean p8)
    {
        int v0 = p7.size();
        int v1 = 0;
        while (v1 < v0) {
            String v2_1 = ((String) p7.keyAt(v1));
            String v3 = android.support.v4.app.FragmentTransitionCompat21.getTransitionName(((android.view.View) p7.valueAt(v1)));
            if (!p8) {
                android.support.v4.app.BackStackRecord.setNameOverride(p6.nameOverrides, v3, v2_1);
            } else {
                android.support.v4.app.BackStackRecord.setNameOverride(p6.nameOverrides, v2_1, v3);
            }
            v1++;
        }
        return;
    }

    private static void setNameOverrides(android.support.v4.app.BackStackRecord$TransitionState p4, java.util.ArrayList p5, java.util.ArrayList p6)
    {
        if (p5 != null) {
            int v0 = 0;
            while (v0 < p5.size()) {
                android.support.v4.app.BackStackRecord.setNameOverride(p4.nameOverrides, ((String) p5.get(v0)), ((String) p6.get(v0)));
                v0++;
            }
        }
        return;
    }

    public android.support.v4.app.FragmentTransaction add(int p3, android.support.v4.app.Fragment p4)
    {
        this.doAddOp(p3, p4, 0, 1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction add(int p2, android.support.v4.app.Fragment p3, String p4)
    {
        this.doAddOp(p2, p3, p4, 1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment p3, String p4)
    {
        this.doAddOp(0, p3, p4, 1);
        return this;
    }

    void addOp(android.support.v4.app.BackStackRecord$Op p2)
    {
        if (this.mHead != null) {
            p2.prev = this.mTail;
            this.mTail.next = p2;
            this.mTail = p2;
        } else {
            this.mTail = p2;
            this.mHead = p2;
        }
        p2.enterAnim = this.mEnterAnim;
        p2.exitAnim = this.mExitAnim;
        p2.popEnterAnim = this.mPopEnterAnim;
        p2.popExitAnim = this.mPopExitAnim;
        this.mNumOp = (this.mNumOp + 1);
        return;
    }

    public android.support.v4.app.FragmentTransaction addSharedElement(android.view.View p4, String p5)
    {
        if (android.support.v4.app.BackStackRecord.SUPPORTS_TRANSITIONS) {
            String v0 = android.support.v4.app.FragmentTransitionCompat21.getTransitionName(p4);
            if (v0 != null) {
                if (this.mSharedElementSourceNames == null) {
                    this.mSharedElementSourceNames = new java.util.ArrayList();
                    this.mSharedElementTargetNames = new java.util.ArrayList();
                }
                this.mSharedElementSourceNames.add(v0);
                this.mSharedElementTargetNames.add(p5);
            } else {
                throw new IllegalArgumentException("Unique transitionNames are required for all sharedElements");
            }
        }
        return this;
    }

    public android.support.v4.app.FragmentTransaction addToBackStack(String p3)
    {
        if (this.mAllowAddToBackStack) {
            this.mAddToBackStack = 1;
            this.mName = p3;
            return this;
        } else {
            throw new IllegalStateException("This FragmentTransaction is not allowed to be added to the back stack.");
        }
    }

    public android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 7;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    void bumpBackStackNesting(int p7)
    {
        if (this.mAddToBackStack) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Bump nesting in ").append(this).append(" by ").append(p7).toString());
            }
            android.support.v4.app.BackStackRecord$Op v1 = this.mHead;
            while (v1 != null) {
                if (v1.fragment != null) {
                    String v3_3 = v1.fragment;
                    v3_3.mBackStackNesting = (v3_3.mBackStackNesting + p7);
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("Bump nesting of ").append(v1.fragment).append(" to ").append(v1.fragment.mBackStackNesting).toString());
                    }
                }
                if (v1.removed != null) {
                    int v0 = (v1.removed.size() - 1);
                    while (v0 >= 0) {
                        android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) v1.removed.get(v0));
                        v2_1.mBackStackNesting = (v2_1.mBackStackNesting + p7);
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("Bump nesting of ").append(v2_1).append(" to ").append(v2_1.mBackStackNesting).toString());
                        }
                        v0--;
                    }
                }
                v1 = v1.next;
            }
        }
        return;
    }

    public void calculateBackFragments(android.util.SparseArray p4, android.util.SparseArray p5)
    {
        if (this.mManager.mContainer.onHasView()) {
            android.support.v4.app.BackStackRecord$Op v1 = this.mTail;
            while (v1 != null) {
                switch (v1.cmd) {
                    case 1:
                        android.support.v4.app.BackStackRecord.setFirstOut(p4, p5, v1.fragment);
                        break;
                    case 2:
                        if (v1.removed != null) {
                            int v0 = (v1.removed.size() - 1);
                            while (v0 >= 0) {
                                this.setLastIn(p4, p5, ((android.support.v4.app.Fragment) v1.removed.get(v0)));
                                v0--;
                            }
                        }
                        android.support.v4.app.BackStackRecord.setFirstOut(p4, p5, v1.fragment);
                        break;
                    case 3:
                        this.setLastIn(p4, p5, v1.fragment);
                        break;
                    case 4:
                        this.setLastIn(p4, p5, v1.fragment);
                        break;
                    case 5:
                        android.support.v4.app.BackStackRecord.setFirstOut(p4, p5, v1.fragment);
                        break;
                    case 6:
                        this.setLastIn(p4, p5, v1.fragment);
                        break;
                    case 7:
                        android.support.v4.app.BackStackRecord.setFirstOut(p4, p5, v1.fragment);
                        break;
                }
                v1 = v1.prev;
            }
        }
        return;
    }

    void callSharedElementEnd(android.support.v4.app.BackStackRecord$TransitionState p5, android.support.v4.app.Fragment p6, android.support.v4.app.Fragment p7, boolean p8, android.support.v4.util.ArrayMap p9)
    {
        android.support.v4.app.SharedElementCallback v1;
        if (!p8) {
            v1 = p6.mEnterTransitionCallback;
        } else {
            v1 = p7.mEnterTransitionCallback;
        }
        if (v1 != null) {
            v1.onSharedElementEnd(new java.util.ArrayList(p9.keySet()), new java.util.ArrayList(p9.values()), 0);
        }
        return;
    }

    public int commit()
    {
        return this.commitInternal(0);
    }

    public int commitAllowingStateLoss()
    {
        return this.commitInternal(1);
    }

    int commitInternal(boolean p7)
    {
        if (!this.mCommitted) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Commit: ").append(this).toString());
                this.dump("  ", 0, new java.io.PrintWriter(new android.support.v4.util.LogWriter("FragmentManager")), 0);
            }
            this.mCommitted = 1;
            if (!this.mAddToBackStack) {
                this.mIndex = -1;
            } else {
                this.mIndex = this.mManager.allocBackStackIndex(this);
            }
            this.mManager.enqueueAction(this, p7);
            return this.mIndex;
        } else {
            throw new IllegalStateException("commit already called");
        }
    }

    public void commitNow()
    {
        this.disallowAddToBackStack();
        this.mManager.execSingleAction(this, 0);
        return;
    }

    public void commitNowAllowingStateLoss()
    {
        this.disallowAddToBackStack();
        this.mManager.execSingleAction(this, 1);
        return;
    }

    public android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 6;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction disallowAddToBackStack()
    {
        if (!this.mAddToBackStack) {
            this.mAllowAddToBackStack = 0;
            return this;
        } else {
            throw new IllegalStateException("This transaction is already being added to the back stack");
        }
    }

    public void dump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        this.dump(p2, p4, 1);
        return;
    }

    public void dump(String p8, java.io.PrintWriter p9, boolean p10)
    {
        if (p10) {
            p9.print(p8);
            p9.print("mName=");
            p9.print(this.mName);
            p9.print(" mIndex=");
            p9.print(this.mIndex);
            p9.print(" mCommitted=");
            p9.println(this.mCommitted);
            if (this.mTransition != 0) {
                p9.print(p8);
                p9.print("mTransition=#");
                p9.print(Integer.toHexString(this.mTransition));
                p9.print(" mTransitionStyle=#");
                p9.println(Integer.toHexString(this.mTransitionStyle));
            }
            if ((this.mEnterAnim != 0) || (this.mExitAnim != 0)) {
                p9.print(p8);
                p9.print("mEnterAnim=#");
                p9.print(Integer.toHexString(this.mEnterAnim));
                p9.print(" mExitAnim=#");
                p9.println(Integer.toHexString(this.mExitAnim));
            }
            if ((this.mPopEnterAnim != 0) || (this.mPopExitAnim != 0)) {
                p9.print(p8);
                p9.print("mPopEnterAnim=#");
                p9.print(Integer.toHexString(this.mPopEnterAnim));
                p9.print(" mPopExitAnim=#");
                p9.println(Integer.toHexString(this.mPopExitAnim));
            }
            if ((this.mBreadCrumbTitleRes != 0) || (this.mBreadCrumbTitleText != null)) {
                p9.print(p8);
                p9.print("mBreadCrumbTitleRes=#");
                p9.print(Integer.toHexString(this.mBreadCrumbTitleRes));
                p9.print(" mBreadCrumbTitleText=");
                p9.println(this.mBreadCrumbTitleText);
            }
            if ((this.mBreadCrumbShortTitleRes != 0) || (this.mBreadCrumbShortTitleText != null)) {
                p9.print(p8);
                p9.print("mBreadCrumbShortTitleRes=#");
                p9.print(Integer.toHexString(this.mBreadCrumbShortTitleRes));
                p9.print(" mBreadCrumbShortTitleText=");
                p9.println(this.mBreadCrumbShortTitleText);
            }
        }
        if (this.mHead != null) {
            p9.print(p8);
            p9.println("Operations:");
            String v2 = new StringBuilder().append(p8).append("    ").toString();
            android.support.v4.app.BackStackRecord$Op v4 = this.mHead;
            int v3 = 0;
            while (v4 != null) {
                String v0;
                switch (v4.cmd) {
                    case 0:
                        v0 = "NULL";
                        break;
                    case 1:
                        v0 = "ADD";
                        break;
                    case 2:
                        v0 = "REPLACE";
                        break;
                    case 3:
                        v0 = "REMOVE";
                        break;
                    case 4:
                        v0 = "HIDE";
                        break;
                    case 5:
                        v0 = "SHOW";
                        break;
                    case 6:
                        v0 = "DETACH";
                        break;
                    case 7:
                        v0 = "ATTACH";
                        break;
                    default:
                        v0 = new StringBuilder().append("cmd=").append(v4.cmd).toString();
                }
                p9.print(p8);
                p9.print("  Op #");
                p9.print(v3);
                p9.print(": ");
                p9.print(v0);
                p9.print(" ");
                p9.println(v4.fragment);
                if (p10) {
                    if ((v4.enterAnim != 0) || (v4.exitAnim != 0)) {
                        p9.print(p8);
                        p9.print("enterAnim=#");
                        p9.print(Integer.toHexString(v4.enterAnim));
                        p9.print(" exitAnim=#");
                        p9.println(Integer.toHexString(v4.exitAnim));
                    }
                    if ((v4.popEnterAnim != 0) || (v4.popExitAnim != 0)) {
                        p9.print(p8);
                        p9.print("popEnterAnim=#");
                        p9.print(Integer.toHexString(v4.popEnterAnim));
                        p9.print(" popExitAnim=#");
                        p9.println(Integer.toHexString(v4.popExitAnim));
                    }
                }
                if ((v4.removed != null) && (v4.removed.size() > 0)) {
                    int v1 = 0;
                    while (v1 < v4.removed.size()) {
                        p9.print(v2);
                        if (v4.removed.size() != 1) {
                            if (v1 == 0) {
                                p9.println("Removed:");
                            }
                            p9.print(v2);
                            p9.print("  #");
                            p9.print(v1);
                            p9.print(": ");
                        } else {
                            p9.print("Removed: ");
                        }
                        p9.println(v4.removed.get(v1));
                        v1++;
                    }
                }
                v4 = v4.next;
                v3++;
            }
        }
        return;
    }

    void excludeHiddenFragments(android.support.v4.app.BackStackRecord$TransitionState p5, int p6, Object p7)
    {
        if (this.mManager.mAdded != null) {
            int v1 = 0;
            while (v1 < this.mManager.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mManager.mAdded.get(v1));
                if ((v0_1.mView != null) && ((v0_1.mContainer != null) && (v0_1.mContainerId == p6))) {
                    if (!v0_1.mHidden) {
                        android.support.v4.app.FragmentTransitionCompat21.excludeTarget(p7, v0_1.mView, 0);
                        p5.hiddenFragmentViews.remove(v0_1.mView);
                    } else {
                        if (!p5.hiddenFragmentViews.contains(v0_1.mView)) {
                            android.support.v4.app.FragmentTransitionCompat21.excludeTarget(p7, v0_1.mView, 1);
                            p5.hiddenFragmentViews.add(v0_1.mView);
                        }
                    }
                }
                v1++;
            }
        }
        return;
    }

    public CharSequence getBreadCrumbShortTitle()
    {
        CharSequence v0_1;
        if (this.mBreadCrumbShortTitleRes == 0) {
            v0_1 = this.mBreadCrumbShortTitleText;
        } else {
            v0_1 = this.mManager.mHost.getContext().getText(this.mBreadCrumbShortTitleRes);
        }
        return v0_1;
    }

    public int getBreadCrumbShortTitleRes()
    {
        return this.mBreadCrumbShortTitleRes;
    }

    public CharSequence getBreadCrumbTitle()
    {
        CharSequence v0_1;
        if (this.mBreadCrumbTitleRes == 0) {
            v0_1 = this.mBreadCrumbTitleText;
        } else {
            v0_1 = this.mManager.mHost.getContext().getText(this.mBreadCrumbTitleRes);
        }
        return v0_1;
    }

    public int getBreadCrumbTitleRes()
    {
        return this.mBreadCrumbTitleRes;
    }

    public int getId()
    {
        return this.mIndex;
    }

    public String getName()
    {
        return this.mName;
    }

    public int getTransition()
    {
        return this.mTransition;
    }

    public int getTransitionStyle()
    {
        return this.mTransitionStyle;
    }

    public android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 4;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public boolean isAddToBackStackAllowed()
    {
        return this.mAllowAddToBackStack;
    }

    public boolean isEmpty()
    {
        int v0_1;
        if (this.mNumOp != 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    android.support.v4.util.ArrayMap mapSharedElementsIn(android.support.v4.app.BackStackRecord$TransitionState p5, boolean p6, android.support.v4.app.Fragment p7)
    {
        android.support.v4.util.ArrayMap v0 = this.mapEnteringSharedElements(p5, p7, p6);
        if (!p6) {
            if (p7.mEnterTransitionCallback != null) {
                p7.mEnterTransitionCallback.onMapSharedElements(this.mSharedElementTargetNames, v0);
            }
            this.setNameOverrides(p5, v0, 1);
        } else {
            if (p7.mExitTransitionCallback != null) {
                p7.mExitTransitionCallback.onMapSharedElements(this.mSharedElementTargetNames, v0);
            }
            this.setBackNameOverrides(p5, v0, 1);
        }
        return v0;
    }

    public android.support.v4.app.BackStackRecord$TransitionState popFromBackStack(boolean p18, android.support.v4.app.BackStackRecord$TransitionState p19, android.util.SparseArray p20, android.util.SparseArray p21)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("popFromBackStack: ").append(this).toString());
            this.dump("  ", 0, new java.io.PrintWriter(new android.support.v4.util.LogWriter("FragmentManager")), 0);
        }
        if ((android.support.v4.app.BackStackRecord.SUPPORTS_TRANSITIONS) && (this.mManager.mCurState >= 1)) {
            if (p19 != 0) {
                if (!p18) {
                    android.support.v4.app.BackStackRecord.setNameOverrides(p19, this.mSharedElementTargetNames, this.mSharedElementSourceNames);
                }
            } else {
                if ((p20.size() != 0) || (p21.size() != 0)) {
                    p19 = this.beginTransition(p20, p21, 1);
                }
            }
        }
        int v12;
        this.bumpBackStackNesting(-1);
        if (p19 == 0) {
            v12 = this.mTransitionStyle;
        } else {
            v12 = 0;
        }
        int v11;
        if (p19 == 0) {
            v11 = this.mTransition;
        } else {
            v11 = 0;
        }
        android.support.v4.app.BackStackRecord$Op v7 = this.mTail;
        while (v7 != null) {
            int v8;
            if (p19 == 0) {
                v8 = v7.popEnterAnim;
            } else {
                v8 = 0;
            }
            int v9;
            if (p19 == 0) {
                v9 = v7.popExitAnim;
            } else {
                v9 = 0;
            }
            switch (v7.cmd) {
                case 1:
                    android.support.v4.app.Fragment v3_5 = v7.fragment;
                    v3_5.mNextAnim = v9;
                    this.mManager.removeFragment(v3_5, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    break;
                case 2:
                    android.support.v4.app.Fragment v3_4 = v7.fragment;
                    if (v3_4 != null) {
                        v3_4.mNextAnim = v9;
                        this.mManager.removeFragment(v3_4, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    }
                    if (v7.removed == null) {
                    } else {
                        int v4 = 0;
                        while (v4 < v7.removed.size()) {
                            android.support.v4.app.Fragment v6_1 = ((android.support.v4.app.Fragment) v7.removed.get(v4));
                            v6_1.mNextAnim = v8;
                            this.mManager.addFragment(v6_1, 0);
                            v4++;
                        }
                    }
                    break;
                case 3:
                    android.support.v4.app.Fragment v3_3 = v7.fragment;
                    v3_3.mNextAnim = v8;
                    this.mManager.addFragment(v3_3, 0);
                    break;
                case 4:
                    android.support.v4.app.Fragment v3_2 = v7.fragment;
                    v3_2.mNextAnim = v8;
                    this.mManager.showFragment(v3_2, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    break;
                case 5:
                    android.support.v4.app.Fragment v3_1 = v7.fragment;
                    v3_1.mNextAnim = v9;
                    this.mManager.hideFragment(v3_1, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    break;
                case 6:
                    android.support.v4.app.Fragment v3_0 = v7.fragment;
                    v3_0.mNextAnim = v8;
                    this.mManager.attachFragment(v3_0, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    break;
                case 7:
                    android.support.v4.app.Fragment v3_6 = v7.fragment;
                    v3_6.mNextAnim = v8;
                    this.mManager.detachFragment(v3_6, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12);
                    break;
                default:
                    throw new IllegalArgumentException(new StringBuilder().append("Unknown cmd: ").append(v7.cmd).toString());
            }
            v7 = v7.prev;
        }
        if (p18) {
            this.mManager.moveToState(this.mManager.mCurState, android.support.v4.app.FragmentManagerImpl.reverseTransit(v11), v12, 1);
            p19 = 0;
        }
        if (this.mIndex >= 0) {
            this.mManager.freeBackStackIndex(this.mIndex);
            this.mIndex = -1;
        }
        return p19;
    }

    public android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 3;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public android.support.v4.app.FragmentTransaction replace(int p2, android.support.v4.app.Fragment p3)
    {
        return this.replace(p2, p3, 0);
    }

    public android.support.v4.app.FragmentTransaction replace(int p3, android.support.v4.app.Fragment p4, String p5)
    {
        if (p3 != 0) {
            this.doAddOp(p3, p4, p5, 2);
            return this;
        } else {
            throw new IllegalArgumentException("Must use non-zero containerViewId");
        }
    }

    public void run()
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("Run: ").append(this).toString());
        }
        if ((!this.mAddToBackStack) || (this.mIndex >= 0)) {
            this.bumpBackStackNesting(1);
            android.support.v4.app.BackStackRecord$TransitionState v9 = 0;
            android.util.SparseArray v6 = 0;
            if ((android.support.v4.app.BackStackRecord.SUPPORTS_TRANSITIONS) && (this.mManager.mCurState >= 1)) {
                android.util.SparseArray v4_1 = new android.util.SparseArray();
                android.util.SparseArray v6_1 = new android.util.SparseArray();
                this.calculateFragments(v4_1, v6_1);
                v9 = this.beginTransition(v4_1, v6_1, 0);
            }
            int v11;
            if (v9 == null) {
                v11 = this.mTransitionStyle;
            } else {
                v11 = 0;
            }
            int v10;
            if (v9 == null) {
                v10 = this.mTransition;
            } else {
                v10 = 0;
            }
            android.support.v4.app.BackStackRecord$Op v8 = this.mHead;
            while (v8 != null) {
                int v1;
                if (v9 == null) {
                    v1 = v8.enterAnim;
                } else {
                    v1 = 0;
                }
                int v2;
                if (v9 == null) {
                    v2 = v8.exitAnim;
                } else {
                    v2 = 0;
                }
                switch (v8.cmd) {
                    case 1:
                        int v3_1 = v8.fragment;
                        v3_1.mNextAnim = v1;
                        this.mManager.addFragment(v3_1, 0);
                        break;
                    case 2:
                        int v3_0 = v8.fragment;
                        int v0 = v3_0.mContainerId;
                        if (this.mManager.mAdded != null) {
                            int v5 = (this.mManager.mAdded.size() - 1);
                            while (v5 >= 0) {
                                android.support.v4.app.Fragment v7_1 = ((android.support.v4.app.Fragment) this.mManager.mAdded.get(v5));
                                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                    android.util.Log.v("FragmentManager", new StringBuilder().append("OP_REPLACE: adding=").append(v3_0).append(" old=").append(v7_1).toString());
                                }
                                if (v7_1.mContainerId == v0) {
                                    if (v7_1 != v3_0) {
                                        if (v8.removed == null) {
                                            v8.removed = new java.util.ArrayList();
                                        }
                                        v8.removed.add(v7_1);
                                        v7_1.mNextAnim = v2;
                                        if (this.mAddToBackStack) {
                                            v7_1.mBackStackNesting = (v7_1.mBackStackNesting + 1);
                                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                                android.util.Log.v("FragmentManager", new StringBuilder().append("Bump nesting of ").append(v7_1).append(" to ").append(v7_1.mBackStackNesting).toString());
                                            }
                                        }
                                        this.mManager.removeFragment(v7_1, v10, v11);
                                    } else {
                                        v3_0 = 0;
                                        v8.fragment = 0;
                                    }
                                }
                                v5--;
                            }
                        }
                        if (v3_0 == 0) {
                        } else {
                            v3_0.mNextAnim = v1;
                            this.mManager.addFragment(v3_0, 0);
                        }
                        break;
                    case 3:
                        int v3_6 = v8.fragment;
                        v3_6.mNextAnim = v2;
                        this.mManager.removeFragment(v3_6, v10, v11);
                        break;
                    case 4:
                        int v3_5 = v8.fragment;
                        v3_5.mNextAnim = v2;
                        this.mManager.hideFragment(v3_5, v10, v11);
                        break;
                    case 5:
                        int v3_4 = v8.fragment;
                        v3_4.mNextAnim = v1;
                        this.mManager.showFragment(v3_4, v10, v11);
                        break;
                    case 6:
                        int v3_3 = v8.fragment;
                        v3_3.mNextAnim = v2;
                        this.mManager.detachFragment(v3_3, v10, v11);
                        break;
                    case 7:
                        int v3_2 = v8.fragment;
                        v3_2.mNextAnim = v1;
                        this.mManager.attachFragment(v3_2, v10, v11);
                        break;
                    default:
                        throw new IllegalArgumentException(new StringBuilder().append("Unknown cmd: ").append(v8.cmd).toString());
                }
                v8 = v8.next;
            }
            this.mManager.moveToState(this.mManager.mCurState, v10, v11, 1);
            if (this.mAddToBackStack) {
                this.mManager.addBackStackState(this);
            }
            return;
        } else {
            throw new IllegalStateException("addToBackStack() called after commit()");
        }
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int p2)
    {
        this.mBreadCrumbShortTitleRes = p2;
        this.mBreadCrumbShortTitleText = 0;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(CharSequence p2)
    {
        this.mBreadCrumbShortTitleRes = 0;
        this.mBreadCrumbShortTitleText = p2;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int p2)
    {
        this.mBreadCrumbTitleRes = p2;
        this.mBreadCrumbTitleText = 0;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setBreadCrumbTitle(CharSequence p2)
    {
        this.mBreadCrumbTitleRes = 0;
        this.mBreadCrumbTitleText = p2;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setCustomAnimations(int p2, int p3)
    {
        return this.setCustomAnimations(p2, p3, 0, 0);
    }

    public android.support.v4.app.FragmentTransaction setCustomAnimations(int p1, int p2, int p3, int p4)
    {
        this.mEnterAnim = p1;
        this.mExitAnim = p2;
        this.mPopEnterAnim = p3;
        this.mPopExitAnim = p4;
        return this;
    }

    void setEpicenterIn(android.support.v4.util.ArrayMap p4, android.support.v4.app.BackStackRecord$TransitionState p5)
    {
        if ((this.mSharedElementTargetNames != null) && (!p4.isEmpty())) {
            android.view.View v0_1 = ((android.view.View) p4.get(this.mSharedElementTargetNames.get(0)));
            if (v0_1 != null) {
                p5.enteringEpicenterView.epicenter = v0_1;
            }
        }
        return;
    }

    public android.support.v4.app.FragmentTransaction setTransition(int p1)
    {
        this.mTransition = p1;
        return this;
    }

    public android.support.v4.app.FragmentTransaction setTransitionStyle(int p1)
    {
        this.mTransitionStyle = p1;
        return this;
    }

    public android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment p3)
    {
        android.support.v4.app.BackStackRecord$Op v0_1 = new android.support.v4.app.BackStackRecord$Op();
        v0_1.cmd = 5;
        v0_1.fragment = p3;
        this.addOp(v0_1);
        return this;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("BackStackEntry{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        if (this.mIndex >= 0) {
            v0_1.append(" #");
            v0_1.append(this.mIndex);
        }
        if (this.mName != null) {
            v0_1.append(" ");
            v0_1.append(this.mName);
        }
        v0_1.append("}");
        return v0_1.toString();
    }
}
package android.support.v4.app;
abstract class BaseFragmentActivityHoneycomb extends android.support.v4.app.BaseFragmentActivityGingerbread {

    BaseFragmentActivityHoneycomb()
    {
        return;
    }

    public android.view.View onCreateView(android.view.View p4, String p5, android.content.Context p6, android.util.AttributeSet p7)
    {
        android.view.View v0 = this.dispatchFragmentsOnCreateView(p4, p5, p6, p7);
        if ((v0 == null) && (android.os.Build$VERSION.SDK_INT >= 11)) {
            v0 = super.onCreateView(p4, p5, p6, p7);
        }
        return v0;
    }
}
package android.support.v4.app;
public class DialogFragment extends android.support.v4.app.Fragment implements android.content.DialogInterface$OnCancelListener, android.content.DialogInterface$OnDismissListener {
    private static final String SAVED_BACK_STACK_ID = "android:backStackId";
    private static final String SAVED_CANCELABLE = "android:cancelable";
    private static final String SAVED_DIALOG_STATE_TAG = "android:savedDialogState";
    private static final String SAVED_SHOWS_DIALOG = "android:showsDialog";
    private static final String SAVED_STYLE = "android:style";
    private static final String SAVED_THEME = "android:theme";
    public static final int STYLE_NORMAL = 0;
    public static final int STYLE_NO_FRAME = 2;
    public static final int STYLE_NO_INPUT = 3;
    public static final int STYLE_NO_TITLE = 1;
    int mBackStackId;
    boolean mCancelable;
    android.app.Dialog mDialog;
    boolean mDismissed;
    boolean mShownByMe;
    boolean mShowsDialog;
    int mStyle;
    int mTheme;
    boolean mViewDestroyed;

    public DialogFragment()
    {
        this.mStyle = 0;
        this.mTheme = 0;
        this.mCancelable = 1;
        this.mShowsDialog = 1;
        this.mBackStackId = -1;
        return;
    }

    public void dismiss()
    {
        this.dismissInternal(0);
        return;
    }

    public void dismissAllowingStateLoss()
    {
        this.dismissInternal(1);
        return;
    }

    void dismissInternal(boolean p5)
    {
        if (!this.mDismissed) {
            this.mDismissed = 1;
            this.mShownByMe = 0;
            if (this.mDialog != null) {
                this.mDialog.dismiss();
                this.mDialog = 0;
            }
            this.mViewDestroyed = 1;
            if (this.mBackStackId < 0) {
                android.support.v4.app.FragmentTransaction v0 = this.getFragmentManager().beginTransaction();
                v0.remove(this);
                if (!p5) {
                    v0.commit();
                } else {
                    v0.commitAllowingStateLoss();
                }
            } else {
                this.getFragmentManager().popBackStack(this.mBackStackId, 1);
                this.mBackStackId = -1;
            }
        }
        return;
    }

    public android.app.Dialog getDialog()
    {
        return this.mDialog;
    }

    public android.view.LayoutInflater getLayoutInflater(android.os.Bundle p3)
    {
        android.view.LayoutInflater v0_2;
        if (this.mShowsDialog) {
            this.mDialog = this.onCreateDialog(p3);
            if (this.mDialog == null) {
                v0_2 = ((android.view.LayoutInflater) this.mHost.getContext().getSystemService("layout_inflater"));
            } else {
                this.setupDialog(this.mDialog, this.mStyle);
                v0_2 = ((android.view.LayoutInflater) this.mDialog.getContext().getSystemService("layout_inflater"));
            }
        } else {
            v0_2 = super.getLayoutInflater(p3);
        }
        return v0_2;
    }

    public boolean getShowsDialog()
    {
        return this.mShowsDialog;
    }

    public int getTheme()
    {
        return this.mTheme;
    }

    public boolean isCancelable()
    {
        return this.mCancelable;
    }

    public void onActivityCreated(android.os.Bundle p6)
    {
        super.onActivityCreated(p6);
        if (this.mShowsDialog) {
            android.view.View v2 = this.getView();
            if (v2 != null) {
                if (v2.getParent() == null) {
                    this.mDialog.setContentView(v2);
                } else {
                    throw new IllegalStateException("DialogFragment can not be attached to a container view");
                }
            }
            android.support.v4.app.FragmentActivity v0 = this.getActivity();
            if (v0 != null) {
                this.mDialog.setOwnerActivity(v0);
            }
            this.mDialog.setCancelable(this.mCancelable);
            this.mDialog.setOnCancelListener(this);
            this.mDialog.setOnDismissListener(this);
            if (p6 != null) {
                android.os.Bundle v1 = p6.getBundle("android:savedDialogState");
                if (v1 != null) {
                    this.mDialog.onRestoreInstanceState(v1);
                }
            }
        }
        return;
    }

    public void onAttach(android.content.Context p2)
    {
        super.onAttach(p2);
        if (!this.mShownByMe) {
            this.mDismissed = 0;
        }
        return;
    }

    public void onCancel(android.content.DialogInterface p1)
    {
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        int v0_10;
        super.onCreate(p4);
        if (this.mContainerId != 0) {
            v0_10 = 0;
        } else {
            v0_10 = 1;
        }
        this.mShowsDialog = v0_10;
        if (p4 != null) {
            this.mStyle = p4.getInt("android:style", 0);
            this.mTheme = p4.getInt("android:theme", 0);
            this.mCancelable = p4.getBoolean("android:cancelable", 1);
            this.mShowsDialog = p4.getBoolean("android:showsDialog", this.mShowsDialog);
            this.mBackStackId = p4.getInt("android:backStackId", -1);
        }
        return;
    }

    public android.app.Dialog onCreateDialog(android.os.Bundle p4)
    {
        return new android.app.Dialog(this.getActivity(), this.getTheme());
    }

    public void onDestroyView()
    {
        super.onDestroyView();
        if (this.mDialog != null) {
            this.mViewDestroyed = 1;
            this.mDialog.dismiss();
            this.mDialog = 0;
        }
        return;
    }

    public void onDetach()
    {
        super.onDetach();
        if ((!this.mShownByMe) && (!this.mDismissed)) {
            this.mDismissed = 1;
        }
        return;
    }

    public void onDismiss(android.content.DialogInterface p2)
    {
        if (!this.mViewDestroyed) {
            this.dismissInternal(1);
        }
        return;
    }

    public void onSaveInstanceState(android.os.Bundle p4)
    {
        super.onSaveInstanceState(p4);
        if (this.mDialog != null) {
            android.os.Bundle v0 = this.mDialog.onSaveInstanceState();
            if (v0 != null) {
                p4.putBundle("android:savedDialogState", v0);
            }
        }
        if (this.mStyle != 0) {
            p4.putInt("android:style", this.mStyle);
        }
        if (this.mTheme != 0) {
            p4.putInt("android:theme", this.mTheme);
        }
        if (!this.mCancelable) {
            p4.putBoolean("android:cancelable", this.mCancelable);
        }
        if (!this.mShowsDialog) {
            p4.putBoolean("android:showsDialog", this.mShowsDialog);
        }
        if (this.mBackStackId != -1) {
            p4.putInt("android:backStackId", this.mBackStackId);
        }
        return;
    }

    public void onStart()
    {
        super.onStart();
        if (this.mDialog != null) {
            this.mViewDestroyed = 0;
            this.mDialog.show();
        }
        return;
    }

    public void onStop()
    {
        super.onStop();
        if (this.mDialog != null) {
            this.mDialog.hide();
        }
        return;
    }

    public void setCancelable(boolean p2)
    {
        this.mCancelable = p2;
        if (this.mDialog != null) {
            this.mDialog.setCancelable(p2);
        }
        return;
    }

    public void setShowsDialog(boolean p1)
    {
        this.mShowsDialog = p1;
        return;
    }

    public void setStyle(int p3, int p4)
    {
        this.mStyle = p3;
        if ((this.mStyle == 2) || (this.mStyle == 3)) {
            this.mTheme = 16973913;
        }
        if (p4 != 0) {
            this.mTheme = p4;
        }
        return;
    }

    public void setupDialog(android.app.Dialog p3, int p4)
    {
        switch (p4) {
            case 1:
            case 2:
                p3.requestWindowFeature(1);
                break;
            case 3:
                p3.getWindow().addFlags(24);
                break;
        }
        return;
    }

    public int show(android.support.v4.app.FragmentTransaction p3, String p4)
    {
        this.mDismissed = 0;
        this.mShownByMe = 1;
        p3.add(this, p4);
        this.mViewDestroyed = 0;
        this.mBackStackId = p3.commit();
        return this.mBackStackId;
    }

    public void show(android.support.v4.app.FragmentManager p3, String p4)
    {
        this.mDismissed = 0;
        this.mShownByMe = 1;
        android.support.v4.app.FragmentTransaction v0 = p3.beginTransaction();
        v0.add(this, p4);
        v0.commit();
        return;
    }
}
package android.support.v4.app;
 class Fragment$1 extends android.support.v4.app.FragmentContainer {
    final synthetic android.support.v4.app.Fragment this$0;

    Fragment$1(android.support.v4.app.Fragment p1)
    {
        this.this$0 = p1;
        return;
    }

    public android.view.View onFindViewById(int p3)
    {
        if (this.this$0.mView != null) {
            return this.this$0.mView.findViewById(p3);
        } else {
            throw new IllegalStateException("Fragment does not have a view");
        }
    }

    public boolean onHasView()
    {
        int v0_2;
        if (this.this$0.mView == null) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }
}
package android.support.v4.app;
public abstract class FragmentHostCallback extends android.support.v4.app.FragmentContainer {
    private final android.app.Activity mActivity;
    private android.support.v4.util.SimpleArrayMap mAllLoaderManagers;
    private boolean mCheckedForLoaderManager;
    final android.content.Context mContext;
    final android.support.v4.app.FragmentManagerImpl mFragmentManager;
    private final android.os.Handler mHandler;
    private android.support.v4.app.LoaderManagerImpl mLoaderManager;
    private boolean mLoadersStarted;
    private boolean mRetainLoaders;
    final int mWindowAnimations;

    FragmentHostCallback(android.app.Activity p2, android.content.Context p3, android.os.Handler p4, int p5)
    {
        this.mFragmentManager = new android.support.v4.app.FragmentManagerImpl();
        this.mActivity = p2;
        this.mContext = p3;
        this.mHandler = p4;
        this.mWindowAnimations = p5;
        return;
    }

    public FragmentHostCallback(android.content.Context p2, android.os.Handler p3, int p4)
    {
        this(0, p2, p3, p4);
        return;
    }

    FragmentHostCallback(android.support.v4.app.FragmentActivity p3)
    {
        this(p3, p3, p3.mHandler, 0);
        return;
    }

    void doLoaderDestroy()
    {
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doDestroy();
        }
        return;
    }

    void doLoaderRetain()
    {
        if (this.mLoaderManager != null) {
            this.mLoaderManager.doRetain();
        }
        return;
    }

    void doLoaderStart()
    {
        if (!this.mLoadersStarted) {
            this.mLoadersStarted = 1;
            if (this.mLoaderManager == null) {
                if (!this.mCheckedForLoaderManager) {
                    this.mLoaderManager = this.getLoaderManager("(root)", this.mLoadersStarted, 0);
                    if ((this.mLoaderManager != null) && (!this.mLoaderManager.mStarted)) {
                        this.mLoaderManager.doStart();
                    }
                }
            } else {
                this.mLoaderManager.doStart();
            }
            this.mCheckedForLoaderManager = 1;
        }
        return;
    }

    void doLoaderStop(boolean p2)
    {
        this.mRetainLoaders = p2;
        if ((this.mLoaderManager != null) && (this.mLoadersStarted)) {
            this.mLoadersStarted = 0;
            if (!p2) {
                this.mLoaderManager.doStop();
            } else {
                this.mLoaderManager.doRetain();
            }
        }
        return;
    }

    void dumpLoaders(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        p6.print(p4);
        p6.print("mLoadersStarted=");
        p6.println(this.mLoadersStarted);
        if (this.mLoaderManager != null) {
            p6.print(p4);
            p6.print("Loader Manager ");
            p6.print(Integer.toHexString(System.identityHashCode(this.mLoaderManager)));
            p6.println(":");
            this.mLoaderManager.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        return;
    }

    android.app.Activity getActivity()
    {
        return this.mActivity;
    }

    android.content.Context getContext()
    {
        return this.mContext;
    }

    android.support.v4.app.FragmentManagerImpl getFragmentManagerImpl()
    {
        return this.mFragmentManager;
    }

    android.os.Handler getHandler()
    {
        return this.mHandler;
    }

    android.support.v4.app.LoaderManagerImpl getLoaderManager(String p3, boolean p4, boolean p5)
    {
        if (this.mAllLoaderManagers == null) {
            this.mAllLoaderManagers = new android.support.v4.util.SimpleArrayMap();
        }
        android.support.v4.app.LoaderManagerImpl v0_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.get(p3));
        if (v0_1 != null) {
            v0_1.updateHostController(this);
        } else {
            if (p5) {
                v0_1 = new android.support.v4.app.LoaderManagerImpl(p3, this, p4);
                this.mAllLoaderManagers.put(p3, v0_1);
            }
        }
        return v0_1;
    }

    android.support.v4.app.LoaderManagerImpl getLoaderManagerImpl()
    {
        android.support.v4.app.LoaderManagerImpl v0_1;
        if (this.mLoaderManager == null) {
            this.mCheckedForLoaderManager = 1;
            this.mLoaderManager = this.getLoaderManager("(root)", this.mLoadersStarted, 1);
            v0_1 = this.mLoaderManager;
        } else {
            v0_1 = this.mLoaderManager;
        }
        return v0_1;
    }

    boolean getRetainLoaders()
    {
        return this.mRetainLoaders;
    }

    void inactivateFragment(String p3)
    {
        if (this.mAllLoaderManagers != null) {
            android.support.v4.app.LoaderManagerImpl v0_1 = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.get(p3));
            if ((v0_1 != null) && (!v0_1.mRetaining)) {
                v0_1.doDestroy();
                this.mAllLoaderManagers.remove(p3);
            }
        }
        return;
    }

    void onAttachFragment(android.support.v4.app.Fragment p1)
    {
        return;
    }

    public void onDump(String p1, java.io.FileDescriptor p2, java.io.PrintWriter p3, String[] p4)
    {
        return;
    }

    public android.view.View onFindViewById(int p2)
    {
        return 0;
    }

    public abstract Object onGetHost();

    public android.view.LayoutInflater onGetLayoutInflater()
    {
        return ((android.view.LayoutInflater) this.mContext.getSystemService("layout_inflater"));
    }

    public int onGetWindowAnimations()
    {
        return this.mWindowAnimations;
    }

    public boolean onHasView()
    {
        return 1;
    }

    public boolean onHasWindowAnimations()
    {
        return 1;
    }

    public void onRequestPermissionsFromFragment(android.support.v4.app.Fragment p1, String[] p2, int p3)
    {
        return;
    }

    public boolean onShouldSaveFragmentState(android.support.v4.app.Fragment p2)
    {
        return 1;
    }

    public boolean onShouldShowRequestPermissionRationale(String p2)
    {
        return 0;
    }

    public void onStartActivityFromFragment(android.support.v4.app.Fragment p2, android.content.Intent p3, int p4)
    {
        this.onStartActivityFromFragment(p2, p3, p4, 0);
        return;
    }

    public void onStartActivityFromFragment(android.support.v4.app.Fragment p3, android.content.Intent p4, int p5, android.os.Bundle p6)
    {
        if (p5 == -1) {
            this.mContext.startActivity(p4);
            return;
        } else {
            throw new IllegalStateException("Starting activity with a requestCode requires a FragmentActivity host");
        }
    }

    public void onStartIntentSenderFromFragment(android.support.v4.app.Fragment p9, android.content.IntentSender p10, int p11, android.content.Intent p12, int p13, int p14, int p15, android.os.Bundle p16)
    {
        if (p11 == -1) {
            android.support.v4.app.ActivityCompat.startIntentSenderForResult(this.mActivity, p10, p11, p12, p13, p14, p15, p16);
            return;
        } else {
            throw new IllegalStateException("Starting intent sender with a requestCode requires a FragmentActivity host");
        }
    }

    public void onSupportInvalidateOptionsMenu()
    {
        return;
    }

    void reportLoaderStart()
    {
        if (this.mAllLoaderManagers != null) {
            int v0 = this.mAllLoaderManagers.size();
            android.support.v4.app.LoaderManagerImpl[] v3 = new android.support.v4.app.LoaderManagerImpl[v0];
            int v1_1 = (v0 - 1);
            while (v1_1 >= 0) {
                v3[v1_1] = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.valueAt(v1_1));
                v1_1--;
            }
            int v1_0 = 0;
            while (v1_0 < v0) {
                android.support.v4.app.LoaderManagerImpl v2 = v3[v1_0];
                v2.finishRetain();
                v2.doReportStart();
                v1_0++;
            }
        }
        return;
    }

    void restoreLoaderNonConfig(android.support.v4.util.SimpleArrayMap p1)
    {
        this.mAllLoaderManagers = p1;
        return;
    }

    android.support.v4.util.SimpleArrayMap retainLoaderNonConfig()
    {
        int v5 = 0;
        if (this.mAllLoaderManagers != null) {
            int v0 = this.mAllLoaderManagers.size();
            android.support.v4.app.LoaderManagerImpl[] v4 = new android.support.v4.app.LoaderManagerImpl[v0];
            int v2_1 = (v0 - 1);
            while (v2_1 >= 0) {
                v4[v2_1] = ((android.support.v4.app.LoaderManagerImpl) this.mAllLoaderManagers.valueAt(v2_1));
                v2_1--;
            }
            boolean v1 = this.getRetainLoaders();
            int v2_0 = 0;
            while (v2_0 < v0) {
                android.support.v4.app.LoaderManagerImpl v3 = v4[v2_0];
                if ((!v3.mRetaining) && (v1)) {
                    if (!v3.mStarted) {
                        v3.doStart();
                    }
                    v3.doRetain();
                }
                if (!v3.mRetaining) {
                    v3.doDestroy();
                    this.mAllLoaderManagers.remove(v3.mWho);
                } else {
                    v5 = 1;
                }
                v2_0++;
            }
        }
        android.support.v4.util.SimpleArrayMap v6_1;
        if (v5 == 0) {
            v6_1 = 0;
        } else {
            v6_1 = this.mAllLoaderManagers;
        }
        return v6_1;
    }
}
package android.support.v4.app;
 class FragmentManagerImpl$5 extends android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener {
    final synthetic android.support.v4.app.FragmentManagerImpl this$0;
    final synthetic android.support.v4.app.Fragment val$fragment;

    FragmentManagerImpl$5(android.support.v4.app.FragmentManagerImpl p1, android.view.View p2, android.view.animation.Animation p3, android.support.v4.app.Fragment p4)
    {
        this.this$0 = p1;
        this.val$fragment = p4;
        super(p2, p3);
        return;
    }

    public void onAnimationEnd(android.view.animation.Animation p7)
    {
        super.onAnimationEnd(p7);
        if (this.val$fragment.mAnimatingAway != null) {
            this.val$fragment.mAnimatingAway = 0;
            this.this$0.moveToState(this.val$fragment, this.val$fragment.mStateAfterAnimating, 0, 0, 0);
        }
        return;
    }
}
package android.support.v4.app;
final class FragmentManagerImpl extends android.support.v4.app.FragmentManager implements android.support.v4.view.LayoutInflaterFactory {
    static final android.view.animation.Interpolator ACCELERATE_CUBIC = None;
    static final android.view.animation.Interpolator ACCELERATE_QUINT = None;
    static final int ANIM_DUR = 220;
    public static final int ANIM_STYLE_CLOSE_ENTER = 3;
    public static final int ANIM_STYLE_CLOSE_EXIT = 4;
    public static final int ANIM_STYLE_FADE_ENTER = 5;
    public static final int ANIM_STYLE_FADE_EXIT = 6;
    public static final int ANIM_STYLE_OPEN_ENTER = 1;
    public static final int ANIM_STYLE_OPEN_EXIT = 2;
    static boolean DEBUG = False;
    static final android.view.animation.Interpolator DECELERATE_CUBIC = None;
    static final android.view.animation.Interpolator DECELERATE_QUINT = None;
    static final boolean HONEYCOMB = False;
    static final String TAG = "FragmentManager";
    static final String TARGET_REQUEST_CODE_STATE_TAG = "android:target_req_state";
    static final String TARGET_STATE_TAG = "android:target_state";
    static final String USER_VISIBLE_HINT_TAG = "android:user_visible_hint";
    static final String VIEW_STATE_TAG = "android:view_state";
    static reflect.Field sAnimationListenerField;
    java.util.ArrayList mActive;
    java.util.ArrayList mAdded;
    java.util.ArrayList mAvailBackStackIndices;
    java.util.ArrayList mAvailIndices;
    java.util.ArrayList mBackStack;
    java.util.ArrayList mBackStackChangeListeners;
    java.util.ArrayList mBackStackIndices;
    android.support.v4.app.FragmentContainer mContainer;
    android.support.v4.app.FragmentController mController;
    java.util.ArrayList mCreatedMenus;
    int mCurState;
    boolean mDestroyed;
    Runnable mExecCommit;
    boolean mExecutingActions;
    boolean mHavePendingDeferredStart;
    android.support.v4.app.FragmentHostCallback mHost;
    boolean mNeedMenuInvalidate;
    String mNoTransactionsBecause;
    android.support.v4.app.Fragment mParent;
    java.util.ArrayList mPendingActions;
    android.util.SparseArray mStateArray;
    android.os.Bundle mStateBundle;
    boolean mStateSaved;
    Runnable[] mTmpActions;

    static FragmentManagerImpl()
    {
        android.view.animation.AccelerateInterpolator v0_0 = 0;
        android.support.v4.app.FragmentManagerImpl.DEBUG = 0;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            v0_0 = 1;
        }
        android.support.v4.app.FragmentManagerImpl.HONEYCOMB = v0_0;
        android.support.v4.app.FragmentManagerImpl.sAnimationListenerField = 0;
        android.support.v4.app.FragmentManagerImpl.DECELERATE_QUINT = new android.view.animation.DecelerateInterpolator(1075838976);
        android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC = new android.view.animation.DecelerateInterpolator(1069547520);
        android.support.v4.app.FragmentManagerImpl.ACCELERATE_QUINT = new android.view.animation.AccelerateInterpolator(1075838976);
        android.support.v4.app.FragmentManagerImpl.ACCELERATE_CUBIC = new android.view.animation.AccelerateInterpolator(1069547520);
        return;
    }

    FragmentManagerImpl()
    {
        this.mCurState = 0;
        this.mStateBundle = 0;
        this.mStateArray = 0;
        this.mExecCommit = new android.support.v4.app.FragmentManagerImpl$1(this);
        return;
    }

    private void checkStateLoss()
    {
        if (!this.mStateSaved) {
            if (this.mNoTransactionsBecause == null) {
                return;
            } else {
                throw new IllegalStateException(new StringBuilder().append("Can not perform this action inside of ").append(this.mNoTransactionsBecause).toString());
            }
        } else {
            throw new IllegalStateException("Can not perform this action after onSaveInstanceState");
        }
    }

    static android.view.animation.Animation makeFadeAnimation(android.content.Context p4, float p5, float p6)
    {
        android.view.animation.AlphaAnimation v0_1 = new android.view.animation.AlphaAnimation(p5, p6);
        v0_1.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC);
        v0_1.setDuration(220);
        return v0_1;
    }

    static android.view.animation.Animation makeOpenCloseAnimation(android.content.Context p11, float p12, float p13, float p14, float p15)
    {
        android.view.animation.AnimationSet v10_1 = new android.view.animation.AnimationSet(0);
        android.view.animation.ScaleAnimation v0_0 = new android.view.animation.ScaleAnimation(p12, p13, p12, p13, 1, 1056964608, 1, 1056964608);
        v0_0.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_QUINT);
        v0_0.setDuration(220);
        v10_1.addAnimation(v0_0);
        android.view.animation.AlphaAnimation v9_1 = new android.view.animation.AlphaAnimation(p14, p15);
        v9_1.setInterpolator(android.support.v4.app.FragmentManagerImpl.DECELERATE_CUBIC);
        v9_1.setDuration(220);
        v10_1.addAnimation(v9_1);
        return v10_1;
    }

    static boolean modifiesAlpha(android.view.animation.Animation p4)
    {
        int v2 = 1;
        if (!(p4 instanceof android.view.animation.AlphaAnimation)) {
            if ((p4 instanceof android.view.animation.AnimationSet)) {
                java.util.List v0 = ((android.view.animation.AnimationSet) p4).getAnimations();
                int v1 = 0;
                while (v1 < v0.size()) {
                    if (!(v0.get(v1) instanceof android.view.animation.AlphaAnimation)) {
                        v1++;
                    }
                    return v2;
                }
            }
            v2 = 0;
        }
        return v2;
    }

    public static int reverseTransit(int p1)
    {
        int v0 = 0;
        switch (p1) {
            case 4097:
                v0 = 8194;
                break;
            case 4099:
                v0 = 4099;
                break;
            case 8194:
                v0 = 4097;
                break;
        }
        return v0;
    }

    private void setHWLayerAnimListenerIfAlpha(android.view.View p6, android.view.animation.Animation p7)
    {
        if ((p6 != null) && ((p7 != null) && (android.support.v4.app.FragmentManagerImpl.shouldRunOnHWLayer(p6, p7)))) {
            android.view.animation.Animation$AnimationListener v2 = 0;
            try {
                if (android.support.v4.app.FragmentManagerImpl.sAnimationListenerField != null) {
                    v2 = ((android.view.animation.Animation$AnimationListener) android.support.v4.app.FragmentManagerImpl.sAnimationListenerField.get(p7));
                } else {
                    android.support.v4.app.FragmentManagerImpl.sAnimationListenerField = android.view.animation.Animation.getDeclaredField("mListener");
                    android.support.v4.app.FragmentManagerImpl.sAnimationListenerField.setAccessible(1);
                }
            } catch (IllegalAccessException v1_1) {
                android.util.Log.e("FragmentManager", "No field with the name mListener is found in Animation class", v1_1);
            } catch (IllegalAccessException v1_0) {
                android.util.Log.e("FragmentManager", "Cannot access Animation\'s mListener field", v1_0);
            }
            android.support.v4.view.ViewCompat.setLayerType(p6, 2, 0);
            p7.setAnimationListener(new android.support.v4.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener(p6, p7, v2));
        }
        return;
    }

    static boolean shouldRunOnHWLayer(android.view.View p2, android.view.animation.Animation p3)
    {
        if ((android.os.Build$VERSION.SDK_INT < 19) || ((android.support.v4.view.ViewCompat.getLayerType(p2) != 0) || ((!android.support.v4.view.ViewCompat.hasOverlappingRendering(p2)) || (!android.support.v4.app.FragmentManagerImpl.modifiesAlpha(p3))))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private void throwException(RuntimeException p8)
    {
        android.util.Log.e("FragmentManager", p8.getMessage());
        android.util.Log.e("FragmentManager", "Activity state:");
        java.io.PrintWriter v2_1 = new java.io.PrintWriter(new android.support.v4.util.LogWriter("FragmentManager"));
        if (this.mHost == null) {
            try {
                String[] v5_1 = new String[0];
                this.dump("  ", 0, v2_1, v5_1);
            } catch (Exception v0_0) {
                android.util.Log.e("FragmentManager", "Failed dumping state", v0_0);
            }
        } else {
            try {
                String[] v6_1 = new String[0];
                this.mHost.onDump("  ", 0, v2_1, v6_1);
            } catch (Exception v0_1) {
                android.util.Log.e("FragmentManager", "Failed dumping state", v0_1);
            }
        }
        throw p8;
    }

    public static int transitToStyleIndex(int p1, boolean p2)
    {
        int v0 = -1;
        switch (p1) {
            case 4097:
                if (!p2) {
                    v0 = 2;
                } else {
                    v0 = 1;
                }
                break;
            case 4099:
                if (!p2) {
                    v0 = 6;
                } else {
                    v0 = 5;
                }
                break;
            case 8194:
                if (!p2) {
                    v0 = 4;
                } else {
                    v0 = 3;
                }
                break;
        }
        return v0;
    }

    void addBackStackState(android.support.v4.app.BackStackRecord p2)
    {
        if (this.mBackStack == null) {
            this.mBackStack = new java.util.ArrayList();
        }
        this.mBackStack.add(p2);
        this.reportBackStackChanged();
        return;
    }

    public void addFragment(android.support.v4.app.Fragment p5, boolean p6)
    {
        if (this.mAdded == null) {
            this.mAdded = new java.util.ArrayList();
        }
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("add: ").append(p5).toString());
        }
        this.makeActive(p5);
        if (!p5.mDetached) {
            if (!this.mAdded.contains(p5)) {
                this.mAdded.add(p5);
                p5.mAdded = 1;
                p5.mRemoving = 0;
                if ((p5.mHasMenu) && (p5.mMenuVisible)) {
                    this.mNeedMenuInvalidate = 1;
                }
                if (p6) {
                    this.moveToState(p5);
                }
            } else {
                throw new IllegalStateException(new StringBuilder().append("Fragment already added: ").append(p5).toString());
            }
        }
        return;
    }

    public void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener p2)
    {
        if (this.mBackStackChangeListeners == null) {
            this.mBackStackChangeListeners = new java.util.ArrayList();
        }
        this.mBackStackChangeListeners.add(p2);
        return;
    }

    public int allocBackStackIndex(android.support.v4.app.BackStackRecord p6)
    {
        try {
            if ((this.mAvailBackStackIndices != null) && (this.mAvailBackStackIndices.size() > 0)) {
                int v0_0 = ((Integer) this.mAvailBackStackIndices.remove((this.mAvailBackStackIndices.size() - 1))).intValue();
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Adding back stack index ").append(v0_0).append(" with ").append(p6).toString());
                }
                this.mBackStackIndices.set(v0_0, p6);
                int v1 = v0_0;
            } else {
                if (this.mBackStackIndices == null) {
                    this.mBackStackIndices = new java.util.ArrayList();
                }
                int v0_1 = this.mBackStackIndices.size();
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Setting back stack index ").append(v0_1).append(" to ").append(p6).toString());
                }
                this.mBackStackIndices.add(p6);
                v1 = v0_1;
            }
        } catch (java.util.ArrayList v2_16) {
            throw v2_16;
        }
        return v1;
    }

    public void attachController(android.support.v4.app.FragmentHostCallback p3, android.support.v4.app.FragmentContainer p4, android.support.v4.app.Fragment p5)
    {
        if (this.mHost == null) {
            this.mHost = p3;
            this.mContainer = p4;
            this.mParent = p5;
            return;
        } else {
            throw new IllegalStateException("Already attached");
        }
    }

    public void attachFragment(android.support.v4.app.Fragment p7, int p8, int p9)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("attach: ").append(p7).toString());
        }
        if (p7.mDetached) {
            p7.mDetached = 0;
            if (!p7.mAdded) {
                if (this.mAdded == null) {
                    this.mAdded = new java.util.ArrayList();
                }
                if (!this.mAdded.contains(p7)) {
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("add from attach: ").append(p7).toString());
                    }
                    this.mAdded.add(p7);
                    p7.mAdded = 1;
                    if ((p7.mHasMenu) && (p7.mMenuVisible)) {
                        this.mNeedMenuInvalidate = 1;
                    }
                    this.moveToState(p7, this.mCurState, p8, p9, 0);
                } else {
                    throw new IllegalStateException(new StringBuilder().append("Fragment already added: ").append(p7).toString());
                }
            }
        }
        return;
    }

    public android.support.v4.app.FragmentTransaction beginTransaction()
    {
        return new android.support.v4.app.BackStackRecord(this);
    }

    public void detachFragment(android.support.v4.app.Fragment p7, int p8, int p9)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("detach: ").append(p7).toString());
        }
        if (!p7.mDetached) {
            p7.mDetached = 1;
            if (p7.mAdded) {
                if (this.mAdded != null) {
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("remove from detach: ").append(p7).toString());
                    }
                    this.mAdded.remove(p7);
                }
                if ((p7.mHasMenu) && (p7.mMenuVisible)) {
                    this.mNeedMenuInvalidate = 1;
                }
                p7.mAdded = 0;
                this.moveToState(p7, 1, p8, p9, 0);
            }
        }
        return;
    }

    public void dispatchActivityCreated()
    {
        this.mStateSaved = 0;
        this.moveToState(2, 0);
        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration p4)
    {
        if (this.mAdded != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_1 != null) {
                    v0_1.performConfigurationChanged(p4);
                }
                v1++;
            }
        }
        return;
    }

    public boolean dispatchContextItemSelected(android.view.MenuItem p4)
    {
        int v2_2;
        if (this.mAdded == null) {
            v2_2 = 0;
        } else {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 == null) || (!v0_1.performContextItemSelected(p4))) {
                    v1++;
                } else {
                    v2_2 = 1;
                }
            }
        }
        return v2_2;
    }

    public void dispatchCreate()
    {
        this.mStateSaved = 0;
        this.moveToState(1, 0);
        return;
    }

    public boolean dispatchCreateOptionsMenu(android.view.Menu p6, android.view.MenuInflater p7)
    {
        int v3 = 0;
        java.util.ArrayList v2_0 = 0;
        if (this.mAdded != null) {
            int v1_1 = 0;
            while (v1_1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_3 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_3 != null) && (v0_3.performCreateOptionsMenu(p6, p7))) {
                    v3 = 1;
                    if (v2_0 == null) {
                        v2_0 = new java.util.ArrayList();
                    }
                    v2_0.add(v0_3);
                }
                v1_1++;
            }
        }
        if (this.mCreatedMenus != null) {
            int v1_0 = 0;
            while (v1_0 < this.mCreatedMenus.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mCreatedMenus.get(v1_0));
                if ((v2_0 == null) || (!v2_0.contains(v0_1))) {
                    v0_1.onDestroyOptionsMenu();
                }
                v1_0++;
            }
        }
        this.mCreatedMenus = v2_0;
        return v3;
    }

    public void dispatchDestroy()
    {
        this.mDestroyed = 1;
        this.execPendingActions();
        this.moveToState(0, 0);
        this.mHost = 0;
        this.mContainer = 0;
        this.mParent = 0;
        return;
    }

    public void dispatchDestroyView()
    {
        this.moveToState(1, 0);
        return;
    }

    public void dispatchLowMemory()
    {
        if (this.mAdded != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_1 != null) {
                    v0_1.performLowMemory();
                }
                v1++;
            }
        }
        return;
    }

    public void dispatchMultiWindowModeChanged(boolean p4)
    {
        if (this.mAdded != null) {
            int v1 = (this.mAdded.size() - 1);
            while (v1 >= 0) {
                android.support.v4.app.Fragment v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_0 != null) {
                    v0_0.performMultiWindowModeChanged(p4);
                }
                v1--;
            }
        }
        return;
    }

    public boolean dispatchOptionsItemSelected(android.view.MenuItem p4)
    {
        int v2_2;
        if (this.mAdded == null) {
            v2_2 = 0;
        } else {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 == null) || (!v0_1.performOptionsItemSelected(p4))) {
                    v1++;
                } else {
                    v2_2 = 1;
                }
            }
        }
        return v2_2;
    }

    public void dispatchOptionsMenuClosed(android.view.Menu p4)
    {
        if (this.mAdded != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_1 != null) {
                    v0_1.performOptionsMenuClosed(p4);
                }
                v1++;
            }
        }
        return;
    }

    public void dispatchPause()
    {
        this.moveToState(4, 0);
        return;
    }

    public void dispatchPictureInPictureModeChanged(boolean p4)
    {
        if (this.mAdded != null) {
            int v1 = (this.mAdded.size() - 1);
            while (v1 >= 0) {
                android.support.v4.app.Fragment v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if (v0_0 != null) {
                    v0_0.performPictureInPictureModeChanged(p4);
                }
                v1--;
            }
        }
        return;
    }

    public boolean dispatchPrepareOptionsMenu(android.view.Menu p5)
    {
        int v2 = 0;
        if (this.mAdded != null) {
            int v1 = 0;
            while (v1 < this.mAdded.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mAdded.get(v1));
                if ((v0_1 != null) && (v0_1.performPrepareOptionsMenu(p5))) {
                    v2 = 1;
                }
                v1++;
            }
        }
        return v2;
    }

    public void dispatchReallyStop()
    {
        this.moveToState(2, 0);
        return;
    }

    public void dispatchResume()
    {
        this.mStateSaved = 0;
        this.moveToState(5, 0);
        return;
    }

    public void dispatchStart()
    {
        this.mStateSaved = 0;
        this.moveToState(4, 0);
        return;
    }

    public void dispatchStop()
    {
        this.mStateSaved = 1;
        this.moveToState(3, 0);
        return;
    }

    void doPendingDeferredStart()
    {
        if (this.mHavePendingDeferredStart) {
            int v2 = 0;
            int v1 = 0;
            while (v1 < this.mActive.size()) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if ((v0_1 != null) && (v0_1.mLoaderManager != null)) {
                    v2 |= v0_1.mLoaderManager.hasRunningLoaders();
                }
                v1++;
            }
            if (v2 == 0) {
                this.mHavePendingDeferredStart = 0;
                this.startPendingDeferredFragments();
            }
        }
        return;
    }

    public void dump(String p9, java.io.FileDescriptor p10, java.io.PrintWriter p11, String[] p12)
    {
        String v4 = new StringBuilder().append(p9).append("    ").toString();
        if (this.mActive != null) {
            int v0_0 = this.mActive.size();
            if (v0_0 > 0) {
                p11.print(p9);
                p11.print("Active Fragments in ");
                p11.print(Integer.toHexString(System.identityHashCode(this)));
                p11.println(":");
                int v3_5 = 0;
                while (v3_5 < v0_0) {
                    android.support.v4.app.Fragment v2_5 = ((android.support.v4.app.Fragment) this.mActive.get(v3_5));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_5);
                    p11.print(": ");
                    p11.println(v2_5);
                    if (v2_5 != null) {
                        v2_5.dump(v4, p10, p11, p12);
                    }
                    v3_5++;
                }
            }
        }
        if (this.mAdded != null) {
            int v0_1 = this.mAdded.size();
            if (v0_1 > 0) {
                p11.print(p9);
                p11.println("Added Fragments:");
                int v3_4 = 0;
                while (v3_4 < v0_1) {
                    android.support.v4.app.Fragment v2_3 = ((android.support.v4.app.Fragment) this.mAdded.get(v3_4));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_4);
                    p11.print(": ");
                    p11.println(v2_3.toString());
                    v3_4++;
                }
            }
        }
        if (this.mCreatedMenus != null) {
            int v0_2 = this.mCreatedMenus.size();
            if (v0_2 > 0) {
                p11.print(p9);
                p11.println("Fragments Created Menus:");
                int v3_3 = 0;
                while (v3_3 < v0_2) {
                    android.support.v4.app.Fragment v2_1 = ((android.support.v4.app.Fragment) this.mCreatedMenus.get(v3_3));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_3);
                    p11.print(": ");
                    p11.println(v2_1.toString());
                    v3_3++;
                }
            }
        }
        if (this.mBackStack != null) {
            int v0_3 = this.mBackStack.size();
            if (v0_3 > 0) {
                p11.print(p9);
                p11.println("Back Stack:");
                int v3_2 = 0;
                while (v3_2 < v0_3) {
                    android.support.v4.app.BackStackRecord v1_3 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v3_2));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_2);
                    p11.print(": ");
                    p11.println(v1_3.toString());
                    v1_3.dump(v4, p10, p11, p12);
                    v3_2++;
                }
            }
        }
        if (this.mBackStackIndices != null) {
            int v0_4 = this.mBackStackIndices.size();
            if (v0_4 > 0) {
                p11.print(p9);
                p11.println("Back Stack Indices:");
                int v3_1 = 0;
                while (v3_1 < v0_4) {
                    android.support.v4.app.BackStackRecord v1_1 = ((android.support.v4.app.BackStackRecord) this.mBackStackIndices.get(v3_1));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_1);
                    p11.print(": ");
                    p11.println(v1_1);
                    v3_1++;
                }
            }
        }
        if ((this.mAvailBackStackIndices != null) && (this.mAvailBackStackIndices.size() > 0)) {
            p11.print(p9);
            p11.print("mAvailBackStackIndices: ");
            p11.println(java.util.Arrays.toString(this.mAvailBackStackIndices.toArray()));
        }
        if (this.mPendingActions != null) {
            int v0_5 = this.mPendingActions.size();
            if (v0_5 > 0) {
                p11.print(p9);
                p11.println("Pending Actions:");
                int v3_0 = 0;
                while (v3_0 < v0_5) {
                    Runnable v5_1 = ((Runnable) this.mPendingActions.get(v3_0));
                    p11.print(p9);
                    p11.print("  #");
                    p11.print(v3_0);
                    p11.print(": ");
                    p11.println(v5_1);
                    v3_0++;
                }
            }
        }
        p11.print(p9);
        p11.println("FragmentManager misc state:");
        p11.print(p9);
        p11.print("  mHost=");
        p11.println(this.mHost);
        p11.print(p9);
        p11.print("  mContainer=");
        p11.println(this.mContainer);
        if (this.mParent != null) {
            p11.print(p9);
            p11.print("  mParent=");
            p11.println(this.mParent);
        }
        p11.print(p9);
        p11.print("  mCurState=");
        p11.print(this.mCurState);
        p11.print(" mStateSaved=");
        p11.print(this.mStateSaved);
        p11.print(" mDestroyed=");
        p11.println(this.mDestroyed);
        if (this.mNeedMenuInvalidate) {
            p11.print(p9);
            p11.print("  mNeedMenuInvalidate=");
            p11.println(this.mNeedMenuInvalidate);
        }
        if (this.mNoTransactionsBecause != null) {
            p11.print(p9);
            p11.print("  mNoTransactionsBecause=");
            p11.println(this.mNoTransactionsBecause);
        }
        if ((this.mAvailIndices != null) && (this.mAvailIndices.size() > 0)) {
            p11.print(p9);
            p11.print("  mAvailIndices: ");
            p11.println(java.util.Arrays.toString(this.mAvailIndices.toArray()));
        }
        return;
    }

    public void enqueueAction(Runnable p3, boolean p4)
    {
        if (!p4) {
            this.checkStateLoss();
        }
        try {
            if ((!this.mDestroyed) && (this.mHost != null)) {
                if (this.mPendingActions == null) {
                    this.mPendingActions = new java.util.ArrayList();
                }
                this.mPendingActions.add(p3);
                if (this.mPendingActions.size() == 1) {
                    this.mHost.getHandler().removeCallbacks(this.mExecCommit);
                    this.mHost.getHandler().post(this.mExecCommit);
                }
                return;
            } else {
                throw new IllegalStateException("Activity has been destroyed");
            }
        } catch (android.os.Handler v0_10) {
            throw v0_10;
        }
    }

    public boolean execPendingActions()
    {
        if (!this.mExecutingActions) {
            if (android.os.Looper.myLooper() == this.mHost.getHandler().getLooper()) {
                int v0 = 0;
                while ((this.mPendingActions != null) && (this.mPendingActions.size() != 0)) {
                    int v2 = this.mPendingActions.size();
                    if ((this.mTmpActions == null) || (this.mTmpActions.length < v2)) {
                        int v3_8 = new Runnable[v2];
                        this.mTmpActions = v3_8;
                    }
                    this.mPendingActions.toArray(this.mTmpActions);
                    this.mPendingActions.clear();
                    this.mHost.getHandler().removeCallbacks(this.mExecCommit);
                    this.mExecutingActions = 1;
                    int v1 = 0;
                    while (v1 < v2) {
                        this.mTmpActions[v1].run();
                        this.mTmpActions[v1] = 0;
                        v1++;
                    }
                    this.mExecutingActions = 0;
                    v0 = 1;
                }
                this.doPendingDeferredStart();
                return v0;
            } else {
                throw new IllegalStateException("Must be called from main thread of fragment host");
            }
        } else {
            throw new IllegalStateException("FragmentManager is already executing transactions");
        }
    }

    public void execSingleAction(Runnable p3, boolean p4)
    {
        if (!this.mExecutingActions) {
            if (android.os.Looper.myLooper() == this.mHost.getHandler().getLooper()) {
                if (!p4) {
                    this.checkStateLoss();
                }
                this.mExecutingActions = 1;
                p3.run();
                this.mExecutingActions = 0;
                this.doPendingDeferredStart();
                return;
            } else {
                throw new IllegalStateException("Must be called from main thread of fragment host");
            }
        } else {
            throw new IllegalStateException("FragmentManager is already executing transactions");
        }
    }

    public boolean executePendingTransactions()
    {
        return this.execPendingActions();
    }

    public android.support.v4.app.Fragment findFragmentById(int p4)
    {
        android.support.v4.app.Fragment v0_0;
        if (this.mAdded == null) {
            if (this.mActive != null) {
                int v1_0 = (this.mActive.size() - 1);
                while (v1_0 >= 0) {
                    v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1_0));
                    if ((v0_0 != null) && (v0_0.mFragmentId == p4)) {
                        return v0_0;
                    } else {
                        v1_0--;
                    }
                }
            }
            v0_0 = 0;
        } else {
            int v1_1 = (this.mAdded.size() - 1);
            while (v1_1 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_0 == null) || (v0_0.mFragmentId != p4)) {
                    v1_1--;
                }
            }
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment findFragmentByTag(String p4)
    {
        if ((this.mAdded == null) || (p4 == null)) {
            if ((this.mActive != null) && (p4 != null)) {
                int v1_0 = (this.mActive.size() - 1);
                while (v1_0 >= 0) {
                    android.support.v4.app.Fragment v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1_0));
                    if ((v0_0 != null) && (p4.equals(v0_0.mTag))) {
                        return v0_0;
                    } else {
                        v1_0--;
                    }
                }
            }
            v0_0 = 0;
        } else {
            int v1_1 = (this.mAdded.size() - 1);
            while (v1_1 >= 0) {
                v0_0 = ((android.support.v4.app.Fragment) this.mAdded.get(v1_1));
                if ((v0_0 == null) || (!p4.equals(v0_0.mTag))) {
                    v1_1--;
                }
            }
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment findFragmentByWho(String p4)
    {
        if ((this.mActive == null) || (p4 == null)) {
            android.support.v4.app.Fragment v0_2 = 0;
        } else {
            int v1 = (this.mActive.size() - 1);
            while (v1 >= 0) {
                android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if (v0_1 != null) {
                    v0_2 = v0_1.findFragmentByWho(p4);
                    if (v0_2 != null) {
                        return v0_2;
                    }
                }
                v1--;
            }
        }
        return v0_2;
    }

    public void freeBackStackIndex(int p4)
    {
        try {
            this.mBackStackIndices.set(p4, 0);
        } catch (java.util.ArrayList v0_3) {
            throw v0_3;
        }
        if (this.mAvailBackStackIndices == null) {
            this.mAvailBackStackIndices = new java.util.ArrayList();
        }
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("Freeing back stack index ").append(p4).toString());
        }
        this.mAvailBackStackIndices.add(Integer.valueOf(p4));
        return;
    }

    public android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int p2)
    {
        return ((android.support.v4.app.FragmentManager$BackStackEntry) this.mBackStack.get(p2));
    }

    public int getBackStackEntryCount()
    {
        int v0_1;
        if (this.mBackStack == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mBackStack.size();
        }
        return v0_1;
    }

    public android.support.v4.app.Fragment getFragment(android.os.Bundle p6, String p7)
    {
        android.support.v4.app.Fragment v0_1;
        int v1 = p6.getInt(p7, -1);
        if (v1 != -1) {
            if (v1 >= this.mActive.size()) {
                this.throwException(new IllegalStateException(new StringBuilder().append("Fragment no longer exists for key ").append(p7).append(": index ").append(v1).toString()));
            }
            v0_1 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
            if (v0_1 == null) {
                this.throwException(new IllegalStateException(new StringBuilder().append("Fragment no longer exists for key ").append(p7).append(": index ").append(v1).toString()));
            }
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    public java.util.List getFragments()
    {
        return this.mActive;
    }

    android.support.v4.view.LayoutInflaterFactory getLayoutInflaterFactory()
    {
        return this;
    }

    public void hideFragment(android.support.v4.app.Fragment p6, int p7, int p8)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("hide: ").append(p6).toString());
        }
        if (!p6.mHidden) {
            p6.mHidden = 1;
            if (p6.mView != null) {
                android.view.animation.Animation v0 = this.loadAnimation(p6, p7, 0, p8);
                if (v0 != null) {
                    this.setHWLayerAnimListenerIfAlpha(p6.mView, v0);
                    p6.mView.startAnimation(v0);
                }
                p6.mView.setVisibility(8);
            }
            if ((p6.mAdded) && ((p6.mHasMenu) && (p6.mMenuVisible))) {
                this.mNeedMenuInvalidate = 1;
            }
            p6.onHiddenChanged(1);
        }
        return;
    }

    public boolean isDestroyed()
    {
        return this.mDestroyed;
    }

    boolean isStateAtLeast(int p2)
    {
        int v0_1;
        if (this.mCurState < p2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment p10, int p11, boolean p12, int p13)
    {
        android.content.Context v1 = p10.onCreateAnimation(p11, p12, p10.mNextAnim);
        if (v1 == null) {
            if (p10.mNextAnim != 0) {
                android.view.animation.Animation v0 = android.view.animation.AnimationUtils.loadAnimation(this.mHost.getContext(), p10.mNextAnim);
                if (v0 != null) {
                    v1 = v0;
                    return v1;
                }
            }
            if (p11 != 0) {
                int v2 = android.support.v4.app.FragmentManagerImpl.transitToStyleIndex(p11, p12);
                if (v2 >= 0) {
                    switch (v2) {
                        case 1:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mHost.getContext(), 1066401792, 1065353216, 0, 1065353216);
                        case 2:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mHost.getContext(), 1065353216, 1064933786, 1065353216, 0);
                            break;
                        case 3:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mHost.getContext(), 1064933786, 1065353216, 0, 1065353216);
                            break;
                        case 4:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeOpenCloseAnimation(this.mHost.getContext(), 1065353216, 1065982362, 1065353216, 0);
                            break;
                        case 5:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeFadeAnimation(this.mHost.getContext(), 0, 1065353216);
                            break;
                        case 6:
                            v1 = android.support.v4.app.FragmentManagerImpl.makeFadeAnimation(this.mHost.getContext(), 1065353216, 0);
                            break;
                        default:
                            if (p13 != 0) {
                                if (p13 != 0) {
                                    v1 = 0;
                                } else {
                                    v1 = 0;
                                }
                            } else {
                                if (!this.mHost.onHasWindowAnimations()) {
                                } else {
                                    p13 = this.mHost.onGetWindowAnimations();
                                }
                            }
                    }
                } else {
                    v1 = 0;
                }
            } else {
                v1 = 0;
            }
        }
        return v1;
    }

    void makeActive(android.support.v4.app.Fragment p4)
    {
        if (p4.mIndex < 0) {
            if ((this.mAvailIndices != null) && (this.mAvailIndices.size() > 0)) {
                p4.setIndex(((Integer) this.mAvailIndices.remove((this.mAvailIndices.size() - 1))).intValue(), this.mParent);
                this.mActive.set(p4.mIndex, p4);
            } else {
                if (this.mActive == null) {
                    this.mActive = new java.util.ArrayList();
                }
                p4.setIndex(this.mActive.size(), this.mParent);
                this.mActive.add(p4);
            }
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Allocated fragment index ").append(p4).toString());
            }
        }
        return;
    }

    void makeInactive(android.support.v4.app.Fragment p4)
    {
        if (p4.mIndex >= 0) {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Freeing fragment index ").append(p4).toString());
            }
            this.mActive.set(p4.mIndex, 0);
            if (this.mAvailIndices == null) {
                this.mAvailIndices = new java.util.ArrayList();
            }
            this.mAvailIndices.add(Integer.valueOf(p4.mIndex));
            this.mHost.inactivateFragment(p4.mWho);
            p4.initState();
        }
        return;
    }

    void moveToState(int p9, int p10, int p11, boolean p12)
    {
        if ((this.mHost != null) || (p9 == 0)) {
            if ((p12) || (this.mCurState != p9)) {
                this.mCurState = p9;
                if (this.mActive != null) {
                    int v7 = 0;
                    int v6 = 0;
                    while (v6 < this.mActive.size()) {
                        android.support.v4.app.Fragment v1_1 = ((android.support.v4.app.Fragment) this.mActive.get(v6));
                        if (v1_1 != null) {
                            this.moveToState(v1_1, p9, p10, p11, 0);
                            if (v1_1.mLoaderManager != null) {
                                v7 |= v1_1.mLoaderManager.hasRunningLoaders();
                            }
                        }
                        v6++;
                    }
                    if (v7 == 0) {
                        this.startPendingDeferredFragments();
                    }
                    if ((this.mNeedMenuInvalidate) && ((this.mHost != null) && (this.mCurState == 5))) {
                        this.mHost.onSupportInvalidateOptionsMenu();
                        this.mNeedMenuInvalidate = 0;
                    }
                }
            }
            return;
        } else {
            throw new IllegalStateException("No host");
        }
    }

    void moveToState(int p2, boolean p3)
    {
        this.moveToState(p2, 0, 0, p3);
        return;
    }

    void moveToState(android.support.v4.app.Fragment p7)
    {
        this.moveToState(p7, this.mCurState, 0, 0, 0);
        return;
    }

    void moveToState(android.support.v4.app.Fragment p18, int p19, int p20, int p21, boolean p22)
    {
        if (((!p18.mAdded) || (p18.mDetached)) && (p19 > 1)) {
            p19 = 1;
        }
        if ((p18.mRemoving) && (p19 > p18.mState)) {
            p19 = p18.mState;
        }
        if ((p18.mDeferStart) && ((p18.mState < 4) && (p19 > 3))) {
            p19 = 3;
        }
        if (p18.mState >= p19) {
            if (p18.mState <= p19) {
                if (p18.mState != p19) {
                    android.util.Log.w("FragmentManager", new StringBuilder().append("moveToState: Fragment state for ").append(p18).append(" not updated inline; ").append("expected state ").append(p19).append(" found ").append(p18.mState).toString());
                    p18.mState = p19;
                }
            } else {
                switch (p18.mState) {
                    case 1:
                        break;
                    case 2:
                        if (p19 >= 2) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom ACTIVITY_CREATED: ").append(p18).toString());
                            }
                            if ((p18.mView != null) && ((this.mHost.onShouldSaveFragmentState(p18)) && (p18.mSavedViewState == null))) {
                                this.saveFragmentViewState(p18);
                            }
                            p18.performDestroyView();
                            if ((p18.mView != null) && (p18.mContainer != null)) {
                                android.view.animation.Animation v10_0 = 0;
                                if ((this.mCurState > 0) && (!this.mDestroyed)) {
                                    v10_0 = this.loadAnimation(p18, p20, 0, p21);
                                }
                                if (v10_0 != null) {
                                    p18.mAnimatingAway = p18.mView;
                                    p18.mStateAfterAnimating = p19;
                                    v10_0.setAnimationListener(new android.support.v4.app.FragmentManagerImpl$5(this, p18.mView, v10_0, p18));
                                    p18.mView.startAnimation(v10_0);
                                }
                                p18.mContainer.removeView(p18.mView);
                            }
                            p18.mContainer = 0;
                            p18.mView = 0;
                            p18.mInnerView = 0;
                        }
                        break;
                    case 3:
                        if (p19 >= 3) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom STOPPED: ").append(p18).toString());
                            }
                            p18.performReallyStop();
                        }
                        break;
                    case 4:
                        if (p19 >= 4) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom STARTED: ").append(p18).toString());
                            }
                            p18.performStop();
                        }
                        break;
                    case 5:
                        if (p19 >= 5) {
                        } else {
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom RESUMED: ").append(p18).toString());
                            }
                            p18.performPause();
                        }
                        break;
                    default:
                }
                if (p19 >= 1) {
                } else {
                    if ((this.mDestroyed) && (p18.mAnimatingAway != null)) {
                        android.view.View v15 = p18.mAnimatingAway;
                        p18.mAnimatingAway = 0;
                        v15.clearAnimation();
                    }
                    if (p18.mAnimatingAway == null) {
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("movefrom CREATED: ").append(p18).toString());
                        }
                        if (p18.mRetaining) {
                            p18.mState = 0;
                        } else {
                            p18.performDestroy();
                        }
                        p18.performDetach();
                        if (p22) {
                        } else {
                            if (p18.mRetaining) {
                                p18.mHost = 0;
                                p18.mParentFragment = 0;
                                p18.mFragmentManager = 0;
                            } else {
                                this.makeInactive(p18);
                            }
                        }
                    } else {
                        p18.mStateAfterAnimating = p19;
                        p19 = 1;
                    }
                }
            }
        } else {
            if ((!p18.mFromLayout) || (p18.mInLayout)) {
                if (p18.mAnimatingAway != null) {
                    p18.mAnimatingAway = 0;
                    this.moveToState(p18, p18.mStateAfterAnimating, 0, 0, 1);
                }
                switch (p18.mState) {
                    case 0:
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("moveto CREATED: ").append(p18).toString());
                        }
                        if (p18.mSavedFragmentState != null) {
                            p18.mSavedFragmentState.setClassLoader(this.mHost.getContext().getClassLoader());
                            p18.mSavedViewState = p18.mSavedFragmentState.getSparseParcelableArray("android:view_state");
                            p18.mTarget = this.getFragment(p18.mSavedFragmentState, "android:target_state");
                            if (p18.mTarget != null) {
                                p18.mTargetRequestCode = p18.mSavedFragmentState.getInt("android:target_req_state", 0);
                            }
                            p18.mUserVisibleHint = p18.mSavedFragmentState.getBoolean("android:user_visible_hint", 1);
                            if (!p18.mUserVisibleHint) {
                                p18.mDeferStart = 1;
                                if (p19 > 3) {
                                    p19 = 3;
                                }
                            }
                        }
                        android.view.View v4_64;
                        p18.mHost = this.mHost;
                        p18.mParentFragment = this.mParent;
                        if (this.mParent == null) {
                            v4_64 = this.mHost.getFragmentManagerImpl();
                        } else {
                            v4_64 = this.mParent.mChildFragmentManager;
                        }
                        p18.mFragmentManager = v4_64;
                        p18.mCalled = 0;
                        p18.onAttach(this.mHost.getContext());
                        if (p18.mCalled) {
                            if (p18.mParentFragment != null) {
                                p18.mParentFragment.onAttachFragment(p18);
                            } else {
                                this.mHost.onAttachFragment(p18);
                            }
                            if (p18.mRetaining) {
                                p18.restoreChildFragmentState(p18.mSavedFragmentState);
                                p18.mState = 1;
                            } else {
                                p18.performCreate(p18.mSavedFragmentState);
                            }
                            p18.mRetaining = 0;
                            if (p18.mFromLayout) {
                                p18.mView = p18.performCreateView(p18.getLayoutInflater(p18.mSavedFragmentState), 0, p18.mSavedFragmentState);
                                if (p18.mView == null) {
                                    p18.mInnerView = 0;
                                } else {
                                    p18.mInnerView = p18.mView;
                                    if (android.os.Build$VERSION.SDK_INT < 11) {
                                        p18.mView = android.support.v4.app.NoSaveStateFrameLayout.wrap(p18.mView);
                                    } else {
                                        android.support.v4.view.ViewCompat.setSaveFromParentEnabled(p18.mView, 0);
                                    }
                                    if (p18.mHidden) {
                                        p18.mView.setVisibility(8);
                                    }
                                    p18.onViewCreated(p18.mView, p18.mSavedFragmentState);
                                }
                            } else {
                                if (p19 <= 1) {
                                    if (p19 <= 2) {
                                        if (p19 <= 3) {
                                            if (p19 <= 4) {
                                            } else {
                                                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                                    android.util.Log.v("FragmentManager", new StringBuilder().append("moveto RESUMED: ").append(p18).toString());
                                                }
                                                p18.performResume();
                                                p18.mSavedFragmentState = 0;
                                                p18.mSavedViewState = 0;
                                            }
                                        } else {
                                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                                android.util.Log.v("FragmentManager", new StringBuilder().append("moveto STARTED: ").append(p18).toString());
                                            }
                                            p18.performStart();
                                        }
                                    } else {
                                        p18.mState = 3;
                                    }
                                } else {
                                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                        android.util.Log.v("FragmentManager", new StringBuilder().append("moveto ACTIVITY_CREATED: ").append(p18).toString());
                                    }
                                    if (!p18.mFromLayout) {
                                        android.view.ViewGroup v11_0 = 0;
                                        if (p18.mContainerId != 0) {
                                            if (p18.mContainerId == -1) {
                                                this.throwException(new IllegalArgumentException(new StringBuilder().append("Cannot create fragment ").append(p18).append(" for a container view with no id").toString()));
                                            }
                                            v11_0 = ((android.view.ViewGroup) this.mContainer.onFindViewById(p18.mContainerId));
                                            if ((v11_0 == null) && (!p18.mRestored)) {
                                                try {
                                                    String v14 = p18.getResources().getResourceName(p18.mContainerId);
                                                } catch (android.content.res.Resources$NotFoundException v12) {
                                                    v14 = "unknown";
                                                }
                                                this.throwException(new IllegalArgumentException(new StringBuilder().append("No view found for id 0x").append(Integer.toHexString(p18.mContainerId)).append(" (").append(v14).append(") for fragment ").append(p18).toString()));
                                            }
                                        }
                                        p18.mContainer = v11_0;
                                        p18.mView = p18.performCreateView(p18.getLayoutInflater(p18.mSavedFragmentState), v11_0, p18.mSavedFragmentState);
                                        if (p18.mView == null) {
                                            p18.mInnerView = 0;
                                        } else {
                                            p18.mInnerView = p18.mView;
                                            if (android.os.Build$VERSION.SDK_INT < 11) {
                                                p18.mView = android.support.v4.app.NoSaveStateFrameLayout.wrap(p18.mView);
                                            } else {
                                                android.support.v4.view.ViewCompat.setSaveFromParentEnabled(p18.mView, 0);
                                            }
                                            if (v11_0 != null) {
                                                android.view.animation.Animation v10_1 = this.loadAnimation(p18, p20, 1, p21);
                                                if (v10_1 != null) {
                                                    this.setHWLayerAnimListenerIfAlpha(p18.mView, v10_1);
                                                    p18.mView.startAnimation(v10_1);
                                                }
                                                v11_0.addView(p18.mView);
                                            }
                                            if (p18.mHidden) {
                                                p18.mView.setVisibility(8);
                                            }
                                            p18.onViewCreated(p18.mView, p18.mSavedFragmentState);
                                        }
                                    }
                                    p18.performActivityCreated(p18.mSavedFragmentState);
                                    if (p18.mView != null) {
                                        p18.restoreViewState(p18.mSavedFragmentState);
                                    }
                                    p18.mSavedFragmentState = 0;
                                }
                            }
                        } else {
                            throw new android.support.v4.app.SuperNotCalledException(new StringBuilder().append("Fragment ").append(p18).append(" did not call through to super.onAttach()").toString());
                        }
                    default:
                }
            }
        }
        return;
    }

    public void noteStateNotSaved()
    {
        this.mStateSaved = 0;
        return;
    }

    public android.view.View onCreateView(android.view.View p12, String p13, android.content.Context p14, android.util.AttributeSet p15)
    {
        android.view.View v0_0 = 0;
        if ("fragment".equals(p13)) {
            String v8 = p15.getAttributeValue(0, "class");
            android.content.res.TypedArray v6 = p14.obtainStyledAttributes(p15, android.support.v4.app.FragmentManagerImpl$FragmentTag.Fragment);
            if (v8 == null) {
                v8 = v6.getString(0);
            }
            int v9 = v6.getResourceId(1, -1);
            String v10 = v6.getString(2);
            v6.recycle();
            if (android.support.v4.app.Fragment.isSupportFragmentClass(this.mHost.getContext(), v8)) {
                int v7;
                if (p12 == null) {
                    v7 = 0;
                } else {
                    v7 = p12.getId();
                }
                if ((v7 != -1) || ((v9 != -1) || (v10 != null))) {
                    android.support.v4.app.Fragment v1;
                    if (v9 == -1) {
                        v1 = 0;
                    } else {
                        v1 = this.findFragmentById(v9);
                    }
                    if ((v1 == null) && (v10 != null)) {
                        v1 = this.findFragmentByTag(v10);
                    }
                    if ((v1 == null) && (v7 != -1)) {
                        v1 = this.findFragmentById(v7);
                    }
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("onCreateView: id=0x").append(Integer.toHexString(v9)).append(" fname=").append(v8).append(" existing=").append(v1).toString());
                    }
                    if (v1 != null) {
                        if (!v1.mInLayout) {
                            v1.mInLayout = 1;
                            v1.mHost = this.mHost;
                            if (!v1.mRetaining) {
                                v1.onInflate(this.mHost.getContext(), p15, v1.mSavedFragmentState);
                            }
                        } else {
                            throw new IllegalArgumentException(new StringBuilder().append(p15.getPositionDescription()).append(": Duplicate id 0x").append(Integer.toHexString(v9)).append(", tag ").append(v10).append(", or parent id 0x").append(Integer.toHexString(v7)).append(" with another fragment for ").append(v8).toString());
                        }
                    } else {
                        android.view.View v0_2;
                        v1 = android.support.v4.app.Fragment.instantiate(p14, v8);
                        v1.mFromLayout = 1;
                        if (v9 == 0) {
                            v0_2 = v7;
                        } else {
                            v0_2 = v9;
                        }
                        v1.mFragmentId = v0_2;
                        v1.mContainerId = v7;
                        v1.mTag = v10;
                        v1.mInLayout = 1;
                        v1.mFragmentManager = this;
                        v1.mHost = this.mHost;
                        v1.onInflate(this.mHost.getContext(), p15, v1.mSavedFragmentState);
                        this.addFragment(v1, 1);
                    }
                    if ((this.mCurState >= 1) || (!v1.mFromLayout)) {
                        this.moveToState(v1);
                    } else {
                        this.moveToState(v1, 1, 0, 0, 0);
                    }
                    if (v1.mView != null) {
                        if (v9 != 0) {
                            v1.mView.setId(v9);
                        }
                        if (v1.mView.getTag() == null) {
                            v1.mView.setTag(v10);
                        }
                        v0_0 = v1.mView;
                    } else {
                        throw new IllegalStateException(new StringBuilder().append("Fragment ").append(v8).append(" did not create a view.").toString());
                    }
                } else {
                    throw new IllegalArgumentException(new StringBuilder().append(p15.getPositionDescription()).append(": Must specify unique android:id, android:tag, or have a parent with an id for ").append(v8).toString());
                }
            }
        }
        return v0_0;
    }

    public void performPendingDeferredStart(android.support.v4.app.Fragment p7)
    {
        if (p7.mDeferStart) {
            if (!this.mExecutingActions) {
                p7.mDeferStart = 0;
                this.moveToState(p7, this.mCurState, 0, 0, 0);
            } else {
                this.mHavePendingDeferredStart = 1;
            }
        }
        return;
    }

    public void popBackStack()
    {
        this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$2(this), 0);
        return;
    }

    public void popBackStack(int p4, int p5)
    {
        if (p4 >= 0) {
            this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$4(this, p4, p5), 0);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Bad id: ").append(p4).toString());
        }
    }

    public void popBackStack(String p3, int p4)
    {
        this.enqueueAction(new android.support.v4.app.FragmentManagerImpl$3(this, p3, p4), 0);
        return;
    }

    public boolean popBackStackImmediate()
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        return this.popBackStackState(this.mHost.getHandler(), 0, -1, 0);
    }

    public boolean popBackStackImmediate(int p4, int p5)
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        if (p4 >= 0) {
            return this.popBackStackState(this.mHost.getHandler(), 0, p4, p5);
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Bad id: ").append(p4).toString());
        }
    }

    public boolean popBackStackImmediate(String p3, int p4)
    {
        this.checkStateLoss();
        this.executePendingTransactions();
        return this.popBackStackState(this.mHost.getHandler(), p3, -1, p4);
    }

    boolean popBackStackState(android.os.Handler p13, String p14, int p15, int p16)
    {
        int v9_4;
        if (this.mBackStack != null) {
            if ((p14 != null) || ((p15 >= 0) || ((p16 & 1) != 0))) {
                int v4 = -1;
                if ((p14 != null) || (p15 >= 0)) {
                    v4 = (this.mBackStack.size() - 1);
                    while (v4 >= 0) {
                        android.support.v4.app.BackStackRecord v1_3 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v4));
                        if (((p14 != null) && (p14.equals(v1_3.getName()))) || ((p15 >= 0) && (p15 == v1_3.mIndex))) {
                            break;
                        }
                        v4--;
                    }
                    if (v4 >= 0) {
                        if ((p16 & 1) != 0) {
                            v4--;
                            while (v4 >= 0) {
                                android.support.v4.app.BackStackRecord v1_5 = ((android.support.v4.app.BackStackRecord) this.mBackStack.get(v4));
                                if (((p14 == null) || (!p14.equals(v1_5.getName()))) && ((p15 < 0) || (p15 != v1_5.mIndex))) {
                                    break;
                                }
                                v4--;
                            }
                        }
                    } else {
                        v9_4 = 0;
                        return v9_4;
                    }
                }
                if (v4 != (this.mBackStack.size() - 1)) {
                    java.util.ArrayList v8_1 = new java.util.ArrayList();
                    int v3_1 = (this.mBackStack.size() - 1);
                    while (v3_1 > v4) {
                        v8_1.add(this.mBackStack.remove(v3_1));
                        v3_1--;
                    }
                    int v0 = (v8_1.size() - 1);
                    android.util.SparseArray v2_3 = new android.util.SparseArray();
                    android.util.SparseArray v6_3 = new android.util.SparseArray();
                    if (this.mCurState >= 1) {
                        int v3_0 = 0;
                        while (v3_0 <= v0) {
                            ((android.support.v4.app.BackStackRecord) v8_1.get(v3_0)).calculateBackFragments(v2_3, v6_3);
                            v3_0++;
                        }
                    }
                    android.support.v4.app.BackStackRecord$TransitionState v7 = 0;
                    int v3_2 = 0;
                    while (v3_2 <= v0) {
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("Popping back stack state: ").append(v8_1.get(v3_2)).toString());
                        }
                        int v10_8;
                        int v9_31 = v8_1.get(v3_2);
                        if (v3_2 != v0) {
                            v10_8 = 0;
                        } else {
                            v10_8 = 1;
                        }
                        v7 = ((android.support.v4.app.BackStackRecord) v9_31).popFromBackStack(v10_8, v7, v2_3, v6_3);
                        v3_2++;
                    }
                    this.reportBackStackChanged();
                } else {
                    v9_4 = 0;
                    return v9_4;
                }
            } else {
                int v5 = (this.mBackStack.size() - 1);
                if (v5 >= 0) {
                    android.support.v4.app.BackStackRecord v1_1 = ((android.support.v4.app.BackStackRecord) this.mBackStack.remove(v5));
                    android.util.SparseArray v2_1 = new android.util.SparseArray();
                    android.util.SparseArray v6_1 = new android.util.SparseArray();
                    if (this.mCurState >= 1) {
                        v1_1.calculateBackFragments(v2_1, v6_1);
                    }
                    v1_1.popFromBackStack(1, 0, v2_1, v6_1);
                    this.reportBackStackChanged();
                } else {
                    v9_4 = 0;
                    return v9_4;
                }
            }
            v9_4 = 1;
        } else {
            v9_4 = 0;
        }
        return v9_4;
    }

    public void putFragment(android.os.Bundle p4, String p5, android.support.v4.app.Fragment p6)
    {
        if (p6.mIndex < 0) {
            this.throwException(new IllegalStateException(new StringBuilder().append("Fragment ").append(p6).append(" is not currently in the FragmentManager").toString()));
        }
        p4.putInt(p5, p6.mIndex);
        return;
    }

    public void removeFragment(android.support.v4.app.Fragment p8, int p9, int p10)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("remove: ").append(p8).append(" nesting=").append(p8.mBackStackNesting).toString());
        }
        int v6;
        if (p8.isInBackStack()) {
            v6 = 0;
        } else {
            v6 = 1;
        }
        if ((!p8.mDetached) || (v6 != 0)) {
            if (this.mAdded != null) {
                this.mAdded.remove(p8);
            }
            if ((p8.mHasMenu) && (p8.mMenuVisible)) {
                this.mNeedMenuInvalidate = 1;
            }
            int v2_4;
            p8.mAdded = 0;
            p8.mRemoving = 1;
            if (v6 == 0) {
                v2_4 = 1;
            } else {
                v2_4 = 0;
            }
            this.moveToState(p8, v2_4, p9, p10, 0);
        }
        return;
    }

    public void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener p2)
    {
        if (this.mBackStackChangeListeners != null) {
            this.mBackStackChangeListeners.remove(p2);
        }
        return;
    }

    void reportBackStackChanged()
    {
        if (this.mBackStackChangeListeners != null) {
            int v0 = 0;
            while (v0 < this.mBackStackChangeListeners.size()) {
                ((android.support.v4.app.FragmentManager$OnBackStackChangedListener) this.mBackStackChangeListeners.get(v0)).onBackStackChanged();
                v0++;
            }
        }
        return;
    }

    void restoreAllState(android.os.Parcelable p15, android.support.v4.app.FragmentManagerNonConfig p16)
    {
        if ((p15 != null) && (((android.support.v4.app.FragmentManagerState) p15).mActive != null)) {
            java.util.List v2 = 0;
            if (p16 != null) {
                int v3_0;
                java.util.List v9_1 = p16.getFragments();
                v2 = p16.getChildNonConfigs();
                if (v9_1 == null) {
                    v3_0 = 0;
                } else {
                    v3_0 = v9_1.size();
                }
                int v7_1 = 0;
                while (v7_1 < v3_0) {
                    android.support.v4.app.Fragment v4_6 = ((android.support.v4.app.Fragment) v9_1.get(v7_1));
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: re-attaching retained ").append(v4_6).toString());
                    }
                    android.support.v4.app.FragmentState v6_1 = ((android.support.v4.app.FragmentManagerState) p15).mActive[v4_6.mIndex];
                    v6_1.mInstance = v4_6;
                    v4_6.mSavedViewState = 0;
                    v4_6.mBackStackNesting = 0;
                    v4_6.mInLayout = 0;
                    v4_6.mAdded = 0;
                    v4_6.mTarget = 0;
                    if (v6_1.mSavedFragmentState != null) {
                        v6_1.mSavedFragmentState.setClassLoader(this.mHost.getContext().getClassLoader());
                        v4_6.mSavedViewState = v6_1.mSavedFragmentState.getSparseParcelableArray("android:view_state");
                        v4_6.mSavedFragmentState = v6_1.mSavedFragmentState;
                    }
                    v7_1++;
                }
            }
            this.mActive = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p15).mActive.length);
            if (this.mAvailIndices != null) {
                this.mAvailIndices.clear();
            }
            int v7_4 = 0;
            while (v7_4 < ((android.support.v4.app.FragmentManagerState) p15).mActive.length) {
                android.support.v4.app.FragmentState v6_0 = ((android.support.v4.app.FragmentManagerState) p15).mActive[v7_4];
                if (v6_0 == null) {
                    this.mActive.add(0);
                    if (this.mAvailIndices == null) {
                        this.mAvailIndices = new java.util.ArrayList();
                    }
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: avail #").append(v7_4).toString());
                    }
                    this.mAvailIndices.add(Integer.valueOf(v7_4));
                } else {
                    android.support.v4.app.FragmentManagerNonConfig v1_0 = 0;
                    if ((v2 != null) && (v7_4 < v2.size())) {
                        v1_0 = ((android.support.v4.app.FragmentManagerNonConfig) v2.get(v7_4));
                    }
                    android.support.v4.app.Fragment v4_4 = v6_0.instantiate(this.mHost, this.mParent, v1_0);
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: active #").append(v7_4).append(": ").append(v4_4).toString());
                    }
                    this.mActive.add(v4_4);
                    v6_0.mInstance = 0;
                }
                v7_4++;
            }
            if (p16 != null) {
                int v3_1;
                java.util.List v9_0 = p16.getFragments();
                if (v9_0 == null) {
                    v3_1 = 0;
                } else {
                    v3_1 = v9_0.size();
                }
                int v7_3 = 0;
                while (v7_3 < v3_1) {
                    android.support.v4.app.Fragment v4_3 = ((android.support.v4.app.Fragment) v9_0.get(v7_3));
                    if (v4_3.mTargetIndex >= 0) {
                        if (v4_3.mTargetIndex >= this.mActive.size()) {
                            android.util.Log.w("FragmentManager", new StringBuilder().append("Re-attaching retained fragment ").append(v4_3).append(" target no longer exists: ").append(v4_3.mTargetIndex).toString());
                            v4_3.mTarget = 0;
                        } else {
                            v4_3.mTarget = ((android.support.v4.app.Fragment) this.mActive.get(v4_3.mTargetIndex));
                        }
                    }
                    v7_3++;
                }
            }
            if (((android.support.v4.app.FragmentManagerState) p15).mAdded == null) {
                this.mAdded = 0;
            } else {
                this.mAdded = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p15).mAdded.length);
                int v7_2 = 0;
                while (v7_2 < ((android.support.v4.app.FragmentManagerState) p15).mAdded.length) {
                    android.support.v4.app.Fragment v4_1 = ((android.support.v4.app.Fragment) this.mActive.get(((android.support.v4.app.FragmentManagerState) p15).mAdded[v7_2]));
                    if (v4_1 == null) {
                        this.throwException(new IllegalStateException(new StringBuilder().append("No instantiated fragment for index #").append(((android.support.v4.app.FragmentManagerState) p15).mAdded[v7_2]).toString()));
                    }
                    v4_1.mAdded = 1;
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: added #").append(v7_2).append(": ").append(v4_1).toString());
                    }
                    if (!this.mAdded.contains(v4_1)) {
                        this.mAdded.add(v4_1);
                        v7_2++;
                    } else {
                        throw new IllegalStateException("Already added!");
                    }
                }
            }
            if (((android.support.v4.app.FragmentManagerState) p15).mBackStack == null) {
                this.mBackStack = 0;
            } else {
                this.mBackStack = new java.util.ArrayList(((android.support.v4.app.FragmentManagerState) p15).mBackStack.length);
                int v7_0 = 0;
                while (v7_0 < ((android.support.v4.app.FragmentManagerState) p15).mBackStack.length) {
                    android.support.v4.app.BackStackRecord v0 = ((android.support.v4.app.FragmentManagerState) p15).mBackStack[v7_0].instantiate(this);
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("restoreAllState: back stack #").append(v7_0).append(" (index ").append(v0.mIndex).append("): ").append(v0).toString());
                        v0.dump("  ", new java.io.PrintWriter(new android.support.v4.util.LogWriter("FragmentManager")), 0);
                    }
                    this.mBackStack.add(v0);
                    if (v0.mIndex >= 0) {
                        this.setBackStackIndex(v0.mIndex, v0);
                    }
                    v7_0++;
                }
            }
        }
        return;
    }

    android.support.v4.app.FragmentManagerNonConfig retainNonConfig()
    {
        java.util.ArrayList v4_0 = 0;
        java.util.ArrayList v2_0 = 0;
        if (this.mActive != null) {
            int v5 = 0;
            while (v5 < this.mActive.size()) {
                android.support.v4.app.Fragment v3_1 = ((android.support.v4.app.Fragment) this.mActive.get(v5));
                if (v3_1 != null) {
                    if (v3_1.mRetainInstance) {
                        if (v4_0 == null) {
                            v4_0 = new java.util.ArrayList();
                        }
                        String v7_7;
                        v4_0.add(v3_1);
                        v3_1.mRetaining = 1;
                        if (v3_1.mTarget == null) {
                            v7_7 = -1;
                        } else {
                            v7_7 = v3_1.mTarget.mIndex;
                        }
                        v3_1.mTargetIndex = v7_7;
                        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                            android.util.Log.v("FragmentManager", new StringBuilder().append("retainNonConfig: keeping retained ").append(v3_1).toString());
                        }
                    }
                    int v0 = 0;
                    if (v3_1.mChildFragmentManager != null) {
                        android.support.v4.app.FragmentManagerNonConfig v1 = v3_1.mChildFragmentManager.retainNonConfig();
                        if (v1 != null) {
                            if (v2_0 == null) {
                                v2_0 = new java.util.ArrayList();
                                int v6 = 0;
                                while (v6 < v5) {
                                    v2_0.add(0);
                                    v6++;
                                }
                            }
                            v2_0.add(v1);
                            v0 = 1;
                        }
                    }
                    if ((v2_0 != null) && (v0 == 0)) {
                        v2_0.add(0);
                    }
                }
                v5++;
            }
        }
        if ((v4_0 != null) || (v2_0 != null)) {
            String v7_1 = new android.support.v4.app.FragmentManagerNonConfig(v4_0, v2_0);
        } else {
            v7_1 = 0;
        }
        return v7_1;
    }

    android.os.Parcelable saveAllState()
    {
        android.support.v4.app.FragmentManagerState v5_0 = 0;
        this.execPendingActions();
        if (android.support.v4.app.FragmentManagerImpl.HONEYCOMB) {
            this.mStateSaved = 1;
        }
        if ((this.mActive != null) && (this.mActive.size() > 0)) {
            int v0_0 = this.mActive.size();
            android.support.v4.app.FragmentState[] v1 = new android.support.v4.app.FragmentState[v0_0];
            int v7 = 0;
            int v8_1 = 0;
            while (v8_1 < v0_0) {
                android.support.v4.app.Fragment v4_1 = ((android.support.v4.app.Fragment) this.mActive.get(v8_1));
                if (v4_1 != null) {
                    if (v4_1.mIndex < 0) {
                        this.throwException(new IllegalStateException(new StringBuilder().append("Failure saving state: active ").append(v4_1).append(" has cleared index: ").append(v4_1.mIndex).toString()));
                    }
                    v7 = 1;
                    android.support.v4.app.FragmentState v6_1 = new android.support.v4.app.FragmentState(v4_1);
                    v1[v8_1] = v6_1;
                    if ((v4_1.mState <= 0) || (v6_1.mSavedFragmentState != null)) {
                        v6_1.mSavedFragmentState = v4_1.mSavedFragmentState;
                    } else {
                        v6_1.mSavedFragmentState = this.saveFragmentBasicState(v4_1);
                        if (v4_1.mTarget != null) {
                            if (v4_1.mTarget.mIndex < 0) {
                                this.throwException(new IllegalStateException(new StringBuilder().append("Failure saving state: ").append(v4_1).append(" has target not in fragment manager: ").append(v4_1.mTarget).toString()));
                            }
                            if (v6_1.mSavedFragmentState == null) {
                                v6_1.mSavedFragmentState = new android.os.Bundle();
                            }
                            this.putFragment(v6_1.mSavedFragmentState, "android:target_state", v4_1.mTarget);
                            if (v4_1.mTargetRequestCode != 0) {
                                v6_1.mSavedFragmentState.putInt("android:target_req_state", v4_1.mTargetRequestCode);
                            }
                        }
                    }
                    if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                        android.util.Log.v("FragmentManager", new StringBuilder().append("Saved state of ").append(v4_1).append(": ").append(v6_1.mSavedFragmentState).toString());
                    }
                }
                v8_1++;
            }
            if (v7 != 0) {
                int[] v2 = 0;
                android.support.v4.app.BackStackState[] v3 = 0;
                if (this.mAdded != null) {
                    int v0_1 = this.mAdded.size();
                    if (v0_1 > 0) {
                        v2 = new int[v0_1];
                        int v8_0 = 0;
                        while (v8_0 < v0_1) {
                            v2[v8_0] = ((android.support.v4.app.Fragment) this.mAdded.get(v8_0)).mIndex;
                            if (v2[v8_0] < 0) {
                                this.throwException(new IllegalStateException(new StringBuilder().append("Failure saving state: active ").append(this.mAdded.get(v8_0)).append(" has cleared index: ").append(v2[v8_0]).toString()));
                            }
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("saveAllState: adding fragment #").append(v8_0).append(": ").append(this.mAdded.get(v8_0)).toString());
                            }
                            v8_0++;
                        }
                    }
                }
                if (this.mBackStack != null) {
                    int v0_2 = this.mBackStack.size();
                    if (v0_2 > 0) {
                        v3 = new android.support.v4.app.BackStackState[v0_2];
                        int v8_2 = 0;
                        while (v8_2 < v0_2) {
                            v3[v8_2] = new android.support.v4.app.BackStackState(((android.support.v4.app.BackStackRecord) this.mBackStack.get(v8_2)));
                            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                                android.util.Log.v("FragmentManager", new StringBuilder().append("saveAllState: adding back stack #").append(v8_2).append(": ").append(this.mBackStack.get(v8_2)).toString());
                            }
                            v8_2++;
                        }
                    }
                }
                v5_0 = new android.support.v4.app.FragmentManagerState();
                v5_0.mActive = v1;
                v5_0.mAdded = v2;
                v5_0.mBackStack = v3;
            } else {
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", "saveAllState: no fragments!");
                }
            }
        }
        return v5_0;
    }

    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment p4)
    {
        android.os.Bundle v0_0 = 0;
        if (this.mStateBundle == null) {
            this.mStateBundle = new android.os.Bundle();
        }
        p4.performSaveInstanceState(this.mStateBundle);
        if (!this.mStateBundle.isEmpty()) {
            v0_0 = this.mStateBundle;
            this.mStateBundle = 0;
        }
        if (p4.mView != null) {
            this.saveFragmentViewState(p4);
        }
        if (p4.mSavedViewState != null) {
            if (v0_0 == null) {
                v0_0 = new android.os.Bundle();
            }
            v0_0.putSparseParcelableArray("android:view_state", p4.mSavedViewState);
        }
        if (!p4.mUserVisibleHint) {
            if (v0_0 == null) {
                v0_0 = new android.os.Bundle();
            }
            v0_0.putBoolean("android:user_visible_hint", p4.mUserVisibleHint);
        }
        return v0_0;
    }

    public android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment p6)
    {
        android.support.v4.app.Fragment$SavedState v1_0 = 0;
        if (p6.mIndex < 0) {
            this.throwException(new IllegalStateException(new StringBuilder().append("Fragment ").append(p6).append(" is not currently in the FragmentManager").toString()));
        }
        if (p6.mState > 0) {
            android.os.Bundle v0 = this.saveFragmentBasicState(p6);
            if (v0 != null) {
                v1_0 = new android.support.v4.app.Fragment$SavedState(v0);
            }
        }
        return v1_0;
    }

    void saveFragmentViewState(android.support.v4.app.Fragment p3)
    {
        if (p3.mInnerView != null) {
            if (this.mStateArray != null) {
                this.mStateArray.clear();
            } else {
                this.mStateArray = new android.util.SparseArray();
            }
            p3.mInnerView.saveHierarchyState(this.mStateArray);
            if (this.mStateArray.size() > 0) {
                p3.mSavedViewState = this.mStateArray;
                this.mStateArray = 0;
            }
        }
        return;
    }

    public void setBackStackIndex(int p5, android.support.v4.app.BackStackRecord p6)
    {
        try {
            if (this.mBackStackIndices == null) {
                this.mBackStackIndices = new java.util.ArrayList();
            }
        } catch (java.util.ArrayList v1_17) {
            throw v1_17;
        }
        int v0 = this.mBackStackIndices.size();
        if (p5 >= v0) {
            while (v0 < p5) {
                this.mBackStackIndices.add(0);
                if (this.mAvailBackStackIndices == null) {
                    this.mAvailBackStackIndices = new java.util.ArrayList();
                }
                if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                    android.util.Log.v("FragmentManager", new StringBuilder().append("Adding available back stack index ").append(v0).toString());
                }
                this.mAvailBackStackIndices.add(Integer.valueOf(v0));
                v0++;
            }
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Adding back stack index ").append(p5).append(" with ").append(p6).toString());
            }
            this.mBackStackIndices.add(p6);
        } else {
            if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
                android.util.Log.v("FragmentManager", new StringBuilder().append("Setting back stack index ").append(p5).append(" to ").append(p6).toString());
            }
            this.mBackStackIndices.set(p5, p6);
        }
        return;
    }

    public void showFragment(android.support.v4.app.Fragment p7, int p8, int p9)
    {
        if (android.support.v4.app.FragmentManagerImpl.DEBUG) {
            android.util.Log.v("FragmentManager", new StringBuilder().append("show: ").append(p7).toString());
        }
        if (p7.mHidden) {
            p7.mHidden = 0;
            if (p7.mView != null) {
                android.view.animation.Animation v0 = this.loadAnimation(p7, p8, 1, p9);
                if (v0 != null) {
                    this.setHWLayerAnimListenerIfAlpha(p7.mView, v0);
                    p7.mView.startAnimation(v0);
                }
                p7.mView.setVisibility(0);
            }
            if ((p7.mAdded) && ((p7.mHasMenu) && (p7.mMenuVisible))) {
                this.mNeedMenuInvalidate = 1;
            }
            p7.onHiddenChanged(0);
        }
        return;
    }

    void startPendingDeferredFragments()
    {
        if (this.mActive != null) {
            int v1 = 0;
            while (v1 < this.mActive.size()) {
                android.support.v4.app.Fragment v0_0 = ((android.support.v4.app.Fragment) this.mActive.get(v1));
                if (v0_0 != null) {
                    this.performPendingDeferredStart(v0_0);
                }
                v1++;
            }
        }
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("FragmentManager{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" in ");
        if (this.mParent == null) {
            android.support.v4.util.DebugUtils.buildShortClassTag(this.mHost, v0_1);
        } else {
            android.support.v4.util.DebugUtils.buildShortClassTag(this.mParent, v0_1);
        }
        v0_1.append("}}");
        return v0_1.toString();
    }
}
package android.support.v4.app;
public abstract class FragmentPagerAdapter extends android.support.v4.view.PagerAdapter {
    private static final boolean DEBUG = False;
    private static final String TAG = "FragmentPagerAdapter";
    private android.support.v4.app.FragmentTransaction mCurTransaction;
    private android.support.v4.app.Fragment mCurrentPrimaryItem;
    private final android.support.v4.app.FragmentManager mFragmentManager;

    public FragmentPagerAdapter(android.support.v4.app.FragmentManager p2)
    {
        this.mCurTransaction = 0;
        this.mCurrentPrimaryItem = 0;
        this.mFragmentManager = p2;
        return;
    }

    private static String makeFragmentName(int p3, long p4)
    {
        return new StringBuilder().append("android:switcher:").append(p3).append(":").append(p4).toString();
    }

    public void destroyItem(android.view.ViewGroup p2, int p3, Object p4)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        this.mCurTransaction.detach(((android.support.v4.app.Fragment) p4));
        return;
    }

    public void finishUpdate(android.view.ViewGroup p2)
    {
        if (this.mCurTransaction != null) {
            this.mCurTransaction.commitNowAllowingStateLoss();
            this.mCurTransaction = 0;
        }
        return;
    }

    public abstract android.support.v4.app.Fragment getItem();

    public long getItemId(int p3)
    {
        return ((long) p3);
    }

    public Object instantiateItem(android.view.ViewGroup p9, int p10)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        long v2 = this.getItemId(p10);
        android.support.v4.app.Fragment v0 = this.mFragmentManager.findFragmentByTag(android.support.v4.app.FragmentPagerAdapter.makeFragmentName(p9.getId(), v2));
        if (v0 == null) {
            v0 = this.getItem(p10);
            this.mCurTransaction.add(p9.getId(), v0, android.support.v4.app.FragmentPagerAdapter.makeFragmentName(p9.getId(), v2));
        } else {
            this.mCurTransaction.attach(v0);
        }
        if (v0 != this.mCurrentPrimaryItem) {
            v0.setMenuVisibility(0);
            v0.setUserVisibleHint(0);
        }
        return v0;
    }

    public boolean isViewFromObject(android.view.View p2, Object p3)
    {
        int v0_1;
        if (((android.support.v4.app.Fragment) p3).getView() != p2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void restoreState(android.os.Parcelable p1, ClassLoader p2)
    {
        return;
    }

    public android.os.Parcelable saveState()
    {
        return 0;
    }

    public void setPrimaryItem(android.view.ViewGroup p5, int p6, Object p7)
    {
        if (((android.support.v4.app.Fragment) p7) != this.mCurrentPrimaryItem) {
            if (this.mCurrentPrimaryItem != null) {
                this.mCurrentPrimaryItem.setMenuVisibility(0);
                this.mCurrentPrimaryItem.setUserVisibleHint(0);
            }
            if (((android.support.v4.app.Fragment) p7) != null) {
                ((android.support.v4.app.Fragment) p7).setMenuVisibility(1);
                ((android.support.v4.app.Fragment) p7).setUserVisibleHint(1);
            }
            this.mCurrentPrimaryItem = ((android.support.v4.app.Fragment) p7);
        }
        return;
    }

    public void startUpdate(android.view.ViewGroup p4)
    {
        if (p4.getId() != -1) {
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("ViewPager with adapter ").append(this).append(" requires a view id").toString());
        }
    }
}
package android.support.v4.app;
public abstract class FragmentStatePagerAdapter extends android.support.v4.view.PagerAdapter {
    private static final boolean DEBUG = False;
    private static final String TAG = "FragmentStatePagerAdapter";
    private android.support.v4.app.FragmentTransaction mCurTransaction;
    private android.support.v4.app.Fragment mCurrentPrimaryItem;
    private final android.support.v4.app.FragmentManager mFragmentManager;
    private java.util.ArrayList mFragments;
    private java.util.ArrayList mSavedState;

    public FragmentStatePagerAdapter(android.support.v4.app.FragmentManager p3)
    {
        this.mCurTransaction = 0;
        this.mSavedState = new java.util.ArrayList();
        this.mFragments = new java.util.ArrayList();
        this.mCurrentPrimaryItem = 0;
        this.mFragmentManager = p3;
        return;
    }

    public void destroyItem(android.view.ViewGroup p5, int p6, Object p7)
    {
        if (this.mCurTransaction == null) {
            this.mCurTransaction = this.mFragmentManager.beginTransaction();
        }
        while (this.mSavedState.size() <= p6) {
            this.mSavedState.add(0);
        }
        android.support.v4.app.FragmentTransaction v1_2;
        java.util.ArrayList v3 = this.mSavedState;
        if (!((android.support.v4.app.Fragment) p7).isAdded()) {
            v1_2 = 0;
        } else {
            v1_2 = this.mFragmentManager.saveFragmentInstanceState(((android.support.v4.app.Fragment) p7));
        }
        v3.set(p6, v1_2);
        this.mFragments.set(p6, 0);
        this.mCurTransaction.remove(((android.support.v4.app.Fragment) p7));
        return;
    }

    public void finishUpdate(android.view.ViewGroup p2)
    {
        if (this.mCurTransaction != null) {
            this.mCurTransaction.commitNowAllowingStateLoss();
            this.mCurTransaction = 0;
        }
        return;
    }

    public abstract android.support.v4.app.Fragment getItem();

    public Object instantiateItem(android.view.ViewGroup p7, int p8)
    {
        android.support.v4.app.Fragment v0_0;
        if (this.mFragments.size() <= p8) {
            if (this.mCurTransaction == null) {
                this.mCurTransaction = this.mFragmentManager.beginTransaction();
            }
            android.support.v4.app.Fragment v1 = this.getItem(p8);
            if (this.mSavedState.size() > p8) {
                android.support.v4.app.Fragment$SavedState v2_1 = ((android.support.v4.app.Fragment$SavedState) this.mSavedState.get(p8));
                if (v2_1 != null) {
                    v1.setInitialSavedState(v2_1);
                }
            }
            while (this.mFragments.size() <= p8) {
                this.mFragments.add(0);
            }
            v1.setMenuVisibility(0);
            v1.setUserVisibleHint(0);
            this.mFragments.set(p8, v1);
            this.mCurTransaction.add(p7.getId(), v1);
            v0_0 = v1;
        } else {
            v0_0 = ((android.support.v4.app.Fragment) this.mFragments.get(p8));
            if (v0_0 == null) {
            }
        }
        return v0_0;
    }

    public boolean isViewFromObject(android.view.View p2, Object p3)
    {
        int v0_1;
        if (((android.support.v4.app.Fragment) p3).getView() != p2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void restoreState(android.os.Parcelable p12, ClassLoader p13)
    {
        if (p12 != null) {
            ((android.os.Bundle) p12).setClassLoader(p13);
            android.os.Parcelable[] v2 = ((android.os.Bundle) p12).getParcelableArray("states");
            this.mSavedState.clear();
            this.mFragments.clear();
            if (v2 != null) {
                int v3 = 0;
                while (v3 < v2.length) {
                    this.mSavedState.add(((android.support.v4.app.Fragment$SavedState) v2[v3]));
                    v3++;
                }
            }
            android.support.v4.app.Fragment$SavedState v7_1 = ((android.os.Bundle) p12).keySet().iterator();
            while (v7_1.hasNext()) {
                String v5_1 = ((String) v7_1.next());
                if (v5_1.startsWith("f")) {
                    int v4 = Integer.parseInt(v5_1.substring(1));
                    android.support.v4.app.Fragment v1 = this.mFragmentManager.getFragment(((android.os.Bundle) p12), v5_1);
                    if (v1 == null) {
                        android.util.Log.w("FragmentStatePagerAdapter", new StringBuilder().append("Bad fragment at key ").append(v5_1).toString());
                    }
                    while (this.mFragments.size() <= v4) {
                        this.mFragments.add(0);
                    }
                    v1.setMenuVisibility(0);
                    this.mFragments.set(v4, v1);
                }
            }
        }
        return;
    }

    public android.os.Parcelable saveState()
    {
        android.os.Bundle v4_0 = 0;
        if (this.mSavedState.size() > 0) {
            v4_0 = new android.os.Bundle();
            android.support.v4.app.Fragment$SavedState[] v1 = new android.support.v4.app.Fragment$SavedState[this.mSavedState.size()];
            this.mSavedState.toArray(v1);
            v4_0.putParcelableArray("states", v1);
        }
        int v2 = 0;
        while (v2 < this.mFragments.size()) {
            android.support.v4.app.Fragment v0_1 = ((android.support.v4.app.Fragment) this.mFragments.get(v2));
            if ((v0_1 != null) && (v0_1.isAdded())) {
                if (v4_0 == null) {
                    v4_0 = new android.os.Bundle();
                }
                this.mFragmentManager.putFragment(v4_0, new StringBuilder().append("f").append(v2).toString(), v0_1);
            }
            v2++;
        }
        return v4_0;
    }

    public void setPrimaryItem(android.view.ViewGroup p5, int p6, Object p7)
    {
        if (((android.support.v4.app.Fragment) p7) != this.mCurrentPrimaryItem) {
            if (this.mCurrentPrimaryItem != null) {
                this.mCurrentPrimaryItem.setMenuVisibility(0);
                this.mCurrentPrimaryItem.setUserVisibleHint(0);
            }
            if (((android.support.v4.app.Fragment) p7) != null) {
                ((android.support.v4.app.Fragment) p7).setMenuVisibility(1);
                ((android.support.v4.app.Fragment) p7).setUserVisibleHint(1);
            }
            this.mCurrentPrimaryItem = ((android.support.v4.app.Fragment) p7);
        }
        return;
    }

    public void startUpdate(android.view.ViewGroup p4)
    {
        if (p4.getId() != -1) {
            return;
        } else {
            throw new IllegalStateException(new StringBuilder().append("ViewPager with adapter ").append(this).append(" requires a view id").toString());
        }
    }
}
package android.support.v4.app;
 class INotificationSideChannel$Stub$Proxy implements android.support.v4.app.INotificationSideChannel {
    private android.os.IBinder mRemote;

    INotificationSideChannel$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public void cancel(String p6, int p7, String p8)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.app.INotificationSideChannel");
            v0.writeString(p6);
            v0.writeInt(p7);
            v0.writeString(p8);
            this.mRemote.transact(2, v0, 0, 1);
            v0.recycle();
            return;
        } catch (Throwable v1_0) {
            v0.recycle();
            throw v1_0;
        }
    }

    public void cancelAll(String p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.app.INotificationSideChannel");
            v0.writeString(p6);
            this.mRemote.transact(3, v0, 0, 1);
            v0.recycle();
            return;
        } catch (Throwable v1_0) {
            v0.recycle();
            throw v1_0;
        }
    }

    public String getInterfaceDescriptor()
    {
        return "android.support.v4.app.INotificationSideChannel";
    }

    public void notify(String p6, int p7, String p8, android.app.Notification p9)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.app.INotificationSideChannel");
            v0.writeString(p6);
            v0.writeInt(p7);
            v0.writeString(p8);
        } catch (android.os.IBinder v1_2) {
            v0.recycle();
            throw v1_2;
        }
        if (p9 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p9.writeToParcel(v0, 0);
        }
        this.mRemote.transact(1, v0, 0, 1);
        v0.recycle();
        return;
    }
}
package android.support.v4.app;
public abstract class INotificationSideChannel$Stub extends android.os.Binder implements android.support.v4.app.INotificationSideChannel {
    private static final String DESCRIPTOR = "android.support.v4.app.INotificationSideChannel";
    static final int TRANSACTION_cancel = 2;
    static final int TRANSACTION_cancelAll = 3;
    static final int TRANSACTION_notify = 1;

    public INotificationSideChannel$Stub()
    {
        this.attachInterface(this, "android.support.v4.app.INotificationSideChannel");
        return;
    }

    public static android.support.v4.app.INotificationSideChannel asInterface(android.os.IBinder p2)
    {
        android.support.v4.app.INotificationSideChannel v0_0;
        if (p2 != null) {
            android.support.v4.app.INotificationSideChannel v0_1 = p2.queryLocalInterface("android.support.v4.app.INotificationSideChannel");
            if ((v0_1 == null) || (!(v0_1 instanceof android.support.v4.app.INotificationSideChannel))) {
                v0_0 = new android.support.v4.app.INotificationSideChannel$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.support.v4.app.INotificationSideChannel) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p7, android.os.Parcel p8, android.os.Parcel p9, int p10)
    {
        boolean v4 = 1;
        switch (p7) {
            case 1:
                int v3_0;
                p8.enforceInterface("android.support.v4.app.INotificationSideChannel");
                String v0_1 = p8.readString();
                int v1_1 = p8.readInt();
                String v2_1 = p8.readString();
                if (p8.readInt() == 0) {
                    v3_0 = 0;
                } else {
                    v3_0 = ((android.app.Notification) android.app.Notification.CREATOR.createFromParcel(p8));
                }
                this.notify(v0_1, v1_1, v2_1, v3_0);
                break;
            case 2:
                p8.enforceInterface("android.support.v4.app.INotificationSideChannel");
                this.cancel(p8.readString(), p8.readInt(), p8.readString());
                break;
            case 3:
                p8.enforceInterface("android.support.v4.app.INotificationSideChannel");
                this.cancelAll(p8.readString());
                break;
            case 1598968902:
                p9.writeString("android.support.v4.app.INotificationSideChannel");
                break;
            default:
                v4 = super.onTransact(p7, p8, p9, p10);
        }
        return v4;
    }
}
package android.support.v4.app;
public class ListFragment extends android.support.v4.app.Fragment {
    static final int INTERNAL_EMPTY_ID = 16711681;
    static final int INTERNAL_LIST_CONTAINER_ID = 16711683;
    static final int INTERNAL_PROGRESS_CONTAINER_ID = 16711682;
    android.widget.ListAdapter mAdapter;
    CharSequence mEmptyText;
    android.view.View mEmptyView;
    private final android.os.Handler mHandler;
    android.widget.ListView mList;
    android.view.View mListContainer;
    boolean mListShown;
    private final android.widget.AdapterView$OnItemClickListener mOnClickListener;
    android.view.View mProgressContainer;
    private final Runnable mRequestFocus;
    android.widget.TextView mStandardEmptyView;

    public ListFragment()
    {
        this.mHandler = new android.os.Handler();
        this.mRequestFocus = new android.support.v4.app.ListFragment$1(this);
        this.mOnClickListener = new android.support.v4.app.ListFragment$2(this);
        return;
    }

    private void ensureList()
    {
        if (this.mList == null) {
            android.widget.ListView v2_0 = this.getView();
            if (v2_0 != null) {
                if (!(v2_0 instanceof android.widget.ListView)) {
                    this.mStandardEmptyView = ((android.widget.TextView) v2_0.findViewById(16711681));
                    if (this.mStandardEmptyView != null) {
                        this.mStandardEmptyView.setVisibility(8);
                    } else {
                        this.mEmptyView = v2_0.findViewById(16908292);
                    }
                    this.mProgressContainer = v2_0.findViewById(16711682);
                    this.mListContainer = v2_0.findViewById(16711683);
                    android.widget.ListView v1_0 = v2_0.findViewById(16908298);
                    if ((v1_0 instanceof android.widget.ListView)) {
                        this.mList = ((android.widget.ListView) v1_0);
                        if (this.mEmptyView == null) {
                            if (this.mEmptyText != null) {
                                this.mStandardEmptyView.setText(this.mEmptyText);
                                this.mList.setEmptyView(this.mStandardEmptyView);
                            }
                        } else {
                            this.mList.setEmptyView(this.mEmptyView);
                        }
                    } else {
                        if (v1_0 != null) {
                            throw new RuntimeException("Content has view with id attribute \'android.R.id.list\' that is not a ListView class");
                        } else {
                            throw new RuntimeException("Your content must have a ListView whose id attribute is \'android.R.id.list\'");
                        }
                    }
                } else {
                    this.mList = ((android.widget.ListView) v2_0);
                }
                this.mListShown = 1;
                this.mList.setOnItemClickListener(this.mOnClickListener);
                if (this.mAdapter == null) {
                    if (this.mProgressContainer != null) {
                        this.setListShown(0, 0);
                    }
                } else {
                    android.widget.ListAdapter v0 = this.mAdapter;
                    this.mAdapter = 0;
                    this.setListAdapter(v0);
                }
                this.mHandler.post(this.mRequestFocus);
            } else {
                throw new IllegalStateException("Content view not yet created");
            }
        }
        return;
    }

    private void setListShown(boolean p7, boolean p8)
    {
        this.ensureList();
        if (this.mProgressContainer != null) {
            if (this.mListShown != p7) {
                this.mListShown = p7;
                if (!p7) {
                    if (!p8) {
                        this.mProgressContainer.clearAnimation();
                        this.mListContainer.clearAnimation();
                    } else {
                        this.mProgressContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getContext(), 17432576));
                        this.mListContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getContext(), 17432577));
                    }
                    this.mProgressContainer.setVisibility(0);
                    this.mListContainer.setVisibility(8);
                } else {
                    if (!p8) {
                        this.mProgressContainer.clearAnimation();
                        this.mListContainer.clearAnimation();
                    } else {
                        this.mProgressContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getContext(), 17432577));
                        this.mListContainer.startAnimation(android.view.animation.AnimationUtils.loadAnimation(this.getContext(), 17432576));
                    }
                    this.mProgressContainer.setVisibility(8);
                    this.mListContainer.setVisibility(0);
                }
            }
            return;
        } else {
            throw new IllegalStateException("Can\'t be used with a custom content view");
        }
    }

    public android.widget.ListAdapter getListAdapter()
    {
        return this.mAdapter;
    }

    public android.widget.ListView getListView()
    {
        this.ensureList();
        return this.mList;
    }

    public long getSelectedItemId()
    {
        this.ensureList();
        return this.mList.getSelectedItemId();
    }

    public int getSelectedItemPosition()
    {
        this.ensureList();
        return this.mList.getSelectedItemPosition();
    }

    public android.view.View onCreateView(android.view.LayoutInflater p13, android.view.ViewGroup p14, android.os.Bundle p15)
    {
        android.content.Context v0 = this.getContext();
        android.widget.FrameLayout v5_1 = new android.widget.FrameLayout(v0);
        android.widget.LinearLayout v3_1 = new android.widget.LinearLayout(v0);
        v3_1.setId(16711682);
        v3_1.setOrientation(1);
        v3_1.setVisibility(8);
        v3_1.setGravity(17);
        v3_1.addView(new android.widget.ProgressBar(v0, 0, 16842874), new android.widget.FrameLayout$LayoutParams(-2, -2));
        v5_1.addView(v3_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        android.widget.FrameLayout v1_1 = new android.widget.FrameLayout(v0);
        v1_1.setId(16711683);
        android.widget.TextView v6_1 = new android.widget.TextView(v0);
        v6_1.setId(16711681);
        v6_1.setGravity(17);
        v1_1.addView(v6_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        android.widget.ListView v2_1 = new android.widget.ListView(v0);
        v2_1.setId(16908298);
        v2_1.setDrawSelectorOnTop(0);
        v1_1.addView(v2_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        v5_1.addView(v1_1, new android.widget.FrameLayout$LayoutParams(-1, -1));
        v5_1.setLayoutParams(new android.widget.FrameLayout$LayoutParams(-1, -1));
        return v5_1;
    }

    public void onDestroyView()
    {
        this.mHandler.removeCallbacks(this.mRequestFocus);
        this.mList = 0;
        this.mListShown = 0;
        this.mListContainer = 0;
        this.mProgressContainer = 0;
        this.mEmptyView = 0;
        this.mStandardEmptyView = 0;
        super.onDestroyView();
        return;
    }

    public void onListItemClick(android.widget.ListView p1, android.view.View p2, int p3, long p4)
    {
        return;
    }

    public void onViewCreated(android.view.View p1, android.os.Bundle p2)
    {
        super.onViewCreated(p1, p2);
        this.ensureList();
        return;
    }

    public void setEmptyText(CharSequence p3)
    {
        this.ensureList();
        if (this.mStandardEmptyView != null) {
            this.mStandardEmptyView.setText(p3);
            if (this.mEmptyText == null) {
                this.mList.setEmptyView(this.mStandardEmptyView);
            }
            this.mEmptyText = p3;
            return;
        } else {
            throw new IllegalStateException("Can\'t be used with a custom content view");
        }
    }

    public void setListAdapter(android.widget.ListAdapter p5)
    {
        int v0;
        int v2 = 0;
        if (this.mAdapter == null) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        this.mAdapter = p5;
        if (this.mList != null) {
            this.mList.setAdapter(p5);
            if ((!this.mListShown) && (v0 == 0)) {
                if (this.getView().getWindowToken() != null) {
                    v2 = 1;
                }
                this.setListShown(1, v2);
            }
        }
        return;
    }

    public void setListShown(boolean p2)
    {
        this.setListShown(p2, 1);
        return;
    }

    public void setListShownNoAnimation(boolean p2)
    {
        this.setListShown(p2, 0);
        return;
    }

    public void setSelection(int p2)
    {
        this.ensureList();
        this.mList.setSelection(p2);
        return;
    }
}
package android.support.v4.app;
final class LoaderManagerImpl$LoaderInfo implements android.support.v4.content.Loader$OnLoadCompleteListener, android.support.v4.content.Loader$OnLoadCanceledListener {
    final android.os.Bundle mArgs;
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks;
    Object mData;
    boolean mDeliveredData;
    boolean mDestroyed;
    boolean mHaveData;
    final int mId;
    boolean mListenerRegistered;
    android.support.v4.content.Loader mLoader;
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader;
    boolean mReportNextStart;
    boolean mRetaining;
    boolean mRetainingStarted;
    boolean mStarted;
    final synthetic android.support.v4.app.LoaderManagerImpl this$0;

    public LoaderManagerImpl$LoaderInfo(android.support.v4.app.LoaderManagerImpl p1, int p2, android.os.Bundle p3, android.support.v4.app.LoaderManager$LoaderCallbacks p4)
    {
        this.this$0 = p1;
        this.mId = p2;
        this.mArgs = p3;
        this.mCallbacks = p4;
        return;
    }

    void callOnLoadFinished(android.support.v4.content.Loader p5, Object p6)
    {
        if (this.mCallbacks != null) {
            String v0 = 0;
            if (this.this$0.mHost != null) {
                v0 = this.this$0.mHost.mFragmentManager.mNoTransactionsBecause;
                this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = "onLoadFinished";
            }
            try {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  onLoadFinished in ").append(p5).append(": ").append(p5.dataToString(p6)).toString());
                }
            } catch (int v1_7) {
                if (this.this$0.mHost != null) {
                    this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = v0;
                }
                throw v1_7;
            }
            this.mCallbacks.onLoadFinished(p5, p6);
            if (this.this$0.mHost != null) {
                this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = v0;
            }
            this.mDeliveredData = 1;
        }
        return;
    }

    boolean cancel()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Canceling: ").append(this).toString());
        }
        if ((!this.mStarted) || ((this.mLoader == null) || (!this.mListenerRegistered))) {
            boolean v0 = 0;
        } else {
            v0 = this.mLoader.cancelLoad();
            if (!v0) {
                this.onLoadCanceled(this.mLoader);
            }
        }
        return v0;
    }

    void destroy()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Destroying: ").append(this).toString());
        }
        this.mDestroyed = 1;
        boolean v1 = this.mDeliveredData;
        this.mDeliveredData = 0;
        if ((this.mCallbacks != null) && ((this.mLoader != null) && ((this.mHaveData) && (v1)))) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("  Resetting: ").append(this).toString());
            }
            String v0 = 0;
            if (this.this$0.mHost != null) {
                v0 = this.this$0.mHost.mFragmentManager.mNoTransactionsBecause;
                this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = "onLoaderReset";
            }
            try {
                this.mCallbacks.onLoaderReset(this.mLoader);
            } catch (android.support.v4.app.FragmentManagerImpl v2_19) {
                if (this.this$0.mHost != null) {
                    this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = v0;
                }
                throw v2_19;
            }
            if (this.this$0.mHost != null) {
                this.this$0.mHost.mFragmentManager.mNoTransactionsBecause = v0;
            }
        }
        this.mCallbacks = 0;
        this.mData = 0;
        this.mHaveData = 0;
        if (this.mLoader != null) {
            if (this.mListenerRegistered) {
                this.mListenerRegistered = 0;
                this.mLoader.unregisterListener(this);
                this.mLoader.unregisterOnLoadCanceledListener(this);
            }
            this.mLoader.reset();
        }
        if (this.mPendingLoader != null) {
            this.mPendingLoader.destroy();
        }
        return;
    }

    public void dump(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        p6.print(p4);
        p6.print("mId=");
        p6.print(this.mId);
        p6.print(" mArgs=");
        p6.println(this.mArgs);
        p6.print(p4);
        p6.print("mCallbacks=");
        p6.println(this.mCallbacks);
        p6.print(p4);
        p6.print("mLoader=");
        p6.println(this.mLoader);
        if (this.mLoader != null) {
            this.mLoader.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        if ((this.mHaveData) || (this.mDeliveredData)) {
            p6.print(p4);
            p6.print("mHaveData=");
            p6.print(this.mHaveData);
            p6.print("  mDeliveredData=");
            p6.println(this.mDeliveredData);
            p6.print(p4);
            p6.print("mData=");
            p6.println(this.mData);
        }
        p6.print(p4);
        p6.print("mStarted=");
        p6.print(this.mStarted);
        p6.print(" mReportNextStart=");
        p6.print(this.mReportNextStart);
        p6.print(" mDestroyed=");
        p6.println(this.mDestroyed);
        p6.print(p4);
        p6.print("mRetaining=");
        p6.print(this.mRetaining);
        p6.print(" mRetainingStarted=");
        p6.print(this.mRetainingStarted);
        p6.print(" mListenerRegistered=");
        p6.println(this.mListenerRegistered);
        if (this.mPendingLoader != null) {
            p6.print(p4);
            p6.println("Pending Loader ");
            p6.print(this.mPendingLoader);
            p6.println(":");
            this.mPendingLoader.dump(new StringBuilder().append(p4).append("  ").toString(), p5, p6, p7);
        }
        return;
    }

    void finishRetain()
    {
        if (this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("  Finished Retaining: ").append(this).toString());
            }
            this.mRetaining = 0;
            if ((this.mStarted != this.mRetainingStarted) && (!this.mStarted)) {
                this.stop();
            }
        }
        if ((this.mStarted) && ((this.mHaveData) && (!this.mReportNextStart))) {
            this.callOnLoadFinished(this.mLoader, this.mData);
        }
        return;
    }

    public void onLoadCanceled(android.support.v4.content.Loader p6)
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("onLoadCanceled: ").append(this).toString());
        }
        if (!this.mDestroyed) {
            if (this.this$0.mLoaders.get(this.mId) == this) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v0 = this.mPendingLoader;
                if (v0 != null) {
                    if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                        android.util.Log.v("LoaderManager", new StringBuilder().append("  Switching to pending loader: ").append(v0).toString());
                    }
                    this.mPendingLoader = 0;
                    this.this$0.mLoaders.put(this.mId, 0);
                    this.destroy();
                    this.this$0.installLoader(v0);
                }
            } else {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", "  Ignoring load canceled -- not active");
                }
            }
        } else {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", "  Ignoring load canceled -- destroyed");
            }
        }
        return;
    }

    public void onLoadComplete(android.support.v4.content.Loader p7, Object p8)
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("onLoadComplete: ").append(this).toString());
        }
        if (!this.mDestroyed) {
            if (this.this$0.mLoaders.get(this.mId) == this) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1 = this.mPendingLoader;
                if (v1 == null) {
                    if ((this.mData != p8) || (!this.mHaveData)) {
                        this.mData = p8;
                        this.mHaveData = 1;
                        if (this.mStarted) {
                            this.callOnLoadFinished(p7, p8);
                        }
                    }
                    android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.this$0.mInactiveLoaders.get(this.mId));
                    if ((v0_1 != null) && (v0_1 != this)) {
                        v0_1.mDeliveredData = 0;
                        v0_1.destroy();
                        this.this$0.mInactiveLoaders.remove(this.mId);
                    }
                    if ((this.this$0.mHost != null) && (!this.this$0.hasRunningLoaders())) {
                        this.this$0.mHost.mFragmentManager.startPendingDeferredFragments();
                    }
                } else {
                    if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                        android.util.Log.v("LoaderManager", new StringBuilder().append("  Switching to pending loader: ").append(v1).toString());
                    }
                    this.mPendingLoader = 0;
                    this.this$0.mLoaders.put(this.mId, 0);
                    this.destroy();
                    this.this$0.installLoader(v1);
                }
            } else {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", "  Ignoring load complete -- not active");
                }
            }
        } else {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", "  Ignoring load complete -- destroyed");
            }
        }
        return;
    }

    void reportStart()
    {
        if ((this.mStarted) && (this.mReportNextStart)) {
            this.mReportNextStart = 0;
            if ((this.mHaveData) && (!this.mRetaining)) {
                this.callOnLoadFinished(this.mLoader, this.mData);
            }
        }
        return;
    }

    void retain()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Retaining: ").append(this).toString());
        }
        this.mRetaining = 1;
        this.mRetainingStarted = this.mStarted;
        this.mStarted = 0;
        this.mCallbacks = 0;
        return;
    }

    void start()
    {
        if ((!this.mRetaining) || (!this.mRetainingStarted)) {
            if (!this.mStarted) {
                this.mStarted = 1;
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Starting: ").append(this).toString());
                }
                if ((this.mLoader == null) && (this.mCallbacks != null)) {
                    this.mLoader = this.mCallbacks.onCreateLoader(this.mId, this.mArgs);
                }
                if (this.mLoader != null) {
                    if ((!this.mLoader.getClass().isMemberClass()) || (reflect.Modifier.isStatic(this.mLoader.getClass().getModifiers()))) {
                        if (!this.mListenerRegistered) {
                            this.mLoader.registerListener(this.mId, this);
                            this.mLoader.registerOnLoadCanceledListener(this);
                            this.mListenerRegistered = 1;
                        }
                        this.mLoader.startLoading();
                    } else {
                        throw new IllegalArgumentException(new StringBuilder().append("Object returned from onCreateLoader must not be a non-static inner member class: ").append(this.mLoader).toString());
                    }
                }
            }
        } else {
            this.mStarted = 1;
        }
        return;
    }

    void stop()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("  Stopping: ").append(this).toString());
        }
        this.mStarted = 0;
        if ((!this.mRetaining) && ((this.mLoader != null) && (this.mListenerRegistered))) {
            this.mListenerRegistered = 0;
            this.mLoader.unregisterListener(this);
            this.mLoader.unregisterOnLoadCanceledListener(this);
            this.mLoader.stopLoading();
        }
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(64);
        v0_1.append("LoaderInfo{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" #");
        v0_1.append(this.mId);
        v0_1.append(" : ");
        android.support.v4.util.DebugUtils.buildShortClassTag(this.mLoader, v0_1);
        v0_1.append("}}");
        return v0_1.toString();
    }
}
package android.support.v4.app;
 class LoaderManagerImpl extends android.support.v4.app.LoaderManager {
    static boolean DEBUG = False;
    static final String TAG = "LoaderManager";
    boolean mCreatingLoader;
    android.support.v4.app.FragmentHostCallback mHost;
    final android.support.v4.util.SparseArrayCompat mInactiveLoaders;
    final android.support.v4.util.SparseArrayCompat mLoaders;
    boolean mRetaining;
    boolean mRetainingStarted;
    boolean mStarted;
    final String mWho;

    static LoaderManagerImpl()
    {
        android.support.v4.app.LoaderManagerImpl.DEBUG = 0;
        return;
    }

    LoaderManagerImpl(String p2, android.support.v4.app.FragmentHostCallback p3, boolean p4)
    {
        this.mLoaders = new android.support.v4.util.SparseArrayCompat();
        this.mInactiveLoaders = new android.support.v4.util.SparseArrayCompat();
        this.mWho = p2;
        this.mHost = p3;
        this.mStarted = p4;
        return;
    }

    private android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int p4, android.os.Bundle p5, android.support.v4.app.LoaderManager$LoaderCallbacks p6)
    {
        try {
            this.mCreatingLoader = 1;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0 = this.createLoader(p4, p5, p6);
            this.installLoader(v0);
            this.mCreatingLoader = 0;
            return v0;
        } catch (Throwable v1_1) {
            this.mCreatingLoader = 0;
            throw v1_1;
        }
    }

    private android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int p3, android.os.Bundle p4, android.support.v4.app.LoaderManager$LoaderCallbacks p5)
    {
        android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = new android.support.v4.app.LoaderManagerImpl$LoaderInfo(this, p3, p4, p5);
        v0_1.mLoader = p5.onCreateLoader(p3, p4);
        return v0_1;
    }

    public void destroyLoader(int p6)
    {
        if (!this.mCreatingLoader) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("destroyLoader in ").append(this).append(" of ").append(p6).toString());
            }
            int v0_0 = this.mLoaders.indexOfKey(p6);
            if (v0_0 >= 0) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0));
                this.mLoaders.removeAt(v0_0);
                v1_1.destroy();
            }
            int v0_1 = this.mInactiveLoaders.indexOfKey(p6);
            if (v0_1 >= 0) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_3 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1));
                this.mInactiveLoaders.removeAt(v0_1);
                v1_3.destroy();
            }
            if ((this.mHost != null) && (!this.hasRunningLoaders())) {
                this.mHost.mFragmentManager.startPendingDeferredFragments();
            }
            return;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    void doDestroy()
    {
        if (!this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("Destroying Active in ").append(this).toString());
            }
            int v0_0 = (this.mLoaders.size() - 1);
            while (v0_0 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0)).destroy();
                v0_0--;
            }
            this.mLoaders.clear();
        }
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Destroying Inactive in ").append(this).toString());
        }
        int v0_1 = (this.mInactiveLoaders.size() - 1);
        while (v0_1 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1)).destroy();
            v0_1--;
        }
        this.mInactiveLoaders.clear();
        return;
    }

    void doReportNextStart()
    {
        int v0 = (this.mLoaders.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).mReportNextStart = 1;
            v0--;
        }
        return;
    }

    void doReportStart()
    {
        int v0 = (this.mLoaders.size() - 1);
        while (v0 >= 0) {
            ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).reportStart();
            v0--;
        }
        return;
    }

    void doRetain()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Retaining in ").append(this).toString());
        }
        if (this.mStarted) {
            this.mRetaining = 1;
            this.mStarted = 0;
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).retain();
                v1--;
            }
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doRetain when not started: ").append(this).toString(), v0_1);
        }
        return;
    }

    void doStart()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Starting in ").append(this).toString());
        }
        if (!this.mStarted) {
            this.mStarted = 1;
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).start();
                v1--;
            }
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doStart when already started: ").append(this).toString(), v0_1);
        }
        return;
    }

    void doStop()
    {
        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
            android.util.Log.v("LoaderManager", new StringBuilder().append("Stopping in ").append(this).toString());
        }
        if (this.mStarted) {
            int v1 = (this.mLoaders.size() - 1);
            while (v1 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1)).stop();
                v1--;
            }
            this.mStarted = 0;
        } else {
            RuntimeException v0_1 = new RuntimeException("here");
            v0_1.fillInStackTrace();
            android.util.Log.w("LoaderManager", new StringBuilder().append("Called doStop when not started: ").append(this).toString(), v0_1);
        }
        return;
    }

    public void dump(String p6, java.io.FileDescriptor p7, java.io.PrintWriter p8, String[] p9)
    {
        if (this.mLoaders.size() > 0) {
            p8.print(p6);
            p8.println("Active Loaders:");
            String v1_0 = new StringBuilder().append(p6).append("    ").toString();
            int v0_0 = 0;
            while (v0_0 < this.mLoaders.size()) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_3 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0_0));
                p8.print(p6);
                p8.print("  #");
                p8.print(this.mLoaders.keyAt(v0_0));
                p8.print(": ");
                p8.println(v2_3.toString());
                v2_3.dump(v1_0, p7, p8, p9);
                v0_0++;
            }
        }
        if (this.mInactiveLoaders.size() > 0) {
            p8.print(p6);
            p8.println("Inactive Loaders:");
            String v1_1 = new StringBuilder().append(p6).append("    ").toString();
            int v0_1 = 0;
            while (v0_1 < this.mInactiveLoaders.size()) {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.valueAt(v0_1));
                p8.print(p6);
                p8.print("  #");
                p8.print(this.mInactiveLoaders.keyAt(v0_1));
                p8.print(": ");
                p8.println(v2_1.toString());
                v2_1.dump(v1_1, p7, p8, p9);
                v0_1++;
            }
        }
        return;
    }

    void finishRetain()
    {
        if (this.mRetaining) {
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("Finished Retaining in ").append(this).toString());
            }
            this.mRetaining = 0;
            int v0 = (this.mLoaders.size() - 1);
            while (v0 >= 0) {
                ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v0)).finishRetain();
                v0--;
            }
        }
        return;
    }

    public android.support.v4.content.Loader getLoader(int p4)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.content.Loader v1_1;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p4));
            if (v0_1 == null) {
                v1_1 = 0;
            } else {
                if (v0_1.mPendingLoader == null) {
                    v1_1 = v0_1.mLoader;
                } else {
                    v1_1 = v0_1.mPendingLoader.mLoader;
                }
            }
            return v1_1;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    public boolean hasRunningLoaders()
    {
        int v3 = 0;
        int v0 = this.mLoaders.size();
        int v1 = 0;
        while (v1 < v0) {
            int v4_3;
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v2_0 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.valueAt(v1));
            if ((!v2_0.mStarted) || (v2_0.mDeliveredData)) {
                v4_3 = 0;
            } else {
                v4_3 = 1;
            }
            v3 |= v4_3;
            v1++;
        }
        return v3;
    }

    public android.support.v4.content.Loader initLoader(int p5, android.os.Bundle p6, android.support.v4.app.LoaderManager$LoaderCallbacks p7)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p5));
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("initLoader in ").append(this).append(": args=").append(p6).toString());
            }
            if (v0_1 != null) {
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Re-using existing loader ").append(v0_1).toString());
                }
                v0_1.mCallbacks = p7;
            } else {
                v0_1 = this.createAndInstallLoader(p5, p6, p7);
                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Created new loader ").append(v0_1).toString());
                }
            }
            if ((v0_1.mHaveData) && (this.mStarted)) {
                v0_1.callOnLoadFinished(v0_1.mLoader, v0_1.mData);
            }
            return v0_1.mLoader;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo p3)
    {
        this.mLoaders.put(p3.mId, p3);
        if (this.mStarted) {
            p3.start();
        }
        return;
    }

    public android.support.v4.content.Loader restartLoader(int p7, android.os.Bundle p8, android.support.v4.app.LoaderManager$LoaderCallbacks p9)
    {
        if (!this.mCreatingLoader) {
            android.support.v4.app.LoaderManagerImpl$LoaderInfo v1_2 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mLoaders.get(p7));
            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                android.util.Log.v("LoaderManager", new StringBuilder().append("restartLoader in ").append(this).append(": args=").append(p8).toString());
            }
            android.support.v4.content.Loader v2_4;
            if (v1_2 == null) {
                v2_4 = this.createAndInstallLoader(p7, p8, p9).mLoader;
            } else {
                android.support.v4.app.LoaderManagerImpl$LoaderInfo v0_1 = ((android.support.v4.app.LoaderManagerImpl$LoaderInfo) this.mInactiveLoaders.get(p7));
                if (v0_1 == null) {
                    if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                        android.util.Log.v("LoaderManager", new StringBuilder().append("  Making last loader inactive: ").append(v1_2).toString());
                    }
                    v1_2.mLoader.abandon();
                    this.mInactiveLoaders.put(p7, v1_2);
                } else {
                    if (!v1_2.mHaveData) {
                        if (v1_2.cancel()) {
                            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                android.util.Log.v("LoaderManager", "  Current loader is running; configuring pending loader");
                            }
                            if (v1_2.mPendingLoader != null) {
                                if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                    android.util.Log.v("LoaderManager", new StringBuilder().append("  Removing pending loader: ").append(v1_2.mPendingLoader).toString());
                                }
                                v1_2.mPendingLoader.destroy();
                                v1_2.mPendingLoader = 0;
                            }
                            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                android.util.Log.v("LoaderManager", "  Enqueuing as new pending loader");
                            }
                            v1_2.mPendingLoader = this.createLoader(p7, p8, p9);
                            v2_4 = v1_2.mPendingLoader.mLoader;
                        } else {
                            if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                                android.util.Log.v("LoaderManager", "  Current loader is stopped; replacing");
                            }
                            this.mLoaders.put(p7, 0);
                            v1_2.destroy();
                        }
                    } else {
                        if (android.support.v4.app.LoaderManagerImpl.DEBUG) {
                            android.util.Log.v("LoaderManager", new StringBuilder().append("  Removing last inactive loader: ").append(v1_2).toString());
                        }
                        v0_1.mDeliveredData = 0;
                        v0_1.destroy();
                        v1_2.mLoader.abandon();
                        this.mInactiveLoaders.put(p7, v1_2);
                    }
                }
            }
            return v2_4;
        } else {
            throw new IllegalStateException("Called while creating a loader");
        }
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder(128);
        v0_1.append("LoaderManager{");
        v0_1.append(Integer.toHexString(System.identityHashCode(this)));
        v0_1.append(" in ");
        android.support.v4.util.DebugUtils.buildShortClassTag(this.mHost, v0_1);
        v0_1.append("}}");
        return v0_1.toString();
    }

    void updateHostController(android.support.v4.app.FragmentHostCallback p1)
    {
        this.mHost = p1;
        return;
    }
}
package android.support.v4.app;
 class NavUtils$NavUtilsImplBase implements android.support.v4.app.NavUtils$NavUtilsImpl {

    NavUtils$NavUtilsImplBase()
    {
        return;
    }

    public android.content.Intent getParentActivityIntent(android.app.Activity p9)
    {
        android.content.Intent v2 = 0;
        String v3 = android.support.v4.app.NavUtils.getParentActivityName(p9);
        if (v3 != null) {
            android.content.ComponentName v4_1 = new android.content.ComponentName(p9, v3);
            try {
                if (android.support.v4.app.NavUtils.getParentActivityName(p9, v4_1) != null) {
                    v2 = new android.content.Intent().setComponent(v4_1);
                } else {
                    v2 = android.support.v4.content.IntentCompat.makeMainActivity(v4_1);
                }
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("NavUtils", new StringBuilder().append("getParentActivityIntent: bad parentActivityName \'").append(v3).append("\' in manifest").toString());
            }
        }
        return v2;
    }

    public String getParentActivityName(android.content.Context p5, android.content.pm.ActivityInfo p6)
    {
        String v0;
        if (p6.metaData != null) {
            v0 = p6.metaData.getString("android.support.PARENT_ACTIVITY");
            if (v0 != null) {
                if (v0.charAt(0) == 46) {
                    v0 = new StringBuilder().append(p5.getPackageName()).append(v0).toString();
                }
            } else {
                v0 = 0;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public void navigateUpTo(android.app.Activity p2, android.content.Intent p3)
    {
        p3.addFlags(67108864);
        p2.startActivity(p3);
        p2.finish();
        return;
    }

    public boolean shouldUpRecreateTask(android.app.Activity p3, android.content.Intent p4)
    {
        int v1_1;
        String v0 = p3.getIntent().getAction();
        if ((v0 == null) || (v0.equals("android.intent.action.MAIN"))) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }
}
package android.support.v4.app;
final class NotificationCompat$Action$1 implements android.support.v4.app.NotificationCompatBase$Action$Factory {

    NotificationCompat$Action$1()
    {
        return;
    }

    public android.support.v4.app.NotificationCompatBase$Action build(int p8, CharSequence p9, android.app.PendingIntent p10, android.os.Bundle p11, android.support.v4.app.RemoteInputCompatBase$RemoteInput[] p12, boolean p13)
    {
        return new android.support.v4.app.NotificationCompat$Action(p8, p9, p10, p11, ((android.support.v4.app.RemoteInput[]) ((android.support.v4.app.RemoteInput[]) p12)), p13);
    }

    public android.support.v4.app.NotificationCompat$Action[] newArray(int p2)
    {
        android.support.v4.app.NotificationCompat$Action[] v0 = new android.support.v4.app.NotificationCompat$Action[p2];
        return v0;
    }

    public bridge synthetic android.support.v4.app.NotificationCompatBase$Action[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
public final class NotificationCompat$Action$WearableExtender implements android.support.v4.app.NotificationCompat$Action$Extender {
    private static final int DEFAULT_FLAGS = 1;
    private static final String EXTRA_WEARABLE_EXTENSIONS = "android.wearable.EXTENSIONS";
    private static final int FLAG_AVAILABLE_OFFLINE = 1;
    private static final int FLAG_HINT_DISPLAY_INLINE = 4;
    private static final int FLAG_HINT_LAUNCHES_ACTIVITY = 2;
    private static final String KEY_CANCEL_LABEL = "cancelLabel";
    private static final String KEY_CONFIRM_LABEL = "confirmLabel";
    private static final String KEY_FLAGS = "flags";
    private static final String KEY_IN_PROGRESS_LABEL = "inProgressLabel";
    private CharSequence mCancelLabel;
    private CharSequence mConfirmLabel;
    private int mFlags;
    private CharSequence mInProgressLabel;

    public NotificationCompat$Action$WearableExtender()
    {
        this.mFlags = 1;
        return;
    }

    public NotificationCompat$Action$WearableExtender(android.support.v4.app.NotificationCompat$Action p5)
    {
        this.mFlags = 1;
        android.os.Bundle v0 = p5.getExtras().getBundle("android.wearable.EXTENSIONS");
        if (v0 != null) {
            this.mFlags = v0.getInt("flags", 1);
            this.mInProgressLabel = v0.getCharSequence("inProgressLabel");
            this.mConfirmLabel = v0.getCharSequence("confirmLabel");
            this.mCancelLabel = v0.getCharSequence("cancelLabel");
        }
        return;
    }

    private void setFlag(int p3, boolean p4)
    {
        if (!p4) {
            this.mFlags = (this.mFlags & (p3 ^ -1));
        } else {
            this.mFlags = (this.mFlags | p3);
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender clone()
    {
        android.support.v4.app.NotificationCompat$Action$WearableExtender v0_1 = new android.support.v4.app.NotificationCompat$Action$WearableExtender();
        v0_1.mFlags = this.mFlags;
        v0_1.mInProgressLabel = this.mInProgressLabel;
        v0_1.mConfirmLabel = this.mConfirmLabel;
        v0_1.mCancelLabel = this.mCancelLabel;
        return v0_1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public android.support.v4.app.NotificationCompat$Action$Builder extend(android.support.v4.app.NotificationCompat$Action$Builder p4)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        if (this.mFlags != 1) {
            v0_1.putInt("flags", this.mFlags);
        }
        if (this.mInProgressLabel != null) {
            v0_1.putCharSequence("inProgressLabel", this.mInProgressLabel);
        }
        if (this.mConfirmLabel != null) {
            v0_1.putCharSequence("confirmLabel", this.mConfirmLabel);
        }
        if (this.mCancelLabel != null) {
            v0_1.putCharSequence("cancelLabel", this.mCancelLabel);
        }
        p4.getExtras().putBundle("android.wearable.EXTENSIONS", v0_1);
        return p4;
    }

    public CharSequence getCancelLabel()
    {
        return this.mCancelLabel;
    }

    public CharSequence getConfirmLabel()
    {
        return this.mConfirmLabel;
    }

    public boolean getHintDisplayActionInline()
    {
        int v0_2;
        if ((this.mFlags & 4) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean getHintLaunchesActivity()
    {
        int v0_2;
        if ((this.mFlags & 2) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public CharSequence getInProgressLabel()
    {
        return this.mInProgressLabel;
    }

    public boolean isAvailableOffline()
    {
        int v0_2;
        if ((this.mFlags & 1) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setAvailableOffline(boolean p2)
    {
        this.setFlag(1, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setCancelLabel(CharSequence p1)
    {
        this.mCancelLabel = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setConfirmLabel(CharSequence p1)
    {
        this.mConfirmLabel = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setHintDisplayActionInline(boolean p2)
    {
        this.setFlag(4, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setHintLaunchesActivity(boolean p2)
    {
        this.setFlag(2, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$Action$WearableExtender setInProgressLabel(CharSequence p1)
    {
        this.mInProgressLabel = p1;
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompat$Action extends android.support.v4.app.NotificationCompatBase$Action {
    public static final android.support.v4.app.NotificationCompatBase$Action$Factory FACTORY;
    public android.app.PendingIntent actionIntent;
    public int icon;
    private boolean mAllowGeneratedReplies;
    final android.os.Bundle mExtras;
    private final android.support.v4.app.RemoteInput[] mRemoteInputs;
    public CharSequence title;

    static NotificationCompat$Action()
    {
        android.support.v4.app.NotificationCompat$Action.FACTORY = new android.support.v4.app.NotificationCompat$Action$1();
        return;
    }

    public NotificationCompat$Action(int p8, CharSequence p9, android.app.PendingIntent p10)
    {
        this(p8, p9, p10, new android.os.Bundle(), 0, 0);
        return;
    }

    NotificationCompat$Action(int p2, CharSequence p3, android.app.PendingIntent p4, android.os.Bundle p5, android.support.v4.app.RemoteInput[] p6, boolean p7)
    {
        this.mAllowGeneratedReplies = 0;
        this.icon = p2;
        this.title = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p3);
        this.actionIntent = p4;
        if (p5 == null) {
            p5 = new android.os.Bundle();
        }
        this.mExtras = p5;
        this.mRemoteInputs = p6;
        this.mAllowGeneratedReplies = p7;
        return;
    }

    public android.app.PendingIntent getActionIntent()
    {
        return this.actionIntent;
    }

    public boolean getAllowGeneratedReplies()
    {
        return this.mAllowGeneratedReplies;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public int getIcon()
    {
        return this.icon;
    }

    public android.support.v4.app.RemoteInput[] getRemoteInputs()
    {
        return this.mRemoteInputs;
    }

    public bridge synthetic android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs()
    {
        return this.getRemoteInputs();
    }

    public CharSequence getTitle()
    {
        return this.title;
    }
}
package android.support.v4.app;
public class NotificationCompat$BigPictureStyle extends android.support.v4.app.NotificationCompat$Style {
    android.graphics.Bitmap mBigLargeIcon;
    boolean mBigLargeIconSet;
    android.graphics.Bitmap mPicture;

    public NotificationCompat$BigPictureStyle()
    {
        return;
    }

    public NotificationCompat$BigPictureStyle(android.support.v4.app.NotificationCompat$Builder p1)
    {
        this.setBuilder(p1);
        return;
    }

    public android.support.v4.app.NotificationCompat$BigPictureStyle bigLargeIcon(android.graphics.Bitmap p2)
    {
        this.mBigLargeIcon = p2;
        this.mBigLargeIconSet = 1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap p1)
    {
        this.mPicture = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$BigPictureStyle setBigContentTitle(CharSequence p2)
    {
        this.mBigContentTitle = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$BigPictureStyle setSummaryText(CharSequence p2)
    {
        this.mSummaryText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        this.mSummaryTextSet = 1;
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompat$BigTextStyle extends android.support.v4.app.NotificationCompat$Style {
    CharSequence mBigText;

    public NotificationCompat$BigTextStyle()
    {
        return;
    }

    public NotificationCompat$BigTextStyle(android.support.v4.app.NotificationCompat$Builder p1)
    {
        this.setBuilder(p1);
        return;
    }

    public android.support.v4.app.NotificationCompat$BigTextStyle bigText(CharSequence p2)
    {
        this.mBigText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$BigTextStyle setBigContentTitle(CharSequence p2)
    {
        this.mBigContentTitle = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$BigTextStyle setSummaryText(CharSequence p2)
    {
        this.mSummaryText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        this.mSummaryTextSet = 1;
        return this;
    }
}
package android.support.v4.app;
final class NotificationCompat$CarExtender$UnreadConversation$1 implements android.support.v4.app.NotificationCompatBase$UnreadConversation$Factory {

    NotificationCompat$CarExtender$UnreadConversation$1()
    {
        return;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation build(String[] p9, android.support.v4.app.RemoteInputCompatBase$RemoteInput p10, android.app.PendingIntent p11, android.app.PendingIntent p12, String[] p13, long p14)
    {
        return new android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation(p9, ((android.support.v4.app.RemoteInput) p10), p11, p12, p13, p14);
    }

    public bridge synthetic android.support.v4.app.NotificationCompatBase$UnreadConversation build(String[] p3, android.support.v4.app.RemoteInputCompatBase$RemoteInput p4, android.app.PendingIntent p5, android.app.PendingIntent p6, String[] p7, long p8)
    {
        return this.build(p3, p4, p5, p6, p7, p8);
    }
}
package android.support.v4.app;
public class NotificationCompat$CarExtender$UnreadConversation extends android.support.v4.app.NotificationCompatBase$UnreadConversation {
    static final android.support.v4.app.NotificationCompatBase$UnreadConversation$Factory FACTORY;
    private final long mLatestTimestamp;
    private final String[] mMessages;
    private final String[] mParticipants;
    private final android.app.PendingIntent mReadPendingIntent;
    private final android.support.v4.app.RemoteInput mRemoteInput;
    private final android.app.PendingIntent mReplyPendingIntent;

    static NotificationCompat$CarExtender$UnreadConversation()
    {
        android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation.FACTORY = new android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation$1();
        return;
    }

    NotificationCompat$CarExtender$UnreadConversation(String[] p1, android.support.v4.app.RemoteInput p2, android.app.PendingIntent p3, android.app.PendingIntent p4, String[] p5, long p6)
    {
        this.mMessages = p1;
        this.mRemoteInput = p2;
        this.mReadPendingIntent = p4;
        this.mReplyPendingIntent = p3;
        this.mParticipants = p5;
        this.mLatestTimestamp = p6;
        return;
    }

    public long getLatestTimestamp()
    {
        return this.mLatestTimestamp;
    }

    public String[] getMessages()
    {
        return this.mMessages;
    }

    public String getParticipant()
    {
        int v0_2;
        if (this.mParticipants.length <= 0) {
            v0_2 = 0;
        } else {
            v0_2 = this.mParticipants[0];
        }
        return v0_2;
    }

    public String[] getParticipants()
    {
        return this.mParticipants;
    }

    public android.app.PendingIntent getReadPendingIntent()
    {
        return this.mReadPendingIntent;
    }

    public android.support.v4.app.RemoteInput getRemoteInput()
    {
        return this.mRemoteInput;
    }

    public bridge synthetic android.support.v4.app.RemoteInputCompatBase$RemoteInput getRemoteInput()
    {
        return this.getRemoteInput();
    }

    public android.app.PendingIntent getReplyPendingIntent()
    {
        return this.mReplyPendingIntent;
    }
}
package android.support.v4.app;
public final class NotificationCompat$CarExtender implements android.support.v4.app.NotificationCompat$Extender {
    private static final String EXTRA_CAR_EXTENDER = "android.car.EXTENSIONS";
    private static final String EXTRA_COLOR = "app_color";
    private static final String EXTRA_CONVERSATION = "car_conversation";
    private static final String EXTRA_LARGE_ICON = "large_icon";
    private static final String TAG = "CarExtender";
    private int mColor;
    private android.graphics.Bitmap mLargeIcon;
    private android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation mUnreadConversation;

    public NotificationCompat$CarExtender()
    {
        this.mColor = 0;
        return;
    }

    public NotificationCompat$CarExtender(android.app.Notification p6)
    {
        this.mColor = 0;
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.os.Bundle v1;
            if (android.support.v4.app.NotificationCompat.getExtras(p6) != null) {
                v1 = android.support.v4.app.NotificationCompat.getExtras(p6).getBundle("android.car.EXTENSIONS");
            } else {
                v1 = 0;
            }
            if (v1 != null) {
                this.mLargeIcon = ((android.graphics.Bitmap) v1.getParcelable("large_icon"));
                this.mColor = v1.getInt("app_color", 0);
                this.mUnreadConversation = ((android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation) android.support.v4.app.NotificationCompat.IMPL.getUnreadConversationFromBundle(v1.getBundle("car_conversation"), android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation.FACTORY, android.support.v4.app.RemoteInput.FACTORY));
            }
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$Builder extend(android.support.v4.app.NotificationCompat$Builder p5)
    {
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.os.Bundle v1_1 = new android.os.Bundle();
            if (this.mLargeIcon != null) {
                v1_1.putParcelable("large_icon", this.mLargeIcon);
            }
            if (this.mColor != 0) {
                v1_1.putInt("app_color", this.mColor);
            }
            if (this.mUnreadConversation != null) {
                v1_1.putBundle("car_conversation", android.support.v4.app.NotificationCompat.IMPL.getBundleForUnreadConversation(this.mUnreadConversation));
            }
            p5.getExtras().putBundle("android.car.EXTENSIONS", v1_1);
        }
        return p5;
    }

    public int getColor()
    {
        return this.mColor;
    }

    public android.graphics.Bitmap getLargeIcon()
    {
        return this.mLargeIcon;
    }

    public android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation getUnreadConversation()
    {
        return this.mUnreadConversation;
    }

    public android.support.v4.app.NotificationCompat$CarExtender setColor(int p1)
    {
        this.mColor = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$CarExtender setLargeIcon(android.graphics.Bitmap p1)
    {
        this.mLargeIcon = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$CarExtender setUnreadConversation(android.support.v4.app.NotificationCompat$CarExtender$UnreadConversation p1)
    {
        this.mUnreadConversation = p1;
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompat$InboxStyle extends android.support.v4.app.NotificationCompat$Style {
    java.util.ArrayList mTexts;

    public NotificationCompat$InboxStyle()
    {
        this.mTexts = new java.util.ArrayList();
        return;
    }

    public NotificationCompat$InboxStyle(android.support.v4.app.NotificationCompat$Builder p2)
    {
        this.mTexts = new java.util.ArrayList();
        this.setBuilder(p2);
        return;
    }

    public android.support.v4.app.NotificationCompat$InboxStyle addLine(CharSequence p3)
    {
        this.mTexts.add(android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p3));
        return this;
    }

    public android.support.v4.app.NotificationCompat$InboxStyle setBigContentTitle(CharSequence p2)
    {
        this.mBigContentTitle = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$InboxStyle setSummaryText(CharSequence p2)
    {
        this.mSummaryText = android.support.v4.app.NotificationCompat$Builder.limitCharSequenceLength(p2);
        this.mSummaryTextSet = 1;
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompat$MessagingStyle extends android.support.v4.app.NotificationCompat$Style {
    public static final int MAXIMUM_RETAINED_MESSAGES = 25;
    CharSequence mConversationTitle;
    java.util.List mMessages;
    CharSequence mUserDisplayName;

    NotificationCompat$MessagingStyle()
    {
        this.mMessages = new java.util.ArrayList();
        return;
    }

    public NotificationCompat$MessagingStyle(CharSequence p2)
    {
        this.mMessages = new java.util.ArrayList();
        this.mUserDisplayName = p2;
        return;
    }

    public static android.support.v4.app.NotificationCompat$MessagingStyle extractMessagingStyleFromNotification(android.app.Notification p4)
    {
        int v2_0;
        android.os.Bundle v1 = android.support.v4.app.NotificationCompat.IMPL.getExtras(p4);
        if (v1.containsKey("android.selfDisplayName")) {
            try {
                v2_0 = new android.support.v4.app.NotificationCompat$MessagingStyle();
                v2_0.restoreFromCompatExtras(v1);
            } catch (ClassCastException v0) {
                v2_0 = 0;
            }
        } else {
            v2_0 = 0;
        }
        return v2_0;
    }

    public void addCompatExtras(android.os.Bundle p3)
    {
        super.addCompatExtras(p3);
        if (this.mUserDisplayName != null) {
            p3.putCharSequence("android.selfDisplayName", this.mUserDisplayName);
        }
        if (this.mConversationTitle != null) {
            p3.putCharSequence("android.conversationTitle", this.mConversationTitle);
        }
        if (!this.mMessages.isEmpty()) {
            p3.putParcelableArray("android.messages", android.support.v4.app.NotificationCompat$MessagingStyle$Message.getBundleArrayForMessages(this.mMessages));
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$MessagingStyle addMessage(android.support.v4.app.NotificationCompat$MessagingStyle$Message p3)
    {
        this.mMessages.add(p3);
        if (this.mMessages.size() > 25) {
            this.mMessages.remove(0);
        }
        return this;
    }

    public android.support.v4.app.NotificationCompat$MessagingStyle addMessage(CharSequence p3, long p4, CharSequence p6)
    {
        this.mMessages.add(new android.support.v4.app.NotificationCompat$MessagingStyle$Message(p3, p4, p6));
        if (this.mMessages.size() > 25) {
            this.mMessages.remove(0);
        }
        return this;
    }

    public CharSequence getConversationTitle()
    {
        return this.mConversationTitle;
    }

    public java.util.List getMessages()
    {
        return this.mMessages;
    }

    public CharSequence getUserDisplayName()
    {
        return this.mUserDisplayName;
    }

    protected void restoreFromCompatExtras(android.os.Bundle p3)
    {
        this.mMessages.clear();
        this.mUserDisplayName = p3.getString("android.selfDisplayName");
        this.mConversationTitle = p3.getString("android.conversationTitle");
        android.os.Parcelable[] v0 = p3.getParcelableArray("android.messages");
        if (v0 != null) {
            this.mMessages = android.support.v4.app.NotificationCompat$MessagingStyle$Message.getMessagesFromBundleArray(v0);
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$MessagingStyle setConversationTitle(CharSequence p1)
    {
        this.mConversationTitle = p1;
        return this;
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplBase implements android.support.v4.app.NotificationCompat$NotificationCompatImpl {

    NotificationCompat$NotificationCompatImplBase()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p7, android.support.v4.app.NotificationCompat$BuilderExtender p8)
    {
        android.app.Notification v0_1 = android.support.v4.app.NotificationCompatBase.add(p7.mNotification, p7.mContext, p7.resolveTitle(), p7.resolveText(), p7.mContentIntent, p7.mFullScreenIntent);
        if (p7.mPriority > 0) {
            v0_1.flags = (v0_1.flags | 128);
        }
        if (p7.mContentView != null) {
            v0_1.contentView = p7.mContentView;
        }
        return v0_1;
    }

    public android.support.v4.app.NotificationCompat$Action getAction(android.app.Notification p2, int p3)
    {
        return 0;
    }

    public int getActionCount(android.app.Notification p2)
    {
        return 0;
    }

    public android.support.v4.app.NotificationCompat$Action[] getActionsFromParcelableArrayList(java.util.ArrayList p2)
    {
        return 0;
    }

    public android.os.Bundle getBundleForUnreadConversation(android.support.v4.app.NotificationCompatBase$UnreadConversation p2)
    {
        return 0;
    }

    public String getCategory(android.app.Notification p2)
    {
        return 0;
    }

    public android.os.Bundle getExtras(android.app.Notification p2)
    {
        return 0;
    }

    public String getGroup(android.app.Notification p2)
    {
        return 0;
    }

    public boolean getLocalOnly(android.app.Notification p2)
    {
        return 0;
    }

    public java.util.ArrayList getParcelableArrayListForActions(android.support.v4.app.NotificationCompat$Action[] p2)
    {
        return 0;
    }

    public String getSortKey(android.app.Notification p2)
    {
        return 0;
    }

    public android.support.v4.app.NotificationCompatBase$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle p2, android.support.v4.app.NotificationCompatBase$UnreadConversation$Factory p3, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p4)
    {
        return 0;
    }

    public boolean isGroupSummary(android.app.Notification p2)
    {
        return 0;
    }
}
package android.support.v4.app;
public final class NotificationCompat$WearableExtender implements android.support.v4.app.NotificationCompat$Extender {
    private static final int DEFAULT_CONTENT_ICON_GRAVITY = 8388613;
    private static final int DEFAULT_FLAGS = 1;
    private static final int DEFAULT_GRAVITY = 80;
    private static final String EXTRA_WEARABLE_EXTENSIONS = "android.wearable.EXTENSIONS";
    private static final int FLAG_BIG_PICTURE_AMBIENT = 32;
    private static final int FLAG_CONTENT_INTENT_AVAILABLE_OFFLINE = 1;
    private static final int FLAG_HINT_AVOID_BACKGROUND_CLIPPING = 16;
    private static final int FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY = 64;
    private static final int FLAG_HINT_HIDE_ICON = 2;
    private static final int FLAG_HINT_SHOW_BACKGROUND_ONLY = 4;
    private static final int FLAG_START_SCROLL_BOTTOM = 8;
    private static final String KEY_ACTIONS = "actions";
    private static final String KEY_BACKGROUND = "background";
    private static final String KEY_BRIDGE_TAG = "bridgeTag";
    private static final String KEY_CONTENT_ACTION_INDEX = "contentActionIndex";
    private static final String KEY_CONTENT_ICON = "contentIcon";
    private static final String KEY_CONTENT_ICON_GRAVITY = "contentIconGravity";
    private static final String KEY_CUSTOM_CONTENT_HEIGHT = "customContentHeight";
    private static final String KEY_CUSTOM_SIZE_PRESET = "customSizePreset";
    private static final String KEY_DISMISSAL_ID = "dismissalId";
    private static final String KEY_DISPLAY_INTENT = "displayIntent";
    private static final String KEY_FLAGS = "flags";
    private static final String KEY_GRAVITY = "gravity";
    private static final String KEY_HINT_SCREEN_TIMEOUT = "hintScreenTimeout";
    private static final String KEY_PAGES = "pages";
    public static final int SCREEN_TIMEOUT_LONG = 255;
    public static final int SCREEN_TIMEOUT_SHORT = 0;
    public static final int SIZE_DEFAULT = 0;
    public static final int SIZE_FULL_SCREEN = 5;
    public static final int SIZE_LARGE = 4;
    public static final int SIZE_MEDIUM = 3;
    public static final int SIZE_SMALL = 2;
    public static final int SIZE_XSMALL = 1;
    public static final int UNSET_ACTION_INDEX = 255;
    private java.util.ArrayList mActions;
    private android.graphics.Bitmap mBackground;
    private String mBridgeTag;
    private int mContentActionIndex;
    private int mContentIcon;
    private int mContentIconGravity;
    private int mCustomContentHeight;
    private int mCustomSizePreset;
    private String mDismissalId;
    private android.app.PendingIntent mDisplayIntent;
    private int mFlags;
    private int mGravity;
    private int mHintScreenTimeout;
    private java.util.ArrayList mPages;

    public NotificationCompat$WearableExtender()
    {
        this.mActions = new java.util.ArrayList();
        this.mFlags = 1;
        this.mPages = new java.util.ArrayList();
        this.mContentIconGravity = 8388613;
        this.mContentActionIndex = -1;
        this.mCustomSizePreset = 0;
        this.mGravity = 80;
        return;
    }

    public NotificationCompat$WearableExtender(android.app.Notification p12)
    {
        int v3;
        this.mActions = new java.util.ArrayList();
        this.mFlags = 1;
        this.mPages = new java.util.ArrayList();
        this.mContentIconGravity = 8388613;
        this.mContentActionIndex = -1;
        this.mCustomSizePreset = 0;
        this.mGravity = 80;
        android.os.Bundle v1 = android.support.v4.app.NotificationCompat.getExtras(p12);
        if (v1 == null) {
            v3 = 0;
        } else {
            v3 = v1.getBundle("android.wearable.EXTENSIONS");
        }
        if (v3 != 0) {
            android.support.v4.app.NotificationCompat$Action[] v0 = android.support.v4.app.NotificationCompat.IMPL.getActionsFromParcelableArrayList(v3.getParcelableArrayList("actions"));
            if (v0 != null) {
                java.util.Collections.addAll(this.mActions, v0);
            }
            this.mFlags = v3.getInt("flags", 1);
            this.mDisplayIntent = ((android.app.PendingIntent) v3.getParcelable("displayIntent"));
            android.app.Notification[] v2 = android.support.v4.app.NotificationCompat.getNotificationArrayFromBundle(v3, "pages");
            if (v2 != null) {
                java.util.Collections.addAll(this.mPages, v2);
            }
            this.mBackground = ((android.graphics.Bitmap) v3.getParcelable("background"));
            this.mContentIcon = v3.getInt("contentIcon");
            this.mContentIconGravity = v3.getInt("contentIconGravity", 8388613);
            this.mContentActionIndex = v3.getInt("contentActionIndex", -1);
            this.mCustomSizePreset = v3.getInt("customSizePreset", 0);
            this.mCustomContentHeight = v3.getInt("customContentHeight");
            this.mGravity = v3.getInt("gravity", 80);
            this.mHintScreenTimeout = v3.getInt("hintScreenTimeout");
            this.mDismissalId = v3.getString("dismissalId");
            this.mBridgeTag = v3.getString("bridgeTag");
        }
        return;
    }

    private void setFlag(int p3, boolean p4)
    {
        if (!p4) {
            this.mFlags = (this.mFlags & (p3 ^ -1));
        } else {
            this.mFlags = (this.mFlags | p3);
        }
        return;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender addAction(android.support.v4.app.NotificationCompat$Action p2)
    {
        this.mActions.add(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender addActions(java.util.List p2)
    {
        this.mActions.addAll(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender addPage(android.app.Notification p2)
    {
        this.mPages.add(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender addPages(java.util.List p2)
    {
        this.mPages.addAll(p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender clearActions()
    {
        this.mActions.clear();
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender clearPages()
    {
        this.mPages.clear();
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender clone()
    {
        android.support.v4.app.NotificationCompat$WearableExtender v0_1 = new android.support.v4.app.NotificationCompat$WearableExtender();
        v0_1.mActions = new java.util.ArrayList(this.mActions);
        v0_1.mFlags = this.mFlags;
        v0_1.mDisplayIntent = this.mDisplayIntent;
        v0_1.mPages = new java.util.ArrayList(this.mPages);
        v0_1.mBackground = this.mBackground;
        v0_1.mContentIcon = this.mContentIcon;
        v0_1.mContentIconGravity = this.mContentIconGravity;
        v0_1.mContentActionIndex = this.mContentActionIndex;
        v0_1.mCustomSizePreset = this.mCustomSizePreset;
        v0_1.mCustomContentHeight = this.mCustomContentHeight;
        v0_1.mGravity = this.mGravity;
        v0_1.mHintScreenTimeout = this.mHintScreenTimeout;
        v0_1.mDismissalId = this.mDismissalId;
        v0_1.mBridgeTag = this.mBridgeTag;
        return v0_1;
    }

    public bridge synthetic Object clone()
    {
        return this.clone();
    }

    public android.support.v4.app.NotificationCompat$Builder extend(android.support.v4.app.NotificationCompat$Builder p6)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        if (!this.mActions.isEmpty()) {
            android.support.v4.app.NotificationCompat$Action[] v4_1 = new android.support.v4.app.NotificationCompat$Action[this.mActions.size()];
            v0_1.putParcelableArrayList("actions", android.support.v4.app.NotificationCompat.IMPL.getParcelableArrayListForActions(((android.support.v4.app.NotificationCompat$Action[]) this.mActions.toArray(v4_1))));
        }
        if (this.mFlags != 1) {
            v0_1.putInt("flags", this.mFlags);
        }
        if (this.mDisplayIntent != null) {
            v0_1.putParcelable("displayIntent", this.mDisplayIntent);
        }
        if (!this.mPages.isEmpty()) {
            android.app.Notification[] v3_2 = new android.app.Notification[this.mPages.size()];
            v0_1.putParcelableArray("pages", ((android.os.Parcelable[]) this.mPages.toArray(v3_2)));
        }
        if (this.mBackground != null) {
            v0_1.putParcelable("background", this.mBackground);
        }
        if (this.mContentIcon != 0) {
            v0_1.putInt("contentIcon", this.mContentIcon);
        }
        if (this.mContentIconGravity != 8388613) {
            v0_1.putInt("contentIconGravity", this.mContentIconGravity);
        }
        if (this.mContentActionIndex != -1) {
            v0_1.putInt("contentActionIndex", this.mContentActionIndex);
        }
        if (this.mCustomSizePreset != 0) {
            v0_1.putInt("customSizePreset", this.mCustomSizePreset);
        }
        if (this.mCustomContentHeight != 0) {
            v0_1.putInt("customContentHeight", this.mCustomContentHeight);
        }
        if (this.mGravity != 80) {
            v0_1.putInt("gravity", this.mGravity);
        }
        if (this.mHintScreenTimeout != 0) {
            v0_1.putInt("hintScreenTimeout", this.mHintScreenTimeout);
        }
        if (this.mDismissalId != null) {
            v0_1.putString("dismissalId", this.mDismissalId);
        }
        if (this.mBridgeTag != null) {
            v0_1.putString("bridgeTag", this.mBridgeTag);
        }
        p6.getExtras().putBundle("android.wearable.EXTENSIONS", v0_1);
        return p6;
    }

    public java.util.List getActions()
    {
        return this.mActions;
    }

    public android.graphics.Bitmap getBackground()
    {
        return this.mBackground;
    }

    public String getBridgeTag()
    {
        return this.mBridgeTag;
    }

    public int getContentAction()
    {
        return this.mContentActionIndex;
    }

    public int getContentIcon()
    {
        return this.mContentIcon;
    }

    public int getContentIconGravity()
    {
        return this.mContentIconGravity;
    }

    public boolean getContentIntentAvailableOffline()
    {
        int v0_2;
        if ((this.mFlags & 1) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int getCustomContentHeight()
    {
        return this.mCustomContentHeight;
    }

    public int getCustomSizePreset()
    {
        return this.mCustomSizePreset;
    }

    public String getDismissalId()
    {
        return this.mDismissalId;
    }

    public android.app.PendingIntent getDisplayIntent()
    {
        return this.mDisplayIntent;
    }

    public int getGravity()
    {
        return this.mGravity;
    }

    public boolean getHintAmbientBigPicture()
    {
        int v0_2;
        if ((this.mFlags & 32) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean getHintAvoidBackgroundClipping()
    {
        int v0_2;
        if ((this.mFlags & 16) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean getHintContentIntentLaunchesActivity()
    {
        int v0_2;
        if ((this.mFlags & 64) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean getHintHideIcon()
    {
        int v0_2;
        if ((this.mFlags & 2) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int getHintScreenTimeout()
    {
        return this.mHintScreenTimeout;
    }

    public boolean getHintShowBackgroundOnly()
    {
        int v0_2;
        if ((this.mFlags & 4) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public java.util.List getPages()
    {
        return this.mPages;
    }

    public boolean getStartScrollBottom()
    {
        int v0_2;
        if ((this.mFlags & 8) == 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setBackground(android.graphics.Bitmap p1)
    {
        this.mBackground = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setBridgeTag(String p1)
    {
        this.mBridgeTag = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setContentAction(int p1)
    {
        this.mContentActionIndex = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setContentIcon(int p1)
    {
        this.mContentIcon = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setContentIconGravity(int p1)
    {
        this.mContentIconGravity = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setContentIntentAvailableOffline(boolean p2)
    {
        this.setFlag(1, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setCustomContentHeight(int p1)
    {
        this.mCustomContentHeight = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setCustomSizePreset(int p1)
    {
        this.mCustomSizePreset = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setDismissalId(String p1)
    {
        this.mDismissalId = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setDisplayIntent(android.app.PendingIntent p1)
    {
        this.mDisplayIntent = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setGravity(int p1)
    {
        this.mGravity = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintAmbientBigPicture(boolean p2)
    {
        this.setFlag(32, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintAvoidBackgroundClipping(boolean p2)
    {
        this.setFlag(16, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintContentIntentLaunchesActivity(boolean p2)
    {
        this.setFlag(64, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintHideIcon(boolean p2)
    {
        this.setFlag(2, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintScreenTimeout(int p1)
    {
        this.mHintScreenTimeout = p1;
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setHintShowBackgroundOnly(boolean p2)
    {
        this.setFlag(4, p2);
        return this;
    }

    public android.support.v4.app.NotificationCompat$WearableExtender setStartScrollBottom(boolean p2)
    {
        this.setFlag(8, p2);
        return this;
    }
}
package android.support.v4.app;
public class NotificationCompatApi20$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor, android.support.v4.app.NotificationBuilderWithActions {
    private android.app.Notification$Builder b;
    private android.widget.RemoteViews mBigContentView;
    private android.widget.RemoteViews mContentView;
    private android.os.Bundle mExtras;

    public NotificationCompatApi20$Builder(android.content.Context p9, android.app.Notification p10, CharSequence p11, CharSequence p12, CharSequence p13, android.widget.RemoteViews p14, int p15, android.app.PendingIntent p16, android.app.PendingIntent p17, android.graphics.Bitmap p18, int p19, int p20, boolean p21, boolean p22, boolean p23, int p24, CharSequence p25, boolean p26, java.util.ArrayList p27, android.os.Bundle p28, String p29, boolean p30, String p31, android.widget.RemoteViews p32, android.widget.RemoteViews p33)
    {
        String[] v4_19;
        android.app.Notification$Builder vtmp8 = new android.app.Notification$Builder(p9).setWhen(p10.when).setShowWhen(p22).setSmallIcon(p10.icon, p10.iconLevel).setContent(p10.contentView).setTicker(p10.tickerText, p14).setSound(p10.sound, p10.audioStreamType).setVibrate(p10.vibrate).setLights(p10.ledARGB, p10.ledOnMS, p10.ledOffMS);
        if ((p10.flags & 2) == 0) {
            v4_19 = 0;
        } else {
            v4_19 = 1;
        }
        String[] v4_22;
        android.os.Bundle v5_7 = vtmp8.setOngoing(v4_19);
        if ((p10.flags & 8) == 0) {
            v4_22 = 0;
        } else {
            v4_22 = 1;
        }
        String[] v4_25;
        android.os.Bundle v5_8 = v5_7.setOnlyAlertOnce(v4_22);
        if ((p10.flags & 16) == 0) {
            v4_25 = 0;
        } else {
            v4_25 = 1;
        }
        String[] v4_36;
        android.app.Notification$Builder vtmp18 = v5_8.setAutoCancel(v4_25).setDefaults(p10.defaults).setContentTitle(p11).setContentText(p12).setSubText(p25).setContentInfo(p13).setContentIntent(p16).setDeleteIntent(p10.deleteIntent);
        if ((p10.flags & 128) == 0) {
            v4_36 = 0;
        } else {
            v4_36 = 1;
        }
        this.b = vtmp18.setFullScreenIntent(p17, v4_36).setLargeIcon(p18).setNumber(p15).setUsesChronometer(p23).setPriority(p24).setProgress(p19, p20, p21).setLocalOnly(p26).setGroup(p29).setGroupSummary(p30).setSortKey(p31);
        this.mExtras = new android.os.Bundle();
        if (p28 != null) {
            this.mExtras.putAll(p28);
        }
        if ((p27 != null) && (!p27.isEmpty())) {
            String[] v4_9 = new String[p27.size()];
            this.mExtras.putStringArray("android.people", ((String[]) p27.toArray(v4_9)));
        }
        this.mContentView = p32;
        this.mBigContentView = p33;
        return;
    }

    public void addAction(android.support.v4.app.NotificationCompatBase$Action p2)
    {
        android.support.v4.app.NotificationCompatApi20.addAction(this.b, p2);
        return;
    }

    public android.app.Notification build()
    {
        this.b.setExtras(this.mExtras);
        android.app.Notification v0 = this.b.build();
        if (this.mContentView != null) {
            v0.contentView = this.mContentView;
        }
        if (this.mBigContentView != null) {
            v0.bigContentView = this.mBigContentView;
        }
        return v0;
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
public class NotificationCompatApi21$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor, android.support.v4.app.NotificationBuilderWithActions {
    private android.app.Notification$Builder b;
    private android.widget.RemoteViews mBigContentView;
    private android.widget.RemoteViews mContentView;
    private android.os.Bundle mExtras;
    private android.widget.RemoteViews mHeadsUpContentView;

    public NotificationCompatApi21$Builder(android.content.Context p10, android.app.Notification p11, CharSequence p12, CharSequence p13, CharSequence p14, android.widget.RemoteViews p15, int p16, android.app.PendingIntent p17, android.app.PendingIntent p18, android.graphics.Bitmap p19, int p20, int p21, boolean p22, boolean p23, boolean p24, int p25, CharSequence p26, boolean p27, String p28, java.util.ArrayList p29, android.os.Bundle p30, int p31, int p32, android.app.Notification p33, String p34, boolean p35, String p36, android.widget.RemoteViews p37, android.widget.RemoteViews p38, android.widget.RemoteViews p39)
    {
        java.util.Iterator v5_20;
        android.app.Notification$Builder vtmp8 = new android.app.Notification$Builder(p10).setWhen(p11.when).setShowWhen(p23).setSmallIcon(p11.icon, p11.iconLevel).setContent(p11.contentView).setTicker(p11.tickerText, p15).setSound(p11.sound, p11.audioStreamType).setVibrate(p11.vibrate).setLights(p11.ledARGB, p11.ledOnMS, p11.ledOffMS);
        if ((p11.flags & 2) == 0) {
            v5_20 = 0;
        } else {
            v5_20 = 1;
        }
        java.util.Iterator v5_23;
        android.app.Notification$Builder v6_9 = vtmp8.setOngoing(v5_20);
        if ((p11.flags & 8) == 0) {
            v5_23 = 0;
        } else {
            v5_23 = 1;
        }
        java.util.Iterator v5_26;
        android.app.Notification$Builder v6_10 = v6_9.setOnlyAlertOnce(v5_23);
        if ((p11.flags & 16) == 0) {
            v5_26 = 0;
        } else {
            v5_26 = 1;
        }
        java.util.Iterator v5_37;
        android.app.Notification$Builder vtmp18 = v6_10.setAutoCancel(v5_26).setDefaults(p11.defaults).setContentTitle(p12).setContentText(p13).setSubText(p26).setContentInfo(p14).setContentIntent(p17).setDeleteIntent(p11.deleteIntent);
        if ((p11.flags & 128) == 0) {
            v5_37 = 0;
        } else {
            v5_37 = 1;
        }
        this.b = vtmp18.setFullScreenIntent(p18, v5_37).setLargeIcon(p19).setNumber(p16).setUsesChronometer(p24).setPriority(p25).setProgress(p20, p21, p22).setLocalOnly(p27).setGroup(p34).setGroupSummary(p35).setSortKey(p36).setCategory(p28).setColor(p31).setVisibility(p32).setPublicVersion(p33);
        this.mExtras = new android.os.Bundle();
        if (p30 != null) {
            this.mExtras.putAll(p30);
        }
        java.util.Iterator v5_12 = p29.iterator();
        while (v5_12.hasNext()) {
            this.b.addPerson(((String) v5_12.next()));
        }
        this.mContentView = p37;
        this.mBigContentView = p38;
        this.mHeadsUpContentView = p39;
        return;
    }

    public void addAction(android.support.v4.app.NotificationCompatBase$Action p2)
    {
        android.support.v4.app.NotificationCompatApi20.addAction(this.b, p2);
        return;
    }

    public android.app.Notification build()
    {
        this.b.setExtras(this.mExtras);
        android.app.Notification v0 = this.b.build();
        if (this.mContentView != null) {
            v0.contentView = this.mContentView;
        }
        if (this.mBigContentView != null) {
            v0.bigContentView = this.mBigContentView;
        }
        if (this.mHeadsUpContentView != null) {
            v0.headsUpContentView = this.mHeadsUpContentView;
        }
        return v0;
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
public class NotificationCompatApi24$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor, android.support.v4.app.NotificationBuilderWithActions {
    private android.app.Notification$Builder b;

    public NotificationCompatApi24$Builder(android.content.Context p10, android.app.Notification p11, CharSequence p12, CharSequence p13, CharSequence p14, android.widget.RemoteViews p15, int p16, android.app.PendingIntent p17, android.app.PendingIntent p18, android.graphics.Bitmap p19, int p20, int p21, boolean p22, boolean p23, boolean p24, int p25, CharSequence p26, boolean p27, String p28, java.util.ArrayList p29, android.os.Bundle p30, int p31, int p32, android.app.Notification p33, String p34, boolean p35, String p36, CharSequence[] p37, android.widget.RemoteViews p38, android.widget.RemoteViews p39, android.widget.RemoteViews p40)
    {
        java.util.Iterator v5_22;
        android.app.Notification$Builder vtmp8 = new android.app.Notification$Builder(p10).setWhen(p11.when).setShowWhen(p23).setSmallIcon(p11.icon, p11.iconLevel).setContent(p11.contentView).setTicker(p11.tickerText, p15).setSound(p11.sound, p11.audioStreamType).setVibrate(p11.vibrate).setLights(p11.ledARGB, p11.ledOnMS, p11.ledOffMS);
        if ((p11.flags & 2) == 0) {
            v5_22 = 0;
        } else {
            v5_22 = 1;
        }
        java.util.Iterator v5_25;
        android.app.Notification$Builder v6_9 = vtmp8.setOngoing(v5_22);
        if ((p11.flags & 8) == 0) {
            v5_25 = 0;
        } else {
            v5_25 = 1;
        }
        java.util.Iterator v5_28;
        android.app.Notification$Builder v6_10 = v6_9.setOnlyAlertOnce(v5_25);
        if ((p11.flags & 16) == 0) {
            v5_28 = 0;
        } else {
            v5_28 = 1;
        }
        java.util.Iterator v5_39;
        android.app.Notification$Builder vtmp18 = v6_10.setAutoCancel(v5_28).setDefaults(p11.defaults).setContentTitle(p12).setContentText(p13).setSubText(p26).setContentInfo(p14).setContentIntent(p17).setDeleteIntent(p11.deleteIntent);
        if ((p11.flags & 128) == 0) {
            v5_39 = 0;
        } else {
            v5_39 = 1;
        }
        this.b = vtmp18.setFullScreenIntent(p18, v5_39).setLargeIcon(p19).setNumber(p16).setUsesChronometer(p24).setPriority(p25).setProgress(p20, p21, p22).setLocalOnly(p27).setExtras(p30).setGroup(p34).setGroupSummary(p35).setSortKey(p36).setCategory(p28).setColor(p31).setVisibility(p32).setPublicVersion(p33).setRemoteInputHistory(p37);
        if (p38 != null) {
            this.b.setCustomContentView(p38);
        }
        if (p39 != null) {
            this.b.setCustomBigContentView(p39);
        }
        if (p40 != null) {
            this.b.setCustomHeadsUpContentView(p40);
        }
        java.util.Iterator v5_14 = p29.iterator();
        while (v5_14.hasNext()) {
            this.b.addPerson(((String) v5_14.next()));
        }
        return;
    }

    public void addAction(android.support.v4.app.NotificationCompatBase$Action p7)
    {
        android.app.Notification$Action$Builder v0_1 = new android.app.Notification$Action$Builder(p7.getIcon(), p7.getTitle(), p7.getActionIntent());
        if (p7.getRemoteInputs() != null) {
            android.app.Notification$Action v4_0 = android.support.v4.app.RemoteInputCompatApi20.fromCompat(p7.getRemoteInputs());
            int v5_0 = v4_0.length;
            android.app.Notification$Builder v3_1 = 0;
            while (v3_1 < v5_0) {
                v0_1.addRemoteInput(v4_0[v3_1]);
                v3_1++;
            }
        }
        android.os.Bundle v1_1;
        if (p7.getExtras() == null) {
            v1_1 = new android.os.Bundle();
        } else {
            v1_1 = new android.os.Bundle(p7.getExtras());
        }
        v1_1.putBoolean("android.support.allowGeneratedReplies", p7.getAllowGeneratedReplies());
        v0_1.addExtras(v1_1);
        v0_1.setAllowGeneratedReplies(p7.getAllowGeneratedReplies());
        this.b.addAction(v0_1.build());
        return;
    }

    public android.app.Notification build()
    {
        return this.b.build();
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
public class NotificationCompatIceCreamSandwich$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor {
    private android.app.Notification$Builder b;

    public NotificationCompatIceCreamSandwich$Builder(android.content.Context p9, android.app.Notification p10, CharSequence p11, CharSequence p12, CharSequence p13, android.widget.RemoteViews p14, int p15, android.app.PendingIntent p16, android.app.PendingIntent p17, android.graphics.Bitmap p18, int p19, int p20, boolean p21)
    {
        android.app.Notification$Builder v4_8;
        android.app.Notification$Builder vtmp7 = new android.app.Notification$Builder(p9).setWhen(p10.when).setSmallIcon(p10.icon, p10.iconLevel).setContent(p10.contentView).setTicker(p10.tickerText, p14).setSound(p10.sound, p10.audioStreamType).setVibrate(p10.vibrate).setLights(p10.ledARGB, p10.ledOnMS, p10.ledOffMS);
        if ((p10.flags & 2) == 0) {
            v4_8 = 0;
        } else {
            v4_8 = 1;
        }
        android.app.Notification$Builder v4_11;
        android.app.Notification$Builder v5_6 = vtmp7.setOngoing(v4_8);
        if ((p10.flags & 8) == 0) {
            v4_11 = 0;
        } else {
            v4_11 = 1;
        }
        android.app.Notification$Builder v4_14;
        android.app.Notification$Builder v5_7 = v5_6.setOnlyAlertOnce(v4_11);
        if ((p10.flags & 16) == 0) {
            v4_14 = 0;
        } else {
            v4_14 = 1;
        }
        android.app.Notification$Builder v4_24;
        android.app.Notification$Builder vtmp16 = v5_7.setAutoCancel(v4_14).setDefaults(p10.defaults).setContentTitle(p11).setContentText(p12).setContentInfo(p13).setContentIntent(p16).setDeleteIntent(p10.deleteIntent);
        if ((p10.flags & 128) == 0) {
            v4_24 = 0;
        } else {
            v4_24 = 1;
        }
        this.b = vtmp16.setFullScreenIntent(p17, v4_24).setLargeIcon(p18).setNumber(p15).setProgress(p19, p20, p21);
        return;
    }

    public android.app.Notification build()
    {
        return this.b.getNotification();
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
public class NotificationCompatJellybean$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor, android.support.v4.app.NotificationBuilderWithActions {
    private android.app.Notification$Builder b;
    private java.util.List mActionExtrasList;
    private android.widget.RemoteViews mBigContentView;
    private android.widget.RemoteViews mContentView;
    private final android.os.Bundle mExtras;

    public NotificationCompatJellybean$Builder(android.content.Context p9, android.app.Notification p10, CharSequence p11, CharSequence p12, CharSequence p13, android.widget.RemoteViews p14, int p15, android.app.PendingIntent p16, android.app.PendingIntent p17, android.graphics.Bitmap p18, int p19, int p20, boolean p21, boolean p22, int p23, CharSequence p24, boolean p25, android.os.Bundle p26, String p27, boolean p28, String p29, android.widget.RemoteViews p30, android.widget.RemoteViews p31)
    {
        android.os.Bundle v4_14;
        this.mActionExtrasList = new java.util.ArrayList();
        android.app.Notification$Builder vtmp7 = new android.app.Notification$Builder(p9).setWhen(p10.when).setSmallIcon(p10.icon, p10.iconLevel).setContent(p10.contentView).setTicker(p10.tickerText, p14).setSound(p10.sound, p10.audioStreamType).setVibrate(p10.vibrate).setLights(p10.ledARGB, p10.ledOnMS, p10.ledOffMS);
        if ((p10.flags & 2) == 0) {
            v4_14 = 0;
        } else {
            v4_14 = 1;
        }
        android.os.Bundle v4_18;
        String v5_11 = vtmp7.setOngoing(v4_14);
        if ((p10.flags & 8) == 0) {
            v4_18 = 0;
        } else {
            v4_18 = 1;
        }
        android.os.Bundle v4_21;
        String v5_12 = v5_11.setOnlyAlertOnce(v4_18);
        if ((p10.flags & 16) == 0) {
            v4_21 = 0;
        } else {
            v4_21 = 1;
        }
        android.os.Bundle v4_32;
        android.app.Notification$Builder vtmp17 = v5_12.setAutoCancel(v4_21).setDefaults(p10.defaults).setContentTitle(p11).setContentText(p12).setSubText(p24).setContentInfo(p13).setContentIntent(p16).setDeleteIntent(p10.deleteIntent);
        if ((p10.flags & 128) == 0) {
            v4_32 = 0;
        } else {
            v4_32 = 1;
        }
        this.b = vtmp17.setFullScreenIntent(p17, v4_32).setLargeIcon(p18).setNumber(p15).setUsesChronometer(p22).setPriority(p23).setProgress(p19, p20, p21);
        this.mExtras = new android.os.Bundle();
        if (p26 != null) {
            this.mExtras.putAll(p26);
        }
        if (p25) {
            this.mExtras.putBoolean("android.support.localOnly", 1);
        }
        if (p27 != null) {
            this.mExtras.putString("android.support.groupKey", p27);
            if (!p28) {
                this.mExtras.putBoolean("android.support.useSideChannel", 1);
            } else {
                this.mExtras.putBoolean("android.support.isGroupSummary", 1);
            }
        }
        if (p29 != null) {
            this.mExtras.putString("android.support.sortKey", p29);
        }
        this.mContentView = p30;
        this.mBigContentView = p31;
        return;
    }

    public void addAction(android.support.v4.app.NotificationCompatBase$Action p3)
    {
        this.mActionExtrasList.add(android.support.v4.app.NotificationCompatJellybean.writeActionAndGetExtras(this.b, p3));
        return;
    }

    public android.app.Notification build()
    {
        android.app.Notification v4 = this.b.build();
        android.os.Bundle v1 = android.support.v4.app.NotificationCompatJellybean.getExtras(v4);
        android.os.Bundle v3_1 = new android.os.Bundle(this.mExtras);
        android.widget.RemoteViews v5_2 = this.mExtras.keySet().iterator();
        while (v5_2.hasNext()) {
            String v2_1 = ((String) v5_2.next());
            if (v1.containsKey(v2_1)) {
                v3_1.remove(v2_1);
            }
        }
        v1.putAll(v3_1);
        android.util.SparseArray v0 = android.support.v4.app.NotificationCompatJellybean.buildActionExtrasMap(this.mActionExtrasList);
        if (v0 != null) {
            android.support.v4.app.NotificationCompatJellybean.getExtras(v4).putSparseParcelableArray("android.support.actionExtras", v0);
        }
        if (this.mContentView != null) {
            v4.contentView = this.mContentView;
        }
        if (this.mBigContentView != null) {
            v4.bigContentView = this.mBigContentView;
        }
        return v4;
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
public class NotificationCompatKitKat$Builder implements android.support.v4.app.NotificationBuilderWithBuilderAccessor, android.support.v4.app.NotificationBuilderWithActions {
    private android.app.Notification$Builder b;
    private java.util.List mActionExtrasList;
    private android.widget.RemoteViews mBigContentView;
    private android.widget.RemoteViews mContentView;
    private android.os.Bundle mExtras;

    public NotificationCompatKitKat$Builder(android.content.Context p9, android.app.Notification p10, CharSequence p11, CharSequence p12, CharSequence p13, android.widget.RemoteViews p14, int p15, android.app.PendingIntent p16, android.app.PendingIntent p17, android.graphics.Bitmap p18, int p19, int p20, boolean p21, boolean p22, boolean p23, int p24, CharSequence p25, boolean p26, java.util.ArrayList p27, android.os.Bundle p28, String p29, boolean p30, String p31, android.widget.RemoteViews p32, android.widget.RemoteViews p33)
    {
        android.os.Bundle v4_21;
        this.mActionExtrasList = new java.util.ArrayList();
        android.app.Notification$Builder vtmp8 = new android.app.Notification$Builder(p9).setWhen(p10.when).setShowWhen(p22).setSmallIcon(p10.icon, p10.iconLevel).setContent(p10.contentView).setTicker(p10.tickerText, p14).setSound(p10.sound, p10.audioStreamType).setVibrate(p10.vibrate).setLights(p10.ledARGB, p10.ledOnMS, p10.ledOffMS);
        if ((p10.flags & 2) == 0) {
            v4_21 = 0;
        } else {
            v4_21 = 1;
        }
        android.os.Bundle v4_25;
        String v5_13 = vtmp8.setOngoing(v4_21);
        if ((p10.flags & 8) == 0) {
            v4_25 = 0;
        } else {
            v4_25 = 1;
        }
        android.os.Bundle v4_29;
        String v5_14 = v5_13.setOnlyAlertOnce(v4_25);
        if ((p10.flags & 16) == 0) {
            v4_29 = 0;
        } else {
            v4_29 = 1;
        }
        android.os.Bundle v4_39;
        android.app.Notification$Builder vtmp18 = v5_14.setAutoCancel(v4_29).setDefaults(p10.defaults).setContentTitle(p11).setContentText(p12).setSubText(p25).setContentInfo(p13).setContentIntent(p16).setDeleteIntent(p10.deleteIntent);
        if ((p10.flags & 128) == 0) {
            v4_39 = 0;
        } else {
            v4_39 = 1;
        }
        this.b = vtmp18.setFullScreenIntent(p17, v4_39).setLargeIcon(p18).setNumber(p15).setUsesChronometer(p23).setPriority(p24).setProgress(p19, p20, p21);
        this.mExtras = new android.os.Bundle();
        if (p28 != null) {
            this.mExtras.putAll(p28);
        }
        if ((p27 != null) && (!p27.isEmpty())) {
            android.os.Bundle v4_5 = new String[p27.size()];
            this.mExtras.putStringArray("android.people", ((String[]) p27.toArray(v4_5)));
        }
        if (p26) {
            this.mExtras.putBoolean("android.support.localOnly", 1);
        }
        if (p29 != null) {
            this.mExtras.putString("android.support.groupKey", p29);
            if (!p30) {
                this.mExtras.putBoolean("android.support.useSideChannel", 1);
            } else {
                this.mExtras.putBoolean("android.support.isGroupSummary", 1);
            }
        }
        if (p31 != null) {
            this.mExtras.putString("android.support.sortKey", p31);
        }
        this.mContentView = p32;
        this.mBigContentView = p33;
        return;
    }

    public void addAction(android.support.v4.app.NotificationCompatBase$Action p3)
    {
        this.mActionExtrasList.add(android.support.v4.app.NotificationCompatJellybean.writeActionAndGetExtras(this.b, p3));
        return;
    }

    public android.app.Notification build()
    {
        android.util.SparseArray v0 = android.support.v4.app.NotificationCompatJellybean.buildActionExtrasMap(this.mActionExtrasList);
        if (v0 != null) {
            this.mExtras.putSparseParcelableArray("android.support.actionExtras", v0);
        }
        this.b.setExtras(this.mExtras);
        android.app.Notification v1 = this.b.build();
        if (this.mContentView != null) {
            v1.contentView = this.mContentView;
        }
        if (this.mBigContentView != null) {
            v1.bigContentView = this.mBigContentView;
        }
        return v1;
    }

    public android.app.Notification$Builder getBuilder()
    {
        return this.b;
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$CancelTask implements android.support.v4.app.NotificationManagerCompat$Task {
    final boolean all;
    final int id;
    final String packageName;
    final String tag;

    public NotificationManagerCompat$CancelTask(String p2)
    {
        this.packageName = p2;
        this.id = 0;
        this.tag = 0;
        this.all = 1;
        return;
    }

    public NotificationManagerCompat$CancelTask(String p2, int p3, String p4)
    {
        this.packageName = p2;
        this.id = p3;
        this.tag = p4;
        this.all = 0;
        return;
    }

    public void send(android.support.v4.app.INotificationSideChannel p4)
    {
        if (!this.all) {
            p4.cancel(this.packageName, this.id, this.tag);
        } else {
            p4.cancelAll(this.packageName);
        }
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder("CancelTask[");
        v0_1.append("packageName:").append(this.packageName);
        v0_1.append(", id:").append(this.id);
        v0_1.append(", tag:").append(this.tag);
        v0_1.append(", all:").append(this.all);
        v0_1.append("]");
        return v0_1.toString();
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$ImplBase implements android.support.v4.app.NotificationManagerCompat$Impl {

    NotificationManagerCompat$ImplBase()
    {
        return;
    }

    public boolean areNotificationsEnabled(android.content.Context p2, android.app.NotificationManager p3)
    {
        return 1;
    }

    public void cancelNotification(android.app.NotificationManager p1, String p2, int p3)
    {
        p1.cancel(p2, p3);
        return;
    }

    public int getImportance(android.app.NotificationManager p2)
    {
        return -1000;
    }

    public int getSideChannelBindFlags()
    {
        return 1;
    }

    public void postNotification(android.app.NotificationManager p1, String p2, int p3, android.app.Notification p4)
    {
        p1.notify(p2, p3, p4);
        return;
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$NotifyTask implements android.support.v4.app.NotificationManagerCompat$Task {
    final int id;
    final android.app.Notification notif;
    final String packageName;
    final String tag;

    public NotificationManagerCompat$NotifyTask(String p1, int p2, String p3, android.app.Notification p4)
    {
        this.packageName = p1;
        this.id = p2;
        this.tag = p3;
        this.notif = p4;
        return;
    }

    public void send(android.support.v4.app.INotificationSideChannel p5)
    {
        p5.notify(this.packageName, this.id, this.tag, this.notif);
        return;
    }

    public String toString()
    {
        StringBuilder v0_1 = new StringBuilder("NotifyTask[");
        v0_1.append("packageName:").append(this.packageName);
        v0_1.append(", id:").append(this.id);
        v0_1.append(", tag:").append(this.tag);
        v0_1.append("]");
        return v0_1.toString();
    }
}
package android.support.v4.app;
final class RemoteInput$1 implements android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory {

    RemoteInput$1()
    {
        return;
    }

    public android.support.v4.app.RemoteInput build(String p7, CharSequence p8, CharSequence[] p9, boolean p10, android.os.Bundle p11)
    {
        return new android.support.v4.app.RemoteInput(p7, p8, p9, p10, p11);
    }

    public bridge synthetic android.support.v4.app.RemoteInputCompatBase$RemoteInput build(String p2, CharSequence p3, CharSequence[] p4, boolean p5, android.os.Bundle p6)
    {
        return this.build(p2, p3, p4, p5, p6);
    }

    public android.support.v4.app.RemoteInput[] newArray(int p2)
    {
        android.support.v4.app.RemoteInput[] v0 = new android.support.v4.app.RemoteInput[p2];
        return v0;
    }

    public bridge synthetic android.support.v4.app.RemoteInputCompatBase$RemoteInput[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.app;
 class RemoteInput$ImplApi20 implements android.support.v4.app.RemoteInput$Impl {

    RemoteInput$ImplApi20()
    {
        return;
    }

    public void addResultsToIntent(android.support.v4.app.RemoteInput[] p1, android.content.Intent p2, android.os.Bundle p3)
    {
        android.support.v4.app.RemoteInputCompatApi20.addResultsToIntent(p1, p2, p3);
        return;
    }

    public android.os.Bundle getResultsFromIntent(android.content.Intent p2)
    {
        return android.support.v4.app.RemoteInputCompatApi20.getResultsFromIntent(p2);
    }
}
package android.support.v4.app;
 class RemoteInput$ImplBase implements android.support.v4.app.RemoteInput$Impl {

    RemoteInput$ImplBase()
    {
        return;
    }

    public void addResultsToIntent(android.support.v4.app.RemoteInput[] p3, android.content.Intent p4, android.os.Bundle p5)
    {
        android.util.Log.w("RemoteInput", "RemoteInput is only supported from API Level 16");
        return;
    }

    public android.os.Bundle getResultsFromIntent(android.content.Intent p3)
    {
        android.util.Log.w("RemoteInput", "RemoteInput is only supported from API Level 16");
        return 0;
    }
}
package android.support.v4.app;
 class RemoteInput$ImplJellybean implements android.support.v4.app.RemoteInput$Impl {

    RemoteInput$ImplJellybean()
    {
        return;
    }

    public void addResultsToIntent(android.support.v4.app.RemoteInput[] p1, android.content.Intent p2, android.os.Bundle p3)
    {
        android.support.v4.app.RemoteInputCompatJellybean.addResultsToIntent(p1, p2, p3);
        return;
    }

    public android.os.Bundle getResultsFromIntent(android.content.Intent p2)
    {
        return android.support.v4.app.RemoteInputCompatJellybean.getResultsFromIntent(p2);
    }
}
package android.support.v4.app;
public final class RemoteInput extends android.support.v4.app.RemoteInputCompatBase$RemoteInput {
    public static final String EXTRA_RESULTS_DATA = "android.remoteinput.resultsData";
    public static final android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory FACTORY = None;
    private static final android.support.v4.app.RemoteInput$Impl IMPL = None;
    public static final String RESULTS_CLIP_LABEL = "android.remoteinput.results";
    private static final String TAG = "RemoteInput";
    private final boolean mAllowFreeFormInput;
    private final CharSequence[] mChoices;
    private final android.os.Bundle mExtras;
    private final CharSequence mLabel;
    private final String mResultKey;

    static RemoteInput()
    {
        if (android.os.Build$VERSION.SDK_INT < 20) {
            if (android.os.Build$VERSION.SDK_INT < 16) {
                android.support.v4.app.RemoteInput.IMPL = new android.support.v4.app.RemoteInput$ImplBase();
            } else {
                android.support.v4.app.RemoteInput.IMPL = new android.support.v4.app.RemoteInput$ImplJellybean();
            }
        } else {
            android.support.v4.app.RemoteInput.IMPL = new android.support.v4.app.RemoteInput$ImplApi20();
        }
        android.support.v4.app.RemoteInput.FACTORY = new android.support.v4.app.RemoteInput$1();
        return;
    }

    RemoteInput(String p1, CharSequence p2, CharSequence[] p3, boolean p4, android.os.Bundle p5)
    {
        this.mResultKey = p1;
        this.mLabel = p2;
        this.mChoices = p3;
        this.mAllowFreeFormInput = p4;
        this.mExtras = p5;
        return;
    }

    public static void addResultsToIntent(android.support.v4.app.RemoteInput[] p1, android.content.Intent p2, android.os.Bundle p3)
    {
        android.support.v4.app.RemoteInput.IMPL.addResultsToIntent(p1, p2, p3);
        return;
    }

    public static android.os.Bundle getResultsFromIntent(android.content.Intent p1)
    {
        return android.support.v4.app.RemoteInput.IMPL.getResultsFromIntent(p1);
    }

    public boolean getAllowFreeFormInput()
    {
        return this.mAllowFreeFormInput;
    }

    public CharSequence[] getChoices()
    {
        return this.mChoices;
    }

    public android.os.Bundle getExtras()
    {
        return this.mExtras;
    }

    public CharSequence getLabel()
    {
        return this.mLabel;
    }

    public String getResultKey()
    {
        return this.mResultKey;
    }
}
package android.support.v4.app;
 class ServiceCompat$Api24ServiceCompatImpl implements android.support.v4.app.ServiceCompat$ServiceCompatImpl {

    ServiceCompat$Api24ServiceCompatImpl()
    {
        return;
    }

    public void stopForeground(android.app.Service p1, int p2)
    {
        android.support.v4.app.ServiceCompatApi24.stopForeground(p1, p2);
        return;
    }
}
package android.support.v4.app;
 class ServiceCompat$BaseServiceCompatImpl implements android.support.v4.app.ServiceCompat$ServiceCompatImpl {

    ServiceCompat$BaseServiceCompatImpl()
    {
        return;
    }

    public void stopForeground(android.app.Service p2, int p3)
    {
        int v0_1;
        if ((p3 & 1) == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        p2.stopForeground(v0_1);
        return;
    }
}
package android.support.v4.app;
 class ShareCompat$ShareCompatImplBase implements android.support.v4.app.ShareCompat$ShareCompatImpl {

    ShareCompat$ShareCompatImplBase()
    {
        return;
    }

    private static void withinStyle(StringBuilder p5, CharSequence p6, int p7, int p8)
    {
        int v1 = p7;
        while (v1 < p8) {
            char v0 = p6.charAt(v1);
            if (v0 != 60) {
                if (v0 != 62) {
                    if (v0 != 38) {
                        if ((v0 <= 126) && (v0 >= 32)) {
                            if (v0 != 32) {
                                p5.append(v0);
                                v1++;
                            }
                            while (((v1 + 1) < p8) && (p6.charAt((v1 + 1)) == 32)) {
                                p5.append("&nbsp;");
                                v1++;
                            }
                            p5.append(32);
                        } else {
                            p5.append(new StringBuilder().append("&#").append(v0).append(";").toString());
                        }
                    } else {
                        p5.append("&amp;");
                    }
                } else {
                    p5.append("&gt;");
                }
            } else {
                p5.append("&lt;");
            }
        }
        return;
    }

    public void configureMenuItem(android.view.MenuItem p2, android.support.v4.app.ShareCompat$IntentBuilder p3)
    {
        p2.setIntent(p3.createChooserIntent());
        return;
    }

    public String escapeHtml(CharSequence p4)
    {
        StringBuilder v0_1 = new StringBuilder();
        android.support.v4.app.ShareCompat$ShareCompatImplBase.withinStyle(v0_1, p4, 0, p4.length());
        return v0_1.toString();
    }
}
package android.support.v4.app;
 class TaskStackBuilder$TaskStackBuilderImplBase implements android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl {

    TaskStackBuilder$TaskStackBuilderImplBase()
    {
        return;
    }

    public android.app.PendingIntent getPendingIntent(android.content.Context p3, android.content.Intent[] p4, int p5, int p6, android.os.Bundle p7)
    {
        android.content.Intent v0_1 = new android.content.Intent(p4[(p4.length - 1)]);
        v0_1.addFlags(268435456);
        return android.app.PendingIntent.getActivity(p3, p5, v0_1, p6);
    }
}
package android.support.v4.app;
 class TaskStackBuilder$TaskStackBuilderImplHoneycomb implements android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl {

    TaskStackBuilder$TaskStackBuilderImplHoneycomb()
    {
        return;
    }

    public android.app.PendingIntent getPendingIntent(android.content.Context p4, android.content.Intent[] p5, int p6, int p7, android.os.Bundle p8)
    {
        p5[0] = new android.content.Intent(p5[0]).addFlags(268484608);
        return android.support.v4.app.TaskStackBuilderHoneycomb.getActivitiesPendingIntent(p4, p6, p5, p7);
    }
}
package android.support.v4.app;
 class TaskStackBuilder$TaskStackBuilderImplJellybean implements android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl {

    TaskStackBuilder$TaskStackBuilderImplJellybean()
    {
        return;
    }

    public android.app.PendingIntent getPendingIntent(android.content.Context p4, android.content.Intent[] p5, int p6, int p7, android.os.Bundle p8)
    {
        p5[0] = new android.content.Intent(p5[0]).addFlags(268484608);
        return android.support.v4.app.TaskStackBuilderJellybean.getActivitiesPendingIntent(p4, p6, p5, p7, p8);
    }
}
package android.support.v4.content;
final class AsyncTaskLoader$LoadTask extends android.support.v4.content.ModernAsyncTask implements java.lang.Runnable {
    private final java.util.concurrent.CountDownLatch mDone;
    final synthetic android.support.v4.content.AsyncTaskLoader this$0;
    boolean waiting;

    AsyncTaskLoader$LoadTask(android.support.v4.content.AsyncTaskLoader p3)
    {
        this.this$0 = p3;
        this.mDone = new java.util.concurrent.CountDownLatch(1);
        return;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs Object doInBackground(Void[] p4)
    {
        try {
            int v0 = this.this$0.onLoadInBackground();
        } catch (android.support.v4.os.OperationCanceledException v1) {
            if (this.isCancelled()) {
                v0 = 0;
            } else {
                throw v1;
            }
        }
        return v0;
    }

    protected void onCancelled(Object p3)
    {
        try {
            this.this$0.dispatchOnCancelled(this, p3);
            this.mDone.countDown();
            return;
        } catch (Throwable v0_2) {
            this.mDone.countDown();
            throw v0_2;
        }
    }

    protected void onPostExecute(Object p3)
    {
        try {
            this.this$0.dispatchOnLoadComplete(this, p3);
            this.mDone.countDown();
            return;
        } catch (Throwable v0_2) {
            this.mDone.countDown();
            throw v0_2;
        }
    }

    public void run()
    {
        this.waiting = 0;
        this.this$0.executePendingTask();
        return;
    }

    public void waitForLoader()
    {
        try {
            this.mDone.await();
        } catch (InterruptedException v0) {
        }
        return;
    }
}
package android.support.v4.content;
public abstract class AsyncTaskLoader extends android.support.v4.content.Loader {
    static final boolean DEBUG = False;
    static final String TAG = "AsyncTaskLoader";
    volatile android.support.v4.content.AsyncTaskLoader$LoadTask mCancellingTask;
    private final java.util.concurrent.Executor mExecutor;
    android.os.Handler mHandler;
    long mLastLoadCompleteTime;
    volatile android.support.v4.content.AsyncTaskLoader$LoadTask mTask;
    long mUpdateThrottle;

    public AsyncTaskLoader(android.content.Context p2)
    {
        this(p2, android.support.v4.content.ModernAsyncTask.THREAD_POOL_EXECUTOR);
        return;
    }

    private AsyncTaskLoader(android.content.Context p3, java.util.concurrent.Executor p4)
    {
        super(p3);
        super.mLastLoadCompleteTime = -10000;
        super.mExecutor = p4;
        return;
    }

    public void cancelLoadInBackground()
    {
        return;
    }

    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask p3, Object p4)
    {
        this.onCanceled(p4);
        if (this.mCancellingTask == p3) {
            this.rollbackContentChanged();
            this.mLastLoadCompleteTime = android.os.SystemClock.uptimeMillis();
            this.mCancellingTask = 0;
            this.deliverCancellation();
            this.executePendingTask();
        }
        return;
    }

    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask p3, Object p4)
    {
        if (this.mTask == p3) {
            if (!this.isAbandoned()) {
                this.commitContentChanged();
                this.mLastLoadCompleteTime = android.os.SystemClock.uptimeMillis();
                this.mTask = 0;
                this.deliverResult(p4);
            } else {
                this.onCanceled(p4);
            }
        } else {
            this.dispatchOnCancelled(p3, p4);
        }
        return;
    }

    public void dump(String p5, java.io.FileDescriptor p6, java.io.PrintWriter p7, String[] p8)
    {
        super.dump(p5, p6, p7, p8);
        if (this.mTask != null) {
            p7.print(p5);
            p7.print("mTask=");
            p7.print(this.mTask);
            p7.print(" waiting=");
            p7.println(this.mTask.waiting);
        }
        if (this.mCancellingTask != null) {
            p7.print(p5);
            p7.print("mCancellingTask=");
            p7.print(this.mCancellingTask);
            p7.print(" waiting=");
            p7.println(this.mCancellingTask.waiting);
        }
        if (this.mUpdateThrottle != 0) {
            p7.print(p5);
            p7.print("mUpdateThrottle=");
            android.support.v4.util.TimeUtils.formatDuration(this.mUpdateThrottle, p7);
            p7.print(" mLastLoadCompleteTime=");
            android.support.v4.util.TimeUtils.formatDuration(this.mLastLoadCompleteTime, android.os.SystemClock.uptimeMillis(), p7);
            p7.println();
        }
        return;
    }

    void executePendingTask()
    {
        if ((this.mCancellingTask == null) && (this.mTask != null)) {
            if (this.mTask.waiting) {
                this.mTask.waiting = 0;
                this.mHandler.removeCallbacks(this.mTask);
            }
            if ((this.mUpdateThrottle <= 0) || (android.os.SystemClock.uptimeMillis() >= (this.mLastLoadCompleteTime + this.mUpdateThrottle))) {
                this.mTask.executeOnExecutor(this.mExecutor, ((Void[]) 0));
            } else {
                this.mTask.waiting = 1;
                this.mHandler.postAtTime(this.mTask, (this.mLastLoadCompleteTime + this.mUpdateThrottle));
            }
        }
        return;
    }

    public boolean isLoadInBackgroundCanceled()
    {
        int v0_1;
        if (this.mCancellingTask == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public abstract Object loadInBackground();

    protected boolean onCancelLoad()
    {
        boolean v0 = 0;
        if (this.mTask != null) {
            if (this.mCancellingTask == null) {
                if (!this.mTask.waiting) {
                    v0 = this.mTask.cancel(0);
                    if (v0) {
                        this.mCancellingTask = this.mTask;
                        this.cancelLoadInBackground();
                    }
                    this.mTask = 0;
                } else {
                    this.mTask.waiting = 0;
                    this.mHandler.removeCallbacks(this.mTask);
                    this.mTask = 0;
                }
            } else {
                if (this.mTask.waiting) {
                    this.mTask.waiting = 0;
                    this.mHandler.removeCallbacks(this.mTask);
                }
                this.mTask = 0;
            }
        }
        return v0;
    }

    public void onCanceled(Object p1)
    {
        return;
    }

    protected void onForceLoad()
    {
        super.onForceLoad();
        this.cancelLoad();
        this.mTask = new android.support.v4.content.AsyncTaskLoader$LoadTask(this);
        this.executePendingTask();
        return;
    }

    protected Object onLoadInBackground()
    {
        return this.loadInBackground();
    }

    public void setUpdateThrottle(long p4)
    {
        this.mUpdateThrottle = p4;
        if (p4 != 0) {
            this.mHandler = new android.os.Handler();
        }
        return;
    }

    public void waitForLoader()
    {
        android.support.v4.content.AsyncTaskLoader$LoadTask v0 = this.mTask;
        if (v0 != null) {
            v0.waitForLoader();
        }
        return;
    }
}
package android.support.v4.content;
 class ContentResolverCompat$ContentResolverCompatImplBase implements android.support.v4.content.ContentResolverCompat$ContentResolverCompatImpl {

    ContentResolverCompat$ContentResolverCompatImplBase()
    {
        return;
    }

    public android.database.Cursor query(android.content.ContentResolver p2, android.net.Uri p3, String[] p4, String p5, String[] p6, String p7, android.support.v4.os.CancellationSignal p8)
    {
        if (p8 != null) {
            p8.throwIfCanceled();
        }
        return p2.query(p3, p4, p5, p6, p7);
    }
}
package android.support.v4.content;
 class FileProvider$SimplePathStrategy implements android.support.v4.content.FileProvider$PathStrategy {
    private final String mAuthority;
    private final java.util.HashMap mRoots;

    public FileProvider$SimplePathStrategy(String p2)
    {
        this.mRoots = new java.util.HashMap();
        this.mAuthority = p2;
        return;
    }

    public void addRoot(String p5, java.io.File p6)
    {
        if (!android.text.TextUtils.isEmpty(p5)) {
            try {
                java.io.File v6_1 = p6.getCanonicalFile();
                this.mRoots.put(p5, v6_1);
                return;
            } catch (java.io.IOException v0) {
                throw new IllegalArgumentException(new StringBuilder().append("Failed to resolve canonical path for ").append(v6_1).toString(), v0);
            }
        } else {
            throw new IllegalArgumentException("Name must not be empty");
        }
    }

    public java.io.File getFileForUri(android.net.Uri p10)
    {
        String v2_1 = p10.getEncodedPath();
        int v4 = v2_1.indexOf(47, 1);
        String v5 = android.net.Uri.decode(v2_1.substring(1, v4));
        String vtmp6 = android.net.Uri.decode(v2_1.substring((v4 + 1)));
        java.io.File v3_1 = ((java.io.File) this.mRoots.get(v5));
        if (v3_1 != null) {
            try {
                java.io.File v1_2 = new java.io.File(v3_1, vtmp6).getCanonicalFile();
            } catch (java.io.IOException v0) {
                throw new IllegalArgumentException(new StringBuilder().append("Failed to resolve canonical path for ").append(v1_2).toString());
            }
            if (v1_2.getPath().startsWith(v3_1.getPath())) {
                return v1_2;
            } else {
                throw new SecurityException("Resolved path jumped beyond configured root");
            }
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Unable to find configured root for ").append(p10).toString());
        }
    }

    public android.net.Uri getUriForFile(java.io.File p9)
    {
        try {
            String v2_0 = p9.getCanonicalPath();
            java.util.Map$Entry v1 = 0;
            String v6_12 = this.mRoots.entrySet().iterator();
        } catch (java.io.IOException v0) {
            throw new IllegalArgumentException(new StringBuilder().append("Failed to resolve canonical path for ").append(p9).toString());
        }
        while (v6_12.hasNext()) {
            java.util.Map$Entry v3_1 = ((java.util.Map$Entry) v6_12.next());
            String v4_1 = ((java.io.File) v3_1.getValue()).getPath();
            if ((v2_0.startsWith(v4_1)) && ((v1 == null) || (v4_1.length() > ((java.io.File) v1.getValue()).getPath().length()))) {
                v1 = v3_1;
            }
        }
        if (v1 != null) {
            String v2_1;
            String v4_0 = ((java.io.File) v1.getValue()).getPath();
            if (!v4_0.endsWith("/")) {
                v2_1 = v2_0.substring((v4_0.length() + 1));
            } else {
                v2_1 = v2_0.substring(v4_0.length());
            }
            return new android.net.Uri$Builder().scheme("content").authority(this.mAuthority).encodedPath(new StringBuilder().append(android.net.Uri.encode(((String) v1.getKey()))).append(47).append(android.net.Uri.encode(v2_1, "/")).toString()).build();
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("Failed to find configured root that contains ").append(v2_0).toString());
        }
    }
}
package android.support.v4.content;
 class IntentCompat$IntentCompatImplBase implements android.support.v4.content.IntentCompat$IntentCompatImpl {

    IntentCompat$IntentCompatImplBase()
    {
        return;
    }

    public android.content.Intent makeMainActivity(android.content.ComponentName p3)
    {
        android.content.Intent v0_1 = new android.content.Intent("android.intent.action.MAIN");
        v0_1.setComponent(p3);
        v0_1.addCategory("android.intent.category.LAUNCHER");
        return v0_1;
    }

    public android.content.Intent makeMainSelectorActivity(String p2, String p3)
    {
        android.content.Intent v0_1 = new android.content.Intent(p2);
        v0_1.addCategory(p3);
        return v0_1;
    }

    public android.content.Intent makeRestartActivityTask(android.content.ComponentName p3)
    {
        android.content.Intent v0 = this.makeMainActivity(p3);
        v0.addFlags(268468224);
        return v0;
    }
}
package android.support.v4.content;
 class ModernAsyncTask$2 extends android.support.v4.content.ModernAsyncTask$WorkerRunnable {
    final synthetic android.support.v4.content.ModernAsyncTask this$0;

    ModernAsyncTask$2(android.support.v4.content.ModernAsyncTask p1)
    {
        this.this$0 = p1;
        return;
    }

    public Object call()
    {
        android.support.v4.content.ModernAsyncTask.access$000(this.this$0).set(1);
        try {
            android.os.Process.setThreadPriority(10);
            Object v0 = this.this$0.doInBackground(this.mParams);
            android.os.Binder.flushPendingCommands();
            this.this$0.postResult(v0);
            return v0;
        } catch (java.util.concurrent.atomic.AtomicBoolean v2_4) {
            this.this$0.postResult(v0);
            throw v2_4;
        } catch (Throwable v1) {
            android.support.v4.content.ModernAsyncTask.access$100(this.this$0).set(1);
            throw v1;
        }
    }
}
package android.support.v4.content.res;
 class ConfigurationHelper$GingerbreadImpl implements android.support.v4.content.res.ConfigurationHelper$ConfigurationHelperImpl {

    ConfigurationHelper$GingerbreadImpl()
    {
        return;
    }

    public int getDensityDpi(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperGingerbread.getDensityDpi(p2);
    }

    public int getScreenHeightDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperGingerbread.getScreenHeightDp(p2);
    }

    public int getScreenWidthDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperGingerbread.getScreenWidthDp(p2);
    }

    public int getSmallestScreenWidthDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperGingerbread.getSmallestScreenWidthDp(p2);
    }
}
package android.support.v4.graphics;
 class BitmapCompat$BaseBitmapImpl implements android.support.v4.graphics.BitmapCompat$BitmapImpl {

    BitmapCompat$BaseBitmapImpl()
    {
        return;
    }

    public int getAllocationByteCount(android.graphics.Bitmap p3)
    {
        return (p3.getRowBytes() * p3.getHeight());
    }

    public boolean hasMipMap(android.graphics.Bitmap p2)
    {
        return 0;
    }

    public void setHasMipMap(android.graphics.Bitmap p1, boolean p2)
    {
        return;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$BaseDrawableImpl implements android.support.v4.graphics.drawable.DrawableCompat$DrawableImpl {

    DrawableCompat$BaseDrawableImpl()
    {
        return;
    }

    public void applyTheme(android.graphics.drawable.Drawable p1, android.content.res.Resources$Theme p2)
    {
        return;
    }

    public boolean canApplyTheme(android.graphics.drawable.Drawable p2)
    {
        return 0;
    }

    public void clearColorFilter(android.graphics.drawable.Drawable p1)
    {
        p1.clearColorFilter();
        return;
    }

    public int getAlpha(android.graphics.drawable.Drawable p2)
    {
        return 0;
    }

    public android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable p2)
    {
        return 0;
    }

    public int getLayoutDirection(android.graphics.drawable.Drawable p2)
    {
        return 0;
    }

    public void inflate(android.graphics.drawable.Drawable p1, android.content.res.Resources p2, org.xmlpull.v1.XmlPullParser p3, android.util.AttributeSet p4, android.content.res.Resources$Theme p5)
    {
        android.support.v4.graphics.drawable.DrawableCompatBase.inflate(p1, p2, p3, p4, p5);
        return;
    }

    public boolean isAutoMirrored(android.graphics.drawable.Drawable p2)
    {
        return 0;
    }

    public void jumpToCurrentState(android.graphics.drawable.Drawable p1)
    {
        return;
    }

    public void setAutoMirrored(android.graphics.drawable.Drawable p1, boolean p2)
    {
        return;
    }

    public void setHotspot(android.graphics.drawable.Drawable p1, float p2, float p3)
    {
        return;
    }

    public void setHotspotBounds(android.graphics.drawable.Drawable p1, int p2, int p3, int p4, int p5)
    {
        return;
    }

    public boolean setLayoutDirection(android.graphics.drawable.Drawable p2, int p3)
    {
        return 0;
    }

    public void setTint(android.graphics.drawable.Drawable p1, int p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatBase.setTint(p1, p2);
        return;
    }

    public void setTintList(android.graphics.drawable.Drawable p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatBase.setTintList(p1, p2);
        return;
    }

    public void setTintMode(android.graphics.drawable.Drawable p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatBase.setTintMode(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatBase.wrapForTinting(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperGingerbread$DrawableWrapperStateBase extends android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState {

    DrawableWrapperGingerbread$DrawableWrapperStateBase(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources p2)
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperGingerbread(this, p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperGingerbread extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback, android.support.v4.graphics.drawable.DrawableWrapper, android.support.v4.graphics.drawable.TintAwareDrawable {
    static final android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;
    private boolean mColorFilterSet;
    private int mCurrentColor;
    private android.graphics.PorterDuff$Mode mCurrentMode;
    android.graphics.drawable.Drawable mDrawable;
    private boolean mMutated;
    android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState mState;

    static DrawableWrapperGingerbread()
    {
        android.support.v4.graphics.drawable.DrawableWrapperGingerbread.DEFAULT_TINT_MODE = android.graphics.PorterDuff$Mode.SRC_IN;
        return;
    }

    DrawableWrapperGingerbread(android.graphics.drawable.Drawable p2)
    {
        this.mState = this.mutateConstantState();
        this.setWrappedDrawable(p2);
        return;
    }

    DrawableWrapperGingerbread(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        this.mState = p1;
        this.updateLocalState(p2);
        return;
    }

    private void updateLocalState(android.content.res.Resources p3)
    {
        if ((this.mState != null) && (this.mState.mDrawableState != null)) {
            this.setWrappedDrawable(this.newDrawableFromState(this.mState.mDrawableState, p3));
        }
        return;
    }

    private boolean updateTint(int[] p7)
    {
        int v3 = 0;
        if (this.isCompatTintEnabled()) {
            android.content.res.ColorStateList v1 = this.mState.mTint;
            android.graphics.PorterDuff$Mode v2 = this.mState.mTintMode;
            if ((v1 == null) || (v2 == null)) {
                this.mColorFilterSet = 0;
                this.clearColorFilter();
            } else {
                int v0 = v1.getColorForState(p7, v1.getDefaultColor());
                if ((!this.mColorFilterSet) || ((v0 != this.mCurrentColor) || (v2 != this.mCurrentMode))) {
                    this.setColorFilter(v0, v2);
                    this.mCurrentColor = v0;
                    this.mCurrentMode = v2;
                    this.mColorFilterSet = 1;
                    v3 = 1;
                }
            }
        }
        return v3;
    }

    public void draw(android.graphics.Canvas p2)
    {
        this.mDrawable.draw(p2);
        return;
    }

    public int getChangingConfigurations()
    {
        int v0_2;
        int v1_0 = super.getChangingConfigurations();
        if (this.mState == null) {
            v0_2 = 0;
        } else {
            v0_2 = this.mState.getChangingConfigurations();
        }
        return ((v0_2 | v1_0) | this.mDrawable.getChangingConfigurations());
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        if ((this.mState == null) || (!this.mState.canConstantState())) {
            android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState v0_1 = 0;
        } else {
            this.mState.mChangingConfigurations = this.getChangingConfigurations();
            v0_1 = this.mState;
        }
        return v0_1;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        return this.mDrawable.getCurrent();
    }

    public int getIntrinsicHeight()
    {
        return this.mDrawable.getIntrinsicHeight();
    }

    public int getIntrinsicWidth()
    {
        return this.mDrawable.getIntrinsicWidth();
    }

    public int getMinimumHeight()
    {
        return this.mDrawable.getMinimumHeight();
    }

    public int getMinimumWidth()
    {
        return this.mDrawable.getMinimumWidth();
    }

    public int getOpacity()
    {
        return this.mDrawable.getOpacity();
    }

    public boolean getPadding(android.graphics.Rect p2)
    {
        return this.mDrawable.getPadding(p2);
    }

    public int[] getState()
    {
        return this.mDrawable.getState();
    }

    public android.graphics.Region getTransparentRegion()
    {
        return this.mDrawable.getTransparentRegion();
    }

    public final android.graphics.drawable.Drawable getWrappedDrawable()
    {
        return this.mDrawable;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable p1)
    {
        this.invalidateSelf();
        return;
    }

    protected boolean isCompatTintEnabled()
    {
        return 1;
    }

    public boolean isStateful()
    {
        if ((!this.isCompatTintEnabled()) || (this.mState == null)) {
            android.content.res.ColorStateList v0 = 0;
        } else {
            v0 = this.mState.mTint;
        }
        if (((v0 == null) || (!v0.isStateful())) && (!this.mDrawable.isStateful())) {
            int v1_4 = 0;
        } else {
            v1_4 = 1;
        }
        return v1_4;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        if ((!this.mMutated) && (super.mutate() == this)) {
            this.mState = this.mutateConstantState();
            if (this.mDrawable != null) {
                this.mDrawable.mutate();
            }
            if (this.mState != null) {
                int v0_4;
                android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState v1 = this.mState;
                if (this.mDrawable == null) {
                    v0_4 = 0;
                } else {
                    v0_4 = this.mDrawable.getConstantState();
                }
                v1.mDrawableState = v0_4;
            }
            this.mMutated = 1;
        }
        return this;
    }

    android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState mutateConstantState()
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperStateBase(this.mState, 0);
    }

    protected android.graphics.drawable.Drawable newDrawableFromState(android.graphics.drawable.Drawable$ConstantState p2, android.content.res.Resources p3)
    {
        return p2.newDrawable(p3);
    }

    protected void onBoundsChange(android.graphics.Rect p2)
    {
        if (this.mDrawable != null) {
            this.mDrawable.setBounds(p2);
        }
        return;
    }

    protected boolean onLevelChange(int p2)
    {
        return this.mDrawable.setLevel(p2);
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable p2, Runnable p3, long p4)
    {
        this.scheduleSelf(p3, p4);
        return;
    }

    public void setAlpha(int p2)
    {
        this.mDrawable.setAlpha(p2);
        return;
    }

    public void setChangingConfigurations(int p2)
    {
        this.mDrawable.setChangingConfigurations(p2);
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter p2)
    {
        this.mDrawable.setColorFilter(p2);
        return;
    }

    public void setDither(boolean p2)
    {
        this.mDrawable.setDither(p2);
        return;
    }

    public void setFilterBitmap(boolean p2)
    {
        this.mDrawable.setFilterBitmap(p2);
        return;
    }

    public boolean setState(int[] p3)
    {
        int v0_1;
        int v0_0 = this.mDrawable.setState(p3);
        if ((!this.updateTint(p3)) && (v0_0 == 0)) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void setTint(int p2)
    {
        this.setTintList(android.content.res.ColorStateList.valueOf(p2));
        return;
    }

    public void setTintList(android.content.res.ColorStateList p2)
    {
        this.mState.mTint = p2;
        this.updateTint(this.getState());
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode p2)
    {
        this.mState.mTintMode = p2;
        this.updateTint(this.getState());
        return;
    }

    public boolean setVisible(boolean p2, boolean p3)
    {
        if ((!super.setVisible(p2, p3)) && (!this.mDrawable.setVisible(p2, p3))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public final void setWrappedDrawable(android.graphics.drawable.Drawable p3)
    {
        if (this.mDrawable != null) {
            this.mDrawable.setCallback(0);
        }
        this.mDrawable = p3;
        if (p3 != null) {
            p3.setCallback(this);
            this.setVisible(p3.isVisible(), 1);
            this.setState(p3.getState());
            this.setLevel(p3.getLevel());
            this.setBounds(p3.getBounds());
            if (this.mState != null) {
                this.mState.mDrawableState = p3.getConstantState();
            }
        }
        this.invalidateSelf();
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable p1, Runnable p2)
    {
        this.unscheduleSelf(p2);
        return;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperHoneycomb$DrawableWrapperStateHoneycomb extends android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState {

    DrawableWrapperHoneycomb$DrawableWrapperStateHoneycomb(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources p2)
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperHoneycomb(this, p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperKitKat$DrawableWrapperStateKitKat extends android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState {

    DrawableWrapperKitKat$DrawableWrapperStateKitKat(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources p2)
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperKitKat(this, p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperLollipop$DrawableWrapperStateLollipop extends android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState {

    DrawableWrapperLollipop$DrawableWrapperStateLollipop(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources p2)
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperLollipop(this, p2);
    }
}
package android.support.v4.graphics.drawable;
 class RoundedBitmapDrawable21 extends android.support.v4.graphics.drawable.RoundedBitmapDrawable {

    protected RoundedBitmapDrawable21(android.content.res.Resources p1, android.graphics.Bitmap p2)
    {
        super(p1, p2);
        return;
    }

    public void getOutline(android.graphics.Outline p3)
    {
        this.updateDstRect();
        p3.setRoundRect(this.mDstRect, this.getCornerRadius());
        return;
    }

    void gravityCompatApply(int p7, int p8, int p9, android.graphics.Rect p10, android.graphics.Rect p11)
    {
        android.view.Gravity.apply(p7, p8, p9, p10, p11, 0);
        return;
    }

    public boolean hasMipMap()
    {
        if ((this.mBitmap == null) || (!this.mBitmap.hasMipMap())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void setMipMap(boolean p2)
    {
        if (this.mBitmap != null) {
            this.mBitmap.setHasMipMap(p2);
            this.invalidateSelf();
        }
        return;
    }
}
package android.support.v4.graphics.drawable;
 class RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable extends android.support.v4.graphics.drawable.RoundedBitmapDrawable {

    RoundedBitmapDrawableFactory$DefaultRoundedBitmapDrawable(android.content.res.Resources p1, android.graphics.Bitmap p2)
    {
        super(p1, p2);
        return;
    }

    void gravityCompatApply(int p7, int p8, int p9, android.graphics.Rect p10, android.graphics.Rect p11)
    {
        android.support.v4.view.GravityCompat.apply(p7, p8, p9, p10, p11, 0);
        return;
    }

    public boolean hasMipMap()
    {
        if ((this.mBitmap == null) || (!android.support.v4.graphics.BitmapCompat.hasMipMap(this.mBitmap))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void setMipMap(boolean p2)
    {
        if (this.mBitmap != null) {
            android.support.v4.graphics.BitmapCompat.setHasMipMap(this.mBitmap, p2);
            this.invalidateSelf();
        }
        return;
    }
}
package android.support.v4.hardware.display;
 class DisplayManagerCompat$JellybeanMr1Impl extends android.support.v4.hardware.display.DisplayManagerCompat {
    private final Object mDisplayManagerObj;

    public DisplayManagerCompat$JellybeanMr1Impl(android.content.Context p2)
    {
        this.mDisplayManagerObj = android.support.v4.hardware.display.DisplayManagerJellybeanMr1.getDisplayManager(p2);
        return;
    }

    public android.view.Display getDisplay(int p2)
    {
        return android.support.v4.hardware.display.DisplayManagerJellybeanMr1.getDisplay(this.mDisplayManagerObj, p2);
    }

    public android.view.Display[] getDisplays()
    {
        return android.support.v4.hardware.display.DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj);
    }

    public android.view.Display[] getDisplays(String p2)
    {
        return android.support.v4.hardware.display.DisplayManagerJellybeanMr1.getDisplays(this.mDisplayManagerObj, p2);
    }
}
package android.support.v4.hardware.display;
 class DisplayManagerCompat$LegacyImpl extends android.support.v4.hardware.display.DisplayManagerCompat {
    private final android.view.WindowManager mWindowManager;

    public DisplayManagerCompat$LegacyImpl(android.content.Context p2)
    {
        this.mWindowManager = ((android.view.WindowManager) p2.getSystemService("window"));
        return;
    }

    public android.view.Display getDisplay(int p3)
    {
        int v0 = this.mWindowManager.getDefaultDisplay();
        if (v0.getDisplayId() != p3) {
            v0 = 0;
        }
        return v0;
    }

    public android.view.Display[] getDisplays()
    {
        android.view.Display[] v0_1 = new android.view.Display[1];
        v0_1[0] = this.mWindowManager.getDefaultDisplay();
        return v0_1;
    }

    public android.view.Display[] getDisplays(String p2)
    {
        android.view.Display[] v0_1;
        if (p2 != null) {
            v0_1 = new android.view.Display[0];
        } else {
            v0_1 = this.getDisplays();
        }
        return v0_1;
    }
}
package android.support.v4.hardware.fingerprint;
final class FingerprintManagerCompat$Api23FingerprintManagerCompatImpl$1 extends android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback {
    final synthetic android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback val$callback;

    FingerprintManagerCompat$Api23FingerprintManagerCompatImpl$1(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback p1)
    {
        this.val$callback = p1;
        return;
    }

    public void onAuthenticationError(int p2, CharSequence p3)
    {
        this.val$callback.onAuthenticationError(p2, p3);
        return;
    }

    public void onAuthenticationFailed()
    {
        this.val$callback.onAuthenticationFailed();
        return;
    }

    public void onAuthenticationHelp(int p2, CharSequence p3)
    {
        this.val$callback.onAuthenticationHelp(p2, p3);
        return;
    }

    public void onAuthenticationSucceeded(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationResultInternal p4)
    {
        this.val$callback.onAuthenticationSucceeded(new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$Api23FingerprintManagerCompatImpl.unwrapCryptoObject(p4.getCryptoObject())));
        return;
    }
}
package android.support.v4.hardware.fingerprint;
 class FingerprintManagerCompat$Api23FingerprintManagerCompatImpl implements android.support.v4.hardware.fingerprint.FingerprintManagerCompat$FingerprintManagerCompatImpl {

    public FingerprintManagerCompat$Api23FingerprintManagerCompatImpl()
    {
        return;
    }

    static android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject unwrapCryptoObject(android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject p2)
    {
        android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject v0_0 = 0;
        if (p2 != null) {
            if (p2.getCipher() == null) {
                if (p2.getSignature() == null) {
                    if (p2.getMac() != null) {
                        v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject(p2.getMac());
                    }
                } else {
                    v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject(p2.getSignature());
                }
            } else {
                v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject(p2.getCipher());
            }
        }
        return v0_0;
    }

    private static android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$AuthenticationCallback wrapCallback(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback p1)
    {
        return new android.support.v4.hardware.fingerprint.FingerprintManagerCompat$Api23FingerprintManagerCompatImpl$1(p1);
    }

    private static android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject wrapCryptoObject(android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject p2)
    {
        android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject v0_0 = 0;
        if (p2 != null) {
            if (p2.getCipher() == null) {
                if (p2.getSignature() == null) {
                    if (p2.getMac() != null) {
                        v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getMac());
                    }
                } else {
                    v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getSignature());
                }
            } else {
                v0_0 = new android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject(p2.getCipher());
            }
        }
        return v0_0;
    }

    public void authenticate(android.content.Context p7, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject p8, int p9, android.support.v4.os.CancellationSignal p10, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback p11, android.os.Handler p12)
    {
        int v3;
        android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23$CryptoObject v1 = android.support.v4.hardware.fingerprint.FingerprintManagerCompat$Api23FingerprintManagerCompatImpl.wrapCryptoObject(p8);
        if (p10 == null) {
            v3 = 0;
        } else {
            v3 = p10.getCancellationSignalObject();
        }
        android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.authenticate(p7, v1, p9, v3, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$Api23FingerprintManagerCompatImpl.wrapCallback(p11), p12);
        return;
    }

    public boolean hasEnrolledFingerprints(android.content.Context p2)
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.hasEnrolledFingerprints(p2);
    }

    public boolean isHardwareDetected(android.content.Context p2)
    {
        return android.support.v4.hardware.fingerprint.FingerprintManagerCompatApi23.isHardwareDetected(p2);
    }
}
package android.support.v4.hardware.fingerprint;
 class FingerprintManagerCompat$LegacyFingerprintManagerCompatImpl implements android.support.v4.hardware.fingerprint.FingerprintManagerCompat$FingerprintManagerCompatImpl {

    public FingerprintManagerCompat$LegacyFingerprintManagerCompatImpl()
    {
        return;
    }

    public void authenticate(android.content.Context p1, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$CryptoObject p2, int p3, android.support.v4.os.CancellationSignal p4, android.support.v4.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback p5, android.os.Handler p6)
    {
        return;
    }

    public boolean hasEnrolledFingerprints(android.content.Context p2)
    {
        return 0;
    }

    public boolean isHardwareDetected(android.content.Context p2)
    {
        return 0;
    }
}
package android.support.v4.internal.view;
public interface SupportSubMenu implements android.support.v4.internal.view.SupportMenu, android.view.SubMenu {
}
package android.support.v4.media;
 class MediaBrowserCompat$ConnectionCallback$StubApi21 implements android.support.v4.media.MediaBrowserCompatApi21$ConnectionCallback {
    final synthetic android.support.v4.media.MediaBrowserCompat$ConnectionCallback this$0;

    MediaBrowserCompat$ConnectionCallback$StubApi21(android.support.v4.media.MediaBrowserCompat$ConnectionCallback p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onConnected()
    {
        if (this.this$0.mConnectionCallbackInternal != null) {
            this.this$0.mConnectionCallbackInternal.onConnected();
        }
        this.this$0.onConnected();
        return;
    }

    public void onConnectionFailed()
    {
        if (this.this$0.mConnectionCallbackInternal != null) {
            this.this$0.mConnectionCallbackInternal.onConnectionFailed();
        }
        this.this$0.onConnectionFailed();
        return;
    }

    public void onConnectionSuspended()
    {
        if (this.this$0.mConnectionCallbackInternal != null) {
            this.this$0.mConnectionCallbackInternal.onConnectionSuspended();
        }
        this.this$0.onConnectionSuspended();
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$ItemCallback$StubApi23 implements android.support.v4.media.MediaBrowserCompatApi23$ItemCallback {
    final synthetic android.support.v4.media.MediaBrowserCompat$ItemCallback this$0;

    MediaBrowserCompat$ItemCallback$StubApi23(android.support.v4.media.MediaBrowserCompat$ItemCallback p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onError(String p2)
    {
        this.this$0.onError(p2);
        return;
    }

    public void onItemLoaded(android.os.Parcel p3)
    {
        p3.setDataPosition(0);
        android.support.v4.media.MediaBrowserCompat$MediaItem v0_1 = ((android.support.v4.media.MediaBrowserCompat$MediaItem) android.support.v4.media.MediaBrowserCompat$MediaItem.CREATOR.createFromParcel(p3));
        p3.recycle();
        this.this$0.onItemLoaded(v0_1);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$ItemReceiver extends android.support.v4.os.ResultReceiver {
    private final android.support.v4.media.MediaBrowserCompat$ItemCallback mCallback;
    private final String mMediaId;

    MediaBrowserCompat$ItemReceiver(String p1, android.support.v4.media.MediaBrowserCompat$ItemCallback p2, android.os.Handler p3)
    {
        super(p3);
        super.mMediaId = p1;
        super.mCallback = p2;
        return;
    }

    protected void onReceiveResult(int p4, android.os.Bundle p5)
    {
        p5.setClassLoader(android.support.v4.media.MediaBrowserCompat.getClassLoader());
        if ((p4 == 0) && ((p5 != null) && (p5.containsKey("media_item")))) {
            android.support.v4.media.MediaBrowserCompat$MediaItem v0_0 = p5.getParcelable("media_item");
            if ((v0_0 != null) && (!(v0_0 instanceof android.support.v4.media.MediaBrowserCompat$MediaItem))) {
                this.mCallback.onError(this.mMediaId);
            } else {
                this.mCallback.onItemLoaded(((android.support.v4.media.MediaBrowserCompat$MediaItem) v0_0));
            }
        } else {
            this.mCallback.onError(this.mMediaId);
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi21 implements android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl, android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl, android.support.v4.media.MediaBrowserCompat$ConnectionCallback$ConnectionCallbackInternal {
    protected final Object mBrowserObj;
    protected android.os.Messenger mCallbacksMessenger;
    protected final android.support.v4.media.MediaBrowserCompat$CallbackHandler mHandler;
    protected final android.os.Bundle mRootHints;
    protected android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper mServiceBinderWrapper;
    private final android.support.v4.util.ArrayMap mSubscriptions;

    public MediaBrowserCompat$MediaBrowserImplApi21(android.content.Context p3, android.content.ComponentName p4, android.support.v4.media.MediaBrowserCompat$ConnectionCallback p5, android.os.Bundle p6)
    {
        this.mHandler = new android.support.v4.media.MediaBrowserCompat$CallbackHandler(this);
        this.mSubscriptions = new android.support.v4.util.ArrayMap();
        if (android.os.Build$VERSION.SDK_INT >= 25) {
            Object v0_2;
            if (p6 != null) {
                v0_2 = new android.os.Bundle(p6);
            } else {
                v0_2 = 0;
            }
            this.mRootHints = v0_2;
        } else {
            if (p6 == null) {
                p6 = new android.os.Bundle();
            }
            p6.putInt("extra_client_version", 1);
            this.mRootHints = new android.os.Bundle(p6);
        }
        p5.setInternalConnectionCallback(this);
        this.mBrowserObj = android.support.v4.media.MediaBrowserCompatApi21.createBrowser(p3, p4, p5.mConnectionCallbackObj, this.mRootHints);
        return;
    }

    public void connect()
    {
        android.support.v4.media.MediaBrowserCompatApi21.connect(this.mBrowserObj);
        return;
    }

    public void disconnect()
    {
        if ((this.mServiceBinderWrapper != null) && (this.mCallbacksMessenger != null)) {
            try {
                this.mServiceBinderWrapper.unregisterCallbackMessenger(this.mCallbacksMessenger);
            } catch (android.os.RemoteException v0) {
                android.util.Log.i("MediaBrowserCompat", "Remote error unregistering client messenger.");
            }
        }
        android.support.v4.media.MediaBrowserCompatApi21.disconnect(this.mBrowserObj);
        return;
    }

    public android.os.Bundle getExtras()
    {
        return android.support.v4.media.MediaBrowserCompatApi21.getExtras(this.mBrowserObj);
    }

    public void getItem(String p6, android.support.v4.media.MediaBrowserCompat$ItemCallback p7)
    {
        if (!android.text.TextUtils.isEmpty(p6)) {
            if (p7 != null) {
                if (android.support.v4.media.MediaBrowserCompatApi21.isConnected(this.mBrowserObj)) {
                    if (this.mServiceBinderWrapper != null) {
                        try {
                            this.mServiceBinderWrapper.getMediaItem(p6, new android.support.v4.media.MediaBrowserCompat$ItemReceiver(p6, p7, this.mHandler), this.mCallbacksMessenger);
                        } catch (android.os.RemoteException v0) {
                            android.util.Log.i("MediaBrowserCompat", new StringBuilder().append("Remote error getting media item: ").append(p6).toString());
                            this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$3(this, p7, p6));
                        }
                    } else {
                        this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$2(this, p7, p6));
                    }
                } else {
                    android.util.Log.i("MediaBrowserCompat", "Not connected, unable to retrieve the MediaItem.");
                    this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21$1(this, p7, p6));
                }
                return;
            } else {
                throw new IllegalArgumentException("cb is null");
            }
        } else {
            throw new IllegalArgumentException("mediaId is empty");
        }
    }

    public String getRoot()
    {
        return android.support.v4.media.MediaBrowserCompatApi21.getRoot(this.mBrowserObj);
    }

    public android.content.ComponentName getServiceComponent()
    {
        return android.support.v4.media.MediaBrowserCompatApi21.getServiceComponent(this.mBrowserObj);
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return android.support.v4.media.session.MediaSessionCompat$Token.fromToken(android.support.v4.media.MediaBrowserCompatApi21.getSessionToken(this.mBrowserObj));
    }

    public boolean isConnected()
    {
        return android.support.v4.media.MediaBrowserCompatApi21.isConnected(this.mBrowserObj);
    }

    public void onConnected()
    {
        android.os.Bundle v1 = android.support.v4.media.MediaBrowserCompatApi21.getExtras(this.mBrowserObj);
        if (v1 != null) {
            android.os.IBinder v2 = android.support.v4.app.BundleCompat.getBinder(v1, "extra_messenger");
            if (v2 != null) {
                this.mServiceBinderWrapper = new android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper(v2, this.mRootHints);
                this.mCallbacksMessenger = new android.os.Messenger(this.mHandler);
                this.mHandler.setCallbacksMessenger(this.mCallbacksMessenger);
                try {
                    this.mServiceBinderWrapper.registerCallbackMessenger(this.mCallbacksMessenger);
                } catch (android.os.RemoteException v0) {
                    android.util.Log.i("MediaBrowserCompat", "Remote error registering client messenger.");
                }
            }
        }
        return;
    }

    public void onConnectionFailed()
    {
        return;
    }

    public void onConnectionFailed(android.os.Messenger p1)
    {
        return;
    }

    public void onConnectionSuspended()
    {
        this.mServiceBinderWrapper = 0;
        this.mCallbacksMessenger = 0;
        this.mHandler.setCallbacksMessenger(0);
        return;
    }

    public void onLoadChildren(android.os.Messenger p6, String p7, java.util.List p8, android.os.Bundle p9)
    {
        if (this.mCallbacksMessenger == p6) {
            android.support.v4.media.MediaBrowserCompat$Subscription v0_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p7));
            if (v0_1 != null) {
                android.support.v4.media.MediaBrowserCompat$SubscriptionCallback v1 = v0_1.getCallback(p9);
                if (v1 != null) {
                    if (p9 != null) {
                        v1.onChildrenLoaded(p7, p8, p9);
                    } else {
                        v1.onChildrenLoaded(p7, p8);
                    }
                }
            } else {
                if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                    android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("onLoadChildren for id that isn\'t subscribed id=").append(p7).toString());
                }
            }
        }
        return;
    }

    public void onServiceConnected(android.os.Messenger p1, String p2, android.support.v4.media.session.MediaSessionCompat$Token p3, android.os.Bundle p4)
    {
        return;
    }

    public void subscribe(String p6, android.os.Bundle p7, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p8)
    {
        android.support.v4.media.MediaBrowserCompat$Subscription v1_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p6));
        if (v1_1 == null) {
            v1_1 = new android.support.v4.media.MediaBrowserCompat$Subscription();
            this.mSubscriptions.put(p6, v1_1);
        }
        android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$100(p8, v1_1);
        v1_1.putCallback(p7, p8);
        if (this.mServiceBinderWrapper != null) {
            try {
                this.mServiceBinderWrapper.addSubscription(p6, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$000(p8), p7, this.mCallbacksMessenger);
            } catch (android.os.RemoteException v0) {
                android.util.Log.i("MediaBrowserCompat", new StringBuilder().append("Remote error subscribing media item: ").append(p6).toString());
            }
        } else {
            android.support.v4.media.MediaBrowserCompatApi21.subscribe(this.mBrowserObj, p6, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$200(p8));
        }
        return;
    }

    public void unsubscribe(String p9, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p10)
    {
        android.support.v4.media.MediaBrowserCompat$Subscription v4_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p9));
        if (v4_1 != null) {
            if (this.mServiceBinderWrapper != null) {
                try {
                    if (p10 != null) {
                        java.util.List v0_1 = v4_1.getCallbacks();
                        java.util.List v3_0 = v4_1.getOptionsList();
                        int v2_0 = (v0_1.size() - 1);
                        while (v2_0 >= 0) {
                            if (v0_1.get(v2_0) == p10) {
                                this.mServiceBinderWrapper.removeSubscription(p9, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$000(p10), this.mCallbacksMessenger);
                                v0_1.remove(v2_0);
                                v3_0.remove(v2_0);
                            }
                            v2_0--;
                        }
                    } else {
                        this.mServiceBinderWrapper.removeSubscription(p9, 0, this.mCallbacksMessenger);
                    }
                } catch (android.os.RemoteException v1) {
                    android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("removeSubscription failed with RemoteException parentId=").append(p9).toString());
                }
            } else {
                if (p10 != null) {
                    java.util.List v0_0 = v4_1.getCallbacks();
                    java.util.List v3_1 = v4_1.getOptionsList();
                    int v2_1 = (v0_0.size() - 1);
                    while (v2_1 >= 0) {
                        if (v0_0.get(v2_1) == p10) {
                            v0_0.remove(v2_1);
                            v3_1.remove(v2_1);
                        }
                        v2_1--;
                    }
                    if (v0_0.size() == 0) {
                        android.support.v4.media.MediaBrowserCompatApi21.unsubscribe(this.mBrowserObj, p9);
                    }
                } else {
                    android.support.v4.media.MediaBrowserCompatApi21.unsubscribe(this.mBrowserObj, p9);
                }
            }
            if ((v4_1.isEmpty()) || (p10 == null)) {
                this.mSubscriptions.remove(p9);
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplBase implements android.support.v4.media.MediaBrowserCompat$MediaBrowserImpl, android.support.v4.media.MediaBrowserCompat$MediaBrowserServiceCallbackImpl {
    private static final int CONNECT_STATE_CONNECTED = 2;
    static final int CONNECT_STATE_CONNECTING = 1;
    static final int CONNECT_STATE_DISCONNECTED = 0;
    static final int CONNECT_STATE_SUSPENDED = 3;
    final android.support.v4.media.MediaBrowserCompat$ConnectionCallback mCallback;
    android.os.Messenger mCallbacksMessenger;
    final android.content.Context mContext;
    private android.os.Bundle mExtras;
    final android.support.v4.media.MediaBrowserCompat$CallbackHandler mHandler;
    private android.support.v4.media.session.MediaSessionCompat$Token mMediaSessionToken;
    final android.os.Bundle mRootHints;
    private String mRootId;
    android.support.v4.media.MediaBrowserCompat$ServiceBinderWrapper mServiceBinderWrapper;
    final android.content.ComponentName mServiceComponent;
    android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection mServiceConnection;
    int mState;
    private final android.support.v4.util.ArrayMap mSubscriptions;

    public MediaBrowserCompat$MediaBrowserImplBase(android.content.Context p3, android.content.ComponentName p4, android.support.v4.media.MediaBrowserCompat$ConnectionCallback p5, android.os.Bundle p6)
    {
        this.mHandler = new android.support.v4.media.MediaBrowserCompat$CallbackHandler(this);
        this.mSubscriptions = new android.support.v4.util.ArrayMap();
        this.mState = 0;
        if (p3 != null) {
            if (p4 != null) {
                if (p5 != null) {
                    android.os.Bundle v0_2;
                    this.mContext = p3;
                    this.mServiceComponent = p4;
                    this.mCallback = p5;
                    if (p6 != null) {
                        v0_2 = new android.os.Bundle(p6);
                    } else {
                        v0_2 = 0;
                    }
                    this.mRootHints = v0_2;
                    return;
                } else {
                    throw new IllegalArgumentException("connection callback must not be null");
                }
            } else {
                throw new IllegalArgumentException("service component must not be null");
            }
        } else {
            throw new IllegalArgumentException("context must not be null");
        }
    }

    private static String getStateLabel(int p2)
    {
        String v0_0;
        switch (p2) {
            case 0:
                v0_0 = "CONNECT_STATE_DISCONNECTED";
                break;
            case 1:
                v0_0 = "CONNECT_STATE_CONNECTING";
                break;
            case 2:
                v0_0 = "CONNECT_STATE_CONNECTED";
                break;
            case 3:
                v0_0 = "CONNECT_STATE_SUSPENDED";
                break;
            default:
                v0_0 = new StringBuilder().append("UNKNOWN/").append(p2).toString();
        }
        return v0_0;
    }

    private boolean isCurrent(android.os.Messenger p4, String p5)
    {
        int v0_1;
        if (this.mCallbacksMessenger == p4) {
            v0_1 = 1;
        } else {
            if (this.mState != 0) {
                android.util.Log.i("MediaBrowserCompat", new StringBuilder().append(p5).append(" for ").append(this.mServiceComponent).append(" with mCallbacksMessenger=").append(this.mCallbacksMessenger).append(" this=").append(this).toString());
            }
            v0_1 = 0;
        }
        return v0_1;
    }

    public void connect()
    {
        if (this.mState == 0) {
            if ((!android.support.v4.media.MediaBrowserCompat.DEBUG) || (this.mServiceConnection == null)) {
                if (this.mServiceBinderWrapper == null) {
                    if (this.mCallbacksMessenger == null) {
                        this.mState = 1;
                        android.content.Intent v2_1 = new android.content.Intent("android.media.browse.MediaBrowserService");
                        v2_1.setComponent(this.mServiceComponent);
                        android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection v3_1 = new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$MediaServiceConnection(this);
                        this.mServiceConnection = v3_1;
                        try {
                            boolean v0 = this.mContext.bindService(v2_1, this.mServiceConnection, 1);
                        } catch (Exception v1) {
                            android.util.Log.e("MediaBrowserCompat", new StringBuilder().append("Failed binding to service ").append(this.mServiceComponent).toString());
                        }
                        if (!v0) {
                            this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$1(this, v3_1));
                        }
                        if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                            android.util.Log.d("MediaBrowserCompat", "connect...");
                            this.dump();
                        }
                        return;
                    } else {
                        throw new RuntimeException(new StringBuilder().append("mCallbacksMessenger should be null. Instead it is ").append(this.mCallbacksMessenger).toString());
                    }
                } else {
                    throw new RuntimeException(new StringBuilder().append("mServiceBinderWrapper should be null. Instead it is ").append(this.mServiceBinderWrapper).toString());
                }
            } else {
                throw new RuntimeException(new StringBuilder().append("mServiceConnection should be null. Instead it is ").append(this.mServiceConnection).toString());
            }
        } else {
            throw new IllegalStateException(new StringBuilder().append("connect() called while not disconnected (state=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).append(")").toString());
        }
    }

    public void disconnect()
    {
        if (this.mCallbacksMessenger != null) {
            try {
                this.mServiceBinderWrapper.disconnect(this.mCallbacksMessenger);
            } catch (android.os.RemoteException v0) {
                android.util.Log.w("MediaBrowserCompat", new StringBuilder().append("RemoteException during connect for ").append(this.mServiceComponent).toString());
            }
        }
        this.forceCloseConnection();
        if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
            android.util.Log.d("MediaBrowserCompat", "disconnect...");
            this.dump();
        }
        return;
    }

    void dump()
    {
        android.util.Log.d("MediaBrowserCompat", "MediaBrowserCompat...");
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mServiceComponent=").append(this.mServiceComponent).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mCallback=").append(this.mCallback).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mRootHints=").append(this.mRootHints).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mState=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mServiceConnection=").append(this.mServiceConnection).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mServiceBinderWrapper=").append(this.mServiceBinderWrapper).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mCallbacksMessenger=").append(this.mCallbacksMessenger).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mRootId=").append(this.mRootId).toString());
        android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("  mMediaSessionToken=").append(this.mMediaSessionToken).toString());
        return;
    }

    void forceCloseConnection()
    {
        if (this.mServiceConnection != null) {
            this.mContext.unbindService(this.mServiceConnection);
        }
        this.mState = 0;
        this.mServiceConnection = 0;
        this.mServiceBinderWrapper = 0;
        this.mCallbacksMessenger = 0;
        this.mHandler.setCallbacksMessenger(0);
        this.mRootId = 0;
        this.mMediaSessionToken = 0;
        return;
    }

    public android.os.Bundle getExtras()
    {
        if (this.isConnected()) {
            return this.mExtras;
        } else {
            throw new IllegalStateException(new StringBuilder().append("getExtras() called while not connected (state=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).append(")").toString());
        }
    }

    public void getItem(String p5, android.support.v4.media.MediaBrowserCompat$ItemCallback p6)
    {
        if (!android.text.TextUtils.isEmpty(p5)) {
            if (p6 != null) {
                if (this.mState == 2) {
                    try {
                        this.mServiceBinderWrapper.getMediaItem(p5, new android.support.v4.media.MediaBrowserCompat$ItemReceiver(p5, p6, this.mHandler), this.mCallbacksMessenger);
                    } catch (android.os.RemoteException v0) {
                        android.util.Log.i("MediaBrowserCompat", "Remote error getting media item.");
                        this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$3(this, p6, p5));
                    }
                } else {
                    android.util.Log.i("MediaBrowserCompat", "Not connected, unable to retrieve the MediaItem.");
                    this.mHandler.post(new android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase$2(this, p6, p5));
                }
                return;
            } else {
                throw new IllegalArgumentException("cb is null");
            }
        } else {
            throw new IllegalArgumentException("mediaId is empty");
        }
    }

    public String getRoot()
    {
        if (this.isConnected()) {
            return this.mRootId;
        } else {
            throw new IllegalStateException(new StringBuilder().append("getRoot() called while not connected(state=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).append(")").toString());
        }
    }

    public android.content.ComponentName getServiceComponent()
    {
        if (this.isConnected()) {
            return this.mServiceComponent;
        } else {
            throw new IllegalStateException(new StringBuilder().append("getServiceComponent() called while not connected (state=").append(this.mState).append(")").toString());
        }
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        if (this.isConnected()) {
            return this.mMediaSessionToken;
        } else {
            throw new IllegalStateException(new StringBuilder().append("getSessionToken() called while not connected(state=").append(this.mState).append(")").toString());
        }
    }

    public boolean isConnected()
    {
        int v0_1;
        if (this.mState != 2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onConnectionFailed(android.os.Messenger p4)
    {
        android.util.Log.e("MediaBrowserCompat", new StringBuilder().append("onConnectFailed for ").append(this.mServiceComponent).toString());
        if (this.isCurrent(p4, "onConnectFailed")) {
            if (this.mState == 1) {
                this.forceCloseConnection();
                this.mCallback.onConnectionFailed();
            } else {
                android.util.Log.w("MediaBrowserCompat", new StringBuilder().append("onConnect from service while mState=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).append("... ignoring").toString());
            }
        }
        return;
    }

    public void onLoadChildren(android.os.Messenger p7, String p8, java.util.List p9, android.os.Bundle p10)
    {
        if (this.isCurrent(p7, "onLoadChildren")) {
            if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("onLoadChildren for ").append(this.mServiceComponent).append(" id=").append(p8).toString());
            }
            android.support.v4.media.MediaBrowserCompat$Subscription v1_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p8));
            if (v1_1 != null) {
                android.support.v4.media.MediaBrowserCompat$SubscriptionCallback v2 = v1_1.getCallback(p10);
                if (v2 != null) {
                    if (p10 != null) {
                        v2.onChildrenLoaded(p8, p9, p10);
                    } else {
                        v2.onChildrenLoaded(p8, p9);
                    }
                }
            } else {
                if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                    android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("onLoadChildren for id that isn\'t subscribed id=").append(p8).toString());
                }
            }
        }
        return;
    }

    public void onServiceConnected(android.os.Messenger p14, String p15, android.support.v4.media.session.MediaSessionCompat$Token p16, android.os.Bundle p17)
    {
        if (this.isCurrent(p14, "onConnect")) {
            if (this.mState == 1) {
                this.mRootId = p15;
                this.mMediaSessionToken = p16;
                this.mExtras = p17;
                this.mState = 2;
                if (android.support.v4.media.MediaBrowserCompat.DEBUG) {
                    android.util.Log.d("MediaBrowserCompat", "ServiceCallbacks.onConnect...");
                    this.dump();
                }
                this.mCallback.onConnected();
                try {
                    String v9_1 = this.mSubscriptions.entrySet().iterator();
                } catch (android.os.RemoteException v2) {
                    android.util.Log.d("MediaBrowserCompat", "addSubscription failed with RemoteException.");
                }
                while (v9_1.hasNext()) {
                    java.util.Map$Entry v7_1 = ((java.util.Map$Entry) v9_1.next());
                    String v4_1 = ((String) v7_1.getKey());
                    android.support.v4.media.MediaBrowserCompat$Subscription v6_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) v7_1.getValue());
                    java.util.List v1 = v6_1.getCallbacks();
                    java.util.List v5 = v6_1.getOptionsList();
                    int v3 = 0;
                    while (v3 < v1.size()) {
                        this.mServiceBinderWrapper.addSubscription(v4_1, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$000(((android.support.v4.media.MediaBrowserCompat$SubscriptionCallback) v1.get(v3))), ((android.os.Bundle) v5.get(v3)), this.mCallbacksMessenger);
                        v3++;
                    }
                }
            } else {
                android.util.Log.w("MediaBrowserCompat", new StringBuilder().append("onConnect from service while mState=").append(android.support.v4.media.MediaBrowserCompat$MediaBrowserImplBase.getStateLabel(this.mState)).append("... ignoring").toString());
            }
        }
        return;
    }

    public void subscribe(String p6, android.os.Bundle p7, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p8)
    {
        android.support.v4.media.MediaBrowserCompat$Subscription v1_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p6));
        if (v1_1 == null) {
            v1_1 = new android.support.v4.media.MediaBrowserCompat$Subscription();
            this.mSubscriptions.put(p6, v1_1);
        }
        v1_1.putCallback(p7, p8);
        if (this.mState == 2) {
            try {
                this.mServiceBinderWrapper.addSubscription(p6, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$000(p8), p7, this.mCallbacksMessenger);
            } catch (android.os.RemoteException v0) {
                android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("addSubscription failed with RemoteException parentId=").append(p6).toString());
            }
        }
        return;
    }

    public void unsubscribe(String p10, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p11)
    {
        android.support.v4.media.MediaBrowserCompat$Subscription v4_1 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.mSubscriptions.get(p10));
        if (v4_1 != null) {
            try {
                if (p11 != null) {
                    java.util.List v0 = v4_1.getCallbacks();
                    java.util.List v3 = v4_1.getOptionsList();
                    int v2 = (v0.size() - 1);
                    while (v2 >= 0) {
                        if (v0.get(v2) == p11) {
                            if (this.mState == 2) {
                                this.mServiceBinderWrapper.removeSubscription(p10, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$000(p11), this.mCallbacksMessenger);
                            }
                            v0.remove(v2);
                            v3.remove(v2);
                        }
                        v2--;
                    }
                } else {
                    if (this.mState == 2) {
                        this.mServiceBinderWrapper.removeSubscription(p10, 0, this.mCallbacksMessenger);
                    }
                }
            } catch (android.os.RemoteException v1) {
                android.util.Log.d("MediaBrowserCompat", new StringBuilder().append("removeSubscription failed with RemoteException parentId=").append(p10).toString());
            }
            if ((v4_1.isEmpty()) || (p11 == null)) {
                this.mSubscriptions.remove(p10);
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$SubscriptionCallback$StubApi21 implements android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback {
    final synthetic android.support.v4.media.MediaBrowserCompat$SubscriptionCallback this$0;

    MediaBrowserCompat$SubscriptionCallback$StubApi21(android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p1)
    {
        this.this$0 = p1;
        return;
    }

    java.util.List applyOptions(java.util.List p7, android.os.Bundle p8)
    {
        if (p7 != null) {
            int v1 = p8.getInt("android.media.browse.extra.PAGE", -1);
            int v2 = p8.getInt("android.media.browse.extra.PAGE_SIZE", -1);
            if ((v1 != -1) || (v2 != -1)) {
                int v0 = (v2 * v1);
                int v3 = (v0 + v2);
                if ((v1 >= 0) && ((v2 >= 1) && (v0 < p7.size()))) {
                    if (v3 > p7.size()) {
                        v3 = p7.size();
                    }
                    p7 = p7.subList(v0, v3);
                } else {
                    p7 = java.util.Collections.EMPTY_LIST;
                }
            }
        } else {
            p7 = 0;
        }
        return p7;
    }

    public void onChildrenLoaded(String p9, java.util.List p10)
    {
        android.support.v4.media.MediaBrowserCompat$Subscription v5;
        if (this.this$0.mSubscriptionRef != null) {
            v5 = ((android.support.v4.media.MediaBrowserCompat$Subscription) this.this$0.mSubscriptionRef.get());
        } else {
            v5 = 0;
        }
        if (v5 != null) {
            java.util.List v2 = android.support.v4.media.MediaBrowserCompat$MediaItem.fromMediaItemList(p10);
            java.util.List v0 = v5.getCallbacks();
            java.util.List v4 = v5.getOptionsList();
            int v1 = 0;
            while (v1 < v0.size()) {
                android.os.Bundle v3_1 = ((android.os.Bundle) v4.get(v1));
                if (v3_1 != null) {
                    this.this$0.onChildrenLoaded(p9, this.applyOptions(v2, v3_1), v3_1);
                } else {
                    this.this$0.onChildrenLoaded(p9, v2);
                }
                v1++;
            }
        } else {
            this.this$0.onChildrenLoaded(p9, android.support.v4.media.MediaBrowserCompat$MediaItem.fromMediaItemList(p10));
        }
        return;
    }

    public void onError(String p2)
    {
        this.this$0.onError(p2);
        return;
    }
}
package android.support.v4.media;
interface MediaBrowserCompatApi24$SubscriptionCallback implements android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallback {

    public abstract void onChildrenLoaded();

    public abstract void onError();
}
package android.support.v4.media;
 class MediaBrowserCompatApi24$SubscriptionCallbackProxy extends android.support.v4.media.MediaBrowserCompatApi21$SubscriptionCallbackProxy {

    public MediaBrowserCompatApi24$SubscriptionCallbackProxy(android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallback p1)
    {
        super(p1);
        return;
    }

    public void onChildrenLoaded(String p2, java.util.List p3, android.os.Bundle p4)
    {
        ((android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallback) this.mSubscriptionCallback).onChildrenLoaded(p2, p3, p4);
        return;
    }

    public void onError(String p2, android.os.Bundle p3)
    {
        ((android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallback) this.mSubscriptionCallback).onError(p2, p3);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$1 extends android.support.v4.media.MediaBrowserServiceCompat$Result {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord val$connection;
    final synthetic android.os.Bundle val$options;
    final synthetic String val$parentId;

    MediaBrowserServiceCompat$1(android.support.v4.media.MediaBrowserServiceCompat p1, Object p2, android.support.v4.media.MediaBrowserServiceCompat$ConnectionRecord p3, String p4, android.os.Bundle p5)
    {
        this.this$0 = p1;
        this.val$connection = p3;
        this.val$parentId = p4;
        this.val$options = p5;
        super(p2);
        return;
    }

    bridge synthetic void onResultSent(Object p1, int p2)
    {
        this.onResultSent(((java.util.List) p1), p2);
        return;
    }

    void onResultSent(java.util.List p6, int p7)
    {
        if (this.this$0.mConnections.get(this.val$connection.callbacks.asBinder()) == this.val$connection) {
            java.util.List v1;
            if ((p7 & 1) == 0) {
                v1 = p6;
            } else {
                v1 = this.this$0.applyOptions(p6, this.val$options);
            }
            try {
                this.val$connection.callbacks.onLoadChildren(this.val$parentId, v1, this.val$options);
            } catch (android.os.RemoteException v0) {
                android.util.Log.w("MBServiceCompat", new StringBuilder().append("Calling onLoadChildren() failed for id=").append(this.val$parentId).append(" package=").append(this.val$connection.pkg).toString());
            }
        } else {
            if (android.support.v4.media.MediaBrowserServiceCompat.DEBUG) {
                android.util.Log.d("MBServiceCompat", new StringBuilder().append("Not sending onLoadChildren result for connection that has been disconnected. pkg=").append(this.val$connection.pkg).append(" id=").append(this.val$parentId).toString());
            }
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$2 extends android.support.v4.media.MediaBrowserServiceCompat$Result {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;
    final synthetic android.support.v4.os.ResultReceiver val$receiver;

    MediaBrowserServiceCompat$2(android.support.v4.media.MediaBrowserServiceCompat p1, Object p2, android.support.v4.os.ResultReceiver p3)
    {
        this.this$0 = p1;
        this.val$receiver = p3;
        super(p2);
        return;
    }

    void onResultSent(android.support.v4.media.MediaBrowserCompat$MediaItem p5, int p6)
    {
        if ((p6 & 2) == 0) {
            android.os.Bundle v0_1 = new android.os.Bundle();
            v0_1.putParcelable("media_item", p5);
            this.val$receiver.send(0, v0_1);
        } else {
            this.val$receiver.send(-1, 0);
        }
        return;
    }

    bridge synthetic void onResultSent(Object p1, int p2)
    {
        this.onResultSent(((android.support.v4.media.MediaBrowserCompat$MediaItem) p1), p2);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$2 extends android.support.v4.media.MediaBrowserServiceCompat$Result {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper val$resultWrapper;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$2(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 p1, Object p2, android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper p3)
    {
        this.this$1 = p1;
        this.val$resultWrapper = p3;
        super(p2);
        return;
    }

    public void detach()
    {
        this.val$resultWrapper.detach();
        return;
    }

    bridge synthetic void onResultSent(Object p1, int p2)
    {
        this.onResultSent(((java.util.List) p1), p2);
        return;
    }

    void onResultSent(java.util.List p6, int p7)
    {
        java.util.ArrayList v2_0 = 0;
        if (p6 != null) {
            v2_0 = new java.util.ArrayList();
            android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper v3_0 = p6.iterator();
            while (v3_0.hasNext()) {
                android.support.v4.media.MediaBrowserCompat$MediaItem v0_1 = ((android.support.v4.media.MediaBrowserCompat$MediaItem) v3_0.next());
                android.os.Parcel v1 = android.os.Parcel.obtain();
                v0_1.writeToParcel(v1, 0);
                v2_0.add(v1);
            }
        }
        this.val$resultWrapper.sendResult(v2_0);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 implements android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImpl, android.support.v4.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy {
    android.os.Messenger mMessenger;
    Object mServiceObj;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi21(android.support.v4.media.MediaBrowserServiceCompat p1)
    {
        this.this$0 = p1;
        return;
    }

    public android.os.Bundle getBrowserRootHints()
    {
        android.os.Bundle v0_0 = 0;
        if (this.mMessenger != null) {
            if (this.this$0.mCurConnection != null) {
                if (this.this$0.mCurConnection.rootHints != null) {
                    v0_0 = new android.os.Bundle(this.this$0.mCurConnection.rootHints);
                }
            } else {
                throw new IllegalStateException("This should be called inside of onLoadChildren or onLoadItem methods");
            }
        }
        return v0_0;
    }

    public void notifyChildrenChanged(String p3, android.os.Bundle p4)
    {
        if (this.mMessenger != null) {
            this.this$0.mHandler.post(new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$1(this, p3, p4));
        } else {
            android.support.v4.media.MediaBrowserServiceCompatApi21.notifyChildrenChanged(this.mServiceObj, p3);
        }
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return android.support.v4.media.MediaBrowserServiceCompatApi21.onBind(this.mServiceObj, p2);
    }

    public void onCreate()
    {
        this.mServiceObj = android.support.v4.media.MediaBrowserServiceCompatApi21.createService(this.this$0, this);
        android.support.v4.media.MediaBrowserServiceCompatApi21.onCreate(this.mServiceObj);
        return;
    }

    public android.support.v4.media.MediaBrowserServiceCompatApi21$BrowserRoot onGetRoot(String p5, int p6, android.os.Bundle p7)
    {
        android.os.Bundle v1_0 = 0;
        if ((p7 != null) && (p7.getInt("extra_client_version", 0) != 0)) {
            p7.remove("extra_client_version");
            this.mMessenger = new android.os.Messenger(this.this$0.mHandler);
            v1_0 = new android.os.Bundle();
            v1_0.putInt("extra_service_version", 1);
            android.support.v4.app.BundleCompat.putBinder(v1_0, "extra_messenger", this.mMessenger.getBinder());
        }
        android.os.Bundle v2_8;
        android.support.v4.media.MediaBrowserServiceCompat$BrowserRoot v0 = this.this$0.onGetRoot(p5, p6, p7);
        if (v0 != null) {
            if (v1_0 != null) {
                if (v0.getExtras() != null) {
                    v1_0.putAll(v0.getExtras());
                }
            } else {
                v1_0 = v0.getExtras();
            }
            v2_8 = new android.support.v4.media.MediaBrowserServiceCompatApi21$BrowserRoot(v0.getRootId(), v1_0);
        } else {
            v2_8 = 0;
        }
        return v2_8;
    }

    public void onLoadChildren(String p3, android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper p4)
    {
        this.this$0.onLoadChildren(p3, new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21$2(this, p3, p4));
        return;
    }

    public void setSessionToken(android.support.v4.media.session.MediaSessionCompat$Token p3)
    {
        android.support.v4.media.MediaBrowserServiceCompatApi21.setSessionToken(this.mServiceObj, p3.getToken());
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi23$1 extends android.support.v4.media.MediaBrowserServiceCompat$Result {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23 this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper val$resultWrapper;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi23$1(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23 p1, Object p2, android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper p3)
    {
        this.this$1 = p1;
        this.val$resultWrapper = p3;
        super(p2);
        return;
    }

    public void detach()
    {
        this.val$resultWrapper.detach();
        return;
    }

    void onResultSent(android.support.v4.media.MediaBrowserCompat$MediaItem p4, int p5)
    {
        if (p4 != null) {
            android.os.Parcel v0 = android.os.Parcel.obtain();
            p4.writeToParcel(v0, 0);
            this.val$resultWrapper.sendResult(v0);
        } else {
            this.val$resultWrapper.sendResult(0);
        }
        return;
    }

    bridge synthetic void onResultSent(Object p1, int p2)
    {
        this.onResultSent(((android.support.v4.media.MediaBrowserCompat$MediaItem) p1), p2);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi24$1 extends android.support.v4.media.MediaBrowserServiceCompat$Result {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi24 this$1;
    final synthetic android.support.v4.media.MediaBrowserServiceCompatApi24$ResultWrapper val$resultWrapper;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi24$1(android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi24 p1, Object p2, android.support.v4.media.MediaBrowserServiceCompatApi24$ResultWrapper p3)
    {
        this.this$1 = p1;
        this.val$resultWrapper = p3;
        super(p2);
        return;
    }

    public void detach()
    {
        this.val$resultWrapper.detach();
        return;
    }

    bridge synthetic void onResultSent(Object p1, int p2)
    {
        this.onResultSent(((java.util.List) p1), p2);
        return;
    }

    void onResultSent(java.util.List p6, int p7)
    {
        java.util.ArrayList v2_0 = 0;
        if (p6 != null) {
            v2_0 = new java.util.ArrayList();
            android.support.v4.media.MediaBrowserServiceCompatApi24$ResultWrapper v3_0 = p6.iterator();
            while (v3_0.hasNext()) {
                android.support.v4.media.MediaBrowserCompat$MediaItem v0_1 = ((android.support.v4.media.MediaBrowserCompat$MediaItem) v3_0.next());
                android.os.Parcel v1 = android.os.Parcel.obtain();
                v0_1.writeToParcel(v1, 0);
                v2_0.add(v1);
            }
        }
        this.val$resultWrapper.sendResult(v2_0, p7);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplBase implements android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImpl {
    private android.os.Messenger mMessenger;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$MediaBrowserServiceImplBase(android.support.v4.media.MediaBrowserServiceCompat p1)
    {
        this.this$0 = p1;
        return;
    }

    public android.os.Bundle getBrowserRootHints()
    {
        if (this.this$0.mCurConnection != null) {
            android.os.Bundle v0_2;
            if (this.this$0.mCurConnection.rootHints != null) {
                v0_2 = new android.os.Bundle(this.this$0.mCurConnection.rootHints);
            } else {
                v0_2 = 0;
            }
            return v0_2;
        } else {
            throw new IllegalStateException("This should be called inside of onLoadChildren or onLoadItem methods");
        }
    }

    public void notifyChildrenChanged(String p3, android.os.Bundle p4)
    {
        this.this$0.mHandler.post(new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$2(this, p3, p4));
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p3)
    {
        int v0_2;
        if (!"android.media.browse.MediaBrowserService".equals(p3.getAction())) {
            v0_2 = 0;
        } else {
            v0_2 = this.mMessenger.getBinder();
        }
        return v0_2;
    }

    public void onCreate()
    {
        this.mMessenger = new android.os.Messenger(this.this$0.mHandler);
        return;
    }

    public void setSessionToken(android.support.v4.media.session.MediaSessionCompat$Token p3)
    {
        this.this$0.mHandler.post(new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplBase$1(this, p3));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$ServiceCallbacksCompat implements android.support.v4.media.MediaBrowserServiceCompat$ServiceCallbacks {
    final android.os.Messenger mCallbacks;
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$ServiceCallbacksCompat(android.support.v4.media.MediaBrowserServiceCompat p1, android.os.Messenger p2)
    {
        this.this$0 = p1;
        this.mCallbacks = p2;
        return;
    }

    private void sendRequest(int p3, android.os.Bundle p4)
    {
        android.os.Message v0 = android.os.Message.obtain();
        v0.what = p3;
        v0.arg1 = 1;
        v0.setData(p4);
        this.mCallbacks.send(v0);
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mCallbacks.getBinder();
    }

    public void onConnect(String p4, android.support.v4.media.session.MediaSessionCompat$Token p5, android.os.Bundle p6)
    {
        if (p6 == null) {
            p6 = new android.os.Bundle();
        }
        p6.putInt("extra_service_version", 1);
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_media_item_id", p4);
        v0_1.putParcelable("data_media_session_token", p5);
        v0_1.putBundle("data_root_hints", p6);
        this.sendRequest(1, v0_1);
        return;
    }

    public void onConnectFailed()
    {
        this.sendRequest(2, 0);
        return;
    }

    public void onLoadChildren(String p4, java.util.List p5, android.os.Bundle p6)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("data_media_item_id", p4);
        v0_1.putBundle("data_options", p6);
        if (p5 != null) {
            java.util.ArrayList v5_1;
            if (!(p5 instanceof java.util.ArrayList)) {
                v5_1 = new java.util.ArrayList(p5);
            } else {
                v5_1 = ((java.util.ArrayList) p5);
            }
            v0_1.putParcelableArrayList("data_media_item_list", v5_1);
        }
        this.sendRequest(3, v0_1);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi23$MediaBrowserServiceAdaptor extends android.support.v4.media.MediaBrowserServiceCompatApi21$MediaBrowserServiceAdaptor {

    MediaBrowserServiceCompatApi23$MediaBrowserServiceAdaptor(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy p2)
    {
        super(p1, p2);
        return;
    }

    public void onLoadItem(String p3, android.service.media.MediaBrowserService$Result p4)
    {
        ((android.support.v4.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy) this.mServiceProxy).onLoadItem(p3, new android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper(p4));
        return;
    }
}
package android.support.v4.media;
public interface MediaBrowserServiceCompatApi23$ServiceCompatProxy implements android.support.v4.media.MediaBrowserServiceCompatApi21$ServiceCompatProxy {

    public abstract void onLoadItem();
}
package android.support.v4.media;
 class MediaDescriptionCompatApi23$Builder extends android.support.v4.media.MediaDescriptionCompatApi21$Builder {

    MediaDescriptionCompatApi23$Builder()
    {
        return;
    }

    public static void setMediaUri(Object p0, android.net.Uri p1)
    {
        ((android.media.MediaDescription$Builder) p0).setMediaUri(p1);
        return;
    }
}
package android.support.v4.media;
 class MediaDescriptionCompatApi23 extends android.support.v4.media.MediaDescriptionCompatApi21 {

    MediaDescriptionCompatApi23()
    {
        return;
    }

    public static android.net.Uri getMediaUri(Object p1)
    {
        return ((android.media.MediaDescription) p1).getMediaUri();
    }
}
package android.support.v4.media;
 class TransportMediator$1 implements android.support.v4.media.TransportMediatorCallback {
    final synthetic android.support.v4.media.TransportMediator this$0;

    TransportMediator$1(android.support.v4.media.TransportMediator p1)
    {
        this.this$0 = p1;
        return;
    }

    public long getPlaybackPosition()
    {
        return this.this$0.mCallbacks.onGetCurrentPosition();
    }

    public void handleAudioFocusChange(int p2)
    {
        this.this$0.mCallbacks.onAudioFocusChange(p2);
        return;
    }

    public void handleKey(android.view.KeyEvent p2)
    {
        p2.dispatch(this.this$0.mKeyEventCallback);
        return;
    }

    public void playbackPositionUpdate(long p2)
    {
        this.this$0.mCallbacks.onSeekTo(p2);
        return;
    }
}
package android.support.v4.media;
public class TransportMediator extends android.support.v4.media.TransportController {
    public static final int FLAG_KEY_MEDIA_FAST_FORWARD = 64;
    public static final int FLAG_KEY_MEDIA_NEXT = 128;
    public static final int FLAG_KEY_MEDIA_PAUSE = 16;
    public static final int FLAG_KEY_MEDIA_PLAY = 4;
    public static final int FLAG_KEY_MEDIA_PLAY_PAUSE = 8;
    public static final int FLAG_KEY_MEDIA_PREVIOUS = 1;
    public static final int FLAG_KEY_MEDIA_REWIND = 2;
    public static final int FLAG_KEY_MEDIA_STOP = 32;
    public static final int KEYCODE_MEDIA_PAUSE = 127;
    public static final int KEYCODE_MEDIA_PLAY = 126;
    public static final int KEYCODE_MEDIA_RECORD = 130;
    final android.media.AudioManager mAudioManager;
    final android.support.v4.media.TransportPerformer mCallbacks;
    final android.content.Context mContext;
    final android.support.v4.media.TransportMediatorJellybeanMR2 mController;
    final Object mDispatcherState;
    final android.view.KeyEvent$Callback mKeyEventCallback;
    final java.util.ArrayList mListeners;
    final android.support.v4.media.TransportMediatorCallback mTransportKeyCallback;
    final android.view.View mView;

    public TransportMediator(android.app.Activity p2, android.support.v4.media.TransportPerformer p3)
    {
        this(p2, 0, p3);
        return;
    }

    private TransportMediator(android.app.Activity p6, android.view.View p7, android.support.v4.media.TransportPerformer p8)
    {
        int v0_1;
        this.mListeners = new java.util.ArrayList();
        this.mTransportKeyCallback = new android.support.v4.media.TransportMediator$1(this);
        this.mKeyEventCallback = new android.support.v4.media.TransportMediator$2(this);
        if (p6 == null) {
            v0_1 = p7.getContext();
        } else {
            v0_1 = p6;
        }
        this.mContext = v0_1;
        this.mCallbacks = p8;
        this.mAudioManager = ((android.media.AudioManager) this.mContext.getSystemService("audio"));
        if (p6 != null) {
            p7 = p6.getWindow().getDecorView();
        }
        this.mView = p7;
        this.mDispatcherState = this.mView.getKeyDispatcherState();
        if (android.os.Build$VERSION.SDK_INT < 18) {
            this.mController = 0;
        } else {
            this.mController = new android.support.v4.media.TransportMediatorJellybeanMR2(this.mContext, this.mAudioManager, this.mView, this.mTransportKeyCallback);
        }
        return;
    }

    public TransportMediator(android.view.View p2, android.support.v4.media.TransportPerformer p3)
    {
        this(0, p2, p3);
        return;
    }

    private android.support.v4.media.TransportStateListener[] getListeners()
    {
        android.support.v4.media.TransportStateListener[] v0;
        if (this.mListeners.size() > 0) {
            v0 = new android.support.v4.media.TransportStateListener[this.mListeners.size()];
            this.mListeners.toArray(v0);
        } else {
            v0 = 0;
        }
        return v0;
    }

    static boolean isMediaKey(int p1)
    {
        int v0;
        switch (p1) {
            case 79:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 126:
            case 127:
            case 130:
                v0 = 1;
                break;
            default:
                v0 = 0;
        }
        return v0;
    }

    private void pushControllerState()
    {
        if (this.mController != null) {
            this.mController.refreshState(this.mCallbacks.onIsPlaying(), this.mCallbacks.onGetCurrentPosition(), this.mCallbacks.onGetTransportControlFlags());
        }
        return;
    }

    private void reportPlayingChanged()
    {
        android.support.v4.media.TransportStateListener[] v1 = this.getListeners();
        if (v1 != null) {
            int v3 = v1.length;
            int v2 = 0;
            while (v2 < v3) {
                v1[v2].onPlayingChanged(this);
                v2++;
            }
        }
        return;
    }

    private void reportTransportControlsChanged()
    {
        android.support.v4.media.TransportStateListener[] v1 = this.getListeners();
        if (v1 != null) {
            int v3 = v1.length;
            int v2 = 0;
            while (v2 < v3) {
                v1[v2].onTransportControlsChanged(this);
                v2++;
            }
        }
        return;
    }

    public void destroy()
    {
        this.mController.destroy();
        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p3)
    {
        return p3.dispatch(this.mKeyEventCallback, ((android.view.KeyEvent$DispatcherState) this.mDispatcherState), this);
    }

    public int getBufferPercentage()
    {
        return this.mCallbacks.onGetBufferPercentage();
    }

    public long getCurrentPosition()
    {
        return this.mCallbacks.onGetCurrentPosition();
    }

    public long getDuration()
    {
        return this.mCallbacks.onGetDuration();
    }

    public Object getRemoteControlClient()
    {
        int v0_1;
        if (this.mController == null) {
            v0_1 = 0;
        } else {
            v0_1 = this.mController.getRemoteControlClient();
        }
        return v0_1;
    }

    public int getTransportControlFlags()
    {
        return this.mCallbacks.onGetTransportControlFlags();
    }

    public boolean isPlaying()
    {
        return this.mCallbacks.onIsPlaying();
    }

    public void pausePlaying()
    {
        if (this.mController != null) {
            this.mController.pausePlaying();
        }
        this.mCallbacks.onPause();
        this.pushControllerState();
        this.reportPlayingChanged();
        return;
    }

    public void refreshState()
    {
        this.pushControllerState();
        this.reportPlayingChanged();
        this.reportTransportControlsChanged();
        return;
    }

    public void registerStateListener(android.support.v4.media.TransportStateListener p2)
    {
        this.mListeners.add(p2);
        return;
    }

    public void seekTo(long p2)
    {
        this.mCallbacks.onSeekTo(p2);
        return;
    }

    public void startPlaying()
    {
        if (this.mController != null) {
            this.mController.startPlaying();
        }
        this.mCallbacks.onStart();
        this.pushControllerState();
        this.reportPlayingChanged();
        return;
    }

    public void stopPlaying()
    {
        if (this.mController != null) {
            this.mController.stopPlaying();
        }
        this.mCallbacks.onStop();
        this.pushControllerState();
        this.reportPlayingChanged();
        return;
    }

    public void unregisterStateListener(android.support.v4.media.TransportStateListener p2)
    {
        this.mListeners.remove(p2);
        return;
    }
}
package android.support.v4.media;
 class VolumeProviderCompat$1 implements android.support.v4.media.VolumeProviderCompatApi21$Delegate {
    final synthetic android.support.v4.media.VolumeProviderCompat this$0;

    VolumeProviderCompat$1(android.support.v4.media.VolumeProviderCompat p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAdjustVolume(int p2)
    {
        this.this$0.onAdjustVolume(p2);
        return;
    }

    public void onSetVolumeTo(int p2)
    {
        this.this$0.onSetVolumeTo(p2);
        return;
    }
}
package android.support.v4.media.session;
 class IMediaControllerCallback$Stub$Proxy implements android.support.v4.media.session.IMediaControllerCallback {
    private android.os.IBinder mRemote;

    IMediaControllerCallback$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public String getInterfaceDescriptor()
    {
        return "android.support.v4.media.session.IMediaControllerCallback";
    }

    public void onEvent(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
            v0.writeString(p6);
        } catch (android.os.IBinder v1_1) {
            v0.recycle();
            throw v1_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(1, v0, 0, 1);
        v0.recycle();
        return;
    }

    public void onExtrasChanged(android.os.Bundle p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
        } catch (android.os.IBinder v1_0) {
            v0.recycle();
            throw v1_0;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        this.mRemote.transact(7, v0, 0, 1);
        v0.recycle();
        return;
    }

    public void onMetadataChanged(android.support.v4.media.MediaMetadataCompat p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
        } catch (android.os.IBinder v1_0) {
            v0.recycle();
            throw v1_0;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        this.mRemote.transact(4, v0, 0, 1);
        v0.recycle();
        return;
    }

    public void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
        } catch (android.os.IBinder v1_0) {
            v0.recycle();
            throw v1_0;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        this.mRemote.transact(3, v0, 0, 1);
        v0.recycle();
        return;
    }

    public void onQueueChanged(java.util.List p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
            v0.writeTypedList(p6);
            this.mRemote.transact(5, v0, 0, 1);
            v0.recycle();
            return;
        } catch (Throwable v1_0) {
            v0.recycle();
            throw v1_0;
        }
    }

    public void onQueueTitleChanged(CharSequence p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
        } catch (android.os.IBinder v1_0) {
            v0.recycle();
            throw v1_0;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            android.text.TextUtils.writeToParcel(p6, v0, 0);
        }
        this.mRemote.transact(6, v0, 0, 1);
        v0.recycle();
        return;
    }

    public void onSessionDestroyed()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
            this.mRemote.transact(2, v0, 0, 1);
            v0.recycle();
            return;
        } catch (Throwable v1_0) {
            v0.recycle();
            throw v1_0;
        }
    }

    public void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaControllerCallback");
        } catch (android.os.IBinder v1_0) {
            v0.recycle();
            throw v1_0;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        this.mRemote.transact(8, v0, 0, 1);
        v0.recycle();
        return;
    }
}
package android.support.v4.media.session;
public abstract class IMediaControllerCallback$Stub extends android.os.Binder implements android.support.v4.media.session.IMediaControllerCallback {
    private static final String DESCRIPTOR = "android.support.v4.media.session.IMediaControllerCallback";
    static final int TRANSACTION_onEvent = 1;
    static final int TRANSACTION_onExtrasChanged = 7;
    static final int TRANSACTION_onMetadataChanged = 4;
    static final int TRANSACTION_onPlaybackStateChanged = 3;
    static final int TRANSACTION_onQueueChanged = 5;
    static final int TRANSACTION_onQueueTitleChanged = 6;
    static final int TRANSACTION_onSessionDestroyed = 2;
    static final int TRANSACTION_onVolumeInfoChanged = 8;

    public IMediaControllerCallback$Stub()
    {
        this.attachInterface(this, "android.support.v4.media.session.IMediaControllerCallback");
        return;
    }

    public static android.support.v4.media.session.IMediaControllerCallback asInterface(android.os.IBinder p2)
    {
        android.support.v4.media.session.IMediaControllerCallback v0_0;
        if (p2 != null) {
            android.support.v4.media.session.IMediaControllerCallback v0_1 = p2.queryLocalInterface("android.support.v4.media.session.IMediaControllerCallback");
            if ((v0_1 == null) || (!(v0_1 instanceof android.support.v4.media.session.IMediaControllerCallback))) {
                v0_0 = new android.support.v4.media.session.IMediaControllerCallback$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.support.v4.media.session.IMediaControllerCallback) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p6, android.os.Parcel p7, android.os.Parcel p8, int p9)
    {
        boolean v3 = 1;
        switch (p6) {
            case 1:
                int v2_0;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                int v0_10 = p7.readString();
                if (p7.readInt() == 0) {
                    v2_0 = 0;
                } else {
                    v2_0 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p7));
                }
                this.onEvent(v0_10, v2_0);
                break;
            case 2:
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                this.onSessionDestroyed();
                break;
            case 3:
                int v0_8;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                if (p7.readInt() == 0) {
                    v0_8 = 0;
                } else {
                    v0_8 = ((android.support.v4.media.session.PlaybackStateCompat) android.support.v4.media.session.PlaybackStateCompat.CREATOR.createFromParcel(p7));
                }
                this.onPlaybackStateChanged(v0_8);
                break;
            case 4:
                int v0_6;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                if (p7.readInt() == 0) {
                    v0_6 = 0;
                } else {
                    v0_6 = ((android.support.v4.media.MediaMetadataCompat) android.support.v4.media.MediaMetadataCompat.CREATOR.createFromParcel(p7));
                }
                this.onMetadataChanged(v0_6);
                break;
            case 5:
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                this.onQueueChanged(p7.createTypedArrayList(android.support.v4.media.session.MediaSessionCompat$QueueItem.CREATOR));
                break;
            case 6:
                int v0_4;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                if (p7.readInt() == 0) {
                    v0_4 = 0;
                } else {
                    v0_4 = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p7));
                }
                this.onQueueTitleChanged(v0_4);
                break;
            case 7:
                int v0_2;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                if (p7.readInt() == 0) {
                    v0_2 = 0;
                } else {
                    v0_2 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p7));
                }
                this.onExtrasChanged(v0_2);
                break;
            case 8:
                int v0_1;
                p7.enforceInterface("android.support.v4.media.session.IMediaControllerCallback");
                if (p7.readInt() == 0) {
                    v0_1 = 0;
                } else {
                    v0_1 = ((android.support.v4.media.session.ParcelableVolumeInfo) android.support.v4.media.session.ParcelableVolumeInfo.CREATOR.createFromParcel(p7));
                }
                this.onVolumeInfoChanged(v0_1);
                break;
            case 1598968902:
                p8.writeString("android.support.v4.media.session.IMediaControllerCallback");
                break;
            default:
                v3 = super.onTransact(p6, p7, p8, p9);
        }
        return v3;
    }
}
package android.support.v4.media.session;
 class IMediaSession$Stub$Proxy implements android.support.v4.media.session.IMediaSession {
    private android.os.IBinder mRemote;

    IMediaSession$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public void adjustVolume(int p6, int p7, String p8)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeInt(p6);
            v0.writeInt(p7);
            v0.writeString(p8);
            this.mRemote.transact(11, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public void fastForward()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(22, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public android.os.Bundle getExtras()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(31, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public long getFlags()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(9, v0, v1, 0);
            v1.readException();
            long v2 = v1.readLong();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v4_0) {
            v1.recycle();
            v0.recycle();
            throw v4_0;
        }
    }

    public String getInterfaceDescriptor()
    {
        return "android.support.v4.media.session.IMediaSession";
    }

    public android.app.PendingIntent getLaunchPendingIntent()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(8, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((android.app.PendingIntent) android.app.PendingIntent.CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public android.support.v4.media.MediaMetadataCompat getMetadata()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(27, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((android.support.v4.media.MediaMetadataCompat) android.support.v4.media.MediaMetadataCompat.CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public String getPackageName()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(6, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(28, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((android.support.v4.media.session.PlaybackStateCompat) android.support.v4.media.session.PlaybackStateCompat.CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public java.util.List getQueue()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(29, v0, v1, 0);
            v1.readException();
            java.util.ArrayList v2 = v1.createTypedArrayList(android.support.v4.media.session.MediaSessionCompat$QueueItem.CREATOR);
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
    }

    public CharSequence getQueueTitle()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(30, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((CharSequence) android.text.TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public int getRatingType()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(32, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public String getTag()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(7, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public android.support.v4.media.session.ParcelableVolumeInfo getVolumeAttributes()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v2_0;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(10, v0, v1, 0);
            v1.readException();
        } catch (android.os.Parcelable$Creator v3_2) {
            v1.recycle();
            v0.recycle();
            throw v3_2;
        }
        if (v1.readInt() == 0) {
            v2_0 = 0;
        } else {
            v2_0 = ((android.support.v4.media.session.ParcelableVolumeInfo) android.support.v4.media.session.ParcelableVolumeInfo.CREATOR.createFromParcel(v1));
        }
        v1.recycle();
        v0.recycle();
        return v2_0;
    }

    public boolean isTransportControlEnabled()
    {
        int v2 = 0;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(5, v0, v1, 0);
            v1.readException();
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (v1.readInt() != 0) {
            v2 = 1;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public void next()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(20, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void pause()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(18, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void play()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(13, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void playFromMediaId(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_2) {
            v1.recycle();
            v0.recycle();
            throw v2_2;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(14, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void playFromSearch(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_2) {
            v1.recycle();
            v0.recycle();
            throw v2_2;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(15, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void playFromUri(android.net.Uri p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (android.os.IBinder v2_4) {
            v1.recycle();
            v0.recycle();
            throw v2_4;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(16, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void prepare()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(33, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void prepareFromMediaId(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_2) {
            v1.recycle();
            v0.recycle();
            throw v2_2;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(34, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void prepareFromSearch(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_2) {
            v1.recycle();
            v0.recycle();
            throw v2_2;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(35, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void prepareFromUri(android.net.Uri p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (android.os.IBinder v2_4) {
            v1.recycle();
            v0.recycle();
            throw v2_4;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(36, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void previous()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(21, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void rate(android.support.v4.media.RatingCompat p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (android.os.IBinder v2_1) {
            v1.recycle();
            v0.recycle();
            throw v2_1;
        }
        if (p6 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p6.writeToParcel(v0, 0);
        }
        this.mRemote.transact(25, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            android.os.IBinder v2_3;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (android.os.IBinder v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
        if (p6 == null) {
            v2_3 = 0;
        } else {
            v2_3 = p6.asBinder();
        }
        v0.writeStrongBinder(v2_3);
        this.mRemote.transact(3, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void rewind()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(23, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void seekTo(long p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeLong(p6);
            this.mRemote.transact(24, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void sendCommand(String p6, android.os.Bundle p7, android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper p8)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_5) {
            v1.recycle();
            v0.recycle();
            throw v2_5;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(1, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void sendCustomAction(String p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeString(p6);
        } catch (android.os.IBinder v2_2) {
            v1.recycle();
            v0.recycle();
            throw v2_2;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(26, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public boolean sendMediaButton(android.view.KeyEvent p8)
    {
        Throwable v2 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (p8 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p8.writeToParcel(v0, 0);
        }
        this.mRemote.transact(2, v0, v1, 0);
        v1.readException();
        if (v1.readInt() == 0) {
            v2 = 0;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public void setVolumeTo(int p6, int p7, String p8)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeInt(p6);
            v0.writeInt(p7);
            v0.writeString(p8);
            this.mRemote.transact(12, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void skipToQueueItem(long p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            v0.writeLong(p6);
            this.mRemote.transact(17, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void stop()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
            this.mRemote.transact(19, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void unregisterCallbackListener(android.support.v4.media.session.IMediaControllerCallback p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            android.os.IBinder v2_3;
            v0.writeInterfaceToken("android.support.v4.media.session.IMediaSession");
        } catch (android.os.IBinder v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
        if (p6 == null) {
            v2_3 = 0;
        } else {
            v2_3 = p6.asBinder();
        }
        v0.writeStrongBinder(v2_3);
        this.mRemote.transact(4, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }
}
package android.support.v4.media.session;
public abstract class IMediaSession$Stub extends android.os.Binder implements android.support.v4.media.session.IMediaSession {
    private static final String DESCRIPTOR = "android.support.v4.media.session.IMediaSession";
    static final int TRANSACTION_adjustVolume = 11;
    static final int TRANSACTION_fastForward = 22;
    static final int TRANSACTION_getExtras = 31;
    static final int TRANSACTION_getFlags = 9;
    static final int TRANSACTION_getLaunchPendingIntent = 8;
    static final int TRANSACTION_getMetadata = 27;
    static final int TRANSACTION_getPackageName = 6;
    static final int TRANSACTION_getPlaybackState = 28;
    static final int TRANSACTION_getQueue = 29;
    static final int TRANSACTION_getQueueTitle = 30;
    static final int TRANSACTION_getRatingType = 32;
    static final int TRANSACTION_getTag = 7;
    static final int TRANSACTION_getVolumeAttributes = 10;
    static final int TRANSACTION_isTransportControlEnabled = 5;
    static final int TRANSACTION_next = 20;
    static final int TRANSACTION_pause = 18;
    static final int TRANSACTION_play = 13;
    static final int TRANSACTION_playFromMediaId = 14;
    static final int TRANSACTION_playFromSearch = 15;
    static final int TRANSACTION_playFromUri = 16;
    static final int TRANSACTION_prepare = 33;
    static final int TRANSACTION_prepareFromMediaId = 34;
    static final int TRANSACTION_prepareFromSearch = 35;
    static final int TRANSACTION_prepareFromUri = 36;
    static final int TRANSACTION_previous = 21;
    static final int TRANSACTION_rate = 25;
    static final int TRANSACTION_registerCallbackListener = 3;
    static final int TRANSACTION_rewind = 23;
    static final int TRANSACTION_seekTo = 24;
    static final int TRANSACTION_sendCommand = 1;
    static final int TRANSACTION_sendCustomAction = 26;
    static final int TRANSACTION_sendMediaButton = 2;
    static final int TRANSACTION_setVolumeTo = 12;
    static final int TRANSACTION_skipToQueueItem = 17;
    static final int TRANSACTION_stop = 19;
    static final int TRANSACTION_unregisterCallbackListener = 4;

    public IMediaSession$Stub()
    {
        this.attachInterface(this, "android.support.v4.media.session.IMediaSession");
        return;
    }

    public static android.support.v4.media.session.IMediaSession asInterface(android.os.IBinder p2)
    {
        android.support.v4.media.session.IMediaSession v0_0;
        if (p2 != null) {
            android.support.v4.media.session.IMediaSession v0_1 = p2.queryLocalInterface("android.support.v4.media.session.IMediaSession");
            if ((v0_1 == null) || (!(v0_1 instanceof android.support.v4.media.session.IMediaSession))) {
                v0_0 = new android.support.v4.media.session.IMediaSession$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.support.v4.media.session.IMediaSession) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p11, android.os.Parcel p12, android.os.Parcel p13, int p14)
    {
        android.os.Parcelable$Creator v7_0 = 0;
        boolean v8 = 1;
        switch (p11) {
            case 1:
                int v2_13;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_18 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_13 = 0;
                } else {
                    v2_13 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                int v3_2;
                if (p12.readInt() == 0) {
                    v3_2 = 0;
                } else {
                    v3_2 = ((android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper) android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper.CREATOR.createFromParcel(p12));
                }
                this.sendCommand(v0_18, v2_13, v3_2);
                p13.writeNoException();
                break;
            case 2:
                int v0_16;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                if (p12.readInt() == 0) {
                    v0_16 = 0;
                } else {
                    v0_16 = ((android.view.KeyEvent) android.view.KeyEvent.CREATOR.createFromParcel(p12));
                }
                boolean v4_6 = this.sendMediaButton(v0_16);
                p13.writeNoException();
                if (v4_6) {
                    v7_0 = 1;
                }
                p13.writeInt(v7_0);
                break;
            case 3:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback$Stub.asInterface(p12.readStrongBinder()));
                p13.writeNoException();
                break;
            case 4:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.unregisterCallbackListener(android.support.v4.media.session.IMediaControllerCallback$Stub.asInterface(p12.readStrongBinder()));
                p13.writeNoException();
                break;
            case 5:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_5 = this.isTransportControlEnabled();
                p13.writeNoException();
                if (v4_5) {
                    v7_0 = 1;
                }
                p13.writeInt(v7_0);
                break;
            case 6:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_4 = this.getPackageName();
                p13.writeNoException();
                p13.writeString(v4_4);
                break;
            case 7:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_3 = this.getTag();
                p13.writeNoException();
                p13.writeString(v4_3);
                break;
            case 8:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_2 = this.getLaunchPendingIntent();
                p13.writeNoException();
                if (!v4_2) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    v4_2.writeToParcel(p13, 1);
                }
                break;
            case 9:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_1 = this.getFlags();
                p13.writeNoException();
                p13.writeLong(v4_1);
                break;
            case 10:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_0 = this.getVolumeAttributes();
                p13.writeNoException();
                if (!v4_0) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    v4_0.writeToParcel(p13, 1);
                }
                break;
            case 11:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.adjustVolume(p12.readInt(), p12.readInt(), p12.readString());
                p13.writeNoException();
                break;
            case 12:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.setVolumeTo(p12.readInt(), p12.readInt(), p12.readString());
                p13.writeNoException();
                break;
            case 13:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.play();
                p13.writeNoException();
                break;
            case 14:
                int v2_7;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_10 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_7 = 0;
                } else {
                    v2_7 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.playFromMediaId(v0_10, v2_7);
                p13.writeNoException();
                break;
            case 15:
                int v2_5;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_9 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_5 = 0;
                } else {
                    v2_5 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.playFromSearch(v0_9, v2_5);
                p13.writeNoException();
                break;
            case 16:
                int v0_7;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                if (p12.readInt() == 0) {
                    v0_7 = 0;
                } else {
                    v0_7 = ((android.net.Uri) android.net.Uri.CREATOR.createFromParcel(p12));
                }
                int v2_3;
                if (p12.readInt() == 0) {
                    v2_3 = 0;
                } else {
                    v2_3 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.playFromUri(v0_7, v2_3);
                p13.writeNoException();
                break;
            case 17:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.skipToQueueItem(p12.readLong());
                p13.writeNoException();
                break;
            case 18:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.pause();
                p13.writeNoException();
                break;
            case 19:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.stop();
                p13.writeNoException();
                break;
            case 20:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.next();
                p13.writeNoException();
                break;
            case 21:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.previous();
                p13.writeNoException();
                break;
            case 22:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.fastForward();
                p13.writeNoException();
                break;
            case 23:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.rewind();
                p13.writeNoException();
                break;
            case 24:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.seekTo(p12.readLong());
                p13.writeNoException();
                break;
            case 25:
                int v0_2;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                if (p12.readInt() == 0) {
                    v0_2 = 0;
                } else {
                    v0_2 = ((android.support.v4.media.RatingCompat) android.support.v4.media.RatingCompat.CREATOR.createFromParcel(p12));
                }
                this.rate(v0_2);
                p13.writeNoException();
                break;
            case 26:
                int v2_0;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_1 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_0 = 0;
                } else {
                    v2_0 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.sendCustomAction(v0_1, v2_0);
                p13.writeNoException();
                break;
            case 27:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_11 = this.getMetadata();
                p13.writeNoException();
                if (!v4_11) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    v4_11.writeToParcel(p13, 1);
                }
                break;
            case 28:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_10 = this.getPlaybackState();
                p13.writeNoException();
                if (!v4_10) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    v4_10.writeToParcel(p13, 1);
                }
                break;
            case 29:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                java.util.List v6 = this.getQueue();
                p13.writeNoException();
                p13.writeTypedList(v6);
                break;
            case 30:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_9 = this.getQueueTitle();
                p13.writeNoException();
                if (!v4_9) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    android.text.TextUtils.writeToParcel(v4_9, p13, 1);
                }
                break;
            case 31:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_8 = this.getExtras();
                p13.writeNoException();
                if (!v4_8) {
                    p13.writeInt(0);
                } else {
                    p13.writeInt(1);
                    v4_8.writeToParcel(p13, 1);
                }
                break;
            case 32:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                boolean v4_7 = this.getRatingType();
                p13.writeNoException();
                p13.writeInt(v4_7);
                break;
            case 33:
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                this.prepare();
                p13.writeNoException();
                break;
            case 34:
                int v2_16;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_19 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_16 = 0;
                } else {
                    v2_16 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.prepareFromMediaId(v0_19, v2_16);
                p13.writeNoException();
                break;
            case 35:
                int v2_12;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                int v0_13 = p12.readString();
                if (p12.readInt() == 0) {
                    v2_12 = 0;
                } else {
                    v2_12 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.prepareFromSearch(v0_13, v2_12);
                p13.writeNoException();
                break;
            case 36:
                int v0_0;
                p12.enforceInterface("android.support.v4.media.session.IMediaSession");
                if (p12.readInt() == 0) {
                    v0_0 = 0;
                } else {
                    v0_0 = ((android.net.Uri) android.net.Uri.CREATOR.createFromParcel(p12));
                }
                int v2_2;
                if (p12.readInt() == 0) {
                    v2_2 = 0;
                } else {
                    v2_2 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p12));
                }
                this.prepareFromUri(v0_0, v2_2);
                p13.writeNoException();
                break;
            case 1598968902:
                p13.writeString("android.support.v4.media.session.IMediaSession");
                break;
            default:
                v8 = super.onTransact(p11, p12, p13, p14);
        }
        return v8;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$Callback$StubApi21 implements android.support.v4.media.session.MediaControllerCompatApi21$Callback {
    final synthetic android.support.v4.media.session.MediaControllerCompat$Callback this$0;

    MediaControllerCompat$Callback$StubApi21(android.support.v4.media.session.MediaControllerCompat$Callback p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAudioInfoChanged(int p8, int p9, int p10, int p11, int p12)
    {
        this.this$0.onAudioInfoChanged(new android.support.v4.media.session.MediaControllerCompat$PlaybackInfo(p8, p9, p10, p11, p12));
        return;
    }

    public void onExtrasChanged(android.os.Bundle p2)
    {
        this.this$0.onExtrasChanged(p2);
        return;
    }

    public void onMetadataChanged(Object p3)
    {
        this.this$0.onMetadataChanged(android.support.v4.media.MediaMetadataCompat.fromMediaMetadata(p3));
        return;
    }

    public void onPlaybackStateChanged(Object p3)
    {
        this.this$0.onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat.fromPlaybackState(p3));
        return;
    }

    public void onQueueChanged(java.util.List p3)
    {
        this.this$0.onQueueChanged(android.support.v4.media.session.MediaSessionCompat$QueueItem.fromQueueItemList(p3));
        return;
    }

    public void onQueueTitleChanged(CharSequence p2)
    {
        this.this$0.onQueueTitleChanged(p2);
        return;
    }

    public void onSessionDestroyed()
    {
        this.this$0.onSessionDestroyed();
        return;
    }

    public void onSessionEvent(String p2, android.os.Bundle p3)
    {
        this.this$0.onSessionEvent(p2, p3);
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$MediaControllerImplApi21 implements android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl {
    protected final Object mControllerObj;

    public MediaControllerCompat$MediaControllerImplApi21(android.content.Context p2, android.support.v4.media.session.MediaSessionCompat$Token p3)
    {
        this.mControllerObj = android.support.v4.media.session.MediaControllerCompatApi21.fromToken(p2, p3.getToken());
        if (this.mControllerObj != null) {
            return;
        } else {
            throw new android.os.RemoteException();
        }
    }

    public MediaControllerCompat$MediaControllerImplApi21(android.content.Context p2, android.support.v4.media.session.MediaSessionCompat p3)
    {
        this.mControllerObj = android.support.v4.media.session.MediaControllerCompatApi21.fromToken(p2, p3.getSessionToken().getToken());
        return;
    }

    public void adjustVolume(int p2, int p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21.adjustVolume(this.mControllerObj, p2, p3);
        return;
    }

    public boolean dispatchMediaButtonEvent(android.view.KeyEvent p2)
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.dispatchMediaButtonEvent(this.mControllerObj, p2);
    }

    public android.os.Bundle getExtras()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getExtras(this.mControllerObj);
    }

    public long getFlags()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getFlags(this.mControllerObj);
    }

    public Object getMediaController()
    {
        return this.mControllerObj;
    }

    public android.support.v4.media.MediaMetadataCompat getMetadata()
    {
        int v1_1;
        Object v0 = android.support.v4.media.session.MediaControllerCompatApi21.getMetadata(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = android.support.v4.media.MediaMetadataCompat.fromMediaMetadata(v0);
        }
        return v1_1;
    }

    public String getPackageName()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getPackageName(this.mControllerObj);
    }

    public android.support.v4.media.session.MediaControllerCompat$PlaybackInfo getPlaybackInfo()
    {
        int v0_1;
        Object v6 = android.support.v4.media.session.MediaControllerCompatApi21.getPlaybackInfo(this.mControllerObj);
        if (v6 == null) {
            v0_1 = 0;
        } else {
            v0_1 = new android.support.v4.media.session.MediaControllerCompat$PlaybackInfo(android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getPlaybackType(v6), android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getLegacyAudioStream(v6), android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getVolumeControl(v6), android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getMaxVolume(v6), android.support.v4.media.session.MediaControllerCompatApi21$PlaybackInfo.getCurrentVolume(v6));
        }
        return v0_1;
    }

    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    {
        int v1_1;
        Object v0 = android.support.v4.media.session.MediaControllerCompatApi21.getPlaybackState(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = android.support.v4.media.session.PlaybackStateCompat.fromPlaybackState(v0);
        }
        return v1_1;
    }

    public java.util.List getQueue()
    {
        int v1_1;
        java.util.List v0 = android.support.v4.media.session.MediaControllerCompatApi21.getQueue(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = android.support.v4.media.session.MediaSessionCompat$QueueItem.fromQueueItemList(v0);
        }
        return v1_1;
    }

    public CharSequence getQueueTitle()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getQueueTitle(this.mControllerObj);
    }

    public int getRatingType()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getRatingType(this.mControllerObj);
    }

    public android.app.PendingIntent getSessionActivity()
    {
        return android.support.v4.media.session.MediaControllerCompatApi21.getSessionActivity(this.mControllerObj);
    }

    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    {
        int v1_1;
        Object v0 = android.support.v4.media.session.MediaControllerCompatApi21.getTransportControls(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.media.session.MediaControllerCompat$TransportControlsApi21(v0);
        }
        return v1_1;
    }

    public void registerCallback(android.support.v4.media.session.MediaControllerCompat$Callback p3, android.os.Handler p4)
    {
        android.support.v4.media.session.MediaControllerCompatApi21.registerCallback(this.mControllerObj, android.support.v4.media.session.MediaControllerCompat$Callback.access$000(p3), p4);
        return;
    }

    public void sendCommand(String p2, android.os.Bundle p3, android.os.ResultReceiver p4)
    {
        android.support.v4.media.session.MediaControllerCompatApi21.sendCommand(this.mControllerObj, p2, p3, p4);
        return;
    }

    public void setVolumeTo(int p2, int p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21.setVolumeTo(this.mControllerObj, p2, p3);
        return;
    }

    public void unregisterCallback(android.support.v4.media.session.MediaControllerCompat$Callback p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21.unregisterCallback(this.mControllerObj, android.support.v4.media.session.MediaControllerCompat$Callback.access$000(p3));
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$MediaControllerImplBase implements android.support.v4.media.session.MediaControllerCompat$MediaControllerImpl {
    private android.support.v4.media.session.IMediaSession mBinder;
    private android.support.v4.media.session.MediaSessionCompat$Token mToken;
    private android.support.v4.media.session.MediaControllerCompat$TransportControls mTransportControls;

    public MediaControllerCompat$MediaControllerImplBase(android.support.v4.media.session.MediaSessionCompat$Token p2)
    {
        this.mToken = p2;
        this.mBinder = android.support.v4.media.session.IMediaSession$Stub.asInterface(((android.os.IBinder) p2.getToken()));
        return;
    }

    public void adjustVolume(int p5, int p6)
    {
        try {
            this.mBinder.adjustVolume(p5, p6, 0);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in adjustVolume. ").append(v0).toString());
        }
        return;
    }

    public boolean dispatchMediaButtonEvent(android.view.KeyEvent p5)
    {
        if (p5 != null) {
            try {
                this.mBinder.sendMediaButton(p5);
            } catch (android.os.RemoteException v0) {
                android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in dispatchMediaButtonEvent. ").append(v0).toString());
            }
            return 0;
        } else {
            throw new IllegalArgumentException("event may not be null.");
        }
    }

    public android.os.Bundle getExtras()
    {
        try {
            int v1_1 = this.mBinder.getExtras();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getExtras. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public long getFlags()
    {
        try {
            long v2_2 = this.mBinder.getFlags();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getFlags. ").append(v0).toString());
            v2_2 = 0;
        }
        return v2_2;
    }

    public Object getMediaController()
    {
        return 0;
    }

    public android.support.v4.media.MediaMetadataCompat getMetadata()
    {
        try {
            int v1_1 = this.mBinder.getMetadata();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getMetadata. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public String getPackageName()
    {
        try {
            int v1_1 = this.mBinder.getPackageName();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getPackageName. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public android.support.v4.media.session.MediaControllerCompat$PlaybackInfo getPlaybackInfo()
    {
        try {
            android.support.v4.media.session.ParcelableVolumeInfo v7 = this.mBinder.getVolumeAttributes();
            int v0_0 = new android.support.v4.media.session.MediaControllerCompat$PlaybackInfo(v7.volumeType, v7.audioStream, v7.controlType, v7.maxVolume, v7.currentVolume);
        } catch (android.os.RemoteException v6) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getPlaybackInfo. ").append(v6).toString());
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    {
        try {
            int v1_1 = this.mBinder.getPlaybackState();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getPlaybackState. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public java.util.List getQueue()
    {
        try {
            int v1_1 = this.mBinder.getQueue();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getQueue. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public CharSequence getQueueTitle()
    {
        try {
            int v1_1 = this.mBinder.getQueueTitle();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getQueueTitle. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public int getRatingType()
    {
        try {
            int v1_1 = this.mBinder.getRatingType();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getRatingType. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public android.app.PendingIntent getSessionActivity()
    {
        try {
            int v1_1 = this.mBinder.getLaunchPendingIntent();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in getSessionActivity. ").append(v0).toString());
            v1_1 = 0;
        }
        return v1_1;
    }

    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    {
        if (this.mTransportControls == null) {
            this.mTransportControls = new android.support.v4.media.session.MediaControllerCompat$TransportControlsBase(this.mBinder);
        }
        return this.mTransportControls;
    }

    public void registerCallback(android.support.v4.media.session.MediaControllerCompat$Callback p5, android.os.Handler p6)
    {
        if (p5 != null) {
            try {
                this.mBinder.asBinder().linkToDeath(p5, 0);
                this.mBinder.registerCallbackListener(((android.support.v4.media.session.IMediaControllerCallback) android.support.v4.media.session.MediaControllerCompat$Callback.access$000(p5)));
                android.support.v4.media.session.MediaControllerCompat$Callback.access$100(p5, p6);
                p5.mRegistered = 1;
            } catch (android.os.RemoteException v0) {
                android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in registerCallback. ").append(v0).toString());
                p5.onSessionDestroyed();
            }
            return;
        } else {
            throw new IllegalArgumentException("callback may not be null.");
        }
    }

    public void sendCommand(String p5, android.os.Bundle p6, android.os.ResultReceiver p7)
    {
        try {
            this.mBinder.sendCommand(p5, p6, new android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper(p7));
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in sendCommand. ").append(v0).toString());
        }
        return;
    }

    public void setVolumeTo(int p5, int p6)
    {
        try {
            this.mBinder.setVolumeTo(p5, p6, 0);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in setVolumeTo. ").append(v0).toString());
        }
        return;
    }

    public void unregisterCallback(android.support.v4.media.session.MediaControllerCompat$Callback p5)
    {
        if (p5 != null) {
            try {
                this.mBinder.unregisterCallbackListener(((android.support.v4.media.session.IMediaControllerCallback) android.support.v4.media.session.MediaControllerCompat$Callback.access$000(p5)));
                this.mBinder.asBinder().unlinkToDeath(p5, 0);
                p5.mRegistered = 0;
            } catch (android.os.RemoteException v0) {
                android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in unregisterCallback. ").append(v0).toString());
            }
            return;
        } else {
            throw new IllegalArgumentException("callback may not be null.");
        }
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$TransportControlsApi21 extends android.support.v4.media.session.MediaControllerCompat$TransportControls {
    protected final Object mControlsObj;

    public MediaControllerCompat$TransportControlsApi21(Object p1)
    {
        this.mControlsObj = p1;
        return;
    }

    public void fastForward()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.fastForward(this.mControlsObj);
        return;
    }

    public void pause()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.pause(this.mControlsObj);
        return;
    }

    public void play()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.play(this.mControlsObj);
        return;
    }

    public void playFromMediaId(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.playFromMediaId(this.mControlsObj, p2, p3);
        return;
    }

    public void playFromSearch(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.playFromSearch(this.mControlsObj, p2, p3);
        return;
    }

    public void playFromUri(android.net.Uri p4, android.os.Bundle p5)
    {
        if ((p4 != null) && (!android.net.Uri.EMPTY.equals(p4))) {
            android.os.Bundle v0_1 = new android.os.Bundle();
            v0_1.putParcelable("android.support.v4.media.session.action.ARGUMENT_URI", p4);
            v0_1.putParcelable("android.support.v4.media.session.action.ARGUMENT_EXTRAS", p5);
            this.sendCustomAction("android.support.v4.media.session.action.PLAY_FROM_URI", v0_1);
            return;
        } else {
            throw new IllegalArgumentException("You must specify a non-empty Uri for playFromUri.");
        }
    }

    public void prepare()
    {
        this.sendCustomAction("android.support.v4.media.session.action.PREPARE", 0);
        return;
    }

    public void prepareFromMediaId(String p3, android.os.Bundle p4)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("android.support.v4.media.session.action.ARGUMENT_MEDIA_ID", p3);
        v0_1.putBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS", p4);
        this.sendCustomAction("android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID", v0_1);
        return;
    }

    public void prepareFromSearch(String p3, android.os.Bundle p4)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putString("android.support.v4.media.session.action.ARGUMENT_QUERY", p3);
        v0_1.putBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS", p4);
        this.sendCustomAction("android.support.v4.media.session.action.PREPARE_FROM_SEARCH", v0_1);
        return;
    }

    public void prepareFromUri(android.net.Uri p3, android.os.Bundle p4)
    {
        android.os.Bundle v0_1 = new android.os.Bundle();
        v0_1.putParcelable("android.support.v4.media.session.action.ARGUMENT_URI", p3);
        v0_1.putBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS", p4);
        this.sendCustomAction("android.support.v4.media.session.action.PREPARE_FROM_URI", v0_1);
        return;
    }

    public void rewind()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.rewind(this.mControlsObj);
        return;
    }

    public void seekTo(long p2)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.seekTo(this.mControlsObj, p2);
        return;
    }

    public void sendCustomAction(android.support.v4.media.session.PlaybackStateCompat$CustomAction p3, android.os.Bundle p4)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.sendCustomAction(this.mControlsObj, p3.getAction(), p4);
        return;
    }

    public void sendCustomAction(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.sendCustomAction(this.mControlsObj, p2, p3);
        return;
    }

    public void setRating(android.support.v4.media.RatingCompat p3)
    {
        int v0;
        Object v1 = this.mControlsObj;
        if (p3 == null) {
            v0 = 0;
        } else {
            v0 = p3.getRating();
        }
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.setRating(v1, v0);
        return;
    }

    public void skipToNext()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.skipToNext(this.mControlsObj);
        return;
    }

    public void skipToPrevious()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.skipToPrevious(this.mControlsObj);
        return;
    }

    public void skipToQueueItem(long p2)
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.skipToQueueItem(this.mControlsObj, p2);
        return;
    }

    public void stop()
    {
        android.support.v4.media.session.MediaControllerCompatApi21$TransportControls.stop(this.mControlsObj);
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$TransportControlsBase extends android.support.v4.media.session.MediaControllerCompat$TransportControls {
    private android.support.v4.media.session.IMediaSession mBinder;

    public MediaControllerCompat$TransportControlsBase(android.support.v4.media.session.IMediaSession p1)
    {
        this.mBinder = p1;
        return;
    }

    public void fastForward()
    {
        try {
            this.mBinder.fastForward();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in fastForward. ").append(v0).toString());
        }
        return;
    }

    public void pause()
    {
        try {
            this.mBinder.pause();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in pause. ").append(v0).toString());
        }
        return;
    }

    public void play()
    {
        try {
            this.mBinder.play();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in play. ").append(v0).toString());
        }
        return;
    }

    public void playFromMediaId(String p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.playFromMediaId(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in playFromMediaId. ").append(v0).toString());
        }
        return;
    }

    public void playFromSearch(String p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.playFromSearch(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in playFromSearch. ").append(v0).toString());
        }
        return;
    }

    public void playFromUri(android.net.Uri p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.playFromUri(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in playFromUri. ").append(v0).toString());
        }
        return;
    }

    public void prepare()
    {
        try {
            this.mBinder.prepare();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in prepare. ").append(v0).toString());
        }
        return;
    }

    public void prepareFromMediaId(String p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.prepareFromMediaId(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in prepareFromMediaId. ").append(v0).toString());
        }
        return;
    }

    public void prepareFromSearch(String p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.prepareFromSearch(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in prepareFromSearch. ").append(v0).toString());
        }
        return;
    }

    public void prepareFromUri(android.net.Uri p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.prepareFromUri(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in prepareFromUri. ").append(v0).toString());
        }
        return;
    }

    public void rewind()
    {
        try {
            this.mBinder.rewind();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in rewind. ").append(v0).toString());
        }
        return;
    }

    public void seekTo(long p6)
    {
        try {
            this.mBinder.seekTo(p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in seekTo. ").append(v0).toString());
        }
        return;
    }

    public void sendCustomAction(android.support.v4.media.session.PlaybackStateCompat$CustomAction p2, android.os.Bundle p3)
    {
        this.sendCustomAction(p2.getAction(), p3);
        return;
    }

    public void sendCustomAction(String p5, android.os.Bundle p6)
    {
        try {
            this.mBinder.sendCustomAction(p5, p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in sendCustomAction. ").append(v0).toString());
        }
        return;
    }

    public void setRating(android.support.v4.media.RatingCompat p5)
    {
        try {
            this.mBinder.rate(p5);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in setRating. ").append(v0).toString());
        }
        return;
    }

    public void skipToNext()
    {
        try {
            this.mBinder.next();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in skipToNext. ").append(v0).toString());
        }
        return;
    }

    public void skipToPrevious()
    {
        try {
            this.mBinder.previous();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in skipToPrevious. ").append(v0).toString());
        }
        return;
    }

    public void skipToQueueItem(long p6)
    {
        try {
            this.mBinder.skipToQueueItem(p6);
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in skipToQueueItem. ").append(v0).toString());
        }
        return;
    }

    public void stop()
    {
        try {
            this.mBinder.stop();
        } catch (android.os.RemoteException v0) {
            android.util.Log.e("MediaControllerCompat", new StringBuilder().append("Dead object in stop. ").append(v0).toString());
        }
        return;
    }
}
package android.support.v4.media.session;
public class MediaControllerCompatApi23$TransportControls extends android.support.v4.media.session.MediaControllerCompatApi21$TransportControls {

    public MediaControllerCompatApi23$TransportControls()
    {
        return;
    }

    public static void playFromUri(Object p0, android.net.Uri p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).playFromUri(p1, p2);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplApi21 implements android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl {
    private android.app.PendingIntent mMediaButtonIntent;
    private final Object mSessionObj;
    private final android.support.v4.media.session.MediaSessionCompat$Token mToken;

    public MediaSessionCompat$MediaSessionImplApi21(android.content.Context p3, String p4)
    {
        this.mSessionObj = android.support.v4.media.session.MediaSessionCompatApi21.createSession(p3, p4);
        this.mToken = new android.support.v4.media.session.MediaSessionCompat$Token(android.support.v4.media.session.MediaSessionCompatApi21.getSessionToken(this.mSessionObj));
        return;
    }

    public MediaSessionCompat$MediaSessionImplApi21(Object p3)
    {
        this.mSessionObj = android.support.v4.media.session.MediaSessionCompatApi21.verifySession(p3);
        this.mToken = new android.support.v4.media.session.MediaSessionCompat$Token(android.support.v4.media.session.MediaSessionCompatApi21.getSessionToken(this.mSessionObj));
        return;
    }

    public String getCallingPackage()
    {
        String v0_2;
        if (android.os.Build$VERSION.SDK_INT >= 24) {
            v0_2 = android.support.v4.media.session.MediaSessionCompatApi24.getCallingPackage(this.mSessionObj);
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    public Object getMediaSession()
    {
        return this.mSessionObj;
    }

    public Object getRemoteControlClient()
    {
        return 0;
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mToken;
    }

    public boolean isActive()
    {
        return android.support.v4.media.session.MediaSessionCompatApi21.isActive(this.mSessionObj);
    }

    public void release()
    {
        android.support.v4.media.session.MediaSessionCompatApi21.release(this.mSessionObj);
        return;
    }

    public void sendSessionEvent(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.sendSessionEvent(this.mSessionObj, p2, p3);
        return;
    }

    public void setActive(boolean p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setActive(this.mSessionObj, p2);
        return;
    }

    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback p3, android.os.Handler p4)
    {
        Object v0;
        if (p3 != null) {
            v0 = p3.mCallbackObj;
        } else {
            v0 = 0;
        }
        android.support.v4.media.session.MediaSessionCompatApi21.setCallback(this.mSessionObj, v0, p4);
        return;
    }

    public void setExtras(android.os.Bundle p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setExtras(this.mSessionObj, p2);
        return;
    }

    public void setFlags(int p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setFlags(this.mSessionObj, p2);
        return;
    }

    public void setMediaButtonReceiver(android.app.PendingIntent p2)
    {
        this.mMediaButtonIntent = p2;
        android.support.v4.media.session.MediaSessionCompatApi21.setMediaButtonReceiver(this.mSessionObj, p2);
        return;
    }

    public void setMetadata(android.support.v4.media.MediaMetadataCompat p3)
    {
        Object v0;
        Object v1 = this.mSessionObj;
        if (p3 != null) {
            v0 = p3.getMediaMetadata();
        } else {
            v0 = 0;
        }
        android.support.v4.media.session.MediaSessionCompatApi21.setMetadata(v1, v0);
        return;
    }

    public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat p3)
    {
        Object v0;
        Object v1 = this.mSessionObj;
        if (p3 != null) {
            v0 = p3.getPlaybackState();
        } else {
            v0 = 0;
        }
        android.support.v4.media.session.MediaSessionCompatApi21.setPlaybackState(v1, v0);
        return;
    }

    public void setPlaybackToLocal(int p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setPlaybackToLocal(this.mSessionObj, p2);
        return;
    }

    public void setPlaybackToRemote(android.support.v4.media.VolumeProviderCompat p3)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setPlaybackToRemote(this.mSessionObj, p3.getVolumeProvider());
        return;
    }

    public void setQueue(java.util.List p5)
    {
        java.util.ArrayList v1_0 = 0;
        if (p5 != null) {
            v1_0 = new java.util.ArrayList();
            Object v2_0 = p5.iterator();
            while (v2_0.hasNext()) {
                v1_0.add(((android.support.v4.media.session.MediaSessionCompat$QueueItem) v2_0.next()).getQueueItem());
            }
        }
        android.support.v4.media.session.MediaSessionCompatApi21.setQueue(this.mSessionObj, v1_0);
        return;
    }

    public void setQueueTitle(CharSequence p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setQueueTitle(this.mSessionObj, p2);
        return;
    }

    public void setRatingType(int p3)
    {
        if (android.os.Build$VERSION.SDK_INT >= 22) {
            android.support.v4.media.session.MediaSessionCompatApi22.setRatingType(this.mSessionObj, p3);
        }
        return;
    }

    public void setSessionActivity(android.app.PendingIntent p2)
    {
        android.support.v4.media.session.MediaSessionCompatApi21.setSessionActivity(this.mSessionObj, p2);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplBase$1 extends android.support.v4.media.VolumeProviderCompat$Callback {
    final synthetic android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase this$0;

    MediaSessionCompat$MediaSessionImplBase$1(android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onVolumeChanged(android.support.v4.media.VolumeProviderCompat p7)
    {
        if (this.this$0.mVolumeProvider == p7) {
            this.this$0.sendVolumeInfoChanged(new android.support.v4.media.session.ParcelableVolumeInfo(this.this$0.mVolumeType, this.this$0.mLocalStream, p7.getVolumeControl(), p7.getMaxVolume(), p7.getCurrentVolume()));
        }
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplBase implements android.support.v4.media.session.MediaSessionCompat$MediaSessionImpl {
    final android.media.AudioManager mAudioManager;
    volatile android.support.v4.media.session.MediaSessionCompat$Callback mCallback;
    private final android.content.Context mContext;
    final android.os.RemoteCallbackList mControllerCallbacks;
    boolean mDestroyed;
    android.os.Bundle mExtras;
    int mFlags;
    private android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MessageHandler mHandler;
    private boolean mIsActive;
    private boolean mIsMbrRegistered;
    private boolean mIsRccRegistered;
    int mLocalStream;
    final Object mLock;
    private final android.content.ComponentName mMediaButtonReceiverComponentName;
    private final android.app.PendingIntent mMediaButtonReceiverIntent;
    android.support.v4.media.MediaMetadataCompat mMetadata;
    final String mPackageName;
    java.util.List mQueue;
    CharSequence mQueueTitle;
    int mRatingType;
    private final Object mRccObj;
    android.app.PendingIntent mSessionActivity;
    android.support.v4.media.session.PlaybackStateCompat mState;
    private final android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MediaSessionStub mStub;
    final String mTag;
    private final android.support.v4.media.session.MediaSessionCompat$Token mToken;
    private android.support.v4.media.VolumeProviderCompat$Callback mVolumeCallback;
    android.support.v4.media.VolumeProviderCompat mVolumeProvider;
    int mVolumeType;

    public MediaSessionCompat$MediaSessionImplBase(android.content.Context p5, String p6, android.content.ComponentName p7, android.app.PendingIntent p8)
    {
        this.mLock = new Object();
        this.mControllerCallbacks = new android.os.RemoteCallbackList();
        this.mDestroyed = 0;
        this.mIsActive = 0;
        this.mIsRccRegistered = 0;
        this.mIsMbrRegistered = 0;
        this.mVolumeCallback = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$1(this);
        if (p7 == null) {
            p7 = android.support.v4.media.session.MediaButtonReceiver.getMediaButtonReceiverComponent(p5);
            if (p7 == null) {
                android.util.Log.w("MediaSessionCompat", "Couldn\'t find a unique registered media button receiver in the given context.");
            }
        }
        if ((p7 != null) && (p8 == null)) {
            android.content.Intent v0_1 = new android.content.Intent("android.intent.action.MEDIA_BUTTON");
            v0_1.setComponent(p7);
            p8 = android.app.PendingIntent.getBroadcast(p5, 0, v0_1, 0);
        }
        if (p7 != null) {
            this.mContext = p5;
            this.mPackageName = p5.getPackageName();
            this.mAudioManager = ((android.media.AudioManager) p5.getSystemService("audio"));
            this.mTag = p6;
            this.mMediaButtonReceiverComponentName = p7;
            this.mMediaButtonReceiverIntent = p8;
            this.mStub = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MediaSessionStub(this);
            this.mToken = new android.support.v4.media.session.MediaSessionCompat$Token(this.mStub);
            this.mRatingType = 0;
            this.mVolumeType = 1;
            this.mLocalStream = 3;
            if (android.os.Build$VERSION.SDK_INT < 14) {
                this.mRccObj = 0;
            } else {
                this.mRccObj = android.support.v4.media.session.MediaSessionCompatApi14.createRemoteControlClient(p8);
            }
            return;
        } else {
            throw new IllegalArgumentException("MediaButtonReceiver component may not be null.");
        }
    }

    private void sendEvent(String p5, android.os.Bundle p6)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onEvent(p5, p6);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private void sendExtras(android.os.Bundle p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onExtrasChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private void sendMetadata(android.support.v4.media.MediaMetadataCompat p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onMetadataChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private void sendQueue(java.util.List p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onQueueChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private void sendQueueTitle(CharSequence p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onQueueTitleChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private void sendSessionDestroyed()
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onSessionDestroyed();
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        this.mControllerCallbacks.kill();
        return;
    }

    private void sendState(android.support.v4.media.session.PlaybackStateCompat p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onPlaybackStateChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    private boolean update()
    {
        int v1 = 0;
        if (!this.mIsActive) {
            if (this.mIsMbrRegistered) {
                if (android.os.Build$VERSION.SDK_INT < 18) {
                    ((android.media.AudioManager) this.mContext.getSystemService("audio")).unregisterMediaButtonEventReceiver(this.mMediaButtonReceiverComponentName);
                } else {
                    android.support.v4.media.session.MediaSessionCompatApi18.unregisterMediaButtonEventReceiver(this.mContext, this.mMediaButtonReceiverIntent, this.mMediaButtonReceiverComponentName);
                }
                this.mIsMbrRegistered = 0;
            }
            if (this.mIsRccRegistered) {
                android.support.v4.media.session.MediaSessionCompatApi14.setState(this.mRccObj, 0);
                android.support.v4.media.session.MediaSessionCompatApi14.unregisterRemoteControlClient(this.mContext, this.mRccObj);
                this.mIsRccRegistered = 0;
            }
        } else {
            if ((this.mIsMbrRegistered) || ((this.mFlags & 1) == 0)) {
                if ((this.mIsMbrRegistered) && ((this.mFlags & 1) == 0)) {
                    if (android.os.Build$VERSION.SDK_INT < 18) {
                        ((android.media.AudioManager) this.mContext.getSystemService("audio")).unregisterMediaButtonEventReceiver(this.mMediaButtonReceiverComponentName);
                    } else {
                        android.support.v4.media.session.MediaSessionCompatApi18.unregisterMediaButtonEventReceiver(this.mContext, this.mMediaButtonReceiverIntent, this.mMediaButtonReceiverComponentName);
                    }
                    this.mIsMbrRegistered = 0;
                }
            } else {
                if (android.os.Build$VERSION.SDK_INT < 18) {
                    ((android.media.AudioManager) this.mContext.getSystemService("audio")).registerMediaButtonEventReceiver(this.mMediaButtonReceiverComponentName);
                } else {
                    android.support.v4.media.session.MediaSessionCompatApi18.registerMediaButtonEventReceiver(this.mContext, this.mMediaButtonReceiverIntent, this.mMediaButtonReceiverComponentName);
                }
                this.mIsMbrRegistered = 1;
            }
            if (android.os.Build$VERSION.SDK_INT >= 14) {
                if ((this.mIsRccRegistered) || ((this.mFlags & 2) == 0)) {
                    if ((this.mIsRccRegistered) && ((this.mFlags & 2) == 0)) {
                        android.support.v4.media.session.MediaSessionCompatApi14.setState(this.mRccObj, 0);
                        android.support.v4.media.session.MediaSessionCompatApi14.unregisterRemoteControlClient(this.mContext, this.mRccObj);
                        this.mIsRccRegistered = 0;
                    }
                } else {
                    android.support.v4.media.session.MediaSessionCompatApi14.registerRemoteControlClient(this.mContext, this.mRccObj);
                    this.mIsRccRegistered = 1;
                    v1 = 1;
                }
            }
        }
        return v1;
    }

    void adjustVolume(int p3, int p4)
    {
        if (this.mVolumeType != 2) {
            this.mAudioManager.adjustStreamVolume(this.mLocalStream, p3, p4);
        } else {
            if (this.mVolumeProvider != null) {
                this.mVolumeProvider.onAdjustVolume(p3);
            }
        }
        return;
    }

    public String getCallingPackage()
    {
        return 0;
    }

    public Object getMediaSession()
    {
        return 0;
    }

    public Object getRemoteControlClient()
    {
        return this.mRccObj;
    }

    public android.support.v4.media.session.MediaSessionCompat$Token getSessionToken()
    {
        return this.mToken;
    }

    android.support.v4.media.session.PlaybackStateCompat getStateWithUpdatedPosition()
    {
        long v10 = -1;
        int v12 = this.mState;
        if ((this.mMetadata != null) && (this.mMetadata.containsKey("android.media.metadata.DURATION"))) {
            v10 = this.mMetadata.getLong("android.media.metadata.DURATION");
        }
        android.support.v4.media.session.PlaybackStateCompat v9 = 0;
        if ((v12 != 0) && ((v12.getState() == 3) || ((v12.getState() == 4) || (v12.getState() == 5)))) {
            long v14 = v12.getLastPositionUpdateTime();
            long v7 = android.os.SystemClock.elapsedRealtime();
            if (v14 > 0) {
                long v4 = (((long) (v12.getPlaybackSpeed() * ((float) (v7 - v14)))) + v12.getPosition());
                if ((v10 < 0) || (v4 <= v10)) {
                    if (v4 < 0) {
                        v4 = 0;
                    }
                } else {
                    v4 = v10;
                }
                android.support.v4.media.session.PlaybackStateCompat$Builder v2_1 = new android.support.v4.media.session.PlaybackStateCompat$Builder(v12);
                v2_1.setState(v12.getState(), v4, v12.getPlaybackSpeed(), v7);
                v9 = v2_1.build();
            }
        }
        if (v9 != null) {
            v12 = v9;
        }
        return v12;
    }

    public boolean isActive()
    {
        return this.mIsActive;
    }

    void postToHandler(int p2)
    {
        this.postToHandler(p2, 0);
        return;
    }

    void postToHandler(int p2, Object p3)
    {
        this.postToHandler(p2, p3, 0);
        return;
    }

    void postToHandler(int p3, Object p4, android.os.Bundle p5)
    {
        try {
            if (this.mHandler != null) {
                this.mHandler.post(p3, p4, p5);
            }
        } catch (android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MessageHandler v0_2) {
            throw v0_2;
        }
        return;
    }

    public void release()
    {
        this.mIsActive = 0;
        this.mDestroyed = 1;
        this.update();
        this.sendSessionDestroyed();
        return;
    }

    public void sendSessionEvent(String p1, android.os.Bundle p2)
    {
        this.sendEvent(p1, p2);
        return;
    }

    void sendVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo p5)
    {
        int v1 = (this.mControllerCallbacks.beginBroadcast() - 1);
        while (v1 >= 0) {
            try {
                ((android.support.v4.media.session.IMediaControllerCallback) this.mControllerCallbacks.getBroadcastItem(v1)).onVolumeInfoChanged(p5);
            } catch (android.os.RemoteException v3) {
            }
            v1--;
        }
        this.mControllerCallbacks.finishBroadcast();
        return;
    }

    public void setActive(boolean p2)
    {
        if (p2 != this.mIsActive) {
            this.mIsActive = p2;
            if (this.update()) {
                this.setMetadata(this.mMetadata);
                this.setPlaybackState(this.mState);
            }
        }
        return;
    }

    public void setCallback(android.support.v4.media.session.MediaSessionCompat$Callback p9, android.os.Handler p10)
    {
        this.mCallback = p9;
        if (p9 != null) {
            if (p10 == null) {
                p10 = new android.os.Handler();
            }
            this.mHandler = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$MessageHandler(this, p10.getLooper());
            android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$2 v0_1 = new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$2(this);
            if (android.os.Build$VERSION.SDK_INT >= 18) {
                android.support.v4.media.session.MediaSessionCompatApi18.setOnPlaybackPositionUpdateListener(this.mRccObj, android.support.v4.media.session.MediaSessionCompatApi18.createPlaybackPositionUpdateListener(v0_1));
            }
            if (android.os.Build$VERSION.SDK_INT >= 19) {
                android.support.v4.media.session.MediaSessionCompatApi19.setOnMetadataUpdateListener(this.mRccObj, android.support.v4.media.session.MediaSessionCompatApi19.createMetadataUpdateListener(v0_1));
            }
        } else {
            if (android.os.Build$VERSION.SDK_INT >= 18) {
                android.support.v4.media.session.MediaSessionCompatApi18.setOnPlaybackPositionUpdateListener(this.mRccObj, 0);
            }
            if (android.os.Build$VERSION.SDK_INT >= 19) {
                android.support.v4.media.session.MediaSessionCompatApi19.setOnMetadataUpdateListener(this.mRccObj, 0);
            }
        }
        return;
    }

    public void setExtras(android.os.Bundle p1)
    {
        this.mExtras = p1;
        this.sendExtras(p1);
        return;
    }

    public void setFlags(int p3)
    {
        this.mFlags = p3;
        this.update();
        return;
    }

    public void setMediaButtonReceiver(android.app.PendingIntent p1)
    {
        return;
    }

    public void setMetadata(android.support.v4.media.MediaMetadataCompat p5)
    {
        android.os.Bundle v0_0 = 0;
        if (p5 != null) {
            p5 = new android.support.v4.media.MediaMetadataCompat$Builder(p5, android.support.v4.media.session.MediaSessionCompat.sMaxBitmapSize).build();
        }
        this.mMetadata = p5;
        this.sendMetadata(p5);
        if (this.mIsActive) {
            if (android.os.Build$VERSION.SDK_INT < 19) {
                if (android.os.Build$VERSION.SDK_INT >= 14) {
                    Object v1_4 = this.mRccObj;
                    if (p5 != null) {
                        v0_0 = p5.getBundle();
                    }
                    android.support.v4.media.session.MediaSessionCompatApi14.setMetadata(v1_4, v0_0);
                }
            } else {
                Object v1_5 = this.mRccObj;
                if (p5 != null) {
                    v0_0 = p5.getBundle();
                }
                long v2_5;
                if (this.mState != null) {
                    v2_5 = this.mState.getActions();
                } else {
                    v2_5 = 0;
                }
                android.support.v4.media.session.MediaSessionCompatApi19.setMetadata(v1_5, v0_0, v2_5);
            }
        }
        return;
    }

    public void setPlaybackState(android.support.v4.media.session.PlaybackStateCompat p10)
    {
        this.mState = p10;
        this.sendState(p10);
        if (this.mIsActive) {
            if (p10 != null) {
                if (android.os.Build$VERSION.SDK_INT < 18) {
                    if (android.os.Build$VERSION.SDK_INT >= 14) {
                        android.support.v4.media.session.MediaSessionCompatApi14.setState(this.mRccObj, p10.getState());
                    }
                } else {
                    android.support.v4.media.session.MediaSessionCompatApi18.setState(this.mRccObj, p10.getState(), p10.getPosition(), p10.getPlaybackSpeed(), p10.getLastPositionUpdateTime());
                }
                if (android.os.Build$VERSION.SDK_INT < 19) {
                    if (android.os.Build$VERSION.SDK_INT < 18) {
                        if (android.os.Build$VERSION.SDK_INT >= 14) {
                            android.support.v4.media.session.MediaSessionCompatApi14.setTransportControlFlags(this.mRccObj, p10.getActions());
                        }
                    } else {
                        android.support.v4.media.session.MediaSessionCompatApi18.setTransportControlFlags(this.mRccObj, p10.getActions());
                    }
                } else {
                    android.support.v4.media.session.MediaSessionCompatApi19.setTransportControlFlags(this.mRccObj, p10.getActions());
                }
            } else {
                if (android.os.Build$VERSION.SDK_INT >= 14) {
                    android.support.v4.media.session.MediaSessionCompatApi14.setState(this.mRccObj, 0);
                    android.support.v4.media.session.MediaSessionCompatApi14.setTransportControlFlags(this.mRccObj, 0);
                }
            }
        }
        return;
    }

    public void setPlaybackToLocal(int p8)
    {
        if (this.mVolumeProvider != null) {
            this.mVolumeProvider.setCallback(0);
        }
        this.mVolumeType = 1;
        this.sendVolumeInfoChanged(new android.support.v4.media.session.ParcelableVolumeInfo(this.mVolumeType, this.mLocalStream, 2, this.mAudioManager.getStreamMaxVolume(this.mLocalStream), this.mAudioManager.getStreamVolume(this.mLocalStream)));
        return;
    }

    public void setPlaybackToRemote(android.support.v4.media.VolumeProviderCompat p7)
    {
        if (p7 != null) {
            if (this.mVolumeProvider != null) {
                this.mVolumeProvider.setCallback(0);
            }
            this.mVolumeType = 2;
            this.mVolumeProvider = p7;
            this.sendVolumeInfoChanged(new android.support.v4.media.session.ParcelableVolumeInfo(this.mVolumeType, this.mLocalStream, this.mVolumeProvider.getVolumeControl(), this.mVolumeProvider.getMaxVolume(), this.mVolumeProvider.getCurrentVolume()));
            p7.setCallback(this.mVolumeCallback);
            return;
        } else {
            throw new IllegalArgumentException("volumeProvider may not be null");
        }
    }

    public void setQueue(java.util.List p1)
    {
        this.mQueue = p1;
        this.sendQueue(p1);
        return;
    }

    public void setQueueTitle(CharSequence p1)
    {
        this.mQueueTitle = p1;
        this.sendQueueTitle(p1);
        return;
    }

    public void setRatingType(int p1)
    {
        this.mRatingType = p1;
        return;
    }

    public void setSessionActivity(android.app.PendingIntent p3)
    {
        try {
            this.mSessionActivity = p3;
            return;
        } catch (Throwable v0) {
            throw v0;
        }
    }

    void setVolumeTo(int p3, int p4)
    {
        if (this.mVolumeType != 2) {
            this.mAudioManager.setStreamVolume(this.mLocalStream, p3, p4);
        } else {
            if (this.mVolumeProvider != null) {
                this.mVolumeProvider.onSetVolumeTo(p3);
            }
        }
        return;
    }
}
package android.support.v4.media.session;
interface MediaSessionCompatApi19$Callback implements android.support.v4.media.session.MediaSessionCompatApi18$Callback {

    public abstract void onSetRating();
}
package android.support.v4.media.session;
 class MediaSessionCompatApi23$CallbackProxy extends android.support.v4.media.session.MediaSessionCompatApi21$CallbackProxy {

    public MediaSessionCompatApi23$CallbackProxy(android.support.v4.media.session.MediaSessionCompatApi23$Callback p1)
    {
        super(p1);
        return;
    }

    public void onPlayFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        ((android.support.v4.media.session.MediaSessionCompatApi23$Callback) this.mCallback).onPlayFromUri(p2, p3);
        return;
    }
}
package android.support.v4.net;
 class ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl implements android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl {

    ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl()
    {
        return;
    }

    public int getRestrictBackgroundStatus(android.net.ConnectivityManager p2)
    {
        return 3;
    }

    public boolean isActiveNetworkMetered(android.net.ConnectivityManager p4)
    {
        int v2 = 1;
        android.net.NetworkInfo v0 = p4.getActiveNetworkInfo();
        if (v0 != null) {
            switch (v0.getType()) {
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 1:
                    v2 = 0;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                case 0:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                default:
            }
        }
        return v2;
    }
}
package android.support.v4.net;
 class TrafficStatsCompat$BaseTrafficStatsCompatImpl implements android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl {
    private ThreadLocal mThreadSocketTags;

    TrafficStatsCompat$BaseTrafficStatsCompatImpl()
    {
        this.mThreadSocketTags = new android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$1(this);
        return;
    }

    public void clearThreadStatsTag()
    {
        ((android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags) this.mThreadSocketTags.get()).statsTag = -1;
        return;
    }

    public int getThreadStatsTag()
    {
        return ((android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags) this.mThreadSocketTags.get()).statsTag;
    }

    public void incrementOperationCount(int p1)
    {
        return;
    }

    public void incrementOperationCount(int p1, int p2)
    {
        return;
    }

    public void setThreadStatsTag(int p2)
    {
        ((android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags) this.mThreadSocketTags.get()).statsTag = p2;
        return;
    }

    public void tagDatagramSocket(java.net.DatagramSocket p1)
    {
        return;
    }

    public void tagSocket(java.net.Socket p1)
    {
        return;
    }

    public void untagDatagramSocket(java.net.DatagramSocket p1)
    {
        return;
    }

    public void untagSocket(java.net.Socket p1)
    {
        return;
    }
}
package android.support.v4.net;
 class TrafficStatsCompat$IcsTrafficStatsCompatImpl implements android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl {

    TrafficStatsCompat$IcsTrafficStatsCompatImpl()
    {
        return;
    }

    public void clearThreadStatsTag()
    {
        android.support.v4.net.TrafficStatsCompatIcs.clearThreadStatsTag();
        return;
    }

    public int getThreadStatsTag()
    {
        return android.support.v4.net.TrafficStatsCompatIcs.getThreadStatsTag();
    }

    public void incrementOperationCount(int p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.incrementOperationCount(p1);
        return;
    }

    public void incrementOperationCount(int p1, int p2)
    {
        android.support.v4.net.TrafficStatsCompatIcs.incrementOperationCount(p1, p2);
        return;
    }

    public void setThreadStatsTag(int p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.setThreadStatsTag(p1);
        return;
    }

    public void tagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.tagDatagramSocket(p1);
        return;
    }

    public void tagSocket(java.net.Socket p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.tagSocket(p1);
        return;
    }

    public void untagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.untagDatagramSocket(p1);
        return;
    }

    public void untagSocket(java.net.Socket p1)
    {
        android.support.v4.net.TrafficStatsCompatIcs.untagSocket(p1);
        return;
    }
}
package android.support.v4.os;
 class IResultReceiver$Stub$Proxy implements android.support.v4.os.IResultReceiver {
    private android.os.IBinder mRemote;

    IResultReceiver$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public String getInterfaceDescriptor()
    {
        return "android.support.v4.os.IResultReceiver";
    }

    public void send(int p6, android.os.Bundle p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("android.support.v4.os.IResultReceiver");
            v0.writeInt(p6);
        } catch (android.os.IBinder v1_1) {
            v0.recycle();
            throw v1_1;
        }
        if (p7 == null) {
            v0.writeInt(0);
        } else {
            v0.writeInt(1);
            p7.writeToParcel(v0, 0);
        }
        this.mRemote.transact(1, v0, 0, 1);
        v0.recycle();
        return;
    }
}
package android.support.v4.os;
public abstract class IResultReceiver$Stub extends android.os.Binder implements android.support.v4.os.IResultReceiver {
    private static final String DESCRIPTOR = "android.support.v4.os.IResultReceiver";
    static final int TRANSACTION_send = 1;

    public IResultReceiver$Stub()
    {
        this.attachInterface(this, "android.support.v4.os.IResultReceiver");
        return;
    }

    public static android.support.v4.os.IResultReceiver asInterface(android.os.IBinder p2)
    {
        android.support.v4.os.IResultReceiver v0_0;
        if (p2 != null) {
            android.support.v4.os.IResultReceiver v0_1 = p2.queryLocalInterface("android.support.v4.os.IResultReceiver");
            if ((v0_1 == null) || (!(v0_1 instanceof android.support.v4.os.IResultReceiver))) {
                v0_0 = new android.support.v4.os.IResultReceiver$Stub$Proxy(p2);
            } else {
                v0_0 = ((android.support.v4.os.IResultReceiver) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p5, android.os.Parcel p6, android.os.Parcel p7, int p8)
    {
        boolean v2 = 1;
        switch (p5) {
            case 1:
                int v1_0;
                p6.enforceInterface("android.support.v4.os.IResultReceiver");
                int v0 = p6.readInt();
                if (p6.readInt() == 0) {
                    v1_0 = 0;
                } else {
                    v1_0 = ((android.os.Bundle) android.os.Bundle.CREATOR.createFromParcel(p6));
                }
                this.send(v0, v1_0);
                break;
            case 1598968902:
                p7.writeString("android.support.v4.os.IResultReceiver");
                break;
            default:
                v2 = super.onTransact(p5, p6, p7, p8);
        }
        return v2;
    }
}
package android.support.v4.print;
 class PrintHelper$PrintHelperImpl$1 implements android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback {
    final synthetic android.support.v4.print.PrintHelper$PrintHelperImpl this$0;
    final synthetic android.support.v4.print.PrintHelper$OnPrintFinishCallback val$callback;

    PrintHelper$PrintHelperImpl$1(android.support.v4.print.PrintHelper$PrintHelperImpl p1, android.support.v4.print.PrintHelper$OnPrintFinishCallback p2)
    {
        this.this$0 = p1;
        this.val$callback = p2;
        return;
    }

    public void onFinish()
    {
        this.val$callback.onFinish();
        return;
    }
}
package android.support.v4.print;
 class PrintHelper$PrintHelperImpl$2 implements android.support.v4.print.PrintHelperKitkat$OnPrintFinishCallback {
    final synthetic android.support.v4.print.PrintHelper$PrintHelperImpl this$0;
    final synthetic android.support.v4.print.PrintHelper$OnPrintFinishCallback val$callback;

    PrintHelper$PrintHelperImpl$2(android.support.v4.print.PrintHelper$PrintHelperImpl p1, android.support.v4.print.PrintHelper$OnPrintFinishCallback p2)
    {
        this.this$0 = p1;
        this.val$callback = p2;
        return;
    }

    public void onFinish()
    {
        this.val$callback.onFinish();
        return;
    }
}
package android.support.v4.print;
 class PrintHelper$PrintHelperImpl implements android.support.v4.print.PrintHelper$PrintHelperVersionImpl {
    private final android.support.v4.print.PrintHelperKitkat mPrintHelper;

    protected PrintHelper$PrintHelperImpl(android.support.v4.print.PrintHelperKitkat p1)
    {
        this.mPrintHelper = p1;
        return;
    }

    public int getColorMode()
    {
        return this.mPrintHelper.getColorMode();
    }

    public int getOrientation()
    {
        return this.mPrintHelper.getOrientation();
    }

    public int getScaleMode()
    {
        return this.mPrintHelper.getScaleMode();
    }

    public void printBitmap(String p3, android.graphics.Bitmap p4, android.support.v4.print.PrintHelper$OnPrintFinishCallback p5)
    {
        android.support.v4.print.PrintHelper$PrintHelperImpl$1 v0_0 = 0;
        if (p5 != null) {
            v0_0 = new android.support.v4.print.PrintHelper$PrintHelperImpl$1(this, p5);
        }
        this.mPrintHelper.printBitmap(p3, p4, v0_0);
        return;
    }

    public void printBitmap(String p3, android.net.Uri p4, android.support.v4.print.PrintHelper$OnPrintFinishCallback p5)
    {
        android.support.v4.print.PrintHelper$PrintHelperImpl$2 v0_0 = 0;
        if (p5 != null) {
            v0_0 = new android.support.v4.print.PrintHelper$PrintHelperImpl$2(this, p5);
        }
        this.mPrintHelper.printBitmap(p3, p4, v0_0);
        return;
    }

    public void setColorMode(int p2)
    {
        this.mPrintHelper.setColorMode(p2);
        return;
    }

    public void setOrientation(int p2)
    {
        this.mPrintHelper.setOrientation(p2);
        return;
    }

    public void setScaleMode(int p2)
    {
        this.mPrintHelper.setScaleMode(p2);
        return;
    }
}
package android.support.v4.print;
final class PrintHelper$PrintHelperStubImpl implements android.support.v4.print.PrintHelper$PrintHelperVersionImpl {
    int mColorMode;
    int mOrientation;
    int mScaleMode;

    private PrintHelper$PrintHelperStubImpl()
    {
        this.mScaleMode = 2;
        this.mColorMode = 2;
        this.mOrientation = 1;
        return;
    }

    synthetic PrintHelper$PrintHelperStubImpl(android.support.v4.print.PrintHelper$1 p1)
    {
        return;
    }

    public int getColorMode()
    {
        return this.mColorMode;
    }

    public int getOrientation()
    {
        return this.mOrientation;
    }

    public int getScaleMode()
    {
        return this.mScaleMode;
    }

    public void printBitmap(String p1, android.graphics.Bitmap p2, android.support.v4.print.PrintHelper$OnPrintFinishCallback p3)
    {
        return;
    }

    public void printBitmap(String p1, android.net.Uri p2, android.support.v4.print.PrintHelper$OnPrintFinishCallback p3)
    {
        return;
    }

    public void setColorMode(int p1)
    {
        this.mColorMode = p1;
        return;
    }

    public void setOrientation(int p1)
    {
        this.mOrientation = p1;
        return;
    }

    public void setScaleMode(int p1)
    {
        this.mScaleMode = p1;
        return;
    }
}
package android.support.v4.print;
 class PrintHelperApi20 extends android.support.v4.print.PrintHelperKitkat {

    PrintHelperApi20(android.content.Context p2)
    {
        super(p2);
        super.mPrintActivityRespectsOrientation = 0;
        return;
    }
}
package android.support.v4.provider;
 class RawDocumentFile extends android.support.v4.provider.DocumentFile {
    private java.io.File mFile;

    RawDocumentFile(android.support.v4.provider.DocumentFile p1, java.io.File p2)
    {
        super(p1);
        super.mFile = p2;
        return;
    }

    private static boolean deleteContents(java.io.File p8)
    {
        java.io.File[] v1 = p8.listFiles();
        int v2 = 1;
        if (v1 != null) {
            int v4 = v1.length;
            int v3 = 0;
            while (v3 < v4) {
                java.io.File v0 = v1[v3];
                if (v0.isDirectory()) {
                    v2 &= android.support.v4.provider.RawDocumentFile.deleteContents(v0);
                }
                if (!v0.delete()) {
                    android.util.Log.w("DocumentFile", new StringBuilder().append("Failed to delete ").append(v0).toString());
                    v2 = 0;
                }
                v3++;
            }
        }
        return v2;
    }

    private static String getTypeForName(String p4)
    {
        String v2;
        int v1 = p4.lastIndexOf(46);
        if (v1 < 0) {
            v2 = "application/octet-stream";
        } else {
            v2 = android.webkit.MimeTypeMap.getSingleton().getMimeTypeFromExtension(p4.substring((v1 + 1)).toLowerCase());
            if (v2 == null) {
            }
        }
        return v2;
    }

    public boolean canRead()
    {
        return this.mFile.canRead();
    }

    public boolean canWrite()
    {
        return this.mFile.canWrite();
    }

    public android.support.v4.provider.DocumentFile createDirectory(String p3)
    {
        int v1_2;
        java.io.File v0_1 = new java.io.File(this.mFile, p3);
        if ((!v0_1.isDirectory()) && (!v0_1.mkdir())) {
            v1_2 = 0;
        } else {
            v1_2 = new android.support.v4.provider.RawDocumentFile(this, v0_1);
        }
        return v1_2;
    }

    public android.support.v4.provider.DocumentFile createFile(String p7, String p8)
    {
        String v1 = android.webkit.MimeTypeMap.getSingleton().getExtensionFromMimeType(p7);
        if (v1 != null) {
            p8 = new StringBuilder().append(p8).append(".").append(v1).toString();
        }
        java.io.File v2_1 = new java.io.File(this.mFile, p8);
        try {
            v2_1.createNewFile();
            int v3_5 = new android.support.v4.provider.RawDocumentFile(this, v2_1);
        } catch (java.io.IOException v0) {
            android.util.Log.w("DocumentFile", new StringBuilder().append("Failed to createFile: ").append(v0).toString());
            v3_5 = 0;
        }
        return v3_5;
    }

    public boolean delete()
    {
        android.support.v4.provider.RawDocumentFile.deleteContents(this.mFile);
        return this.mFile.delete();
    }

    public boolean exists()
    {
        return this.mFile.exists();
    }

    public String getName()
    {
        return this.mFile.getName();
    }

    public String getType()
    {
        String v0_4;
        if (!this.mFile.isDirectory()) {
            v0_4 = android.support.v4.provider.RawDocumentFile.getTypeForName(this.mFile.getName());
        } else {
            v0_4 = 0;
        }
        return v0_4;
    }

    public android.net.Uri getUri()
    {
        return android.net.Uri.fromFile(this.mFile);
    }

    public boolean isDirectory()
    {
        return this.mFile.isDirectory();
    }

    public boolean isFile()
    {
        return this.mFile.isFile();
    }

    public long lastModified()
    {
        return this.mFile.lastModified();
    }

    public long length()
    {
        return this.mFile.length();
    }

    public android.support.v4.provider.DocumentFile[] listFiles()
    {
        java.util.ArrayList v2_1 = new java.util.ArrayList();
        java.io.File[] v1 = this.mFile.listFiles();
        if (v1 != null) {
            int v4 = v1.length;
            int v3_5 = 0;
            while (v3_5 < v4) {
                v2_1.add(new android.support.v4.provider.RawDocumentFile(this, v1[v3_5]));
                v3_5++;
            }
        }
        int v3_1 = new android.support.v4.provider.DocumentFile[v2_1.size()];
        return ((android.support.v4.provider.DocumentFile[]) v2_1.toArray(v3_1));
    }

    public boolean renameTo(String p3)
    {
        int v1_1;
        java.io.File v0_1 = new java.io.File(this.mFile.getParentFile(), p3);
        if (!this.mFile.renameTo(v0_1)) {
            v1_1 = 0;
        } else {
            this.mFile = v0_1;
            v1_1 = 1;
        }
        return v1_1;
    }
}
package android.support.v4.provider;
 class SingleDocumentFile extends android.support.v4.provider.DocumentFile {
    private android.content.Context mContext;
    private android.net.Uri mUri;

    SingleDocumentFile(android.support.v4.provider.DocumentFile p1, android.content.Context p2, android.net.Uri p3)
    {
        super(p1);
        super.mContext = p2;
        super.mUri = p3;
        return;
    }

    public boolean canRead()
    {
        return android.support.v4.provider.DocumentsContractApi19.canRead(this.mContext, this.mUri);
    }

    public boolean canWrite()
    {
        return android.support.v4.provider.DocumentsContractApi19.canWrite(this.mContext, this.mUri);
    }

    public android.support.v4.provider.DocumentFile createDirectory(String p2)
    {
        throw new UnsupportedOperationException();
    }

    public android.support.v4.provider.DocumentFile createFile(String p2, String p3)
    {
        throw new UnsupportedOperationException();
    }

    public boolean delete()
    {
        return android.support.v4.provider.DocumentsContractApi19.delete(this.mContext, this.mUri);
    }

    public boolean exists()
    {
        return android.support.v4.provider.DocumentsContractApi19.exists(this.mContext, this.mUri);
    }

    public String getName()
    {
        return android.support.v4.provider.DocumentsContractApi19.getName(this.mContext, this.mUri);
    }

    public String getType()
    {
        return android.support.v4.provider.DocumentsContractApi19.getType(this.mContext, this.mUri);
    }

    public android.net.Uri getUri()
    {
        return this.mUri;
    }

    public boolean isDirectory()
    {
        return android.support.v4.provider.DocumentsContractApi19.isDirectory(this.mContext, this.mUri);
    }

    public boolean isFile()
    {
        return android.support.v4.provider.DocumentsContractApi19.isFile(this.mContext, this.mUri);
    }

    public long lastModified()
    {
        return android.support.v4.provider.DocumentsContractApi19.lastModified(this.mContext, this.mUri);
    }

    public long length()
    {
        return android.support.v4.provider.DocumentsContractApi19.length(this.mContext, this.mUri);
    }

    public android.support.v4.provider.DocumentFile[] listFiles()
    {
        throw new UnsupportedOperationException();
    }

    public boolean renameTo(String p2)
    {
        throw new UnsupportedOperationException();
    }
}
package android.support.v4.provider;
 class TreeDocumentFile extends android.support.v4.provider.DocumentFile {
    private android.content.Context mContext;
    private android.net.Uri mUri;

    TreeDocumentFile(android.support.v4.provider.DocumentFile p1, android.content.Context p2, android.net.Uri p3)
    {
        super(p1);
        super.mContext = p2;
        super.mUri = p3;
        return;
    }

    public boolean canRead()
    {
        return android.support.v4.provider.DocumentsContractApi19.canRead(this.mContext, this.mUri);
    }

    public boolean canWrite()
    {
        return android.support.v4.provider.DocumentsContractApi19.canWrite(this.mContext, this.mUri);
    }

    public android.support.v4.provider.DocumentFile createDirectory(String p4)
    {
        int v1_1;
        android.net.Uri v0 = android.support.v4.provider.DocumentsContractApi21.createDirectory(this.mContext, this.mUri, p4);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.provider.TreeDocumentFile(this, this.mContext, v0);
        }
        return v1_1;
    }

    public android.support.v4.provider.DocumentFile createFile(String p4, String p5)
    {
        int v1_1;
        android.net.Uri v0 = android.support.v4.provider.DocumentsContractApi21.createFile(this.mContext, this.mUri, p4, p5);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.provider.TreeDocumentFile(this, this.mContext, v0);
        }
        return v1_1;
    }

    public boolean delete()
    {
        return android.support.v4.provider.DocumentsContractApi19.delete(this.mContext, this.mUri);
    }

    public boolean exists()
    {
        return android.support.v4.provider.DocumentsContractApi19.exists(this.mContext, this.mUri);
    }

    public String getName()
    {
        return android.support.v4.provider.DocumentsContractApi19.getName(this.mContext, this.mUri);
    }

    public String getType()
    {
        return android.support.v4.provider.DocumentsContractApi19.getType(this.mContext, this.mUri);
    }

    public android.net.Uri getUri()
    {
        return this.mUri;
    }

    public boolean isDirectory()
    {
        return android.support.v4.provider.DocumentsContractApi19.isDirectory(this.mContext, this.mUri);
    }

    public boolean isFile()
    {
        return android.support.v4.provider.DocumentsContractApi19.isFile(this.mContext, this.mUri);
    }

    public long lastModified()
    {
        return android.support.v4.provider.DocumentsContractApi19.lastModified(this.mContext, this.mUri);
    }

    public long length()
    {
        return android.support.v4.provider.DocumentsContractApi19.length(this.mContext, this.mUri);
    }

    public android.support.v4.provider.DocumentFile[] listFiles()
    {
        android.net.Uri[] v1 = android.support.v4.provider.DocumentsContractApi21.listFiles(this.mContext, this.mUri);
        android.support.v4.provider.DocumentFile[] v2 = new android.support.v4.provider.DocumentFile[v1.length];
        int v0 = 0;
        while (v0 < v1.length) {
            v2[v0] = new android.support.v4.provider.TreeDocumentFile(this, this.mContext, v1[v0]);
            v0++;
        }
        return v2;
    }

    public boolean renameTo(String p4)
    {
        int v1_1;
        android.net.Uri v0 = android.support.v4.provider.DocumentsContractApi21.renameTo(this.mContext, this.mUri, p4);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            this.mUri = v0;
            v1_1 = 1;
        }
        return v1_1;
    }
}
package android.support.v4.text;
 class ICUCompat$ICUCompatImplBase implements android.support.v4.text.ICUCompat$ICUCompatImpl {

    ICUCompat$ICUCompatImplBase()
    {
        return;
    }

    public String maximizeAndGetScript(java.util.Locale p2)
    {
        return 0;
    }
}
package android.support.v4.text;
 class ICUCompat$ICUCompatImplIcs implements android.support.v4.text.ICUCompat$ICUCompatImpl {

    ICUCompat$ICUCompatImplIcs()
    {
        return;
    }

    public String maximizeAndGetScript(java.util.Locale p2)
    {
        return android.support.v4.text.ICUCompatIcs.maximizeAndGetScript(p2);
    }
}
package android.support.v4.text;
 class ICUCompat$ICUCompatImplLollipop implements android.support.v4.text.ICUCompat$ICUCompatImpl {

    ICUCompat$ICUCompatImplLollipop()
    {
        return;
    }

    public String maximizeAndGetScript(java.util.Locale p2)
    {
        return android.support.v4.text.ICUCompatApi23.maximizeAndGetScript(p2);
    }
}
package android.support.v4.text;
 class TextDirectionHeuristicsCompat$AnyStrong implements android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm {
    public static final android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong INSTANCE_LTR;
    public static final android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong INSTANCE_RTL;
    private final boolean mLookForRtl;

    static TextDirectionHeuristicsCompat$AnyStrong()
    {
        android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong.INSTANCE_RTL = new android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong(1);
        android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong.INSTANCE_LTR = new android.support.v4.text.TextDirectionHeuristicsCompat$AnyStrong(0);
        return;
    }

    private TextDirectionHeuristicsCompat$AnyStrong(boolean p1)
    {
        this.mLookForRtl = p1;
        return;
    }

    public int checkRtl(CharSequence p7, int p8, int p9)
    {
        int v3 = 1;
        int v1 = 0;
        int v2 = p8;
        while (v2 < (p8 + p9)) {
            switch (android.support.v4.text.TextDirectionHeuristicsCompat.isRtlText(Character.getDirectionality(p7.charAt(v2)))) {
                case 0:
                    if (!this.mLookForRtl) {
                        v1 = 1;
                    } else {
                        v3 = 0;
                    }
                    return v3;
                case 1:
                    if (this.mLookForRtl) {
                        v1 = 1;
                    }
                    return v3;
            }
            v2++;
        }
        if (v1 == 0) {
            v3 = 2;
        } else {
            if (!this.mLookForRtl) {
                v3 = 0;
            }
        }
        return v3;
    }
}
package android.support.v4.text;
 class TextDirectionHeuristicsCompat$FirstStrong implements android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm {
    public static final android.support.v4.text.TextDirectionHeuristicsCompat$FirstStrong INSTANCE;

    static TextDirectionHeuristicsCompat$FirstStrong()
    {
        android.support.v4.text.TextDirectionHeuristicsCompat$FirstStrong.INSTANCE = new android.support.v4.text.TextDirectionHeuristicsCompat$FirstStrong();
        return;
    }

    private TextDirectionHeuristicsCompat$FirstStrong()
    {
        return;
    }

    public int checkRtl(CharSequence p5, int p6, int p7)
    {
        int v2 = 2;
        int v1 = p6;
        int v0 = (p6 + p7);
        while ((v1 < v0) && (v2 == 2)) {
            v2 = android.support.v4.text.TextDirectionHeuristicsCompat.isRtlTextOrFormat(Character.getDirectionality(p5.charAt(v1)));
            v1++;
        }
        return v2;
    }
}
package android.support.v4.text;
abstract class TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl implements android.support.v4.text.TextDirectionHeuristicCompat {
    private final android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm mAlgorithm;

    public TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl(android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm p1)
    {
        this.mAlgorithm = p1;
        return;
    }

    private boolean doCheck(CharSequence p2, int p3, int p4)
    {
        int v0_2;
        switch (this.mAlgorithm.checkRtl(p2, p3, p4)) {
            case 0:
                v0_2 = 1;
                break;
            case 1:
                v0_2 = 0;
                break;
            default:
                v0_2 = this.defaultIsRtl();
        }
        return v0_2;
    }

    protected abstract boolean defaultIsRtl();

    public boolean isRtl(CharSequence p2, int p3, int p4)
    {
        if ((p2 != null) && ((p3 >= 0) && ((p4 >= 0) && ((p2.length() - p4) >= p3)))) {
            boolean v0_0;
            if (this.mAlgorithm != null) {
                v0_0 = this.doCheck(p2, p3, p4);
            } else {
                v0_0 = this.defaultIsRtl();
            }
            return v0_0;
        } else {
            throw new IllegalArgumentException();
        }
    }

    public boolean isRtl(char[] p2, int p3, int p4)
    {
        return this.isRtl(java.nio.CharBuffer.wrap(p2), p3, p4);
    }
}
package android.support.v4.text;
 class TextUtilsCompat$TextUtilsCompatJellybeanMr1Impl extends android.support.v4.text.TextUtilsCompat$TextUtilsCompatImpl {

    TextUtilsCompat$TextUtilsCompatJellybeanMr1Impl()
    {
        return;
    }

    public int getLayoutDirectionFromLocale(java.util.Locale p2)
    {
        return android.support.v4.text.TextUtilsCompatJellybeanMr1.getLayoutDirectionFromLocale(p2);
    }

    public String htmlEncode(String p2)
    {
        return android.support.v4.text.TextUtilsCompatJellybeanMr1.htmlEncode(p2);
    }
}
package android.support.v4.util;
 class ArrayMap$1 extends android.support.v4.util.MapCollections {
    final synthetic android.support.v4.util.ArrayMap this$0;

    ArrayMap$1(android.support.v4.util.ArrayMap p1)
    {
        this.this$0 = p1;
        return;
    }

    protected void colClear()
    {
        this.this$0.clear();
        return;
    }

    protected Object colGetEntry(int p3, int p4)
    {
        return this.this$0.mArray[((p3 << 1) + p4)];
    }

    protected java.util.Map colGetMap()
    {
        return this.this$0;
    }

    protected int colGetSize()
    {
        return this.this$0.mSize;
    }

    protected int colIndexOfKey(Object p2)
    {
        return this.this$0.indexOfKey(p2);
    }

    protected int colIndexOfValue(Object p2)
    {
        return this.this$0.indexOfValue(p2);
    }

    protected void colPut(Object p2, Object p3)
    {
        this.this$0.put(p2, p3);
        return;
    }

    protected void colRemoveAt(int p2)
    {
        this.this$0.removeAt(p2);
        return;
    }

    protected Object colSetValue(int p2, Object p3)
    {
        return this.this$0.setValueAt(p2, p3);
    }
}
package android.support.v4.util;
public class ArrayMap extends android.support.v4.util.SimpleArrayMap implements java.util.Map {
    android.support.v4.util.MapCollections mCollections;

    public ArrayMap()
    {
        return;
    }

    public ArrayMap(int p1)
    {
        super(p1);
        return;
    }

    public ArrayMap(android.support.v4.util.SimpleArrayMap p1)
    {
        super(p1);
        return;
    }

    private android.support.v4.util.MapCollections getCollection()
    {
        if (this.mCollections == null) {
            this.mCollections = new android.support.v4.util.ArrayMap$1(this);
        }
        return this.mCollections;
    }

    public boolean containsAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.containsAllHelper(this, p2);
    }

    public java.util.Set entrySet()
    {
        return this.getCollection().getEntrySet();
    }

    public java.util.Set keySet()
    {
        return this.getCollection().getKeySet();
    }

    public void putAll(java.util.Map p5)
    {
        this.ensureCapacity((this.mSize + p5.size()));
        java.util.Iterator v1_3 = p5.entrySet().iterator();
        while (v1_3.hasNext()) {
            java.util.Map$Entry v0_1 = ((java.util.Map$Entry) v1_3.next());
            this.put(v0_1.getKey(), v0_1.getValue());
        }
        return;
    }

    public boolean removeAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.removeAllHelper(this, p2);
    }

    public boolean retainAll(java.util.Collection p2)
    {
        return android.support.v4.util.MapCollections.retainAllHelper(this, p2);
    }

    public java.util.Collection values()
    {
        return this.getCollection().getValues();
    }
}
package android.support.v4.util;
public class Pools$SimplePool implements android.support.v4.util.Pools$Pool {
    private final Object[] mPool;
    private int mPoolSize;

    public Pools$SimplePool(int p3)
    {
        if (p3 > 0) {
            Object[] v0_0 = new Object[p3];
            this.mPool = v0_0;
            return;
        } else {
            throw new IllegalArgumentException("The max pool size must be > 0");
        }
    }

    private boolean isInPool(Object p3)
    {
        int v0 = 0;
        while (v0 < this.mPoolSize) {
            if (this.mPool[v0] != p3) {
                v0++;
            } else {
                int v1_1 = 1;
            }
            return v1_1;
        }
        v1_1 = 0;
        return v1_1;
    }

    public Object acquire()
    {
        int v0;
        if (this.mPoolSize <= 0) {
            v0 = 0;
        } else {
            int v1 = (this.mPoolSize - 1);
            v0 = this.mPool[v1];
            this.mPool[v1] = 0;
            this.mPoolSize = (this.mPoolSize - 1);
        }
        return v0;
    }

    public boolean release(Object p3)
    {
        if (!this.isInPool(p3)) {
            int v0_3;
            if (this.mPoolSize >= this.mPool.length) {
                v0_3 = 0;
            } else {
                this.mPool[this.mPoolSize] = p3;
                this.mPoolSize = (this.mPoolSize + 1);
                v0_3 = 1;
            }
            return v0_3;
        } else {
            throw new IllegalStateException("Already in the pool!");
        }
    }
}
package android.support.v4.view;
final class AbsSavedState$1 extends android.support.v4.view.AbsSavedState {

    AbsSavedState$1()
    {
        super(0);
        return;
    }
}
package android.support.v4.view;
final class AbsSavedState$2 implements android.support.v4.os.ParcelableCompatCreatorCallbacks {

    AbsSavedState$2()
    {
        return;
    }

    public android.support.v4.view.AbsSavedState createFromParcel(android.os.Parcel p4, ClassLoader p5)
    {
        if (p4.readParcelable(p5) == null) {
            return android.support.v4.view.AbsSavedState.EMPTY_STATE;
        } else {
            throw new IllegalStateException("superState must be null");
        }
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.createFromParcel(p2, p3);
    }

    public android.support.v4.view.AbsSavedState[] newArray(int p2)
    {
        android.support.v4.view.AbsSavedState[] v0 = new android.support.v4.view.AbsSavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.view;
 class AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 implements android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge {
    final synthetic android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0;
    final synthetic android.support.v4.view.AccessibilityDelegateCompat val$compat;

    AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1(android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        this.this$0 = p1;
        this.val$compat = p2;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$compat.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, Object p4)
    {
        this.val$compat.onInitializeAccessibilityNodeInfo(p3, new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(p4));
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$compat.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$compat.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 implements android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean {
    final synthetic android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0;
    final synthetic android.support.v4.view.AccessibilityDelegateCompat val$compat;

    AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1(android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        this.this$0 = p1;
        this.val$compat = p2;
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return this.val$compat.dispatchPopulateAccessibilityEvent(p2, p3);
    }

    public Object getAccessibilityNodeProvider(android.view.View p3)
    {
        int v1_1;
        android.support.v4.view.accessibility.AccessibilityNodeProviderCompat v0 = this.val$compat.getAccessibilityNodeProvider(p3);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = v0.getProvider();
        }
        return v1_1;
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onInitializeAccessibilityEvent(p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, Object p4)
    {
        this.val$compat.onInitializeAccessibilityNodeInfo(p3, new android.support.v4.view.accessibility.AccessibilityNodeInfoCompat(p4));
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.onPopulateAccessibilityEvent(p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return this.val$compat.onRequestSendAccessibilityEvent(p2, p3, p4);
    }

    public boolean performAccessibilityAction(android.view.View p2, int p3, android.os.Bundle p4)
    {
        return this.val$compat.performAccessibilityAction(p2, p3, p4);
    }

    public void sendAccessibilityEvent(android.view.View p2, int p3)
    {
        this.val$compat.sendAccessibilityEvent(p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        this.val$compat.sendAccessibilityEventUnchecked(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class AccessibilityDelegateCompat$AccessibilityDelegateStubImpl implements android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl {

    AccessibilityDelegateCompat$AccessibilityDelegateStubImpl()
    {
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(Object p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(Object p2, android.view.View p3)
    {
        return 0;
    }

    public Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return 0;
    }

    public Object newAccessiblityDelegateDefaultImpl()
    {
        return 0;
    }

    public void onInitializeAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }

    public void onInitializeAccessibilityNodeInfo(Object p1, android.view.View p2, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        return;
    }

    public void onPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }

    public boolean onRequestSendAccessibilityEvent(Object p2, android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return 1;
    }

    public boolean performAccessibilityAction(Object p2, android.view.View p3, int p4, android.os.Bundle p5)
    {
        return 0;
    }

    public void sendAccessibilityEvent(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void sendAccessibilityEventUnchecked(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        return;
    }
}
package android.support.v4.view;
 class GestureDetectorCompat$GestureDetectorCompatImplBase implements android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl {
    private static final int DOUBLE_TAP_TIMEOUT = 0;
    private static final int LONGPRESS_TIMEOUT = 0;
    private static final int LONG_PRESS = 2;
    private static final int SHOW_PRESS = 1;
    private static final int TAP = 3;
    private static final int TAP_TIMEOUT;
    private boolean mAlwaysInBiggerTapRegion;
    private boolean mAlwaysInTapRegion;
    android.view.MotionEvent mCurrentDownEvent;
    boolean mDeferConfirmSingleTap;
    android.view.GestureDetector$OnDoubleTapListener mDoubleTapListener;
    private int mDoubleTapSlopSquare;
    private float mDownFocusX;
    private float mDownFocusY;
    private final android.os.Handler mHandler;
    private boolean mInLongPress;
    private boolean mIsDoubleTapping;
    private boolean mIsLongpressEnabled;
    private float mLastFocusX;
    private float mLastFocusY;
    final android.view.GestureDetector$OnGestureListener mListener;
    private int mMaximumFlingVelocity;
    private int mMinimumFlingVelocity;
    private android.view.MotionEvent mPreviousUpEvent;
    boolean mStillDown;
    private int mTouchSlopSquare;
    private android.view.VelocityTracker mVelocityTracker;

    static GestureDetectorCompat$GestureDetectorCompatImplBase()
    {
        android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.LONGPRESS_TIMEOUT = android.view.ViewConfiguration.getLongPressTimeout();
        android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.TAP_TIMEOUT = android.view.ViewConfiguration.getTapTimeout();
        android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.DOUBLE_TAP_TIMEOUT = android.view.ViewConfiguration.getDoubleTapTimeout();
        return;
    }

    public GestureDetectorCompat$GestureDetectorCompatImplBase(android.content.Context p2, android.view.GestureDetector$OnGestureListener p3, android.os.Handler p4)
    {
        if (p4 == null) {
            this.mHandler = new android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler(this);
        } else {
            this.mHandler = new android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler(this, p4);
        }
        this.mListener = p3;
        if ((p3 instanceof android.view.GestureDetector$OnDoubleTapListener)) {
            this.setOnDoubleTapListener(((android.view.GestureDetector$OnDoubleTapListener) p3));
        }
        this.init(p2);
        return;
    }

    private void cancel()
    {
        this.mHandler.removeMessages(1);
        this.mHandler.removeMessages(2);
        this.mHandler.removeMessages(3);
        this.mVelocityTracker.recycle();
        this.mVelocityTracker = 0;
        this.mIsDoubleTapping = 0;
        this.mStillDown = 0;
        this.mAlwaysInTapRegion = 0;
        this.mAlwaysInBiggerTapRegion = 0;
        this.mDeferConfirmSingleTap = 0;
        if (this.mInLongPress) {
            this.mInLongPress = 0;
        }
        return;
    }

    private void cancelTaps()
    {
        this.mHandler.removeMessages(1);
        this.mHandler.removeMessages(2);
        this.mHandler.removeMessages(3);
        this.mIsDoubleTapping = 0;
        this.mAlwaysInTapRegion = 0;
        this.mAlwaysInBiggerTapRegion = 0;
        this.mDeferConfirmSingleTap = 0;
        if (this.mInLongPress) {
            this.mInLongPress = 0;
        }
        return;
    }

    private void init(android.content.Context p6)
    {
        if (p6 != null) {
            if (this.mListener != null) {
                this.mIsLongpressEnabled = 1;
                android.view.ViewConfiguration v0 = android.view.ViewConfiguration.get(p6);
                int v2 = v0.getScaledTouchSlop();
                int v1 = v0.getScaledDoubleTapSlop();
                this.mMinimumFlingVelocity = v0.getScaledMinimumFlingVelocity();
                this.mMaximumFlingVelocity = v0.getScaledMaximumFlingVelocity();
                this.mTouchSlopSquare = (v2 * v2);
                this.mDoubleTapSlopSquare = (v1 * v1);
                return;
            } else {
                throw new IllegalArgumentException("OnGestureListener must not be null");
            }
        } else {
            throw new IllegalArgumentException("Context must not be null");
        }
    }

    private boolean isConsideredDoubleTap(android.view.MotionEvent p9, android.view.MotionEvent p10, android.view.MotionEvent p11)
    {
        int v2 = 0;
        if ((this.mAlwaysInBiggerTapRegion) && (((p11.getEventTime() - p10.getEventTime()) <= ((long) android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.DOUBLE_TAP_TIMEOUT)) && ((((((int) p9.getX()) - ((int) p11.getX())) * (((int) p9.getX()) - ((int) p11.getX()))) + ((((int) p9.getY()) - ((int) p11.getY())) * (((int) p9.getY()) - ((int) p11.getY())))) < this.mDoubleTapSlopSquare))) {
            v2 = 1;
        }
        return v2;
    }

    void dispatchLongPress()
    {
        this.mHandler.removeMessages(3);
        this.mDeferConfirmSingleTap = 0;
        this.mInLongPress = 1;
        this.mListener.onLongPress(this.mCurrentDownEvent);
        return;
    }

    public boolean isLongpressEnabled()
    {
        return this.mIsLongpressEnabled;
    }

    public boolean onTouchEvent(android.view.MotionEvent p43)
    {
        int v6 = p43.getAction();
        if (this.mVelocityTracker == null) {
            this.mVelocityTracker = android.view.VelocityTracker.obtain();
        }
        int v22;
        this.mVelocityTracker.addMovement(p43);
        if ((v6 & 255) != 6) {
            v22 = 0;
        } else {
            v22 = 1;
        }
        int v25;
        if (v22 == 0) {
            v25 = -1;
        } else {
            v25 = android.support.v4.view.MotionEventCompat.getActionIndex(p43);
        }
        float v26 = 0;
        float v27 = 0;
        int v7 = p43.getPointerCount();
        int v18_1 = 0;
        while (v18_1 < v7) {
            if (v25 != v18_1) {
                v26 += p43.getX(v18_1);
                v27 += p43.getY(v18_1);
            }
            v18_1++;
        }
        int v12;
        if (v22 == 0) {
            v12 = v7;
        } else {
            v12 = (v7 - 1);
        }
        float v14 = (v26 / ((float) v12));
        float v15 = (v27 / ((float) v12));
        int v17_0 = 0;
        switch ((v6 & 255)) {
            case 0:
                if (this.mDoubleTapListener != null) {
                    boolean v16 = this.mHandler.hasMessages(3);
                    if (v16) {
                        this.mHandler.removeMessages(3);
                    }
                    if ((this.mCurrentDownEvent == null) || ((this.mPreviousUpEvent == null) || ((!v16) || (!this.isConsideredDoubleTap(this.mCurrentDownEvent, this.mPreviousUpEvent, p43))))) {
                        this.mHandler.sendEmptyMessageDelayed(3, ((long) android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.DOUBLE_TAP_TIMEOUT));
                    } else {
                        this.mIsDoubleTapping = 1;
                        v17_0 = ((0 | this.mDoubleTapListener.onDoubleTap(this.mCurrentDownEvent)) | this.mDoubleTapListener.onDoubleTapEvent(p43));
                    }
                }
                this.mLastFocusX = v14;
                this.mDownFocusX = v14;
                this.mLastFocusY = v15;
                this.mDownFocusY = v15;
                if (this.mCurrentDownEvent != null) {
                    this.mCurrentDownEvent.recycle();
                }
                this.mCurrentDownEvent = android.view.MotionEvent.obtain(p43);
                this.mAlwaysInTapRegion = 1;
                this.mAlwaysInBiggerTapRegion = 1;
                this.mStillDown = 1;
                this.mInLongPress = 0;
                this.mDeferConfirmSingleTap = 0;
                if (this.mIsLongpressEnabled) {
                    this.mHandler.removeMessages(2);
                    this.mHandler.sendEmptyMessageAtTime(2, ((this.mCurrentDownEvent.getDownTime() + ((long) android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.TAP_TIMEOUT)) + ((long) android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.LONGPRESS_TIMEOUT)));
                }
                this.mHandler.sendEmptyMessageAtTime(1, (this.mCurrentDownEvent.getDownTime() + ((long) android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase.TAP_TIMEOUT)));
                v17_0 |= this.mListener.onDown(p43);
                break;
            case 1:
                this.mStillDown = 0;
                android.view.MotionEvent v8 = android.view.MotionEvent.obtain(p43);
                if (!this.mIsDoubleTapping) {
                    if (!this.mInLongPress) {
                        if (!this.mAlwaysInTapRegion) {
                            android.view.VelocityTracker v29 = this.mVelocityTracker;
                            int v21 = p43.getPointerId(0);
                            v29.computeCurrentVelocity(1000, ((float) this.mMaximumFlingVelocity));
                            float v31 = android.support.v4.view.VelocityTrackerCompat.getYVelocity(v29, v21);
                            float v30 = android.support.v4.view.VelocityTrackerCompat.getXVelocity(v29, v21);
                            if ((Math.abs(v31) > ((float) this.mMinimumFlingVelocity)) || (Math.abs(v30) > ((float) this.mMinimumFlingVelocity))) {
                                v17_0 = this.mListener.onFling(this.mCurrentDownEvent, p43, v30, v31);
                            }
                        } else {
                            v17_0 = this.mListener.onSingleTapUp(p43);
                            if ((this.mDeferConfirmSingleTap) && (this.mDoubleTapListener != null)) {
                                this.mDoubleTapListener.onSingleTapConfirmed(p43);
                            }
                        }
                    } else {
                        this.mHandler.removeMessages(3);
                        this.mInLongPress = 0;
                    }
                } else {
                    v17_0 = (0 | this.mDoubleTapListener.onDoubleTapEvent(p43));
                }
                if (this.mPreviousUpEvent != null) {
                    this.mPreviousUpEvent.recycle();
                }
                this.mPreviousUpEvent = v8;
                if (this.mVelocityTracker != null) {
                    this.mVelocityTracker.recycle();
                    this.mVelocityTracker = 0;
                }
                this.mIsDoubleTapping = 0;
                this.mDeferConfirmSingleTap = 0;
                this.mHandler.removeMessages(1);
                this.mHandler.removeMessages(2);
                break;
            case 2:
                if (this.mInLongPress) {
                } else {
                    float v23 = (this.mLastFocusX - v14);
                    float v24 = (this.mLastFocusY - v15);
                    if (!this.mIsDoubleTapping) {
                        if (!this.mAlwaysInTapRegion) {
                            if ((Math.abs(v23) < 1065353216) && (Math.abs(v24) < 1065353216)) {
                            } else {
                                v17_0 = this.mListener.onScroll(this.mCurrentDownEvent, p43, v23, v24);
                                this.mLastFocusX = v14;
                                this.mLastFocusY = v15;
                            }
                        } else {
                            int v11 = ((((int) (v14 - this.mDownFocusX)) * ((int) (v14 - this.mDownFocusX))) + (((int) (v15 - this.mDownFocusY)) * ((int) (v15 - this.mDownFocusY))));
                            if (v11 > this.mTouchSlopSquare) {
                                v17_0 = this.mListener.onScroll(this.mCurrentDownEvent, p43, v23, v24);
                                this.mLastFocusX = v14;
                                this.mLastFocusY = v15;
                                this.mAlwaysInTapRegion = 0;
                                this.mHandler.removeMessages(3);
                                this.mHandler.removeMessages(1);
                                this.mHandler.removeMessages(2);
                            }
                            if (v11 <= this.mTouchSlopSquare) {
                            } else {
                                this.mAlwaysInBiggerTapRegion = 0;
                            }
                        }
                    } else {
                        v17_0 = (0 | this.mDoubleTapListener.onDoubleTapEvent(p43));
                    }
                }
                break;
            case 3:
                this.cancel();
            case 4:
            default:
                break;
            case 5:
                this.mLastFocusX = v14;
                this.mDownFocusX = v14;
                this.mLastFocusY = v15;
                this.mDownFocusY = v15;
                this.cancelTaps();
                break;
            case 6:
                this.mLastFocusX = v14;
                this.mDownFocusX = v14;
                this.mLastFocusY = v15;
                this.mDownFocusY = v15;
                this.mVelocityTracker.computeCurrentVelocity(1000, ((float) this.mMaximumFlingVelocity));
                int v28 = android.support.v4.view.MotionEventCompat.getActionIndex(p43);
                int v19 = p43.getPointerId(v28);
                float v33 = android.support.v4.view.VelocityTrackerCompat.getXVelocity(this.mVelocityTracker, v19);
                float v35 = android.support.v4.view.VelocityTrackerCompat.getYVelocity(this.mVelocityTracker, v19);
                int v18_0 = 0;
                while (v18_0 < v7) {
                    if (v18_0 != v28) {
                        int v20 = p43.getPointerId(v18_0);
                        if (((v33 * android.support.v4.view.VelocityTrackerCompat.getXVelocity(this.mVelocityTracker, v20)) + (v35 * android.support.v4.view.VelocityTrackerCompat.getYVelocity(this.mVelocityTracker, v20))) < 0) {
                            this.mVelocityTracker.clear();
                            break;
                        }
                    }
                    v18_0++;
                }
                break;
        }
        return v17_0;
    }

    public void setIsLongpressEnabled(boolean p1)
    {
        this.mIsLongpressEnabled = p1;
        return;
    }

    public void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener p1)
    {
        this.mDoubleTapListener = p1;
        return;
    }
}
package android.support.v4.view;
 class GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2 implements android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl {
    private final android.view.GestureDetector mDetector;

    public GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2(android.content.Context p2, android.view.GestureDetector$OnGestureListener p3, android.os.Handler p4)
    {
        this.mDetector = new android.view.GestureDetector(p2, p3, p4);
        return;
    }

    public boolean isLongpressEnabled()
    {
        return this.mDetector.isLongpressEnabled();
    }

    public boolean onTouchEvent(android.view.MotionEvent p2)
    {
        return this.mDetector.onTouchEvent(p2);
    }

    public void setIsLongpressEnabled(boolean p2)
    {
        this.mDetector.setIsLongpressEnabled(p2);
        return;
    }

    public void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener p2)
    {
        this.mDetector.setOnDoubleTapListener(p2);
        return;
    }
}
package android.support.v4.view;
 class GravityCompat$GravityCompatImplBase implements android.support.v4.view.GravityCompat$GravityCompatImpl {

    GravityCompat$GravityCompatImplBase()
    {
        return;
    }

    public void apply(int p1, int p2, int p3, android.graphics.Rect p4, int p5, int p6, android.graphics.Rect p7, int p8)
    {
        android.view.Gravity.apply(p1, p2, p3, p4, p5, p6, p7);
        return;
    }

    public void apply(int p1, int p2, int p3, android.graphics.Rect p4, android.graphics.Rect p5, int p6)
    {
        android.view.Gravity.apply(p1, p2, p3, p4, p5);
        return;
    }

    public void applyDisplay(int p1, android.graphics.Rect p2, android.graphics.Rect p3, int p4)
    {
        android.view.Gravity.applyDisplay(p1, p2, p3);
        return;
    }

    public int getAbsoluteGravity(int p2, int p3)
    {
        return (-8388609 & p2);
    }
}
package android.support.v4.view;
 class GravityCompat$GravityCompatImplJellybeanMr1 implements android.support.v4.view.GravityCompat$GravityCompatImpl {

    GravityCompat$GravityCompatImplJellybeanMr1()
    {
        return;
    }

    public void apply(int p1, int p2, int p3, android.graphics.Rect p4, int p5, int p6, android.graphics.Rect p7, int p8)
    {
        android.support.v4.view.GravityCompatJellybeanMr1.apply(p1, p2, p3, p4, p5, p6, p7, p8);
        return;
    }

    public void apply(int p1, int p2, int p3, android.graphics.Rect p4, android.graphics.Rect p5, int p6)
    {
        android.support.v4.view.GravityCompatJellybeanMr1.apply(p1, p2, p3, p4, p5, p6);
        return;
    }

    public void applyDisplay(int p1, android.graphics.Rect p2, android.graphics.Rect p3, int p4)
    {
        android.support.v4.view.GravityCompatJellybeanMr1.applyDisplay(p1, p2, p3, p4);
        return;
    }

    public int getAbsoluteGravity(int p2, int p3)
    {
        return android.support.v4.view.GravityCompatJellybeanMr1.getAbsoluteGravity(p2, p3);
    }
}
package android.support.v4.view;
 class KeyEventCompat$BaseKeyEventVersionImpl implements android.support.v4.view.KeyEventCompat$KeyEventVersionImpl {
    private static final int META_ALL_MASK = 247;
    private static final int META_MODIFIER_MASK = 247;

    KeyEventCompat$BaseKeyEventVersionImpl()
    {
        return;
    }

    private static int metaStateFilterDirectionalModifiers(int p5, int p6, int p7, int p8, int p9)
    {
        int v1;
        int v2 = 1;
        if ((p6 & p7) == 0) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        int v0 = (p8 | p9);
        if ((p6 & v0) == 0) {
            v2 = 0;
        }
        if (v1 == 0) {
            if (v2 != 0) {
                p5 &= (p7 ^ -1);
            }
        } else {
            if (v2 == 0) {
                p5 &= (v0 ^ -1);
            } else {
                throw new IllegalArgumentException("bad arguments");
            }
        }
        return p5;
    }

    public boolean isCtrlPressed(android.view.KeyEvent p2)
    {
        return 0;
    }

    public boolean metaStateHasModifiers(int p5, int p6)
    {
        int v0 = 1;
        if (android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl.metaStateFilterDirectionalModifiers(android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl.metaStateFilterDirectionalModifiers((this.normalizeMetaState(p5) & 247), p6, 1, 64, 128), p6, 2, 16, 32) != p6) {
            v0 = 0;
        }
        return v0;
    }

    public boolean metaStateHasNoModifiers(int p2)
    {
        int v0_2;
        if ((this.normalizeMetaState(p2) & 247) != 0) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int normalizeMetaState(int p2)
    {
        if ((p2 & 192) != 0) {
            p2 |= 1;
        }
        if ((p2 & 48) != 0) {
            p2 |= 2;
        }
        return (p2 & 247);
    }
}
package android.support.v4.view;
 class LayoutInflaterCompat$LayoutInflaterCompatImplBase implements android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImpl {

    LayoutInflaterCompat$LayoutInflaterCompatImplBase()
    {
        return;
    }

    public android.support.v4.view.LayoutInflaterFactory getFactory(android.view.LayoutInflater p2)
    {
        return android.support.v4.view.LayoutInflaterCompatBase.getFactory(p2);
    }

    public void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        android.support.v4.view.LayoutInflaterCompatBase.setFactory(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class LayoutInflaterCompatHC$FactoryWrapperHC extends android.support.v4.view.LayoutInflaterCompatBase$FactoryWrapper implements android.view.LayoutInflater$Factory2 {

    LayoutInflaterCompatHC$FactoryWrapperHC(android.support.v4.view.LayoutInflaterFactory p1)
    {
        super(p1);
        return;
    }

    public android.view.View onCreateView(android.view.View p2, String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        return this.mDelegateFactory.onCreateView(p2, p3, p4, p5);
    }
}
package android.support.v4.view;
 class MarginLayoutParamsCompat$MarginLayoutParamsCompatImplBase implements android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl {

    MarginLayoutParamsCompat$MarginLayoutParamsCompatImplBase()
    {
        return;
    }

    public int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return 0;
    }

    public int getMarginEnd(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return p2.rightMargin;
    }

    public int getMarginStart(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return p2.leftMargin;
    }

    public boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return 0;
    }

    public void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        return;
    }

    public void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        return;
    }

    public void setMarginEnd(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        p1.rightMargin = p2;
        return;
    }

    public void setMarginStart(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        p1.leftMargin = p2;
        return;
    }
}
package android.support.v4.view;
 class MarginLayoutParamsCompat$MarginLayoutParamsCompatImplJbMr1 implements android.support.v4.view.MarginLayoutParamsCompat$MarginLayoutParamsCompatImpl {

    MarginLayoutParamsCompat$MarginLayoutParamsCompatImplJbMr1()
    {
        return;
    }

    public int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.getLayoutDirection(p2);
    }

    public int getMarginEnd(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.getMarginEnd(p2);
    }

    public int getMarginStart(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.getMarginStart(p2);
    }

    public boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams p2)
    {
        return android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.isMarginRelative(p2);
    }

    public void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.resolveLayoutDirection(p1, p2);
        return;
    }

    public void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.setLayoutDirection(p1, p2);
        return;
    }

    public void setMarginEnd(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.setMarginEnd(p1, p2);
        return;
    }

    public void setMarginStart(android.view.ViewGroup$MarginLayoutParams p1, int p2)
    {
        android.support.v4.view.MarginLayoutParamsCompatJellybeanMr1.setMarginStart(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompat$BaseMenuVersionImpl implements android.support.v4.view.MenuItemCompat$MenuVersionImpl {

    MenuItemCompat$BaseMenuVersionImpl()
    {
        return;
    }

    public boolean collapseActionView(android.view.MenuItem p2)
    {
        return 0;
    }

    public boolean expandActionView(android.view.MenuItem p2)
    {
        return 0;
    }

    public android.view.View getActionView(android.view.MenuItem p2)
    {
        return 0;
    }

    public boolean isActionViewExpanded(android.view.MenuItem p2)
    {
        return 0;
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p1, int p2)
    {
        return p1;
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p1, android.view.View p2)
    {
        return p1;
    }

    public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem p1, android.support.v4.view.MenuItemCompat$OnActionExpandListener p2)
    {
        return p1;
    }

    public void setShowAsAction(android.view.MenuItem p1, int p2)
    {
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompat$HoneycombMenuVersionImpl implements android.support.v4.view.MenuItemCompat$MenuVersionImpl {

    MenuItemCompat$HoneycombMenuVersionImpl()
    {
        return;
    }

    public boolean collapseActionView(android.view.MenuItem p2)
    {
        return 0;
    }

    public boolean expandActionView(android.view.MenuItem p2)
    {
        return 0;
    }

    public android.view.View getActionView(android.view.MenuItem p2)
    {
        return android.support.v4.view.MenuItemCompatHoneycomb.getActionView(p2);
    }

    public boolean isActionViewExpanded(android.view.MenuItem p2)
    {
        return 0;
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p2, int p3)
    {
        return android.support.v4.view.MenuItemCompatHoneycomb.setActionView(p2, p3);
    }

    public android.view.MenuItem setActionView(android.view.MenuItem p2, android.view.View p3)
    {
        return android.support.v4.view.MenuItemCompatHoneycomb.setActionView(p2, p3);
    }

    public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem p1, android.support.v4.view.MenuItemCompat$OnActionExpandListener p2)
    {
        return p1;
    }

    public void setShowAsAction(android.view.MenuItem p1, int p2)
    {
        android.support.v4.view.MenuItemCompatHoneycomb.setShowAsAction(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompat$IcsMenuVersionImpl$1 implements android.support.v4.view.MenuItemCompatIcs$SupportActionExpandProxy {
    final synthetic android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl this$0;
    final synthetic android.support.v4.view.MenuItemCompat$OnActionExpandListener val$listener;

    MenuItemCompat$IcsMenuVersionImpl$1(android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl p1, android.support.v4.view.MenuItemCompat$OnActionExpandListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public boolean onMenuItemActionCollapse(android.view.MenuItem p2)
    {
        return this.val$listener.onMenuItemActionCollapse(p2);
    }

    public boolean onMenuItemActionExpand(android.view.MenuItem p2)
    {
        return this.val$listener.onMenuItemActionExpand(p2);
    }
}
package android.support.v4.view;
 class MotionEventCompat$BaseMotionEventVersionImpl implements android.support.v4.view.MotionEventCompat$MotionEventVersionImpl {

    MotionEventCompat$BaseMotionEventVersionImpl()
    {
        return;
    }

    public float getAxisValue(android.view.MotionEvent p2, int p3)
    {
        return 0;
    }

    public float getAxisValue(android.view.MotionEvent p2, int p3, int p4)
    {
        return 0;
    }

    public int getButtonState(android.view.MotionEvent p2)
    {
        return 0;
    }
}
package android.support.v4.view;
public class PagerTabStrip extends android.support.v4.view.PagerTitleStrip {
    private static final int FULL_UNDERLINE_HEIGHT = 1;
    private static final int INDICATOR_HEIGHT = 3;
    private static final int MIN_PADDING_BOTTOM = 6;
    private static final int MIN_STRIP_HEIGHT = 32;
    private static final int MIN_TEXT_SPACING = 64;
    private static final int TAB_PADDING = 16;
    private static final int TAB_SPACING = 32;
    private static final String TAG = "PagerTabStrip";
    private boolean mDrawFullUnderline;
    private boolean mDrawFullUnderlineSet;
    private int mFullUnderlineHeight;
    private boolean mIgnoreTap;
    private int mIndicatorColor;
    private int mIndicatorHeight;
    private float mInitialMotionX;
    private float mInitialMotionY;
    private int mMinPaddingBottom;
    private int mMinStripHeight;
    private int mMinTextSpacing;
    private int mTabAlpha;
    private int mTabPadding;
    private final android.graphics.Paint mTabPaint;
    private final android.graphics.Rect mTempRect;
    private int mTouchSlop;

    public PagerTabStrip(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public PagerTabStrip(android.content.Context p8, android.util.AttributeSet p9)
    {
        super(p8, p9);
        super.mTabPaint = new android.graphics.Paint();
        super.mTempRect = new android.graphics.Rect();
        super.mTabAlpha = 255;
        super.mDrawFullUnderline = 0;
        super.mDrawFullUnderlineSet = 0;
        super.mIndicatorColor = super.mTextColor;
        super.mTabPaint.setColor(super.mIndicatorColor);
        float v0 = p8.getResources().getDisplayMetrics().density;
        super.mIndicatorHeight = ((int) ((1077936128 * v0) + 1056964608));
        super.mMinPaddingBottom = ((int) ((1086324736 * v0) + 1056964608));
        super.mMinTextSpacing = ((int) (1115684864 * v0));
        super.mTabPadding = ((int) ((1098907648 * v0) + 1056964608));
        super.mFullUnderlineHeight = ((int) ((1065353216 * v0) + 1056964608));
        super.mMinStripHeight = ((int) ((1107296256 * v0) + 1056964608));
        super.mTouchSlop = android.view.ViewConfiguration.get(p8).getScaledTouchSlop();
        super.setPadding(super.getPaddingLeft(), super.getPaddingTop(), super.getPaddingRight(), super.getPaddingBottom());
        super.setTextSpacing(super.getTextSpacing());
        super.setWillNotDraw(0);
        super.mPrevText.setFocusable(1);
        super.mPrevText.setOnClickListener(new android.support.v4.view.PagerTabStrip$1(super));
        super.mNextText.setFocusable(1);
        super.mNextText.setOnClickListener(new android.support.v4.view.PagerTabStrip$2(super));
        if (super.getBackground() == null) {
            super.mDrawFullUnderline = 1;
        }
        return;
    }

    public boolean getDrawFullUnderline()
    {
        return this.mDrawFullUnderline;
    }

    int getMinHeight()
    {
        return Math.max(super.getMinHeight(), this.mMinStripHeight);
    }

    public int getTabIndicatorColor()
    {
        return this.mIndicatorColor;
    }

    protected void onDraw(android.graphics.Canvas p13)
    {
        super.onDraw(p13);
        int v7 = this.getHeight();
        int v6 = v7;
        int v8 = (this.mCurrText.getLeft() - this.mTabPadding);
        int v9 = (this.mCurrText.getRight() + this.mTabPadding);
        int v10 = (v6 - this.mIndicatorHeight);
        this.mTabPaint.setColor(((this.mTabAlpha << 24) | (this.mIndicatorColor & 16777215)));
        p13.drawRect(((float) v8), ((float) v10), ((float) v9), ((float) v6), this.mTabPaint);
        if (this.mDrawFullUnderline) {
            this.mTabPaint.setColor((-16777216 | (this.mIndicatorColor & 16777215)));
            p13.drawRect(((float) this.getPaddingLeft()), ((float) (v7 - this.mFullUnderlineHeight)), ((float) (this.getWidth() - this.getPaddingRight())), ((float) v7), this.mTabPaint);
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p7)
    {
        android.support.v4.view.ViewPager v3_0 = 0;
        int v0 = p7.getAction();
        if ((v0 == 0) || (!this.mIgnoreTap)) {
            float v1 = p7.getX();
            float v2 = p7.getY();
            switch (v0) {
                case 0:
                    this.mInitialMotionX = v1;
                    this.mInitialMotionY = v2;
                    this.mIgnoreTap = 0;
                    break;
                case 1:
                    if (v1 >= ((float) (this.mCurrText.getLeft() - this.mTabPadding))) {
                        if (v1 <= ((float) (this.mCurrText.getRight() + this.mTabPadding))) {
                        } else {
                            this.mPager.setCurrentItem((this.mPager.getCurrentItem() + 1));
                        }
                    } else {
                        this.mPager.setCurrentItem((this.mPager.getCurrentItem() - 1));
                    }
                    break;
                case 2:
                    if ((Math.abs((v1 - this.mInitialMotionX)) <= ((float) this.mTouchSlop)) && (Math.abs((v2 - this.mInitialMotionY)) <= ((float) this.mTouchSlop))) {
                    } else {
                        this.mIgnoreTap = 1;
                    }
                    break;
            }
            v3_0 = 1;
        }
        return v3_0;
    }

    public void setBackgroundColor(int p2)
    {
        super.setBackgroundColor(p2);
        if (!this.mDrawFullUnderlineSet) {
            int v0_3;
            if ((-16777216 & p2) != 0) {
                v0_3 = 0;
            } else {
                v0_3 = 1;
            }
            this.mDrawFullUnderline = v0_3;
        }
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable p2)
    {
        super.setBackgroundDrawable(p2);
        if (!this.mDrawFullUnderlineSet) {
            int v0_1;
            if (p2 != null) {
                v0_1 = 0;
            } else {
                v0_1 = 1;
            }
            this.mDrawFullUnderline = v0_1;
        }
        return;
    }

    public void setBackgroundResource(int p2)
    {
        super.setBackgroundResource(p2);
        if (!this.mDrawFullUnderlineSet) {
            int v0_1;
            if (p2 != 0) {
                v0_1 = 0;
            } else {
                v0_1 = 1;
            }
            this.mDrawFullUnderline = v0_1;
        }
        return;
    }

    public void setDrawFullUnderline(boolean p2)
    {
        this.mDrawFullUnderline = p2;
        this.mDrawFullUnderlineSet = 1;
        this.invalidate();
        return;
    }

    public void setPadding(int p2, int p3, int p4, int p5)
    {
        if (p5 < this.mMinPaddingBottom) {
            p5 = this.mMinPaddingBottom;
        }
        super.setPadding(p2, p3, p4, p5);
        return;
    }

    public void setTabIndicatorColor(int p3)
    {
        this.mIndicatorColor = p3;
        this.mTabPaint.setColor(this.mIndicatorColor);
        this.invalidate();
        return;
    }

    public void setTabIndicatorColorResource(int p2)
    {
        this.setTabIndicatorColor(android.support.v4.content.ContextCompat.getColor(this.getContext(), p2));
        return;
    }

    public void setTextSpacing(int p2)
    {
        if (p2 < this.mMinTextSpacing) {
            p2 = this.mMinTextSpacing;
        }
        super.setTextSpacing(p2);
        return;
    }

    void updateTextPositions(int p8, float p9, boolean p10)
    {
        android.graphics.Rect v2 = this.mTempRect;
        int v0 = this.getHeight();
        int v4 = (v0 - this.mIndicatorHeight);
        v2.set((this.mCurrText.getLeft() - this.mTabPadding), v4, (this.mCurrText.getRight() + this.mTabPadding), v0);
        super.updateTextPositions(p8, p9, p10);
        this.mTabAlpha = ((int) ((Math.abs((p9 - 1056964608)) * 1073741824) * 1132396544));
        v2.union((this.mCurrText.getLeft() - this.mTabPadding), v4, (this.mCurrText.getRight() + this.mTabPadding), v0);
        this.invalidate(v2);
        return;
    }
}
package android.support.v4.view;
 class PagerTitleStrip$PageListener extends android.database.DataSetObserver implements android.support.v4.view.ViewPager$OnPageChangeListener, android.support.v4.view.ViewPager$OnAdapterChangeListener {
    private int mScrollState;
    final synthetic android.support.v4.view.PagerTitleStrip this$0;

    PagerTitleStrip$PageListener(android.support.v4.view.PagerTitleStrip p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onAdapterChanged(android.support.v4.view.ViewPager p2, android.support.v4.view.PagerAdapter p3, android.support.v4.view.PagerAdapter p4)
    {
        this.this$0.updateAdapter(p3, p4);
        return;
    }

    public void onChanged()
    {
        float v0 = 0;
        this.this$0.updateText(this.this$0.mPager.getCurrentItem(), this.this$0.mPager.getAdapter());
        if (this.this$0.mLastKnownPositionOffset >= 0) {
            v0 = this.this$0.mLastKnownPositionOffset;
        }
        this.this$0.updateTextPositions(this.this$0.mPager.getCurrentItem(), v0, 1);
        return;
    }

    public void onPageScrollStateChanged(int p1)
    {
        this.mScrollState = p1;
        return;
    }

    public void onPageScrolled(int p3, float p4, int p5)
    {
        if (p4 > 1056964608) {
            p3++;
        }
        this.this$0.updateTextPositions(p3, p4, 0);
        return;
    }

    public void onPageSelected(int p5)
    {
        float v0 = 0;
        if (this.mScrollState == 0) {
            this.this$0.updateText(this.this$0.mPager.getCurrentItem(), this.this$0.mPager.getAdapter());
            if (this.this$0.mLastKnownPositionOffset >= 0) {
                v0 = this.this$0.mLastKnownPositionOffset;
            }
            this.this$0.updateTextPositions(this.this$0.mPager.getCurrentItem(), v0, 1);
        }
        return;
    }
}
package android.support.v4.view;
 class PagerTitleStrip$PagerTitleStripImplBase implements android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl {

    PagerTitleStrip$PagerTitleStripImplBase()
    {
        return;
    }

    public void setSingleLineAllCaps(android.widget.TextView p1)
    {
        p1.setSingleLine();
        return;
    }
}
package android.support.v4.view;
 class PagerTitleStrip$PagerTitleStripImplIcs implements android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl {

    PagerTitleStrip$PagerTitleStripImplIcs()
    {
        return;
    }

    public void setSingleLineAllCaps(android.widget.TextView p1)
    {
        android.support.v4.view.PagerTitleStripIcs.setSingleLineAllCaps(p1);
        return;
    }
}
package android.support.v4.view;
 class PointerIconCompat$BasePointerIconCompatImpl implements android.support.v4.view.PointerIconCompat$PointerIconCompatImpl {

    PointerIconCompat$BasePointerIconCompatImpl()
    {
        return;
    }

    public Object create(android.graphics.Bitmap p2, float p3, float p4)
    {
        return 0;
    }

    public Object getSystemIcon(android.content.Context p2, int p3)
    {
        return 0;
    }

    public Object load(android.content.res.Resources p2, int p3)
    {
        return 0;
    }
}
package android.support.v4.view;
 class ScaleGestureDetectorCompat$BaseScaleGestureDetectorImpl implements android.support.v4.view.ScaleGestureDetectorCompat$ScaleGestureDetectorImpl {

    ScaleGestureDetectorCompat$BaseScaleGestureDetectorImpl()
    {
        return;
    }

    public boolean isQuickScaleEnabled(Object p2)
    {
        return 0;
    }

    public void setQuickScaleEnabled(Object p1, boolean p2)
    {
        return;
    }
}
package android.support.v4.view;
 class ScaleGestureDetectorCompat$ScaleGestureDetectorCompatKitKatImpl implements android.support.v4.view.ScaleGestureDetectorCompat$ScaleGestureDetectorImpl {

    ScaleGestureDetectorCompat$ScaleGestureDetectorCompatKitKatImpl()
    {
        return;
    }

    public boolean isQuickScaleEnabled(Object p2)
    {
        return android.support.v4.view.ScaleGestureDetectorCompatKitKat.isQuickScaleEnabled(p2);
    }

    public void setQuickScaleEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.ScaleGestureDetectorCompatKitKat.setQuickScaleEnabled(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class VelocityTrackerCompat$BaseVelocityTrackerVersionImpl implements android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl {

    VelocityTrackerCompat$BaseVelocityTrackerVersionImpl()
    {
        return;
    }

    public float getXVelocity(android.view.VelocityTracker p2, int p3)
    {
        return p2.getXVelocity();
    }

    public float getYVelocity(android.view.VelocityTracker p2, int p3)
    {
        return p2.getYVelocity();
    }
}
package android.support.v4.view;
 class VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl implements android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl {

    VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl()
    {
        return;
    }

    public float getXVelocity(android.view.VelocityTracker p2, int p3)
    {
        return android.support.v4.view.VelocityTrackerCompatHoneycomb.getXVelocity(p2, p3);
    }

    public float getYVelocity(android.view.VelocityTracker p2, int p3)
    {
        return android.support.v4.view.VelocityTrackerCompatHoneycomb.getYVelocity(p2, p3);
    }
}
package android.support.v4.view;
 class ViewCompat$BaseViewCompatImpl implements android.support.v4.view.ViewCompat$ViewCompatImpl {
    private static reflect.Method sChildrenDrawingOrderMethod;
    private reflect.Method mDispatchFinishTemporaryDetach;
    private reflect.Method mDispatchStartTemporaryDetach;
    private boolean mTempDetachBound;
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap;

    ViewCompat$BaseViewCompatImpl()
    {
        this.mViewPropertyAnimatorCompatMap = 0;
        return;
    }

    private void bindTempDetach()
    {
        try {
            Class[] v3_2 = new Class[0];
            this.mDispatchStartTemporaryDetach = android.view.View.getDeclaredMethod("dispatchStartTemporaryDetach", v3_2);
            Class[] v3_0 = new Class[0];
            this.mDispatchFinishTemporaryDetach = android.view.View.getDeclaredMethod("dispatchFinishTemporaryDetach", v3_0);
        } catch (NoSuchMethodException v0) {
            android.util.Log.e("ViewCompat", "Couldn\'t find method", v0);
        }
        this.mTempDetachBound = 1;
        return;
    }

    private boolean canScrollingViewScrollHorizontally(android.support.v4.view.ScrollingView p7, int p8)
    {
        int v2 = 1;
        int v0 = p7.computeHorizontalScrollOffset();
        int v1 = (p7.computeHorizontalScrollRange() - p7.computeHorizontalScrollExtent());
        if (v1 != 0) {
            if (p8 >= 0) {
                if (v0 >= (v1 - 1)) {
                    v2 = 0;
                }
            } else {
                if (v0 <= 0) {
                    v2 = 0;
                }
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    private boolean canScrollingViewScrollVertically(android.support.v4.view.ScrollingView p7, int p8)
    {
        int v2 = 1;
        int v0 = p7.computeVerticalScrollOffset();
        int v1 = (p7.computeVerticalScrollRange() - p7.computeVerticalScrollExtent());
        if (v1 != 0) {
            if (p8 >= 0) {
                if (v0 >= (v1 - 1)) {
                    v2 = 0;
                }
            } else {
                if (v0 <= 0) {
                    v2 = 0;
                }
            }
        } else {
            v2 = 0;
        }
        return v2;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View p2)
    {
        return new android.support.v4.view.ViewPropertyAnimatorCompat(p2);
    }

    public boolean canScrollHorizontally(android.view.View p2, int p3)
    {
        if ((!(p2 instanceof android.support.v4.view.ScrollingView)) || (!this.canScrollingViewScrollHorizontally(((android.support.v4.view.ScrollingView) p2), p3))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean canScrollVertically(android.view.View p2, int p3)
    {
        if ((!(p2 instanceof android.support.v4.view.ScrollingView)) || (!this.canScrollingViewScrollVertically(((android.support.v4.view.ScrollingView) p2), p3))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int combineMeasuredStates(int p2, int p3)
    {
        return (p2 | p3);
    }

    public android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View p1, android.support.v4.view.WindowInsetsCompat p2)
    {
        return p2;
    }

    public void dispatchFinishTemporaryDetach(android.view.View p4)
    {
        if (!this.mTempDetachBound) {
            this.bindTempDetach();
        }
        if (this.mDispatchFinishTemporaryDetach == null) {
            p4.onFinishTemporaryDetach();
        } else {
            try {
                String v2_2 = new Object[0];
                this.mDispatchFinishTemporaryDetach.invoke(p4, v2_2);
            } catch (Exception v0) {
                android.util.Log.d("ViewCompat", "Error calling dispatchFinishTemporaryDetach", v0);
            }
        }
        return;
    }

    public boolean dispatchNestedFling(android.view.View p2, float p3, float p4, boolean p5)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).dispatchNestedFling(p3, p4, p5);
        }
        return v0_1;
    }

    public boolean dispatchNestedPreFling(android.view.View p2, float p3, float p4)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).dispatchNestedPreFling(p3, p4);
        }
        return v0_1;
    }

    public boolean dispatchNestedPreScroll(android.view.View p2, int p3, int p4, int[] p5, int[] p6)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).dispatchNestedPreScroll(p3, p4, p5, p6);
        }
        return v0_1;
    }

    public boolean dispatchNestedScroll(android.view.View p7, int p8, int p9, int p10, int p11, int[] p12)
    {
        int v0_1;
        if (!(p7 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p7).dispatchNestedScroll(p8, p9, p10, p11, p12);
        }
        return v0_1;
    }

    public void dispatchStartTemporaryDetach(android.view.View p4)
    {
        if (!this.mTempDetachBound) {
            this.bindTempDetach();
        }
        if (this.mDispatchStartTemporaryDetach == null) {
            p4.onStartTemporaryDetach();
        } else {
            try {
                String v2_2 = new Object[0];
                this.mDispatchStartTemporaryDetach.invoke(p4, v2_2);
            } catch (Exception v0) {
                android.util.Log.d("ViewCompat", "Error calling dispatchStartTemporaryDetach", v0);
            }
        }
        return;
    }

    public int getAccessibilityLiveRegion(android.view.View p2)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View p2)
    {
        return 0;
    }

    public float getAlpha(android.view.View p2)
    {
        return 1065353216;
    }

    public android.content.res.ColorStateList getBackgroundTintList(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.getBackgroundTintList(p2);
    }

    public android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.getBackgroundTintMode(p2);
    }

    public android.graphics.Rect getClipBounds(android.view.View p2)
    {
        return 0;
    }

    public android.view.Display getDisplay(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.getDisplay(p2);
    }

    public float getElevation(android.view.View p2)
    {
        return 0;
    }

    public boolean getFitsSystemWindows(android.view.View p2)
    {
        return 0;
    }

    long getFrameTime()
    {
        return 10;
    }

    public int getImportantForAccessibility(android.view.View p2)
    {
        return 0;
    }

    public int getLabelFor(android.view.View p2)
    {
        return 0;
    }

    public int getLayerType(android.view.View p2)
    {
        return 0;
    }

    public int getLayoutDirection(android.view.View p2)
    {
        return 0;
    }

    public android.graphics.Matrix getMatrix(android.view.View p2)
    {
        return 0;
    }

    public int getMeasuredHeightAndState(android.view.View p2)
    {
        return p2.getMeasuredHeight();
    }

    public int getMeasuredState(android.view.View p2)
    {
        return 0;
    }

    public int getMeasuredWidthAndState(android.view.View p2)
    {
        return p2.getMeasuredWidth();
    }

    public int getMinimumHeight(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.getMinimumHeight(p2);
    }

    public int getMinimumWidth(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.getMinimumWidth(p2);
    }

    public int getPaddingEnd(android.view.View p2)
    {
        return p2.getPaddingRight();
    }

    public int getPaddingStart(android.view.View p2)
    {
        return p2.getPaddingLeft();
    }

    public android.view.ViewParent getParentForAccessibility(android.view.View p2)
    {
        return p2.getParent();
    }

    public float getPivotX(android.view.View p2)
    {
        return 0;
    }

    public float getPivotY(android.view.View p2)
    {
        return 0;
    }

    public float getRotation(android.view.View p2)
    {
        return 0;
    }

    public float getRotationX(android.view.View p2)
    {
        return 0;
    }

    public float getRotationY(android.view.View p2)
    {
        return 0;
    }

    public float getScaleX(android.view.View p2)
    {
        return 0;
    }

    public float getScaleY(android.view.View p2)
    {
        return 0;
    }

    public int getScrollIndicators(android.view.View p2)
    {
        return 0;
    }

    public String getTransitionName(android.view.View p2)
    {
        return 0;
    }

    public float getTranslationX(android.view.View p2)
    {
        return 0;
    }

    public float getTranslationY(android.view.View p2)
    {
        return 0;
    }

    public float getTranslationZ(android.view.View p2)
    {
        return 0;
    }

    public int getWindowSystemUiVisibility(android.view.View p2)
    {
        return 0;
    }

    public float getX(android.view.View p2)
    {
        return ((float) p2.getLeft());
    }

    public float getY(android.view.View p2)
    {
        return ((float) p2.getTop());
    }

    public float getZ(android.view.View p3)
    {
        return (this.getTranslationZ(p3) + this.getElevation(p3));
    }

    public boolean hasAccessibilityDelegate(android.view.View p2)
    {
        return 0;
    }

    public boolean hasNestedScrollingParent(android.view.View p2)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).hasNestedScrollingParent();
        }
        return v0_1;
    }

    public boolean hasOnClickListeners(android.view.View p2)
    {
        return 0;
    }

    public boolean hasOverlappingRendering(android.view.View p2)
    {
        return 1;
    }

    public boolean hasTransientState(android.view.View p2)
    {
        return 0;
    }

    public boolean isAttachedToWindow(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.isAttachedToWindow(p2);
    }

    public boolean isImportantForAccessibility(android.view.View p2)
    {
        return 1;
    }

    public boolean isInLayout(android.view.View p2)
    {
        return 0;
    }

    public boolean isLaidOut(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatBase.isLaidOut(p2);
    }

    public boolean isLayoutDirectionResolved(android.view.View p2)
    {
        return 0;
    }

    public boolean isNestedScrollingEnabled(android.view.View p2)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).isNestedScrollingEnabled();
        }
        return v0_1;
    }

    public boolean isPaddingRelative(android.view.View p2)
    {
        return 0;
    }

    public void jumpDrawablesToCurrentState(android.view.View p1)
    {
        return;
    }

    public void offsetLeftAndRight(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatBase.offsetLeftAndRight(p1, p2);
        return;
    }

    public void offsetTopAndBottom(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatBase.offsetTopAndBottom(p1, p2);
        return;
    }

    public android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View p1, android.support.v4.view.WindowInsetsCompat p2)
    {
        return p2;
    }

    public void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p1, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        return;
    }

    public boolean performAccessibilityAction(android.view.View p2, int p3, android.os.Bundle p4)
    {
        return 0;
    }

    public void postInvalidateOnAnimation(android.view.View p1)
    {
        p1.invalidate();
        return;
    }

    public void postInvalidateOnAnimation(android.view.View p1, int p2, int p3, int p4, int p5)
    {
        p1.invalidate(p2, p3, p4, p5);
        return;
    }

    public void postOnAnimation(android.view.View p3, Runnable p4)
    {
        p3.postDelayed(p4, this.getFrameTime());
        return;
    }

    public void postOnAnimationDelayed(android.view.View p4, Runnable p5, long p6)
    {
        p4.postDelayed(p5, (this.getFrameTime() + p6));
        return;
    }

    public void requestApplyInsets(android.view.View p1)
    {
        return;
    }

    public int resolveSizeAndState(int p2, int p3, int p4)
    {
        return android.view.View.resolveSize(p2, p3);
    }

    public void setAccessibilityDelegate(android.view.View p1, android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return;
    }

    public void setAccessibilityLiveRegion(android.view.View p1, int p2)
    {
        return;
    }

    public void setActivated(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setAlpha(android.view.View p1, float p2)
    {
        return;
    }

    public void setBackground(android.view.View p1, android.graphics.drawable.Drawable p2)
    {
        p1.setBackgroundDrawable(p2);
        return;
    }

    public void setBackgroundTintList(android.view.View p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.view.ViewCompatBase.setBackgroundTintList(p1, p2);
        return;
    }

    public void setBackgroundTintMode(android.view.View p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.view.ViewCompatBase.setBackgroundTintMode(p1, p2);
        return;
    }

    public void setChildrenDrawingOrderEnabled(android.view.ViewGroup p8, boolean p9)
    {
        if (android.support.v4.view.ViewCompat$BaseViewCompatImpl.sChildrenDrawingOrderMethod == null) {
            try {
                int v3_2 = new Class[1];
                v3_2[0] = Boolean.TYPE;
                android.support.v4.view.ViewCompat$BaseViewCompatImpl.sChildrenDrawingOrderMethod = android.view.ViewGroup.getDeclaredMethod("setChildrenDrawingOrderEnabled", v3_2);
            } catch (reflect.InvocationTargetException v0_0) {
                android.util.Log.e("ViewCompat", "Unable to find childrenDrawingOrderEnabled", v0_0);
            }
            android.support.v4.view.ViewCompat$BaseViewCompatImpl.sChildrenDrawingOrderMethod.setAccessible(1);
        }
        try {
            String v2_2 = new Object[1];
            v2_2[0] = Boolean.valueOf(p9);
            android.support.v4.view.ViewCompat$BaseViewCompatImpl.sChildrenDrawingOrderMethod.invoke(p8, v2_2);
        } catch (reflect.InvocationTargetException v0_3) {
            android.util.Log.e("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", v0_3);
        } catch (reflect.InvocationTargetException v0_2) {
            android.util.Log.e("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", v0_2);
        } catch (reflect.InvocationTargetException v0_1) {
            android.util.Log.e("ViewCompat", "Unable to invoke childrenDrawingOrderEnabled", v0_1);
        }
        return;
    }

    public void setClipBounds(android.view.View p1, android.graphics.Rect p2)
    {
        return;
    }

    public void setElevation(android.view.View p1, float p2)
    {
        return;
    }

    public void setFitsSystemWindows(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setHasTransientState(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setImportantForAccessibility(android.view.View p1, int p2)
    {
        return;
    }

    public void setLabelFor(android.view.View p1, int p2)
    {
        return;
    }

    public void setLayerPaint(android.view.View p1, android.graphics.Paint p2)
    {
        return;
    }

    public void setLayerType(android.view.View p1, int p2, android.graphics.Paint p3)
    {
        return;
    }

    public void setLayoutDirection(android.view.View p1, int p2)
    {
        return;
    }

    public void setNestedScrollingEnabled(android.view.View p2, boolean p3)
    {
        if ((p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            ((android.support.v4.view.NestedScrollingChild) p2).setNestedScrollingEnabled(p3);
        }
        return;
    }

    public void setOnApplyWindowInsetsListener(android.view.View p1, android.support.v4.view.OnApplyWindowInsetsListener p2)
    {
        return;
    }

    public void setPaddingRelative(android.view.View p1, int p2, int p3, int p4, int p5)
    {
        p1.setPadding(p2, p3, p4, p5);
        return;
    }

    public void setPivotX(android.view.View p1, float p2)
    {
        return;
    }

    public void setPivotY(android.view.View p1, float p2)
    {
        return;
    }

    public void setPointerIcon(android.view.View p1, android.support.v4.view.PointerIconCompat p2)
    {
        return;
    }

    public void setRotation(android.view.View p1, float p2)
    {
        return;
    }

    public void setRotationX(android.view.View p1, float p2)
    {
        return;
    }

    public void setRotationY(android.view.View p1, float p2)
    {
        return;
    }

    public void setSaveFromParentEnabled(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setScaleX(android.view.View p1, float p2)
    {
        return;
    }

    public void setScaleY(android.view.View p1, float p2)
    {
        return;
    }

    public void setScrollIndicators(android.view.View p1, int p2)
    {
        return;
    }

    public void setScrollIndicators(android.view.View p1, int p2, int p3)
    {
        return;
    }

    public void setTransitionName(android.view.View p1, String p2)
    {
        return;
    }

    public void setTranslationX(android.view.View p1, float p2)
    {
        return;
    }

    public void setTranslationY(android.view.View p1, float p2)
    {
        return;
    }

    public void setTranslationZ(android.view.View p1, float p2)
    {
        return;
    }

    public void setX(android.view.View p1, float p2)
    {
        return;
    }

    public void setY(android.view.View p1, float p2)
    {
        return;
    }

    public void setZ(android.view.View p1, float p2)
    {
        return;
    }

    public boolean startNestedScroll(android.view.View p2, int p3)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingChild) p2).startNestedScroll(p3);
        }
        return v0_1;
    }

    public void stopNestedScroll(android.view.View p2)
    {
        if ((p2 instanceof android.support.v4.view.NestedScrollingChild)) {
            ((android.support.v4.view.NestedScrollingChild) p2).stopNestedScroll();
        }
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$LollipopViewCompatImpl$1 implements android.support.v4.view.ViewCompatLollipop$OnApplyWindowInsetsListenerBridge {
    final synthetic android.support.v4.view.ViewCompat$LollipopViewCompatImpl this$0;
    final synthetic android.support.v4.view.OnApplyWindowInsetsListener val$listener;

    ViewCompat$LollipopViewCompatImpl$1(android.support.v4.view.ViewCompat$LollipopViewCompatImpl p1, android.support.v4.view.OnApplyWindowInsetsListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public Object onApplyWindowInsets(android.view.View p3, Object p4)
    {
        return android.support.v4.view.WindowInsetsCompat.unwrap(this.val$listener.onApplyWindowInsets(p3, android.support.v4.view.WindowInsetsCompat.wrap(p4)));
    }
}
package android.support.v4.view;
 class ViewConfigurationCompat$BaseViewConfigurationVersionImpl implements android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl {

    ViewConfigurationCompat$BaseViewConfigurationVersionImpl()
    {
        return;
    }

    public boolean hasPermanentMenuKey(android.view.ViewConfiguration p2)
    {
        return 1;
    }
}
package android.support.v4.view;
 class ViewGroupCompat$ViewGroupCompatStubImpl implements android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl {

    ViewGroupCompat$ViewGroupCompatStubImpl()
    {
        return;
    }

    public int getLayoutMode(android.view.ViewGroup p2)
    {
        return 0;
    }

    public int getNestedScrollAxes(android.view.ViewGroup p2)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingParent) p2).getNestedScrollAxes();
        }
        return v0_1;
    }

    public boolean isTransitionGroup(android.view.ViewGroup p2)
    {
        return 0;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return 1;
    }

    public void setLayoutMode(android.view.ViewGroup p1, int p2)
    {
        return;
    }

    public void setMotionEventSplittingEnabled(android.view.ViewGroup p1, boolean p2)
    {
        return;
    }

    public void setTransitionGroup(android.view.ViewGroup p1, boolean p2)
    {
        return;
    }
}
package android.support.v4.view;
 class ViewPager$4 implements android.support.v4.view.OnApplyWindowInsetsListener {
    private final android.graphics.Rect mTempRect;
    final synthetic android.support.v4.view.ViewPager this$0;

    ViewPager$4(android.support.v4.view.ViewPager p2)
    {
        this.this$0 = p2;
        this.mTempRect = new android.graphics.Rect();
        return;
    }

    public android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View p10, android.support.v4.view.WindowInsetsCompat p11)
    {
        android.support.v4.view.WindowInsetsCompat v0 = android.support.v4.view.ViewCompat.onApplyWindowInsets(p10, p11);
        if (!v0.isConsumed()) {
            android.graphics.Rect v4 = this.mTempRect;
            v4.left = v0.getSystemWindowInsetLeft();
            v4.top = v0.getSystemWindowInsetTop();
            v4.right = v0.getSystemWindowInsetRight();
            v4.bottom = v0.getSystemWindowInsetBottom();
            int v3 = 0;
            int v2 = this.this$0.getChildCount();
            while (v3 < v2) {
                android.support.v4.view.WindowInsetsCompat v1 = android.support.v4.view.ViewCompat.dispatchApplyWindowInsets(this.this$0.getChildAt(v3), v0);
                v4.left = Math.min(v1.getSystemWindowInsetLeft(), v4.left);
                v4.top = Math.min(v1.getSystemWindowInsetTop(), v4.top);
                v4.right = Math.min(v1.getSystemWindowInsetRight(), v4.right);
                v4.bottom = Math.min(v1.getSystemWindowInsetBottom(), v4.bottom);
                v3++;
            }
            v0 = v0.replaceSystemWindowInsets(v4.left, v4.top, v4.right, v4.bottom);
        }
        return v0;
    }
}
package android.support.v4.view;
 class ViewPager$MyAccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {
    final synthetic android.support.v4.view.ViewPager this$0;

    ViewPager$MyAccessibilityDelegate(android.support.v4.view.ViewPager p1)
    {
        this.this$0 = p1;
        return;
    }

    private boolean canScroll()
    {
        int v0 = 1;
        if ((this.this$0.mAdapter == null) || (this.this$0.mAdapter.getCount() <= 1)) {
            v0 = 0;
        }
        return v0;
    }

    public void onInitializeAccessibilityEvent(android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        super.onInitializeAccessibilityEvent(p4, p5);
        p5.setClassName(android.support.v4.view.ViewPager.getName());
        android.support.v4.view.accessibility.AccessibilityRecordCompat v0 = android.support.v4.view.accessibility.AccessibilityEventCompat.asRecord(p5);
        v0.setScrollable(this.canScroll());
        if ((p5.getEventType() == 4096) && (this.this$0.mAdapter != null)) {
            v0.setItemCount(this.this$0.mAdapter.getCount());
            v0.setFromIndex(this.this$0.mCurItem);
            v0.setToIndex(this.this$0.mCurItem);
        }
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        super.onInitializeAccessibilityNodeInfo(p3, p4);
        p4.setClassName(android.support.v4.view.ViewPager.getName());
        p4.setScrollable(this.canScroll());
        if (this.this$0.canScrollHorizontally(1)) {
            p4.addAction(4096);
        }
        if (this.this$0.canScrollHorizontally(-1)) {
            p4.addAction(8192);
        }
        return;
    }

    public boolean performAccessibilityAction(android.view.View p5, int p6, android.os.Bundle p7)
    {
        android.support.v4.view.ViewPager v0 = 1;
        if (!super.performAccessibilityAction(p5, p6, p7)) {
            switch (p6) {
                case 4096:
                    if (!this.this$0.canScrollHorizontally(1)) {
                        v0 = 0;
                    } else {
                        this.this$0.setCurrentItem((this.this$0.mCurItem + 1));
                    }
                    break;
                case 8192:
                    if (!this.this$0.canScrollHorizontally(-1)) {
                        v0 = 0;
                    } else {
                        this.this$0.setCurrentItem((this.this$0.mCurItem - 1));
                    }
                    break;
                default:
                    v0 = 0;
            }
        }
        return v0;
    }
}
package android.support.v4.view;
final class ViewPager$SavedState$1 implements android.support.v4.os.ParcelableCompatCreatorCallbacks {

    ViewPager$SavedState$1()
    {
        return;
    }

    public android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return new android.support.v4.view.ViewPager$SavedState(p2, p3);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.createFromParcel(p2, p3);
    }

    public android.support.v4.view.ViewPager$SavedState[] newArray(int p2)
    {
        android.support.v4.view.ViewPager$SavedState[] v0 = new android.support.v4.view.ViewPager$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.view;
public class ViewPager$SavedState extends android.support.v4.view.AbsSavedState {
    public static final android.os.Parcelable$Creator CREATOR;
    android.os.Parcelable adapterState;
    ClassLoader loader;
    int position;

    static ViewPager$SavedState()
    {
        android.support.v4.view.ViewPager$SavedState.CREATOR = android.support.v4.os.ParcelableCompat.newCreator(new android.support.v4.view.ViewPager$SavedState$1());
        return;
    }

    ViewPager$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        super(p2, p3);
        if (p3 == null) {
            p3 = super.getClass().getClassLoader();
        }
        super.position = p2.readInt();
        super.adapterState = p2.readParcelable(p3);
        super.loader = p3;
        return;
    }

    public ViewPager$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("FragmentPager.SavedState{").append(Integer.toHexString(System.identityHashCode(this))).append(" position=").append(this.position).append("}").toString();
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeInt(this.position);
        p2.writeParcelable(this.adapterState, p3);
        return;
    }
}
package android.support.v4.view;
public class ViewPager$SimpleOnPageChangeListener implements android.support.v4.view.ViewPager$OnPageChangeListener {

    public ViewPager$SimpleOnPageChangeListener()
    {
        return;
    }

    public void onPageScrollStateChanged(int p1)
    {
        return;
    }

    public void onPageScrolled(int p1, float p2, int p3)
    {
        return;
    }

    public void onPageSelected(int p1)
    {
        return;
    }
}
package android.support.v4.view;
 class ViewParentCompat$ViewParentCompatStubImpl implements android.support.v4.view.ViewParentCompat$ViewParentCompatImpl {

    ViewParentCompat$ViewParentCompatStubImpl()
    {
        return;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        return;
    }

    public boolean onNestedFling(android.view.ViewParent p2, android.view.View p3, float p4, float p5, boolean p6)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingParent) p2).onNestedFling(p3, p4, p5, p6);
        }
        return v0_1;
    }

    public boolean onNestedPreFling(android.view.ViewParent p2, android.view.View p3, float p4, float p5)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingParent) p2).onNestedPreFling(p3, p4, p5);
        }
        return v0_1;
    }

    public void onNestedPreScroll(android.view.ViewParent p2, android.view.View p3, int p4, int p5, int[] p6)
    {
        if ((p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            ((android.support.v4.view.NestedScrollingParent) p2).onNestedPreScroll(p3, p4, p5, p6);
        }
        return;
    }

    public void onNestedScroll(android.view.ViewParent p7, android.view.View p8, int p9, int p10, int p11, int p12)
    {
        if ((p7 instanceof android.support.v4.view.NestedScrollingParent)) {
            ((android.support.v4.view.NestedScrollingParent) p7).onNestedScroll(p8, p9, p10, p11, p12);
        }
        return;
    }

    public void onNestedScrollAccepted(android.view.ViewParent p2, android.view.View p3, android.view.View p4, int p5)
    {
        if ((p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            ((android.support.v4.view.NestedScrollingParent) p2).onNestedScrollAccepted(p3, p4, p5);
        }
        return;
    }

    public boolean onStartNestedScroll(android.view.ViewParent p2, android.view.View p3, android.view.View p4, int p5)
    {
        int v0_1;
        if (!(p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            v0_1 = 0;
        } else {
            v0_1 = ((android.support.v4.view.NestedScrollingParent) p2).onStartNestedScroll(p3, p4, p5);
        }
        return v0_1;
    }

    public void onStopNestedScroll(android.view.ViewParent p2, android.view.View p3)
    {
        if ((p2 instanceof android.support.v4.view.NestedScrollingParent)) {
            ((android.support.v4.view.NestedScrollingParent) p2).onStopNestedScroll(p3);
        }
        return;
    }

    public boolean requestSendAccessibilityEvent(android.view.ViewParent p4, android.view.View p5, android.view.accessibility.AccessibilityEvent p6)
    {
        int v1_1;
        if (p5 != null) {
            ((android.view.accessibility.AccessibilityManager) p5.getContext().getSystemService("accessibility")).sendAccessibilityEvent(p6);
            v1_1 = 1;
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl implements android.support.v4.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorCompatImpl {
    java.util.WeakHashMap mStarterMap;

    ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl()
    {
        this.mStarterMap = 0;
        return;
    }

    private void postStartMessage(android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl$Starter v0_0 = 0;
        if (this.mStarterMap != null) {
            v0_0 = ((Runnable) this.mStarterMap.get(p4));
        }
        if (v0_0 == null) {
            v0_0 = new android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl$Starter(this, p3, p4);
            if (this.mStarterMap == null) {
                this.mStarterMap = new java.util.WeakHashMap();
            }
            this.mStarterMap.put(p4, v0_0);
        }
        p4.removeCallbacks(v0_0);
        p4.post(v0_0);
        return;
    }

    private void removeStartMessage(android.view.View p3)
    {
        if (this.mStarterMap != null) {
            Runnable v0_1 = ((Runnable) this.mStarterMap.get(p3));
            if (v0_1 != null) {
                p3.removeCallbacks(v0_1);
            }
        }
        return;
    }

    public void alpha(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void alphaBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void cancel(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public long getDuration(android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        return 0;
    }

    public android.view.animation.Interpolator getInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3)
    {
        return 0;
    }

    public long getStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        return 0;
    }

    public void rotation(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void rotationBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void rotationX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void rotationXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void rotationY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void rotationYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void scaleX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void scaleXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void scaleY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void scaleYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void setDuration(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, long p3)
    {
        return;
    }

    public void setInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, android.view.animation.Interpolator p3)
    {
        return;
    }

    public void setListener(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, android.support.v4.view.ViewPropertyAnimatorListener p4)
    {
        p3.setTag(2113929216, p4);
        return;
    }

    public void setStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, long p3)
    {
        return;
    }

    public void setUpdateListener(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, android.support.v4.view.ViewPropertyAnimatorUpdateListener p3)
    {
        return;
    }

    public void start(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        this.removeStartMessage(p2);
        this.startAnimation(p1, p2);
        return;
    }

    void startAnimation(android.support.v4.view.ViewPropertyAnimatorCompat p7, android.view.View p8)
    {
        Object v2 = p8.getTag(2113929216);
        android.support.v4.view.ViewPropertyAnimatorListener v1_0 = 0;
        if ((v2 instanceof android.support.v4.view.ViewPropertyAnimatorListener)) {
            v1_0 = ((android.support.v4.view.ViewPropertyAnimatorListener) v2);
        }
        Runnable v3 = p7.mStartAction;
        Runnable v0 = p7.mEndAction;
        p7.mStartAction = 0;
        p7.mEndAction = 0;
        if (v3 != null) {
            v3.run();
        }
        if (v1_0 != null) {
            v1_0.onAnimationStart(p8);
            v1_0.onAnimationEnd(p8);
        }
        if (v0 != null) {
            v0.run();
        }
        if (this.mStarterMap != null) {
            this.mStarterMap.remove(p8);
        }
        return;
    }

    public void translationX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void translationXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void translationY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void translationYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void translationZ(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        return;
    }

    public void translationZBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        return;
    }

    public void withEndAction(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, Runnable p3)
    {
        p1.mEndAction = p3;
        this.postStartMessage(p1, p2);
        return;
    }

    public void withLayer(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        return;
    }

    public void withStartAction(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, Runnable p3)
    {
        p1.mStartAction = p3;
        this.postStartMessage(p1, p2);
        return;
    }

    public void x(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void xBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void y(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void yBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        this.postStartMessage(p1, p2);
        return;
    }

    public void z(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        return;
    }

    public void zBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener implements android.support.v4.view.ViewPropertyAnimatorListener {
    boolean mAnimEndCalled;
    android.support.v4.view.ViewPropertyAnimatorCompat mVpa;

    ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener(android.support.v4.view.ViewPropertyAnimatorCompat p1)
    {
        this.mVpa = p1;
        return;
    }

    public void onAnimationCancel(android.view.View p4)
    {
        Object v1 = p4.getTag(2113929216);
        android.support.v4.view.ViewPropertyAnimatorListener v0_0 = 0;
        if ((v1 instanceof android.support.v4.view.ViewPropertyAnimatorListener)) {
            v0_0 = ((android.support.v4.view.ViewPropertyAnimatorListener) v1);
        }
        if (v0_0 != null) {
            v0_0.onAnimationCancel(p4);
        }
        return;
    }

    public void onAnimationEnd(android.view.View p7)
    {
        if (this.mVpa.mOldLayerType >= 0) {
            android.support.v4.view.ViewCompat.setLayerType(p7, this.mVpa.mOldLayerType, 0);
            this.mVpa.mOldLayerType = -1;
        }
        if ((android.os.Build$VERSION.SDK_INT >= 16) || (!this.mAnimEndCalled)) {
            if (this.mVpa.mEndAction != null) {
                Runnable v0 = this.mVpa.mEndAction;
                this.mVpa.mEndAction = 0;
                v0.run();
            }
            Object v2 = p7.getTag(2113929216);
            android.support.v4.view.ViewPropertyAnimatorListener v1_0 = 0;
            if ((v2 instanceof android.support.v4.view.ViewPropertyAnimatorListener)) {
                v1_0 = ((android.support.v4.view.ViewPropertyAnimatorListener) v2);
            }
            if (v1_0 != null) {
                v1_0.onAnimationEnd(p7);
            }
            this.mAnimEndCalled = 1;
        }
        return;
    }

    public void onAnimationStart(android.view.View p6)
    {
        this.mAnimEndCalled = 0;
        if (this.mVpa.mOldLayerType >= 0) {
            android.support.v4.view.ViewCompat.setLayerType(p6, 2, 0);
        }
        if (this.mVpa.mStartAction != null) {
            Runnable v2 = this.mVpa.mStartAction;
            this.mVpa.mStartAction = 0;
            v2.run();
        }
        Object v1 = p6.getTag(2113929216);
        android.support.v4.view.ViewPropertyAnimatorListener v0_0 = 0;
        if ((v1 instanceof android.support.v4.view.ViewPropertyAnimatorListener)) {
            v0_0 = ((android.support.v4.view.ViewPropertyAnimatorListener) v1);
        }
        if (v0_0 != null) {
            v0_0.onAnimationStart(p6);
        }
        return;
    }
}
package android.support.v4.view;
public class ViewPropertyAnimatorListenerAdapter implements android.support.v4.view.ViewPropertyAnimatorListener {

    public ViewPropertyAnimatorListenerAdapter()
    {
        return;
    }

    public void onAnimationCancel(android.view.View p1)
    {
        return;
    }

    public void onAnimationEnd(android.view.View p1)
    {
        return;
    }

    public void onAnimationStart(android.view.View p1)
    {
        return;
    }
}
package android.support.v4.view;
 class WindowInsetsCompat$WindowInsetsCompatBaseImpl implements android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatImpl {

    WindowInsetsCompat$WindowInsetsCompatBaseImpl()
    {
        return;
    }

    public android.support.v4.view.WindowInsetsCompat consumeStableInsets(Object p2)
    {
        return 0;
    }

    public android.support.v4.view.WindowInsetsCompat consumeSystemWindowInsets(Object p2)
    {
        return 0;
    }

    public Object getSourceWindowInsets(Object p2)
    {
        return 0;
    }

    public int getStableInsetBottom(Object p2)
    {
        return 0;
    }

    public int getStableInsetLeft(Object p2)
    {
        return 0;
    }

    public int getStableInsetRight(Object p2)
    {
        return 0;
    }

    public int getStableInsetTop(Object p2)
    {
        return 0;
    }

    public int getSystemWindowInsetBottom(Object p2)
    {
        return 0;
    }

    public int getSystemWindowInsetLeft(Object p2)
    {
        return 0;
    }

    public int getSystemWindowInsetRight(Object p2)
    {
        return 0;
    }

    public int getSystemWindowInsetTop(Object p2)
    {
        return 0;
    }

    public boolean hasInsets(Object p2)
    {
        return 0;
    }

    public boolean hasStableInsets(Object p2)
    {
        return 0;
    }

    public boolean hasSystemWindowInsets(Object p2)
    {
        return 0;
    }

    public boolean isConsumed(Object p2)
    {
        return 0;
    }

    public boolean isRound(Object p2)
    {
        return 0;
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(Object p2, int p3, int p4, int p5, int p6)
    {
        return 0;
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(Object p2, android.graphics.Rect p3)
    {
        return 0;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompat$AccessibilityEventStubImpl implements android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl {

    AccessibilityEventCompat$AccessibilityEventStubImpl()
    {
        return;
    }

    public void appendRecord(android.view.accessibility.AccessibilityEvent p1, Object p2)
    {
        return;
    }

    public int getAction(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    public int getContentChangeTypes(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    public int getMovementGranularity(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    public Object getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return 0;
    }

    public int getRecordCount(android.view.accessibility.AccessibilityEvent p2)
    {
        return 0;
    }

    public void setAction(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        return;
    }

    public void setContentChangeTypes(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        return;
    }

    public void setMovementGranularity(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1 implements android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge {
    final synthetic android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl this$0;
    final synthetic android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener val$listener;

    AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onAccessibilityStateChanged(boolean p2)
    {
        this.val$listener.onAccessibilityStateChanged(p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompat$AccessibilityManagerKitKatImpl$1 implements android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerBridge {
    final synthetic android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerKitKatImpl this$0;
    final synthetic android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener val$listener;

    AccessibilityManagerCompat$AccessibilityManagerKitKatImpl$1(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerKitKatImpl p1, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onTouchExplorationStateChanged(boolean p2)
    {
        this.val$listener.onTouchExplorationStateChanged(p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompat$AccessibilityManagerStubImpl implements android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl {

    AccessibilityManagerCompat$AccessibilityManagerStubImpl()
    {
        return;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p3)
    {
        return 0;
    }

    public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p3)
    {
        return 0;
    }

    public java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2, int p3)
    {
        return java.util.Collections.emptyList();
    }

    public java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2)
    {
        return java.util.Collections.emptyList();
    }

    public boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p2)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper newAccessibilityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p2)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper newTouchExplorationStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p2)
    {
        return 0;
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p3)
    {
        return 0;
    }

    public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p3)
    {
        return 0;
    }
}
package android.support.v4.view.accessibility;
public abstract class AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat implements android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener {

    public AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat()
    {
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl implements android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl()
    {
        return;
    }

    public void addAction(Object p1, int p2)
    {
        return;
    }

    public void addAction(Object p1, Object p2)
    {
        return;
    }

    public void addChild(Object p1, android.view.View p2)
    {
        return;
    }

    public void addChild(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public boolean canOpenPopup(Object p2)
    {
        return 0;
    }

    public java.util.List findAccessibilityNodeInfosByText(Object p2, String p3)
    {
        return java.util.Collections.emptyList();
    }

    public java.util.List findAccessibilityNodeInfosByViewId(Object p2, String p3)
    {
        return java.util.Collections.emptyList();
    }

    public Object findFocus(Object p2, int p3)
    {
        return 0;
    }

    public Object focusSearch(Object p2, int p3)
    {
        return 0;
    }

    public int getAccessibilityActionId(Object p2)
    {
        return 0;
    }

    public CharSequence getAccessibilityActionLabel(Object p2)
    {
        return 0;
    }

    public Object getActionContextClick()
    {
        return 0;
    }

    public java.util.List getActionList(Object p2)
    {
        return 0;
    }

    public Object getActionScrollDown()
    {
        return 0;
    }

    public Object getActionScrollLeft()
    {
        return 0;
    }

    public Object getActionScrollRight()
    {
        return 0;
    }

    public Object getActionScrollToPosition()
    {
        return 0;
    }

    public Object getActionScrollUp()
    {
        return 0;
    }

    public Object getActionSetProgress()
    {
        return 0;
    }

    public Object getActionShowOnScreen()
    {
        return 0;
    }

    public int getActions(Object p2)
    {
        return 0;
    }

    public void getBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public Object getChild(Object p2, int p3)
    {
        return 0;
    }

    public int getChildCount(Object p2)
    {
        return 0;
    }

    public CharSequence getClassName(Object p2)
    {
        return 0;
    }

    public Object getCollectionInfo(Object p2)
    {
        return 0;
    }

    public int getCollectionInfoColumnCount(Object p2)
    {
        return 0;
    }

    public int getCollectionInfoRowCount(Object p2)
    {
        return 0;
    }

    public int getCollectionInfoSelectionMode(Object p2)
    {
        return 0;
    }

    public int getCollectionItemColumnIndex(Object p2)
    {
        return 0;
    }

    public int getCollectionItemColumnSpan(Object p2)
    {
        return 0;
    }

    public Object getCollectionItemInfo(Object p2)
    {
        return 0;
    }

    public int getCollectionItemRowIndex(Object p2)
    {
        return 0;
    }

    public int getCollectionItemRowSpan(Object p2)
    {
        return 0;
    }

    public CharSequence getContentDescription(Object p2)
    {
        return 0;
    }

    public int getDrawingOrder(Object p2)
    {
        return 0;
    }

    public CharSequence getError(Object p2)
    {
        return 0;
    }

    public android.os.Bundle getExtras(Object p2)
    {
        return new android.os.Bundle();
    }

    public int getInputType(Object p2)
    {
        return 0;
    }

    public Object getLabelFor(Object p2)
    {
        return 0;
    }

    public Object getLabeledBy(Object p2)
    {
        return 0;
    }

    public int getLiveRegion(Object p2)
    {
        return 0;
    }

    public int getMaxTextLength(Object p2)
    {
        return -1;
    }

    public int getMovementGranularities(Object p2)
    {
        return 0;
    }

    public CharSequence getPackageName(Object p2)
    {
        return 0;
    }

    public Object getParent(Object p2)
    {
        return 0;
    }

    public Object getRangeInfo(Object p2)
    {
        return 0;
    }

    public CharSequence getRoleDescription(Object p2)
    {
        return 0;
    }

    public CharSequence getText(Object p2)
    {
        return 0;
    }

    public int getTextSelectionEnd(Object p2)
    {
        return -1;
    }

    public int getTextSelectionStart(Object p2)
    {
        return -1;
    }

    public Object getTraversalAfter(Object p2)
    {
        return 0;
    }

    public Object getTraversalBefore(Object p2)
    {
        return 0;
    }

    public String getViewIdResourceName(Object p2)
    {
        return 0;
    }

    public Object getWindow(Object p2)
    {
        return 0;
    }

    public int getWindowId(Object p2)
    {
        return 0;
    }

    public boolean isAccessibilityFocused(Object p2)
    {
        return 0;
    }

    public boolean isCheckable(Object p2)
    {
        return 0;
    }

    public boolean isChecked(Object p2)
    {
        return 0;
    }

    public boolean isClickable(Object p2)
    {
        return 0;
    }

    public boolean isCollectionInfoHierarchical(Object p2)
    {
        return 0;
    }

    public boolean isCollectionItemHeading(Object p2)
    {
        return 0;
    }

    public boolean isCollectionItemSelected(Object p2)
    {
        return 0;
    }

    public boolean isContentInvalid(Object p2)
    {
        return 0;
    }

    public boolean isContextClickable(Object p2)
    {
        return 0;
    }

    public boolean isDismissable(Object p2)
    {
        return 0;
    }

    public boolean isEditable(Object p2)
    {
        return 0;
    }

    public boolean isEnabled(Object p2)
    {
        return 0;
    }

    public boolean isFocusable(Object p2)
    {
        return 0;
    }

    public boolean isFocused(Object p2)
    {
        return 0;
    }

    public boolean isImportantForAccessibility(Object p2)
    {
        return 1;
    }

    public boolean isLongClickable(Object p2)
    {
        return 0;
    }

    public boolean isMultiLine(Object p2)
    {
        return 0;
    }

    public boolean isPassword(Object p2)
    {
        return 0;
    }

    public boolean isScrollable(Object p2)
    {
        return 0;
    }

    public boolean isSelected(Object p2)
    {
        return 0;
    }

    public boolean isVisibleToUser(Object p2)
    {
        return 0;
    }

    public Object newAccessibilityAction(int p2, CharSequence p3)
    {
        return 0;
    }

    public Object obtain()
    {
        return 0;
    }

    public Object obtain(android.view.View p2)
    {
        return 0;
    }

    public Object obtain(android.view.View p2, int p3)
    {
        return 0;
    }

    public Object obtain(Object p2)
    {
        return 0;
    }

    public Object obtainCollectionInfo(int p2, int p3, boolean p4)
    {
        return 0;
    }

    public Object obtainCollectionInfo(int p2, int p3, boolean p4, int p5)
    {
        return 0;
    }

    public Object obtainCollectionItemInfo(int p2, int p3, int p4, int p5, boolean p6)
    {
        return 0;
    }

    public Object obtainCollectionItemInfo(int p2, int p3, int p4, int p5, boolean p6, boolean p7)
    {
        return 0;
    }

    public Object obtainRangeInfo(int p2, float p3, float p4, float p5)
    {
        return 0;
    }

    public boolean performAction(Object p2, int p3)
    {
        return 0;
    }

    public boolean performAction(Object p2, int p3, android.os.Bundle p4)
    {
        return 0;
    }

    public void recycle(Object p1)
    {
        return;
    }

    public boolean refresh(Object p2)
    {
        return 0;
    }

    public boolean removeAction(Object p2, Object p3)
    {
        return 0;
    }

    public boolean removeChild(Object p2, android.view.View p3)
    {
        return 0;
    }

    public boolean removeChild(Object p2, android.view.View p3, int p4)
    {
        return 0;
    }

    public void setAccessibilityFocused(Object p1, boolean p2)
    {
        return;
    }

    public void setBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void setBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public void setCanOpenPopup(Object p1, boolean p2)
    {
        return;
    }

    public void setCheckable(Object p1, boolean p2)
    {
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setClickable(Object p1, boolean p2)
    {
        return;
    }

    public void setCollectionInfo(Object p1, Object p2)
    {
        return;
    }

    public void setCollectionItemInfo(Object p1, Object p2)
    {
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        return;
    }

    public void setContentInvalid(Object p1, boolean p2)
    {
        return;
    }

    public void setContextClickable(Object p1, boolean p2)
    {
        return;
    }

    public void setDismissable(Object p1, boolean p2)
    {
        return;
    }

    public void setDrawingOrder(Object p1, int p2)
    {
        return;
    }

    public void setEditable(Object p1, boolean p2)
    {
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        return;
    }

    public void setError(Object p1, CharSequence p2)
    {
        return;
    }

    public void setFocusable(Object p1, boolean p2)
    {
        return;
    }

    public void setFocused(Object p1, boolean p2)
    {
        return;
    }

    public void setImportantForAccessibility(Object p1, boolean p2)
    {
        return;
    }

    public void setInputType(Object p1, int p2)
    {
        return;
    }

    public void setLabelFor(Object p1, android.view.View p2)
    {
        return;
    }

    public void setLabelFor(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setLabeledBy(Object p1, android.view.View p2)
    {
        return;
    }

    public void setLabeledBy(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setLiveRegion(Object p1, int p2)
    {
        return;
    }

    public void setLongClickable(Object p1, boolean p2)
    {
        return;
    }

    public void setMaxTextLength(Object p1, int p2)
    {
        return;
    }

    public void setMovementGranularities(Object p1, int p2)
    {
        return;
    }

    public void setMultiLine(Object p1, boolean p2)
    {
        return;
    }

    public void setPackageName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setParent(Object p1, android.view.View p2)
    {
        return;
    }

    public void setParent(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        return;
    }

    public void setRangeInfo(Object p1, Object p2)
    {
        return;
    }

    public void setRoleDescription(Object p1, CharSequence p2)
    {
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        return;
    }

    public void setSelected(Object p1, boolean p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setText(Object p1, CharSequence p2)
    {
        return;
    }

    public void setTextSelection(Object p1, int p2, int p3)
    {
        return;
    }

    public void setTraversalAfter(Object p1, android.view.View p2)
    {
        return;
    }

    public void setTraversalAfter(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setTraversalBefore(Object p1, android.view.View p2)
    {
        return;
    }

    public void setTraversalBefore(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setViewIdResourceName(Object p1, String p2)
    {
        return;
    }

    public void setVisibleToUser(Object p1, boolean p2)
    {
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 implements android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge {
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0;
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat;

    AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl p1, android.support.v4.view.accessibility.AccessibilityNodeProviderCompat p2)
    {
        this.this$0 = p1;
        this.val$compat = p2;
        return;
    }

    public Object createAccessibilityNodeInfo(int p3)
    {
        Object v1_1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v0 = this.val$compat.createAccessibilityNodeInfo(p3);
        if (v0 != null) {
            v1_1 = v0.getInfo();
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public java.util.List findAccessibilityNodeInfosByText(String p7, int p8)
    {
        java.util.ArrayList v4_0;
        java.util.List v0 = this.val$compat.findAccessibilityNodeInfosByText(p7, p8);
        if (v0 != null) {
            v4_0 = new java.util.ArrayList();
            int v3 = v0.size();
            int v1 = 0;
            while (v1 < v3) {
                v4_0.add(((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) v0.get(v1)).getInfo());
                v1++;
            }
        } else {
            v4_0 = 0;
        }
        return v4_0;
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return this.val$compat.performAction(p2, p3, p4);
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1 implements android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge {
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl this$0;
    final synthetic android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat;

    AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl p1, android.support.v4.view.accessibility.AccessibilityNodeProviderCompat p2)
    {
        this.this$0 = p1;
        this.val$compat = p2;
        return;
    }

    public Object createAccessibilityNodeInfo(int p3)
    {
        Object v1_1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v0 = this.val$compat.createAccessibilityNodeInfo(p3);
        if (v0 != null) {
            v1_1 = v0.getInfo();
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public java.util.List findAccessibilityNodeInfosByText(String p7, int p8)
    {
        java.util.ArrayList v4_0;
        java.util.List v0 = this.val$compat.findAccessibilityNodeInfosByText(p7, p8);
        if (v0 != null) {
            v4_0 = new java.util.ArrayList();
            int v3 = v0.size();
            int v1 = 0;
            while (v1 < v3) {
                v4_0.add(((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) v0.get(v1)).getInfo());
                v1++;
            }
        } else {
            v4_0 = 0;
        }
        return v4_0;
    }

    public Object findFocus(int p3)
    {
        Object v1_1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v0 = this.val$compat.findFocus(p3);
        if (v0 != null) {
            v1_1 = v0.getInfo();
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return this.val$compat.performAction(p2, p3, p4);
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl implements android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl {

    AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl()
    {
        return;
    }

    public Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat p2)
    {
        return 0;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompat$AccessibilityRecordStubImpl implements android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl {

    AccessibilityRecordCompat$AccessibilityRecordStubImpl()
    {
        return;
    }

    public int getAddedCount(Object p2)
    {
        return 0;
    }

    public CharSequence getBeforeText(Object p2)
    {
        return 0;
    }

    public CharSequence getClassName(Object p2)
    {
        return 0;
    }

    public CharSequence getContentDescription(Object p2)
    {
        return 0;
    }

    public int getCurrentItemIndex(Object p2)
    {
        return 0;
    }

    public int getFromIndex(Object p2)
    {
        return 0;
    }

    public int getItemCount(Object p2)
    {
        return 0;
    }

    public int getMaxScrollX(Object p2)
    {
        return 0;
    }

    public int getMaxScrollY(Object p2)
    {
        return 0;
    }

    public android.os.Parcelable getParcelableData(Object p2)
    {
        return 0;
    }

    public int getRemovedCount(Object p2)
    {
        return 0;
    }

    public int getScrollX(Object p2)
    {
        return 0;
    }

    public int getScrollY(Object p2)
    {
        return 0;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource(Object p2)
    {
        return 0;
    }

    public java.util.List getText(Object p2)
    {
        return java.util.Collections.emptyList();
    }

    public int getToIndex(Object p2)
    {
        return 0;
    }

    public int getWindowId(Object p2)
    {
        return 0;
    }

    public boolean isChecked(Object p2)
    {
        return 0;
    }

    public boolean isEnabled(Object p2)
    {
        return 0;
    }

    public boolean isFullScreen(Object p2)
    {
        return 0;
    }

    public boolean isPassword(Object p2)
    {
        return 0;
    }

    public boolean isScrollable(Object p2)
    {
        return 0;
    }

    public Object obtain()
    {
        return 0;
    }

    public Object obtain(Object p2)
    {
        return 0;
    }

    public void recycle(Object p1)
    {
        return;
    }

    public void setAddedCount(Object p1, int p2)
    {
        return;
    }

    public void setBeforeText(Object p1, CharSequence p2)
    {
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        return;
    }

    public void setCurrentItemIndex(Object p1, int p2)
    {
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        return;
    }

    public void setFromIndex(Object p1, int p2)
    {
        return;
    }

    public void setFullScreen(Object p1, boolean p2)
    {
        return;
    }

    public void setItemCount(Object p1, int p2)
    {
        return;
    }

    public void setMaxScrollX(Object p1, int p2)
    {
        return;
    }

    public void setMaxScrollY(Object p1, int p2)
    {
        return;
    }

    public void setParcelableData(Object p1, android.os.Parcelable p2)
    {
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        return;
    }

    public void setRemovedCount(Object p1, int p2)
    {
        return;
    }

    public void setScrollX(Object p1, int p2)
    {
        return;
    }

    public void setScrollY(Object p1, int p2)
    {
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2, int p3)
    {
        return;
    }

    public void setToIndex(Object p1, int p2)
    {
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityWindowInfoCompat$AccessibilityWindowInfoStubImpl implements android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoImpl {

    AccessibilityWindowInfoCompat$AccessibilityWindowInfoStubImpl()
    {
        return;
    }

    public Object getAnchor(Object p2)
    {
        return 0;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        return;
    }

    public Object getChild(Object p2, int p3)
    {
        return 0;
    }

    public int getChildCount(Object p2)
    {
        return 0;
    }

    public int getId(Object p2)
    {
        return -1;
    }

    public int getLayer(Object p2)
    {
        return -1;
    }

    public Object getParent(Object p2)
    {
        return 0;
    }

    public Object getRoot(Object p2)
    {
        return 0;
    }

    public CharSequence getTitle(Object p2)
    {
        return 0;
    }

    public int getType(Object p2)
    {
        return -1;
    }

    public boolean isAccessibilityFocused(Object p2)
    {
        return 1;
    }

    public boolean isActive(Object p2)
    {
        return 1;
    }

    public boolean isFocused(Object p2)
    {
        return 1;
    }

    public Object obtain()
    {
        return 0;
    }

    public Object obtain(Object p2)
    {
        return 0;
    }

    public void recycle(Object p1)
    {
        return;
    }
}
package android.support.v4.view.animation;
public class FastOutLinearInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    private static final float[] VALUES;

    static FastOutLinearInInterpolator()
    {
        float[] v0_1 = new float[201];
        v0_1 = {0, 953267991, 961656599, 973279855, 978433815, 984245443, 988540410, 991775058, 995211031, 998445679, 1000378414, 1002525898, 1004673381, 1006941661, 1008230151, 1009626015, 1011129254, 1012739867, 1014457854, 1015598704, 1016511385, 1017424065, 1018444120, 1019464175, 1020537917, 1021611658, 1022739087, 1023665190, 1024282591, 1024899993, 1025517394, 1026188483, 1026859572, 1027530660, 1028228592, 1028953368, 1029704987, 1030429763, 1031208226, 1031892736, 1032295390, 1032698043, 1033100696, 1033530193, 1033946268, 1034375764, 1034818683, 1035275023, 1035717942, 1036187704, 1036644044, 1037113806, 1037596990, 1038080174, 1038576779, 1039073385, 1039583412, 1040093440, 1040395429, 1040657154, 1040918879, 1041187314, 1041455750, 1041730896, 1042006042, 1042281189, 1042563046, 1042851614, 1043133471, 1043422039, 1043717318, 1044012597, 1044307876, 1044609866, 1044911856, 1045213846, 1045522547, 1045831247, 1046146659, 1046455360, 1046777482, 1047092894, 1047415017, 1047743850, 1048065973, 1048394806, 1048653175, 1048817592, 1048985364, 1049156492, 1049324264, 1049495391, 1049669874, 1049841002, 1050015485, 1050193324, 1050367807, 1050545645, 1050726839, 1050904678, 1051085872, 1051267065, 1051451615, 1051636164, 1051820714, 1052005263, 1052193168, 1052381073, 1052568977, 1052760238, 1052951498, 1053142758, 1053334018, 1053528634, 1053723250, 1053917866, 1054115837, 1054313808, 1054511779, 1054713106, 1054911077, 1055112403, 1055313730, 1055518412, 1055723094, 1055927776, 1056132458, 1056340496, 1056548533, 1056756571, 1056964608, 1057070304, 1057176001, 1057281697, 1057387394, 1057494768, 1057602142, 1057709516, 1057816891, 1057925942, 1058034994, 1058144046, 1058253098, 1058363828, 1058474557, 1058585287, 1058697694, 1058808424, 1058920831, 1059033239, 1059147324, 1059261409, 1059373816, 1059489579, 1059603664, 1059719427, 1059833512, 1059950952, 1060066715, 1060184156, 1060299919, 1060419037, 1060536477, 1060653918, 1060773036, 1060892154, 1061012950, 1061132068, 1061252864, 1061373660, 1061494456, 1061616930, 1061739404, 1061861877, 1061984351, 1062108502, 1062232654, 1062356805, 1062480957, 1062606786, 1062730937, 1062858444, 1062984273, 1063111780, 1063239287, 1063366794, 1063494300, 1063623485, 1063752670, 1063883532, 1064012716, 1064145256, 1064276119, 1064408659, 1064541199, 1064673739, 1064807956, 1064942174, 1065078070, 1065215643, 1065353216};
        android.support.v4.view.animation.FastOutLinearInInterpolator.VALUES = v0_1;
        return;
    }

    public FastOutLinearInInterpolator()
    {
        super(android.support.v4.view.animation.FastOutLinearInInterpolator.VALUES);
        return;
    }

    public bridge synthetic float getInterpolation(float p2)
    {
        return super.getInterpolation(p2);
    }
}
package android.support.v4.view.animation;
public class FastOutSlowInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    private static final float[] VALUES;

    static FastOutSlowInInterpolator()
    {
        float[] v0_1 = new float[201];
        v0_1 = {0, 953267991, 961656599, 973279855, 980151802, 985104436, 990057071, 993063548, 996929018, 999734169, 1002311149, 1005102878, 1007371158, 1009089144, 1010914506, 1012954615, 1015115520, 1016296636, 1017638814, 1019034678, 1020537917, 1022148529, 1023638346, 1024551027, 1025517394, 1026564293, 1027664878, 1028819150, 1030053954, 1031342444, 1032268546, 1032993322, 1033758363, 1034550247, 1035395819, 1036281656, 1037221180, 1038187548, 1039207603, 1040234368, 1040784661, 1041368508, 1041972488, 1042603311, 1043254267, 1043932067, 1044636710, 1045361485, 1046113105, 1046884857, 1047676741, 1048488758, 1048948454, 1049374595, 1049807448, 1050247011, 1050693285, 1051142914, 1051595899, 1052052239, 1052511935, 1052971631, 1053427971, 1053884311, 1054337296, 1054790281, 1055236555, 1055676118, 1056112325, 1056541822, 1056964608, 1057172645, 1057377328, 1057576976, 1057773270, 1057966208, 1058155790, 1058340340, 1058521534, 1058697694, 1058870500, 1059039950, 1059204366, 1059365428, 1059523133, 1059675806, 1059826801, 1059972763, 1060115369, 1060254620, 1060392193, 1060524733, 1060653918, 1060781425, 1060905576, 1061026372, 1061143813, 1061257898, 1061370305, 1061481035, 1061588409, 1061692427, 1061794768, 1061893754, 1061991062, 1062086692, 1062178967, 1062269564, 1062358483, 1062444047, 1062529611, 1062611819, 1062692350, 1062771202, 1062848378, 1062922197, 1062996017, 1063068159, 1063136946, 1063205732, 1063272841, 1063336595, 1063400348, 1063462424, 1063522822, 1063583220, 1063640262, 1063697305, 1063752670, 1063806357, 1063858366, 1063908698, 1063959029, 1064007683, 1064056337, 1064101636, 1064146934, 1064190555, 1064234176, 1064276119, 1064316384, 1064356649, 1064395237, 1064433825, 1064470734, 1064505967, 1064541199, 1064574753, 1064608308, 1064640184, 1064672061, 1064702260, 1064730781, 1064759303, 1064787824, 1064814667, 1064841511, 1064866677, 1064891843, 1064915331, 1064938819, 1064960629, 1064982440, 1065002572, 1065022705, 1065042838, 1065061292, 1065079747, 1065098202, 1065114980, 1065130079, 1065146856, 1065160278, 1065175378, 1065188799, 1065202221, 1065213965, 1065225709, 1065237453, 1065247520, 1065259264, 1065267652, 1065277719, 1065286107, 1065292818, 1065301207, 1065307918, 1065314628, 1065319662, 1065326372, 1065329728, 1065334761, 1065338117, 1065341472, 1065344827, 1065348183, 1065349861, 1065351538, 1065351538, 1065353216, 1065353216};
        android.support.v4.view.animation.FastOutSlowInInterpolator.VALUES = v0_1;
        return;
    }

    public FastOutSlowInInterpolator()
    {
        super(android.support.v4.view.animation.FastOutSlowInInterpolator.VALUES);
        return;
    }

    public bridge synthetic float getInterpolation(float p2)
    {
        return super.getInterpolation(p2);
    }
}
package android.support.v4.view.animation;
public class LinearOutSlowInInterpolator extends android.support.v4.view.animation.LookupTableInterpolator {
    private static final float[] VALUES;

    static LinearOutSlowInInterpolator()
    {
        float[] v0_1 = new float[201];
        v0_1 = {0, 1018551494, 1026403231, 1031476661, 1034053642, 1036375609, 1038603623, 1040475960, 1041522858, 1042536202, 1043522703, 1044482359, 1045415173, 1046327853, 1047220401, 1048092816, 1048760549, 1049179980, 1049589344, 1049988642, 1050381228, 1050767104, 1051146269, 1051518724, 1051884467, 1052240144, 1052592466, 1052941432, 1053280331, 1053615876, 1053944709, 1054266832, 1054585599, 1054901010, 1055209711, 1055511701, 1055810336, 1056105615, 1056397538, 1056682751, 1056964608, 1057103859, 1057239754, 1057375650, 1057508190, 1057639052, 1057768237, 1057895743, 1058019895, 1058144046, 1058266520, 1058385638, 1058504756, 1058622197, 1058737960, 1058850367, 1058962774, 1059073504, 1059182556, 1059291608, 1059397304, 1059501323, 1059605342, 1059707683, 1059808346, 1059907332, 1060004640, 1060101947, 1060197578, 1060291530, 1060383805, 1060476079, 1060566676, 1060655596, 1060742837, 1060830079, 1060915642, 1061001206, 1061083415, 1061165623, 1061247831, 1061326684, 1061405537, 1061484390, 1061561565, 1061637063, 1061710882, 1061784702, 1061858522, 1061928986, 1062001128, 1062069915, 1062138701, 1062207488, 1062274597, 1062340028, 1062405459, 1062469213, 1062532966, 1062595042, 1062655440, 1062717515, 1062776236, 1062834956, 1062893676, 1062950719, 1063006083, 1063061448, 1063116813, 1063170500, 1063224187, 1063276197, 1063326528, 1063378538, 1063427192, 1063477523, 1063524499, 1063573153, 1063620130, 1063665428, 1063710727, 1063756025, 1063799646, 1063843267, 1063885210, 1063927153, 1063967418, 1064007683, 1064047949, 1064086536, 1064125124, 1064162034, 1064198944, 1064235853, 1064271086, 1064306318, 1064339872, 1064373427, 1064406981, 1064438858, 1064470734, 1064500933, 1064531132, 1064561331, 1064589853, 1064618374, 1064646895, 1064673739, 1064700582, 1064727426, 1064752592, 1064777757, 1064802923, 1064826411, 1064849900, 1064871710, 1064893520, 1064915331, 1064937141, 1064957274, 1064977406, 1064995861, 1065014316, 1065032771, 1065051226, 1065068003, 1065084781, 1065099880, 1065116657, 1065131757, 1065145179, 1065160278, 1065173700, 1065185444, 1065198866, 1065210610, 1065222354, 1065232420, 1065242486, 1065252553, 1065262619, 1065271008, 1065279396, 1065287785, 1065296173, 1065302884, 1065309595, 1065314628, 1065321339, 1065326372, 1065331406, 1065334761, 1065339794, 1065343150, 1065344827, 1065348183, 1065349861, 1065351538, 1065351538, 1065353216, 1065353216};
        android.support.v4.view.animation.LinearOutSlowInInterpolator.VALUES = v0_1;
        return;
    }

    public LinearOutSlowInInterpolator()
    {
        super(android.support.v4.view.animation.LinearOutSlowInInterpolator.VALUES);
        return;
    }

    public bridge synthetic float getInterpolation(float p2)
    {
        return super.getInterpolation(p2);
    }
}
package android.support.v4.widget;
 class CompoundButtonCompat$BaseCompoundButtonCompat implements android.support.v4.widget.CompoundButtonCompat$CompoundButtonCompatImpl {

    CompoundButtonCompat$BaseCompoundButtonCompat()
    {
        return;
    }

    public android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatGingerbread.getButtonDrawable(p2);
    }

    public android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatGingerbread.getButtonTintList(p2);
    }

    public android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatGingerbread.getButtonTintMode(p2);
    }

    public void setButtonTintList(android.widget.CompoundButton p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.widget.CompoundButtonCompatGingerbread.setButtonTintList(p1, p2);
        return;
    }

    public void setButtonTintMode(android.widget.CompoundButton p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.widget.CompoundButtonCompatGingerbread.setButtonTintMode(p1, p2);
        return;
    }
}
package android.support.v4.widget;
public abstract class CursorAdapter extends android.widget.BaseAdapter implements android.widget.Filterable, android.support.v4.widget.CursorFilter$CursorFilterClient {
    public static final int FLAG_AUTO_REQUERY = 1;
    public static final int FLAG_REGISTER_CONTENT_OBSERVER = 2;
    protected boolean mAutoRequery;
    protected android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver;
    protected android.content.Context mContext;
    protected android.database.Cursor mCursor;
    protected android.support.v4.widget.CursorFilter mCursorFilter;
    protected android.database.DataSetObserver mDataSetObserver;
    protected boolean mDataValid;
    protected android.widget.FilterQueryProvider mFilterQueryProvider;
    protected int mRowIDColumn;

    public CursorAdapter(android.content.Context p2, android.database.Cursor p3)
    {
        this.init(p2, p3, 1);
        return;
    }

    public CursorAdapter(android.content.Context p1, android.database.Cursor p2, int p3)
    {
        this.init(p1, p2, p3);
        return;
    }

    public CursorAdapter(android.content.Context p2, android.database.Cursor p3, boolean p4)
    {
        int v0;
        if (!p4) {
            v0 = 2;
        } else {
            v0 = 1;
        }
        this.init(p2, p3, v0);
        return;
    }

    public abstract void bindView();

    public void changeCursor(android.database.Cursor p2)
    {
        android.database.Cursor v0 = this.swapCursor(p2);
        if (v0 != null) {
            v0.close();
        }
        return;
    }

    public CharSequence convertToString(android.database.Cursor p2)
    {
        String v0;
        if (p2 != null) {
            v0 = p2.toString();
        } else {
            v0 = "";
        }
        return v0;
    }

    public int getCount()
    {
        if ((!this.mDataValid) || (this.mCursor == null)) {
            int v0_2 = 0;
        } else {
            v0_2 = this.mCursor.getCount();
        }
        return v0_2;
    }

    public android.database.Cursor getCursor()
    {
        return this.mCursor;
    }

    public android.view.View getDropDownView(int p4, android.view.View p5, android.view.ViewGroup p6)
    {
        android.view.View v0;
        if (!this.mDataValid) {
            v0 = 0;
        } else {
            this.mCursor.moveToPosition(p4);
            if (p5 != null) {
                v0 = p5;
            } else {
                v0 = this.newDropDownView(this.mContext, this.mCursor, p6);
            }
            this.bindView(v0, this.mContext, this.mCursor);
        }
        return v0;
    }

    public android.widget.Filter getFilter()
    {
        if (this.mCursorFilter == null) {
            this.mCursorFilter = new android.support.v4.widget.CursorFilter(this);
        }
        return this.mCursorFilter;
    }

    public android.widget.FilterQueryProvider getFilterQueryProvider()
    {
        return this.mFilterQueryProvider;
    }

    public Object getItem(int p2)
    {
        if ((!this.mDataValid) || (this.mCursor == null)) {
            android.database.Cursor v0_2 = 0;
        } else {
            this.mCursor.moveToPosition(p2);
            v0_2 = this.mCursor;
        }
        return v0_2;
    }

    public long getItemId(int p4)
    {
        long v0_0 = 0;
        if ((this.mDataValid) && ((this.mCursor != null) && (this.mCursor.moveToPosition(p4)))) {
            v0_0 = this.mCursor.getLong(this.mRowIDColumn);
        }
        return v0_0;
    }

    public android.view.View getView(int p5, android.view.View p6, android.view.ViewGroup p7)
    {
        if (this.mDataValid) {
            if (this.mCursor.moveToPosition(p5)) {
                android.view.View v0;
                if (p6 != null) {
                    v0 = p6;
                } else {
                    v0 = this.newView(this.mContext, this.mCursor, p7);
                }
                this.bindView(v0, this.mContext, this.mCursor);
                return v0;
            } else {
                throw new IllegalStateException(new StringBuilder().append("couldn\'t move cursor to position ").append(p5).toString());
            }
        } else {
            throw new IllegalStateException("this should only be called when the cursor is valid");
        }
    }

    public boolean hasStableIds()
    {
        return 1;
    }

    void init(android.content.Context p5, android.database.Cursor p6, int p7)
    {
        int v0 = 1;
        if ((p7 & 1) != 1) {
            this.mAutoRequery = 0;
        } else {
            p7 |= 2;
            this.mAutoRequery = 1;
        }
        if (p6 == null) {
            v0 = 0;
        }
        android.database.DataSetObserver v1_1;
        this.mCursor = p6;
        this.mDataValid = v0;
        this.mContext = p5;
        if (v0 == 0) {
            v1_1 = -1;
        } else {
            v1_1 = p6.getColumnIndexOrThrow("_id");
        }
        this.mRowIDColumn = v1_1;
        if ((p7 & 2) != 2) {
            this.mChangeObserver = 0;
            this.mDataSetObserver = 0;
        } else {
            this.mChangeObserver = new android.support.v4.widget.CursorAdapter$ChangeObserver(this);
            this.mDataSetObserver = new android.support.v4.widget.CursorAdapter$MyDataSetObserver(this);
        }
        if (v0 != 0) {
            if (this.mChangeObserver != null) {
                p6.registerContentObserver(this.mChangeObserver);
            }
            if (this.mDataSetObserver != null) {
                p6.registerDataSetObserver(this.mDataSetObserver);
            }
        }
        return;
    }

    protected void init(android.content.Context p2, android.database.Cursor p3, boolean p4)
    {
        int v0;
        if (!p4) {
            v0 = 2;
        } else {
            v0 = 1;
        }
        this.init(p2, p3, v0);
        return;
    }

    public android.view.View newDropDownView(android.content.Context p2, android.database.Cursor p3, android.view.ViewGroup p4)
    {
        return this.newView(p2, p3, p4);
    }

    public abstract android.view.View newView();

    protected void onContentChanged()
    {
        if ((this.mAutoRequery) && ((this.mCursor != null) && (!this.mCursor.isClosed()))) {
            this.mDataValid = this.mCursor.requery();
        }
        return;
    }

    public android.database.Cursor runQueryOnBackgroundThread(CharSequence p2)
    {
        android.database.Cursor v0_1;
        if (this.mFilterQueryProvider == null) {
            v0_1 = this.mCursor;
        } else {
            v0_1 = this.mFilterQueryProvider.runQuery(p2);
        }
        return v0_1;
    }

    public void setFilterQueryProvider(android.widget.FilterQueryProvider p1)
    {
        this.mFilterQueryProvider = p1;
        return;
    }

    public android.database.Cursor swapCursor(android.database.Cursor p3)
    {
        android.database.Cursor v0;
        if (p3 != this.mCursor) {
            v0 = this.mCursor;
            if (v0 != null) {
                if (this.mChangeObserver != null) {
                    v0.unregisterContentObserver(this.mChangeObserver);
                }
                if (this.mDataSetObserver != null) {
                    v0.unregisterDataSetObserver(this.mDataSetObserver);
                }
            }
            this.mCursor = p3;
            if (p3 == null) {
                this.mRowIDColumn = -1;
                this.mDataValid = 0;
                this.notifyDataSetInvalidated();
            } else {
                if (this.mChangeObserver != null) {
                    p3.registerContentObserver(this.mChangeObserver);
                }
                if (this.mDataSetObserver != null) {
                    p3.registerDataSetObserver(this.mDataSetObserver);
                }
                this.mRowIDColumn = p3.getColumnIndexOrThrow("_id");
                this.mDataValid = 1;
                this.notifyDataSetChanged();
            }
        } else {
            v0 = 0;
        }
        return v0;
    }
}
package android.support.v4.widget;
 class DrawerLayout$AccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {
    private final android.graphics.Rect mTmpRect;
    final synthetic android.support.v4.widget.DrawerLayout this$0;

    DrawerLayout$AccessibilityDelegate(android.support.v4.widget.DrawerLayout p2)
    {
        this.this$0 = p2;
        this.mTmpRect = new android.graphics.Rect();
        return;
    }

    private void addChildrenForAccessibility(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p5, android.view.ViewGroup p6)
    {
        int v1 = p6.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            android.view.View v0 = p6.getChildAt(v2);
            if (android.support.v4.widget.DrawerLayout.includeChildForAccessibility(v0)) {
                p5.addChild(v0);
            }
            v2++;
        }
        return;
    }

    private void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.graphics.Rect v0 = this.mTmpRect;
        p4.getBoundsInParent(v0);
        p3.setBoundsInParent(v0);
        p4.getBoundsInScreen(v0);
        p3.setBoundsInScreen(v0);
        p3.setVisibleToUser(p4.isVisibleToUser());
        p3.setPackageName(p4.getPackageName());
        p3.setClassName(p4.getClassName());
        p3.setContentDescription(p4.getContentDescription());
        p3.setEnabled(p4.isEnabled());
        p3.setClickable(p4.isClickable());
        p3.setFocusable(p4.isFocusable());
        p3.setFocused(p4.isFocused());
        p3.setAccessibilityFocused(p4.isAccessibilityFocused());
        p3.setSelected(p4.isSelected());
        p3.setLongClickable(p4.isLongClickable());
        p3.addAction(p4.getActions());
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.View p7, android.view.accessibility.AccessibilityEvent p8)
    {
        int v4_3;
        if (p8.getEventType() != 32) {
            v4_3 = super.dispatchPopulateAccessibilityEvent(p7, p8);
        } else {
            java.util.List v1 = p8.getText();
            android.view.View v3 = this.this$0.findVisibleDrawer();
            if (v3 != null) {
                CharSequence v2 = this.this$0.getDrawerTitle(this.this$0.getDrawerViewAbsoluteGravity(v3));
                if (v2 != null) {
                    v1.add(v2);
                }
            }
            v4_3 = 1;
        }
        return v4_3;
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        super.onInitializeAccessibilityEvent(p2, p3);
        p3.setClassName(android.support.v4.widget.DrawerLayout.getName());
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p5, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p6)
    {
        if (!android.support.v4.widget.DrawerLayout.CAN_HIDE_DESCENDANTS) {
            android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v1 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain(p6);
            super.onInitializeAccessibilityNodeInfo(p5, v1);
            p6.setSource(p5);
            android.view.View v0_1 = android.support.v4.view.ViewCompat.getParentForAccessibility(p5);
            if ((v0_1 instanceof android.view.View)) {
                p6.setParent(((android.view.View) v0_1));
            }
            this.copyNodeInfoNoChildren(p6, v1);
            v1.recycle();
            this.addChildrenForAccessibility(p6, ((android.view.ViewGroup) p5));
        } else {
            super.onInitializeAccessibilityNodeInfo(p5, p6);
        }
        p6.setClassName(android.support.v4.widget.DrawerLayout.getName());
        p6.setFocusable(0);
        p6.setFocused(0);
        p6.removeAction(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_FOCUS);
        p6.removeAction(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat.ACTION_CLEAR_FOCUS);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        if ((!android.support.v4.widget.DrawerLayout.CAN_HIDE_DESCENDANTS) && (!android.support.v4.widget.DrawerLayout.includeChildForAccessibility(p3))) {
            int v0_2 = 0;
        } else {
            v0_2 = super.onRequestSendAccessibilityEvent(p2, p3, p4);
        }
        return v0_2;
    }
}
package android.support.v4.widget;
final class DrawerLayout$ChildAccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {
    final synthetic android.support.v4.widget.DrawerLayout this$0;

    DrawerLayout$ChildAccessibilityDelegate(android.support.v4.widget.DrawerLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        super.onInitializeAccessibilityNodeInfo(p2, p3);
        if (!android.support.v4.widget.DrawerLayout.includeChildForAccessibility(p2)) {
            p3.setParent(0);
        }
        return;
    }
}
package android.support.v4.widget;
 class DrawerLayout$DrawerLayoutCompatImplApi21 implements android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImpl {

    DrawerLayout$DrawerLayoutCompatImplApi21()
    {
        return;
    }

    public void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams p1, Object p2, int p3)
    {
        android.support.v4.widget.DrawerLayoutCompatApi21.applyMarginInsets(p1, p2, p3);
        return;
    }

    public void configureApplyInsets(android.view.View p1)
    {
        android.support.v4.widget.DrawerLayoutCompatApi21.configureApplyInsets(p1);
        return;
    }

    public void dispatchChildInsets(android.view.View p1, Object p2, int p3)
    {
        android.support.v4.widget.DrawerLayoutCompatApi21.dispatchChildInsets(p1, p2, p3);
        return;
    }

    public android.graphics.drawable.Drawable getDefaultStatusBarBackground(android.content.Context p2)
    {
        return android.support.v4.widget.DrawerLayoutCompatApi21.getDefaultStatusBarBackground(p2);
    }

    public int getTopInset(Object p2)
    {
        return android.support.v4.widget.DrawerLayoutCompatApi21.getTopInset(p2);
    }
}
package android.support.v4.widget;
 class DrawerLayout$DrawerLayoutCompatImplBase implements android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImpl {

    DrawerLayout$DrawerLayoutCompatImplBase()
    {
        return;
    }

    public void applyMarginInsets(android.view.ViewGroup$MarginLayoutParams p1, Object p2, int p3)
    {
        return;
    }

    public void configureApplyInsets(android.view.View p1)
    {
        return;
    }

    public void dispatchChildInsets(android.view.View p1, Object p2, int p3)
    {
        return;
    }

    public android.graphics.drawable.Drawable getDefaultStatusBarBackground(android.content.Context p2)
    {
        return 0;
    }

    public int getTopInset(Object p2)
    {
        return 0;
    }
}
package android.support.v4.widget;
final class DrawerLayout$SavedState$1 implements android.support.v4.os.ParcelableCompatCreatorCallbacks {

    DrawerLayout$SavedState$1()
    {
        return;
    }

    public android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return new android.support.v4.widget.DrawerLayout$SavedState(p2, p3);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.createFromParcel(p2, p3);
    }

    public android.support.v4.widget.DrawerLayout$SavedState[] newArray(int p2)
    {
        android.support.v4.widget.DrawerLayout$SavedState[] v0 = new android.support.v4.widget.DrawerLayout$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.widget;
public class DrawerLayout$SavedState extends android.support.v4.view.AbsSavedState {
    public static final android.os.Parcelable$Creator CREATOR;
    int lockModeEnd;
    int lockModeLeft;
    int lockModeRight;
    int lockModeStart;
    int openDrawerGravity;

    static DrawerLayout$SavedState()
    {
        android.support.v4.widget.DrawerLayout$SavedState.CREATOR = android.support.v4.os.ParcelableCompat.newCreator(new android.support.v4.widget.DrawerLayout$SavedState$1());
        return;
    }

    public DrawerLayout$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        super(p2, p3);
        super.openDrawerGravity = 0;
        super.openDrawerGravity = p2.readInt();
        super.lockModeLeft = p2.readInt();
        super.lockModeRight = p2.readInt();
        super.lockModeStart = p2.readInt();
        super.lockModeEnd = p2.readInt();
        return;
    }

    public DrawerLayout$SavedState(android.os.Parcelable p2)
    {
        super(p2);
        super.openDrawerGravity = 0;
        return;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        super.writeToParcel(p2, p3);
        p2.writeInt(this.openDrawerGravity);
        p2.writeInt(this.lockModeLeft);
        p2.writeInt(this.lockModeRight);
        p2.writeInt(this.lockModeStart);
        p2.writeInt(this.lockModeEnd);
        return;
    }
}
package android.support.v4.widget;
public abstract class DrawerLayout$SimpleDrawerListener implements android.support.v4.widget.DrawerLayout$DrawerListener {

    public DrawerLayout$SimpleDrawerListener()
    {
        return;
    }

    public void onDrawerClosed(android.view.View p1)
    {
        return;
    }

    public void onDrawerOpened(android.view.View p1)
    {
        return;
    }

    public void onDrawerSlide(android.view.View p1, float p2)
    {
        return;
    }

    public void onDrawerStateChanged(int p1)
    {
        return;
    }
}
package android.support.v4.widget;
 class DrawerLayout$ViewDragCallback extends android.support.v4.widget.ViewDragHelper$Callback {
    private final int mAbsGravity;
    private android.support.v4.widget.ViewDragHelper mDragger;
    private final Runnable mPeekRunnable;
    final synthetic android.support.v4.widget.DrawerLayout this$0;

    DrawerLayout$ViewDragCallback(android.support.v4.widget.DrawerLayout p2, int p3)
    {
        this.this$0 = p2;
        this.mPeekRunnable = new android.support.v4.widget.DrawerLayout$ViewDragCallback$1(this);
        this.mAbsGravity = p3;
        return;
    }

    private void closeOtherDrawer()
    {
        int v0 = 3;
        if (this.mAbsGravity == 3) {
            v0 = 5;
        }
        android.view.View v1 = this.this$0.findDrawerWithGravity(v0);
        if (v1 != null) {
            this.this$0.closeDrawer(v1);
        }
        return;
    }

    public int clampViewPositionHorizontal(android.view.View p4, int p5, int p6)
    {
        int v1_2;
        if (!this.this$0.checkDrawerViewAbsoluteGravity(p4, 3)) {
            int v0 = this.this$0.getWidth();
            v1_2 = Math.max((v0 - p4.getWidth()), Math.min(p5, v0));
        } else {
            v1_2 = Math.max((- p4.getWidth()), Math.min(p5, 0));
        }
        return v1_2;
    }

    public int clampViewPositionVertical(android.view.View p2, int p3, int p4)
    {
        return p2.getTop();
    }

    public int getViewHorizontalDragRange(android.view.View p2)
    {
        int v0_2;
        if (!this.this$0.isDrawerView(p2)) {
            v0_2 = 0;
        } else {
            v0_2 = p2.getWidth();
        }
        return v0_2;
    }

    public void onEdgeDragStarted(int p4, int p5)
    {
        android.view.View v0;
        if ((p4 & 1) != 1) {
            v0 = this.this$0.findDrawerWithGravity(5);
        } else {
            v0 = this.this$0.findDrawerWithGravity(3);
        }
        if ((v0 != null) && (this.this$0.getDrawerLockMode(v0) == 0)) {
            this.mDragger.captureChildView(v0, p5);
        }
        return;
    }

    public boolean onEdgeLock(int p2)
    {
        return 0;
    }

    public void onEdgeTouched(int p5, int p6)
    {
        this.this$0.postDelayed(this.mPeekRunnable, 160);
        return;
    }

    public void onViewCaptured(android.view.View p3, int p4)
    {
        ((android.support.v4.widget.DrawerLayout$LayoutParams) p3.getLayoutParams()).isPeeking = 0;
        this.closeOtherDrawer();
        return;
    }

    public void onViewDragStateChanged(int p4)
    {
        this.this$0.updateDrawerState(this.mAbsGravity, p4, this.mDragger.getCapturedView());
        return;
    }

    public void onViewPositionChanged(android.view.View p6, int p7, int p8, int p9, int p10)
    {
        float v1;
        int v0 = p6.getWidth();
        if (!this.this$0.checkDrawerViewAbsoluteGravity(p6, 3)) {
            v1 = (((float) (this.this$0.getWidth() - p7)) / ((float) v0));
        } else {
            v1 = (((float) (v0 + p7)) / ((float) v0));
        }
        android.support.v4.widget.DrawerLayout v3_8;
        this.this$0.setDrawerViewOffset(p6, v1);
        if (v1 != 0) {
            v3_8 = 0;
        } else {
            v3_8 = 4;
        }
        p6.setVisibility(v3_8);
        this.this$0.invalidate();
        return;
    }

    public void onViewReleased(android.view.View p9, float p10, float p11)
    {
        int v1;
        float v2 = this.this$0.getDrawerViewOffset(p9);
        int v0 = p9.getWidth();
        if (!this.this$0.checkDrawerViewAbsoluteGravity(p9, 3)) {
            int v3 = this.this$0.getWidth();
            if ((p10 >= 0) && ((p10 != 0) || (v2 <= 1056964608))) {
                v1 = v3;
            } else {
                v1 = (v3 - v0);
            }
        } else {
            if ((p10 <= 0) && ((p10 != 0) || (v2 <= 1056964608))) {
                v1 = (- v0);
            } else {
                v1 = 0;
            }
        }
        this.mDragger.settleCapturedViewAt(v1, p9.getTop());
        this.this$0.invalidate();
        return;
    }

    void peekDrawer()
    {
        int v1;
        android.support.v4.widget.DrawerLayout v5_3 = 0;
        int v3 = this.mDragger.getEdgeSize();
        if (this.mAbsGravity != 3) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        android.view.View v4;
        int v0;
        if (v1 == 0) {
            v4 = this.this$0.findDrawerWithGravity(5);
            v0 = (this.this$0.getWidth() - v3);
        } else {
            v4 = this.this$0.findDrawerWithGravity(3);
            if (v4 != null) {
                v5_3 = (- v4.getWidth());
            }
            v0 = (v5_3 + v3);
        }
        if (((v4 != null) && (((v1 != 0) && (v4.getLeft() < v0)) || ((v1 == 0) && (v4.getLeft() > v0)))) && (this.this$0.getDrawerLockMode(v4) == 0)) {
            android.support.v4.widget.DrawerLayout$LayoutParams v2_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) v4.getLayoutParams());
            this.mDragger.smoothSlideViewTo(v4, v0, v4.getTop());
            v2_1.isPeeking = 1;
            this.this$0.invalidate();
            this.closeOtherDrawer();
            this.this$0.cancelChildViewTouch();
        }
        return;
    }

    public void removeCallbacks()
    {
        this.this$0.removeCallbacks(this.mPeekRunnable);
        return;
    }

    public void setDragger(android.support.v4.widget.ViewDragHelper p1)
    {
        this.mDragger = p1;
        return;
    }

    public boolean tryCaptureView(android.view.View p3, int p4)
    {
        if ((!this.this$0.isDrawerView(p3)) || ((!this.this$0.checkDrawerViewAbsoluteGravity(p3, this.mAbsGravity)) || (this.this$0.getDrawerLockMode(p3) != 0))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }
}
package android.support.v4.widget;
public class DrawerLayout extends android.view.ViewGroup implements android.support.v4.widget.DrawerLayoutImpl {
    private static final boolean ALLOW_EDGE_LOCK = False;
    static final boolean CAN_HIDE_DESCENDANTS = False;
    private static final boolean CHILDREN_DISALLOW_INTERCEPT = True;
    private static final int DEFAULT_SCRIM_COLOR = 2566914048;
    private static final int DRAWER_ELEVATION = 10;
    static final android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImpl IMPL = None;
    static final int[] LAYOUT_ATTRS = None;
    public static final int LOCK_MODE_LOCKED_CLOSED = 1;
    public static final int LOCK_MODE_LOCKED_OPEN = 2;
    public static final int LOCK_MODE_UNDEFINED = 3;
    public static final int LOCK_MODE_UNLOCKED = 0;
    private static final int MIN_DRAWER_MARGIN = 64;
    private static final int MIN_FLING_VELOCITY = 400;
    private static final int PEEK_DELAY = 160;
    private static final boolean SET_DRAWER_SHADOW_FROM_ELEVATION = False;
    public static final int STATE_DRAGGING = 1;
    public static final int STATE_IDLE = 0;
    public static final int STATE_SETTLING = 2;
    private static final String TAG = "DrawerLayout";
    private static final float TOUCH_SLOP_SENSITIVITY = 16256;
    private final android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate;
    private boolean mChildrenCanceledTouch;
    private boolean mDisallowInterceptRequested;
    private boolean mDrawStatusBarBackground;
    private float mDrawerElevation;
    private int mDrawerState;
    private boolean mFirstLayout;
    private boolean mInLayout;
    private float mInitialMotionX;
    private float mInitialMotionY;
    private Object mLastInsets;
    private final android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback;
    private final android.support.v4.widget.ViewDragHelper mLeftDragger;
    private android.support.v4.widget.DrawerLayout$DrawerListener mListener;
    private java.util.List mListeners;
    private int mLockModeEnd;
    private int mLockModeLeft;
    private int mLockModeRight;
    private int mLockModeStart;
    private int mMinDrawerMargin;
    private final java.util.ArrayList mNonDrawerViews;
    private final android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback;
    private final android.support.v4.widget.ViewDragHelper mRightDragger;
    private int mScrimColor;
    private float mScrimOpacity;
    private android.graphics.Paint mScrimPaint;
    private android.graphics.drawable.Drawable mShadowEnd;
    private android.graphics.drawable.Drawable mShadowLeft;
    private android.graphics.drawable.Drawable mShadowLeftResolved;
    private android.graphics.drawable.Drawable mShadowRight;
    private android.graphics.drawable.Drawable mShadowRightResolved;
    private android.graphics.drawable.Drawable mShadowStart;
    private android.graphics.drawable.Drawable mStatusBarBackground;
    private CharSequence mTitleLeft;
    private CharSequence mTitleRight;

    static DrawerLayout()
    {
        android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplBase v1_0;
        int v2 = 1;
        android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplBase v1_6 = new int[1];
        v1_6[0] = 16842931;
        android.support.v4.widget.DrawerLayout.LAYOUT_ATTRS = v1_6;
        if (android.os.Build$VERSION.SDK_INT < 19) {
            v1_0 = 0;
        } else {
            v1_0 = 1;
        }
        android.support.v4.widget.DrawerLayout.CAN_HIDE_DESCENDANTS = v1_0;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            v2 = 0;
        }
        android.support.v4.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION = v2;
        if (android.os.Build$VERSION.SDK_INT < 21) {
            android.support.v4.widget.DrawerLayout.IMPL = new android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplBase();
        } else {
            android.support.v4.widget.DrawerLayout.IMPL = new android.support.v4.widget.DrawerLayout$DrawerLayoutCompatImplApi21();
        }
        return;
    }

    public DrawerLayout(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public DrawerLayout(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public DrawerLayout(android.content.Context p8, android.util.AttributeSet p9, int p10)
    {
        super(p8, p9, p10);
        super.mChildAccessibilityDelegate = new android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate(super);
        super.mScrimColor = -1728053248;
        super.mScrimPaint = new android.graphics.Paint();
        super.mFirstLayout = 1;
        super.mLockModeLeft = 3;
        super.mLockModeRight = 3;
        super.mLockModeStart = 3;
        super.mLockModeEnd = 3;
        super.mShadowStart = 0;
        super.mShadowEnd = 0;
        super.mShadowLeft = 0;
        super.mShadowRight = 0;
        super.setDescendantFocusability(262144);
        float v0 = super.getResources().getDisplayMetrics().density;
        super.mMinDrawerMargin = ((int) ((1115684864 * v0) + 1056964608));
        float v1 = (1137180672 * v0);
        super.mLeftCallback = new android.support.v4.widget.DrawerLayout$ViewDragCallback(super, 3);
        super.mRightCallback = new android.support.v4.widget.DrawerLayout$ViewDragCallback(super, 5);
        super.mLeftDragger = android.support.v4.widget.ViewDragHelper.create(super, 1065353216, super.mLeftCallback);
        super.mLeftDragger.setEdgeTrackingEnabled(1);
        super.mLeftDragger.setMinVelocity(v1);
        super.mLeftCallback.setDragger(super.mLeftDragger);
        super.mRightDragger = android.support.v4.widget.ViewDragHelper.create(super, 1065353216, super.mRightCallback);
        super.mRightDragger.setEdgeTrackingEnabled(2);
        super.mRightDragger.setMinVelocity(v1);
        super.mRightCallback.setDragger(super.mRightDragger);
        super.setFocusableInTouchMode(1);
        android.support.v4.view.ViewCompat.setImportantForAccessibility(super, 1);
        android.support.v4.view.ViewCompat.setAccessibilityDelegate(super, new android.support.v4.widget.DrawerLayout$AccessibilityDelegate(super));
        android.support.v4.view.ViewGroupCompat.setMotionEventSplittingEnabled(super, 0);
        if (android.support.v4.view.ViewCompat.getFitsSystemWindows(super)) {
            android.support.v4.widget.DrawerLayout.IMPL.configureApplyInsets(super);
            super.mStatusBarBackground = android.support.v4.widget.DrawerLayout.IMPL.getDefaultStatusBarBackground(p8);
        }
        super.mDrawerElevation = (1092616192 * v0);
        super.mNonDrawerViews = new java.util.ArrayList();
        return;
    }

    static String gravityToString(int p2)
    {
        String v0_2;
        if ((p2 & 3) != 3) {
            if ((p2 & 5) != 5) {
                v0_2 = Integer.toHexString(p2);
            } else {
                v0_2 = "RIGHT";
            }
        } else {
            v0_2 = "LEFT";
        }
        return v0_2;
    }

    private static boolean hasOpaqueBackground(android.view.View p4)
    {
        int v1 = 0;
        android.graphics.drawable.Drawable v0 = p4.getBackground();
        if ((v0 != null) && (v0.getOpacity() == -1)) {
            v1 = 1;
        }
        return v1;
    }

    private boolean hasPeekingDrawer()
    {
        int v0 = this.getChildCount();
        int v1 = 0;
        while (v1 < v0) {
            if (!((android.support.v4.widget.DrawerLayout$LayoutParams) this.getChildAt(v1).getLayoutParams()).isPeeking) {
                v1++;
            } else {
                int v3_1 = 1;
            }
            return v3_1;
        }
        v3_1 = 0;
        return v3_1;
    }

    private boolean hasVisibleDrawer()
    {
        int v0_1;
        if (this.findVisibleDrawer() == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    static boolean includeChildForAccessibility(android.view.View p2)
    {
        if ((android.support.v4.view.ViewCompat.getImportantForAccessibility(p2) == 4) || (android.support.v4.view.ViewCompat.getImportantForAccessibility(p2) == 2)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private boolean mirror(android.graphics.drawable.Drawable p2, int p3)
    {
        if ((p2 != null) && (android.support.v4.graphics.drawable.DrawableCompat.isAutoMirrored(p2))) {
            android.support.v4.graphics.drawable.DrawableCompat.setLayoutDirection(p2, p3);
            int v0_1 = 1;
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    private android.graphics.drawable.Drawable resolveLeftShadow()
    {
        android.graphics.drawable.Drawable v1_0;
        int v0 = android.support.v4.view.ViewCompat.getLayoutDirection(this);
        if (v0 != 0) {
            if (this.mShadowEnd == null) {
                v1_0 = this.mShadowLeft;
            } else {
                this.mirror(this.mShadowEnd, v0);
                v1_0 = this.mShadowEnd;
            }
        } else {
            if (this.mShadowStart == null) {
            } else {
                this.mirror(this.mShadowStart, v0);
                v1_0 = this.mShadowStart;
            }
        }
        return v1_0;
    }

    private android.graphics.drawable.Drawable resolveRightShadow()
    {
        android.graphics.drawable.Drawable v1_0;
        int v0 = android.support.v4.view.ViewCompat.getLayoutDirection(this);
        if (v0 != 0) {
            if (this.mShadowStart == null) {
                v1_0 = this.mShadowRight;
            } else {
                this.mirror(this.mShadowStart, v0);
                v1_0 = this.mShadowStart;
            }
        } else {
            if (this.mShadowEnd == null) {
            } else {
                this.mirror(this.mShadowEnd, v0);
                v1_0 = this.mShadowEnd;
            }
        }
        return v1_0;
    }

    private void resolveShadowDrawables()
    {
        if (!android.support.v4.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION) {
            this.mShadowLeftResolved = this.resolveLeftShadow();
            this.mShadowRightResolved = this.resolveRightShadow();
        }
        return;
    }

    private void updateChildrenImportantForAccessibility(android.view.View p5, boolean p6)
    {
        int v1 = this.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            android.view.View v0 = this.getChildAt(v2);
            if (((p6) || (this.isDrawerView(v0))) && ((!p6) || (v0 != p5))) {
                android.support.v4.view.ViewCompat.setImportantForAccessibility(v0, 4);
            } else {
                android.support.v4.view.ViewCompat.setImportantForAccessibility(v0, 1);
            }
            v2++;
        }
        return;
    }

    public void addDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener p2)
    {
        if (p2 != null) {
            if (this.mListeners == null) {
                this.mListeners = new java.util.ArrayList();
            }
            this.mListeners.add(p2);
        }
        return;
    }

    public void addFocusables(java.util.ArrayList p8, int p9, int p10)
    {
        if (this.getDescendantFocusability() != 393216) {
            int v1 = this.getChildCount();
            int v3 = 0;
            int v2_1 = 0;
            while (v2_1 < v1) {
                android.view.View v0_2 = this.getChildAt(v2_1);
                if (!this.isDrawerView(v0_2)) {
                    this.mNonDrawerViews.add(v0_2);
                } else {
                    if (this.isDrawerOpen(v0_2)) {
                        v3 = 1;
                        v0_2.addFocusables(p8, p9, p10);
                    }
                }
                v2_1++;
            }
            if (v3 == 0) {
                int v4 = this.mNonDrawerViews.size();
                int v2_0 = 0;
                while (v2_0 < v4) {
                    android.view.View v0_1 = ((android.view.View) this.mNonDrawerViews.get(v2_0));
                    if (v0_1.getVisibility() == 0) {
                        v0_1.addFocusables(p8, p9, p10);
                    }
                    v2_0++;
                }
            }
            this.mNonDrawerViews.clear();
        }
        return;
    }

    public void addView(android.view.View p3, int p4, android.view.ViewGroup$LayoutParams p5)
    {
        super.addView(p3, p4, p5);
        if ((this.findOpenDrawer() == null) && (!this.isDrawerView(p3))) {
            android.support.v4.view.ViewCompat.setImportantForAccessibility(p3, 1);
        } else {
            android.support.v4.view.ViewCompat.setImportantForAccessibility(p3, 4);
        }
        if (!android.support.v4.widget.DrawerLayout.CAN_HIDE_DESCENDANTS) {
            android.support.v4.view.ViewCompat.setAccessibilityDelegate(p3, this.mChildAccessibilityDelegate);
        }
        return;
    }

    void cancelChildViewTouch()
    {
        if (!this.mChildrenCanceledTouch) {
            long v0 = android.os.SystemClock.uptimeMillis();
            android.view.MotionEvent v8 = android.view.MotionEvent.obtain(v0, v0, 3, 0, 0, 0);
            int v9 = this.getChildCount();
            int v10 = 0;
            while (v10 < v9) {
                this.getChildAt(v10).dispatchTouchEvent(v8);
                v10++;
            }
            v8.recycle();
            this.mChildrenCanceledTouch = 1;
        }
        return;
    }

    boolean checkDrawerViewAbsoluteGravity(android.view.View p3, int p4)
    {
        int v1_1;
        if ((this.getDrawerViewAbsoluteGravity(p3) & p4) != p4) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        if ((!(p2 instanceof android.support.v4.widget.DrawerLayout$LayoutParams)) || (!super.checkLayoutParams(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void closeDrawer(int p2)
    {
        this.closeDrawer(p2, 1);
        return;
    }

    public void closeDrawer(int p5, boolean p6)
    {
        android.view.View v0 = this.findDrawerWithGravity(p5);
        if (v0 != null) {
            this.closeDrawer(v0, p6);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("No drawer view found with gravity ").append(android.support.v4.widget.DrawerLayout.gravityToString(p5)).toString());
        }
    }

    public void closeDrawer(android.view.View p2)
    {
        this.closeDrawer(p2, 1);
        return;
    }

    public void closeDrawer(android.view.View p5, boolean p6)
    {
        if (this.isDrawerView(p5)) {
            android.support.v4.widget.DrawerLayout$LayoutParams v0_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p5.getLayoutParams());
            if (!this.mFirstLayout) {
                if (!p6) {
                    this.moveDrawerToOffset(p5, 0);
                    this.updateDrawerState(v0_1.gravity, 0, p5);
                    p5.setVisibility(4);
                } else {
                    v0_1.openState = (v0_1.openState | 4);
                    if (!this.checkDrawerViewAbsoluteGravity(p5, 3)) {
                        this.mRightDragger.smoothSlideViewTo(p5, this.getWidth(), p5.getTop());
                    } else {
                        this.mLeftDragger.smoothSlideViewTo(p5, (- p5.getWidth()), p5.getTop());
                    }
                }
            } else {
                v0_1.onScreen = 0;
                v0_1.openState = 0;
            }
            this.invalidate();
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p5).append(" is not a sliding drawer").toString());
        }
    }

    public void closeDrawers()
    {
        this.closeDrawers(0);
        return;
    }

    void closeDrawers(boolean p10)
    {
        int v5 = 0;
        int v1 = this.getChildCount();
        int v3 = 0;
        while (v3 < v1) {
            android.view.View v0 = this.getChildAt(v3);
            android.support.v4.widget.DrawerLayout$LayoutParams v4_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) v0.getLayoutParams());
            if ((this.isDrawerView(v0)) && ((!p10) || (v4_1.isPeeking))) {
                int v2 = v0.getWidth();
                if (!this.checkDrawerViewAbsoluteGravity(v0, 3)) {
                    v5 |= this.mRightDragger.smoothSlideViewTo(v0, this.getWidth(), v0.getTop());
                } else {
                    v5 |= this.mLeftDragger.smoothSlideViewTo(v0, (- v2), v0.getTop());
                }
                v4_1.isPeeking = 0;
            }
            v3++;
        }
        this.mLeftCallback.removeCallbacks();
        this.mRightCallback.removeCallbacks();
        if (v5 != 0) {
            this.invalidate();
        }
        return;
    }

    public void computeScroll()
    {
        int v0 = this.getChildCount();
        float v3 = 0;
        int v1 = 0;
        while (v1 < v0) {
            v3 = Math.max(v3, ((android.support.v4.widget.DrawerLayout$LayoutParams) this.getChildAt(v1).getLayoutParams()).onScreen);
            v1++;
        }
        this.mScrimOpacity = v3;
        if ((this.mLeftDragger.continueSettling(1) | this.mRightDragger.continueSettling(1)) != 0) {
            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
        }
        return;
    }

    void dispatchOnDrawerClosed(android.view.View p8)
    {
        android.support.v4.widget.DrawerLayout$LayoutParams v2_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p8.getLayoutParams());
        if ((v2_1.openState & 1) == 1) {
            v2_1.openState = 0;
            if (this.mListeners != null) {
                int v0 = (this.mListeners.size() - 1);
                while (v0 >= 0) {
                    ((android.support.v4.widget.DrawerLayout$DrawerListener) this.mListeners.get(v0)).onDrawerClosed(p8);
                    v0--;
                }
            }
            this.updateChildrenImportantForAccessibility(p8, 0);
            if (this.hasWindowFocus()) {
                android.view.View v3 = this.getRootView();
                if (v3 != null) {
                    v3.sendAccessibilityEvent(32);
                }
            }
        }
        return;
    }

    void dispatchOnDrawerOpened(android.view.View p6)
    {
        android.support.v4.widget.DrawerLayout$LayoutParams v2_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p6.getLayoutParams());
        if ((v2_1.openState & 1) == 0) {
            v2_1.openState = 1;
            if (this.mListeners != null) {
                int v0 = (this.mListeners.size() - 1);
                while (v0 >= 0) {
                    ((android.support.v4.widget.DrawerLayout$DrawerListener) this.mListeners.get(v0)).onDrawerOpened(p6);
                    v0--;
                }
            }
            this.updateChildrenImportantForAccessibility(p6, 1);
            if (this.hasWindowFocus()) {
                this.sendAccessibilityEvent(32);
            }
        }
        return;
    }

    void dispatchOnDrawerSlide(android.view.View p4, float p5)
    {
        if (this.mListeners != null) {
            int v0 = (this.mListeners.size() - 1);
            while (v0 >= 0) {
                ((android.support.v4.widget.DrawerLayout$DrawerListener) this.mListeners.get(v0)).onDrawerSlide(p4, p5);
                v0--;
            }
        }
        return;
    }

    protected boolean drawChild(android.graphics.Canvas p30, android.view.View p31, long p32)
    {
        int v18 = this.getHeight();
        boolean v17 = this.isContentView(p31);
        int v13 = 0;
        int v14 = this.getWidth();
        int v21 = p30.save();
        if (v17) {
            int v10 = this.getChildCount();
            int v19 = 0;
            while (v19 < v10) {
                android.view.View v25 = this.getChildAt(v19);
                if ((v25 != p31) && ((v25.getVisibility() == 0) && ((android.support.v4.widget.DrawerLayout.hasOpaqueBackground(v25)) && ((this.isDrawerView(v25)) && (v25.getHeight() >= v18))))) {
                    if (!this.checkDrawerViewAbsoluteGravity(v25, 3)) {
                        int v26 = v25.getLeft();
                        if (v26 < v14) {
                            v14 = v26;
                        }
                    } else {
                        int v27 = v25.getRight();
                        if (v27 > v13) {
                            v13 = v27;
                        }
                    }
                }
                v19++;
            }
            p30.clipRect(v13, 0, v14, this.getHeight());
        }
        boolean v22 = super.drawChild(p30, p31, p32);
        p30.restoreToCount(v21);
        if ((this.mScrimOpacity <= 0) || (!v17)) {
            if ((this.mShadowLeftResolved == null) || (!this.checkDrawerViewAbsoluteGravity(p31, 3))) {
                if ((this.mShadowRightResolved != null) && (this.checkDrawerViewAbsoluteGravity(p31, 5))) {
                    int v23_0 = this.mShadowRightResolved.getIntrinsicWidth();
                    int v11 = p31.getLeft();
                    float v8_1 = Math.max(0, Math.min((((float) (this.getWidth() - v11)) / ((float) this.mRightDragger.getEdgeSize())), 1065353216));
                    this.mShadowRightResolved.setBounds((v11 - v23_0), p31.getTop(), v11, p31.getBottom());
                    this.mShadowRightResolved.setAlpha(((int) (1132396544 * v8_1)));
                    this.mShadowRightResolved.draw(p30);
                }
            } else {
                int v23_1 = this.mShadowLeftResolved.getIntrinsicWidth();
                int v12 = p31.getRight();
                float v8_0 = Math.max(0, Math.min((((float) v12) / ((float) this.mLeftDragger.getEdgeSize())), 1065353216));
                this.mShadowLeftResolved.setBounds(v12, p31.getTop(), (v12 + v23_1), p31.getBottom());
                this.mShadowLeftResolved.setAlpha(((int) (1132396544 * v8_0)));
                this.mShadowLeftResolved.draw(p30);
            }
        } else {
            this.mScrimPaint.setColor(((((int) (((float) ((this.mScrimColor & -16777216) >> 24)) * this.mScrimOpacity)) << 24) | (this.mScrimColor & 16777215)));
            p30.drawRect(((float) v13), 0, ((float) v14), ((float) this.getHeight()), this.mScrimPaint);
        }
        return v22;
    }

    android.view.View findDrawerWithGravity(int p7)
    {
        int v0 = (android.support.v4.view.GravityCompat.getAbsoluteGravity(p7, android.support.v4.view.ViewCompat.getLayoutDirection(this)) & 7);
        int v3 = this.getChildCount();
        int v4 = 0;
        while (v4 < v3) {
            int v1 = this.getChildAt(v4);
            if ((this.getDrawerViewAbsoluteGravity(v1) & 7) != v0) {
                v4++;
            }
            return v1;
        }
        v1 = 0;
        return v1;
    }

    android.view.View findOpenDrawer()
    {
        int v1 = this.getChildCount();
        int v3 = 0;
        while (v3 < v1) {
            int v0 = this.getChildAt(v3);
            if ((((android.support.v4.widget.DrawerLayout$LayoutParams) v0.getLayoutParams()).openState & 1) != 1) {
                v3++;
            }
            return v0;
        }
        v0 = 0;
        return v0;
    }

    android.view.View findVisibleDrawer()
    {
        int v1 = this.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            int v0 = this.getChildAt(v2);
            if ((!this.isDrawerView(v0)) || (!this.isDrawerVisible(v0))) {
                v2++;
            }
            return v0;
        }
        v0 = 0;
        return v0;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        return new android.support.v4.widget.DrawerLayout$LayoutParams(-1, -1);
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet p3)
    {
        return new android.support.v4.widget.DrawerLayout$LayoutParams(this.getContext(), p3);
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams p2)
    {
        android.support.v4.widget.DrawerLayout$LayoutParams v0_1;
        if (!(p2 instanceof android.support.v4.widget.DrawerLayout$LayoutParams)) {
            if (!(p2 instanceof android.view.ViewGroup$MarginLayoutParams)) {
                v0_1 = new android.support.v4.widget.DrawerLayout$LayoutParams(p2);
            } else {
                v0_1 = new android.support.v4.widget.DrawerLayout$LayoutParams(((android.view.ViewGroup$MarginLayoutParams) p2));
            }
        } else {
            v0_1 = new android.support.v4.widget.DrawerLayout$LayoutParams(((android.support.v4.widget.DrawerLayout$LayoutParams) p2));
        }
        return v0_1;
    }

    public float getDrawerElevation()
    {
        int v0_1;
        if (!android.support.v4.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION) {
            v0_1 = 0;
        } else {
            v0_1 = this.mDrawerElevation;
        }
        return v0_1;
    }

    public int getDrawerLockMode(int p8)
    {
        int v2;
        int v1 = android.support.v4.view.ViewCompat.getLayoutDirection(this);
        switch (p8) {
            case 3:
                if (this.mLockModeLeft == 3) {
                    if (v1 != 0) {
                        v2 = this.mLockModeEnd;
                    } else {
                        v2 = this.mLockModeStart;
                    }
                    if (v2 == 3) {
                        v2 = 0;
                    } else {
                    }
                } else {
                    v2 = this.mLockModeLeft;
                }
                break;
            case 5:
                if (this.mLockModeRight == 3) {
                    int v3;
                    if (v1 != 0) {
                        v3 = this.mLockModeStart;
                    } else {
                        v3 = this.mLockModeEnd;
                    }
                    if (v3 == 3) {
                    } else {
                        v2 = v3;
                    }
                } else {
                    v2 = this.mLockModeRight;
                }
                break;
            case 8388611:
                if (this.mLockModeStart == 3) {
                    int v4;
                    if (v1 != 0) {
                        v4 = this.mLockModeRight;
                    } else {
                        v4 = this.mLockModeLeft;
                    }
                    if (v4 == 3) {
                    } else {
                        v2 = v4;
                    }
                } else {
                    v2 = this.mLockModeStart;
                }
                break;
            case 8388613:
                if (this.mLockModeEnd == 3) {
                    int v0;
                    if (v1 != 0) {
                        v0 = this.mLockModeLeft;
                    } else {
                        v0 = this.mLockModeRight;
                    }
                    if (v0 == 3) {
                    } else {
                        v2 = v0;
                    }
                } else {
                    v2 = this.mLockModeEnd;
                }
                break;
            default:
        }
        return v2;
    }

    public int getDrawerLockMode(android.view.View p5)
    {
        if (this.isDrawerView(p5)) {
            return this.getDrawerLockMode(((android.support.v4.widget.DrawerLayout$LayoutParams) p5.getLayoutParams()).gravity);
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p5).append(" is not a drawer").toString());
        }
    }

    public CharSequence getDrawerTitle(int p3)
    {
        int v1_1;
        int v0 = android.support.v4.view.GravityCompat.getAbsoluteGravity(p3, android.support.v4.view.ViewCompat.getLayoutDirection(this));
        if (v0 != 3) {
            if (v0 != 5) {
                v1_1 = 0;
            } else {
                v1_1 = this.mTitleRight;
            }
        } else {
            v1_1 = this.mTitleLeft;
        }
        return v1_1;
    }

    int getDrawerViewAbsoluteGravity(android.view.View p3)
    {
        return android.support.v4.view.GravityCompat.getAbsoluteGravity(((android.support.v4.widget.DrawerLayout$LayoutParams) p3.getLayoutParams()).gravity, android.support.v4.view.ViewCompat.getLayoutDirection(this));
    }

    float getDrawerViewOffset(android.view.View p2)
    {
        return ((android.support.v4.widget.DrawerLayout$LayoutParams) p2.getLayoutParams()).onScreen;
    }

    public android.graphics.drawable.Drawable getStatusBarBackgroundDrawable()
    {
        return this.mStatusBarBackground;
    }

    boolean isContentView(android.view.View p2)
    {
        int v0_3;
        if (((android.support.v4.widget.DrawerLayout$LayoutParams) p2.getLayoutParams()).gravity != 0) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isDrawerOpen(int p3)
    {
        int v1;
        android.view.View v0 = this.findDrawerWithGravity(p3);
        if (v0 == null) {
            v1 = 0;
        } else {
            v1 = this.isDrawerOpen(v0);
        }
        return v1;
    }

    public boolean isDrawerOpen(android.view.View p5)
    {
        int v1_0 = 1;
        if (this.isDrawerView(p5)) {
            if ((((android.support.v4.widget.DrawerLayout$LayoutParams) p5.getLayoutParams()).openState & 1) != 1) {
                v1_0 = 0;
            }
            return v1_0;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p5).append(" is not a drawer").toString());
        }
    }

    boolean isDrawerView(android.view.View p5)
    {
        int v2_1;
        int v0 = android.support.v4.view.GravityCompat.getAbsoluteGravity(((android.support.v4.widget.DrawerLayout$LayoutParams) p5.getLayoutParams()).gravity, android.support.v4.view.ViewCompat.getLayoutDirection(p5));
        if ((v0 & 3) == 0) {
            if ((v0 & 5) == 0) {
                v2_1 = 0;
            } else {
                v2_1 = 1;
            }
        } else {
            v2_1 = 1;
        }
        return v2_1;
    }

    public boolean isDrawerVisible(int p3)
    {
        int v1;
        android.view.View v0 = this.findDrawerWithGravity(p3);
        if (v0 == null) {
            v1 = 0;
        } else {
            v1 = this.isDrawerVisible(v0);
        }
        return v1;
    }

    public boolean isDrawerVisible(android.view.View p4)
    {
        if (this.isDrawerView(p4)) {
            int v0_1;
            if (((android.support.v4.widget.DrawerLayout$LayoutParams) p4.getLayoutParams()).onScreen <= 0) {
                v0_1 = 0;
            } else {
                v0_1 = 1;
            }
            return v0_1;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p4).append(" is not a drawer").toString());
        }
    }

    void moveDrawerToOffset(android.view.View p7, float p8)
    {
        float v2 = this.getDrawerViewOffset(p7);
        int v4 = p7.getWidth();
        int v0 = (((int) (((float) v4) * p8)) - ((int) (((float) v4) * v2)));
        if (!this.checkDrawerViewAbsoluteGravity(p7, 3)) {
            v0 = (- v0);
        }
        p7.offsetLeftAndRight(v0);
        this.setDrawerViewOffset(p7, p8);
        return;
    }

    protected void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.mFirstLayout = 1;
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.mFirstLayout = 1;
        return;
    }

    public void onDraw(android.graphics.Canvas p5)
    {
        super.onDraw(p5);
        if ((this.mDrawStatusBarBackground) && (this.mStatusBarBackground != null)) {
            int v0 = android.support.v4.widget.DrawerLayout.IMPL.getTopInset(this.mLastInsets);
            if (v0 > 0) {
                this.mStatusBarBackground.setBounds(0, 0, this.getWidth(), v0);
                this.mStatusBarBackground.draw(p5);
            }
        }
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p12)
    {
        int v6 = 0;
        int v0 = android.support.v4.view.MotionEventCompat.getActionMasked(p12);
        int v2 = (this.mLeftDragger.shouldInterceptTouchEvent(p12) | this.mRightDragger.shouldInterceptTouchEvent(p12));
        int v3 = 0;
        switch (v0) {
            case 0:
                float v4 = p12.getX();
                float v5 = p12.getY();
                this.mInitialMotionX = v4;
                this.mInitialMotionY = v5;
                if (this.mScrimOpacity > 0) {
                    android.view.View v1 = this.mLeftDragger.findTopChildUnder(((int) v4), ((int) v5));
                    if ((v1 != null) && (this.isContentView(v1))) {
                        v3 = 1;
                    }
                }
                this.mDisallowInterceptRequested = 0;
                this.mChildrenCanceledTouch = 0;
                break;
            case 1:
            case 3:
                this.closeDrawers(1);
                this.mDisallowInterceptRequested = 0;
                this.mChildrenCanceledTouch = 0;
                break;
            case 2:
                if (!this.mLeftDragger.checkTouchSlop(3)) {
                } else {
                    this.mLeftCallback.removeCallbacks();
                    this.mRightCallback.removeCallbacks();
                }
                break;
            default:
                if (v2 != 0) {
                    v6 = 1;
                    return v6;
                } else {
                    if ((v3 == 0) && ((!this.hasPeekingDrawer()) && (!this.mChildrenCanceledTouch))) {
                        return v6;
                    } else {
                    }
                }
        }
        if ((v2 != 0) || ((v3 == 0) || ((!this.hasPeekingDrawer()) || (this.mChildrenCanceledTouch)))) {
        }
        return v6;
    }

    public boolean onKeyDown(int p2, android.view.KeyEvent p3)
    {
        if ((p2 != 4) || (!this.hasVisibleDrawer())) {
            int v0_2 = super.onKeyDown(p2, p3);
        } else {
            p3.startTracking();
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean onKeyUp(int p3, android.view.KeyEvent p4)
    {
        int v1_1;
        if (p3 != 4) {
            v1_1 = super.onKeyUp(p3, p4);
        } else {
            android.view.View v0 = this.findVisibleDrawer();
            if ((v0 != null) && (this.getDrawerLockMode(v0) == 0)) {
                this.closeDrawers();
            }
            if (v0 == null) {
                v1_1 = 0;
            } else {
                v1_1 = 1;
            }
        }
        return v1_1;
    }

    protected void onLayout(boolean p24, int p25, int p26, int p27, int p28)
    {
        this.mInLayout = 1;
        int v17 = (p27 - p25);
        int v6 = this.getChildCount();
        int v12 = 0;
        while (v12 < v6) {
            android.view.View v5 = this.getChildAt(v12);
            if (v5.getVisibility() != 8) {
                android.support.v4.widget.DrawerLayout$LayoutParams v13_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) v5.getLayoutParams());
                if (!this.isContentView(v5)) {
                    int v8;
                    float v14;
                    int v10 = v5.getMeasuredWidth();
                    int v7 = v5.getMeasuredHeight();
                    if (!this.checkDrawerViewAbsoluteGravity(v5, 3)) {
                        v8 = (v17 - ((int) (((float) v10) * v13_1.onScreen)));
                        v14 = (((float) (v17 - v8)) / ((float) v10));
                    } else {
                        v8 = ((- v10) + ((int) (((float) v10) * v13_1.onScreen)));
                        v14 = (((float) (v10 + v8)) / ((float) v10));
                    }
                    int v4;
                    if (v14 == v13_1.onScreen) {
                        v4 = 0;
                    } else {
                        v4 = 1;
                    }
                    switch ((v13_1.gravity & 112)) {
                        case 16:
                            int v11_0 = (p28 - p26);
                            int v9 = ((v11_0 - v7) / 2);
                            if (v9 >= v13_1.topMargin) {
                                if ((v9 + v7) > (v11_0 - v13_1.bottomMargin)) {
                                    v9 = ((v11_0 - v13_1.bottomMargin) - v7);
                                }
                            } else {
                                v9 = v13_1.topMargin;
                            }
                            v5.layout(v8, v9, (v8 + v10), (v9 + v7));
                            break;
                        case 80:
                            int v11_1 = (p28 - p26);
                            v5.layout(v8, ((v11_1 - v13_1.bottomMargin) - v5.getMeasuredHeight()), (v8 + v10), (v11_1 - v13_1.bottomMargin));
                            break;
                        default:
                            v5.layout(v8, v13_1.topMargin, (v8 + v10), (v13_1.topMargin + v7));
                    }
                    if (v4 != 0) {
                        this.setDrawerViewOffset(v5, v14);
                    }
                    int v15;
                    if (v13_1.onScreen <= 0) {
                        v15 = 4;
                    } else {
                        v15 = 0;
                    }
                    if (v5.getVisibility() != v15) {
                        v5.setVisibility(v15);
                    }
                } else {
                    v5.layout(v13_1.leftMargin, v13_1.topMargin, (v13_1.leftMargin + v5.getMeasuredWidth()), (v13_1.topMargin + v5.getMeasuredHeight()));
                }
            }
            v12++;
        }
        this.mInLayout = 0;
        this.mFirstLayout = 0;
        return;
    }

    protected void onMeasure(int p26, int p27)
    {
        int v20 = android.view.View$MeasureSpec.getMode(p26);
        int v14 = android.view.View$MeasureSpec.getMode(p27);
        int v21 = android.view.View$MeasureSpec.getSize(p26);
        int v15 = android.view.View$MeasureSpec.getSize(p27);
        if ((v20 != 1073741824) || (v14 != 1073741824)) {
            if (!this.isInEditMode()) {
                throw new IllegalArgumentException("DrawerLayout must be measured with MeasureSpec.EXACTLY.");
            } else {
                if ((v20 != -2147483648) && (v20 == 0)) {
                    v21 = 300;
                }
                if ((v14 != -2147483648) && (v14 == 0)) {
                    v15 = 300;
                }
            }
        }
        int v3;
        this.setMeasuredDimension(v21, v15);
        if ((this.mLastInsets == null) || (!android.support.v4.view.ViewCompat.getFitsSystemWindows(this))) {
            v3 = 0;
        } else {
            v3 = 1;
        }
        int v18 = android.support.v4.view.ViewCompat.getLayoutDirection(this);
        int v12 = 0;
        int v13 = 0;
        int v6 = this.getChildCount();
        int v16 = 0;
        while (v16 < v6) {
            android.view.View v5 = this.getChildAt(v16);
            if (v5.getVisibility() != 8) {
                android.support.v4.widget.DrawerLayout$LayoutParams v19_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) v5.getLayoutParams());
                if (v3 != 0) {
                    int v4 = android.support.v4.view.GravityCompat.getAbsoluteGravity(v19_1.gravity, v18);
                    if (!android.support.v4.view.ViewCompat.getFitsSystemWindows(v5)) {
                        android.support.v4.widget.DrawerLayout.IMPL.applyMarginInsets(v19_1, this.mLastInsets, v4);
                    } else {
                        android.support.v4.widget.DrawerLayout.IMPL.dispatchChildInsets(v5, this.mLastInsets, v4);
                    }
                }
                if (!this.isContentView(v5)) {
                    if (!this.isDrawerView(v5)) {
                        throw new IllegalStateException(new StringBuilder().append("Child ").append(v5).append(" at index ").append(v16).append(" does not have a valid layout_gravity - must be Gravity.LEFT, ").append("Gravity.RIGHT or Gravity.NO_GRAVITY").toString());
                    } else {
                        if ((android.support.v4.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION) && (android.support.v4.view.ViewCompat.getElevation(v5) != this.mDrawerElevation)) {
                            android.support.v4.view.ViewCompat.setElevation(v5, this.mDrawerElevation);
                        }
                        int v17;
                        int v7 = (this.getDrawerViewAbsoluteGravity(v5) & 7);
                        if (v7 != 3) {
                            v17 = 0;
                        } else {
                            v17 = 1;
                        }
                        if (((v17 == 0) || (v12 == 0)) && ((v17 != 0) || (v13 == 0))) {
                            if (v17 == 0) {
                                v13 = 1;
                            } else {
                                v12 = 1;
                            }
                            v5.measure(android.support.v4.widget.DrawerLayout.getChildMeasureSpec(p26, ((this.mMinDrawerMargin + v19_1.leftMargin) + v19_1.rightMargin), v19_1.width), android.support.v4.widget.DrawerLayout.getChildMeasureSpec(p27, (v19_1.topMargin + v19_1.bottomMargin), v19_1.height));
                        } else {
                            throw new IllegalStateException(new StringBuilder().append("Child drawer has absolute gravity ").append(android.support.v4.widget.DrawerLayout.gravityToString(v7)).append(" but this ").append("DrawerLayout").append(" already has a ").append("drawer view along that edge").toString());
                        }
                    }
                } else {
                    v5.measure(android.view.View$MeasureSpec.makeMeasureSpec(((v21 - v19_1.leftMargin) - v19_1.rightMargin), 1073741824), android.view.View$MeasureSpec.makeMeasureSpec(((v15 - v19_1.topMargin) - v19_1.bottomMargin), 1073741824));
                }
            }
            v16++;
        }
        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable p6)
    {
        if ((p6 instanceof android.support.v4.widget.DrawerLayout$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.widget.DrawerLayout$SavedState) p6).getSuperState());
            if (((android.support.v4.widget.DrawerLayout$SavedState) p6).openDrawerGravity != 0) {
                android.view.View v1 = this.findDrawerWithGravity(((android.support.v4.widget.DrawerLayout$SavedState) p6).openDrawerGravity);
                if (v1 != null) {
                    this.openDrawer(v1);
                }
            }
            if (((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeLeft != 3) {
                this.setDrawerLockMode(((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeLeft, 3);
            }
            if (((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeRight != 3) {
                this.setDrawerLockMode(((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeRight, 5);
            }
            if (((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeStart != 3) {
                this.setDrawerLockMode(((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeStart, 8388611);
            }
            if (((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeEnd != 3) {
                this.setDrawerLockMode(((android.support.v4.widget.DrawerLayout$SavedState) p6).lockModeEnd, 8388613);
            }
        } else {
            super.onRestoreInstanceState(p6);
        }
        return;
    }

    public void onRtlPropertiesChanged(int p1)
    {
        this.resolveShadowDrawables();
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.widget.DrawerLayout$SavedState v6_1 = new android.support.v4.widget.DrawerLayout$SavedState(super.onSaveInstanceState());
        int v1 = this.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            int v4;
            android.support.v4.widget.DrawerLayout$LayoutParams v5_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) this.getChildAt(v2).getLayoutParams());
            if (v5_1.openState != 1) {
                v4 = 0;
            } else {
                v4 = 1;
            }
            int v3;
            if (v5_1.openState != 2) {
                v3 = 0;
            } else {
                v3 = 1;
            }
            if ((v4 == 0) && (v3 == 0)) {
                v2++;
            } else {
                v6_1.openDrawerGravity = v5_1.gravity;
                break;
            }
        }
        v6_1.lockModeLeft = this.mLockModeLeft;
        v6_1.lockModeRight = this.mLockModeRight;
        v6_1.lockModeStart = this.mLockModeStart;
        v6_1.lockModeEnd = this.mLockModeEnd;
        return v6_1;
    }

    public boolean onTouchEvent(android.view.MotionEvent p14)
    {
        this.mLeftDragger.processTouchEvent(p14);
        this.mRightDragger.processTouchEvent(p14);
        switch ((p14.getAction() & 255)) {
            case 0:
                float v8_1 = p14.getX();
                float v9_1 = p14.getY();
                this.mInitialMotionX = v8_1;
                this.mInitialMotionY = v9_1;
                this.mDisallowInterceptRequested = 0;
                this.mChildrenCanceledTouch = 0;
                break;
            case 1:
                float v8_0 = p14.getX();
                float v9_0 = p14.getY();
                int v4 = 1;
                android.view.View v6 = this.mLeftDragger.findTopChildUnder(((int) v8_0), ((int) v9_0));
                if ((v6 != null) && ((this.isContentView(v6)) && ((((v8_0 - this.mInitialMotionX) * (v8_0 - this.mInitialMotionX)) + ((v9_0 - this.mInitialMotionY) * (v9_0 - this.mInitialMotionY))) < ((float) (this.mLeftDragger.getTouchSlop() * this.mLeftDragger.getTouchSlop()))))) {
                    android.view.View v3 = this.findOpenDrawer();
                    if (v3 != null) {
                        if (this.getDrawerLockMode(v3) != 2) {
                            v4 = 0;
                        } else {
                            v4 = 1;
                        }
                    }
                }
                this.closeDrawers(v4);
                this.mDisallowInterceptRequested = 0;
            case 2:
            default:
                break;
            case 3:
                this.closeDrawers(1);
                this.mDisallowInterceptRequested = 0;
                this.mChildrenCanceledTouch = 0;
                break;
        }
        return 1;
    }

    public void openDrawer(int p2)
    {
        this.openDrawer(p2, 1);
        return;
    }

    public void openDrawer(int p5, boolean p6)
    {
        android.view.View v0 = this.findDrawerWithGravity(p5);
        if (v0 != null) {
            this.openDrawer(v0, p6);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("No drawer view found with gravity ").append(android.support.v4.widget.DrawerLayout.gravityToString(p5)).toString());
        }
    }

    public void openDrawer(android.view.View p2)
    {
        this.openDrawer(p2, 1);
        return;
    }

    public void openDrawer(android.view.View p6, boolean p7)
    {
        if (this.isDrawerView(p6)) {
            android.support.v4.widget.DrawerLayout$LayoutParams v0_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p6.getLayoutParams());
            if (!this.mFirstLayout) {
                if (!p7) {
                    this.moveDrawerToOffset(p6, 1065353216);
                    this.updateDrawerState(v0_1.gravity, 0, p6);
                    p6.setVisibility(0);
                } else {
                    v0_1.openState = (v0_1.openState | 2);
                    if (!this.checkDrawerViewAbsoluteGravity(p6, 3)) {
                        this.mRightDragger.smoothSlideViewTo(p6, (this.getWidth() - p6.getWidth()), p6.getTop());
                    } else {
                        this.mLeftDragger.smoothSlideViewTo(p6, 0, p6.getTop());
                    }
                }
            } else {
                v0_1.onScreen = 1065353216;
                v0_1.openState = 1;
                this.updateChildrenImportantForAccessibility(p6, 1);
            }
            this.invalidate();
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p6).append(" is not a sliding drawer").toString());
        }
    }

    public void removeDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener p2)
    {
        if ((p2 != null) && (this.mListeners != null)) {
            this.mListeners.remove(p2);
        }
        return;
    }

    public void requestDisallowInterceptTouchEvent(boolean p2)
    {
        super.requestDisallowInterceptTouchEvent(p2);
        this.mDisallowInterceptRequested = p2;
        if (p2) {
            this.closeDrawers(1);
        }
        return;
    }

    public void requestLayout()
    {
        if (!this.mInLayout) {
            super.requestLayout();
        }
        return;
    }

    public void setChildInsets(Object p2, boolean p3)
    {
        int v0_1;
        this.mLastInsets = p2;
        this.mDrawStatusBarBackground = p3;
        if ((p3) || (this.getBackground() != null)) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.setWillNotDraw(v0_1);
        this.requestLayout();
        return;
    }

    public void setDrawerElevation(float p4)
    {
        this.mDrawerElevation = p4;
        int v1 = 0;
        while (v1 < this.getChildCount()) {
            android.view.View v0 = this.getChildAt(v1);
            if (this.isDrawerView(v0)) {
                android.support.v4.view.ViewCompat.setElevation(v0, this.mDrawerElevation);
            }
            v1++;
        }
        return;
    }

    public void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener p2)
    {
        if (this.mListener != null) {
            this.removeDrawerListener(this.mListener);
        }
        if (p2 != null) {
            this.addDrawerListener(p2);
        }
        this.mListener = p2;
        return;
    }

    public void setDrawerLockMode(int p2)
    {
        this.setDrawerLockMode(p2, 3);
        this.setDrawerLockMode(p2, 5);
        return;
    }

    public void setDrawerLockMode(int p6, int p7)
    {
        int v0 = android.support.v4.view.GravityCompat.getAbsoluteGravity(p7, android.support.v4.view.ViewCompat.getLayoutDirection(this));
        switch (p7) {
            case 3:
                this.mLockModeLeft = p6;
                break;
            case 5:
                this.mLockModeRight = p6;
                break;
            case 8388611:
                this.mLockModeStart = p6;
                break;
            case 8388613:
                this.mLockModeEnd = p6;
                break;
        }
        if (p6 != 0) {
            android.support.v4.widget.ViewDragHelper v1;
            if (v0 != 3) {
                v1 = this.mRightDragger;
            } else {
                v1 = this.mLeftDragger;
            }
            v1.cancel();
        }
        switch (p6) {
            case 1:
                android.view.View v2 = this.findDrawerWithGravity(v0);
                if (v2 == null) {
                } else {
                    this.closeDrawer(v2);
                }
                break;
            case 2:
                android.view.View v3 = this.findDrawerWithGravity(v0);
                if (v3 == null) {
                } else {
                    this.openDrawer(v3);
                }
                break;
        }
        return;
    }

    public void setDrawerLockMode(int p5, android.view.View p6)
    {
        if (this.isDrawerView(p6)) {
            this.setDrawerLockMode(p5, ((android.support.v4.widget.DrawerLayout$LayoutParams) p6.getLayoutParams()).gravity);
            return;
        } else {
            throw new IllegalArgumentException(new StringBuilder().append("View ").append(p6).append(" is not a ").append("drawer with appropriate layout_gravity").toString());
        }
    }

    public void setDrawerShadow(int p2, int p3)
    {
        this.setDrawerShadow(android.support.v4.content.ContextCompat.getDrawable(this.getContext(), p2), p3);
        return;
    }

    public void setDrawerShadow(android.graphics.drawable.Drawable p4, int p5)
    {
        if (!android.support.v4.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION) {
            if ((p5 & 8388611) != 8388611) {
                if ((p5 & 8388613) != 8388613) {
                    if ((p5 & 3) != 3) {
                        if ((p5 & 5) != 5) {
                            return;
                        } else {
                            this.mShadowRight = p4;
                        }
                    } else {
                        this.mShadowLeft = p4;
                    }
                } else {
                    this.mShadowEnd = p4;
                }
            } else {
                this.mShadowStart = p4;
            }
            this.resolveShadowDrawables();
            this.invalidate();
        }
        return;
    }

    public void setDrawerTitle(int p3, CharSequence p4)
    {
        int v0 = android.support.v4.view.GravityCompat.getAbsoluteGravity(p3, android.support.v4.view.ViewCompat.getLayoutDirection(this));
        if (v0 != 3) {
            if (v0 == 5) {
                this.mTitleRight = p4;
            }
        } else {
            this.mTitleLeft = p4;
        }
        return;
    }

    void setDrawerViewOffset(android.view.View p3, float p4)
    {
        android.support.v4.widget.DrawerLayout$LayoutParams v0_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p3.getLayoutParams());
        if (p4 != v0_1.onScreen) {
            v0_1.onScreen = p4;
            this.dispatchOnDrawerSlide(p3, p4);
        }
        return;
    }

    public void setScrimColor(int p1)
    {
        this.mScrimColor = p1;
        this.invalidate();
        return;
    }

    public void setStatusBarBackground(int p2)
    {
        int v0_0;
        if (p2 == 0) {
            v0_0 = 0;
        } else {
            v0_0 = android.support.v4.content.ContextCompat.getDrawable(this.getContext(), p2);
        }
        this.mStatusBarBackground = v0_0;
        this.invalidate();
        return;
    }

    public void setStatusBarBackground(android.graphics.drawable.Drawable p1)
    {
        this.mStatusBarBackground = p1;
        this.invalidate();
        return;
    }

    public void setStatusBarBackgroundColor(int p2)
    {
        this.mStatusBarBackground = new android.graphics.drawable.ColorDrawable(p2);
        this.invalidate();
        return;
    }

    void updateDrawerState(int p10, int p11, android.view.View p12)
    {
        int v5;
        int v1 = this.mLeftDragger.getViewDragState();
        int v4 = this.mRightDragger.getViewDragState();
        if ((v1 != 1) && (v4 != 1)) {
            if ((v1 != 2) && (v4 != 2)) {
                v5 = 0;
            } else {
                v5 = 2;
            }
        } else {
            v5 = 1;
        }
        if ((p12 != null) && (p11 == 0)) {
            android.support.v4.widget.DrawerLayout$LayoutParams v3_1 = ((android.support.v4.widget.DrawerLayout$LayoutParams) p12.getLayoutParams());
            if (v3_1.onScreen != 0) {
                if (v3_1.onScreen == 1065353216) {
                    this.dispatchOnDrawerOpened(p12);
                }
            } else {
                this.dispatchOnDrawerClosed(p12);
            }
        }
        if (v5 != this.mDrawerState) {
            this.mDrawerState = v5;
            if (this.mListeners != null) {
                int v0 = (this.mListeners.size() - 1);
                while (v0 >= 0) {
                    ((android.support.v4.widget.DrawerLayout$DrawerListener) this.mListeners.get(v0)).onDrawerStateChanged(v5);
                    v0--;
                }
            }
        }
        return;
    }
}
package android.support.v4.widget;
 class EdgeEffectCompat$BaseEdgeEffectImpl implements android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl {

    EdgeEffectCompat$BaseEdgeEffectImpl()
    {
        return;
    }

    public boolean draw(Object p2, android.graphics.Canvas p3)
    {
        return 0;
    }

    public void finish(Object p1)
    {
        return;
    }

    public boolean isFinished(Object p2)
    {
        return 1;
    }

    public Object newEdgeEffect(android.content.Context p2)
    {
        return 0;
    }

    public boolean onAbsorb(Object p2, int p3)
    {
        return 0;
    }

    public boolean onPull(Object p2, float p3)
    {
        return 0;
    }

    public boolean onPull(Object p2, float p3, float p4)
    {
        return 0;
    }

    public boolean onRelease(Object p2)
    {
        return 0;
    }

    public void setSize(Object p1, int p2, int p3)
    {
        return;
    }
}
package android.support.v4.widget;
 class EdgeEffectCompat$EdgeEffectIcsImpl implements android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl {

    EdgeEffectCompat$EdgeEffectIcsImpl()
    {
        return;
    }

    public boolean draw(Object p2, android.graphics.Canvas p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.draw(p2, p3);
    }

    public void finish(Object p1)
    {
        android.support.v4.widget.EdgeEffectCompatIcs.finish(p1);
        return;
    }

    public boolean isFinished(Object p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.isFinished(p2);
    }

    public Object newEdgeEffect(android.content.Context p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.newEdgeEffect(p2);
    }

    public boolean onAbsorb(Object p2, int p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onAbsorb(p2, p3);
    }

    public boolean onPull(Object p2, float p3)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onPull(p2, p3);
    }

    public boolean onPull(Object p2, float p3, float p4)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onPull(p2, p3);
    }

    public boolean onRelease(Object p2)
    {
        return android.support.v4.widget.EdgeEffectCompatIcs.onRelease(p2);
    }

    public void setSize(Object p1, int p2, int p3)
    {
        android.support.v4.widget.EdgeEffectCompatIcs.setSize(p1, p2, p3);
        return;
    }
}
package android.support.v4.widget;
final class ExploreByTouchHelper$1 implements android.support.v4.widget.FocusStrategy$BoundsAdapter {

    ExploreByTouchHelper$1()
    {
        return;
    }

    public void obtainBounds(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p1, android.graphics.Rect p2)
    {
        p1.getBoundsInParent(p2);
        return;
    }

    public bridge synthetic void obtainBounds(Object p1, android.graphics.Rect p2)
    {
        this.obtainBounds(((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p1), p2);
        return;
    }
}
package android.support.v4.widget;
final class ExploreByTouchHelper$2 implements android.support.v4.widget.FocusStrategy$CollectionAdapter {

    ExploreByTouchHelper$2()
    {
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat get(android.support.v4.util.SparseArrayCompat p2, int p3)
    {
        return ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) p2.valueAt(p3));
    }

    public bridge synthetic Object get(Object p2, int p3)
    {
        return this.get(((android.support.v4.util.SparseArrayCompat) p2), p3);
    }

    public int size(android.support.v4.util.SparseArrayCompat p2)
    {
        return p2.size();
    }

    public bridge synthetic int size(Object p2)
    {
        return this.size(((android.support.v4.util.SparseArrayCompat) p2));
    }
}
package android.support.v4.widget;
 class ExploreByTouchHelper$MyNodeProvider extends android.support.v4.view.accessibility.AccessibilityNodeProviderCompat {
    final synthetic android.support.v4.widget.ExploreByTouchHelper this$0;

    ExploreByTouchHelper$MyNodeProvider(android.support.v4.widget.ExploreByTouchHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain(this.this$0.obtainAccessibilityNodeInfo(p3));
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int p3)
    {
        int v0;
        if (p3 != 2) {
            v0 = android.support.v4.widget.ExploreByTouchHelper.access$100(this.this$0);
        } else {
            v0 = android.support.v4.widget.ExploreByTouchHelper.access$000(this.this$0);
        }
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v1_1;
        if (v0 != -2147483648) {
            v1_1 = this.createAccessibilityNodeInfo(v0);
        } else {
            v1_1 = 0;
        }
        return v1_1;
    }

    public boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        return this.this$0.performAction(p2, p3, p4);
    }
}
package android.support.v4.widget;
public abstract class ExploreByTouchHelper extends android.support.v4.view.AccessibilityDelegateCompat {
    private static final String DEFAULT_CLASS_NAME = "android.view.View";
    public static final int HOST_ID = 255;
    public static final int INVALID_ID = 2147483648;
    private static final android.graphics.Rect INVALID_PARENT_BOUNDS;
    private static final android.support.v4.widget.FocusStrategy$BoundsAdapter NODE_ADAPTER;
    private static final android.support.v4.widget.FocusStrategy$CollectionAdapter SPARSE_VALUES_ADAPTER;
    private int mAccessibilityFocusedVirtualViewId;
    private final android.view.View mHost;
    private int mHoveredVirtualViewId;
    private int mKeyboardFocusedVirtualViewId;
    private final android.view.accessibility.AccessibilityManager mManager;
    private android.support.v4.widget.ExploreByTouchHelper$MyNodeProvider mNodeProvider;
    private final int[] mTempGlobalRect;
    private final android.graphics.Rect mTempParentRect;
    private final android.graphics.Rect mTempScreenRect;
    private final android.graphics.Rect mTempVisibleRect;

    static ExploreByTouchHelper()
    {
        android.support.v4.widget.ExploreByTouchHelper.INVALID_PARENT_BOUNDS = new android.graphics.Rect(2147483647, 2147483647, -2147483648, -2147483648);
        android.support.v4.widget.ExploreByTouchHelper.NODE_ADAPTER = new android.support.v4.widget.ExploreByTouchHelper$1();
        android.support.v4.widget.ExploreByTouchHelper.SPARSE_VALUES_ADAPTER = new android.support.v4.widget.ExploreByTouchHelper$2();
        return;
    }

    public ExploreByTouchHelper(android.view.View p5)
    {
        this.mTempScreenRect = new android.graphics.Rect();
        this.mTempParentRect = new android.graphics.Rect();
        this.mTempVisibleRect = new android.graphics.Rect();
        int v1_2 = new int[2];
        this.mTempGlobalRect = v1_2;
        this.mAccessibilityFocusedVirtualViewId = -2147483648;
        this.mKeyboardFocusedVirtualViewId = -2147483648;
        this.mHoveredVirtualViewId = -2147483648;
        if (p5 != null) {
            this.mHost = p5;
            this.mManager = ((android.view.accessibility.AccessibilityManager) p5.getContext().getSystemService("accessibility"));
            p5.setFocusable(1);
            if (android.support.v4.view.ViewCompat.getImportantForAccessibility(p5) == 0) {
                android.support.v4.view.ViewCompat.setImportantForAccessibility(p5, 1);
            }
            return;
        } else {
            throw new IllegalArgumentException("View may not be null");
        }
    }

    static synthetic int access$000(android.support.v4.widget.ExploreByTouchHelper p1)
    {
        return p1.mAccessibilityFocusedVirtualViewId;
    }

    static synthetic int access$100(android.support.v4.widget.ExploreByTouchHelper p1)
    {
        return p1.mKeyboardFocusedVirtualViewId;
    }

    private boolean clearAccessibilityFocus(int p2)
    {
        int v0_1;
        if (this.mAccessibilityFocusedVirtualViewId != p2) {
            v0_1 = 0;
        } else {
            this.mAccessibilityFocusedVirtualViewId = -2147483648;
            this.mHost.invalidate();
            this.sendEventForVirtualView(p2, 65536);
            v0_1 = 1;
        }
        return v0_1;
    }

    private boolean clickKeyboardFocusedVirtualView()
    {
        if ((this.mKeyboardFocusedVirtualViewId == -2147483648) || (!this.onPerformActionForVirtualView(this.mKeyboardFocusedVirtualViewId, 16, 0))) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    private android.view.accessibility.AccessibilityEvent createEvent(int p2, int p3)
    {
        android.view.accessibility.AccessibilityEvent v0;
        switch (p2) {
            case -1:
                v0 = this.createEventForHost(p3);
                break;
            default:
                v0 = this.createEventForChild(p2, p3);
        }
        return v0;
    }

    private android.view.accessibility.AccessibilityEvent createEventForChild(int p6, int p7)
    {
        android.view.accessibility.AccessibilityEvent v0 = android.view.accessibility.AccessibilityEvent.obtain(p7);
        android.support.v4.view.accessibility.AccessibilityRecordCompat v2 = android.support.v4.view.accessibility.AccessibilityEventCompat.asRecord(v0);
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v1 = this.obtainAccessibilityNodeInfo(p6);
        v2.getText().add(v1.getText());
        v2.setContentDescription(v1.getContentDescription());
        v2.setScrollable(v1.isScrollable());
        v2.setPassword(v1.isPassword());
        v2.setEnabled(v1.isEnabled());
        v2.setChecked(v1.isChecked());
        this.onPopulateEventForVirtualView(p6, v0);
        if ((!v0.getText().isEmpty()) || (v0.getContentDescription() != null)) {
            v2.setClassName(v1.getClassName());
            v2.setSource(this.mHost, p6);
            v0.setPackageName(this.mHost.getContext().getPackageName());
            return v0;
        } else {
            throw new RuntimeException("Callbacks must add text or a content description in populateEventForVirtualViewId()");
        }
    }

    private android.view.accessibility.AccessibilityEvent createEventForHost(int p3)
    {
        android.view.accessibility.AccessibilityEvent v0 = android.view.accessibility.AccessibilityEvent.obtain(p3);
        android.support.v4.view.ViewCompat.onInitializeAccessibilityEvent(this.mHost, v0);
        return v0;
    }

    private android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createNodeForChild(int p8)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v2 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain();
        v2.setEnabled(1);
        v2.setFocusable(1);
        v2.setClassName("android.view.View");
        v2.setBoundsInParent(android.support.v4.widget.ExploreByTouchHelper.INVALID_PARENT_BOUNDS);
        v2.setBoundsInScreen(android.support.v4.widget.ExploreByTouchHelper.INVALID_PARENT_BOUNDS);
        this.onPopulateNodeForVirtualView(p8, v2);
        if ((v2.getText() != null) || (v2.getContentDescription() != null)) {
            v2.getBoundsInParent(this.mTempParentRect);
            if (!this.mTempParentRect.equals(android.support.v4.widget.ExploreByTouchHelper.INVALID_PARENT_BOUNDS)) {
                int v0 = v2.getActions();
                if ((v0 & 64) == 0) {
                    if ((v0 & 128) == 0) {
                        v2.setPackageName(this.mHost.getContext().getPackageName());
                        v2.setSource(this.mHost, p8);
                        v2.setParent(this.mHost);
                        if (this.mAccessibilityFocusedVirtualViewId != p8) {
                            v2.setAccessibilityFocused(0);
                            v2.addAction(64);
                        } else {
                            v2.setAccessibilityFocused(1);
                            v2.addAction(128);
                        }
                        String v1;
                        if (this.mKeyboardFocusedVirtualViewId != p8) {
                            v1 = 0;
                        } else {
                            v1 = 1;
                        }
                        if (v1 == null) {
                            if (v2.isFocusable()) {
                                v2.addAction(1);
                            }
                        } else {
                            v2.addAction(2);
                        }
                        v2.setFocused(v1);
                        if (this.intersectVisibleToUser(this.mTempParentRect)) {
                            v2.setVisibleToUser(1);
                            v2.setBoundsInParent(this.mTempParentRect);
                        }
                        v2.getBoundsInScreen(this.mTempScreenRect);
                        if (this.mTempScreenRect.equals(android.support.v4.widget.ExploreByTouchHelper.INVALID_PARENT_BOUNDS)) {
                            this.mHost.getLocationOnScreen(this.mTempGlobalRect);
                            v2.getBoundsInParent(this.mTempScreenRect);
                            this.mTempScreenRect.offset((this.mTempGlobalRect[0] - this.mHost.getScrollX()), (this.mTempGlobalRect[1] - this.mHost.getScrollY()));
                            v2.setBoundsInScreen(this.mTempScreenRect);
                        }
                        return v2;
                    } else {
                        throw new RuntimeException("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
                    }
                } else {
                    throw new RuntimeException("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
                }
            } else {
                throw new RuntimeException("Callbacks must set parent bounds in populateNodeForVirtualViewId()");
            }
        } else {
            throw new RuntimeException("Callbacks must add text or a content description in populateNodeForVirtualViewId()");
        }
    }

    private android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createNodeForHost()
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v2 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain(this.mHost);
        android.support.v4.view.ViewCompat.onInitializeAccessibilityNodeInfo(this.mHost, v2);
        java.util.ArrayList v4_1 = new java.util.ArrayList();
        this.getVisibleVirtualViews(v4_1);
        if ((v2.getChildCount() <= 0) || (v4_1.size() <= 0)) {
            int v1 = 0;
            int v0 = v4_1.size();
            while (v1 < v0) {
                v2.addChild(this.mHost, ((Integer) v4_1.get(v1)).intValue());
                v1++;
            }
            return v2;
        } else {
            throw new RuntimeException("Views cannot have both real and virtual children");
        }
    }

    private android.support.v4.util.SparseArrayCompat getAllNodes()
    {
        java.util.ArrayList v3_1 = new java.util.ArrayList();
        this.getVisibleVirtualViews(v3_1);
        android.support.v4.util.SparseArrayCompat v0_1 = new android.support.v4.util.SparseArrayCompat();
        int v2 = 0;
        while (v2 < v3_1.size()) {
            v0_1.put(v2, this.createNodeForChild(v2));
            v2++;
        }
        return v0_1;
    }

    private void getBoundsInParent(int p2, android.graphics.Rect p3)
    {
        this.obtainAccessibilityNodeInfo(p2).getBoundsInParent(p3);
        return;
    }

    private static android.graphics.Rect guessPreviouslyFocusedRect(android.view.View p4, int p5, android.graphics.Rect p6)
    {
        int v1 = p4.getWidth();
        int v0 = p4.getHeight();
        switch (p5) {
            case 17:
                p6.set(v1, 0, v1, v0);
                break;
            case 33:
                p6.set(0, v0, v1, v0);
                break;
            case 66:
                p6.set(-1, 0, -1, v0);
                break;
            case 130:
                p6.set(0, -1, v1, -1);
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        return p6;
    }

    private boolean intersectVisibleToUser(android.graphics.Rect p6)
    {
        boolean v2_0 = 0;
        if ((p6 != null) && ((!p6.isEmpty()) && (this.mHost.getWindowVisibility() == 0))) {
            android.view.ViewParent v1 = this.mHost.getParent();
            while ((v1 instanceof android.view.View)) {
                android.view.View v0_1 = ((android.view.View) v1);
                if ((android.support.v4.view.ViewCompat.getAlpha(v0_1) > 0) && (v0_1.getVisibility() == 0)) {
                    v1 = v0_1.getParent();
                }
            }
            if ((v1 != null) && (this.mHost.getLocalVisibleRect(this.mTempVisibleRect))) {
                v2_0 = p6.intersect(this.mTempVisibleRect);
            }
        }
        return v2_0;
    }

    private static int keyToDirection(int p1)
    {
        int v0;
        switch (p1) {
            case 19:
                v0 = 33;
                break;
            case 20:
            default:
                v0 = 130;
                break;
            case 21:
                v0 = 17;
                break;
            case 22:
                v0 = 66;
                break;
        }
        return v0;
    }

    private boolean moveFocus(int p19, android.graphics.Rect p20)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v5;
        android.support.v4.util.SparseArrayCompat v2 = this.getAllNodes();
        int v14 = this.mKeyboardFocusedVirtualViewId;
        if (v14 != -2147483648) {
            v5 = ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) v2.get(v14));
        } else {
            v5 = 0;
        }
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v16_1;
        switch (p19) {
            case 1:
            case 2:
                int v7;
                if (android.support.v4.view.ViewCompat.getLayoutDirection(this.mHost) != 1) {
                    v7 = 0;
                } else {
                    v7 = 1;
                }
                v16_1 = ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) android.support.v4.widget.FocusStrategy.findNextFocusInRelativeDirection(v2, android.support.v4.widget.ExploreByTouchHelper.SPARSE_VALUES_ADAPTER, android.support.v4.widget.ExploreByTouchHelper.NODE_ADAPTER, v5, p19, v7, 0));
                break;
            case 17:
            case 33:
            case 66:
            case 130:
                android.graphics.Rect v12_1 = new android.graphics.Rect();
                if (this.mKeyboardFocusedVirtualViewId == -2147483648) {
                    if (p20 == null) {
                        android.support.v4.widget.ExploreByTouchHelper.guessPreviouslyFocusedRect(this.mHost, p19, v12_1);
                    } else {
                        v12_1.set(p20);
                    }
                } else {
                    this.getBoundsInParent(this.mKeyboardFocusedVirtualViewId, v12_1);
                }
                v16_1 = ((android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) android.support.v4.widget.FocusStrategy.findNextFocusInAbsoluteDirection(v2, android.support.v4.widget.ExploreByTouchHelper.SPARSE_VALUES_ADAPTER, android.support.v4.widget.ExploreByTouchHelper.NODE_ADAPTER, v5, v12_1, p19));
                break;
            default:
                throw new IllegalArgumentException("direction must be one of {FOCUS_FORWARD, FOCUS_BACKWARD, FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        int v17;
        if (v16_1 != null) {
            v17 = v2.keyAt(v2.indexOfValue(v16_1));
        } else {
            v17 = -2147483648;
        }
        return this.requestKeyboardFocusForVirtualView(v17);
    }

    private boolean performActionForChild(int p2, int p3, android.os.Bundle p4)
    {
        boolean v0;
        switch (p3) {
            case 1:
                v0 = this.requestKeyboardFocusForVirtualView(p2);
                break;
            case 2:
                v0 = this.clearKeyboardFocusForVirtualView(p2);
                break;
            case 64:
                v0 = this.requestAccessibilityFocus(p2);
                break;
            case 128:
                v0 = this.clearAccessibilityFocus(p2);
                break;
            default:
                v0 = this.onPerformActionForVirtualView(p2, p3, p4);
        }
        return v0;
    }

    private boolean performActionForHost(int p2, android.os.Bundle p3)
    {
        return android.support.v4.view.ViewCompat.performAccessibilityAction(this.mHost, p2, p3);
    }

    private boolean requestAccessibilityFocus(int p3)
    {
        int v0_0 = 0;
        if ((this.mManager.isEnabled()) && ((android.support.v4.view.accessibility.AccessibilityManagerCompat.isTouchExplorationEnabled(this.mManager)) && (this.mAccessibilityFocusedVirtualViewId != p3))) {
            if (this.mAccessibilityFocusedVirtualViewId != -2147483648) {
                this.clearAccessibilityFocus(this.mAccessibilityFocusedVirtualViewId);
            }
            this.mAccessibilityFocusedVirtualViewId = p3;
            this.mHost.invalidate();
            this.sendEventForVirtualView(p3, 32768);
            v0_0 = 1;
        }
        return v0_0;
    }

    private void updateHoveredVirtualView(int p3)
    {
        if (this.mHoveredVirtualViewId != p3) {
            int v0 = this.mHoveredVirtualViewId;
            this.mHoveredVirtualViewId = p3;
            this.sendEventForVirtualView(p3, 128);
            this.sendEventForVirtualView(v0, 256);
        }
        return;
    }

    public final boolean clearKeyboardFocusForVirtualView(int p3)
    {
        int v0_0 = 0;
        if (this.mKeyboardFocusedVirtualViewId == p3) {
            this.mKeyboardFocusedVirtualViewId = -2147483648;
            this.onVirtualViewKeyboardFocusChanged(p3, 0);
            this.sendEventForVirtualView(p3, 8);
            v0_0 = 1;
        }
        return v0_0;
    }

    public final boolean dispatchHoverEvent(android.view.MotionEvent p7)
    {
        int v1 = 1;
        int v2 = 0;
        if ((this.mManager.isEnabled()) && (android.support.v4.view.accessibility.AccessibilityManagerCompat.isTouchExplorationEnabled(this.mManager))) {
            switch (p7.getAction()) {
                case 7:
                case 9:
                    int v0 = this.getVirtualViewAt(p7.getX(), p7.getY());
                    this.updateHoveredVirtualView(v0);
                    if (v0 == -2147483648) {
                        v1 = 0;
                    }
                    v2 = v1;
                    break;
                case 8:
                default:
                    break;
                case 10:
                    if (this.mAccessibilityFocusedVirtualViewId != -2147483648) {
                        this.updateHoveredVirtualView(-2147483648);
                        v2 = 1;
                    }
                    break;
            }
        }
        return v2;
    }

    public final boolean dispatchKeyEvent(android.view.KeyEvent p10)
    {
        int v3 = 0;
        if (p10.getAction() != 1) {
            int v5 = p10.getKeyCode();
            switch (v5) {
                case 19:
                case 20:
                case 21:
                case 22:
                    if (android.support.v4.view.KeyEventCompat.hasNoModifiers(p10)) {
                        int v2 = android.support.v4.widget.ExploreByTouchHelper.keyToDirection(v5);
                        int v1 = (p10.getRepeatCount() + 1);
                        int v4 = 0;
                        while ((v4 < v1) && (this.moveFocus(v2, 0))) {
                            v3 = 1;
                            v4++;
                        }
                    }
                    break;
                case 23:
                case 66:
                    if ((android.support.v4.view.KeyEventCompat.hasNoModifiers(p10)) && (p10.getRepeatCount() == 0)) {
                        this.clickKeyboardFocusedVirtualView();
                        v3 = 1;
                    }
                    break;
                case 61:
                    if (!android.support.v4.view.KeyEventCompat.hasNoModifiers(p10)) {
                        if (android.support.v4.view.KeyEventCompat.hasModifiers(p10, 1)) {
                            v3 = this.moveFocus(1, 0);
                        }
                    } else {
                        v3 = this.moveFocus(2, 0);
                    }
                    break;
            }
        }
        return v3;
    }

    public final int getAccessibilityFocusedVirtualViewId()
    {
        return this.mAccessibilityFocusedVirtualViewId;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View p2)
    {
        if (this.mNodeProvider == null) {
            this.mNodeProvider = new android.support.v4.widget.ExploreByTouchHelper$MyNodeProvider(this);
        }
        return this.mNodeProvider;
    }

    public int getFocusedVirtualView()
    {
        return this.getAccessibilityFocusedVirtualViewId();
    }

    public final int getKeyboardFocusedVirtualViewId()
    {
        return this.mKeyboardFocusedVirtualViewId;
    }

    protected abstract int getVirtualViewAt();

    protected abstract void getVisibleVirtualViews();

    public final void invalidateRoot()
    {
        this.invalidateVirtualView(-1, 1);
        return;
    }

    public final void invalidateVirtualView(int p2)
    {
        this.invalidateVirtualView(p2, 0);
        return;
    }

    public final void invalidateVirtualView(int p4, int p5)
    {
        if ((p4 != -2147483648) && (this.mManager.isEnabled())) {
            android.view.ViewParent v1 = this.mHost.getParent();
            if (v1 != null) {
                android.view.accessibility.AccessibilityEvent v0 = this.createEvent(p4, 2048);
                android.support.v4.view.accessibility.AccessibilityEventCompat.setContentChangeTypes(v0, p5);
                android.support.v4.view.ViewParentCompat.requestSendAccessibilityEvent(v1, this.mHost, v0);
            }
        }
        return;
    }

    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtainAccessibilityNodeInfo(int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v0_1;
        if (p2 != -1) {
            v0_1 = this.createNodeForChild(p2);
        } else {
            v0_1 = this.createNodeForHost();
        }
        return v0_1;
    }

    public final void onFocusChanged(boolean p3, int p4, android.graphics.Rect p5)
    {
        if (this.mKeyboardFocusedVirtualViewId != -2147483648) {
            this.clearKeyboardFocusForVirtualView(this.mKeyboardFocusedVirtualViewId);
        }
        if (p3) {
            this.moveFocus(p4, p5);
        }
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        super.onInitializeAccessibilityEvent(p1, p2);
        this.onPopulateEventForHost(p2);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p1, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p2)
    {
        super.onInitializeAccessibilityNodeInfo(p1, p2);
        this.onPopulateNodeForHost(p2);
        return;
    }

    protected abstract boolean onPerformActionForVirtualView();

    protected void onPopulateEventForHost(android.view.accessibility.AccessibilityEvent p1)
    {
        return;
    }

    protected void onPopulateEventForVirtualView(int p1, android.view.accessibility.AccessibilityEvent p2)
    {
        return;
    }

    protected void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p1)
    {
        return;
    }

    protected abstract void onPopulateNodeForVirtualView();

    protected void onVirtualViewKeyboardFocusChanged(int p1, boolean p2)
    {
        return;
    }

    boolean performAction(int p2, int p3, android.os.Bundle p4)
    {
        boolean v0;
        switch (p2) {
            case -1:
                v0 = this.performActionForHost(p3, p4);
                break;
            default:
                v0 = this.performActionForChild(p2, p3, p4);
        }
        return v0;
    }

    public final boolean requestKeyboardFocusForVirtualView(int p4)
    {
        int v0_0 = 0;
        if (((this.mHost.isFocused()) || (this.mHost.requestFocus())) && (this.mKeyboardFocusedVirtualViewId != p4)) {
            if (this.mKeyboardFocusedVirtualViewId != -2147483648) {
                this.clearKeyboardFocusForVirtualView(this.mKeyboardFocusedVirtualViewId);
            }
            this.mKeyboardFocusedVirtualViewId = p4;
            this.onVirtualViewKeyboardFocusChanged(p4, 1);
            this.sendEventForVirtualView(p4, 8);
            v0_0 = 1;
        }
        return v0_0;
    }

    public final boolean sendEventForVirtualView(int p5, int p6)
    {
        boolean v2_0 = 0;
        if ((p5 != -2147483648) && (this.mManager.isEnabled())) {
            android.view.ViewParent v1 = this.mHost.getParent();
            if (v1 != null) {
                v2_0 = android.support.v4.view.ViewParentCompat.requestSendAccessibilityEvent(v1, this.mHost, this.createEvent(p5, p6));
            }
        }
        return v2_0;
    }
}
package android.support.v4.widget;
 class ListPopupWindowCompat$BaseListPopupWindowImpl implements android.support.v4.widget.ListPopupWindowCompat$ListPopupWindowImpl {

    ListPopupWindowCompat$BaseListPopupWindowImpl()
    {
        return;
    }

    public android.view.View$OnTouchListener createDragToOpenListener(Object p2, android.view.View p3)
    {
        return 0;
    }
}
package android.support.v4.widget;
public class ListViewAutoScrollHelper extends android.support.v4.widget.AutoScrollHelper {
    private final android.widget.ListView mTarget;

    public ListViewAutoScrollHelper(android.widget.ListView p1)
    {
        super(p1);
        super.mTarget = p1;
        return;
    }

    public boolean canTargetScrollHorizontally(int p2)
    {
        return 0;
    }

    public boolean canTargetScrollVertically(int p11)
    {
        int v7 = 0;
        android.widget.ListView v6 = this.mTarget;
        int v3 = v6.getCount();
        if (v3 != 0) {
            int v0 = v6.getChildCount();
            int v1 = v6.getFirstVisiblePosition();
            if (p11 <= 0) {
                if ((p11 >= 0) || ((v1 <= 0) && (v6.getChildAt(0).getTop() >= 0))) {
                    return v7;
                }
            } else {
                if (((v1 + v0) >= v3) && (v6.getChildAt((v0 - 1)).getBottom() <= v6.getHeight())) {
                    return v7;
                }
            }
            v7 = 1;
        }
        return v7;
    }

    public void scrollTargetBy(int p2, int p3)
    {
        android.support.v4.widget.ListViewCompat.scrollListBy(this.mTarget, p3);
        return;
    }
}
package android.support.v4.widget;
 class NestedScrollView$AccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {

    NestedScrollView$AccessibilityDelegate()
    {
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.View p5, android.view.accessibility.AccessibilityEvent p6)
    {
        int v2;
        super.onInitializeAccessibilityEvent(p5, p6);
        p6.setClassName(android.widget.ScrollView.getName());
        android.support.v4.view.accessibility.AccessibilityRecordCompat v1 = android.support.v4.view.accessibility.AccessibilityEventCompat.asRecord(p6);
        if (((android.support.v4.widget.NestedScrollView) p5).getScrollRange() <= 0) {
            v2 = 0;
        } else {
            v2 = 1;
        }
        v1.setScrollable(v2);
        v1.setScrollX(((android.support.v4.widget.NestedScrollView) p5).getScrollX());
        v1.setScrollY(((android.support.v4.widget.NestedScrollView) p5).getScrollY());
        v1.setMaxScrollX(((android.support.v4.widget.NestedScrollView) p5).getScrollX());
        v1.setMaxScrollY(((android.support.v4.widget.NestedScrollView) p5).getScrollRange());
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p4, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p5)
    {
        super.onInitializeAccessibilityNodeInfo(p4, p5);
        p5.setClassName(android.widget.ScrollView.getName());
        if (((android.support.v4.widget.NestedScrollView) p4).isEnabled()) {
            int v1 = ((android.support.v4.widget.NestedScrollView) p4).getScrollRange();
            if (v1 > 0) {
                p5.setScrollable(1);
                if (((android.support.v4.widget.NestedScrollView) p4).getScrollY() > 0) {
                    p5.addAction(8192);
                }
                if (((android.support.v4.widget.NestedScrollView) p4).getScrollY() < v1) {
                    p5.addAction(4096);
                }
            }
        }
        return;
    }

    public boolean performAccessibilityAction(android.view.View p8, int p9, android.os.Bundle p10)
    {
        int v3 = 1;
        if (!super.performAccessibilityAction(p8, p9, p10)) {
            if (((android.support.v4.widget.NestedScrollView) p8).isEnabled()) {
                switch (p9) {
                    case 4096:
                        int v1_1 = Math.min((((android.support.v4.widget.NestedScrollView) p8).getScrollY() + ((((android.support.v4.widget.NestedScrollView) p8).getHeight() - ((android.support.v4.widget.NestedScrollView) p8).getPaddingBottom()) - ((android.support.v4.widget.NestedScrollView) p8).getPaddingTop())), ((android.support.v4.widget.NestedScrollView) p8).getScrollRange());
                        if (v1_1 == ((android.support.v4.widget.NestedScrollView) p8).getScrollY()) {
                            v3 = 0;
                        } else {
                            ((android.support.v4.widget.NestedScrollView) p8).smoothScrollTo(0, v1_1);
                        }
                        break;
                    case 8192:
                        int v1_0 = Math.max((((android.support.v4.widget.NestedScrollView) p8).getScrollY() - ((((android.support.v4.widget.NestedScrollView) p8).getHeight() - ((android.support.v4.widget.NestedScrollView) p8).getPaddingBottom()) - ((android.support.v4.widget.NestedScrollView) p8).getPaddingTop())), 0);
                        if (v1_0 == ((android.support.v4.widget.NestedScrollView) p8).getScrollY()) {
                            v3 = 0;
                        } else {
                            ((android.support.v4.widget.NestedScrollView) p8).smoothScrollTo(0, v1_0);
                        }
                        break;
                    default:
                        v3 = 0;
                }
            } else {
                v3 = 0;
            }
        }
        return v3;
    }
}
package android.support.v4.widget;
public class NestedScrollView extends android.widget.FrameLayout implements android.support.v4.view.NestedScrollingParent, android.support.v4.view.NestedScrollingChild, android.support.v4.view.ScrollingView {
    private static final android.support.v4.widget.NestedScrollView$AccessibilityDelegate ACCESSIBILITY_DELEGATE = None;
    static final int ANIMATED_SCROLL_GAP = 250;
    private static final int INVALID_POINTER = 255;
    static final float MAX_SCROLL_FACTOR = 63;
    private static final int[] SCROLLVIEW_STYLEABLE = None;
    private static final String TAG = "NestedScrollView";
    private int mActivePointerId;
    private final android.support.v4.view.NestedScrollingChildHelper mChildHelper;
    private android.view.View mChildToScrollTo;
    private android.support.v4.widget.EdgeEffectCompat mEdgeGlowBottom;
    private android.support.v4.widget.EdgeEffectCompat mEdgeGlowTop;
    private boolean mFillViewport;
    private boolean mIsBeingDragged;
    private boolean mIsLaidOut;
    private boolean mIsLayoutDirty;
    private int mLastMotionY;
    private long mLastScroll;
    private int mMaximumVelocity;
    private int mMinimumVelocity;
    private int mNestedYOffset;
    private android.support.v4.widget.NestedScrollView$OnScrollChangeListener mOnScrollChangeListener;
    private final android.support.v4.view.NestedScrollingParentHelper mParentHelper;
    private android.support.v4.widget.NestedScrollView$SavedState mSavedState;
    private final int[] mScrollConsumed;
    private final int[] mScrollOffset;
    private android.support.v4.widget.ScrollerCompat mScroller;
    private boolean mSmoothScrollingEnabled;
    private final android.graphics.Rect mTempRect;
    private int mTouchSlop;
    private android.view.VelocityTracker mVelocityTracker;
    private float mVerticalScrollFactor;

    static NestedScrollView()
    {
        android.support.v4.widget.NestedScrollView.ACCESSIBILITY_DELEGATE = new android.support.v4.widget.NestedScrollView$AccessibilityDelegate();
        int[] v0_3 = new int[1];
        v0_3[0] = 16843130;
        android.support.v4.widget.NestedScrollView.SCROLLVIEW_STYLEABLE = v0_3;
        return;
    }

    public NestedScrollView(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public NestedScrollView(android.content.Context p2, android.util.AttributeSet p3)
    {
        this(p2, p3, 0);
        return;
    }

    public NestedScrollView(android.content.Context p6, android.util.AttributeSet p7, int p8)
    {
        super(p6, p7, p8);
        super.mTempRect = new android.graphics.Rect();
        super.mIsLayoutDirty = 1;
        super.mIsLaidOut = 0;
        super.mChildToScrollTo = 0;
        super.mIsBeingDragged = 0;
        super.mSmoothScrollingEnabled = 1;
        super.mActivePointerId = -1;
        android.support.v4.widget.NestedScrollView$AccessibilityDelegate v1_1 = new int[2];
        super.mScrollOffset = v1_1;
        android.support.v4.widget.NestedScrollView$AccessibilityDelegate v1_2 = new int[2];
        super.mScrollConsumed = v1_2;
        super.initScrollView();
        android.content.res.TypedArray v0 = p6.obtainStyledAttributes(p7, android.support.v4.widget.NestedScrollView.SCROLLVIEW_STYLEABLE, p8, 0);
        super.setFillViewport(v0.getBoolean(0, 0));
        v0.recycle();
        super.mParentHelper = new android.support.v4.view.NestedScrollingParentHelper(super);
        super.mChildHelper = new android.support.v4.view.NestedScrollingChildHelper(super);
        super.setNestedScrollingEnabled(1);
        android.support.v4.view.ViewCompat.setAccessibilityDelegate(super, android.support.v4.widget.NestedScrollView.ACCESSIBILITY_DELEGATE);
        return;
    }

    private boolean canScroll()
    {
        int v2 = 0;
        android.view.View v0 = this.getChildAt(0);
        if ((v0 != null) && (this.getHeight() < ((this.getPaddingTop() + v0.getHeight()) + this.getPaddingBottom()))) {
            v2 = 1;
        }
        return v2;
    }

    private static int clamp(int p1, int p2, int p3)
    {
        if ((p2 < p3) && (p1 >= 0)) {
            if ((p2 + p1) > p3) {
                p1 = (p3 - p2);
            }
        } else {
            p1 = 0;
        }
        return p1;
    }

    private void doScrollY(int p3)
    {
        if (p3 != 0) {
            if (!this.mSmoothScrollingEnabled) {
                this.scrollBy(0, p3);
            } else {
                this.smoothScrollBy(0, p3);
            }
        }
        return;
    }

    private void endDrag()
    {
        this.mIsBeingDragged = 0;
        this.recycleVelocityTracker();
        this.stopNestedScroll();
        if (this.mEdgeGlowTop != null) {
            this.mEdgeGlowTop.onRelease();
            this.mEdgeGlowBottom.onRelease();
        }
        return;
    }

    private void ensureGlows()
    {
        if (this.getOverScrollMode() == 2) {
            this.mEdgeGlowTop = 0;
            this.mEdgeGlowBottom = 0;
        } else {
            if (this.mEdgeGlowTop == null) {
                android.content.Context v0 = this.getContext();
                this.mEdgeGlowTop = new android.support.v4.widget.EdgeEffectCompat(v0);
                this.mEdgeGlowBottom = new android.support.v4.widget.EdgeEffectCompat(v0);
            }
        }
        return;
    }

    private android.view.View findFocusableViewInBounds(boolean p12, int p13, int p14)
    {
        java.util.ArrayList v2 = this.getFocusables(2);
        android.view.View v1 = 0;
        int v3 = 0;
        int v0 = v2.size();
        int v4 = 0;
        while (v4 < v0) {
            android.view.View v5_1 = ((android.view.View) v2.get(v4));
            int v9 = v5_1.getTop();
            int v6 = v5_1.getBottom();
            if ((p13 < v6) && (v9 < p14)) {
                if ((p13 >= v9) || (v6 >= p14)) {
                    int v8 = 0;
                } else {
                    v8 = 1;
                }
                if (v1 != null) {
                    if (((!p12) || (v9 >= v1.getTop())) && ((p12) || (v6 <= v1.getBottom()))) {
                        int v7 = 0;
                    } else {
                        v7 = 1;
                    }
                    if (v3 == 0) {
                        if (v8 == 0) {
                            if (v7 != 0) {
                                v1 = v5_1;
                            }
                        } else {
                            v1 = v5_1;
                            v3 = 1;
                        }
                    } else {
                        if ((v8 != 0) && (v7 != 0)) {
                            v1 = v5_1;
                        }
                    }
                } else {
                    v1 = v5_1;
                    v3 = v8;
                }
            }
            v4++;
        }
        return v1;
    }

    private void flingWithNestedDispatch(int p5)
    {
        int v0;
        int v1 = this.getScrollY();
        if (((v1 <= 0) && (p5 <= 0)) || ((v1 >= this.getScrollRange()) && (p5 >= 0))) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (!this.dispatchNestedPreFling(0, ((float) p5))) {
            this.dispatchNestedFling(0, ((float) p5), v0);
            if (v0 != 0) {
                this.fling(p5);
            }
        }
        return;
    }

    private float getVerticalScrollFactorCompat()
    {
        if (this.mVerticalScrollFactor == 0) {
            android.util.TypedValue v1_1 = new android.util.TypedValue();
            android.content.Context v0 = this.getContext();
            if (v0.getTheme().resolveAttribute(16842829, v1_1, 1)) {
                this.mVerticalScrollFactor = v1_1.getDimension(v0.getResources().getDisplayMetrics());
            } else {
                throw new IllegalStateException("Expected theme to define listPreferredItemHeight.");
            }
        }
        return this.mVerticalScrollFactor;
    }

    private boolean inChild(int p5, int p6)
    {
        int v2 = 0;
        if (this.getChildCount() > 0) {
            int v1 = this.getScrollY();
            android.view.View v0 = this.getChildAt(0);
            if ((p6 >= (v0.getTop() - v1)) && ((p6 < (v0.getBottom() - v1)) && ((p5 >= v0.getLeft()) && (p5 < v0.getRight())))) {
                v2 = 1;
            }
        }
        return v2;
    }

    private void initOrResetVelocityTracker()
    {
        if (this.mVelocityTracker != null) {
            this.mVelocityTracker.clear();
        } else {
            this.mVelocityTracker = android.view.VelocityTracker.obtain();
        }
        return;
    }

    private void initScrollView()
    {
        this.mScroller = android.support.v4.widget.ScrollerCompat.create(this.getContext(), 0);
        this.setFocusable(1);
        this.setDescendantFocusability(262144);
        this.setWillNotDraw(0);
        android.view.ViewConfiguration v0 = android.view.ViewConfiguration.get(this.getContext());
        this.mTouchSlop = v0.getScaledTouchSlop();
        this.mMinimumVelocity = v0.getScaledMinimumFlingVelocity();
        this.mMaximumVelocity = v0.getScaledMaximumFlingVelocity();
        return;
    }

    private void initVelocityTrackerIfNotExists()
    {
        if (this.mVelocityTracker == null) {
            this.mVelocityTracker = android.view.VelocityTracker.obtain();
        }
        return;
    }

    private boolean isOffScreen(android.view.View p3)
    {
        int v0 = 0;
        if (!this.isWithinDeltaOfScreen(p3, 0, this.getHeight())) {
            v0 = 1;
        }
        return v0;
    }

    private static boolean isViewDescendantOf(android.view.View p3, android.view.View p4)
    {
        int v1 = 1;
        if (p3 != p4) {
            android.view.View v0_0 = p3.getParent();
            if ((!(v0_0 instanceof android.view.ViewGroup)) || (!android.support.v4.widget.NestedScrollView.isViewDescendantOf(((android.view.View) v0_0), p4))) {
                v1 = 0;
            }
        }
        return v1;
    }

    private boolean isWithinDeltaOfScreen(android.view.View p3, int p4, int p5)
    {
        int v0_4;
        p3.getDrawingRect(this.mTempRect);
        this.offsetDescendantRectToMyCoords(p3, this.mTempRect);
        if (((this.mTempRect.bottom + p4) < this.getScrollY()) || ((this.mTempRect.top - p4) > (this.getScrollY() + p5))) {
            v0_4 = 0;
        } else {
            v0_4 = 1;
        }
        return v0_4;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent p6)
    {
        int v2 = ((p6.getAction() & 65280) >> 8);
        if (p6.getPointerId(v2) == this.mActivePointerId) {
            int v0;
            if (v2 != 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            this.mLastMotionY = ((int) p6.getY(v0));
            this.mActivePointerId = p6.getPointerId(v0);
            if (this.mVelocityTracker != null) {
                this.mVelocityTracker.clear();
            }
        }
        return;
    }

    private void recycleVelocityTracker()
    {
        if (this.mVelocityTracker != null) {
            this.mVelocityTracker.recycle();
            this.mVelocityTracker = 0;
        }
        return;
    }

    private boolean scrollAndFocus(int p9, int p10, int p11)
    {
        int v6;
        int v3 = 1;
        int v4 = this.getHeight();
        int v1 = this.getScrollY();
        int v0 = (v1 + v4);
        if (p9 != 33) {
            v6 = 0;
        } else {
            v6 = 1;
        }
        android.support.v4.widget.NestedScrollView v5 = this.findFocusableViewInBounds(v6, p10, p11);
        if (v5 == null) {
            v5 = this;
        }
        if ((p10 < v1) || (p11 > v0)) {
            int v2;
            if (v6 == 0) {
                v2 = (p11 - v0);
            } else {
                v2 = (p10 - v1);
            }
            this.doScrollY(v2);
        } else {
            v3 = 0;
        }
        if (v5 != this.findFocus()) {
            v5.requestFocus(p9);
        }
        return v3;
    }

    private void scrollToChild(android.view.View p3)
    {
        p3.getDrawingRect(this.mTempRect);
        this.offsetDescendantRectToMyCoords(p3, this.mTempRect);
        int v0 = this.computeScrollDeltaToGetChildRectOnScreen(this.mTempRect);
        if (v0 != 0) {
            this.scrollBy(0, v0);
        }
        return;
    }

    private boolean scrollToChildRect(android.graphics.Rect p4, boolean p5)
    {
        int v1;
        int v0 = this.computeScrollDeltaToGetChildRectOnScreen(p4);
        if (v0 == 0) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        if (v1 != 0) {
            if (!p5) {
                this.smoothScrollBy(0, v0);
            } else {
                this.scrollBy(0, v0);
            }
        }
        return v1;
    }

    public void addView(android.view.View p3)
    {
        if (this.getChildCount() <= 0) {
            super.addView(p3);
            return;
        } else {
            throw new IllegalStateException("ScrollView can host only one direct child");
        }
    }

    public void addView(android.view.View p3, int p4)
    {
        if (this.getChildCount() <= 0) {
            super.addView(p3, p4);
            return;
        } else {
            throw new IllegalStateException("ScrollView can host only one direct child");
        }
    }

    public void addView(android.view.View p3, int p4, android.view.ViewGroup$LayoutParams p5)
    {
        if (this.getChildCount() <= 0) {
            super.addView(p3, p4, p5);
            return;
        } else {
            throw new IllegalStateException("ScrollView can host only one direct child");
        }
    }

    public void addView(android.view.View p3, android.view.ViewGroup$LayoutParams p4)
    {
        if (this.getChildCount() <= 0) {
            super.addView(p3, p4);
            return;
        } else {
            throw new IllegalStateException("ScrollView can host only one direct child");
        }
    }

    public boolean arrowScroll(int p12)
    {
        int v7_0 = 0;
        int v0 = this.findFocus();
        if (v0 == this) {
            v0 = 0;
        }
        android.view.View v4 = android.view.FocusFinder.getInstance().findNextFocus(this, v0, p12);
        int v3 = this.getMaxScrollAmount();
        if ((v4 == null) || (!this.isWithinDeltaOfScreen(v4, v3, this.getHeight()))) {
            int v6_0 = v3;
            if ((p12 != 33) || (this.getScrollY() >= v6_0)) {
                if ((p12 == 130) && (this.getChildCount() > 0)) {
                    int v1 = this.getChildAt(0).getBottom();
                    int v5 = ((this.getScrollY() + this.getHeight()) - this.getPaddingBottom());
                    if ((v1 - v5) < v3) {
                        v6_0 = (v1 - v5);
                    }
                }
            } else {
                v6_0 = this.getScrollY();
            }
            if (v6_0 != 0) {
                int v7_1;
                if (p12 != 130) {
                    v7_1 = (- v6_0);
                } else {
                    v7_1 = v6_0;
                }
                this.doScrollY(v7_1);
                if ((v0 != 0) && ((v0.isFocused()) && (this.isOffScreen(v0)))) {
                    int v2 = this.getDescendantFocusability();
                    this.setDescendantFocusability(131072);
                    this.requestFocus();
                    this.setDescendantFocusability(v2);
                }
                v7_0 = 1;
            }
        } else {
            v4.getDrawingRect(this.mTempRect);
            this.offsetDescendantRectToMyCoords(v4, this.mTempRect);
            this.doScrollY(this.computeScrollDeltaToGetChildRectOnScreen(this.mTempRect));
            v4.requestFocus(p12);
        }
        return v7_0;
    }

    public int computeHorizontalScrollExtent()
    {
        return super.computeHorizontalScrollExtent();
    }

    public int computeHorizontalScrollOffset()
    {
        return super.computeHorizontalScrollOffset();
    }

    public int computeHorizontalScrollRange()
    {
        return super.computeHorizontalScrollRange();
    }

    public void computeScroll()
    {
        int v10 = 1;
        if (this.mScroller.computeScrollOffset()) {
            int v3 = this.getScrollX();
            int v4 = this.getScrollY();
            int v12 = this.mScroller.getCurrX();
            int v13 = this.mScroller.getCurrY();
            if ((v3 != v12) || (v4 != v13)) {
                int v6 = this.getScrollRange();
                int v11 = this.getOverScrollMode();
                if ((v11 != 0) && ((v11 != 1) || (v6 <= 0))) {
                    v10 = 0;
                }
                this.overScrollByCompat((v12 - v3), (v13 - v4), v3, v4, 0, v6, 0, 0, 0);
                if (v10 != 0) {
                    this.ensureGlows();
                    if ((v13 > 0) || (v4 <= 0)) {
                        if ((v13 >= v6) && (v4 < v6)) {
                            this.mEdgeGlowBottom.onAbsorb(((int) this.mScroller.getCurrVelocity()));
                        }
                    } else {
                        this.mEdgeGlowTop.onAbsorb(((int) this.mScroller.getCurrVelocity()));
                    }
                }
            }
        }
        return;
    }

    protected int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect p11)
    {
        int v6_0;
        if (this.getChildCount() != 0) {
            int v3 = this.getHeight();
            int v5 = this.getScrollY();
            int v4 = (v5 + v3);
            int v2 = this.getVerticalFadingEdgeLength();
            if (p11.top > 0) {
                v5 += v2;
            }
            if (p11.bottom < this.getChildAt(0).getHeight()) {
                v4 -= v2;
            }
            v6_0 = 0;
            if ((p11.bottom <= v4) || (p11.top <= v5)) {
                if ((p11.top < v5) && (p11.bottom < v4)) {
                    int v6_1;
                    if (p11.height() <= v3) {
                        v6_1 = (0 - (v5 - p11.top));
                    } else {
                        v6_1 = (0 - (v4 - p11.bottom));
                    }
                    v6_0 = Math.max(v6_1, (- this.getScrollY()));
                }
            } else {
                int v6_2;
                if (p11.height() <= v3) {
                    v6_2 = (0 + (p11.bottom - v4));
                } else {
                    v6_2 = (0 + (p11.top - v5));
                }
                v6_0 = Math.min(v6_2, (this.getChildAt(0).getBottom() - v4));
            }
        } else {
            v6_0 = 0;
        }
        return v6_0;
    }

    public int computeVerticalScrollExtent()
    {
        return super.computeVerticalScrollExtent();
    }

    public int computeVerticalScrollOffset()
    {
        return Math.max(0, super.computeVerticalScrollOffset());
    }

    public int computeVerticalScrollRange()
    {
        int v1 = this.getChildCount();
        int v0 = ((this.getHeight() - this.getPaddingBottom()) - this.getPaddingTop());
        if (v1 != 0) {
            int v3 = this.getChildAt(0).getBottom();
            int v4 = this.getScrollY();
            int v2 = Math.max(0, (v3 - v0));
            if (v4 >= 0) {
                if (v4 > v2) {
                    v3 += (v4 - v2);
                }
            } else {
                v3 -= v4;
            }
            v0 = v3;
        }
        return v0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent p2)
    {
        if ((!super.dispatchKeyEvent(p2)) && (!this.executeKeyEvent(p2))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean dispatchNestedFling(float p2, float p3, boolean p4)
    {
        return this.mChildHelper.dispatchNestedFling(p2, p3, p4);
    }

    public boolean dispatchNestedPreFling(float p2, float p3)
    {
        return this.mChildHelper.dispatchNestedPreFling(p2, p3);
    }

    public boolean dispatchNestedPreScroll(int p2, int p3, int[] p4, int[] p5)
    {
        return this.mChildHelper.dispatchNestedPreScroll(p2, p3, p4, p5);
    }

    public boolean dispatchNestedScroll(int p7, int p8, int p9, int p10, int[] p11)
    {
        return this.mChildHelper.dispatchNestedScroll(p7, p8, p9, p10, p11);
    }

    public void draw(android.graphics.Canvas p8)
    {
        super.draw(p8);
        if (this.mEdgeGlowTop != null) {
            int v2 = this.getScrollY();
            if (!this.mEdgeGlowTop.isFinished()) {
                int v1_0 = p8.save();
                int v3_0 = ((this.getWidth() - this.getPaddingLeft()) - this.getPaddingRight());
                p8.translate(((float) this.getPaddingLeft()), ((float) Math.min(0, v2)));
                this.mEdgeGlowTop.setSize(v3_0, this.getHeight());
                if (this.mEdgeGlowTop.draw(p8)) {
                    android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                }
                p8.restoreToCount(v1_0);
            }
            if (!this.mEdgeGlowBottom.isFinished()) {
                int v1_1 = p8.save();
                int v3_1 = ((this.getWidth() - this.getPaddingLeft()) - this.getPaddingRight());
                int v0 = this.getHeight();
                p8.translate(((float) ((- v3_1) + this.getPaddingLeft())), ((float) (Math.max(this.getScrollRange(), v2) + v0)));
                p8.rotate(1127481344, ((float) v3_1), 0);
                this.mEdgeGlowBottom.setSize(v3_1, v0);
                if (this.mEdgeGlowBottom.draw(p8)) {
                    android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                }
                p8.restoreToCount(v1_1);
            }
        }
        return;
    }

    public boolean executeKeyEvent(android.view.KeyEvent p8)
    {
        int v3_0 = 0;
        this.mTempRect.setEmpty();
        if (this.canScroll()) {
            boolean v1 = 0;
            if (p8.getAction() == 0) {
                switch (p8.getKeyCode()) {
                    case 19:
                        if (p8.isAltPressed()) {
                            v1 = this.fullScroll(33);
                        } else {
                            v1 = this.arrowScroll(33);
                        }
                        break;
                    case 20:
                        if (p8.isAltPressed()) {
                            v1 = this.fullScroll(130);
                        } else {
                            v1 = this.arrowScroll(130);
                        }
                        break;
                    case 62:
                        int v3_4;
                        if (!p8.isShiftPressed()) {
                            v3_4 = 130;
                        } else {
                            v3_4 = 33;
                        }
                        this.pageScroll(v3_4);
                        break;
                }
            }
            v3_0 = v1;
        } else {
            if ((this.isFocused()) && (p8.getKeyCode() != 4)) {
                int v0 = this.findFocus();
                if (v0 == this) {
                    v0 = 0;
                }
                android.view.View v2 = android.view.FocusFinder.getInstance().findNextFocus(this, v0, 130);
                if ((v2 != null) && ((v2 != this) && (v2.requestFocus(130)))) {
                    v3_0 = 1;
                }
            }
        }
        return v3_0;
    }

    public void fling(int p14)
    {
        if (this.getChildCount() > 0) {
            int v12 = ((this.getHeight() - this.getPaddingBottom()) - this.getPaddingTop());
            this.mScroller.fling(this.getScrollX(), this.getScrollY(), 0, p14, 0, 0, 0, Math.max(0, (this.getChildAt(0).getHeight() - v12)), 0, (v12 / 2));
            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
        }
        return;
    }

    public boolean fullScroll(int p8)
    {
        int v1;
        if (p8 != 130) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        int v2 = this.getHeight();
        this.mTempRect.top = 0;
        this.mTempRect.bottom = v2;
        if (v1 != 0) {
            int v0 = this.getChildCount();
            if (v0 > 0) {
                this.mTempRect.bottom = (this.getChildAt((v0 - 1)).getBottom() + this.getPaddingBottom());
                this.mTempRect.top = (this.mTempRect.bottom - v2);
            }
        }
        return this.scrollAndFocus(p8, this.mTempRect.top, this.mTempRect.bottom);
    }

    protected float getBottomFadingEdgeStrength()
    {
        int v3_5;
        if (this.getChildCount() != 0) {
            int v1 = this.getVerticalFadingEdgeLength();
            int v2 = ((this.getChildAt(0).getBottom() - this.getScrollY()) - (this.getHeight() - this.getPaddingBottom()));
            if (v2 >= v1) {
                v3_5 = 1065353216;
            } else {
                v3_5 = (((float) v2) / ((float) v1));
            }
        } else {
            v3_5 = 0;
        }
        return v3_5;
    }

    public int getMaxScrollAmount()
    {
        return ((int) (1056964608 * ((float) this.getHeight())));
    }

    public int getNestedScrollAxes()
    {
        return this.mParentHelper.getNestedScrollAxes();
    }

    int getScrollRange()
    {
        int v1 = 0;
        if (this.getChildCount() > 0) {
            v1 = Math.max(0, (this.getChildAt(0).getHeight() - ((this.getHeight() - this.getPaddingBottom()) - this.getPaddingTop())));
        }
        return v1;
    }

    protected float getTopFadingEdgeStrength()
    {
        int v2_1;
        if (this.getChildCount() != 0) {
            int v0 = this.getVerticalFadingEdgeLength();
            int v1 = this.getScrollY();
            if (v1 >= v0) {
                v2_1 = 1065353216;
            } else {
                v2_1 = (((float) v1) / ((float) v0));
            }
        } else {
            v2_1 = 0;
        }
        return v2_1;
    }

    public boolean hasNestedScrollingParent()
    {
        return this.mChildHelper.hasNestedScrollingParent();
    }

    public boolean isFillViewport()
    {
        return this.mFillViewport;
    }

    public boolean isNestedScrollingEnabled()
    {
        return this.mChildHelper.isNestedScrollingEnabled();
    }

    public boolean isSmoothScrollingEnabled()
    {
        return this.mSmoothScrollingEnabled;
    }

    protected void measureChild(android.view.View p7, int p8, int p9)
    {
        p7.measure(android.support.v4.widget.NestedScrollView.getChildMeasureSpec(p8, (this.getPaddingLeft() + this.getPaddingRight()), p7.getLayoutParams().width), android.view.View$MeasureSpec.makeMeasureSpec(0, 0));
        return;
    }

    protected void measureChildWithMargins(android.view.View p6, int p7, int p8, int p9, int p10)
    {
        android.view.ViewGroup$MarginLayoutParams v2_1 = ((android.view.ViewGroup$MarginLayoutParams) p6.getLayoutParams());
        p6.measure(android.support.v4.widget.NestedScrollView.getChildMeasureSpec(p7, ((((this.getPaddingLeft() + this.getPaddingRight()) + v2_1.leftMargin) + v2_1.rightMargin) + p8), v2_1.width), android.view.View$MeasureSpec.makeMeasureSpec((v2_1.topMargin + v2_1.bottomMargin), 0));
        return;
    }

    public void onAttachedToWindow()
    {
        super.onAttachedToWindow();
        this.mIsLaidOut = 0;
        return;
    }

    public boolean onGenericMotionEvent(android.view.MotionEvent p7)
    {
        int v5_7;
        if ((p7.getSource() & 2) == 0) {
            v5_7 = 0;
        } else {
            switch (p7.getAction()) {
                case 8:
                    if (this.mIsBeingDragged) {
                    } else {
                        float v4 = android.support.v4.view.MotionEventCompat.getAxisValue(p7, 9);
                        if (v4 == 0) {
                        } else {
                            int v0 = ((int) (this.getVerticalScrollFactorCompat() * v4));
                            int v3 = this.getScrollRange();
                            int v2 = this.getScrollY();
                            int v1 = (v2 - v0);
                            if (v1 >= 0) {
                                if (v1 > v3) {
                                    v1 = v3;
                                }
                            } else {
                                v1 = 0;
                            }
                            if (v1 == v2) {
                            } else {
                                super.scrollTo(this.getScrollX(), v1);
                                v5_7 = 1;
                            }
                        }
                    }
                    break;
                default:
            }
        }
        return v5_7;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p14)
    {
        String v0_0 = 1;
        boolean v3 = 0;
        int v7 = p14.getAction();
        if ((v7 != 2) || (!this.mIsBeingDragged)) {
            switch ((v7 & 255)) {
                case 0:
                    int v11_1 = ((int) p14.getY());
                    if (this.inChild(((int) p14.getX()), v11_1)) {
                        this.mLastMotionY = v11_1;
                        this.mActivePointerId = p14.getPointerId(0);
                        this.initOrResetVelocityTracker();
                        this.mVelocityTracker.addMovement(p14);
                        this.mScroller.computeScrollOffset();
                        if (!this.mScroller.isFinished()) {
                            v3 = 1;
                        }
                        this.mIsBeingDragged = v3;
                        this.startNestedScroll(2);
                    } else {
                        this.mIsBeingDragged = 0;
                        this.recycleVelocityTracker();
                    }
                    break;
                case 1:
                case 3:
                    this.mIsBeingDragged = 0;
                    this.mActivePointerId = -1;
                    this.recycleVelocityTracker();
                    if (this.mScroller.springBack(this.getScrollX(), this.getScrollY(), 0, 0, 0, this.getScrollRange())) {
                        android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
                    }
                    this.stopNestedScroll();
                    break;
                case 2:
                    int v8 = this.mActivePointerId;
                    if (v8 == -1) {
                    } else {
                        int v10 = p14.findPointerIndex(v8);
                        if (v10 != -1) {
                            int v11_0 = ((int) p14.getY(v10));
                            if ((Math.abs((v11_0 - this.mLastMotionY)) <= this.mTouchSlop) || ((this.getNestedScrollAxes() & 2) != 0)) {
                            } else {
                                this.mIsBeingDragged = 1;
                                this.mLastMotionY = v11_0;
                                this.initVelocityTrackerIfNotExists();
                                this.mVelocityTracker.addMovement(p14);
                                this.mNestedYOffset = 0;
                                android.view.ViewParent v9 = this.getParent();
                                if (v9 == null) {
                                } else {
                                    v9.requestDisallowInterceptTouchEvent(1);
                                }
                            }
                        } else {
                            android.util.Log.e("NestedScrollView", new StringBuilder().append("Invalid pointerId=").append(v8).append(" in onInterceptTouchEvent").toString());
                        }
                    }
                    break;
                case 4:
                case 5:
                default:
                    break;
                case 4:
                case 5:
                    break;
                case 6:
                    this.onSecondaryPointerUp(p14);
                    break;
            }
            v0_0 = this.mIsBeingDragged;
        }
        return v0_0;
    }

    protected void onLayout(boolean p7, int p8, int p9, int p10, int p11)
    {
        this = super.onLayout(p7, p8, p9, p10, p11);
        this.mIsLayoutDirty = 0;
        if ((this.mChildToScrollTo != null) && (android.support.v4.widget.NestedScrollView.isViewDescendantOf(this.mChildToScrollTo, this))) {
            this.scrollToChild(this.mChildToScrollTo);
        }
        this.mChildToScrollTo = 0;
        if (!this.mIsLaidOut) {
            if (this.mSavedState != null) {
                this.scrollTo(this.getScrollX(), this.mSavedState.scrollPosition);
                this.mSavedState = 0;
            }
            int v0;
            if (this.getChildCount() <= 0) {
                v0 = 0;
            } else {
                v0 = this.getChildAt(0).getMeasuredHeight();
            }
            int v1 = Math.max(0, (v0 - (((p11 - p9) - this.getPaddingBottom()) - this.getPaddingTop())));
            if (this.getScrollY() <= v1) {
                if (this.getScrollY() < 0) {
                    this.scrollTo(this.getScrollX(), 0);
                }
            } else {
                this.scrollTo(this.getScrollX(), v1);
            }
        }
        this.scrollTo(this.getScrollX(), this.getScrollY());
        this.mIsLaidOut = 1;
        return;
    }

    protected void onMeasure(int p9, int p10)
    {
        super.onMeasure(p9, p10);
        if ((this.mFillViewport) && ((android.view.View$MeasureSpec.getMode(p10) != 0) && (this.getChildCount() > 0))) {
            android.view.View v0 = this.getChildAt(0);
            int v3_0 = this.getMeasuredHeight();
            if (v0.getMeasuredHeight() < v3_0) {
                v0.measure(android.support.v4.widget.NestedScrollView.getChildMeasureSpec(p9, (this.getPaddingLeft() + this.getPaddingRight()), ((android.widget.FrameLayout$LayoutParams) v0.getLayoutParams()).width), android.view.View$MeasureSpec.makeMeasureSpec(((v3_0 - this.getPaddingTop()) - this.getPaddingBottom()), 1073741824));
            }
        }
        return;
    }

    public boolean onNestedFling(android.view.View p2, float p3, float p4, boolean p5)
    {
        int v0_0;
        if (p5) {
            v0_0 = 0;
        } else {
            this.flingWithNestedDispatch(((int) p4));
            v0_0 = 1;
        }
        return v0_0;
    }

    public boolean onNestedPreFling(android.view.View p2, float p3, float p4)
    {
        return this.dispatchNestedPreFling(p3, p4);
    }

    public void onNestedPreScroll(android.view.View p2, int p3, int p4, int[] p5)
    {
        this.dispatchNestedPreScroll(p3, p4, p5, 0);
        return;
    }

    public void onNestedScroll(android.view.View p8, int p9, int p10, int p11, int p12)
    {
        int v6 = this.getScrollY();
        this.scrollBy(0, p12);
        int v2 = (this.getScrollY() - v6);
        this.dispatchNestedScroll(0, v2, 0, (p12 - v2), 0);
        return;
    }

    public void onNestedScrollAccepted(android.view.View p2, android.view.View p3, int p4)
    {
        this.mParentHelper.onNestedScrollAccepted(p2, p3, p4);
        this.startNestedScroll(2);
        return;
    }

    protected void onOverScrolled(int p1, int p2, boolean p3, boolean p4)
    {
        super.scrollTo(p1, p2);
        return;
    }

    protected boolean onRequestFocusInDescendants(int p5, android.graphics.Rect p6)
    {
        boolean v1 = 0;
        if (p5 != 2) {
            if (p5 == 1) {
                p5 = 33;
            }
        } else {
            p5 = 130;
        }
        android.view.View v0;
        if (p6 != null) {
            v0 = android.view.FocusFinder.getInstance().findNextFocusFromRect(this, p6, p5);
        } else {
            v0 = android.view.FocusFinder.getInstance().findNextFocus(this, 0, p5);
        }
        if ((v0 != null) && (!this.isOffScreen(v0))) {
            v1 = v0.requestFocus(p5, p6);
        }
        return v1;
    }

    protected void onRestoreInstanceState(android.os.Parcelable p3)
    {
        if ((p3 instanceof android.support.v4.widget.NestedScrollView$SavedState)) {
            super.onRestoreInstanceState(((android.support.v4.widget.NestedScrollView$SavedState) p3).getSuperState());
            this.mSavedState = ((android.support.v4.widget.NestedScrollView$SavedState) p3);
            this.requestLayout();
        } else {
            super.onRestoreInstanceState(p3);
        }
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.support.v4.widget.NestedScrollView$SavedState v0_1 = new android.support.v4.widget.NestedScrollView$SavedState(super.onSaveInstanceState());
        v0_1.scrollPosition = this.getScrollY();
        return v0_1;
    }

    protected void onScrollChanged(int p7, int p8, int p9, int p10)
    {
        super.onScrollChanged(p7, p8, p9, p10);
        if (this.mOnScrollChangeListener != null) {
            this.mOnScrollChangeListener.onScrollChange(this, p7, p8, p9, p10);
        }
        return;
    }

    protected void onSizeChanged(int p4, int p5, int p6, int p7)
    {
        super.onSizeChanged(p4, p5, p6, p7);
        android.view.View v0 = this.findFocus();
        if ((v0 != null) && ((this != v0) && (this.isWithinDeltaOfScreen(v0, 0, p7)))) {
            v0.getDrawingRect(this.mTempRect);
            this.offsetDescendantRectToMyCoords(v0, this.mTempRect);
            this.doScrollY(this.computeScrollDeltaToGetChildRectOnScreen(this.mTempRect));
        }
        return;
    }

    public boolean onStartNestedScroll(android.view.View p2, android.view.View p3, int p4)
    {
        int v0_1;
        if ((p4 & 2) == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onStopNestedScroll(android.view.View p2)
    {
        this.mParentHelper.onStopNestedScroll(p2);
        this.stopNestedScroll();
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p34)
    {
        void v33_1 = this.initVelocityTrackerIfNotExists();
        android.view.MotionEvent v31 = android.view.MotionEvent.obtain(p34);
        int v21 = android.support.v4.view.MotionEventCompat.getActionMasked(p34);
        if (v21 == 0) {
            v33_1.mNestedYOffset = 0;
        }
        boolean v2_65;
        v31.offsetLocation(0, ((float) v33_1.mNestedYOffset));
        switch (v21) {
            case 0:
                if (v33_1.getChildCount() != 0) {
                    boolean v2_55;
                    if (v33_1.mScroller.isFinished()) {
                        v2_55 = 0;
                    } else {
                        v2_55 = 1;
                    }
                    v33_1.mIsBeingDragged = v2_55;
                    if (v2_55) {
                        android.view.ViewParent v28_1 = v33_1.getParent();
                        if (v28_1 != null) {
                            v28_1.requestDisallowInterceptTouchEvent(1);
                        }
                    }
                    if (!v33_1.mScroller.isFinished()) {
                        v33_1.mScroller.abortAnimation();
                    }
                    v33_1.mLastMotionY = ((int) p34.getY());
                    v33_1.mActivePointerId = p34.getPointerId(0);
                    v33_1.startNestedScroll(2);
                    if (v33_1.mVelocityTracker != null) {
                        v33_1.mVelocityTracker.addMovement(v31);
                    }
                    v31.recycle();
                    v2_65 = 1;
                } else {
                    v2_65 = 0;
                }
                break;
            case 1:
                if (v33_1.mIsBeingDragged) {
                    android.view.VelocityTracker v30 = v33_1.mVelocityTracker;
                    v30.computeCurrentVelocity(1000, ((float) v33_1.mMaximumVelocity));
                    int v25 = ((int) android.support.v4.view.VelocityTrackerCompat.getYVelocity(v30, v33_1.mActivePointerId));
                    if (Math.abs(v25) <= v33_1.mMinimumVelocity) {
                        if (v33_1.mScroller.springBack(v33_1.getScrollX(), v33_1.getScrollY(), 0, 0, 0, v33_1.getScrollRange())) {
                            android.support.v4.view.ViewCompat.postInvalidateOnAnimation(v33_1);
                        }
                    } else {
                        v33_1.flingWithNestedDispatch((- v25));
                    }
                }
                v33_1.mActivePointerId = -1;
                v33_1 = v33_1.endDrag();
                break;
            case 2:
                int v22 = p34.findPointerIndex(v33_1.mActivePointerId);
                if (v22 != -1) {
                    int v32 = ((int) p34.getY(v22));
                    int v4 = (v33_1.mLastMotionY - v32);
                    if (v33_1.dispatchNestedPreScroll(0, v4, v33_1.mScrollConsumed, v33_1.mScrollOffset)) {
                        v4 -= v33_1.mScrollConsumed[1];
                        v31.offsetLocation(0, ((float) v33_1.mScrollOffset[1]));
                        v33_1.mNestedYOffset = (v33_1.mNestedYOffset + v33_1.mScrollOffset[1]);
                    }
                    if ((!v33_1.mIsBeingDragged) && (Math.abs(v4) > v33_1.mTouchSlop)) {
                        android.view.ViewParent v28_0 = v33_1.getParent();
                        if (v28_0 != null) {
                            v28_0.requestDisallowInterceptTouchEvent(1);
                        }
                        v33_1.mIsBeingDragged = 1;
                        if (v4 <= 0) {
                            v4 += v33_1.mTouchSlop;
                        } else {
                            v4 -= v33_1.mTouchSlop;
                        }
                    }
                    if (!v33_1.mIsBeingDragged) {
                    } else {
                        int v23;
                        v33_1.mLastMotionY = (v32 - v33_1.mScrollOffset[1]);
                        int v26 = v33_1.getScrollY();
                        int v8 = v33_1.getScrollRange();
                        int v27 = v33_1.getOverScrollMode();
                        if ((v27 != 0) && ((v27 != 1) || (v8 <= 0))) {
                            v23 = 0;
                        } else {
                            v23 = 1;
                        }
                        if ((v33_1.overScrollByCompat(0, v4, 0, v33_1.getScrollY(), 0, v8, 0, 0, 1)) && (!v33_1.hasNestedScrollingParent())) {
                            v33_1.mVelocityTracker.clear();
                        }
                        int v11_1 = (v33_1.getScrollY() - v26);
                        if (!v33_1.dispatchNestedScroll(0, v11_1, 0, (v4 - v11_1), v33_1.mScrollOffset)) {
                            if (v23 == 0) {
                            } else {
                                v33_1 = v33_1.ensureGlows();
                                int v29 = (v26 + v4);
                                if (v29 >= 0) {
                                    if (v29 > v8) {
                                        v33_1.mEdgeGlowBottom.onPull((((float) v4) / ((float) v33_1.getHeight())), (1065353216 - (p34.getX(v22) / ((float) v33_1.getWidth()))));
                                        if (!v33_1.mEdgeGlowTop.isFinished()) {
                                            v33_1.mEdgeGlowTop.onRelease();
                                        }
                                    }
                                } else {
                                    v33_1.mEdgeGlowTop.onPull((((float) v4) / ((float) v33_1.getHeight())), (p34.getX(v22) / ((float) v33_1.getWidth())));
                                    if (!v33_1.mEdgeGlowBottom.isFinished()) {
                                        v33_1.mEdgeGlowBottom.onRelease();
                                    }
                                }
                                if ((v33_1.mEdgeGlowTop == null) || ((v33_1.mEdgeGlowTop.isFinished()) && (v33_1.mEdgeGlowBottom.isFinished()))) {
                                } else {
                                    android.support.v4.view.ViewCompat.postInvalidateOnAnimation(v33_1);
                                }
                            }
                        } else {
                            v33_1.mLastMotionY = (v33_1.mLastMotionY - v33_1.mScrollOffset[1]);
                            v31.offsetLocation(0, ((float) v33_1.mScrollOffset[1]));
                            v33_1.mNestedYOffset = (v33_1.mNestedYOffset + v33_1.mScrollOffset[1]);
                        }
                    }
                } else {
                    android.util.Log.e("NestedScrollView", new StringBuilder().append("Invalid pointerId=").append(v33_1.mActivePointerId).append(" in onTouchEvent").toString());
                }
                break;
            case 3:
                if ((v33_1.mIsBeingDragged) && ((v33_1.getChildCount() > 0) && (v33_1.mScroller.springBack(v33_1.getScrollX(), v33_1.getScrollY(), 0, 0, 0, v33_1.getScrollRange())))) {
                    android.support.v4.view.ViewCompat.postInvalidateOnAnimation(v33_1);
                }
                v33_1.mActivePointerId = -1;
                v33_1 = v33_1.endDrag();
            case 5:
                int v24 = android.support.v4.view.MotionEventCompat.getActionIndex(p34);
                v33_1.mLastMotionY = ((int) p34.getY(v24));
                v33_1.mActivePointerId = p34.getPointerId(v24);
                break;
            case 6:
                v33_1 = v33_1.onSecondaryPointerUp(p34);
                v33_1.mLastMotionY = ((int) p34.getY(p34.findPointerIndex(v33_1.mActivePointerId)));
                break;
            default:
        }
        return v2_65;
    }

    boolean overScrollByCompat(int p20, int p21, int p22, int p23, int p24, int p25, int p26, int p27, boolean p28)
    {
        int v9;
        int v15 = this.getOverScrollMode();
        if (this.computeHorizontalScrollRange() <= this.computeHorizontalScrollExtent()) {
            v9 = 0;
        } else {
            v9 = 1;
        }
        int v10;
        if (this.computeVerticalScrollRange() <= this.computeVerticalScrollExtent()) {
            v10 = 0;
        } else {
            v10 = 1;
        }
        if ((v15 != 0) && ((v15 != 1) || (v9 == 0))) {
            int v14 = 0;
        } else {
            v14 = 1;
        }
        if ((v15 != 0) && ((v15 != 1) || (v10 == 0))) {
            int v16 = 0;
        } else {
            v16 = 1;
        }
        int v2 = (p22 + p20);
        if (v14 == 0) {
            p26 = 0;
        }
        int v3 = (p23 + p21);
        if (v16 == 0) {
            p27 = 0;
        }
        int v13 = (- p26);
        int v17 = (p26 + p24);
        int v18 = (- p27);
        int v8 = (p27 + p25);
        int v11 = 0;
        if (v2 <= v17) {
            if (v2 < v13) {
                v2 = v13;
                v11 = 1;
            }
        } else {
            v2 = v17;
            v11 = 1;
        }
        int v12 = 0;
        if (v3 <= v8) {
            if (v3 < v18) {
                v3 = v18;
                v12 = 1;
            }
        } else {
            v3 = v8;
            v12 = 1;
        }
        if (v12 != 0) {
            this.mScroller.springBack(v2, v3, 0, 0, 0, this.getScrollRange());
        }
        int v1_5;
        this.onOverScrolled(v2, v3, v11, v12);
        if ((v11 == 0) && (v12 == 0)) {
            v1_5 = 0;
        } else {
            v1_5 = 1;
        }
        return v1_5;
    }

    public boolean pageScroll(int p8)
    {
        int v1;
        if (p8 != 130) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        int v2 = this.getHeight();
        if (v1 == 0) {
            this.mTempRect.top = (this.getScrollY() - v2);
            if (this.mTempRect.top < 0) {
                this.mTempRect.top = 0;
            }
        } else {
            this.mTempRect.top = (this.getScrollY() + v2);
            int v0 = this.getChildCount();
            if (v0 > 0) {
                android.view.View v3 = this.getChildAt((v0 - 1));
                if ((this.mTempRect.top + v2) > v3.getBottom()) {
                    this.mTempRect.top = (v3.getBottom() - v2);
                }
            }
        }
        this.mTempRect.bottom = (this.mTempRect.top + v2);
        return this.scrollAndFocus(p8, this.mTempRect.top, this.mTempRect.bottom);
    }

    public void requestChildFocus(android.view.View p2, android.view.View p3)
    {
        if (this.mIsLayoutDirty) {
            this.mChildToScrollTo = p3;
        } else {
            this.scrollToChild(p3);
        }
        super.requestChildFocus(p2, p3);
        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View p4, android.graphics.Rect p5, boolean p6)
    {
        p5.offset((p4.getLeft() - p4.getScrollX()), (p4.getTop() - p4.getScrollY()));
        return this.scrollToChildRect(p5, p6);
    }

    public void requestDisallowInterceptTouchEvent(boolean p1)
    {
        if (p1) {
            this.recycleVelocityTracker();
        }
        super.requestDisallowInterceptTouchEvent(p1);
        return;
    }

    public void requestLayout()
    {
        this.mIsLayoutDirty = 1;
        super.requestLayout();
        return;
    }

    public void scrollTo(int p4, int p5)
    {
        if (this.getChildCount() > 0) {
            android.view.View v0 = this.getChildAt(0);
            int v4_1 = android.support.v4.widget.NestedScrollView.clamp(p4, ((this.getWidth() - this.getPaddingRight()) - this.getPaddingLeft()), v0.getWidth());
            int v5_1 = android.support.v4.widget.NestedScrollView.clamp(p5, ((this.getHeight() - this.getPaddingBottom()) - this.getPaddingTop()), v0.getHeight());
            if ((v4_1 != this.getScrollX()) || (v5_1 != this.getScrollY())) {
                super.scrollTo(v4_1, v5_1);
            }
        }
        return;
    }

    public void setFillViewport(boolean p2)
    {
        if (p2 != this.mFillViewport) {
            this.mFillViewport = p2;
            this.requestLayout();
        }
        return;
    }

    public void setNestedScrollingEnabled(boolean p2)
    {
        this.mChildHelper.setNestedScrollingEnabled(p2);
        return;
    }

    public void setOnScrollChangeListener(android.support.v4.widget.NestedScrollView$OnScrollChangeListener p1)
    {
        this.mOnScrollChangeListener = p1;
        return;
    }

    public void setSmoothScrollingEnabled(boolean p1)
    {
        this.mSmoothScrollingEnabled = p1;
        return;
    }

    public boolean shouldDelayChildPressedState()
    {
        return 1;
    }

    public final void smoothScrollBy(int p12, int p13)
    {
        if (this.getChildCount() != 0) {
            if ((android.view.animation.AnimationUtils.currentAnimationTimeMillis() - this.mLastScroll) <= 250) {
                if (!this.mScroller.isFinished()) {
                    this.mScroller.abortAnimation();
                }
                this.scrollBy(p12, p13);
            } else {
                int v4 = Math.max(0, (this.getChildAt(0).getHeight() - ((this.getHeight() - this.getPaddingBottom()) - this.getPaddingTop())));
                int v5 = this.getScrollY();
                this.mScroller.startScroll(this.getScrollX(), v5, 0, (Math.max(0, Math.min((v5 + p13), v4)) - v5));
                android.support.v4.view.ViewCompat.postInvalidateOnAnimation(this);
            }
            this.mLastScroll = android.view.animation.AnimationUtils.currentAnimationTimeMillis();
        }
        return;
    }

    public final void smoothScrollTo(int p3, int p4)
    {
        this.smoothScrollBy((p3 - this.getScrollX()), (p4 - this.getScrollY()));
        return;
    }

    public boolean startNestedScroll(int p2)
    {
        return this.mChildHelper.startNestedScroll(p2);
    }

    public void stopNestedScroll()
    {
        this.mChildHelper.stopNestedScroll();
        return;
    }
}
package android.support.v4.widget;
 class PopupMenuCompat$BasePopupMenuImpl implements android.support.v4.widget.PopupMenuCompat$PopupMenuImpl {

    PopupMenuCompat$BasePopupMenuImpl()
    {
        return;
    }

    public android.view.View$OnTouchListener getDragToOpenListener(Object p2)
    {
        return 0;
    }
}
package android.support.v4.widget;
 class PopupWindowCompat$BasePopupWindowImpl implements android.support.v4.widget.PopupWindowCompat$PopupWindowImpl {
    private static reflect.Method sGetWindowLayoutTypeMethod;
    private static boolean sGetWindowLayoutTypeMethodAttempted;
    private static reflect.Method sSetWindowLayoutTypeMethod;
    private static boolean sSetWindowLayoutTypeMethodAttempted;

    PopupWindowCompat$BasePopupWindowImpl()
    {
        return;
    }

    public boolean getOverlapAnchor(android.widget.PopupWindow p2)
    {
        return 0;
    }

    public int getWindowLayoutType(android.widget.PopupWindow p6)
    {
        if (!android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethodAttempted) {
            try {
                Class[] v3_1 = new Class[0];
                android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethod = android.widget.PopupWindow.getDeclaredMethod("getWindowLayoutType", v3_1);
                android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethod.setAccessible(1);
            } catch (Exception v0) {
            }
            android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethodAttempted = 1;
        }
        Exception v0_6;
        if (android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethod == null) {
            v0_6 = 0;
        } else {
            try {
                Object[] v2_2 = new Object[0];
                v0_6 = ((Integer) android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sGetWindowLayoutTypeMethod.invoke(p6, v2_2)).intValue();
            } catch (Exception v0) {
            }
        }
        return v0_6;
    }

    public void setOverlapAnchor(android.widget.PopupWindow p1, boolean p2)
    {
        return;
    }

    public void setWindowLayoutType(android.widget.PopupWindow p7, int p8)
    {
        if (!android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethodAttempted) {
            try {
                int v2_2 = new Class[1];
                v2_2[0] = Integer.TYPE;
                android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethod = android.widget.PopupWindow.getDeclaredMethod("setWindowLayoutType", v2_2);
                android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethod.setAccessible(1);
            } catch (Exception v0) {
            }
            android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethodAttempted = 1;
        }
        if (android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethod != null) {
            try {
                Object[] v1_2 = new Object[1];
                v1_2[0] = Integer.valueOf(p8);
                android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl.sSetWindowLayoutTypeMethod.invoke(p7, v1_2);
            } catch (Exception v0) {
            }
        }
        return;
    }

    public void showAsDropDown(android.widget.PopupWindow p4, android.view.View p5, int p6, int p7, int p8)
    {
        if ((android.support.v4.view.GravityCompat.getAbsoluteGravity(p8, android.support.v4.view.ViewCompat.getLayoutDirection(p5)) & 7) == 5) {
            p6 -= (p4.getWidth() - p5.getWidth());
        }
        p4.showAsDropDown(p5, p6, p7);
        return;
    }
}
package android.support.v4.widget;
public abstract class SearchViewCompat$OnCloseListenerCompat implements android.support.v4.widget.SearchViewCompat$OnCloseListener {

    public SearchViewCompat$OnCloseListenerCompat()
    {
        return;
    }

    public boolean onClose()
    {
        return 0;
    }
}
package android.support.v4.widget;
public abstract class SearchViewCompat$OnQueryTextListenerCompat implements android.support.v4.widget.SearchViewCompat$OnQueryTextListener {

    public SearchViewCompat$OnQueryTextListenerCompat()
    {
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return 0;
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return 0;
    }
}
package android.support.v4.widget;
 class SearchViewCompat$SearchViewCompatHoneycombImpl$1 implements android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge {
    final synthetic android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl this$0;
    final synthetic android.support.v4.widget.SearchViewCompat$OnQueryTextListener val$listener;

    SearchViewCompat$SearchViewCompatHoneycombImpl$1(android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl p1, android.support.v4.widget.SearchViewCompat$OnQueryTextListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public boolean onQueryTextChange(String p2)
    {
        return this.val$listener.onQueryTextChange(p2);
    }

    public boolean onQueryTextSubmit(String p2)
    {
        return this.val$listener.onQueryTextSubmit(p2);
    }
}
package android.support.v4.widget;
 class SearchViewCompat$SearchViewCompatHoneycombImpl$2 implements android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge {
    final synthetic android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl this$0;
    final synthetic android.support.v4.widget.SearchViewCompat$OnCloseListener val$listener;

    SearchViewCompat$SearchViewCompatHoneycombImpl$2(android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl p1, android.support.v4.widget.SearchViewCompat$OnCloseListener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public boolean onClose()
    {
        return this.val$listener.onClose();
    }
}
package android.support.v4.widget;
 class SearchViewCompat$SearchViewCompatStubImpl implements android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl {

    SearchViewCompat$SearchViewCompatStubImpl()
    {
        return;
    }

    public CharSequence getQuery(android.view.View p2)
    {
        return 0;
    }

    public boolean isIconified(android.view.View p2)
    {
        return 1;
    }

    public boolean isQueryRefinementEnabled(android.view.View p2)
    {
        return 0;
    }

    public boolean isSubmitButtonEnabled(android.view.View p2)
    {
        return 0;
    }

    public Object newOnCloseListener(android.support.v4.widget.SearchViewCompat$OnCloseListener p2)
    {
        return 0;
    }

    public Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListener p2)
    {
        return 0;
    }

    public android.view.View newSearchView(android.content.Context p2)
    {
        return 0;
    }

    public void setIconified(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setImeOptions(android.view.View p1, int p2)
    {
        return;
    }

    public void setInputType(android.view.View p1, int p2)
    {
        return;
    }

    public void setMaxWidth(android.view.View p1, int p2)
    {
        return;
    }

    public void setOnCloseListener(android.view.View p1, android.support.v4.widget.SearchViewCompat$OnCloseListener p2)
    {
        return;
    }

    public void setOnQueryTextListener(android.view.View p1, android.support.v4.widget.SearchViewCompat$OnQueryTextListener p2)
    {
        return;
    }

    public void setQuery(android.view.View p1, CharSequence p2, boolean p3)
    {
        return;
    }

    public void setQueryHint(android.view.View p1, CharSequence p2)
    {
        return;
    }

    public void setQueryRefinementEnabled(android.view.View p1, boolean p2)
    {
        return;
    }

    public void setSearchableInfo(android.view.View p1, android.content.ComponentName p2)
    {
        return;
    }

    public void setSubmitButtonEnabled(android.view.View p1, boolean p2)
    {
        return;
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$AccessibilityDelegate extends android.support.v4.view.AccessibilityDelegateCompat {
    private final android.graphics.Rect mTmpRect;
    final synthetic android.support.v4.widget.SlidingPaneLayout this$0;

    SlidingPaneLayout$AccessibilityDelegate(android.support.v4.widget.SlidingPaneLayout p2)
    {
        this.this$0 = p2;
        this.mTmpRect = new android.graphics.Rect();
        return;
    }

    private void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.graphics.Rect v0 = this.mTmpRect;
        p4.getBoundsInParent(v0);
        p3.setBoundsInParent(v0);
        p4.getBoundsInScreen(v0);
        p3.setBoundsInScreen(v0);
        p3.setVisibleToUser(p4.isVisibleToUser());
        p3.setPackageName(p4.getPackageName());
        p3.setClassName(p4.getClassName());
        p3.setContentDescription(p4.getContentDescription());
        p3.setEnabled(p4.isEnabled());
        p3.setClickable(p4.isClickable());
        p3.setFocusable(p4.isFocusable());
        p3.setFocused(p4.isFocused());
        p3.setAccessibilityFocused(p4.isAccessibilityFocused());
        p3.setSelected(p4.isSelected());
        p3.setLongClickable(p4.isLongClickable());
        p3.addAction(p4.getActions());
        p3.setMovementGranularities(p4.getMovementGranularities());
        return;
    }

    public boolean filter(android.view.View p2)
    {
        return this.this$0.isDimmed(p2);
    }

    public void onInitializeAccessibilityEvent(android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        super.onInitializeAccessibilityEvent(p2, p3);
        p3.setClassName(android.support.v4.widget.SlidingPaneLayout.getName());
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p7, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p8)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat v4 = android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain(p8);
        super.onInitializeAccessibilityNodeInfo(p7, v4);
        this.copyNodeInfoNoChildren(p8, v4);
        v4.recycle();
        p8.setClassName(android.support.v4.widget.SlidingPaneLayout.getName());
        p8.setSource(p7);
        android.view.View v3_0 = android.support.v4.view.ViewCompat.getParentForAccessibility(p7);
        if ((v3_0 instanceof android.view.View)) {
            p8.setParent(((android.view.View) v3_0));
        }
        int v1 = this.this$0.getChildCount();
        int v2 = 0;
        while (v2 < v1) {
            android.view.View v0 = this.this$0.getChildAt(v2);
            if ((!this.filter(v0)) && (v0.getVisibility() == 0)) {
                android.support.v4.view.ViewCompat.setImportantForAccessibility(v0, 1);
                p8.addChild(v0);
            }
            v2++;
        }
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        int v0_1;
        if (this.filter(p3)) {
            v0_1 = 0;
        } else {
            v0_1 = super.onRequestSendAccessibilityEvent(p2, p3, p4);
        }
        return v0_1;
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$DragHelperCallback extends android.support.v4.widget.ViewDragHelper$Callback {
    final synthetic android.support.v4.widget.SlidingPaneLayout this$0;

    SlidingPaneLayout$DragHelperCallback(android.support.v4.widget.SlidingPaneLayout p1)
    {
        this.this$0 = p1;
        return;
    }

    public int clampViewPositionHorizontal(android.view.View p8, int p9, int p10)
    {
        int v2;
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v1_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) this.this$0.mSlideableView.getLayoutParams());
        if (!this.this$0.isLayoutRtlSupport()) {
            int v3_0 = (this.this$0.getPaddingLeft() + v1_1.leftMargin);
            v2 = Math.min(Math.max(p9, v3_0), (v3_0 + this.this$0.mSlideRange));
        } else {
            int v3_1 = (this.this$0.getWidth() - ((this.this$0.getPaddingRight() + v1_1.rightMargin) + this.this$0.mSlideableView.getWidth()));
            v2 = Math.max(Math.min(p9, v3_1), (v3_1 - this.this$0.mSlideRange));
        }
        return v2;
    }

    public int clampViewPositionVertical(android.view.View p2, int p3, int p4)
    {
        return p2.getTop();
    }

    public int getViewHorizontalDragRange(android.view.View p2)
    {
        return this.this$0.mSlideRange;
    }

    public void onEdgeDragStarted(int p3, int p4)
    {
        this.this$0.mDragHelper.captureChildView(this.this$0.mSlideableView, p4);
        return;
    }

    public void onViewCaptured(android.view.View p2, int p3)
    {
        this.this$0.setAllChildrenVisible();
        return;
    }

    public void onViewDragStateChanged(int p3)
    {
        if (this.this$0.mDragHelper.getViewDragState() == 0) {
            if (this.this$0.mSlideOffset != 0) {
                this.this$0.dispatchOnPanelOpened(this.this$0.mSlideableView);
                this.this$0.mPreservedOpenState = 1;
            } else {
                this.this$0.updateObscuredViewsVisibility(this.this$0.mSlideableView);
                this.this$0.dispatchOnPanelClosed(this.this$0.mSlideableView);
                this.this$0.mPreservedOpenState = 0;
            }
        }
        return;
    }

    public void onViewPositionChanged(android.view.View p2, int p3, int p4, int p5, int p6)
    {
        this.this$0.onPanelDragged(p3);
        this.this$0.invalidate();
        return;
    }

    public void onViewReleased(android.view.View p9, float p10, float p11)
    {
        int v1;
        android.support.v4.widget.SlidingPaneLayout$LayoutParams v2_1 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) p9.getLayoutParams());
        if (!this.this$0.isLayoutRtlSupport()) {
            v1 = (this.this$0.getPaddingLeft() + v2_1.leftMargin);
            if ((p10 > 0) || ((p10 == 0) && (this.this$0.mSlideOffset > 1056964608))) {
                v1 += this.this$0.mSlideRange;
            }
        } else {
            int v3 = (this.this$0.getPaddingRight() + v2_1.rightMargin);
            if ((p10 < 0) || ((p10 == 0) && (this.this$0.mSlideOffset > 1056964608))) {
                v3 += this.this$0.mSlideRange;
            }
            v1 = ((this.this$0.getWidth() - v3) - this.this$0.mSlideableView.getWidth());
        }
        this.this$0.mDragHelper.settleCapturedViewAt(v1, p9.getTop());
        this.this$0.invalidate();
        return;
    }

    public boolean tryCaptureView(android.view.View p2, int p3)
    {
        boolean v0_4;
        if (!this.this$0.mIsUnableToDrag) {
            v0_4 = ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) p2.getLayoutParams()).slideable;
        } else {
            v0_4 = 0;
        }
        return v0_4;
    }
}
package android.support.v4.widget;
final class SlidingPaneLayout$SavedState$1 implements android.support.v4.os.ParcelableCompatCreatorCallbacks {

    SlidingPaneLayout$SavedState$1()
    {
        return;
    }

    public android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return new android.support.v4.widget.SlidingPaneLayout$SavedState(p2, p3);
    }

    public bridge synthetic Object createFromParcel(android.os.Parcel p2, ClassLoader p3)
    {
        return this.createFromParcel(p2, p3);
    }

    public android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int p2)
    {
        android.support.v4.widget.SlidingPaneLayout$SavedState[] v0 = new android.support.v4.widget.SlidingPaneLayout$SavedState[p2];
        return v0;
    }

    public bridge synthetic Object[] newArray(int p2)
    {
        return this.newArray(p2);
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$SavedState extends android.support.v4.view.AbsSavedState {
    public static final android.os.Parcelable$Creator CREATOR;
    boolean isOpen;

    static SlidingPaneLayout$SavedState()
    {
        android.support.v4.widget.SlidingPaneLayout$SavedState.CREATOR = android.support.v4.os.ParcelableCompat.newCreator(new android.support.v4.widget.SlidingPaneLayout$SavedState$1());
        return;
    }

    SlidingPaneLayout$SavedState(android.os.Parcel p2, ClassLoader p3)
    {
        int v0_1;
        super(p2, p3);
        if (p2.readInt() == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        super.isOpen = v0_1;
        return;
    }

    SlidingPaneLayout$SavedState(android.os.Parcelable p1)
    {
        super(p1);
        return;
    }

    public void writeToParcel(android.os.Parcel p2, int p3)
    {
        int v0_1;
        super.writeToParcel(p2, p3);
        if (!this.isOpen) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        p2.writeInt(v0_1);
        return;
    }
}
package android.support.v4.widget;
public class SlidingPaneLayout$SimplePanelSlideListener implements android.support.v4.widget.SlidingPaneLayout$PanelSlideListener {

    public SlidingPaneLayout$SimplePanelSlideListener()
    {
        return;
    }

    public void onPanelClosed(android.view.View p1)
    {
        return;
    }

    public void onPanelOpened(android.view.View p1)
    {
        return;
    }

    public void onPanelSlide(android.view.View p1, float p2)
    {
        return;
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$SlidingPanelLayoutImplBase implements android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl {

    SlidingPaneLayout$SlidingPanelLayoutImplBase()
    {
        return;
    }

    public void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout p5, android.view.View p6)
    {
        android.support.v4.view.ViewCompat.postInvalidateOnAnimation(p5, p6.getLeft(), p6.getTop(), p6.getRight(), p6.getBottom());
        return;
    }
}
package android.support.v4.widget;
public class SwipeRefreshLayout extends android.view.ViewGroup implements android.support.v4.view.NestedScrollingParent, android.support.v4.view.NestedScrollingChild {
    private static final int ALPHA_ANIMATION_DURATION = 300;
    private static final int ANIMATE_TO_START_DURATION = 200;
    private static final int ANIMATE_TO_TRIGGER_DURATION = 200;
    private static final int CIRCLE_BG_LIGHT = 16448250;
    static final int CIRCLE_DIAMETER = 40;
    static final int CIRCLE_DIAMETER_LARGE = 56;
    private static final float DECELERATE_INTERPOLATION_FACTOR = 64;
    public static final int DEFAULT = 1;
    private static final int DEFAULT_CIRCLE_TARGET = 64;
    private static final float DRAG_RATE = 63;
    private static final int INVALID_POINTER = 255;
    public static final int LARGE = 0;
    private static final int[] LAYOUT_ATTRS = None;
    private static final String LOG_TAG = "";
    private static final int MAX_ALPHA = 255;
    private static final float MAX_PROGRESS_ANGLE = 1061997773;
    private static final int SCALE_DOWN_DURATION = 150;
    private static final int STARTING_PROGRESS_ALPHA = 76;
    private int mActivePointerId;
    private android.view.animation.Animation mAlphaMaxAnimation;
    private android.view.animation.Animation mAlphaStartAnimation;
    private final android.view.animation.Animation mAnimateToCorrectPosition;
    private final android.view.animation.Animation mAnimateToStartPosition;
    private android.support.v4.widget.SwipeRefreshLayout$OnChildScrollUpCallback mChildScrollUpCallback;
    private int mCircleDiameter;
    android.support.v4.widget.CircleImageView mCircleView;
    private int mCircleViewIndex;
    int mCurrentTargetOffsetTop;
    private final android.view.animation.DecelerateInterpolator mDecelerateInterpolator;
    protected int mFrom;
    private float mInitialDownY;
    private float mInitialMotionY;
    private boolean mIsBeingDragged;
    android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener mListener;
    private int mMediumAnimationDuration;
    private boolean mNestedScrollInProgress;
    private final android.support.v4.view.NestedScrollingChildHelper mNestedScrollingChildHelper;
    private final android.support.v4.view.NestedScrollingParentHelper mNestedScrollingParentHelper;
    boolean mNotify;
    protected int mOriginalOffsetTop;
    private final int[] mParentOffsetInWindow;
    private final int[] mParentScrollConsumed;
    android.support.v4.widget.MaterialProgressDrawable mProgress;
    private android.view.animation.Animation$AnimationListener mRefreshListener;
    boolean mRefreshing;
    private boolean mReturningToStart;
    boolean mScale;
    private android.view.animation.Animation mScaleAnimation;
    private android.view.animation.Animation mScaleDownAnimation;
    private android.view.animation.Animation mScaleDownToStartAnimation;
    int mSpinnerOffsetEnd;
    float mStartingScale;
    private android.view.View mTarget;
    private float mTotalDragDistance;
    private float mTotalUnconsumed;
    private int mTouchSlop;
    boolean mUsingCustomStart;

    static SwipeRefreshLayout()
    {
        android.support.v4.widget.SwipeRefreshLayout.LOG_TAG = android.support.v4.widget.SwipeRefreshLayout.getSimpleName();
        int[] v0_3 = new int[1];
        v0_3[0] = 16842766;
        android.support.v4.widget.SwipeRefreshLayout.LAYOUT_ATTRS = v0_3;
        return;
    }

    public SwipeRefreshLayout(android.content.Context p2)
    {
        this(p2, 0);
        return;
    }

    public SwipeRefreshLayout(android.content.Context p8, android.util.AttributeSet p9)
    {
        super(p8, p9);
        super.mRefreshing = 0;
        super.mTotalDragDistance = -1082130432;
        boolean v2_32 = new int[2];
        super.mParentScrollConsumed = v2_32;
        boolean v2_0 = new int[2];
        super.mParentOffsetInWindow = v2_0;
        super.mActivePointerId = -1;
        super.mCircleViewIndex = -1;
        super.mRefreshListener = new android.support.v4.widget.SwipeRefreshLayout$1(super);
        super.mAnimateToCorrectPosition = new android.support.v4.widget.SwipeRefreshLayout$6(super);
        super.mAnimateToStartPosition = new android.support.v4.widget.SwipeRefreshLayout$7(super);
        super.mTouchSlop = android.view.ViewConfiguration.get(p8).getScaledTouchSlop();
        super.mMediumAnimationDuration = super.getResources().getInteger(17694721);
        super.setWillNotDraw(0);
        super.mDecelerateInterpolator = new android.view.animation.DecelerateInterpolator(1073741824);
        android.util.DisplayMetrics v1 = super.getResources().getDisplayMetrics();
        super.mCircleDiameter = ((int) (1109393408 * v1.density));
        super.createProgressView();
        android.support.v4.view.ViewCompat.setChildrenDrawingOrderEnabled(super, 1);
        super.mSpinnerOffsetEnd = ((int) (1115684864 * v1.density));
        super.mTotalDragDistance = ((float) super.mSpinnerOffsetEnd);
        super.mNestedScrollingParentHelper = new android.support.v4.view.NestedScrollingParentHelper(super);
        super.mNestedScrollingChildHelper = new android.support.v4.view.NestedScrollingChildHelper(super);
        super.setNestedScrollingEnabled(1);
        boolean v2_28 = (- super.mCircleDiameter);
        super.mCurrentTargetOffsetTop = v2_28;
        super.mOriginalOffsetTop = v2_28;
        super.moveToStart(1065353216);
        android.content.res.TypedArray v0 = p8.obtainStyledAttributes(p9, android.support.v4.widget.SwipeRefreshLayout.LAYOUT_ATTRS);
        super.setEnabled(v0.getBoolean(0, 1));
        v0.recycle();
        return;
    }

    private void animateOffsetToCorrectPosition(int p5, android.view.animation.Animation$AnimationListener p6)
    {
        this.mFrom = p5;
        this.mAnimateToCorrectPosition.reset();
        this.mAnimateToCorrectPosition.setDuration(200);
        this.mAnimateToCorrectPosition.setInterpolator(this.mDecelerateInterpolator);
        if (p6 != null) {
            this.mCircleView.setAnimationListener(p6);
        }
        this.mCircleView.clearAnimation();
        this.mCircleView.startAnimation(this.mAnimateToCorrectPosition);
        return;
    }

    private void animateOffsetToStartPosition(int p5, android.view.animation.Animation$AnimationListener p6)
    {
        if (!this.mScale) {
            this.mFrom = p5;
            this.mAnimateToStartPosition.reset();
            this.mAnimateToStartPosition.setDuration(200);
            this.mAnimateToStartPosition.setInterpolator(this.mDecelerateInterpolator);
            if (p6 != null) {
                this.mCircleView.setAnimationListener(p6);
            }
            this.mCircleView.clearAnimation();
            this.mCircleView.startAnimation(this.mAnimateToStartPosition);
        } else {
            this.startScaleDownReturnToStartAnimation(p5, p6);
        }
        return;
    }

    private void createProgressView()
    {
        this.mCircleView = new android.support.v4.widget.CircleImageView(this.getContext(), -328966);
        this.mProgress = new android.support.v4.widget.MaterialProgressDrawable(this.getContext(), this);
        this.mProgress.setBackgroundColor(-328966);
        this.mCircleView.setImageDrawable(this.mProgress);
        this.mCircleView.setVisibility(8);
        this.addView(this.mCircleView);
        return;
    }

    private void ensureTarget()
    {
        if (this.mTarget == null) {
            int v1 = 0;
            while (v1 < this.getChildCount()) {
                android.view.View v0 = this.getChildAt(v1);
                if (v0.equals(this.mCircleView)) {
                    v1++;
                } else {
                    this.mTarget = v0;
                    break;
                }
            }
        }
        return;
    }

    private void finishSpinner(float p6)
    {
        if (p6 <= this.mTotalDragDistance) {
            this.mRefreshing = 0;
            this.mProgress.setStartEndTrim(0, 0);
            android.support.v4.widget.SwipeRefreshLayout$5 v0_1 = 0;
            if (!this.mScale) {
                v0_1 = new android.support.v4.widget.SwipeRefreshLayout$5(this);
            }
            this.animateOffsetToStartPosition(this.mCurrentTargetOffsetTop, v0_1);
            this.mProgress.showArrow(0);
        } else {
            this.setRefreshing(1, 1);
        }
        return;
    }

    private boolean isAlphaUsedForScale()
    {
        int v0_1;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    private boolean isAnimationRunning(android.view.animation.Animation p2)
    {
        if ((p2 == null) || ((!p2.hasStarted()) || (p2.hasEnded()))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private void moveSpinner(float p21)
    {
        float v8;
        this.mProgress.showArrow(1);
        float v3 = Math.min(1065353216, Math.abs((p21 / this.mTotalDragDistance)));
        float v2 = ((((float) Math.max((((double) v3) - 0.4), 0)) * 1084227584) / 1077936128);
        float v5 = (Math.abs(p21) - this.mTotalDragDistance);
        if (!this.mUsingCustomStart) {
            v8 = ((float) this.mSpinnerOffsetEnd);
        } else {
            v8 = ((float) (this.mSpinnerOffsetEnd - this.mOriginalOffsetTop));
        }
        float v12 = Math.max(0, (Math.min(v5, (1073741824 * v8)) / v8));
        float v11 = (((float) (((double) (v12 / 1082130432)) - Math.pow(((double) (v12 / 1082130432)), 2.0))) * 1073741824);
        int v10 = (this.mOriginalOffsetTop + ((int) ((v8 * v3) + ((v8 * v11) * 1073741824))));
        if (this.mCircleView.getVisibility() != 0) {
            this.mCircleView.setVisibility(0);
        }
        if (!this.mScale) {
            android.support.v4.view.ViewCompat.setScaleX(this.mCircleView, 1065353216);
            android.support.v4.view.ViewCompat.setScaleY(this.mCircleView, 1065353216);
        }
        if (this.mScale) {
            this.setAnimationProgress(Math.min(1065353216, (p21 / this.mTotalDragDistance)));
        }
        if (p21 >= this.mTotalDragDistance) {
            if ((this.mProgress.getAlpha() < 255) && (!this.isAnimationRunning(this.mAlphaMaxAnimation))) {
                this = this.startProgressAlphaMaxAnimation();
            }
        } else {
            if ((this.mProgress.getAlpha() > 76) && (!this.isAnimationRunning(this.mAlphaStartAnimation))) {
                this = this.startProgressAlphaStartAnimation();
            }
        }
        this.mProgress.setStartEndTrim(0, Math.min(1061997773, (v2 * 1061997773)));
        this.mProgress.setArrowScale(Math.min(1065353216, v2));
        this.mProgress.setProgressRotation((((-1098907648 + (1053609165 * v2)) + (1073741824 * v11)) * 1056964608));
        this.setTargetOffsetTopAndBottom((v10 - this.mCurrentTargetOffsetTop), 1);
        return;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent p5)
    {
        int v2 = android.support.v4.view.MotionEventCompat.getActionIndex(p5);
        if (p5.getPointerId(v2) == this.mActivePointerId) {
            int v0;
            if (v2 != 0) {
                v0 = 0;
            } else {
                v0 = 1;
            }
            this.mActivePointerId = p5.getPointerId(v0);
        }
        return;
    }

    private void setColorViewAlpha(int p2)
    {
        this.mCircleView.getBackground().setAlpha(p2);
        this.mProgress.setAlpha(p2);
        return;
    }

    private void setRefreshing(boolean p3, boolean p4)
    {
        if (this.mRefreshing != p3) {
            this.mNotify = p4;
            this.ensureTarget();
            this.mRefreshing = p3;
            if (!this.mRefreshing) {
                this.startScaleDownAnimation(this.mRefreshListener);
            } else {
                this.animateOffsetToCorrectPosition(this.mCurrentTargetOffsetTop, this.mRefreshListener);
            }
        }
        return;
    }

    private android.view.animation.Animation startAlphaAnimation(int p5, int p6)
    {
        if ((!this.mScale) || (!this.isAlphaUsedForScale())) {
            android.support.v4.widget.CircleImageView v0_0 = new android.support.v4.widget.SwipeRefreshLayout$4(this, p5, p6);
            v0_0.setDuration(300);
            this.mCircleView.setAnimationListener(0);
            this.mCircleView.clearAnimation();
            this.mCircleView.startAnimation(v0_0);
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    private void startDragging(float p4)
    {
        if (((p4 - this.mInitialDownY) > ((float) this.mTouchSlop)) && (!this.mIsBeingDragged)) {
            this.mInitialMotionY = (this.mInitialDownY + ((float) this.mTouchSlop));
            this.mIsBeingDragged = 1;
            this.mProgress.setAlpha(76);
        }
        return;
    }

    private void startProgressAlphaMaxAnimation()
    {
        this.mAlphaMaxAnimation = this.startAlphaAnimation(this.mProgress.getAlpha(), 255);
        return;
    }

    private void startProgressAlphaStartAnimation()
    {
        this.mAlphaStartAnimation = this.startAlphaAnimation(this.mProgress.getAlpha(), 76);
        return;
    }

    private void startScaleDownReturnToStartAnimation(int p5, android.view.animation.Animation$AnimationListener p6)
    {
        this.mFrom = p5;
        if (!this.isAlphaUsedForScale()) {
            this.mStartingScale = android.support.v4.view.ViewCompat.getScaleX(this.mCircleView);
        } else {
            this.mStartingScale = ((float) this.mProgress.getAlpha());
        }
        this.mScaleDownToStartAnimation = new android.support.v4.widget.SwipeRefreshLayout$8(this);
        this.mScaleDownToStartAnimation.setDuration(150);
        if (p6 != null) {
            this.mCircleView.setAnimationListener(p6);
        }
        this.mCircleView.clearAnimation();
        this.mCircleView.startAnimation(this.mScaleDownToStartAnimation);
        return;
    }

    private void startScaleUpAnimation(android.view.animation.Animation$AnimationListener p5)
    {
        this.mCircleView.setVisibility(0);
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            this.mProgress.setAlpha(255);
        }
        this.mScaleAnimation = new android.support.v4.widget.SwipeRefreshLayout$2(this);
        this.mScaleAnimation.setDuration(((long) this.mMediumAnimationDuration));
        if (p5 != null) {
            this.mCircleView.setAnimationListener(p5);
        }
        this.mCircleView.clearAnimation();
        this.mCircleView.startAnimation(this.mScaleAnimation);
        return;
    }

    public boolean canChildScrollUp()
    {
        android.view.View v1_0 = 1;
        android.view.View v2_0 = 0;
        if (this.mChildScrollUpCallback == null) {
            if (android.os.Build$VERSION.SDK_INT >= 14) {
                v1_0 = android.support.v4.view.ViewCompat.canScrollVertically(this.mTarget, -1);
            } else {
                if (!(this.mTarget instanceof android.widget.AbsListView)) {
                    if ((android.support.v4.view.ViewCompat.canScrollVertically(this.mTarget, -1)) || (this.mTarget.getScrollY() > 0)) {
                        v2_0 = 1;
                    }
                    v1_0 = v2_0;
                } else {
                    android.widget.AbsListView v0_1 = ((android.widget.AbsListView) this.mTarget);
                    if ((v0_1.getChildCount() <= 0) || ((v0_1.getFirstVisiblePosition() <= 0) && (v0_1.getChildAt(0).getTop() >= v0_1.getPaddingTop()))) {
                        v1_0 = 0;
                    }
                }
            }
        } else {
            v1_0 = this.mChildScrollUpCallback.canChildScrollUp(this, this.mTarget);
        }
        return v1_0;
    }

    public boolean dispatchNestedFling(float p2, float p3, boolean p4)
    {
        return this.mNestedScrollingChildHelper.dispatchNestedFling(p2, p3, p4);
    }

    public boolean dispatchNestedPreFling(float p2, float p3)
    {
        return this.mNestedScrollingChildHelper.dispatchNestedPreFling(p2, p3);
    }

    public boolean dispatchNestedPreScroll(int p2, int p3, int[] p4, int[] p5)
    {
        return this.mNestedScrollingChildHelper.dispatchNestedPreScroll(p2, p3, p4, p5);
    }

    public boolean dispatchNestedScroll(int p7, int p8, int p9, int p10, int[] p11)
    {
        return this.mNestedScrollingChildHelper.dispatchNestedScroll(p7, p8, p9, p10, p11);
    }

    protected int getChildDrawingOrder(int p2, int p3)
    {
        if (this.mCircleViewIndex >= 0) {
            if (p3 != (p2 - 1)) {
                if (p3 >= this.mCircleViewIndex) {
                    p3++;
                }
            } else {
                p3 = this.mCircleViewIndex;
            }
        }
        return p3;
    }

    public int getNestedScrollAxes()
    {
        return this.mNestedScrollingParentHelper.getNestedScrollAxes();
    }

    public int getProgressCircleDiameter()
    {
        return this.mCircleDiameter;
    }

    public int getProgressViewEndOffset()
    {
        return this.mSpinnerOffsetEnd;
    }

    public int getProgressViewStartOffset()
    {
        return this.mOriginalOffsetTop;
    }

    public boolean hasNestedScrollingParent()
    {
        return this.mNestedScrollingChildHelper.hasNestedScrollingParent();
    }

    public boolean isNestedScrollingEnabled()
    {
        return this.mNestedScrollingChildHelper.isNestedScrollingEnabled();
    }

    public boolean isRefreshing()
    {
        return this.mRefreshing;
    }

    void moveToStart(float p6)
    {
        this.setTargetOffsetTopAndBottom(((this.mFrom + ((int) (((float) (this.mOriginalOffsetTop - this.mFrom)) * p6))) - this.mCircleView.getTop()), 0);
        return;
    }

    protected void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.reset();
        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent p7)
    {
        float v3_0 = 0;
        this.ensureTarget();
        int v0 = android.support.v4.view.MotionEventCompat.getActionMasked(p7);
        if ((this.mReturningToStart) && (v0 == 0)) {
            this.mReturningToStart = 0;
        }
        if ((this.isEnabled()) && ((!this.mReturningToStart) && ((!this.canChildScrollUp()) && ((!this.mRefreshing) && (!this.mNestedScrollInProgress))))) {
            switch (v0) {
                case 0:
                    this.setTargetOffsetTopAndBottom((this.mOriginalOffsetTop - this.mCircleView.getTop()), 1);
                    this.mActivePointerId = p7.getPointerId(0);
                    this.mIsBeingDragged = 0;
                    int v1_1 = p7.findPointerIndex(this.mActivePointerId);
                    if (v1_1 >= 0) {
                        this.mInitialDownY = p7.getY(v1_1);
                    }
                    break;
                case 1:
                case 3:
                    this.mIsBeingDragged = 0;
                    this.mActivePointerId = -1;
                    break;
                case 2:
                    if (this.mActivePointerId != -1) {
                        int v1_0 = p7.findPointerIndex(this.mActivePointerId);
                        if (v1_0 >= 0) {
                            this.startDragging(p7.getY(v1_0));
                        }
                    } else {
                        android.util.Log.e(android.support.v4.widget.SwipeRefreshLayout.LOG_TAG, "Got ACTION_MOVE event but don\'t have an active pointer id.");
                    }
                    break;
                case 4:
                case 5:
                default:
                    break;
                case 4:
                case 5:
                    break;
                case 6:
                    this.onSecondaryPointerUp(p7);
                    break;
            }
            v3_0 = this.mIsBeingDragged;
        }
        return v3_0;
    }

    protected void onLayout(boolean p15, int p16, int p17, int p18, int p19)
    {
        int v8 = this.getMeasuredWidth();
        int v7 = this.getMeasuredHeight();
        if (this.getChildCount() != 0) {
            if (this.mTarget == null) {
                this.ensureTarget();
            }
            if (this.mTarget != null) {
                android.view.View v0 = this.mTarget;
                int v2 = this.getPaddingLeft();
                int v3 = this.getPaddingTop();
                v0.layout(v2, v3, (v2 + ((v8 - this.getPaddingLeft()) - this.getPaddingRight())), (v3 + ((v7 - this.getPaddingTop()) - this.getPaddingBottom())));
                int v6 = this.mCircleView.getMeasuredWidth();
                this.mCircleView.layout(((v8 / 2) - (v6 / 2)), this.mCurrentTargetOffsetTop, ((v8 / 2) + (v6 / 2)), (this.mCurrentTargetOffsetTop + this.mCircleView.getMeasuredHeight()));
            }
        }
        return;
    }

    public void onMeasure(int p7, int p8)
    {
        super.onMeasure(p7, p8);
        if (this.mTarget == null) {
            this.ensureTarget();
        }
        if (this.mTarget != null) {
            this.mTarget.measure(android.view.View$MeasureSpec.makeMeasureSpec(((this.getMeasuredWidth() - this.getPaddingLeft()) - this.getPaddingRight()), 1073741824), android.view.View$MeasureSpec.makeMeasureSpec(((this.getMeasuredHeight() - this.getPaddingTop()) - this.getPaddingBottom()), 1073741824));
            this.mCircleView.measure(android.view.View$MeasureSpec.makeMeasureSpec(this.mCircleDiameter, 1073741824), android.view.View$MeasureSpec.makeMeasureSpec(this.mCircleDiameter, 1073741824));
            this.mCircleViewIndex = -1;
            int v0 = 0;
            while (v0 < this.getChildCount()) {
                if (this.getChildAt(v0) != this.mCircleView) {
                    v0++;
                } else {
                    this.mCircleViewIndex = v0;
                    break;
                }
            }
        }
        return;
    }

    public boolean onNestedFling(android.view.View p2, float p3, float p4, boolean p5)
    {
        return this.dispatchNestedFling(p3, p4, p5);
    }

    public boolean onNestedPreFling(android.view.View p2, float p3, float p4)
    {
        return this.dispatchNestedPreFling(p3, p4);
    }

    public void onNestedPreScroll(android.view.View p7, int p8, int p9, int[] p10)
    {
        int v4 = 1;
        if ((p9 > 0) && (this.mTotalUnconsumed > 0)) {
            if (((float) p9) <= this.mTotalUnconsumed) {
                this.mTotalUnconsumed = (this.mTotalUnconsumed - ((float) p9));
                p10[1] = p9;
            } else {
                p10[1] = (p9 - ((int) this.mTotalUnconsumed));
                this.mTotalUnconsumed = 0;
            }
            this.moveSpinner(this.mTotalUnconsumed);
        }
        if ((this.mUsingCustomStart) && ((p9 > 0) && ((this.mTotalUnconsumed == 0) && (Math.abs((p9 - p10[1])) > 0)))) {
            this.mCircleView.setVisibility(8);
        }
        int[] v0 = this.mParentScrollConsumed;
        if (this.dispatchNestedPreScroll((p8 - p10[0]), (p9 - p10[1]), v0, 0)) {
            p10[0] = (p10[0] + v0[0]);
            p10[v4] = (p10[v4] + v0[1]);
        }
        return;
    }

    public void onNestedScroll(android.view.View p8, int p9, int p10, int p11, int p12)
    {
        this.dispatchNestedScroll(p9, p10, p11, p12, this.mParentOffsetInWindow);
        int v6 = (p12 + this.mParentOffsetInWindow[1]);
        if ((v6 < 0) && (!this.canChildScrollUp())) {
            this.mTotalUnconsumed = (this.mTotalUnconsumed + ((float) Math.abs(v6)));
            this.moveSpinner(this.mTotalUnconsumed);
        }
        return;
    }

    public void onNestedScrollAccepted(android.view.View p2, android.view.View p3, int p4)
    {
        this.mNestedScrollingParentHelper.onNestedScrollAccepted(p2, p3, p4);
        this.startNestedScroll((p4 & 2));
        this.mTotalUnconsumed = 0;
        this.mNestedScrollInProgress = 1;
        return;
    }

    public boolean onStartNestedScroll(android.view.View p2, android.view.View p3, int p4)
    {
        if ((!this.isEnabled()) || ((this.mReturningToStart) || ((this.mRefreshing) || ((p4 & 2) == 0)))) {
            int v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onStopNestedScroll(android.view.View p3)
    {
        this.mNestedScrollingParentHelper.onStopNestedScroll(p3);
        this.mNestedScrollInProgress = 0;
        if (this.mTotalUnconsumed > 0) {
            this.finishSpinner(this.mTotalUnconsumed);
            this.mTotalUnconsumed = 0;
        }
        this.stopNestedScroll();
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p8)
    {
        int v4_0 = 0;
        int v0 = android.support.v4.view.MotionEventCompat.getActionMasked(p8);
        if ((this.mReturningToStart) && (v0 == 0)) {
            this.mReturningToStart = 0;
        }
        if ((this.isEnabled()) && ((!this.mReturningToStart) && ((!this.canChildScrollUp()) && ((!this.mRefreshing) && (!this.mNestedScrollInProgress))))) {
            switch (v0) {
                case 0:
                    this.mActivePointerId = p8.getPointerId(0);
                    this.mIsBeingDragged = 0;
                    v4_0 = 1;
                    break;
                case 1:
                    int v2_2 = p8.findPointerIndex(this.mActivePointerId);
                    if (v2_2 >= 0) {
                        if (this.mIsBeingDragged) {
                            float v1_1 = ((p8.getY(v2_2) - this.mInitialMotionY) * 1056964608);
                            this.mIsBeingDragged = 0;
                            this.finishSpinner(v1_1);
                        }
                        this.mActivePointerId = -1;
                    } else {
                        android.util.Log.e(android.support.v4.widget.SwipeRefreshLayout.LOG_TAG, "Got ACTION_UP event but don\'t have an active pointer id.");
                    }
                    break;
                case 2:
                    int v2_1 = p8.findPointerIndex(this.mActivePointerId);
                    if (v2_1 >= 0) {
                        float v3_0 = p8.getY(v2_1);
                        this.startDragging(v3_0);
                        if (!this.mIsBeingDragged) {
                        } else {
                            float v1_0 = ((v3_0 - this.mInitialMotionY) * 1056964608);
                            if (v1_0 > 0) {
                                this.moveSpinner(v1_0);
                            }
                        }
                    } else {
                        android.util.Log.e(android.support.v4.widget.SwipeRefreshLayout.LOG_TAG, "Got ACTION_MOVE event but have an invalid active pointer id.");
                    }
                case 3:
                    break;
                case 5:
                    int v2_0 = android.support.v4.view.MotionEventCompat.getActionIndex(p8);
                    if (v2_0 >= 0) {
                        this.mActivePointerId = p8.getPointerId(v2_0);
                    } else {
                        android.util.Log.e(android.support.v4.widget.SwipeRefreshLayout.LOG_TAG, "Got ACTION_POINTER_DOWN event but have an invalid action index.");
                    }
                    break;
                case 6:
                    this.onSecondaryPointerUp(p8);
                    break;
                default:
            }
        }
        return v4_0;
    }

    public void requestDisallowInterceptTouchEvent(boolean p3)
    {
        if (((android.os.Build$VERSION.SDK_INT >= 21) || (!(this.mTarget instanceof android.widget.AbsListView))) && ((this.mTarget == null) || (android.support.v4.view.ViewCompat.isNestedScrollingEnabled(this.mTarget)))) {
            super.requestDisallowInterceptTouchEvent(p3);
        }
        return;
    }

    void reset()
    {
        this.mCircleView.clearAnimation();
        this.mProgress.stop();
        this.mCircleView.setVisibility(8);
        this.setColorViewAlpha(255);
        if (!this.mScale) {
            this.setTargetOffsetTopAndBottom((this.mOriginalOffsetTop - this.mCurrentTargetOffsetTop), 1);
        } else {
            this.setAnimationProgress(0);
        }
        this.mCurrentTargetOffsetTop = this.mCircleView.getTop();
        return;
    }

    void setAnimationProgress(float p2)
    {
        if (!this.isAlphaUsedForScale()) {
            android.support.v4.view.ViewCompat.setScaleX(this.mCircleView, p2);
            android.support.v4.view.ViewCompat.setScaleY(this.mCircleView, p2);
        } else {
            this.setColorViewAlpha(((int) (1132396544 * p2)));
        }
        return;
    }

    public varargs void setColorScheme(int[] p1)
    {
        this.setColorSchemeResources(p1);
        return;
    }

    public varargs void setColorSchemeColors(int[] p2)
    {
        this.ensureTarget();
        this.mProgress.setColorSchemeColors(p2);
        return;
    }

    public varargs void setColorSchemeResources(int[] p5)
    {
        android.content.Context v1 = this.getContext();
        int[] v0 = new int[p5.length];
        int v2 = 0;
        while (v2 < p5.length) {
            v0[v2] = android.support.v4.content.ContextCompat.getColor(v1, p5[v2]);
            v2++;
        }
        this.setColorSchemeColors(v0);
        return;
    }

    public void setDistanceToTriggerSync(int p2)
    {
        this.mTotalDragDistance = ((float) p2);
        return;
    }

    public void setEnabled(boolean p1)
    {
        super.setEnabled(p1);
        if (!p1) {
            this.reset();
        }
        return;
    }

    public void setNestedScrollingEnabled(boolean p2)
    {
        this.mNestedScrollingChildHelper.setNestedScrollingEnabled(p2);
        return;
    }

    public void setOnChildScrollUpCallback(android.support.v4.widget.SwipeRefreshLayout$OnChildScrollUpCallback p1)
    {
        this.mChildScrollUpCallback = p1;
        return;
    }

    public void setOnRefreshListener(android.support.v4.widget.SwipeRefreshLayout$OnRefreshListener p1)
    {
        this.mListener = p1;
        return;
    }

    public void setProgressBackgroundColor(int p1)
    {
        this.setProgressBackgroundColorSchemeResource(p1);
        return;
    }

    public void setProgressBackgroundColorSchemeColor(int p2)
    {
        this.mCircleView.setBackgroundColor(p2);
        this.mProgress.setBackgroundColor(p2);
        return;
    }

    public void setProgressBackgroundColorSchemeResource(int p2)
    {
        this.setProgressBackgroundColorSchemeColor(android.support.v4.content.ContextCompat.getColor(this.getContext(), p2));
        return;
    }

    public void setProgressViewEndTarget(boolean p2, int p3)
    {
        this.mSpinnerOffsetEnd = p3;
        this.mScale = p2;
        this.mCircleView.invalidate();
        return;
    }

    public void setProgressViewOffset(boolean p2, int p3, int p4)
    {
        this.mScale = p2;
        this.mOriginalOffsetTop = p3;
        this.mSpinnerOffsetEnd = p4;
        this.mUsingCustomStart = 1;
        this.reset();
        this.mRefreshing = 0;
        return;
    }

    public void setRefreshing(boolean p5)
    {
        if ((!p5) || (this.mRefreshing == p5)) {
            this.setRefreshing(p5, 0);
        } else {
            int v0;
            this.mRefreshing = p5;
            if (this.mUsingCustomStart) {
                v0 = this.mSpinnerOffsetEnd;
            } else {
                v0 = (this.mSpinnerOffsetEnd + this.mOriginalOffsetTop);
            }
            this.setTargetOffsetTopAndBottom((v0 - this.mCurrentTargetOffsetTop), 1);
            this.mNotify = 0;
            this.startScaleUpAnimation(this.mRefreshListener);
        }
        return;
    }

    public void setSize(int p4)
    {
        if ((p4 == 0) || (p4 == 1)) {
            android.util.DisplayMetrics v0 = this.getResources().getDisplayMetrics();
            if (p4 != 0) {
                this.mCircleDiameter = ((int) (1109393408 * v0.density));
            } else {
                this.mCircleDiameter = ((int) (1113587712 * v0.density));
            }
            this.mCircleView.setImageDrawable(0);
            this.mProgress.updateSizes(p4);
            this.mCircleView.setImageDrawable(this.mProgress);
        }
        return;
    }

    void setTargetOffsetTopAndBottom(int p3, boolean p4)
    {
        this.mCircleView.bringToFront();
        android.support.v4.view.ViewCompat.offsetTopAndBottom(this.mCircleView, p3);
        this.mCurrentTargetOffsetTop = this.mCircleView.getTop();
        if ((p4) && (android.os.Build$VERSION.SDK_INT < 11)) {
            this.invalidate();
        }
        return;
    }

    public boolean startNestedScroll(int p2)
    {
        return this.mNestedScrollingChildHelper.startNestedScroll(p2);
    }

    void startScaleDownAnimation(android.view.animation.Animation$AnimationListener p5)
    {
        this.mScaleDownAnimation = new android.support.v4.widget.SwipeRefreshLayout$3(this);
        this.mScaleDownAnimation.setDuration(150);
        this.mCircleView.setAnimationListener(p5);
        this.mCircleView.clearAnimation();
        this.mCircleView.startAnimation(this.mScaleDownAnimation);
        return;
    }

    public void stopNestedScroll()
    {
        this.mNestedScrollingChildHelper.stopNestedScroll();
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompat$BaseTextViewCompatImpl implements android.support.v4.widget.TextViewCompat$TextViewCompatImpl {

    TextViewCompat$BaseTextViewCompatImpl()
    {
        return;
    }

    public android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatGingerbread.getCompoundDrawablesRelative(p2);
    }

    public int getMaxLines(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatGingerbread.getMaxLines(p2);
    }

    public int getMinLines(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatGingerbread.getMinLines(p2);
    }

    public void setCompoundDrawablesRelative(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        p1.setCompoundDrawables(p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, int p2, int p3, int p4, int p5)
    {
        p1.setCompoundDrawablesWithIntrinsicBounds(p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        p1.setCompoundDrawablesWithIntrinsicBounds(p2, p3, p4, p5);
        return;
    }

    public void setTextAppearance(android.widget.TextView p1, int p2)
    {
        android.support.v4.widget.TextViewCompatGingerbread.setTextAppearance(p1, p2);
        return;
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl extends android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl {

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl()
    {
        return;
    }

    public boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getCanRetrieveWindowContent(p2);
    }

    public int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        int v0_1;
        if (!this.getCanRetrieveWindowContent(p2)) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public String getDescription(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getDescription(p2);
    }

    public String getId(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getId(p2);
    }

    public android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getResolveInfo(p2);
    }

    public String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs.getSettingsActivityName(p2);
    }
}
package android.support.v4.app;
 class ActivityCompat$SharedElementCallback23Impl extends android.support.v4.app.ActivityCompatApi23$SharedElementCallback23 {
    private android.support.v4.app.SharedElementCallback mCallback;

    public ActivityCompat$SharedElementCallback23Impl(android.support.v4.app.SharedElementCallback p1)
    {
        this.mCallback = p1;
        return;
    }

    public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View p2, android.graphics.Matrix p3, android.graphics.RectF p4)
    {
        return this.mCallback.onCaptureSharedElementSnapshot(p2, p3, p4);
    }

    public android.view.View onCreateSnapshotView(android.content.Context p2, android.os.Parcelable p3)
    {
        return this.mCallback.onCreateSnapshotView(p2, p3);
    }

    public void onMapSharedElements(java.util.List p2, java.util.Map p3)
    {
        this.mCallback.onMapSharedElements(p2, p3);
        return;
    }

    public void onRejectSharedElements(java.util.List p2)
    {
        this.mCallback.onRejectSharedElements(p2);
        return;
    }

    public void onSharedElementEnd(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementEnd(p2, p3, p4);
        return;
    }

    public void onSharedElementStart(java.util.List p2, java.util.List p3, java.util.List p4)
    {
        this.mCallback.onSharedElementStart(p2, p3, p4);
        return;
    }

    public void onSharedElementsArrived(java.util.List p3, java.util.List p4, android.support.v4.app.ActivityCompatApi23$OnSharedElementsReadyListenerBridge p5)
    {
        this.mCallback.onSharedElementsArrived(p3, p4, new android.support.v4.app.ActivityCompat$SharedElementCallback23Impl$1(this, p5));
        return;
    }
}
package android.support.v4.app;
abstract class BaseFragmentActivityJB extends android.support.v4.app.BaseFragmentActivityHoneycomb {
    boolean mStartedActivityFromFragment;

    BaseFragmentActivityJB()
    {
        return;
    }

    public void startActivityForResult(android.content.Intent p2, int p3, android.os.Bundle p4)
    {
        if ((!this.mStartedActivityFromFragment) && (p3 != -1)) {
            android.support.v4.app.BaseFragmentActivityJB.checkForValidRequestCode(p3);
        }
        super.startActivityForResult(p2, p3, p4);
        return;
    }

    public void startIntentSenderForResult(android.content.IntentSender p2, int p3, android.content.Intent p4, int p5, int p6, int p7, android.os.Bundle p8)
    {
        if ((!this.mStartedIntentSenderFromFragment) && (p3 != -1)) {
            android.support.v4.app.BaseFragmentActivityJB.checkForValidRequestCode(p3);
        }
        super.startIntentSenderForResult(p2, p3, p4, p5, p6, p7, p8);
        return;
    }
}
package android.support.v4.app;
 class FragmentActivity$HostCallbacks extends android.support.v4.app.FragmentHostCallback {
    final synthetic android.support.v4.app.FragmentActivity this$0;

    public FragmentActivity$HostCallbacks(android.support.v4.app.FragmentActivity p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void onAttachFragment(android.support.v4.app.Fragment p2)
    {
        this.this$0.onAttachFragment(p2);
        return;
    }

    public void onDump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        this.this$0.dump(p2, p3, p4, p5);
        return;
    }

    public android.view.View onFindViewById(int p2)
    {
        return this.this$0.findViewById(p2);
    }

    public android.support.v4.app.FragmentActivity onGetHost()
    {
        return this.this$0;
    }

    public bridge synthetic Object onGetHost()
    {
        return this.onGetHost();
    }

    public android.view.LayoutInflater onGetLayoutInflater()
    {
        return this.this$0.getLayoutInflater().cloneInContext(this.this$0);
    }

    public int onGetWindowAnimations()
    {
        int v1_2;
        android.view.Window v0 = this.this$0.getWindow();
        if (v0 != null) {
            v1_2 = v0.getAttributes().windowAnimations;
        } else {
            v1_2 = 0;
        }
        return v1_2;
    }

    public boolean onHasView()
    {
        int v1_2;
        android.view.Window v0 = this.this$0.getWindow();
        if ((v0 == null) || (v0.peekDecorView() == null)) {
            v1_2 = 0;
        } else {
            v1_2 = 1;
        }
        return v1_2;
    }

    public boolean onHasWindowAnimations()
    {
        int v0_2;
        if (this.this$0.getWindow() == null) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public void onRequestPermissionsFromFragment(android.support.v4.app.Fragment p2, String[] p3, int p4)
    {
        this.this$0.requestPermissionsFromFragment(p2, p3, p4);
        return;
    }

    public boolean onShouldSaveFragmentState(android.support.v4.app.Fragment p2)
    {
        int v0_2;
        if (this.this$0.isFinishing()) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean onShouldShowRequestPermissionRationale(String p2)
    {
        return android.support.v4.app.ActivityCompat.shouldShowRequestPermissionRationale(this.this$0, p2);
    }

    public void onStartActivityFromFragment(android.support.v4.app.Fragment p2, android.content.Intent p3, int p4)
    {
        this.this$0.startActivityFromFragment(p2, p3, p4);
        return;
    }

    public void onStartActivityFromFragment(android.support.v4.app.Fragment p2, android.content.Intent p3, int p4, android.os.Bundle p5)
    {
        this.this$0.startActivityFromFragment(p2, p3, p4, p5);
        return;
    }

    public void onStartIntentSenderFromFragment(android.support.v4.app.Fragment p10, android.content.IntentSender p11, int p12, android.content.Intent p13, int p14, int p15, int p16, android.os.Bundle p17)
    {
        this.this$0.startIntentSenderFromFragment(p10, p11, p12, p13, p14, p15, p16, p17);
        return;
    }

    public void onSupportInvalidateOptionsMenu()
    {
        this.this$0.supportInvalidateOptionsMenu();
        return;
    }
}
package android.support.v4.app;
 class NavUtils$NavUtilsImplJB extends android.support.v4.app.NavUtils$NavUtilsImplBase {

    NavUtils$NavUtilsImplJB()
    {
        return;
    }

    public android.content.Intent getParentActivityIntent(android.app.Activity p2)
    {
        android.content.Intent v0 = android.support.v4.app.NavUtilsJB.getParentActivityIntent(p2);
        if (v0 == null) {
            v0 = this.superGetParentActivityIntent(p2);
        }
        return v0;
    }

    public String getParentActivityName(android.content.Context p2, android.content.pm.ActivityInfo p3)
    {
        String v0 = android.support.v4.app.NavUtilsJB.getParentActivityName(p3);
        if (v0 == null) {
            v0 = super.getParentActivityName(p2, p3);
        }
        return v0;
    }

    public void navigateUpTo(android.app.Activity p1, android.content.Intent p2)
    {
        android.support.v4.app.NavUtilsJB.navigateUpTo(p1, p2);
        return;
    }

    public boolean shouldUpRecreateTask(android.app.Activity p2, android.content.Intent p3)
    {
        return android.support.v4.app.NavUtilsJB.shouldUpRecreateTask(p2, p3);
    }

    android.content.Intent superGetParentActivityIntent(android.app.Activity p2)
    {
        return super.getParentActivityIntent(p2);
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplHoneycomb extends android.support.v4.app.NotificationCompat$NotificationCompatImplBase {

    NotificationCompat$NotificationCompatImplHoneycomb()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p12, android.support.v4.app.NotificationCompat$BuilderExtender p13)
    {
        android.app.Notification v10 = android.support.v4.app.NotificationCompatHoneycomb.add(p12.mContext, p12.mNotification, p12.resolveTitle(), p12.resolveText(), p12.mContentInfo, p12.mTickerView, p12.mNumber, p12.mContentIntent, p12.mFullScreenIntent, p12.mLargeIcon);
        if (p12.mContentView != null) {
            v10.contentView = p12.mContentView;
        }
        return v10;
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplIceCreamSandwich extends android.support.v4.app.NotificationCompat$NotificationCompatImplBase {

    NotificationCompat$NotificationCompatImplIceCreamSandwich()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p17, android.support.v4.app.NotificationCompat$BuilderExtender p18)
    {
        return p18.build(p17, new android.support.v4.app.NotificationCompatIceCreamSandwich$Builder(p17.mContext, p17.mNotification, p17.resolveTitle(), p17.resolveText(), p17.mContentInfo, p17.mTickerView, p17.mNumber, p17.mContentIntent, p17.mFullScreenIntent, p17.mLargeIcon, p17.mProgressMax, p17.mProgress, p17.mProgressIndeterminate));
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplJellybean extends android.support.v4.app.NotificationCompat$NotificationCompatImplBase {

    NotificationCompat$NotificationCompatImplJellybean()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p29, android.support.v4.app.NotificationCompat$BuilderExtender p30)
    {
        android.support.v4.app.NotificationCompatJellybean$Builder v2_1 = new android.support.v4.app.NotificationCompatJellybean$Builder(p29.mContext, p29.mNotification, p29.resolveTitle(), p29.resolveText(), p29.mContentInfo, p29.mTickerView, p29.mNumber, p29.mContentIntent, p29.mFullScreenIntent, p29.mLargeIcon, p29.mProgressMax, p29.mProgress, p29.mProgressIndeterminate, p29.mUseChronometer, p29.mPriority, p29.mSubText, p29.mLocalOnly, p29.mExtras, p29.mGroupKey, p29.mGroupSummary, p29.mSortKey, p29.mContentView, p29.mBigContentView);
        android.support.v4.app.NotificationCompat.addActionsToBuilder(v2_1, p29.mActions);
        android.support.v4.app.NotificationCompat.addStyleToBuilderJellybean(v2_1, p29.mStyle);
        android.app.Notification v27 = p30.build(p29, v2_1);
        if (p29.mStyle != null) {
            android.os.Bundle v26 = this.getExtras(v27);
            if (v26 != null) {
                p29.mStyle.addCompatExtras(v26);
            }
        }
        return v27;
    }

    public android.support.v4.app.NotificationCompat$Action getAction(android.app.Notification p3, int p4)
    {
        return ((android.support.v4.app.NotificationCompat$Action) android.support.v4.app.NotificationCompatJellybean.getAction(p3, p4, android.support.v4.app.NotificationCompat$Action.FACTORY, android.support.v4.app.RemoteInput.FACTORY));
    }

    public int getActionCount(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getActionCount(p2);
    }

    public android.support.v4.app.NotificationCompat$Action[] getActionsFromParcelableArrayList(java.util.ArrayList p3)
    {
        return ((android.support.v4.app.NotificationCompat$Action[]) ((android.support.v4.app.NotificationCompat$Action[]) android.support.v4.app.NotificationCompatJellybean.getActionsFromParcelableArrayList(p3, android.support.v4.app.NotificationCompat$Action.FACTORY, android.support.v4.app.RemoteInput.FACTORY)));
    }

    public android.os.Bundle getExtras(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getExtras(p2);
    }

    public String getGroup(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getGroup(p2);
    }

    public boolean getLocalOnly(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getLocalOnly(p2);
    }

    public java.util.ArrayList getParcelableArrayListForActions(android.support.v4.app.NotificationCompat$Action[] p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getParcelableArrayListForActions(p2);
    }

    public String getSortKey(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.getSortKey(p2);
    }

    public boolean isGroupSummary(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatJellybean.isGroupSummary(p2);
    }
}
package android.support.v4.app;
 class NotificationCompatSideChannelService$NotificationSideChannelStub extends android.support.v4.app.INotificationSideChannel$Stub {
    final synthetic android.support.v4.app.NotificationCompatSideChannelService this$0;

    NotificationCompatSideChannelService$NotificationSideChannelStub(android.support.v4.app.NotificationCompatSideChannelService p1)
    {
        this.this$0 = p1;
        return;
    }

    public void cancel(String p5, int p6, String p7)
    {
        this.this$0.checkPermission(android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.getCallingUid(), p5);
        long v0 = android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.clearCallingIdentity();
        try {
            this.this$0.cancel(p5, p6, p7);
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            return;
        } catch (Throwable v2_1) {
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            throw v2_1;
        }
    }

    public void cancelAll(String p5)
    {
        this.this$0.checkPermission(android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.getCallingUid(), p5);
        long v0 = android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.clearCallingIdentity();
        try {
            this.this$0.cancelAll(p5);
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            return;
        } catch (Throwable v2_1) {
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            throw v2_1;
        }
    }

    public void notify(String p5, int p6, String p7, android.app.Notification p8)
    {
        this.this$0.checkPermission(android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.getCallingUid(), p5);
        long v0 = android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.clearCallingIdentity();
        try {
            this.this$0.notify(p5, p6, p7, p8);
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            return;
        } catch (Throwable v2_1) {
            android.support.v4.app.NotificationCompatSideChannelService$NotificationSideChannelStub.restoreCallingIdentity(v0);
            throw v2_1;
        }
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$ImplIceCreamSandwich extends android.support.v4.app.NotificationManagerCompat$ImplBase {

    NotificationManagerCompat$ImplIceCreamSandwich()
    {
        return;
    }

    public int getSideChannelBindFlags()
    {
        return 33;
    }
}
package android.support.v4.app;
 class ShareCompat$ShareCompatImplICS extends android.support.v4.app.ShareCompat$ShareCompatImplBase {

    ShareCompat$ShareCompatImplICS()
    {
        return;
    }

    public void configureMenuItem(android.view.MenuItem p3, android.support.v4.app.ShareCompat$IntentBuilder p4)
    {
        android.support.v4.app.ShareCompatICS.configureMenuItem(p3, p4.getActivity(), p4.getIntent());
        if (this.shouldAddChooserIntent(p3)) {
            p3.setIntent(p4.createChooserIntent());
        }
        return;
    }

    boolean shouldAddChooserIntent(android.view.MenuItem p2)
    {
        int v0_1;
        if (p2.hasSubMenu()) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }
}
package android.support.v4.content;
 class ContentResolverCompat$ContentResolverCompatImplJB extends android.support.v4.content.ContentResolverCompat$ContentResolverCompatImplBase {

    ContentResolverCompat$ContentResolverCompatImplJB()
    {
        return;
    }

    public android.database.Cursor query(android.content.ContentResolver p9, android.net.Uri p10, String[] p11, String p12, String[] p13, String p14, android.support.v4.os.CancellationSignal p15)
    {
        int v6;
        if (p15 == null) {
            v6 = 0;
        } else {
            try {
                v6 = p15.getCancellationSignalObject();
            } catch (Exception v7) {
                if (!android.support.v4.content.ContentResolverCompatJellybean.isFrameworkOperationCanceledException(v7)) {
                    throw v7;
                } else {
                    throw new android.support.v4.os.OperationCanceledException();
                }
            }
        }
        return android.support.v4.content.ContentResolverCompatJellybean.query(p9, p10, p11, p12, p13, p14, v6);
    }
}
package android.support.v4.content;
public class CursorLoader extends android.support.v4.content.AsyncTaskLoader {
    android.support.v4.os.CancellationSignal mCancellationSignal;
    android.database.Cursor mCursor;
    final android.support.v4.content.Loader$ForceLoadContentObserver mObserver;
    String[] mProjection;
    String mSelection;
    String[] mSelectionArgs;
    String mSortOrder;
    android.net.Uri mUri;

    public CursorLoader(android.content.Context p2)
    {
        super(p2);
        super.mObserver = new android.support.v4.content.Loader$ForceLoadContentObserver(super);
        return;
    }

    public CursorLoader(android.content.Context p2, android.net.Uri p3, String[] p4, String p5, String[] p6, String p7)
    {
        super(p2);
        super.mObserver = new android.support.v4.content.Loader$ForceLoadContentObserver(super);
        super.mUri = p3;
        super.mProjection = p4;
        super.mSelection = p5;
        super.mSelectionArgs = p6;
        super.mSortOrder = p7;
        return;
    }

    public void cancelLoadInBackground()
    {
        super.cancelLoadInBackground();
        try {
            if (this.mCancellationSignal != null) {
                this.mCancellationSignal.cancel();
            }
        } catch (android.support.v4.os.CancellationSignal v0_2) {
            throw v0_2;
        }
        return;
    }

    public void deliverResult(android.database.Cursor p3)
    {
        if (!this.isReset()) {
            android.database.Cursor v0 = this.mCursor;
            this.mCursor = p3;
            if (this.isStarted()) {
                super.deliverResult(p3);
            }
            if ((v0 != null) && ((v0 != p3) && (!v0.isClosed()))) {
                v0.close();
            }
        } else {
            if (p3 != null) {
                p3.close();
            }
        }
        return;
    }

    public bridge synthetic void deliverResult(Object p1)
    {
        this.deliverResult(((android.database.Cursor) p1));
        return;
    }

    public void dump(String p2, java.io.FileDescriptor p3, java.io.PrintWriter p4, String[] p5)
    {
        super.dump(p2, p3, p4, p5);
        p4.print(p2);
        p4.print("mUri=");
        p4.println(this.mUri);
        p4.print(p2);
        p4.print("mProjection=");
        p4.println(java.util.Arrays.toString(this.mProjection));
        p4.print(p2);
        p4.print("mSelection=");
        p4.println(this.mSelection);
        p4.print(p2);
        p4.print("mSelectionArgs=");
        p4.println(java.util.Arrays.toString(this.mSelectionArgs));
        p4.print(p2);
        p4.print("mSortOrder=");
        p4.println(this.mSortOrder);
        p4.print(p2);
        p4.print("mCursor=");
        p4.println(this.mCursor);
        p4.print(p2);
        p4.print("mContentChanged=");
        p4.println(this.mContentChanged);
        return;
    }

    public String[] getProjection()
    {
        return this.mProjection;
    }

    public String getSelection()
    {
        return this.mSelection;
    }

    public String[] getSelectionArgs()
    {
        return this.mSelectionArgs;
    }

    public String getSortOrder()
    {
        return this.mSortOrder;
    }

    public android.net.Uri getUri()
    {
        return this.mUri;
    }

    public android.database.Cursor loadInBackground()
    {
        try {
            if (!this.isLoadInBackgroundCanceled()) {
                this.mCancellationSignal = new android.support.v4.os.CancellationSignal();
                try {
                    android.database.Cursor v7 = android.support.v4.content.ContentResolverCompat.query(this.getContext().getContentResolver(), this.mUri, this.mProjection, this.mSelection, this.mSelectionArgs, this.mSortOrder, this.mCancellationSignal);
                } catch (Throwable v0_2) {
                    this.mCancellationSignal = 0;
                    throw v0_2;
                }
                if (v7 != null) {
                    try {
                        v7.getCount();
                        v7.registerContentObserver(this.mObserver);
                    } catch (RuntimeException v8) {
                        v7.close();
                        throw v8;
                    }
                }
                this.mCancellationSignal = 0;
                return v7;
            } else {
                throw new android.support.v4.os.OperationCanceledException();
            }
        } catch (Throwable v0_9) {
            throw v0_9;
        }
    }

    public bridge synthetic Object loadInBackground()
    {
        return this.loadInBackground();
    }

    public void onCanceled(android.database.Cursor p2)
    {
        if ((p2 != null) && (!p2.isClosed())) {
            p2.close();
        }
        return;
    }

    public bridge synthetic void onCanceled(Object p1)
    {
        this.onCanceled(((android.database.Cursor) p1));
        return;
    }

    protected void onReset()
    {
        super.onReset();
        this.onStopLoading();
        if ((this.mCursor != null) && (!this.mCursor.isClosed())) {
            this.mCursor.close();
        }
        this.mCursor = 0;
        return;
    }

    protected void onStartLoading()
    {
        if (this.mCursor != null) {
            this.deliverResult(this.mCursor);
        }
        if ((this.takeContentChanged()) || (this.mCursor == null)) {
            this.forceLoad();
        }
        return;
    }

    protected void onStopLoading()
    {
        this.cancelLoad();
        return;
    }

    public void setProjection(String[] p1)
    {
        this.mProjection = p1;
        return;
    }

    public void setSelection(String p1)
    {
        this.mSelection = p1;
        return;
    }

    public void setSelectionArgs(String[] p1)
    {
        this.mSelectionArgs = p1;
        return;
    }

    public void setSortOrder(String p1)
    {
        this.mSortOrder = p1;
        return;
    }

    public void setUri(android.net.Uri p1)
    {
        this.mUri = p1;
        return;
    }
}
package android.support.v4.content;
 class IntentCompat$IntentCompatImplHC extends android.support.v4.content.IntentCompat$IntentCompatImplBase {

    IntentCompat$IntentCompatImplHC()
    {
        return;
    }

    public android.content.Intent makeMainActivity(android.content.ComponentName p2)
    {
        return android.support.v4.content.IntentCompatHoneycomb.makeMainActivity(p2);
    }

    public android.content.Intent makeRestartActivityTask(android.content.ComponentName p2)
    {
        return android.support.v4.content.IntentCompatHoneycomb.makeRestartActivityTask(p2);
    }
}
package android.support.v4.content.res;
 class ConfigurationHelper$HoneycombMr2Impl extends android.support.v4.content.res.ConfigurationHelper$GingerbreadImpl {

    ConfigurationHelper$HoneycombMr2Impl()
    {
        return;
    }

    public int getScreenHeightDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperHoneycombMr2.getScreenHeightDp(p2);
    }

    public int getScreenWidthDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperHoneycombMr2.getScreenWidthDp(p2);
    }

    public int getSmallestScreenWidthDp(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperHoneycombMr2.getSmallestScreenWidthDp(p2);
    }
}
package android.support.v4.graphics;
 class BitmapCompat$HcMr1BitmapCompatImpl extends android.support.v4.graphics.BitmapCompat$BaseBitmapImpl {

    BitmapCompat$HcMr1BitmapCompatImpl()
    {
        return;
    }

    public int getAllocationByteCount(android.graphics.Bitmap p2)
    {
        return android.support.v4.graphics.BitmapCompatHoneycombMr1.getAllocationByteCount(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$HoneycombDrawableImpl extends android.support.v4.graphics.drawable.DrawableCompat$BaseDrawableImpl {

    DrawableCompat$HoneycombDrawableImpl()
    {
        return;
    }

    public void jumpToCurrentState(android.graphics.drawable.Drawable p1)
    {
        android.support.v4.graphics.drawable.DrawableCompatHoneycomb.jumpToCurrentState(p1);
        return;
    }

    public android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatHoneycomb.wrapForTinting(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperHoneycomb extends android.support.v4.graphics.drawable.DrawableWrapperGingerbread {

    DrawableWrapperHoneycomb(android.graphics.drawable.Drawable p1)
    {
        super(p1);
        return;
    }

    DrawableWrapperHoneycomb(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public void jumpToCurrentState()
    {
        this.mDrawable.jumpToCurrentState();
        return;
    }

    android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState mutateConstantState()
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperHoneycomb$DrawableWrapperStateHoneycomb(this.mState, 0);
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi23 extends android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi21 {

    public MediaBrowserCompat$MediaBrowserImplApi23(android.content.Context p1, android.content.ComponentName p2, android.support.v4.media.MediaBrowserCompat$ConnectionCallback p3, android.os.Bundle p4)
    {
        super(p1, p2, p3, p4);
        return;
    }

    public void getItem(String p3, android.support.v4.media.MediaBrowserCompat$ItemCallback p4)
    {
        if (this.mServiceBinderWrapper != null) {
            super.getItem(p3, p4);
        } else {
            android.support.v4.media.MediaBrowserCompatApi23.getItem(this.mBrowserObj, p3, p4.mItemCallbackObj);
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$SubscriptionCallback$StubApi24 extends android.support.v4.media.MediaBrowserCompat$SubscriptionCallback$StubApi21 implements android.support.v4.media.MediaBrowserCompatApi24$SubscriptionCallback {
    final synthetic android.support.v4.media.MediaBrowserCompat$SubscriptionCallback this$0;

    MediaBrowserCompat$SubscriptionCallback$StubApi24(android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void onChildrenLoaded(String p3, java.util.List p4, android.os.Bundle p5)
    {
        this.this$0.onChildrenLoaded(p3, android.support.v4.media.MediaBrowserCompat$MediaItem.fromMediaItemList(p4), p5);
        return;
    }

    public void onError(String p2, android.os.Bundle p3)
    {
        this.this$0.onError(p2, p3);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi23 extends android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi21 implements android.support.v4.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi23(android.support.v4.media.MediaBrowserServiceCompat p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void onCreate()
    {
        this.mServiceObj = android.support.v4.media.MediaBrowserServiceCompatApi23.createService(this.this$0, this);
        android.support.v4.media.MediaBrowserServiceCompatApi21.onCreate(this.mServiceObj);
        return;
    }

    public void onLoadItem(String p3, android.support.v4.media.MediaBrowserServiceCompatApi21$ResultWrapper p4)
    {
        this.this$0.onLoadItem(p3, new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23$1(this, p3, p4));
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompatApi24$MediaBrowserServiceAdaptor extends android.support.v4.media.MediaBrowserServiceCompatApi23$MediaBrowserServiceAdaptor {

    MediaBrowserServiceCompatApi24$MediaBrowserServiceAdaptor(android.content.Context p1, android.support.v4.media.MediaBrowserServiceCompatApi24$ServiceCompatProxy p2)
    {
        super(p1, p2);
        return;
    }

    public void onLoadChildren(String p3, android.service.media.MediaBrowserService$Result p4, android.os.Bundle p5)
    {
        ((android.support.v4.media.MediaBrowserServiceCompatApi24$ServiceCompatProxy) this.mServiceProxy).onLoadChildren(p3, new android.support.v4.media.MediaBrowserServiceCompatApi24$ResultWrapper(p4), p5);
        return;
    }
}
package android.support.v4.media;
public interface MediaBrowserServiceCompatApi24$ServiceCompatProxy implements android.support.v4.media.MediaBrowserServiceCompatApi23$ServiceCompatProxy {

    public abstract void onLoadChildren();
}
package android.support.v4.media.session;
 class MediaControllerCompat$Callback$StubCompat extends android.support.v4.media.session.IMediaControllerCallback$Stub {
    final synthetic android.support.v4.media.session.MediaControllerCompat$Callback this$0;

    MediaControllerCompat$Callback$StubCompat(android.support.v4.media.session.MediaControllerCompat$Callback p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onEvent(String p3, android.os.Bundle p4)
    {
        this.this$0.mHandler.post(1, p3, p4);
        return;
    }

    public void onExtrasChanged(android.os.Bundle p4)
    {
        this.this$0.mHandler.post(7, p4, 0);
        return;
    }

    public void onMetadataChanged(android.support.v4.media.MediaMetadataCompat p4)
    {
        this.this$0.mHandler.post(3, p4, 0);
        return;
    }

    public void onPlaybackStateChanged(android.support.v4.media.session.PlaybackStateCompat p4)
    {
        this.this$0.mHandler.post(2, p4, 0);
        return;
    }

    public void onQueueChanged(java.util.List p4)
    {
        this.this$0.mHandler.post(5, p4, 0);
        return;
    }

    public void onQueueTitleChanged(CharSequence p4)
    {
        this.this$0.mHandler.post(6, p4, 0);
        return;
    }

    public void onSessionDestroyed()
    {
        this.this$0.mHandler.post(8, 0, 0);
        return;
    }

    public void onVolumeInfoChanged(android.support.v4.media.session.ParcelableVolumeInfo p7)
    {
        android.support.v4.media.session.MediaControllerCompat$PlaybackInfo v0_0 = 0;
        if (p7 != null) {
            v0_0 = new android.support.v4.media.session.MediaControllerCompat$PlaybackInfo(p7.volumeType, p7.audioStream, p7.controlType, p7.maxVolume, p7.currentVolume);
        }
        this.this$0.mHandler.post(4, v0_0, 0);
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$MediaControllerImplApi23 extends android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21 {

    public MediaControllerCompat$MediaControllerImplApi23(android.content.Context p1, android.support.v4.media.session.MediaSessionCompat$Token p2)
    {
        super(p1, p2);
        return;
    }

    public MediaControllerCompat$MediaControllerImplApi23(android.content.Context p1, android.support.v4.media.session.MediaSessionCompat p2)
    {
        super(p1, p2);
        return;
    }

    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    {
        int v1_1;
        Object v0 = android.support.v4.media.session.MediaControllerCompatApi21.getTransportControls(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.media.session.MediaControllerCompat$TransportControlsApi23(v0);
        }
        return v1_1;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$TransportControlsApi23 extends android.support.v4.media.session.MediaControllerCompat$TransportControlsApi21 {

    public MediaControllerCompat$TransportControlsApi23(Object p1)
    {
        super(p1);
        return;
    }

    public void playFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi23$TransportControls.playFromUri(this.mControlsObj, p2, p3);
        return;
    }
}
package android.support.v4.media.session;
public class MediaControllerCompatApi24$TransportControls extends android.support.v4.media.session.MediaControllerCompatApi23$TransportControls {

    public MediaControllerCompatApi24$TransportControls()
    {
        return;
    }

    public static void prepare(Object p0)
    {
        ((android.media.session.MediaController$TransportControls) p0).prepare();
        return;
    }

    public static void prepareFromMediaId(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).prepareFromMediaId(p1, p2);
        return;
    }

    public static void prepareFromSearch(Object p0, String p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).prepareFromSearch(p1, p2);
        return;
    }

    public static void prepareFromUri(Object p0, android.net.Uri p1, android.os.Bundle p2)
    {
        ((android.media.session.MediaController$TransportControls) p0).prepareFromUri(p1, p2);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplBase$2 implements android.support.v4.media.session.MediaSessionCompatApi19$Callback {
    final synthetic android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase this$0;

    MediaSessionCompat$MediaSessionImplBase$2(android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onSeekTo(long p4)
    {
        this.this$0.postToHandler(18, Long.valueOf(p4));
        return;
    }

    public void onSetRating(Object p4)
    {
        this.this$0.postToHandler(19, android.support.v4.media.RatingCompat.fromRating(p4));
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$MediaSessionImplBase$MediaSessionStub extends android.support.v4.media.session.IMediaSession$Stub {
    final synthetic android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase this$0;

    MediaSessionCompat$MediaSessionImplBase$MediaSessionStub(android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase p1)
    {
        this.this$0 = p1;
        return;
    }

    public void adjustVolume(int p2, int p3, String p4)
    {
        this.this$0.adjustVolume(p2, p3);
        return;
    }

    public void fastForward()
    {
        this.this$0.postToHandler(16);
        return;
    }

    public android.os.Bundle getExtras()
    {
        try {
            return this.this$0.mExtras;
        } catch (Throwable v0_3) {
            throw v0_3;
        }
    }

    public long getFlags()
    {
        try {
            return ((long) this.this$0.mFlags);
        } catch (Throwable v0_3) {
            throw v0_3;
        }
    }

    public android.app.PendingIntent getLaunchPendingIntent()
    {
        try {
            return this.this$0.mSessionActivity;
        } catch (Throwable v0_3) {
            throw v0_3;
        }
    }

    public android.support.v4.media.MediaMetadataCompat getMetadata()
    {
        return this.this$0.mMetadata;
    }

    public String getPackageName()
    {
        return this.this$0.mPackageName;
    }

    public android.support.v4.media.session.PlaybackStateCompat getPlaybackState()
    {
        return this.this$0.getStateWithUpdatedPosition();
    }

    public java.util.List getQueue()
    {
        try {
            return this.this$0.mQueue;
        } catch (Throwable v0_3) {
            throw v0_3;
        }
    }

    public CharSequence getQueueTitle()
    {
        return this.this$0.mQueueTitle;
    }

    public int getRatingType()
    {
        return this.this$0.mRatingType;
    }

    public String getTag()
    {
        return this.this$0.mTag;
    }

    public android.support.v4.media.session.ParcelableVolumeInfo getVolumeAttributes()
    {
        try {
            int v3;
            int v4;
            int v5;
            int v1 = this.this$0.mVolumeType;
            int v2 = this.this$0.mLocalStream;
            android.support.v4.media.VolumeProviderCompat v6 = this.this$0.mVolumeProvider;
        } catch (android.media.AudioManager v0_6) {
            throw v0_6;
        }
        if (v1 != 2) {
            v3 = 2;
            v4 = this.this$0.mAudioManager.getStreamMaxVolume(v2);
            v5 = this.this$0.mAudioManager.getStreamVolume(v2);
        } else {
            v3 = v6.getVolumeControl();
            v4 = v6.getMaxVolume();
            v5 = v6.getCurrentVolume();
        }
        return new android.support.v4.media.session.ParcelableVolumeInfo(v1, v2, v3, v4, v5);
    }

    public boolean isTransportControlEnabled()
    {
        int v0_3;
        if ((this.this$0.mFlags & 2) == 0) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void next()
    {
        this.this$0.postToHandler(14);
        return;
    }

    public void pause()
    {
        this.this$0.postToHandler(12);
        return;
    }

    public void play()
    {
        this.this$0.postToHandler(7);
        return;
    }

    public void playFromMediaId(String p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(8, p3, p4);
        return;
    }

    public void playFromSearch(String p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(9, p3, p4);
        return;
    }

    public void playFromUri(android.net.Uri p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(10, p3, p4);
        return;
    }

    public void prepare()
    {
        this.this$0.postToHandler(3);
        return;
    }

    public void prepareFromMediaId(String p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(4, p3, p4);
        return;
    }

    public void prepareFromSearch(String p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(5, p3, p4);
        return;
    }

    public void prepareFromUri(android.net.Uri p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(6, p3, p4);
        return;
    }

    public void previous()
    {
        this.this$0.postToHandler(15);
        return;
    }

    public void rate(android.support.v4.media.RatingCompat p3)
    {
        this.this$0.postToHandler(19, p3);
        return;
    }

    public void registerCallbackListener(android.support.v4.media.session.IMediaControllerCallback p2)
    {
        if (!this.this$0.mDestroyed) {
            this.this$0.mControllerCallbacks.register(p2);
        } else {
            try {
                p2.onSessionDestroyed();
            } catch (Exception v0) {
            }
        }
        return;
    }

    public void rewind()
    {
        this.this$0.postToHandler(17);
        return;
    }

    public void seekTo(long p4)
    {
        this.this$0.postToHandler(18, Long.valueOf(p4));
        return;
    }

    public void sendCommand(String p5, android.os.Bundle p6, android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper p7)
    {
        this.this$0.postToHandler(1, new android.support.v4.media.session.MediaSessionCompat$MediaSessionImplBase$Command(p5, p6, android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper.access$000(p7)));
        return;
    }

    public void sendCustomAction(String p3, android.os.Bundle p4)
    {
        this.this$0.postToHandler(20, p3, p4);
        return;
    }

    public boolean sendMediaButton(android.view.KeyEvent p4)
    {
        int v0;
        if ((this.this$0.mFlags & 1) == 0) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (v0 != 0) {
            this.this$0.postToHandler(21, p4);
        }
        return v0;
    }

    public void setVolumeTo(int p2, int p3, String p4)
    {
        this.this$0.setVolumeTo(p2, p3);
        return;
    }

    public void skipToQueueItem(long p4)
    {
        this.this$0.postToHandler(11, Long.valueOf(p4));
        return;
    }

    public void stop()
    {
        this.this$0.postToHandler(13);
        return;
    }

    public void unregisterCallbackListener(android.support.v4.media.session.IMediaControllerCallback p2)
    {
        this.this$0.mControllerCallbacks.unregister(p2);
        return;
    }
}
package android.support.v4.media.session;
interface MediaSessionCompatApi21$Callback implements android.support.v4.media.session.MediaSessionCompatApi19$Callback {

    public abstract void onCommand();

    public abstract void onCustomAction();

    public abstract void onFastForward();

    public abstract boolean onMediaButtonEvent();

    public abstract void onPause();

    public abstract void onPlay();

    public abstract void onPlayFromMediaId();

    public abstract void onPlayFromSearch();

    public abstract void onRewind();

    public abstract void onSkipToNext();

    public abstract void onSkipToPrevious();

    public abstract void onSkipToQueueItem();

    public abstract void onStop();
}
package android.support.v4.media.session;
 class MediaSessionCompatApi24$CallbackProxy extends android.support.v4.media.session.MediaSessionCompatApi23$CallbackProxy {

    public MediaSessionCompatApi24$CallbackProxy(android.support.v4.media.session.MediaSessionCompatApi24$Callback p1)
    {
        super(p1);
        return;
    }

    public void onPrepare()
    {
        ((android.support.v4.media.session.MediaSessionCompatApi24$Callback) this.mCallback).onPrepare();
        return;
    }

    public void onPrepareFromMediaId(String p2, android.os.Bundle p3)
    {
        ((android.support.v4.media.session.MediaSessionCompatApi24$Callback) this.mCallback).onPrepareFromMediaId(p2, p3);
        return;
    }

    public void onPrepareFromSearch(String p2, android.os.Bundle p3)
    {
        ((android.support.v4.media.session.MediaSessionCompatApi24$Callback) this.mCallback).onPrepareFromSearch(p2, p3);
        return;
    }

    public void onPrepareFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        ((android.support.v4.media.session.MediaSessionCompatApi24$Callback) this.mCallback).onPrepareFromUri(p2, p3);
        return;
    }
}
package android.support.v4.net;
 class ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl extends android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl {

    ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl()
    {
        return;
    }

    public boolean isActiveNetworkMetered(android.net.ConnectivityManager p2)
    {
        return android.support.v4.net.ConnectivityManagerCompatHoneycombMR2.isActiveNetworkMetered(p2);
    }
}
package android.support.v4.net;
 class TrafficStatsCompat$Api24TrafficStatsCompatImpl extends android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl {

    TrafficStatsCompat$Api24TrafficStatsCompatImpl()
    {
        return;
    }

    public void tagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompatApi24.tagDatagramSocket(p1);
        return;
    }

    public void untagDatagramSocket(java.net.DatagramSocket p1)
    {
        android.support.v4.net.TrafficStatsCompatApi24.untagDatagramSocket(p1);
        return;
    }
}
package android.support.v4.os;
 class ResultReceiver$MyResultReceiver extends android.support.v4.os.IResultReceiver$Stub {
    final synthetic android.support.v4.os.ResultReceiver this$0;

    ResultReceiver$MyResultReceiver(android.support.v4.os.ResultReceiver p1)
    {
        this.this$0 = p1;
        return;
    }

    public void send(int p4, android.os.Bundle p5)
    {
        if (this.this$0.mHandler == null) {
            this.this$0.onReceiveResult(p4, p5);
        } else {
            this.this$0.mHandler.post(new android.support.v4.os.ResultReceiver$MyRunnable(this.this$0, p4, p5));
        }
        return;
    }
}
package android.support.v4.print;
final class PrintHelper$PrintHelperApi20Impl extends android.support.v4.print.PrintHelper$PrintHelperImpl {

    PrintHelper$PrintHelperApi20Impl(android.content.Context p2)
    {
        super(new android.support.v4.print.PrintHelperApi20(p2));
        return;
    }
}
package android.support.v4.print;
final class PrintHelper$PrintHelperApi23Impl extends android.support.v4.print.PrintHelper$PrintHelperImpl {

    PrintHelper$PrintHelperApi23Impl(android.content.Context p2)
    {
        super(new android.support.v4.print.PrintHelperApi23(p2));
        return;
    }
}
package android.support.v4.print;
final class PrintHelper$PrintHelperApi24Impl extends android.support.v4.print.PrintHelper$PrintHelperImpl {

    PrintHelper$PrintHelperApi24Impl(android.content.Context p2)
    {
        super(new android.support.v4.print.PrintHelperApi24(p2));
        return;
    }
}
package android.support.v4.print;
final class PrintHelper$PrintHelperKitkatImpl extends android.support.v4.print.PrintHelper$PrintHelperImpl {

    PrintHelper$PrintHelperKitkatImpl(android.content.Context p2)
    {
        super(new android.support.v4.print.PrintHelperKitkat(p2));
        return;
    }
}
package android.support.v4.print;
 class PrintHelperApi23 extends android.support.v4.print.PrintHelperApi20 {

    PrintHelperApi23(android.content.Context p2)
    {
        super(p2);
        super.mIsMinMarginsHandlingCorrect = 0;
        return;
    }

    protected android.print.PrintAttributes$Builder copyAttributes(android.print.PrintAttributes p3)
    {
        android.print.PrintAttributes$Builder v0 = super.copyAttributes(p3);
        if (p3.getDuplexMode() != 0) {
            v0.setDuplexMode(p3.getDuplexMode());
        }
        return v0;
    }
}
package android.support.v4.text;
 class TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal extends android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl {
    private final boolean mDefaultIsRtl;

    TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal(android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm p1, boolean p2)
    {
        super(p1);
        super.mDefaultIsRtl = p2;
        return;
    }

    protected boolean defaultIsRtl()
    {
        return this.mDefaultIsRtl;
    }
}
package android.support.v4.text;
 class TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale extends android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl {
    public static final android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale INSTANCE;

    static TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale()
    {
        android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale.INSTANCE = new android.support.v4.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale();
        return;
    }

    public TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale()
    {
        super(0);
        return;
    }

    protected boolean defaultIsRtl()
    {
        int v1 = 1;
        if (android.support.v4.text.TextUtilsCompat.getLayoutDirectionFromLocale(java.util.Locale.getDefault()) != 1) {
            v1 = 0;
        }
        return v1;
    }
}
package android.support.v4.util;
public class Pools$SynchronizedPool extends android.support.v4.util.Pools$SimplePool {
    private final Object mLock;

    public Pools$SynchronizedPool(int p2)
    {
        super(p2);
        super.mLock = new Object();
        return;
    }

    public Object acquire()
    {
        try {
            return super.acquire();
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }

    public boolean release(Object p3)
    {
        try {
            return super.release(p3);
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }
}
package android.support.v4.view;
 class AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl extends android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl {

    AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl()
    {
        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(Object p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.dispatchPopulateAccessibilityEvent(p2, p3, p4);
    }

    public Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.newAccessibilityDelegateBridge(new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1(this, p2));
    }

    public Object newAccessiblityDelegateDefaultImpl()
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.newAccessibilityDelegateDefaultImpl();
    }

    public void onInitializeAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onInitializeAccessibilityEvent(p1, p2, p3);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(Object p2, android.view.View p3, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p4)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onInitializeAccessibilityNodeInfo(p2, p3, p4.getInfo());
        return;
    }

    public void onPopulateAccessibilityEvent(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.onPopulateAccessibilityEvent(p1, p2, p3);
        return;
    }

    public boolean onRequestSendAccessibilityEvent(Object p2, android.view.ViewGroup p3, android.view.View p4, android.view.accessibility.AccessibilityEvent p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompatIcs.onRequestSendAccessibilityEvent(p2, p3, p4, p5);
    }

    public void sendAccessibilityEvent(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEvent(p1, p2, p3);
        return;
    }

    public void sendAccessibilityEventUnchecked(Object p1, android.view.View p2, android.view.accessibility.AccessibilityEvent p3)
    {
        android.support.v4.view.AccessibilityDelegateCompatIcs.sendAccessibilityEventUnchecked(p1, p2, p3);
        return;
    }
}
package android.support.v4.view;
 class KeyEventCompat$HoneycombKeyEventVersionImpl extends android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl {

    KeyEventCompat$HoneycombKeyEventVersionImpl()
    {
        return;
    }

    public boolean isCtrlPressed(android.view.KeyEvent p2)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.isCtrlPressed(p2);
    }

    public boolean metaStateHasModifiers(int p2, int p3)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.metaStateHasModifiers(p2, p3);
    }

    public boolean metaStateHasNoModifiers(int p2)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.metaStateHasNoModifiers(p2);
    }

    public int normalizeMetaState(int p2)
    {
        return android.support.v4.view.KeyEventCompatHoneycomb.normalizeMetaState(p2);
    }
}
package android.support.v4.view;
 class LayoutInflaterCompat$LayoutInflaterCompatImplV11 extends android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplBase {

    LayoutInflaterCompat$LayoutInflaterCompatImplV11()
    {
        return;
    }

    public void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        android.support.v4.view.LayoutInflaterCompatHC.setFactory(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class MenuItemCompat$IcsMenuVersionImpl extends android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl {

    MenuItemCompat$IcsMenuVersionImpl()
    {
        return;
    }

    public boolean collapseActionView(android.view.MenuItem p2)
    {
        return android.support.v4.view.MenuItemCompatIcs.collapseActionView(p2);
    }

    public boolean expandActionView(android.view.MenuItem p2)
    {
        return android.support.v4.view.MenuItemCompatIcs.expandActionView(p2);
    }

    public boolean isActionViewExpanded(android.view.MenuItem p2)
    {
        return android.support.v4.view.MenuItemCompatIcs.isActionViewExpanded(p2);
    }

    public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem p2, android.support.v4.view.MenuItemCompat$OnActionExpandListener p3)
    {
        android.view.MenuItem v0_2;
        if (p3 != null) {
            v0_2 = android.support.v4.view.MenuItemCompatIcs.setOnActionExpandListener(p2, new android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl$1(this, p3));
        } else {
            v0_2 = android.support.v4.view.MenuItemCompatIcs.setOnActionExpandListener(p2, 0);
        }
        return v0_2;
    }
}
package android.support.v4.view;
 class MotionEventCompat$HoneycombMr1MotionEventVersionImpl extends android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl {

    MotionEventCompat$HoneycombMr1MotionEventVersionImpl()
    {
        return;
    }

    public float getAxisValue(android.view.MotionEvent p2, int p3)
    {
        return android.support.v4.view.MotionEventCompatHoneycombMr1.getAxisValue(p2, p3);
    }

    public float getAxisValue(android.view.MotionEvent p2, int p3, int p4)
    {
        return android.support.v4.view.MotionEventCompatHoneycombMr1.getAxisValue(p2, p3, p4);
    }
}
package android.support.v4.view;
 class PointerIconCompat$Api24PointerIconCompatImpl extends android.support.v4.view.PointerIconCompat$BasePointerIconCompatImpl {

    PointerIconCompat$Api24PointerIconCompatImpl()
    {
        return;
    }

    public Object create(android.graphics.Bitmap p2, float p3, float p4)
    {
        return android.support.v4.view.PointerIconCompatApi24.create(p2, p3, p4);
    }

    public Object getSystemIcon(android.content.Context p2, int p3)
    {
        return android.support.v4.view.PointerIconCompatApi24.getSystemIcon(p2, p3);
    }

    public Object load(android.content.res.Resources p2, int p3)
    {
        return android.support.v4.view.PointerIconCompatApi24.load(p2, p3);
    }
}
package android.support.v4.view;
 class ViewCompat$HCViewCompatImpl extends android.support.v4.view.ViewCompat$BaseViewCompatImpl {

    ViewCompat$HCViewCompatImpl()
    {
        return;
    }

    public int combineMeasuredStates(int p2, int p3)
    {
        return android.support.v4.view.ViewCompatHC.combineMeasuredStates(p2, p3);
    }

    public float getAlpha(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getAlpha(p2);
    }

    long getFrameTime()
    {
        return android.support.v4.view.ViewCompatHC.getFrameTime();
    }

    public int getLayerType(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getLayerType(p2);
    }

    public android.graphics.Matrix getMatrix(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getMatrix(p2);
    }

    public int getMeasuredHeightAndState(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getMeasuredHeightAndState(p2);
    }

    public int getMeasuredState(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getMeasuredState(p2);
    }

    public int getMeasuredWidthAndState(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getMeasuredWidthAndState(p2);
    }

    public float getPivotX(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getPivotX(p2);
    }

    public float getPivotY(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getPivotY(p2);
    }

    public float getRotation(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getRotation(p2);
    }

    public float getRotationX(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getRotationX(p2);
    }

    public float getRotationY(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getRotationY(p2);
    }

    public float getScaleX(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getScaleX(p2);
    }

    public float getScaleY(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getScaleY(p2);
    }

    public float getTranslationX(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getTranslationX(p2);
    }

    public float getTranslationY(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getTranslationY(p2);
    }

    public float getX(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getX(p2);
    }

    public float getY(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatHC.getY(p2);
    }

    public void jumpDrawablesToCurrentState(android.view.View p1)
    {
        android.support.v4.view.ViewCompatHC.jumpDrawablesToCurrentState(p1);
        return;
    }

    public void offsetLeftAndRight(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatHC.offsetLeftAndRight(p1, p2);
        return;
    }

    public void offsetTopAndBottom(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatHC.offsetTopAndBottom(p1, p2);
        return;
    }

    public int resolveSizeAndState(int p2, int p3, int p4)
    {
        return android.support.v4.view.ViewCompatHC.resolveSizeAndState(p2, p3, p4);
    }

    public void setActivated(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompatHC.setActivated(p1, p2);
        return;
    }

    public void setAlpha(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setAlpha(p1, p2);
        return;
    }

    public void setLayerPaint(android.view.View p2, android.graphics.Paint p3)
    {
        this.setLayerType(p2, this.getLayerType(p2), p3);
        p2.invalidate();
        return;
    }

    public void setLayerType(android.view.View p1, int p2, android.graphics.Paint p3)
    {
        android.support.v4.view.ViewCompatHC.setLayerType(p1, p2, p3);
        return;
    }

    public void setPivotX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setPivotX(p1, p2);
        return;
    }

    public void setPivotY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setPivotY(p1, p2);
        return;
    }

    public void setRotation(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setRotation(p1, p2);
        return;
    }

    public void setRotationX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setRotationX(p1, p2);
        return;
    }

    public void setRotationY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setRotationY(p1, p2);
        return;
    }

    public void setSaveFromParentEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompatHC.setSaveFromParentEnabled(p1, p2);
        return;
    }

    public void setScaleX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setScaleX(p1, p2);
        return;
    }

    public void setScaleY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setScaleY(p1, p2);
        return;
    }

    public void setTranslationX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setTranslationX(p1, p2);
        return;
    }

    public void setTranslationY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setTranslationY(p1, p2);
        return;
    }

    public void setX(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setX(p1, p2);
        return;
    }

    public void setY(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatHC.setY(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewConfigurationCompat$HoneycombViewConfigurationVersionImpl extends android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl {

    ViewConfigurationCompat$HoneycombViewConfigurationVersionImpl()
    {
        return;
    }

    public boolean hasPermanentMenuKey(android.view.ViewConfiguration p2)
    {
        return 0;
    }
}
package android.support.v4.view;
 class ViewGroupCompat$ViewGroupCompatHCImpl extends android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl {

    ViewGroupCompat$ViewGroupCompatHCImpl()
    {
        return;
    }

    public void setMotionEventSplittingEnabled(android.view.ViewGroup p1, boolean p2)
    {
        android.support.v4.view.ViewGroupCompatHC.setMotionEventSplittingEnabled(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewParentCompat$ViewParentCompatICSImpl extends android.support.v4.view.ViewParentCompat$ViewParentCompatStubImpl {

    ViewParentCompat$ViewParentCompatICSImpl()
    {
        return;
    }

    public boolean requestSendAccessibilityEvent(android.view.ViewParent p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.ViewParentCompatICS.requestSendAccessibilityEvent(p2, p3, p4);
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat$BaseViewPropertyAnimatorCompatImpl {
    java.util.WeakHashMap mLayerMap;

    ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl()
    {
        this.mLayerMap = 0;
        return;
    }

    public void alpha(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.alpha(p2, p3);
        return;
    }

    public void alphaBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.alphaBy(p2, p3);
        return;
    }

    public void cancel(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.cancel(p2);
        return;
    }

    public long getDuration(android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        return android.support.v4.view.ViewPropertyAnimatorCompatICS.getDuration(p4);
    }

    public long getStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat p3, android.view.View p4)
    {
        return android.support.v4.view.ViewPropertyAnimatorCompatICS.getStartDelay(p4);
    }

    public void rotation(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotation(p2, p3);
        return;
    }

    public void rotationBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotationBy(p2, p3);
        return;
    }

    public void rotationX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotationX(p2, p3);
        return;
    }

    public void rotationXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotationXBy(p2, p3);
        return;
    }

    public void rotationY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotationY(p2, p3);
        return;
    }

    public void rotationYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.rotationYBy(p2, p3);
        return;
    }

    public void scaleX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.scaleX(p2, p3);
        return;
    }

    public void scaleXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.scaleXBy(p2, p3);
        return;
    }

    public void scaleY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.scaleY(p2, p3);
        return;
    }

    public void scaleYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.scaleYBy(p2, p3);
        return;
    }

    public void setDuration(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, long p4)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setDuration(p3, p4);
        return;
    }

    public void setInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, android.view.animation.Interpolator p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setInterpolator(p2, p3);
        return;
    }

    public void setListener(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, android.support.v4.view.ViewPropertyAnimatorListener p4)
    {
        p3.setTag(2113929216, p4);
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setListener(p3, new android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener(p2));
        return;
    }

    public void setStartDelay(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, long p4)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setStartDelay(p3, p4);
        return;
    }

    public void start(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.start(p2);
        return;
    }

    public void translationX(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.translationX(p2, p3);
        return;
    }

    public void translationXBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.translationXBy(p2, p3);
        return;
    }

    public void translationY(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.translationY(p2, p3);
        return;
    }

    public void translationYBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.translationYBy(p2, p3);
        return;
    }

    public void withEndAction(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, Runnable p4)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setListener(p3, new android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener(p2));
        p2.mEndAction = p4;
        return;
    }

    public void withLayer(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3)
    {
        p2.mOldLayerType = android.support.v4.view.ViewCompat.getLayerType(p3);
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setListener(p3, new android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener(p2));
        return;
    }

    public void withStartAction(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3, Runnable p4)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.setListener(p3, new android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl$MyVpaListener(p2));
        p2.mStartAction = p4;
        return;
    }

    public void x(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.x(p2, p3);
        return;
    }

    public void xBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.xBy(p2, p3);
        return;
    }

    public void y(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.y(p2, p3);
        return;
    }

    public void yBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatICS.yBy(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class WindowInsetsCompat$WindowInsetsCompatApi20Impl extends android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatBaseImpl {

    WindowInsetsCompat$WindowInsetsCompatApi20Impl()
    {
        return;
    }

    public android.support.v4.view.WindowInsetsCompat consumeSystemWindowInsets(Object p3)
    {
        return new android.support.v4.view.WindowInsetsCompat(android.support.v4.view.WindowInsetsCompatApi20.consumeSystemWindowInsets(p3));
    }

    public Object getSourceWindowInsets(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.getSourceWindowInsets(p2);
    }

    public int getSystemWindowInsetBottom(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.getSystemWindowInsetBottom(p2);
    }

    public int getSystemWindowInsetLeft(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.getSystemWindowInsetLeft(p2);
    }

    public int getSystemWindowInsetRight(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.getSystemWindowInsetRight(p2);
    }

    public int getSystemWindowInsetTop(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.getSystemWindowInsetTop(p2);
    }

    public boolean hasInsets(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.hasInsets(p2);
    }

    public boolean hasSystemWindowInsets(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.hasSystemWindowInsets(p2);
    }

    public boolean isRound(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi20.isRound(p2);
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(Object p3, int p4, int p5, int p6, int p7)
    {
        return new android.support.v4.view.WindowInsetsCompat(android.support.v4.view.WindowInsetsCompatApi20.replaceSystemWindowInsets(p3, p4, p5, p6, p7));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompat$AccessibilityEventIcsImpl extends android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl {

    AccessibilityEventCompat$AccessibilityEventIcsImpl()
    {
        return;
    }

    public void appendRecord(android.view.accessibility.AccessibilityEvent p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompatIcs.appendRecord(p1, p2);
        return;
    }

    public Object getRecord(android.view.accessibility.AccessibilityEvent p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatIcs.getRecord(p2, p3);
    }

    public int getRecordCount(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatIcs.getRecordCount(p2);
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompat$AccessibilityManagerIcsImpl extends android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerStubImpl {

    AccessibilityManagerCompat$AccessibilityManagerIcsImpl()
    {
        return;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.addAccessibilityStateChangeListener(p2, this.newAccessibilityStateChangeListener(p3));
    }

    public java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.getEnabledAccessibilityServiceList(p2, p3);
    }

    public java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.getInstalledAccessibilityServiceList(p2);
    }

    public boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager p2)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.isTouchExplorationEnabled(p2);
    }

    public android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper newAccessibilityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerWrapper(p3, new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1(this, p3));
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.removeAccessibilityStateChangeListener(p2, this.newAccessibilityStateChangeListener(p3));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl()
    {
        return;
    }

    public void addAction(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.addAction(p1, p2);
        return;
    }

    public void addChild(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.addChild(p1, p2);
        return;
    }

    public java.util.List findAccessibilityNodeInfosByText(Object p2, String p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.findAccessibilityNodeInfosByText(p2, p3);
    }

    public int getActions(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getActions(p2);
    }

    public void getBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getBoundsInParent(p1, p2);
        return;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getBoundsInScreen(p1, p2);
        return;
    }

    public Object getChild(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getChild(p2, p3);
    }

    public int getChildCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getChildCount(p2);
    }

    public CharSequence getClassName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getClassName(p2);
    }

    public CharSequence getContentDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getContentDescription(p2);
    }

    public CharSequence getPackageName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getPackageName(p2);
    }

    public Object getParent(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getParent(p2);
    }

    public CharSequence getText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getText(p2);
    }

    public int getWindowId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.getWindowId(p2);
    }

    public boolean isCheckable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isCheckable(p2);
    }

    public boolean isChecked(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isChecked(p2);
    }

    public boolean isClickable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isClickable(p2);
    }

    public boolean isEnabled(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isEnabled(p2);
    }

    public boolean isFocusable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isFocusable(p2);
    }

    public boolean isFocused(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isFocused(p2);
    }

    public boolean isLongClickable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isLongClickable(p2);
    }

    public boolean isPassword(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isPassword(p2);
    }

    public boolean isScrollable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isScrollable(p2);
    }

    public boolean isSelected(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.isSelected(p2);
    }

    public Object obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain();
    }

    public Object obtain(android.view.View p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain(p2);
    }

    public Object obtain(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.obtain(p2);
    }

    public boolean performAction(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.performAction(p2, p3);
    }

    public void recycle(Object p1)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.recycle(p1);
        return;
    }

    public void setBoundsInParent(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInParent(p1, p2);
        return;
    }

    public void setBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setBoundsInScreen(p1, p2);
        return;
    }

    public void setCheckable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setCheckable(p1, p2);
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setChecked(p1, p2);
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setClassName(p1, p2);
        return;
    }

    public void setClickable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setClickable(p1, p2);
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setContentDescription(p1, p2);
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setEnabled(p1, p2);
        return;
    }

    public void setFocusable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setFocusable(p1, p2);
        return;
    }

    public void setFocused(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setFocused(p1, p2);
        return;
    }

    public void setLongClickable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setLongClickable(p1, p2);
        return;
    }

    public void setPackageName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setPackageName(p1, p2);
        return;
    }

    public void setParent(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setParent(p1, p2);
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setPassword(p1, p2);
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setScrollable(p1, p2);
        return;
    }

    public void setSelected(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setSelected(p1, p2);
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setSource(p1, p2);
        return;
    }

    public void setText(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs.setText(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl extends android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl {

    AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl()
    {
        return;
    }

    public Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1(this, p2));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl extends android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl {

    AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl()
    {
        return;
    }

    public Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1(this, p2));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompat$AccessibilityRecordIcsImpl extends android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl {

    AccessibilityRecordCompat$AccessibilityRecordIcsImpl()
    {
        return;
    }

    public int getAddedCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getAddedCount(p2);
    }

    public CharSequence getBeforeText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getBeforeText(p2);
    }

    public CharSequence getClassName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getClassName(p2);
    }

    public CharSequence getContentDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getContentDescription(p2);
    }

    public int getCurrentItemIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getCurrentItemIndex(p2);
    }

    public int getFromIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getFromIndex(p2);
    }

    public int getItemCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getItemCount(p2);
    }

    public android.os.Parcelable getParcelableData(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getParcelableData(p2);
    }

    public int getRemovedCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getRemovedCount(p2);
    }

    public int getScrollX(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getScrollX(p2);
    }

    public int getScrollY(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getScrollY(p2);
    }

    public android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.wrapNonNullInstance(android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getSource(p2));
    }

    public java.util.List getText(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getText(p2);
    }

    public int getToIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getToIndex(p2);
    }

    public int getWindowId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.getWindowId(p2);
    }

    public boolean isChecked(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isChecked(p2);
    }

    public boolean isEnabled(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isEnabled(p2);
    }

    public boolean isFullScreen(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isFullScreen(p2);
    }

    public boolean isPassword(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isPassword(p2);
    }

    public boolean isScrollable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.isScrollable(p2);
    }

    public Object obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.obtain();
    }

    public Object obtain(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.obtain(p2);
    }

    public void recycle(Object p1)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.recycle(p1);
        return;
    }

    public void setAddedCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setAddedCount(p1, p2);
        return;
    }

    public void setBeforeText(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setBeforeText(p1, p2);
        return;
    }

    public void setChecked(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setChecked(p1, p2);
        return;
    }

    public void setClassName(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setClassName(p1, p2);
        return;
    }

    public void setContentDescription(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setContentDescription(p1, p2);
        return;
    }

    public void setCurrentItemIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setCurrentItemIndex(p1, p2);
        return;
    }

    public void setEnabled(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setEnabled(p1, p2);
        return;
    }

    public void setFromIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setFromIndex(p1, p2);
        return;
    }

    public void setFullScreen(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setFullScreen(p1, p2);
        return;
    }

    public void setItemCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setItemCount(p1, p2);
        return;
    }

    public void setParcelableData(Object p1, android.os.Parcelable p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setParcelableData(p1, p2);
        return;
    }

    public void setPassword(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setPassword(p1, p2);
        return;
    }

    public void setRemovedCount(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setRemovedCount(p1, p2);
        return;
    }

    public void setScrollX(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollX(p1, p2);
        return;
    }

    public void setScrollY(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollY(p1, p2);
        return;
    }

    public void setScrollable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setScrollable(p1, p2);
        return;
    }

    public void setSource(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setSource(p1, p2);
        return;
    }

    public void setToIndex(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcs.setToIndex(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi21Impl extends android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoStubImpl {

    AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi21Impl()
    {
        return;
    }

    public void getBoundsInScreen(Object p1, android.graphics.Rect p2)
    {
        android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getBoundsInScreen(p1, p2);
        return;
    }

    public Object getChild(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getChild(p2, p3);
    }

    public int getChildCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getChildCount(p2);
    }

    public int getId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getId(p2);
    }

    public int getLayer(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getLayer(p2);
    }

    public Object getParent(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getParent(p2);
    }

    public Object getRoot(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getRoot(p2);
    }

    public int getType(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.getType(p2);
    }

    public boolean isAccessibilityFocused(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.isAccessibilityFocused(p2);
    }

    public boolean isActive(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.isActive(p2);
    }

    public boolean isFocused(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.isFocused(p2);
    }

    public Object obtain()
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.obtain();
    }

    public Object obtain(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.obtain(p2);
    }

    public void recycle(Object p1)
    {
        android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi21.recycle(p1);
        return;
    }
}
package android.support.v4.widget;
 class CompoundButtonCompat$LollipopCompoundButtonImpl extends android.support.v4.widget.CompoundButtonCompat$BaseCompoundButtonCompat {

    CompoundButtonCompat$LollipopCompoundButtonImpl()
    {
        return;
    }

    public android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatLollipop.getButtonTintList(p2);
    }

    public android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatLollipop.getButtonTintMode(p2);
    }

    public void setButtonTintList(android.widget.CompoundButton p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.widget.CompoundButtonCompatLollipop.setButtonTintList(p1, p2);
        return;
    }

    public void setButtonTintMode(android.widget.CompoundButton p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.widget.CompoundButtonCompatLollipop.setButtonTintMode(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class EdgeEffectCompat$EdgeEffectLollipopImpl extends android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl {

    EdgeEffectCompat$EdgeEffectLollipopImpl()
    {
        return;
    }

    public boolean onPull(Object p2, float p3, float p4)
    {
        return android.support.v4.widget.EdgeEffectCompatLollipop.onPull(p2, p3, p4);
    }
}
package android.support.v4.widget;
 class ListPopupWindowCompat$KitKatListPopupWindowImpl extends android.support.v4.widget.ListPopupWindowCompat$BaseListPopupWindowImpl {

    ListPopupWindowCompat$KitKatListPopupWindowImpl()
    {
        return;
    }

    public android.view.View$OnTouchListener createDragToOpenListener(Object p2, android.view.View p3)
    {
        return android.support.v4.widget.ListPopupWindowCompatKitKat.createDragToOpenListener(p2, p3);
    }
}
package android.support.v4.widget;
 class PopupMenuCompat$KitKatPopupMenuImpl extends android.support.v4.widget.PopupMenuCompat$BasePopupMenuImpl {

    PopupMenuCompat$KitKatPopupMenuImpl()
    {
        return;
    }

    public android.view.View$OnTouchListener getDragToOpenListener(Object p2)
    {
        return android.support.v4.widget.PopupMenuCompatKitKat.getDragToOpenListener(p2);
    }
}
package android.support.v4.widget;
 class PopupWindowCompat$KitKatPopupWindowImpl extends android.support.v4.widget.PopupWindowCompat$BasePopupWindowImpl {

    PopupWindowCompat$KitKatPopupWindowImpl()
    {
        return;
    }

    public void showAsDropDown(android.widget.PopupWindow p1, android.view.View p2, int p3, int p4, int p5)
    {
        android.support.v4.widget.PopupWindowCompatKitKat.showAsDropDown(p1, p2, p3, p4, p5);
        return;
    }
}
package android.support.v4.widget;
public abstract class ResourceCursorAdapter extends android.support.v4.widget.CursorAdapter {
    private int mDropDownLayout;
    private android.view.LayoutInflater mInflater;
    private int mLayout;

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4)
    {
        super(p2, p4);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, int p5)
    {
        super(p2, p4, p5);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public ResourceCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, boolean p5)
    {
        super(p2, p4, p5);
        super.mDropDownLayout = p3;
        super.mLayout = p3;
        super.mInflater = ((android.view.LayoutInflater) p2.getSystemService("layout_inflater"));
        return;
    }

    public android.view.View newDropDownView(android.content.Context p4, android.database.Cursor p5, android.view.ViewGroup p6)
    {
        return this.mInflater.inflate(this.mDropDownLayout, p6, 0);
    }

    public android.view.View newView(android.content.Context p4, android.database.Cursor p5, android.view.ViewGroup p6)
    {
        return this.mInflater.inflate(this.mLayout, p6, 0);
    }

    public void setDropDownViewResource(int p1)
    {
        this.mDropDownLayout = p1;
        return;
    }

    public void setViewResource(int p1)
    {
        this.mLayout = p1;
        return;
    }
}
package android.support.v4.widget;
 class SearchViewCompat$SearchViewCompatHoneycombImpl extends android.support.v4.widget.SearchViewCompat$SearchViewCompatStubImpl {

    SearchViewCompat$SearchViewCompatHoneycombImpl()
    {
        return;
    }

    protected void checkIfLegalArg(android.view.View p1)
    {
        android.support.v4.widget.SearchViewCompatHoneycomb.checkIfLegalArg(p1);
        return;
    }

    public CharSequence getQuery(android.view.View p2)
    {
        this.checkIfLegalArg(p2);
        return android.support.v4.widget.SearchViewCompatHoneycomb.getQuery(p2);
    }

    public boolean isIconified(android.view.View p2)
    {
        this.checkIfLegalArg(p2);
        return android.support.v4.widget.SearchViewCompatHoneycomb.isIconified(p2);
    }

    public boolean isQueryRefinementEnabled(android.view.View p2)
    {
        this.checkIfLegalArg(p2);
        return android.support.v4.widget.SearchViewCompatHoneycomb.isQueryRefinementEnabled(p2);
    }

    public boolean isSubmitButtonEnabled(android.view.View p2)
    {
        this.checkIfLegalArg(p2);
        return android.support.v4.widget.SearchViewCompatHoneycomb.isSubmitButtonEnabled(p2);
    }

    public Object newOnCloseListener(android.support.v4.widget.SearchViewCompat$OnCloseListener p2)
    {
        return android.support.v4.widget.SearchViewCompatHoneycomb.newOnCloseListener(new android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$2(this, p2));
    }

    public Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListener p2)
    {
        return android.support.v4.widget.SearchViewCompatHoneycomb.newOnQueryTextListener(new android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$1(this, p2));
    }

    public android.view.View newSearchView(android.content.Context p2)
    {
        return android.support.v4.widget.SearchViewCompatHoneycomb.newSearchView(p2);
    }

    public void setIconified(android.view.View p1, boolean p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setIconified(p1, p2);
        return;
    }

    public void setMaxWidth(android.view.View p1, int p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setMaxWidth(p1, p2);
        return;
    }

    public void setOnCloseListener(android.view.View p2, android.support.v4.widget.SearchViewCompat$OnCloseListener p3)
    {
        this.checkIfLegalArg(p2);
        android.support.v4.widget.SearchViewCompatHoneycomb.setOnCloseListener(p2, this.newOnCloseListener(p3));
        return;
    }

    public void setOnQueryTextListener(android.view.View p2, android.support.v4.widget.SearchViewCompat$OnQueryTextListener p3)
    {
        this.checkIfLegalArg(p2);
        android.support.v4.widget.SearchViewCompatHoneycomb.setOnQueryTextListener(p2, this.newOnQueryTextListener(p3));
        return;
    }

    public void setQuery(android.view.View p1, CharSequence p2, boolean p3)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setQuery(p1, p2, p3);
        return;
    }

    public void setQueryHint(android.view.View p1, CharSequence p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setQueryHint(p1, p2);
        return;
    }

    public void setQueryRefinementEnabled(android.view.View p1, boolean p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setQueryRefinementEnabled(p1, p2);
        return;
    }

    public void setSearchableInfo(android.view.View p1, android.content.ComponentName p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setSearchableInfo(p1, p2);
        return;
    }

    public void setSubmitButtonEnabled(android.view.View p1, boolean p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatHoneycomb.setSubmitButtonEnabled(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$SlidingPanelLayoutImplJB extends android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase {
    private reflect.Method mGetDisplayList;
    private reflect.Field mRecreateDisplayList;

    SlidingPaneLayout$SlidingPanelLayoutImplJB()
    {
        try {
            this.mGetDisplayList = android.view.View.getDeclaredMethod("getDisplayList", ((Class[]) 0));
            try {
                this.mRecreateDisplayList = android.view.View.getDeclaredField("mRecreateDisplayList");
                this.mRecreateDisplayList.setAccessible(1);
            } catch (NoSuchFieldException v0_0) {
                android.util.Log.e("SlidingPaneLayout", "Couldn\'t fetch mRecreateDisplayList field; dimming will be slow.", v0_0);
            }
            return;
        } catch (NoSuchFieldException v0_1) {
            android.util.Log.e("SlidingPaneLayout", "Couldn\'t fetch getDisplayList method; dimming won\'t work right.", v0_1);
        }
    }

    public void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout p4, android.view.View p5)
    {
        if ((this.mGetDisplayList == null) || (this.mRecreateDisplayList == null)) {
            p5.invalidate();
        } else {
            try {
                this.mRecreateDisplayList.setBoolean(p5, 1);
                this.mGetDisplayList.invoke(p5, ((Object[]) 0));
            } catch (Exception v0) {
                android.util.Log.e("SlidingPaneLayout", "Error refreshing display list state", v0);
            }
            super.invalidateChildRegion(p4, p5);
        }
        return;
    }
}
package android.support.v4.widget;
 class SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 extends android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase {

    SlidingPaneLayout$SlidingPanelLayoutImplJBMR1()
    {
        return;
    }

    public void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout p2, android.view.View p3)
    {
        android.support.v4.view.ViewCompat.setLayerPaint(p3, ((android.support.v4.widget.SlidingPaneLayout$LayoutParams) p3.getLayoutParams()).dimPaint);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompat$JbTextViewCompatImpl extends android.support.v4.widget.TextViewCompat$BaseTextViewCompatImpl {

    TextViewCompat$JbTextViewCompatImpl()
    {
        return;
    }

    public int getMaxLines(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatJb.getMaxLines(p2);
    }

    public int getMinLines(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatJb.getMinLines(p2);
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanImpl extends android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl {

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanImpl()
    {
        return;
    }

    public String loadDescription(android.accessibilityservice.AccessibilityServiceInfo p2, android.content.pm.PackageManager p3)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatJellyBean.loadDescription(p2, p3);
    }
}
package android.support.v4.app;
public class FragmentActivity extends android.support.v4.app.BaseFragmentActivityJB implements android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback, android.support.v4.app.ActivityCompatApi23$RequestPermissionsRequestCodeValidator {
    static final String ALLOCATED_REQUEST_INDICIES_TAG = "android:support:request_indicies";
    static final String FRAGMENTS_TAG = "android:support:fragments";
    private static final int HONEYCOMB = 11;
    static final int MAX_NUM_PENDING_FRAGMENT_ACTIVITY_RESULTS = 65534;
    static final int MSG_REALLY_STOPPED = 1;
    static final int MSG_RESUME_PENDING = 2;
    static final String NEXT_CANDIDATE_REQUEST_INDEX_TAG = "android:support:next_request_index";
    static final String REQUEST_FRAGMENT_WHO_TAG = "android:support:request_fragment_who";
    private static final String TAG = "FragmentActivity";
    boolean mCreated;
    final android.support.v4.app.FragmentController mFragments;
    final android.os.Handler mHandler;
    android.support.v4.media.session.MediaControllerCompat mMediaController;
    int mNextCandidateRequestIndex;
    boolean mOptionsMenuInvalidated;
    android.support.v4.util.SparseArrayCompat mPendingFragmentActivityResults;
    boolean mReallyStopped;
    boolean mRequestedPermissionsFromFragment;
    boolean mResumed;
    boolean mRetaining;
    boolean mStopped;

    public FragmentActivity()
    {
        this.mHandler = new android.support.v4.app.FragmentActivity$1(this);
        this.mFragments = android.support.v4.app.FragmentController.createController(new android.support.v4.app.FragmentActivity$HostCallbacks(this));
        return;
    }

    private int allocateRequestIndex(android.support.v4.app.Fragment p5)
    {
        if (this.mPendingFragmentActivityResults.size() >= 65534) {
            throw new IllegalStateException("Too many pending Fragment activity results.");
        }
        while (this.mPendingFragmentActivityResults.indexOfKey(this.mNextCandidateRequestIndex) >= 0) {
            this.mNextCandidateRequestIndex = ((this.mNextCandidateRequestIndex + 1) % 65534);
        }
        int v0 = this.mNextCandidateRequestIndex;
        this.mPendingFragmentActivityResults.put(v0, p5.mWho);
        this.mNextCandidateRequestIndex = ((this.mNextCandidateRequestIndex + 1) % 65534);
        return v0;
    }

    private void dumpViewHierarchy(String p6, java.io.PrintWriter p7, android.view.View p8)
    {
        p7.print(p6);
        if (p8 != null) {
            p7.println(android.support.v4.app.FragmentActivity.viewToString(p8));
            if ((p8 instanceof android.view.ViewGroup)) {
                int v0 = ((android.view.ViewGroup) p8).getChildCount();
                if (v0 > 0) {
                    String v6_1 = new StringBuilder().append(p6).append("  ").toString();
                    int v2 = 0;
                    while (v2 < v0) {
                        this.dumpViewHierarchy(v6_1, p7, ((android.view.ViewGroup) p8).getChildAt(v2));
                        v2++;
                    }
                }
            }
        } else {
            p7.println("null");
        }
        return;
    }

    private static String viewToString(android.view.View p12)
    {
        int v7 = 70;
        int v8 = 46;
        StringBuilder v2_1 = new StringBuilder(128);
        v2_1.append(p12.getClass().getName());
        v2_1.append(123);
        v2_1.append(Integer.toHexString(System.identityHashCode(p12)));
        v2_1.append(32);
        switch (p12.getVisibility()) {
            case 0:
                v2_1.append(86);
                break;
            case 4:
                v2_1.append(73);
                break;
            case 8:
                v2_1.append(71);
                break;
            default:
                v2_1.append(46);
        }
        String v6_20;
        if (!p12.isFocusable()) {
            v6_20 = 46;
        } else {
            v6_20 = 70;
        }
        String v6_22;
        v2_1.append(v6_20);
        if (!p12.isEnabled()) {
            v6_22 = 46;
        } else {
            v6_22 = 69;
        }
        String v6_24;
        v2_1.append(v6_22);
        if (!p12.willNotDraw()) {
            v6_24 = 68;
        } else {
            v6_24 = 46;
        }
        String v6_26;
        v2_1.append(v6_24);
        if (!p12.isHorizontalScrollBarEnabled()) {
            v6_26 = 46;
        } else {
            v6_26 = 72;
        }
        String v6_28;
        v2_1.append(v6_26);
        if (!p12.isVerticalScrollBarEnabled()) {
            v6_28 = 46;
        } else {
            v6_28 = 86;
        }
        String v6_31;
        v2_1.append(v6_28);
        if (!p12.isClickable()) {
            v6_31 = 46;
        } else {
            v6_31 = 67;
        }
        String v6_33;
        v2_1.append(v6_31);
        if (!p12.isLongClickable()) {
            v6_33 = 46;
        } else {
            v6_33 = 76;
        }
        v2_1.append(v6_33);
        v2_1.append(32);
        if (!p12.isFocused()) {
            v7 = 46;
        }
        String v6_36;
        v2_1.append(v7);
        if (!p12.isSelected()) {
            v6_36 = 46;
        } else {
            v6_36 = 83;
        }
        v2_1.append(v6_36);
        if (p12.isPressed()) {
            v8 = 80;
        }
        v2_1.append(v8);
        v2_1.append(32);
        v2_1.append(p12.getLeft());
        v2_1.append(44);
        v2_1.append(p12.getTop());
        v2_1.append(45);
        v2_1.append(p12.getRight());
        v2_1.append(44);
        v2_1.append(p12.getBottom());
        int v1 = p12.getId();
        if (v1 != -1) {
            v2_1.append(" #");
            v2_1.append(Integer.toHexString(v1));
            android.content.res.Resources v4 = p12.getResources();
            if ((v1 != 0) && (v4 != null)) {
                try {
                    String v3;
                    switch ((-16777216 & v1)) {
                        case 16777216:
                            v3 = "android";
                            String v5 = v4.getResourceTypeName(v1);
                            String v0 = v4.getResourceEntryName(v1);
                            v2_1.append(" ");
                            v2_1.append(v3);
                            v2_1.append(":");
                            v2_1.append(v5);
                            v2_1.append("/");
                            v2_1.append(v0);
                            break;
                        case 2130706432:
                            v3 = "app";
                            break;
                        default:
                            v3 = v4.getResourcePackageName(v1);
                    }
                } catch (String v6) {
                }
            }
        }
        v2_1.append("}");
        return v2_1.toString();
    }

    final android.view.View dispatchFragmentsOnCreateView(android.view.View p2, String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        return this.mFragments.onCreateView(p2, p3, p4, p5);
    }

    void doReallyStop(boolean p3)
    {
        if (this.mReallyStopped) {
            if (p3) {
                this.mFragments.doLoaderStart();
                this.mFragments.doLoaderStop(1);
            }
        } else {
            this.mReallyStopped = 1;
            this.mRetaining = p3;
            this.mHandler.removeMessages(1);
            this.onReallyStop();
        }
        return;
    }

    public void dump(String p4, java.io.FileDescriptor p5, java.io.PrintWriter p6, String[] p7)
    {
        // Both branches of the condition point to the same code.
        // if (android.os.Build$VERSION.SDK_INT < 11) {
            p6.print(p4);
            p6.print("Local FragmentActivity ");
            p6.print(Integer.toHexString(System.identityHashCode(this)));
            p6.println(" State:");
            String v0 = new StringBuilder().append(p4).append("  ").toString();
            p6.print(v0);
            p6.print("mCreated=");
            p6.print(this.mCreated);
            p6.print("mResumed=");
            p6.print(this.mResumed);
            p6.print(" mStopped=");
            p6.print(this.mStopped);
            p6.print(" mReallyStopped=");
            p6.println(this.mReallyStopped);
            this.mFragments.dumpLoaders(v0, p5, p6, p7);
            this.mFragments.getSupportFragmentManager().dump(p4, p5, p6, p7);
            p6.print(p4);
            p6.println("View Hierarchy:");
            this.dumpViewHierarchy(new StringBuilder().append(p4).append("  ").toString(), p6, this.getWindow().getDecorView());
            return;
        // }
    }

    public Object getLastCustomNonConfigurationInstance()
    {
        int v1;
        android.support.v4.app.FragmentActivity$NonConfigurationInstances v0_1 = ((android.support.v4.app.FragmentActivity$NonConfigurationInstances) this.getLastNonConfigurationInstance());
        if (v0_1 == null) {
            v1 = 0;
        } else {
            v1 = v0_1.custom;
        }
        return v1;
    }

    public android.support.v4.app.FragmentManager getSupportFragmentManager()
    {
        return this.mFragments.getSupportFragmentManager();
    }

    public android.support.v4.app.LoaderManager getSupportLoaderManager()
    {
        return this.mFragments.getSupportLoaderManager();
    }

    public final android.support.v4.media.session.MediaControllerCompat getSupportMediaController()
    {
        return this.mMediaController;
    }

    protected void onActivityResult(int p7, int p8, android.content.Intent p9)
    {
        this.mFragments.noteStateNotSaved();
        int v0_0 = (p7 >> 16);
        if (v0_0 == 0) {
            super.onActivityResult(p7, p8, p9);
        } else {
            int v0_1 = (v0_0 - 1);
            String v2_1 = ((String) this.mPendingFragmentActivityResults.get(v0_1));
            this.mPendingFragmentActivityResults.remove(v0_1);
            if (v2_1 != null) {
                android.support.v4.app.Fragment v1 = this.mFragments.findFragmentByWho(v2_1);
                if (v1 != null) {
                    v1.onActivityResult((65535 & p7), p8, p9);
                } else {
                    android.util.Log.w("FragmentActivity", new StringBuilder().append("Activity result no fragment exists for who: ").append(v2_1).toString());
                }
            } else {
                android.util.Log.w("FragmentActivity", "Activity result delivered for unknown Fragment.");
            }
        }
        return;
    }

    public void onAttachFragment(android.support.v4.app.Fragment p1)
    {
        return;
    }

    public void onBackPressed()
    {
        if (!this.mFragments.getSupportFragmentManager().popBackStackImmediate()) {
            super.onBackPressed();
        }
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p2)
    {
        super.onConfigurationChanged(p2);
        this.mFragments.dispatchConfigurationChanged(p2);
        return;
    }

    protected void onCreate(android.os.Bundle p9)
    {
        android.support.v4.util.SparseArrayCompat v5_0 = 0;
        this.mFragments.attachHost(0);
        super.onCreate(p9);
        android.support.v4.app.FragmentActivity$NonConfigurationInstances v2_1 = ((android.support.v4.app.FragmentActivity$NonConfigurationInstances) this.getLastNonConfigurationInstance());
        if (v2_1 != null) {
            this.mFragments.restoreLoaderNonConfig(v2_1.loaders);
        }
        if (p9 != null) {
            android.os.Parcelable vtmp2 = p9.getParcelable("android:support:fragments");
            if (v2_1 != null) {
                v5_0 = v2_1.fragments;
            }
            this.mFragments.restoreAllState(vtmp2, v5_0);
            if (p9.containsKey("android:support:next_request_index")) {
                this.mNextCandidateRequestIndex = p9.getInt("android:support:next_request_index");
                int[] v4 = p9.getIntArray("android:support:request_indicies");
                String[] v0 = p9.getStringArray("android:support:request_fragment_who");
                if ((v4 != null) && ((v0 != null) && (v4.length == v0.length))) {
                    this.mPendingFragmentActivityResults = new android.support.v4.util.SparseArrayCompat(v4.length);
                    int v1 = 0;
                    while (v1 < v4.length) {
                        this.mPendingFragmentActivityResults.put(v4[v1], v0[v1]);
                        v1++;
                    }
                } else {
                    android.util.Log.w("FragmentActivity", "Invalid requestCode mapping in savedInstanceState.");
                }
            }
        }
        if (this.mPendingFragmentActivityResults == null) {
            this.mPendingFragmentActivityResults = new android.support.v4.util.SparseArrayCompat();
            this.mNextCandidateRequestIndex = 0;
        }
        this.mFragments.dispatchCreate();
        return;
    }

    public boolean onCreatePanelMenu(int p4, android.view.Menu p5)
    {
        int v0_0;
        if (p4 != 0) {
            v0_0 = super.onCreatePanelMenu(p4, p5);
        } else {
            v0_0 = (super.onCreatePanelMenu(p4, p5) | this.mFragments.dispatchCreateOptionsMenu(p5, this.getMenuInflater()));
            if (android.os.Build$VERSION.SDK_INT < 11) {
                v0_0 = 1;
            }
        }
        return v0_0;
    }

    public bridge synthetic android.view.View onCreateView(android.view.View p2, String p3, android.content.Context p4, android.util.AttributeSet p5)
    {
        return super.onCreateView(p2, p3, p4, p5);
    }

    public bridge synthetic android.view.View onCreateView(String p2, android.content.Context p3, android.util.AttributeSet p4)
    {
        return super.onCreateView(p2, p3, p4);
    }

    protected void onDestroy()
    {
        super.onDestroy();
        this.doReallyStop(0);
        this.mFragments.dispatchDestroy();
        this.mFragments.doLoaderDestroy();
        return;
    }

    public void onLowMemory()
    {
        super.onLowMemory();
        this.mFragments.dispatchLowMemory();
        return;
    }

    public boolean onMenuItemSelected(int p2, android.view.MenuItem p3)
    {
        boolean v0_1;
        if (!super.onMenuItemSelected(p2, p3)) {
            switch (p2) {
                case 0:
                    v0_1 = this.mFragments.dispatchOptionsItemSelected(p3);
                    break;
                case 6:
                    v0_1 = this.mFragments.dispatchContextItemSelected(p3);
                    break;
                default:
                    v0_1 = 0;
            }
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onMultiWindowModeChanged(boolean p2)
    {
        this.mFragments.dispatchMultiWindowModeChanged(p2);
        return;
    }

    protected void onNewIntent(android.content.Intent p2)
    {
        super.onNewIntent(p2);
        this.mFragments.noteStateNotSaved();
        return;
    }

    public void onPanelClosed(int p2, android.view.Menu p3)
    {
        switch (p2) {
            case 0:
                this.mFragments.dispatchOptionsMenuClosed(p3);
                break;
        }
        super.onPanelClosed(p2, p3);
        return;
    }

    protected void onPause()
    {
        super.onPause();
        this.mResumed = 0;
        if (this.mHandler.hasMessages(2)) {
            this.mHandler.removeMessages(2);
            this.onResumeFragments();
        }
        this.mFragments.dispatchPause();
        return;
    }

    public void onPictureInPictureModeChanged(boolean p2)
    {
        this.mFragments.dispatchPictureInPictureModeChanged(p2);
        return;
    }

    protected void onPostResume()
    {
        super.onPostResume();
        this.mHandler.removeMessages(2);
        this.onResumeFragments();
        this.mFragments.execPendingActions();
        return;
    }

    protected boolean onPrepareOptionsPanel(android.view.View p2, android.view.Menu p3)
    {
        return super.onPreparePanel(0, p2, p3);
    }

    public boolean onPreparePanel(int p3, android.view.View p4, android.view.Menu p5)
    {
        if ((p3 != 0) || (p5 == null)) {
            int v0_1 = super.onPreparePanel(p3, p4, p5);
        } else {
            if (this.mOptionsMenuInvalidated) {
                this.mOptionsMenuInvalidated = 0;
                p5.clear();
                this.onCreatePanelMenu(p3, p5);
            }
            v0_1 = (this.onPrepareOptionsPanel(p4, p5) | this.mFragments.dispatchPrepareOptionsMenu(p5));
        }
        return v0_1;
    }

    void onReallyStop()
    {
        this.mFragments.doLoaderStop(this.mRetaining);
        this.mFragments.dispatchReallyStop();
        return;
    }

    public void onRequestPermissionsResult(int p7, String[] p8, int[] p9)
    {
        int v1_0 = ((p7 >> 16) & 65535);
        if (v1_0 != 0) {
            int v1_1 = (v1_0 - 1);
            String v2_1 = ((String) this.mPendingFragmentActivityResults.get(v1_1));
            this.mPendingFragmentActivityResults.remove(v1_1);
            if (v2_1 != null) {
                android.support.v4.app.Fragment v0 = this.mFragments.findFragmentByWho(v2_1);
                if (v0 != null) {
                    v0.onRequestPermissionsResult((p7 & 65535), p8, p9);
                } else {
                    android.util.Log.w("FragmentActivity", new StringBuilder().append("Activity result no fragment exists for who: ").append(v2_1).toString());
                }
            } else {
                android.util.Log.w("FragmentActivity", "Activity result delivered for unknown Fragment.");
            }
        }
        return;
    }

    protected void onResume()
    {
        super.onResume();
        this.mHandler.sendEmptyMessage(2);
        this.mResumed = 1;
        this.mFragments.execPendingActions();
        return;
    }

    protected void onResumeFragments()
    {
        this.mFragments.dispatchResume();
        return;
    }

    public Object onRetainCustomNonConfigurationInstance()
    {
        return 0;
    }

    public final Object onRetainNonConfigurationInstance()
    {
        if (this.mStopped) {
            this.doReallyStop(1);
        }
        int v3_1;
        Object v0 = this.onRetainCustomNonConfigurationInstance();
        android.support.v4.app.FragmentManagerNonConfig v1 = this.mFragments.retainNestedNonConfig();
        android.support.v4.util.SimpleArrayMap v2 = this.mFragments.retainLoaderNonConfig();
        if ((v1 != null) || ((v2 != null) || (v0 != null))) {
            v3_1 = new android.support.v4.app.FragmentActivity$NonConfigurationInstances();
            v3_1.custom = v0;
            v3_1.fragments = v1;
            v3_1.loaders = v2;
        } else {
            v3_1 = 0;
        }
        return v3_1;
    }

    protected void onSaveInstanceState(android.os.Bundle p7)
    {
        super.onSaveInstanceState(p7);
        android.os.Parcelable v2 = this.mFragments.saveAllState();
        if (v2 != null) {
            p7.putParcelable("android:support:fragments", v2);
        }
        if (this.mPendingFragmentActivityResults.size() > 0) {
            p7.putInt("android:support:next_request_index", this.mNextCandidateRequestIndex);
            int[] v3 = new int[this.mPendingFragmentActivityResults.size()];
            String[] v0 = new String[this.mPendingFragmentActivityResults.size()];
            int v1 = 0;
            while (v1 < this.mPendingFragmentActivityResults.size()) {
                v3[v1] = this.mPendingFragmentActivityResults.keyAt(v1);
                v0[v1] = ((String) this.mPendingFragmentActivityResults.valueAt(v1));
                v1++;
            }
            p7.putIntArray("android:support:request_indicies", v3);
            p7.putStringArray("android:support:request_fragment_who", v0);
        }
        return;
    }

    protected void onStart()
    {
        super.onStart();
        this.mStopped = 0;
        this.mReallyStopped = 0;
        this.mHandler.removeMessages(1);
        if (!this.mCreated) {
            this.mCreated = 1;
            this.mFragments.dispatchActivityCreated();
        }
        this.mFragments.noteStateNotSaved();
        this.mFragments.execPendingActions();
        this.mFragments.doLoaderStart();
        this.mFragments.dispatchStart();
        this.mFragments.reportLoaderStart();
        return;
    }

    public void onStateNotSaved()
    {
        this.mFragments.noteStateNotSaved();
        return;
    }

    protected void onStop()
    {
        super.onStop();
        this.mStopped = 1;
        this.mHandler.sendEmptyMessage(1);
        this.mFragments.dispatchStop();
        return;
    }

    void requestPermissionsFromFragment(android.support.v4.app.Fragment p5, String[] p6, int p7)
    {
        if (p7 != -1) {
            android.support.v4.app.FragmentActivity.checkForValidRequestCode(p7);
            try {
                this.mRequestedPermissionsFromFragment = 1;
                android.support.v4.app.ActivityCompat.requestPermissions(this, p6, (((this.allocateRequestIndex(p5) + 1) << 16) + (65535 & p7)));
                this.mRequestedPermissionsFromFragment = 0;
            } catch (Throwable v1_2) {
                this.mRequestedPermissionsFromFragment = 0;
                throw v1_2;
            }
        } else {
            android.support.v4.app.ActivityCompat.requestPermissions(this, p6, p7);
        }
        return;
    }

    public void setEnterSharedElementCallback(android.support.v4.app.SharedElementCallback p1)
    {
        android.support.v4.app.ActivityCompat.setEnterSharedElementCallback(this, p1);
        return;
    }

    public void setExitSharedElementCallback(android.support.v4.app.SharedElementCallback p1)
    {
        android.support.v4.app.ActivityCompat.setExitSharedElementCallback(this, p1);
        return;
    }

    public final void setSupportMediaController(android.support.v4.media.session.MediaControllerCompat p3)
    {
        this.mMediaController = p3;
        if (android.os.Build$VERSION.SDK_INT >= 21) {
            android.support.v4.app.ActivityCompatApi21.setMediaController(this, p3.getMediaController());
        }
        return;
    }

    public void startActivityForResult(android.content.Intent p2, int p3)
    {
        if ((!this.mStartedActivityFromFragment) && (p3 != -1)) {
            android.support.v4.app.FragmentActivity.checkForValidRequestCode(p3);
        }
        super.startActivityForResult(p2, p3);
        return;
    }

    public bridge synthetic void startActivityForResult(android.content.Intent p1, int p2, android.os.Bundle p3)
    {
        super.startActivityForResult(p1, p2, p3);
        return;
    }

    public void startActivityFromFragment(android.support.v4.app.Fragment p2, android.content.Intent p3, int p4)
    {
        this.startActivityFromFragment(p2, p3, p4, 0);
        return;
    }

    public void startActivityFromFragment(android.support.v4.app.Fragment p5, android.content.Intent p6, int p7, android.os.Bundle p8)
    {
        this.mStartedActivityFromFragment = 1;
        try {
            if (p7 != -1) {
                android.support.v4.app.FragmentActivity.checkForValidRequestCode(p7);
                android.support.v4.app.ActivityCompat.startActivityForResult(this, p6, (((this.allocateRequestIndex(p5) + 1) << 16) + (65535 & p7)), p8);
                this.mStartedActivityFromFragment = 0;
            } else {
                android.support.v4.app.ActivityCompat.startActivityForResult(this, p6, -1, p8);
                this.mStartedActivityFromFragment = 0;
            }
        } catch (Throwable v1_2) {
            this.mStartedActivityFromFragment = 0;
            throw v1_2;
        }
        return;
    }

    public bridge synthetic void startIntentSenderForResult(android.content.IntentSender p1, int p2, android.content.Intent p3, int p4, int p5, int p6)
    {
        super.startIntentSenderForResult(p1, p2, p3, p4, p5, p6);
        return;
    }

    public bridge synthetic void startIntentSenderForResult(android.content.IntentSender p1, int p2, android.content.Intent p3, int p4, int p5, int p6, android.os.Bundle p7)
    {
        super.startIntentSenderForResult(p1, p2, p3, p4, p5, p6, p7);
        return;
    }

    public void startIntentSenderFromFragment(android.support.v4.app.Fragment p10, android.content.IntentSender p11, int p12, android.content.Intent p13, int p14, int p15, int p16, android.os.Bundle p17)
    {
        this.mStartedIntentSenderFromFragment = 1;
        try {
            if (p12 != -1) {
                android.support.v4.app.FragmentActivity.checkForValidRequestCode(p12);
                android.support.v4.app.ActivityCompat.startIntentSenderForResult(this, p11, (((this.allocateRequestIndex(p10) + 1) << 16) + (65535 & p12)), p13, p14, p15, p16, p17);
                this.mStartedIntentSenderFromFragment = 0;
            } else {
                android.support.v4.app.ActivityCompat.startIntentSenderForResult(this, p11, p12, p13, p14, p15, p16, p17);
                this.mStartedIntentSenderFromFragment = 0;
            }
        } catch (Throwable v0_6) {
            this.mStartedIntentSenderFromFragment = 0;
            throw v0_6;
        }
        return;
    }

    public void supportFinishAfterTransition()
    {
        android.support.v4.app.ActivityCompat.finishAfterTransition(this);
        return;
    }

    public void supportInvalidateOptionsMenu()
    {
        if (android.os.Build$VERSION.SDK_INT < 11) {
            this.mOptionsMenuInvalidated = 1;
        } else {
            android.support.v4.app.ActivityCompatHoneycomb.invalidateOptionsMenu(this);
        }
        return;
    }

    public void supportPostponeEnterTransition()
    {
        android.support.v4.app.ActivityCompat.postponeEnterTransition(this);
        return;
    }

    public void supportStartPostponedEnterTransition()
    {
        android.support.v4.app.ActivityCompat.startPostponedEnterTransition(this);
        return;
    }

    public final void validateRequestPermissionsRequestCode(int p2)
    {
        if ((!this.mRequestedPermissionsFromFragment) && (p2 != -1)) {
            android.support.v4.app.FragmentActivity.checkForValidRequestCode(p2);
        }
        return;
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplKitKat extends android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean {

    NotificationCompat$NotificationCompatImplKitKat()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p29, android.support.v4.app.NotificationCompat$BuilderExtender p30)
    {
        android.support.v4.app.NotificationCompatKitKat$Builder v2_1 = new android.support.v4.app.NotificationCompatKitKat$Builder(p29.mContext, p29.mNotification, p29.resolveTitle(), p29.resolveText(), p29.mContentInfo, p29.mTickerView, p29.mNumber, p29.mContentIntent, p29.mFullScreenIntent, p29.mLargeIcon, p29.mProgressMax, p29.mProgress, p29.mProgressIndeterminate, p29.mShowWhen, p29.mUseChronometer, p29.mPriority, p29.mSubText, p29.mLocalOnly, p29.mPeople, p29.mExtras, p29.mGroupKey, p29.mGroupSummary, p29.mSortKey, p29.mContentView, p29.mBigContentView);
        android.support.v4.app.NotificationCompat.addActionsToBuilder(v2_1, p29.mActions);
        android.support.v4.app.NotificationCompat.addStyleToBuilderJellybean(v2_1, p29.mStyle);
        return p30.build(p29, v2_1);
    }

    public android.support.v4.app.NotificationCompat$Action getAction(android.app.Notification p3, int p4)
    {
        return ((android.support.v4.app.NotificationCompat$Action) android.support.v4.app.NotificationCompatKitKat.getAction(p3, p4, android.support.v4.app.NotificationCompat$Action.FACTORY, android.support.v4.app.RemoteInput.FACTORY));
    }

    public int getActionCount(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.getActionCount(p2);
    }

    public android.os.Bundle getExtras(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.getExtras(p2);
    }

    public String getGroup(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.getGroup(p2);
    }

    public boolean getLocalOnly(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.getLocalOnly(p2);
    }

    public String getSortKey(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.getSortKey(p2);
    }

    public boolean isGroupSummary(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatKitKat.isGroupSummary(p2);
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$ImplKitKat extends android.support.v4.app.NotificationManagerCompat$ImplIceCreamSandwich {

    NotificationManagerCompat$ImplKitKat()
    {
        return;
    }

    public boolean areNotificationsEnabled(android.content.Context p2, android.app.NotificationManager p3)
    {
        return android.support.v4.app.NotificationManagerCompatKitKat.areNotificationsEnabled(p2);
    }
}
package android.support.v4.app;
 class ShareCompat$ShareCompatImplJB extends android.support.v4.app.ShareCompat$ShareCompatImplICS {

    ShareCompat$ShareCompatImplJB()
    {
        return;
    }

    public String escapeHtml(CharSequence p2)
    {
        return android.support.v4.app.ShareCompatJB.escapeHtml(p2);
    }

    boolean shouldAddChooserIntent(android.view.MenuItem p2)
    {
        return 0;
    }
}
package android.support.v4.content;
 class IntentCompat$IntentCompatImplIcsMr1 extends android.support.v4.content.IntentCompat$IntentCompatImplHC {

    IntentCompat$IntentCompatImplIcsMr1()
    {
        return;
    }

    public android.content.Intent makeMainSelectorActivity(String p2, String p3)
    {
        return android.support.v4.content.IntentCompatIcsMr1.makeMainSelectorActivity(p2, p3);
    }
}
package android.support.v4.content.res;
 class ConfigurationHelper$JellybeanMr1Impl extends android.support.v4.content.res.ConfigurationHelper$HoneycombMr2Impl {

    ConfigurationHelper$JellybeanMr1Impl()
    {
        return;
    }

    public int getDensityDpi(android.content.res.Resources p2)
    {
        return android.support.v4.content.res.ConfigurationHelperJellybeanMr1.getDensityDpi(p2);
    }
}
package android.support.v4.graphics;
 class BitmapCompat$JbMr2BitmapCompatImpl extends android.support.v4.graphics.BitmapCompat$HcMr1BitmapCompatImpl {

    BitmapCompat$JbMr2BitmapCompatImpl()
    {
        return;
    }

    public boolean hasMipMap(android.graphics.Bitmap p2)
    {
        return android.support.v4.graphics.BitmapCompatJellybeanMR2.hasMipMap(p2);
    }

    public void setHasMipMap(android.graphics.Bitmap p1, boolean p2)
    {
        android.support.v4.graphics.BitmapCompatJellybeanMR2.setHasMipMap(p1, p2);
        return;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$JellybeanMr1DrawableImpl extends android.support.v4.graphics.drawable.DrawableCompat$HoneycombDrawableImpl {

    DrawableCompat$JellybeanMr1DrawableImpl()
    {
        return;
    }

    public int getLayoutDirection(android.graphics.drawable.Drawable p2)
    {
        int v0 = android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.getLayoutDirection(p2);
        if (v0 < 0) {
            v0 = 0;
        }
        return v0;
    }

    public boolean setLayoutDirection(android.graphics.drawable.Drawable p2, int p3)
    {
        return android.support.v4.graphics.drawable.DrawableCompatJellybeanMr1.setLayoutDirection(p2, p3);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperKitKat extends android.support.v4.graphics.drawable.DrawableWrapperHoneycomb {

    DrawableWrapperKitKat(android.graphics.drawable.Drawable p1)
    {
        super(p1);
        return;
    }

    DrawableWrapperKitKat(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public boolean isAutoMirrored()
    {
        return this.mDrawable.isAutoMirrored();
    }

    android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState mutateConstantState()
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperKitKat$DrawableWrapperStateKitKat(this.mState, 0);
    }

    public void setAutoMirrored(boolean p2)
    {
        this.mDrawable.setAutoMirrored(p2);
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserCompat$MediaBrowserImplApi24 extends android.support.v4.media.MediaBrowserCompat$MediaBrowserImplApi23 {

    public MediaBrowserCompat$MediaBrowserImplApi24(android.content.Context p1, android.content.ComponentName p2, android.support.v4.media.MediaBrowserCompat$ConnectionCallback p3, android.os.Bundle p4)
    {
        super(p1, p2, p3, p4);
        return;
    }

    public void subscribe(String p3, android.os.Bundle p4, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p5)
    {
        if (p4 != null) {
            android.support.v4.media.MediaBrowserCompatApi24.subscribe(this.mBrowserObj, p3, p4, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$200(p5));
        } else {
            android.support.v4.media.MediaBrowserCompatApi21.subscribe(this.mBrowserObj, p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$200(p5));
        }
        return;
    }

    public void unsubscribe(String p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback p4)
    {
        if (p4 != null) {
            android.support.v4.media.MediaBrowserCompatApi24.unsubscribe(this.mBrowserObj, p3, android.support.v4.media.MediaBrowserCompat$SubscriptionCallback.access$200(p4));
        } else {
            android.support.v4.media.MediaBrowserCompatApi21.unsubscribe(this.mBrowserObj, p3);
        }
        return;
    }
}
package android.support.v4.media;
 class MediaBrowserServiceCompat$MediaBrowserServiceImplApi24 extends android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi23 implements android.support.v4.media.MediaBrowserServiceCompatApi24$ServiceCompatProxy {
    final synthetic android.support.v4.media.MediaBrowserServiceCompat this$0;

    MediaBrowserServiceCompat$MediaBrowserServiceImplApi24(android.support.v4.media.MediaBrowserServiceCompat p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public android.os.Bundle getBrowserRootHints()
    {
        return android.support.v4.media.MediaBrowserServiceCompatApi24.getBrowserRootHints(this.mServiceObj);
    }

    public void notifyChildrenChanged(String p2, android.os.Bundle p3)
    {
        if (p3 != null) {
            android.support.v4.media.MediaBrowserServiceCompatApi24.notifyChildrenChanged(this.mServiceObj, p2, p3);
        } else {
            android.support.v4.media.MediaBrowserServiceCompatApi21.notifyChildrenChanged(this.mServiceObj, p2);
        }
        return;
    }

    public void onCreate()
    {
        this.mServiceObj = android.support.v4.media.MediaBrowserServiceCompatApi24.createService(this.this$0, this);
        android.support.v4.media.MediaBrowserServiceCompatApi21.onCreate(this.mServiceObj);
        return;
    }

    public void onLoadChildren(String p3, android.support.v4.media.MediaBrowserServiceCompatApi24$ResultWrapper p4, android.os.Bundle p5)
    {
        this.this$0.onLoadChildren(p3, new android.support.v4.media.MediaBrowserServiceCompat$MediaBrowserServiceImplApi24$1(this, p3, p4), p5);
        return;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$MediaControllerImplApi24 extends android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi23 {

    public MediaControllerCompat$MediaControllerImplApi24(android.content.Context p1, android.support.v4.media.session.MediaSessionCompat$Token p2)
    {
        super(p1, p2);
        return;
    }

    public MediaControllerCompat$MediaControllerImplApi24(android.content.Context p1, android.support.v4.media.session.MediaSessionCompat p2)
    {
        super(p1, p2);
        return;
    }

    public android.support.v4.media.session.MediaControllerCompat$TransportControls getTransportControls()
    {
        int v1_1;
        Object v0 = android.support.v4.media.session.MediaControllerCompatApi21.getTransportControls(this.mControllerObj);
        if (v0 == null) {
            v1_1 = 0;
        } else {
            v1_1 = new android.support.v4.media.session.MediaControllerCompat$TransportControlsApi24(v0);
        }
        return v1_1;
    }
}
package android.support.v4.media.session;
 class MediaControllerCompat$TransportControlsApi24 extends android.support.v4.media.session.MediaControllerCompat$TransportControlsApi23 {

    public MediaControllerCompat$TransportControlsApi24(Object p1)
    {
        super(p1);
        return;
    }

    public void prepare()
    {
        android.support.v4.media.session.MediaControllerCompatApi24$TransportControls.prepare(this.mControlsObj);
        return;
    }

    public void prepareFromMediaId(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi24$TransportControls.prepareFromMediaId(this.mControlsObj, p2, p3);
        return;
    }

    public void prepareFromSearch(String p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi24$TransportControls.prepareFromSearch(this.mControlsObj, p2, p3);
        return;
    }

    public void prepareFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        android.support.v4.media.session.MediaControllerCompatApi24$TransportControls.prepareFromUri(this.mControlsObj, p2, p3);
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$Callback$StubApi21 implements android.support.v4.media.session.MediaSessionCompatApi21$Callback {
    final synthetic android.support.v4.media.session.MediaSessionCompat$Callback this$0;

    MediaSessionCompat$Callback$StubApi21(android.support.v4.media.session.MediaSessionCompat$Callback p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onCommand(String p2, android.os.Bundle p3, android.os.ResultReceiver p4)
    {
        this.this$0.onCommand(p2, p3, p4);
        return;
    }

    public void onCustomAction(String p6, android.os.Bundle p7)
    {
        if (!p6.equals("android.support.v4.media.session.action.PLAY_FROM_URI")) {
            if (!p6.equals("android.support.v4.media.session.action.PREPARE")) {
                if (!p6.equals("android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID")) {
                    if (!p6.equals("android.support.v4.media.session.action.PREPARE_FROM_SEARCH")) {
                        if (!p6.equals("android.support.v4.media.session.action.PREPARE_FROM_URI")) {
                            this.this$0.onCustomAction(p6, p7);
                        } else {
                            this.this$0.onPrepareFromUri(((android.net.Uri) p7.getParcelable("android.support.v4.media.session.action.ARGUMENT_URI")), p7.getBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS"));
                        }
                    } else {
                        this.this$0.onPrepareFromSearch(p7.getString("android.support.v4.media.session.action.ARGUMENT_QUERY"), p7.getBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS"));
                    }
                } else {
                    this.this$0.onPrepareFromMediaId(p7.getString("android.support.v4.media.session.action.ARGUMENT_MEDIA_ID"), p7.getBundle("android.support.v4.media.session.action.ARGUMENT_EXTRAS"));
                }
            } else {
                this.this$0.onPrepare();
            }
        } else {
            this.this$0.onPlayFromUri(((android.net.Uri) p7.getParcelable("android.support.v4.media.session.action.ARGUMENT_URI")), ((android.os.Bundle) p7.getParcelable("android.support.v4.media.session.action.ARGUMENT_EXTRAS")));
        }
        return;
    }

    public void onFastForward()
    {
        this.this$0.onFastForward();
        return;
    }

    public boolean onMediaButtonEvent(android.content.Intent p2)
    {
        return this.this$0.onMediaButtonEvent(p2);
    }

    public void onPause()
    {
        this.this$0.onPause();
        return;
    }

    public void onPlay()
    {
        this.this$0.onPlay();
        return;
    }

    public void onPlayFromMediaId(String p2, android.os.Bundle p3)
    {
        this.this$0.onPlayFromMediaId(p2, p3);
        return;
    }

    public void onPlayFromSearch(String p2, android.os.Bundle p3)
    {
        this.this$0.onPlayFromSearch(p2, p3);
        return;
    }

    public void onRewind()
    {
        this.this$0.onRewind();
        return;
    }

    public void onSeekTo(long p2)
    {
        this.this$0.onSeekTo(p2);
        return;
    }

    public void onSetRating(Object p3)
    {
        this.this$0.onSetRating(android.support.v4.media.RatingCompat.fromRating(p3));
        return;
    }

    public void onSkipToNext()
    {
        this.this$0.onSkipToNext();
        return;
    }

    public void onSkipToPrevious()
    {
        this.this$0.onSkipToPrevious();
        return;
    }

    public void onSkipToQueueItem(long p2)
    {
        this.this$0.onSkipToQueueItem(p2);
        return;
    }

    public void onStop()
    {
        this.this$0.onStop();
        return;
    }
}
package android.support.v4.media.session;
public interface MediaSessionCompatApi23$Callback implements android.support.v4.media.session.MediaSessionCompatApi21$Callback {

    public abstract void onPlayFromUri();
}
package android.support.v4.net;
 class ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl extends android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl {

    ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl()
    {
        return;
    }

    public boolean isActiveNetworkMetered(android.net.ConnectivityManager p2)
    {
        return android.support.v4.net.ConnectivityManagerCompatJellyBean.isActiveNetworkMetered(p2);
    }
}
package android.support.v4.print;
 class PrintHelperApi24 extends android.support.v4.print.PrintHelperApi23 {

    PrintHelperApi24(android.content.Context p2)
    {
        super(p2);
        super.mIsMinMarginsHandlingCorrect = 1;
        super.mPrintActivityRespectsOrientation = 1;
        return;
    }
}
package android.support.v4.view;
 class AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl extends android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl {

    AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl()
    {
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(Object p3, android.view.View p4)
    {
        int v1_0;
        Object v0 = android.support.v4.view.AccessibilityDelegateCompatJellyBean.getAccessibilityNodeProvider(p3, p4);
        if (v0 == null) {
            v1_0 = 0;
        } else {
            v1_0 = new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat(v0);
        }
        return v1_0;
    }

    public Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat p2)
    {
        return android.support.v4.view.AccessibilityDelegateCompatJellyBean.newAccessibilityDelegateBridge(new android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1(this, p2));
    }

    public boolean performAccessibilityAction(Object p2, android.view.View p3, int p4, android.os.Bundle p5)
    {
        return android.support.v4.view.AccessibilityDelegateCompatJellyBean.performAccessibilityAction(p2, p3, p4, p5);
    }
}
package android.support.v4.view;
 class LayoutInflaterCompat$LayoutInflaterCompatImplV21 extends android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV11 {

    LayoutInflaterCompat$LayoutInflaterCompatImplV21()
    {
        return;
    }

    public void setFactory(android.view.LayoutInflater p1, android.support.v4.view.LayoutInflaterFactory p2)
    {
        android.support.v4.view.LayoutInflaterCompatLollipop.setFactory(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class MotionEventCompat$ICSMotionEventVersionImpl extends android.support.v4.view.MotionEventCompat$HoneycombMr1MotionEventVersionImpl {

    MotionEventCompat$ICSMotionEventVersionImpl()
    {
        return;
    }

    public int getButtonState(android.view.MotionEvent p2)
    {
        return android.support.v4.view.MotionEventCompatICS.getButtonState(p2);
    }
}
package android.support.v4.view;
 class ViewCompat$ICSViewCompatImpl extends android.support.v4.view.ViewCompat$HCViewCompatImpl {
    static boolean accessibilityDelegateCheckFailed;
    static reflect.Field mAccessibilityDelegateField;

    static ViewCompat$ICSViewCompatImpl()
    {
        android.support.v4.view.ViewCompat$ICSViewCompatImpl.accessibilityDelegateCheckFailed = 0;
        return;
    }

    ViewCompat$ICSViewCompatImpl()
    {
        return;
    }

    public android.support.v4.view.ViewPropertyAnimatorCompat animate(android.view.View p3)
    {
        if (this.mViewPropertyAnimatorCompatMap == null) {
            this.mViewPropertyAnimatorCompatMap = new java.util.WeakHashMap();
        }
        android.support.v4.view.ViewPropertyAnimatorCompat v0_1 = ((android.support.v4.view.ViewPropertyAnimatorCompat) this.mViewPropertyAnimatorCompatMap.get(p3));
        if (v0_1 == null) {
            v0_1 = new android.support.v4.view.ViewPropertyAnimatorCompat(p3);
            this.mViewPropertyAnimatorCompatMap.put(p3, v0_1);
        }
        return v0_1;
    }

    public boolean canScrollHorizontally(android.view.View p2, int p3)
    {
        return android.support.v4.view.ViewCompatICS.canScrollHorizontally(p2, p3);
    }

    public boolean canScrollVertically(android.view.View p2, int p3)
    {
        return android.support.v4.view.ViewCompatICS.canScrollVertically(p2, p3);
    }

    public boolean hasAccessibilityDelegate(android.view.View p6)
    {
        int v1 = 1;
        int v2 = 0;
        if (!android.support.v4.view.ViewCompat$ICSViewCompatImpl.accessibilityDelegateCheckFailed) {
            if (android.support.v4.view.ViewCompat$ICSViewCompatImpl.mAccessibilityDelegateField == null) {
                try {
                    android.support.v4.view.ViewCompat$ICSViewCompatImpl.mAccessibilityDelegateField = android.view.View.getDeclaredField("mAccessibilityDelegate");
                    android.support.v4.view.ViewCompat$ICSViewCompatImpl.mAccessibilityDelegateField.setAccessible(1);
                } catch (Throwable v0) {
                    android.support.v4.view.ViewCompat$ICSViewCompatImpl.accessibilityDelegateCheckFailed = 1;
                    return v2;
                }
                if (android.support.v4.view.ViewCompat$ICSViewCompatImpl.mAccessibilityDelegateField.get(p6) == null) {
                    v1 = 0;
                }
                v2 = v1;
                return v2;
            }
            try {
            } catch (Throwable v0) {
                android.support.v4.view.ViewCompat$ICSViewCompatImpl.accessibilityDelegateCheckFailed = 1;
            }
        }
        return v2;
    }

    public void onInitializeAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompatICS.onInitializeAccessibilityEvent(p1, p2);
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.View p2, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat p3)
    {
        android.support.v4.view.ViewCompatICS.onInitializeAccessibilityNodeInfo(p2, p3.getInfo());
        return;
    }

    public void onPopulateAccessibilityEvent(android.view.View p1, android.view.accessibility.AccessibilityEvent p2)
    {
        android.support.v4.view.ViewCompatICS.onPopulateAccessibilityEvent(p1, p2);
        return;
    }

    public void setAccessibilityDelegate(android.view.View p2, android.support.v4.view.AccessibilityDelegateCompat p3)
    {
        Object v0;
        if (p3 != null) {
            v0 = p3.getBridge();
        } else {
            v0 = 0;
        }
        android.support.v4.view.ViewCompatICS.setAccessibilityDelegate(p2, v0);
        return;
    }

    public void setFitsSystemWindows(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompatICS.setFitsSystemWindows(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewConfigurationCompat$IcsViewConfigurationVersionImpl extends android.support.v4.view.ViewConfigurationCompat$HoneycombViewConfigurationVersionImpl {

    ViewConfigurationCompat$IcsViewConfigurationVersionImpl()
    {
        return;
    }

    public boolean hasPermanentMenuKey(android.view.ViewConfiguration p2)
    {
        return android.support.v4.view.ViewConfigurationCompatICS.hasPermanentMenuKey(p2);
    }
}
package android.support.v4.view;
 class ViewGroupCompat$ViewGroupCompatIcsImpl extends android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl {

    ViewGroupCompat$ViewGroupCompatIcsImpl()
    {
        return;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup p2, android.view.View p3, android.view.accessibility.AccessibilityEvent p4)
    {
        return android.support.v4.view.ViewGroupCompatIcs.onRequestSendAccessibilityEvent(p2, p3, p4);
    }
}
package android.support.v4.view;
 class ViewParentCompat$ViewParentCompatKitKatImpl extends android.support.v4.view.ViewParentCompat$ViewParentCompatICSImpl {

    ViewParentCompat$ViewParentCompatKitKatImpl()
    {
        return;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        android.support.v4.view.ViewParentCompatKitKat.notifySubtreeAccessibilityStateChanged(p1, p2, p3, p4);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$JBViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat$ICSViewPropertyAnimatorCompatImpl {

    ViewPropertyAnimatorCompat$JBViewPropertyAnimatorCompatImpl()
    {
        return;
    }

    public void setListener(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, android.support.v4.view.ViewPropertyAnimatorListener p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatJB.setListener(p2, p3);
        return;
    }

    public void withEndAction(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, Runnable p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatJB.withEndAction(p2, p3);
        return;
    }

    public void withLayer(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatJB.withLayer(p2);
        return;
    }

    public void withStartAction(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, Runnable p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatJB.withStartAction(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class WindowInsetsCompat$WindowInsetsCompatApi21Impl extends android.support.v4.view.WindowInsetsCompat$WindowInsetsCompatApi20Impl {

    WindowInsetsCompat$WindowInsetsCompatApi21Impl()
    {
        return;
    }

    public android.support.v4.view.WindowInsetsCompat consumeStableInsets(Object p3)
    {
        return new android.support.v4.view.WindowInsetsCompat(android.support.v4.view.WindowInsetsCompatApi21.consumeStableInsets(p3));
    }

    public int getStableInsetBottom(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.getStableInsetBottom(p2);
    }

    public int getStableInsetLeft(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.getStableInsetLeft(p2);
    }

    public int getStableInsetRight(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.getStableInsetRight(p2);
    }

    public int getStableInsetTop(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.getStableInsetTop(p2);
    }

    public boolean hasStableInsets(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.hasStableInsets(p2);
    }

    public boolean isConsumed(Object p2)
    {
        return android.support.v4.view.WindowInsetsCompatApi21.isConsumed(p2);
    }

    public android.support.v4.view.WindowInsetsCompat replaceSystemWindowInsets(Object p3, android.graphics.Rect p4)
    {
        return new android.support.v4.view.WindowInsetsCompat(android.support.v4.view.WindowInsetsCompatApi21.replaceSystemWindowInsets(p3, p4));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompat$AccessibilityEventJellyBeanImpl extends android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl {

    AccessibilityEventCompat$AccessibilityEventJellyBeanImpl()
    {
        return;
    }

    public int getAction(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatJellyBean.getAction(p2);
    }

    public int getMovementGranularity(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatJellyBean.getMovementGranularity(p2);
    }

    public void setAction(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompatJellyBean.setAction(p1, p2);
        return;
    }

    public void setMovementGranularity(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompatJellyBean.setMovementGranularity(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityManagerCompat$AccessibilityManagerKitKatImpl extends android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl {

    AccessibilityManagerCompat$AccessibilityManagerKitKatImpl()
    {
        return;
    }

    public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat.addTouchExplorationStateChangeListener(p2, this.newTouchExplorationStateChangeListener(p3));
    }

    public android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper newTouchExplorationStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p3)
    {
        return new android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat$TouchExplorationStateChangeListenerWrapper(p3, new android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerKitKatImpl$1(this, p3));
    }

    public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager p2, android.support.v4.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener p3)
    {
        return android.support.v4.view.accessibility.AccessibilityManagerCompatKitKat.removeTouchExplorationStateChangeListener(p2, this.newTouchExplorationStateChangeListener(p3));
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl()
    {
        return;
    }

    public void addChild(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.addChild(p1, p2, p3);
        return;
    }

    public Object findFocus(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.findFocus(p2, p3);
    }

    public Object focusSearch(Object p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.focusSearch(p2, p3);
    }

    public int getMovementGranularities(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.getMovementGranularities(p2);
    }

    public boolean isAccessibilityFocused(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.isAccessibilityFocused(p2);
    }

    public boolean isVisibleToUser(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.isVisibleToUser(p2);
    }

    public Object obtain(android.view.View p2, int p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.obtain(p2, p3);
    }

    public boolean performAction(Object p2, int p3, android.os.Bundle p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.performAction(p2, p3, p4);
    }

    public void setAccessibilityFocused(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.setAccesibilityFocused(p1, p2);
        return;
    }

    public void setMovementGranularities(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.setMovementGranularities(p1, p2);
        return;
    }

    public void setParent(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.setParent(p1, p2, p3);
        return;
    }

    public void setSource(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.setSource(p1, p2, p3);
        return;
    }

    public void setVisibleToUser(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean.setVisibleToUser(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl extends android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl {

    AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl()
    {
        return;
    }

    public int getMaxScrollX(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1.getMaxScrollX(p2);
    }

    public int getMaxScrollY(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1.getMaxScrollY(p2);
    }

    public void setMaxScrollX(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1.setMaxScrollX(p1, p2);
        return;
    }

    public void setMaxScrollY(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1.setMaxScrollY(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi24Impl extends android.support.v4.view.accessibility.AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi21Impl {

    AccessibilityWindowInfoCompat$AccessibilityWindowInfoApi24Impl()
    {
        return;
    }

    public Object getAnchor(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi24.getAnchor(p2);
    }

    public CharSequence getTitle(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityWindowInfoCompatApi24.getTitle(p2);
    }
}
package android.support.v4.widget;
 class CompoundButtonCompat$Api23CompoundButtonImpl extends android.support.v4.widget.CompoundButtonCompat$LollipopCompoundButtonImpl {

    CompoundButtonCompat$Api23CompoundButtonImpl()
    {
        return;
    }

    public android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton p2)
    {
        return android.support.v4.widget.CompoundButtonCompatApi23.getButtonDrawable(p2);
    }
}
package android.support.v4.widget;
 class PopupWindowCompat$Api21PopupWindowImpl extends android.support.v4.widget.PopupWindowCompat$KitKatPopupWindowImpl {

    PopupWindowCompat$Api21PopupWindowImpl()
    {
        return;
    }

    public boolean getOverlapAnchor(android.widget.PopupWindow p2)
    {
        return android.support.v4.widget.PopupWindowCompatApi21.getOverlapAnchor(p2);
    }

    public void setOverlapAnchor(android.widget.PopupWindow p1, boolean p2)
    {
        android.support.v4.widget.PopupWindowCompatApi21.setOverlapAnchor(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class SearchViewCompat$SearchViewCompatIcsImpl extends android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl {

    SearchViewCompat$SearchViewCompatIcsImpl()
    {
        return;
    }

    public android.view.View newSearchView(android.content.Context p2)
    {
        return android.support.v4.widget.SearchViewCompatIcs.newSearchView(p2);
    }

    public void setImeOptions(android.view.View p1, int p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatIcs.setImeOptions(p1, p2);
        return;
    }

    public void setInputType(android.view.View p1, int p2)
    {
        this.checkIfLegalArg(p1);
        android.support.v4.widget.SearchViewCompatIcs.setInputType(p1, p2);
        return;
    }
}
package android.support.v4.widget;
public class SimpleCursorAdapter extends android.support.v4.widget.ResourceCursorAdapter {
    private android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter;
    protected int[] mFrom;
    String[] mOriginalFrom;
    private int mStringConversionColumn;
    protected int[] mTo;
    private android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder;

    public SimpleCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, String[] p5, int[] p6)
    {
        super(p2, p3, p4);
        super.mStringConversionColumn = -1;
        super.mTo = p6;
        super.mOriginalFrom = p5;
        super.findColumns(p4, p5);
        return;
    }

    public SimpleCursorAdapter(android.content.Context p2, int p3, android.database.Cursor p4, String[] p5, int[] p6, int p7)
    {
        super(p2, p3, p4, p7);
        super.mStringConversionColumn = -1;
        super.mTo = p6;
        super.mOriginalFrom = p5;
        super.findColumns(p4, p5);
        return;
    }

    private void findColumns(android.database.Cursor p5, String[] p6)
    {
        if (p5 == null) {
            this.mFrom = 0;
        } else {
            int v0 = p6.length;
            if ((this.mFrom == null) || (this.mFrom.length != v0)) {
                int[] v2_5 = new int[v0];
                this.mFrom = v2_5;
            }
            int v1 = 0;
            while (v1 < v0) {
                this.mFrom[v1] = p5.getColumnIndexOrThrow(p6[v1]);
                v1++;
            }
        }
        return;
    }

    public void bindView(android.view.View p12, android.content.Context p13, android.database.Cursor p14)
    {
        android.support.v4.widget.SimpleCursorAdapter$ViewBinder v0 = this.mViewBinder;
        int v2 = this.mTo.length;
        int[] v3 = this.mFrom;
        int[] v6 = this.mTo;
        int v4 = 0;
        while (v4 < v2) {
            android.widget.ImageView v7_0 = p12.findViewById(v6[v4]);
            if (v7_0 != null) {
                boolean v1 = 0;
                if (v0 != null) {
                    v1 = v0.setViewValue(v7_0, p14, v3[v4]);
                }
                if (!v1) {
                    String v5 = p14.getString(v3[v4]);
                    if (v5 == null) {
                        v5 = "";
                    }
                    if (!(v7_0 instanceof android.widget.TextView)) {
                        if (!(v7_0 instanceof android.widget.ImageView)) {
                            throw new IllegalStateException(new StringBuilder().append(v7_0.getClass().getName()).append(" is not a ").append(" view that can be bounds by this SimpleCursorAdapter").toString());
                        } else {
                            this.setViewImage(((android.widget.ImageView) v7_0), v5);
                        }
                    } else {
                        this.setViewText(((android.widget.TextView) v7_0), v5);
                    }
                }
            }
            v4++;
        }
        return;
    }

    public void changeCursorAndColumns(android.database.Cursor p2, String[] p3, int[] p4)
    {
        this.mOriginalFrom = p3;
        this.mTo = p4;
        this.findColumns(p2, this.mOriginalFrom);
        super.changeCursor(p2);
        return;
    }

    public CharSequence convertToString(android.database.Cursor p3)
    {
        CharSequence v0_2;
        if (this.mCursorToStringConverter == null) {
            if (this.mStringConversionColumn <= -1) {
                v0_2 = super.convertToString(p3);
            } else {
                v0_2 = p3.getString(this.mStringConversionColumn);
            }
        } else {
            v0_2 = this.mCursorToStringConverter.convertToString(p3);
        }
        return v0_2;
    }

    public android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()
    {
        return this.mCursorToStringConverter;
    }

    public int getStringConversionColumn()
    {
        return this.mStringConversionColumn;
    }

    public android.support.v4.widget.SimpleCursorAdapter$ViewBinder getViewBinder()
    {
        return this.mViewBinder;
    }

    public void setCursorToStringConverter(android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter p1)
    {
        this.mCursorToStringConverter = p1;
        return;
    }

    public void setStringConversionColumn(int p1)
    {
        this.mStringConversionColumn = p1;
        return;
    }

    public void setViewBinder(android.support.v4.widget.SimpleCursorAdapter$ViewBinder p1)
    {
        this.mViewBinder = p1;
        return;
    }

    public void setViewImage(android.widget.ImageView p3, String p4)
    {
        try {
            p3.setImageResource(Integer.parseInt(p4));
        } catch (NumberFormatException v0) {
            p3.setImageURI(android.net.Uri.parse(p4));
        }
        return;
    }

    public void setViewText(android.widget.TextView p1, String p2)
    {
        p1.setText(p2);
        return;
    }

    public android.database.Cursor swapCursor(android.database.Cursor p2)
    {
        this.findColumns(p2, this.mOriginalFrom);
        return super.swapCursor(p2);
    }
}
package android.support.v4.widget;
 class TextViewCompat$JbMr1TextViewCompatImpl extends android.support.v4.widget.TextViewCompat$JbTextViewCompatImpl {

    TextViewCompat$JbMr1TextViewCompatImpl()
    {
        return;
    }

    public android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatJbMr1.getCompoundDrawablesRelative(p2);
    }

    public void setCompoundDrawablesRelative(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        android.support.v4.widget.TextViewCompatJbMr1.setCompoundDrawablesRelative(p1, p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, int p2, int p3, int p4, int p5)
    {
        android.support.v4.widget.TextViewCompatJbMr1.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        android.support.v4.widget.TextViewCompatJbMr1.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4, p5);
        return;
    }
}
package android.support.v4.accessibilityservice;
 class AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanMr2Impl extends android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanImpl {

    AccessibilityServiceInfoCompat$AccessibilityServiceInfoJellyBeanMr2Impl()
    {
        return;
    }

    public int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo p2)
    {
        return android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatJellyBeanMr2.getCapabilities(p2);
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplApi20 extends android.support.v4.app.NotificationCompat$NotificationCompatImplKitKat {

    NotificationCompat$NotificationCompatImplApi20()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p30, android.support.v4.app.NotificationCompat$BuilderExtender p31)
    {
        android.support.v4.app.NotificationCompatApi20$Builder v2_1 = new android.support.v4.app.NotificationCompatApi20$Builder(p30.mContext, p30.mNotification, p30.resolveTitle(), p30.resolveText(), p30.mContentInfo, p30.mTickerView, p30.mNumber, p30.mContentIntent, p30.mFullScreenIntent, p30.mLargeIcon, p30.mProgressMax, p30.mProgress, p30.mProgressIndeterminate, p30.mShowWhen, p30.mUseChronometer, p30.mPriority, p30.mSubText, p30.mLocalOnly, p30.mPeople, p30.mExtras, p30.mGroupKey, p30.mGroupSummary, p30.mSortKey, p30.mContentView, p30.mBigContentView);
        android.support.v4.app.NotificationCompat.addActionsToBuilder(v2_1, p30.mActions);
        android.support.v4.app.NotificationCompat.addStyleToBuilderJellybean(v2_1, p30.mStyle);
        android.app.Notification v28 = p31.build(p30, v2_1);
        if (p30.mStyle != null) {
            p30.mStyle.addCompatExtras(this.getExtras(v28));
        }
        return v28;
    }

    public android.support.v4.app.NotificationCompat$Action getAction(android.app.Notification p3, int p4)
    {
        return ((android.support.v4.app.NotificationCompat$Action) android.support.v4.app.NotificationCompatApi20.getAction(p3, p4, android.support.v4.app.NotificationCompat$Action.FACTORY, android.support.v4.app.RemoteInput.FACTORY));
    }

    public android.support.v4.app.NotificationCompat$Action[] getActionsFromParcelableArrayList(java.util.ArrayList p3)
    {
        return ((android.support.v4.app.NotificationCompat$Action[]) ((android.support.v4.app.NotificationCompat$Action[]) android.support.v4.app.NotificationCompatApi20.getActionsFromParcelableArrayList(p3, android.support.v4.app.NotificationCompat$Action.FACTORY, android.support.v4.app.RemoteInput.FACTORY)));
    }

    public String getGroup(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatApi20.getGroup(p2);
    }

    public boolean getLocalOnly(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatApi20.getLocalOnly(p2);
    }

    public java.util.ArrayList getParcelableArrayListForActions(android.support.v4.app.NotificationCompat$Action[] p2)
    {
        return android.support.v4.app.NotificationCompatApi20.getParcelableArrayListForActions(p2);
    }

    public String getSortKey(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatApi20.getSortKey(p2);
    }

    public boolean isGroupSummary(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatApi20.isGroupSummary(p2);
    }
}
package android.support.v4.app;
 class NotificationManagerCompat$ImplApi24 extends android.support.v4.app.NotificationManagerCompat$ImplKitKat {

    NotificationManagerCompat$ImplApi24()
    {
        return;
    }

    public boolean areNotificationsEnabled(android.content.Context p2, android.app.NotificationManager p3)
    {
        return android.support.v4.app.NotificationManagerCompatApi24.areNotificationsEnabled(p3);
    }

    public int getImportance(android.app.NotificationManager p2)
    {
        return android.support.v4.app.NotificationManagerCompatApi24.getImportance(p2);
    }
}
package android.support.v4.graphics;
 class BitmapCompat$KitKatBitmapCompatImpl extends android.support.v4.graphics.BitmapCompat$JbMr2BitmapCompatImpl {

    BitmapCompat$KitKatBitmapCompatImpl()
    {
        return;
    }

    public int getAllocationByteCount(android.graphics.Bitmap p2)
    {
        return android.support.v4.graphics.BitmapCompatKitKat.getAllocationByteCount(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$KitKatDrawableImpl extends android.support.v4.graphics.drawable.DrawableCompat$JellybeanMr1DrawableImpl {

    DrawableCompat$KitKatDrawableImpl()
    {
        return;
    }

    public int getAlpha(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatKitKat.getAlpha(p2);
    }

    public boolean isAutoMirrored(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatKitKat.isAutoMirrored(p2);
    }

    public void setAutoMirrored(android.graphics.drawable.Drawable p1, boolean p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatKitKat.setAutoMirrored(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatKitKat.wrapForTinting(p2);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableWrapperLollipop extends android.support.v4.graphics.drawable.DrawableWrapperKitKat {

    DrawableWrapperLollipop(android.graphics.drawable.Drawable p1)
    {
        super(p1);
        return;
    }

    DrawableWrapperLollipop(android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState p1, android.content.res.Resources p2)
    {
        super(p1, p2);
        return;
    }

    public android.graphics.Rect getDirtyBounds()
    {
        return this.mDrawable.getDirtyBounds();
    }

    public void getOutline(android.graphics.Outline p2)
    {
        this.mDrawable.getOutline(p2);
        return;
    }

    protected boolean isCompatTintEnabled()
    {
        int v1 = 0;
        if (android.os.Build$VERSION.SDK_INT == 21) {
            android.graphics.drawable.Drawable v0 = this.mDrawable;
            if (((v0 instanceof android.graphics.drawable.GradientDrawable)) || (((v0 instanceof android.graphics.drawable.DrawableContainer)) || ((v0 instanceof android.graphics.drawable.InsetDrawable)))) {
                v1 = 1;
            }
        }
        return v1;
    }

    android.support.v4.graphics.drawable.DrawableWrapperGingerbread$DrawableWrapperState mutateConstantState()
    {
        return new android.support.v4.graphics.drawable.DrawableWrapperLollipop$DrawableWrapperStateLollipop(this.mState, 0);
    }

    public void setHotspot(float p2, float p3)
    {
        this.mDrawable.setHotspot(p2, p3);
        return;
    }

    public void setHotspotBounds(int p2, int p3, int p4, int p5)
    {
        this.mDrawable.setHotspotBounds(p2, p3, p4, p5);
        return;
    }

    public boolean setState(int[] p2)
    {
        int v0_1;
        if (!super.setState(p2)) {
            v0_1 = 0;
        } else {
            this.invalidateSelf();
            v0_1 = 1;
        }
        return v0_1;
    }

    public void setTint(int p2)
    {
        if (!this.isCompatTintEnabled()) {
            this.mDrawable.setTint(p2);
        } else {
            super.setTint(p2);
        }
        return;
    }

    public void setTintList(android.content.res.ColorStateList p2)
    {
        if (!this.isCompatTintEnabled()) {
            this.mDrawable.setTintList(p2);
        } else {
            super.setTintList(p2);
        }
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode p2)
    {
        if (!this.isCompatTintEnabled()) {
            this.mDrawable.setTintMode(p2);
        } else {
            super.setTintMode(p2);
        }
        return;
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$Callback$StubApi23 extends android.support.v4.media.session.MediaSessionCompat$Callback$StubApi21 implements android.support.v4.media.session.MediaSessionCompatApi23$Callback {
    final synthetic android.support.v4.media.session.MediaSessionCompat$Callback this$0;

    MediaSessionCompat$Callback$StubApi23(android.support.v4.media.session.MediaSessionCompat$Callback p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void onPlayFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        this.this$0.onPlayFromUri(p2, p3);
        return;
    }
}
package android.support.v4.media.session;
public interface MediaSessionCompatApi24$Callback implements android.support.v4.media.session.MediaSessionCompatApi23$Callback {

    public abstract void onPrepare();

    public abstract void onPrepareFromMediaId();

    public abstract void onPrepareFromSearch();

    public abstract void onPrepareFromUri();
}
package android.support.v4.net;
 class ConnectivityManagerCompat$Api24ConnectivityManagerCompatImpl extends android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl {

    ConnectivityManagerCompat$Api24ConnectivityManagerCompatImpl()
    {
        return;
    }

    public int getRestrictBackgroundStatus(android.net.ConnectivityManager p2)
    {
        return android.support.v4.net.ConnectivityManagerCompatApi24.getRestrictBackgroundStatus(p2);
    }
}
package android.support.v4.view;
 class ViewCompat$ICSMr1ViewCompatImpl extends android.support.v4.view.ViewCompat$ICSViewCompatImpl {

    ViewCompat$ICSMr1ViewCompatImpl()
    {
        return;
    }

    public boolean hasOnClickListeners(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatICSMr1.hasOnClickListeners(p2);
    }
}
package android.support.v4.view;
 class ViewGroupCompat$ViewGroupCompatJellybeanMR2Impl extends android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl {

    ViewGroupCompat$ViewGroupCompatJellybeanMR2Impl()
    {
        return;
    }

    public int getLayoutMode(android.view.ViewGroup p2)
    {
        return android.support.v4.view.ViewGroupCompatJellybeanMR2.getLayoutMode(p2);
    }

    public void setLayoutMode(android.view.ViewGroup p1, int p2)
    {
        android.support.v4.view.ViewGroupCompatJellybeanMR2.setLayoutMode(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewParentCompat$ViewParentCompatLollipopImpl extends android.support.v4.view.ViewParentCompat$ViewParentCompatKitKatImpl {

    ViewParentCompat$ViewParentCompatLollipopImpl()
    {
        return;
    }

    public boolean onNestedFling(android.view.ViewParent p2, android.view.View p3, float p4, float p5, boolean p6)
    {
        return android.support.v4.view.ViewParentCompatLollipop.onNestedFling(p2, p3, p4, p5, p6);
    }

    public boolean onNestedPreFling(android.view.ViewParent p2, android.view.View p3, float p4, float p5)
    {
        return android.support.v4.view.ViewParentCompatLollipop.onNestedPreFling(p2, p3, p4, p5);
    }

    public void onNestedPreScroll(android.view.ViewParent p1, android.view.View p2, int p3, int p4, int[] p5)
    {
        android.support.v4.view.ViewParentCompatLollipop.onNestedPreScroll(p1, p2, p3, p4, p5);
        return;
    }

    public void onNestedScroll(android.view.ViewParent p1, android.view.View p2, int p3, int p4, int p5, int p6)
    {
        android.support.v4.view.ViewParentCompatLollipop.onNestedScroll(p1, p2, p3, p4, p5, p6);
        return;
    }

    public void onNestedScrollAccepted(android.view.ViewParent p1, android.view.View p2, android.view.View p3, int p4)
    {
        android.support.v4.view.ViewParentCompatLollipop.onNestedScrollAccepted(p1, p2, p3, p4);
        return;
    }

    public boolean onStartNestedScroll(android.view.ViewParent p2, android.view.View p3, android.view.View p4, int p5)
    {
        return android.support.v4.view.ViewParentCompatLollipop.onStartNestedScroll(p2, p3, p4, p5);
    }

    public void onStopNestedScroll(android.view.ViewParent p1, android.view.View p2)
    {
        android.support.v4.view.ViewParentCompatLollipop.onStopNestedScroll(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$JBMr2ViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat$JBViewPropertyAnimatorCompatImpl {

    ViewPropertyAnimatorCompat$JBMr2ViewPropertyAnimatorCompatImpl()
    {
        return;
    }

    public android.view.animation.Interpolator getInterpolator(android.support.v4.view.ViewPropertyAnimatorCompat p2, android.view.View p3)
    {
        return android.support.v4.view.ViewPropertyAnimatorCompatJellybeanMr2.getInterpolator(p3);
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityEventCompat$AccessibilityEventKitKatImpl extends android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventJellyBeanImpl {

    AccessibilityEventCompat$AccessibilityEventKitKatImpl()
    {
        return;
    }

    public int getContentChangeTypes(android.view.accessibility.AccessibilityEvent p2)
    {
        return android.support.v4.view.accessibility.AccessibilityEventCompatKitKat.getContentChangeTypes(p2);
    }

    public void setContentChangeTypes(android.view.accessibility.AccessibilityEvent p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityEventCompatKitKat.setContentChangeTypes(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr1Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr1Impl()
    {
        return;
    }

    public Object getLabelFor(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.getLabelFor(p2);
    }

    public Object getLabeledBy(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.getLabeledBy(p2);
    }

    public void setLabelFor(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.setLabelFor(p1, p2);
        return;
    }

    public void setLabelFor(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.setLabelFor(p1, p2, p3);
        return;
    }

    public void setLabeledBy(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.setLabeledBy(p1, p2);
        return;
    }

    public void setLabeledBy(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr1.setLabeledBy(p1, p2, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl extends android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl {

    AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl()
    {
        return;
    }

    public void setSource(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityRecordCompatJellyBean.setSource(p1, p2, p3);
        return;
    }
}
package android.support.v4.widget;
 class PopupWindowCompat$Api23PopupWindowImpl extends android.support.v4.widget.PopupWindowCompat$Api21PopupWindowImpl {

    PopupWindowCompat$Api23PopupWindowImpl()
    {
        return;
    }

    public boolean getOverlapAnchor(android.widget.PopupWindow p2)
    {
        return android.support.v4.widget.PopupWindowCompatApi23.getOverlapAnchor(p2);
    }

    public int getWindowLayoutType(android.widget.PopupWindow p2)
    {
        return android.support.v4.widget.PopupWindowCompatApi23.getWindowLayoutType(p2);
    }

    public void setOverlapAnchor(android.widget.PopupWindow p1, boolean p2)
    {
        android.support.v4.widget.PopupWindowCompatApi23.setOverlapAnchor(p1, p2);
        return;
    }

    public void setWindowLayoutType(android.widget.PopupWindow p1, int p2)
    {
        android.support.v4.widget.PopupWindowCompatApi23.setWindowLayoutType(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompat$JbMr2TextViewCompatImpl extends android.support.v4.widget.TextViewCompat$JbMr1TextViewCompatImpl {

    TextViewCompat$JbMr2TextViewCompatImpl()
    {
        return;
    }

    public android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView p2)
    {
        return android.support.v4.widget.TextViewCompatJbMr2.getCompoundDrawablesRelative(p2);
    }

    public void setCompoundDrawablesRelative(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        android.support.v4.widget.TextViewCompatJbMr2.setCompoundDrawablesRelative(p1, p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, int p2, int p3, int p4, int p5)
    {
        android.support.v4.widget.TextViewCompatJbMr2.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4, p5);
        return;
    }

    public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView p1, android.graphics.drawable.Drawable p2, android.graphics.drawable.Drawable p3, android.graphics.drawable.Drawable p4, android.graphics.drawable.Drawable p5)
    {
        android.support.v4.widget.TextViewCompatJbMr2.setCompoundDrawablesRelativeWithIntrinsicBounds(p1, p2, p3, p4, p5);
        return;
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplApi21 extends android.support.v4.app.NotificationCompat$NotificationCompatImplApi20 {

    NotificationCompat$NotificationCompatImplApi21()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p35, android.support.v4.app.NotificationCompat$BuilderExtender p36)
    {
        android.support.v4.app.NotificationCompatApi21$Builder v2_1 = new android.support.v4.app.NotificationCompatApi21$Builder(p35.mContext, p35.mNotification, p35.resolveTitle(), p35.resolveText(), p35.mContentInfo, p35.mTickerView, p35.mNumber, p35.mContentIntent, p35.mFullScreenIntent, p35.mLargeIcon, p35.mProgressMax, p35.mProgress, p35.mProgressIndeterminate, p35.mShowWhen, p35.mUseChronometer, p35.mPriority, p35.mSubText, p35.mLocalOnly, p35.mCategory, p35.mPeople, p35.mExtras, p35.mColor, p35.mVisibility, p35.mPublicVersion, p35.mGroupKey, p35.mGroupSummary, p35.mSortKey, p35.mContentView, p35.mBigContentView, p35.mHeadsUpContentView);
        android.support.v4.app.NotificationCompat.addActionsToBuilder(v2_1, p35.mActions);
        android.support.v4.app.NotificationCompat.addStyleToBuilderJellybean(v2_1, p35.mStyle);
        android.app.Notification v33 = p36.build(p35, v2_1);
        if (p35.mStyle != null) {
            p35.mStyle.addCompatExtras(this.getExtras(v33));
        }
        return v33;
    }

    public android.os.Bundle getBundleForUnreadConversation(android.support.v4.app.NotificationCompatBase$UnreadConversation p2)
    {
        return android.support.v4.app.NotificationCompatApi21.getBundleForUnreadConversation(p2);
    }

    public String getCategory(android.app.Notification p2)
    {
        return android.support.v4.app.NotificationCompatApi21.getCategory(p2);
    }

    public android.support.v4.app.NotificationCompatBase$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle p2, android.support.v4.app.NotificationCompatBase$UnreadConversation$Factory p3, android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory p4)
    {
        return android.support.v4.app.NotificationCompatApi21.getUnreadConversationFromBundle(p2, p3, p4);
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$LollipopDrawableImpl extends android.support.v4.graphics.drawable.DrawableCompat$KitKatDrawableImpl {

    DrawableCompat$LollipopDrawableImpl()
    {
        return;
    }

    public void applyTheme(android.graphics.drawable.Drawable p1, android.content.res.Resources$Theme p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.applyTheme(p1, p2);
        return;
    }

    public boolean canApplyTheme(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatLollipop.canApplyTheme(p2);
    }

    public void clearColorFilter(android.graphics.drawable.Drawable p1)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.clearColorFilter(p1);
        return;
    }

    public android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatLollipop.getColorFilter(p2);
    }

    public void inflate(android.graphics.drawable.Drawable p1, android.content.res.Resources p2, org.xmlpull.v1.XmlPullParser p3, android.util.AttributeSet p4, android.content.res.Resources$Theme p5)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.inflate(p1, p2, p3, p4, p5);
        return;
    }

    public void setHotspot(android.graphics.drawable.Drawable p1, float p2, float p3)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.setHotspot(p1, p2, p3);
        return;
    }

    public void setHotspotBounds(android.graphics.drawable.Drawable p1, int p2, int p3, int p4, int p5)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.setHotspotBounds(p1, p2, p3, p4, p5);
        return;
    }

    public void setTint(android.graphics.drawable.Drawable p1, int p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.setTint(p1, p2);
        return;
    }

    public void setTintList(android.graphics.drawable.Drawable p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.setTintList(p1, p2);
        return;
    }

    public void setTintMode(android.graphics.drawable.Drawable p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.graphics.drawable.DrawableCompatLollipop.setTintMode(p1, p2);
        return;
    }

    public android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatLollipop.wrapForTinting(p2);
    }
}
package android.support.v4.media.session;
 class MediaSessionCompat$Callback$StubApi24 extends android.support.v4.media.session.MediaSessionCompat$Callback$StubApi23 implements android.support.v4.media.session.MediaSessionCompatApi24$Callback {
    final synthetic android.support.v4.media.session.MediaSessionCompat$Callback this$0;

    MediaSessionCompat$Callback$StubApi24(android.support.v4.media.session.MediaSessionCompat$Callback p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void onPrepare()
    {
        this.this$0.onPrepare();
        return;
    }

    public void onPrepareFromMediaId(String p2, android.os.Bundle p3)
    {
        this.this$0.onPrepareFromMediaId(p2, p3);
        return;
    }

    public void onPrepareFromSearch(String p2, android.os.Bundle p3)
    {
        this.this$0.onPrepareFromSearch(p2, p3);
        return;
    }

    public void onPrepareFromUri(android.net.Uri p2, android.os.Bundle p3)
    {
        this.this$0.onPrepareFromUri(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$JBViewCompatImpl extends android.support.v4.view.ViewCompat$ICSMr1ViewCompatImpl {

    ViewCompat$JBViewCompatImpl()
    {
        return;
    }

    public android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View p3)
    {
        int v1_0;
        Object v0 = android.support.v4.view.ViewCompatJB.getAccessibilityNodeProvider(p3);
        if (v0 == null) {
            v1_0 = 0;
        } else {
            v1_0 = new android.support.v4.view.accessibility.AccessibilityNodeProviderCompat(v0);
        }
        return v1_0;
    }

    public boolean getFitsSystemWindows(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.getFitsSystemWindows(p2);
    }

    public int getImportantForAccessibility(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.getImportantForAccessibility(p2);
    }

    public int getMinimumHeight(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.getMinimumHeight(p2);
    }

    public int getMinimumWidth(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.getMinimumWidth(p2);
    }

    public android.view.ViewParent getParentForAccessibility(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.getParentForAccessibility(p2);
    }

    public boolean hasOverlappingRendering(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.hasOverlappingRendering(p2);
    }

    public boolean hasTransientState(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJB.hasTransientState(p2);
    }

    public boolean performAccessibilityAction(android.view.View p2, int p3, android.os.Bundle p4)
    {
        return android.support.v4.view.ViewCompatJB.performAccessibilityAction(p2, p3, p4);
    }

    public void postInvalidateOnAnimation(android.view.View p1)
    {
        android.support.v4.view.ViewCompatJB.postInvalidateOnAnimation(p1);
        return;
    }

    public void postInvalidateOnAnimation(android.view.View p1, int p2, int p3, int p4, int p5)
    {
        android.support.v4.view.ViewCompatJB.postInvalidateOnAnimation(p1, p2, p3, p4, p5);
        return;
    }

    public void postOnAnimation(android.view.View p1, Runnable p2)
    {
        android.support.v4.view.ViewCompatJB.postOnAnimation(p1, p2);
        return;
    }

    public void postOnAnimationDelayed(android.view.View p2, Runnable p3, long p4)
    {
        android.support.v4.view.ViewCompatJB.postOnAnimationDelayed(p2, p3, p4);
        return;
    }

    public void requestApplyInsets(android.view.View p1)
    {
        android.support.v4.view.ViewCompatJB.requestApplyInsets(p1);
        return;
    }

    public void setBackground(android.view.View p1, android.graphics.drawable.Drawable p2)
    {
        android.support.v4.view.ViewCompatJB.setBackground(p1, p2);
        return;
    }

    public void setHasTransientState(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompatJB.setHasTransientState(p1, p2);
        return;
    }

    public void setImportantForAccessibility(android.view.View p2, int p3)
    {
        if (p3 == 4) {
            p3 = 2;
        }
        android.support.v4.view.ViewCompatJB.setImportantForAccessibility(p2, p3);
        return;
    }
}
package android.support.v4.view;
 class ViewGroupCompat$ViewGroupCompatLollipopImpl extends android.support.v4.view.ViewGroupCompat$ViewGroupCompatJellybeanMR2Impl {

    ViewGroupCompat$ViewGroupCompatLollipopImpl()
    {
        return;
    }

    public int getNestedScrollAxes(android.view.ViewGroup p2)
    {
        return android.support.v4.view.ViewGroupCompatLollipop.getNestedScrollAxes(p2);
    }

    public boolean isTransitionGroup(android.view.ViewGroup p2)
    {
        return android.support.v4.view.ViewGroupCompatLollipop.isTransitionGroup(p2);
    }

    public void setTransitionGroup(android.view.ViewGroup p1, boolean p2)
    {
        android.support.v4.view.ViewGroupCompatLollipop.setTransitionGroup(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$KitKatViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat$JBMr2ViewPropertyAnimatorCompatImpl {

    ViewPropertyAnimatorCompat$KitKatViewPropertyAnimatorCompatImpl()
    {
        return;
    }

    public void setUpdateListener(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, android.support.v4.view.ViewPropertyAnimatorUpdateListener p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatKK.setUpdateListener(p2, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr1Impl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl()
    {
        return;
    }

    public java.util.List findAccessibilityNodeInfosByViewId(Object p2, String p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.findAccessibilityNodeInfosByViewId(p2, p3);
    }

    public int getTextSelectionEnd(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.getTextSelectionEnd(p2);
    }

    public int getTextSelectionStart(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.getTextSelectionStart(p2);
    }

    public String getViewIdResourceName(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.getViewIdResourceName(p2);
    }

    public boolean isEditable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.isEditable(p2);
    }

    public boolean refresh(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.refresh(p2);
    }

    public void setEditable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.setEditable(p1, p2);
        return;
    }

    public void setTextSelection(Object p1, int p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.setTextSelection(p1, p2, p3);
        return;
    }

    public void setViewIdResourceName(Object p1, String p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2.setViewIdResourceName(p1, p2);
        return;
    }
}
package android.support.v4.widget;
 class TextViewCompat$Api23TextViewCompatImpl extends android.support.v4.widget.TextViewCompat$JbMr2TextViewCompatImpl {

    TextViewCompat$Api23TextViewCompatImpl()
    {
        return;
    }

    public void setTextAppearance(android.widget.TextView p1, int p2)
    {
        android.support.v4.widget.TextViewCompatApi23.setTextAppearance(p1, p2);
        return;
    }
}
package android.support.v4.app;
 class NotificationCompat$NotificationCompatImplApi24 extends android.support.v4.app.NotificationCompat$NotificationCompatImplApi21 {

    NotificationCompat$NotificationCompatImplApi24()
    {
        return;
    }

    public android.app.Notification build(android.support.v4.app.NotificationCompat$Builder p36, android.support.v4.app.NotificationCompat$BuilderExtender p37)
    {
        android.support.v4.app.NotificationCompatApi24$Builder v2_1 = new android.support.v4.app.NotificationCompatApi24$Builder(p36.mContext, p36.mNotification, p36.mContentTitle, p36.mContentText, p36.mContentInfo, p36.mTickerView, p36.mNumber, p36.mContentIntent, p36.mFullScreenIntent, p36.mLargeIcon, p36.mProgressMax, p36.mProgress, p36.mProgressIndeterminate, p36.mShowWhen, p36.mUseChronometer, p36.mPriority, p36.mSubText, p36.mLocalOnly, p36.mCategory, p36.mPeople, p36.mExtras, p36.mColor, p36.mVisibility, p36.mPublicVersion, p36.mGroupKey, p36.mGroupSummary, p36.mSortKey, p36.mRemoteInputHistory, p36.mContentView, p36.mBigContentView, p36.mHeadsUpContentView);
        android.support.v4.app.NotificationCompat.addActionsToBuilder(v2_1, p36.mActions);
        android.support.v4.app.NotificationCompat.addStyleToBuilderApi24(v2_1, p36.mStyle);
        android.app.Notification v34 = p37.build(p36, v2_1);
        if (p36.mStyle != null) {
            p36.mStyle.addCompatExtras(this.getExtras(v34));
        }
        return v34;
    }
}
package android.support.v4.graphics.drawable;
 class DrawableCompat$MDrawableImpl extends android.support.v4.graphics.drawable.DrawableCompat$LollipopDrawableImpl {

    DrawableCompat$MDrawableImpl()
    {
        return;
    }

    public void clearColorFilter(android.graphics.drawable.Drawable p1)
    {
        p1.clearColorFilter();
        return;
    }

    public int getLayoutDirection(android.graphics.drawable.Drawable p2)
    {
        return android.support.v4.graphics.drawable.DrawableCompatApi23.getLayoutDirection(p2);
    }

    public boolean setLayoutDirection(android.graphics.drawable.Drawable p2, int p3)
    {
        return android.support.v4.graphics.drawable.DrawableCompatApi23.setLayoutDirection(p2, p3);
    }

    public android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable p1)
    {
        return p1;
    }
}
package android.support.v4.view;
 class ViewCompat$JbMr1ViewCompatImpl extends android.support.v4.view.ViewCompat$JBViewCompatImpl {

    ViewCompat$JbMr1ViewCompatImpl()
    {
        return;
    }

    public android.view.Display getDisplay(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getDisplay(p2);
    }

    public int getLabelFor(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getLabelFor(p2);
    }

    public int getLayoutDirection(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getLayoutDirection(p2);
    }

    public int getPaddingEnd(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getPaddingEnd(p2);
    }

    public int getPaddingStart(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getPaddingStart(p2);
    }

    public int getWindowSystemUiVisibility(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.getWindowSystemUiVisibility(p2);
    }

    public boolean isPaddingRelative(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr1.isPaddingRelative(p2);
    }

    public void setLabelFor(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatJellybeanMr1.setLabelFor(p1, p2);
        return;
    }

    public void setLayerPaint(android.view.View p1, android.graphics.Paint p2)
    {
        android.support.v4.view.ViewCompatJellybeanMr1.setLayerPaint(p1, p2);
        return;
    }

    public void setLayoutDirection(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatJellybeanMr1.setLayoutDirection(p1, p2);
        return;
    }

    public void setPaddingRelative(android.view.View p1, int p2, int p3, int p4, int p5)
    {
        android.support.v4.view.ViewCompatJellybeanMr1.setPaddingRelative(p1, p2, p3, p4, p5);
        return;
    }
}
package android.support.v4.view;
 class ViewPropertyAnimatorCompat$LollipopViewPropertyAnimatorCompatImpl extends android.support.v4.view.ViewPropertyAnimatorCompat$KitKatViewPropertyAnimatorCompatImpl {

    ViewPropertyAnimatorCompat$LollipopViewPropertyAnimatorCompatImpl()
    {
        return;
    }

    public void translationZ(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatLollipop.translationZ(p2, p3);
        return;
    }

    public void translationZBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatLollipop.translationZBy(p2, p3);
        return;
    }

    public void z(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatLollipop.z(p2, p3);
        return;
    }

    public void zBy(android.support.v4.view.ViewPropertyAnimatorCompat p1, android.view.View p2, float p3)
    {
        android.support.v4.view.ViewPropertyAnimatorCompatLollipop.zBy(p2, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl()
    {
        return;
    }

    public boolean canOpenPopup(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.canOpenPopup(p2);
    }

    public Object getCollectionInfo(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getCollectionInfo(p2);
    }

    public int getCollectionInfoColumnCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionInfo.getColumnCount(p2);
    }

    public int getCollectionInfoRowCount(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionInfo.getRowCount(p2);
    }

    public int getCollectionItemColumnIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionItemInfo.getColumnIndex(p2);
    }

    public int getCollectionItemColumnSpan(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionItemInfo.getColumnSpan(p2);
    }

    public Object getCollectionItemInfo(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getCollectionItemInfo(p2);
    }

    public int getCollectionItemRowIndex(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionItemInfo.getRowIndex(p2);
    }

    public int getCollectionItemRowSpan(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionItemInfo.getRowSpan(p2);
    }

    public android.os.Bundle getExtras(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getExtras(p2);
    }

    public int getInputType(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getInputType(p2);
    }

    public int getLiveRegion(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getLiveRegion(p2);
    }

    public Object getRangeInfo(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getRangeInfo(p2);
    }

    public CharSequence getRoleDescription(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.getRoleDescription(p2);
    }

    public boolean isCollectionInfoHierarchical(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionInfo.isHierarchical(p2);
    }

    public boolean isCollectionItemHeading(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat$CollectionItemInfo.isHeading(p2);
    }

    public boolean isContentInvalid(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.isContentInvalid(p2);
    }

    public boolean isDismissable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.isDismissable(p2);
    }

    public boolean isMultiLine(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.isMultiLine(p2);
    }

    public Object obtainCollectionInfo(int p2, int p3, boolean p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.obtainCollectionInfo(p2, p3, p4);
    }

    public Object obtainCollectionInfo(int p2, int p3, boolean p4, int p5)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.obtainCollectionInfo(p2, p3, p4, p5);
    }

    public Object obtainCollectionItemInfo(int p2, int p3, int p4, int p5, boolean p6)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.obtainCollectionItemInfo(p2, p3, p4, p5, p6);
    }

    public Object obtainCollectionItemInfo(int p2, int p3, int p4, int p5, boolean p6, boolean p7)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.obtainCollectionItemInfo(p2, p3, p4, p5, p6);
    }

    public Object obtainRangeInfo(int p2, float p3, float p4, float p5)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.obtainRangeInfo(p2, p3, p4, p5);
    }

    public void setCanOpenPopup(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setCanOpenPopup(p1, p2);
        return;
    }

    public void setCollectionInfo(Object p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setCollectionInfo(p1, p2);
        return;
    }

    public void setCollectionItemInfo(Object p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setCollectionItemInfo(p1, p2);
        return;
    }

    public void setContentInvalid(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setContentInvalid(p1, p2);
        return;
    }

    public void setDismissable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setDismissable(p1, p2);
        return;
    }

    public void setInputType(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setInputType(p1, p2);
        return;
    }

    public void setLiveRegion(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setLiveRegion(p1, p2);
        return;
    }

    public void setMultiLine(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setMultiLine(p1, p2);
        return;
    }

    public void setRangeInfo(Object p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setRangeInfo(p1, p2);
        return;
    }

    public void setRoleDescription(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatKitKat.setRoleDescription(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$JbMr2ViewCompatImpl extends android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl {

    ViewCompat$JbMr2ViewCompatImpl()
    {
        return;
    }

    public android.graphics.Rect getClipBounds(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr2.getClipBounds(p2);
    }

    public boolean isInLayout(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatJellybeanMr2.isInLayout(p2);
    }

    public void setClipBounds(android.view.View p1, android.graphics.Rect p2)
    {
        android.support.v4.view.ViewCompatJellybeanMr2.setClipBounds(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi21Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoKitKatImpl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi21Impl()
    {
        return;
    }

    public void addAction(Object p1, Object p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.addAction(p1, p2);
        return;
    }

    public int getAccessibilityActionId(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getAccessibilityActionId(p2);
    }

    public CharSequence getAccessibilityActionLabel(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getAccessibilityActionLabel(p2);
    }

    public java.util.List getActionList(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getActionList(p2);
    }

    public int getCollectionInfoSelectionMode(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21$CollectionInfo.getSelectionMode(p2);
    }

    public CharSequence getError(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getError(p2);
    }

    public int getMaxTextLength(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getMaxTextLength(p2);
    }

    public Object getWindow(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.getWindow(p2);
    }

    public boolean isCollectionItemSelected(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21$CollectionItemInfo.isSelected(p2);
    }

    public Object newAccessibilityAction(int p2, CharSequence p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.newAccessibilityAction(p2, p3);
    }

    public Object obtainCollectionInfo(int p2, int p3, boolean p4, int p5)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.obtainCollectionInfo(p2, p3, p4, p5);
    }

    public Object obtainCollectionItemInfo(int p2, int p3, int p4, int p5, boolean p6, boolean p7)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.obtainCollectionItemInfo(p2, p3, p4, p5, p6, p7);
    }

    public boolean removeAction(Object p2, Object p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.removeAction(p2, p3);
    }

    public boolean removeChild(Object p2, android.view.View p3)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.removeChild(p2, p3);
    }

    public boolean removeChild(Object p2, android.view.View p3, int p4)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.removeChild(p2, p3, p4);
    }

    public void setError(Object p1, CharSequence p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.setError(p1, p2);
        return;
    }

    public void setMaxTextLength(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi21.setMaxTextLength(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$KitKatViewCompatImpl extends android.support.v4.view.ViewCompat$JbMr2ViewCompatImpl {

    ViewCompat$KitKatViewCompatImpl()
    {
        return;
    }

    public int getAccessibilityLiveRegion(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatKitKat.getAccessibilityLiveRegion(p2);
    }

    public boolean isAttachedToWindow(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatKitKat.isAttachedToWindow(p2);
    }

    public boolean isLaidOut(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatKitKat.isLaidOut(p2);
    }

    public boolean isLayoutDirectionResolved(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatKitKat.isLayoutDirectionResolved(p2);
    }

    public void setAccessibilityLiveRegion(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatKitKat.setAccessibilityLiveRegion(p1, p2);
        return;
    }

    public void setImportantForAccessibility(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatJB.setImportantForAccessibility(p1, p2);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi22Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi21Impl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi22Impl()
    {
        return;
    }

    public Object getTraversalAfter(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.getTraversalAfter(p2);
    }

    public Object getTraversalBefore(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.getTraversalBefore(p2);
    }

    public void setTraversalAfter(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.setTraversalAfter(p1, p2);
        return;
    }

    public void setTraversalAfter(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.setTraversalAfter(p1, p2, p3);
        return;
    }

    public void setTraversalBefore(Object p1, android.view.View p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.setTraversalBefore(p1, p2);
        return;
    }

    public void setTraversalBefore(Object p1, android.view.View p2, int p3)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi22.setTraversalBefore(p1, p2, p3);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$LollipopViewCompatImpl extends android.support.v4.view.ViewCompat$KitKatViewCompatImpl {

    ViewCompat$LollipopViewCompatImpl()
    {
        return;
    }

    public android.support.v4.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View p2, android.support.v4.view.WindowInsetsCompat p3)
    {
        return android.support.v4.view.WindowInsetsCompat.wrap(android.support.v4.view.ViewCompatLollipop.dispatchApplyWindowInsets(p2, android.support.v4.view.WindowInsetsCompat.unwrap(p3)));
    }

    public boolean dispatchNestedFling(android.view.View p2, float p3, float p4, boolean p5)
    {
        return android.support.v4.view.ViewCompatLollipop.dispatchNestedFling(p2, p3, p4, p5);
    }

    public boolean dispatchNestedPreFling(android.view.View p2, float p3, float p4)
    {
        return android.support.v4.view.ViewCompatLollipop.dispatchNestedPreFling(p2, p3, p4);
    }

    public boolean dispatchNestedPreScroll(android.view.View p2, int p3, int p4, int[] p5, int[] p6)
    {
        return android.support.v4.view.ViewCompatLollipop.dispatchNestedPreScroll(p2, p3, p4, p5, p6);
    }

    public boolean dispatchNestedScroll(android.view.View p2, int p3, int p4, int p5, int p6, int[] p7)
    {
        return android.support.v4.view.ViewCompatLollipop.dispatchNestedScroll(p2, p3, p4, p5, p6, p7);
    }

    public android.content.res.ColorStateList getBackgroundTintList(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getBackgroundTintList(p2);
    }

    public android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getBackgroundTintMode(p2);
    }

    public float getElevation(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getElevation(p2);
    }

    public String getTransitionName(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getTransitionName(p2);
    }

    public float getTranslationZ(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getTranslationZ(p2);
    }

    public float getZ(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.getZ(p2);
    }

    public boolean hasNestedScrollingParent(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.hasNestedScrollingParent(p2);
    }

    public boolean isImportantForAccessibility(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.isImportantForAccessibility(p2);
    }

    public boolean isNestedScrollingEnabled(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatLollipop.isNestedScrollingEnabled(p2);
    }

    public void offsetLeftAndRight(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatLollipop.offsetLeftAndRight(p1, p2);
        return;
    }

    public void offsetTopAndBottom(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatLollipop.offsetTopAndBottom(p1, p2);
        return;
    }

    public android.support.v4.view.WindowInsetsCompat onApplyWindowInsets(android.view.View p2, android.support.v4.view.WindowInsetsCompat p3)
    {
        return android.support.v4.view.WindowInsetsCompat.wrap(android.support.v4.view.ViewCompatLollipop.onApplyWindowInsets(p2, android.support.v4.view.WindowInsetsCompat.unwrap(p3)));
    }

    public void requestApplyInsets(android.view.View p1)
    {
        android.support.v4.view.ViewCompatLollipop.requestApplyInsets(p1);
        return;
    }

    public void setBackgroundTintList(android.view.View p1, android.content.res.ColorStateList p2)
    {
        android.support.v4.view.ViewCompatLollipop.setBackgroundTintList(p1, p2);
        return;
    }

    public void setBackgroundTintMode(android.view.View p1, android.graphics.PorterDuff$Mode p2)
    {
        android.support.v4.view.ViewCompatLollipop.setBackgroundTintMode(p1, p2);
        return;
    }

    public void setElevation(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatLollipop.setElevation(p1, p2);
        return;
    }

    public void setNestedScrollingEnabled(android.view.View p1, boolean p2)
    {
        android.support.v4.view.ViewCompatLollipop.setNestedScrollingEnabled(p1, p2);
        return;
    }

    public void setOnApplyWindowInsetsListener(android.view.View p3, android.support.v4.view.OnApplyWindowInsetsListener p4)
    {
        if (p4 != null) {
            android.support.v4.view.ViewCompatLollipop.setOnApplyWindowInsetsListener(p3, new android.support.v4.view.ViewCompat$LollipopViewCompatImpl$1(this, p4));
        } else {
            android.support.v4.view.ViewCompatLollipop.setOnApplyWindowInsetsListener(p3, 0);
        }
        return;
    }

    public void setTransitionName(android.view.View p1, String p2)
    {
        android.support.v4.view.ViewCompatLollipop.setTransitionName(p1, p2);
        return;
    }

    public void setTranslationZ(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatLollipop.setTranslationZ(p1, p2);
        return;
    }

    public void setZ(android.view.View p1, float p2)
    {
        android.support.v4.view.ViewCompatLollipop.setZ(p1, p2);
        return;
    }

    public boolean startNestedScroll(android.view.View p2, int p3)
    {
        return android.support.v4.view.ViewCompatLollipop.startNestedScroll(p2, p3);
    }

    public void stopNestedScroll(android.view.View p1)
    {
        android.support.v4.view.ViewCompatLollipop.stopNestedScroll(p1);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi23Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi22Impl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi23Impl()
    {
        return;
    }

    public Object getActionContextClick()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionContextClick();
    }

    public Object getActionScrollDown()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionScrollDown();
    }

    public Object getActionScrollLeft()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionScrollLeft();
    }

    public Object getActionScrollRight()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionScrollRight();
    }

    public Object getActionScrollToPosition()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionScrollToPosition();
    }

    public Object getActionScrollUp()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionScrollUp();
    }

    public Object getActionShowOnScreen()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.getActionShowOnScreen();
    }

    public boolean isContextClickable(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.isContextClickable(p2);
    }

    public void setContextClickable(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi23.setContextClickable(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$MarshmallowViewCompatImpl extends android.support.v4.view.ViewCompat$LollipopViewCompatImpl {

    ViewCompat$MarshmallowViewCompatImpl()
    {
        return;
    }

    public int getScrollIndicators(android.view.View p2)
    {
        return android.support.v4.view.ViewCompatMarshmallow.getScrollIndicators(p2);
    }

    public void offsetLeftAndRight(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatMarshmallow.offsetLeftAndRight(p1, p2);
        return;
    }

    public void offsetTopAndBottom(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatMarshmallow.offsetTopAndBottom(p1, p2);
        return;
    }

    public void setScrollIndicators(android.view.View p1, int p2)
    {
        android.support.v4.view.ViewCompatMarshmallow.setScrollIndicators(p1, p2);
        return;
    }

    public void setScrollIndicators(android.view.View p1, int p2, int p3)
    {
        android.support.v4.view.ViewCompatMarshmallow.setScrollIndicators(p1, p2, p3);
        return;
    }
}
package android.support.v4.view.accessibility;
 class AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi24Impl extends android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi23Impl {

    AccessibilityNodeInfoCompat$AccessibilityNodeInfoApi24Impl()
    {
        return;
    }

    public Object getActionSetProgress()
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi24.getActionSetProgress();
    }

    public int getDrawingOrder(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi24.getDrawingOrder(p2);
    }

    public boolean isImportantForAccessibility(Object p2)
    {
        return android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi24.isImportantForAccessibility(p2);
    }

    public void setDrawingOrder(Object p1, int p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi24.setDrawingOrder(p1, p2);
        return;
    }

    public void setImportantForAccessibility(Object p1, boolean p2)
    {
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompatApi24.setImportantForAccessibility(p1, p2);
        return;
    }
}
package android.support.v4.view;
 class ViewCompat$Api24ViewCompatImpl extends android.support.v4.view.ViewCompat$MarshmallowViewCompatImpl {

    ViewCompat$Api24ViewCompatImpl()
    {
        return;
    }

    public void setPointerIcon(android.view.View p2, android.support.v4.view.PointerIconCompat p3)
    {
        android.support.v4.view.ViewCompatApi24.setPointerIcon(p2, p3.getPointerIcon());
        return;
    }
}
