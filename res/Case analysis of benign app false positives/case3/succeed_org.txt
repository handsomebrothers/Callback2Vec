package org.helllabs.android.xmp;
public class About extends android.app.Activity {

    public About()
    {
        return;
    }

    public void onCreate(android.os.Bundle p7)
    {
        super.onCreate(p7);
        this.setContentView(2130903040);
        android.widget.TextView v0_6 = ((android.widget.TextView) this.findViewById(2131296261));
        Object[] v2_0 = new Object[1];
        v2_0[0] = org.helllabs.android.xmp.AppInfo.getVersion(this);
        v0_6.setText(this.getString(2131361831, v2_0));
        android.widget.TextView v0_2 = ((android.widget.TextView) this.findViewById(2131296262));
        Object[] v2_1 = new Object[1];
        v2_1[0] = org.helllabs.android.xmp.Xmp.getVersion();
        v0_2.setText(this.getString(2131361832, v2_1));
        return;
    }
}
package org.helllabs.android.xmp;
public abstract class ActionBarActivity extends android.app.Activity {
    final org.helllabs.android.xmp.ActionBarHelper mActionBarHelper;

    public ActionBarActivity()
    {
        this.mActionBarHelper = org.helllabs.android.xmp.ActionBarHelper.createInstance(this);
        return;
    }

    protected org.helllabs.android.xmp.ActionBarHelper getActionBarHelper()
    {
        return this.mActionBarHelper;
    }

    public android.view.MenuInflater getMenuInflater()
    {
        return this.mActionBarHelper.getMenuInflater(super.getMenuInflater());
    }

    protected void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.mActionBarHelper.onCreate(p2);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p3)
    {
        return ((0 | this.mActionBarHelper.onCreateOptionsMenu(p3)) | super.onCreateOptionsMenu(p3));
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        super.onPostCreate(p2);
        this.mActionBarHelper.onPostCreate(p2);
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.mActionBarHelper.onTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }
}
package org.helllabs.android.xmp;
public abstract class ActionBarHelper {
    protected android.app.Activity mActivity;

    protected ActionBarHelper(android.app.Activity p1)
    {
        this.mActivity = p1;
        return;
    }

    public static org.helllabs.android.xmp.ActionBarHelper createInstance(android.app.Activity p2)
    {
        org.helllabs.android.xmp.ActionBarHelperBase v1_1;
        int v0 = Integer.decode(android.os.Build$VERSION.SDK).intValue();
        if (v0 < 14) {
            if (v0 < 11) {
                v1_1 = new org.helllabs.android.xmp.ActionBarHelperBase(p2);
            } else {
                v1_1 = new org.helllabs.android.xmp.ActionBarHelperHoneycomb(p2);
            }
        } else {
            v1_1 = new org.helllabs.android.xmp.ActionBarHelperICS(p2);
        }
        return v1_1;
    }

    public android.view.MenuInflater getMenuInflater(android.view.MenuInflater p1)
    {
        return p1;
    }

    public void onCreate(android.os.Bundle p1)
    {
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        return 1;
    }

    public void onPostCreate(android.os.Bundle p1)
    {
        return;
    }

    protected void onTitleChanged(CharSequence p1, int p2)
    {
        return;
    }

    public abstract void setRefreshActionItemState();
}
package org.helllabs.android.xmp;
 class ActionBarHelperBase$1 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.ActionBarHelperBase this$0;
    final synthetic android.view.MenuItem val$item;

    ActionBarHelperBase$1(org.helllabs.android.xmp.ActionBarHelperBase p1, android.view.MenuItem p2)
    {
        this.this$0 = p1;
        this.val$item = p2;
        return;
    }

    public void onClick(android.view.View p4)
    {
        this.this$0.mActivity.onMenuItemSelected(0, this.val$item);
        return;
    }
}
package org.helllabs.android.xmp;
 class ActionBarHelperBase$WrappedMenuInflater extends android.view.MenuInflater {
    android.view.MenuInflater mInflater;
    final synthetic org.helllabs.android.xmp.ActionBarHelperBase this$0;

    public ActionBarHelperBase$WrappedMenuInflater(org.helllabs.android.xmp.ActionBarHelperBase p1, android.content.Context p2, android.view.MenuInflater p3)
    {
        this.this$0 = p1;
        super(p2);
        super.mInflater = p3;
        return;
    }

    private void loadActionBarMetadata(int p10)
    {
        try {
            android.content.res.XmlResourceParser v4 = this.this$0.mActivity.getResources().getXml(p10);
            int v2 = v4.getEventType();
            int v1 = 0;
        } catch (java.io.IOException v0_1) {
            throw new android.view.InflateException("Error inflating menu XML", v0_1);
        } catch (java.io.IOException v0_0) {
            throw new android.view.InflateException("Error inflating menu XML", v0_0);
        } catch (java.util.Set v6_15) {
            if (v4 != null) {
                v4.close();
            }
            throw v6_15;
        }
        while (v1 == 0) {
            switch (v2) {
                case 1:
                    v1 = 1;
                    break;
                case 2:
                    if (!v4.getName().equals("item")) {
                    } else {
                        int v3 = v4.getAttributeResourceValue("http://schemas.android.com/apk/res/android", "id", 0);
                        if (v3 == 0) {
                        } else {
                            int v5 = v4.getAttributeIntValue("http://schemas.android.com/apk/res/android", "showAsAction", -1);
                            if ((v5 <= 0) || (((v5 & 2) == 0) && ((v5 & 1) == 0))) {
                            } else {
                                this.this$0.mActionItemIds.add(Integer.valueOf(v3));
                            }
                        }
                    }
                    break;
            }
            v2 = v4.next();
        }
        if (v4 != null) {
            v4.close();
        }
        return;
    }

    public void inflate(int p2, android.view.Menu p3)
    {
        this.loadActionBarMetadata(p2);
        this.mInflater.inflate(p2, p3);
        return;
    }
}
package org.helllabs.android.xmp;
public class ActionBarHelperBase extends org.helllabs.android.xmp.ActionBarHelper {
    private static final String MENU_ATTR_ID = "id";
    private static final String MENU_ATTR_SHOW_AS_ACTION = "showAsAction";
    private static final String MENU_RES_NAMESPACE = "http://schemas.android.com/apk/res/android";
    protected java.util.Set mActionItemIds;

    protected ActionBarHelperBase(android.app.Activity p2)
    {
        super(p2);
        super.mActionItemIds = new java.util.HashSet();
        return;
    }

    private android.view.View addActionItemCompatFromMenuItem(android.view.MenuItem p13)
    {
        android.widget.ImageButton v1_0;
        int v6 = p13.getItemId();
        android.view.ViewGroup v0 = this.getActionBarCompat();
        if (v0 != null) {
            int v8_0;
            if (v6 != 16908332) {
                v8_0 = 2130771969;
            } else {
                v8_0 = 2130771970;
            }
            int v8_3;
            v1_0 = new android.widget.ImageButton(this.mActivity, 0, v8_0);
            android.content.res.Resources vtmp3 = this.mActivity.getResources();
            if (v6 != 16908332) {
                v8_3 = 2131230721;
            } else {
                v8_3 = 2131230722;
            }
            v1_0.setLayoutParams(new android.view.ViewGroup$LayoutParams(((int) vtmp3.getDimension(v8_3)), -1));
            if (v6 == 2131296260) {
                v1_0.setId(2131296259);
            }
            v1_0.setImageDrawable(p13.getIcon());
            v1_0.setScaleType(android.widget.ImageView$ScaleType.CENTER);
            v1_0.setOnClickListener(new org.helllabs.android.xmp.ActionBarHelperBase$1(this, p13));
            v0.addView(v1_0);
            if (p13.getItemId() == 2131296260) {
                android.widget.ProgressBar v4_1 = new android.widget.ProgressBar(this.mActivity, 0, 2130771971);
                int v3 = this.mActivity.getResources().getDimensionPixelSize(2131230721);
                int v2 = this.mActivity.getResources().getDimensionPixelSize(2131230720);
                int v7 = (v3 / 2);
                android.widget.LinearLayout$LayoutParams v5_1 = new android.widget.LinearLayout$LayoutParams(v7, v7);
                v5_1.setMargins(((v3 - v7) / 2), ((v2 - v7) / 2), ((v3 - v7) / 2), 0);
                v4_1.setLayoutParams(v5_1);
                v4_1.setVisibility(8);
                v4_1.setId(2131296258);
                v0.addView(v4_1);
            }
        } else {
            v1_0 = 0;
        }
        return v1_0;
    }

    private android.view.ViewGroup getActionBarCompat()
    {
        return ((android.view.ViewGroup) this.mActivity.findViewById(2131296256));
    }

    private void setupActionBar()
    {
        android.view.ViewGroup v0 = this.getActionBarCompat();
        if (v0 != null) {
            android.widget.LinearLayout$LayoutParams v2_1 = new android.widget.LinearLayout$LayoutParams(0, -1);
            v2_1.weight = 1065353216;
            org.helllabs.android.xmp.SimpleMenuItem v1_1 = new org.helllabs.android.xmp.SimpleMenuItem(new org.helllabs.android.xmp.SimpleMenu(this.mActivity), 16908332, 0, this.mActivity.getString(2131361792));
            v1_1.setIcon(2130837513);
            this.addActionItemCompatFromMenuItem(v1_1);
            android.widget.TextView v4_1 = new android.widget.TextView(this.mActivity, 0, 2130771968);
            v4_1.setLayoutParams(v2_1);
            v4_1.setText(this.mActivity.getTitle());
            v0.addView(v4_1);
        }
        return;
    }

    public android.view.MenuInflater getMenuInflater(android.view.MenuInflater p3)
    {
        return new org.helllabs.android.xmp.ActionBarHelperBase$WrappedMenuInflater(this, this.mActivity, p3);
    }

    public void onCreate(android.os.Bundle p3)
    {
        this.mActivity.requestWindowFeature(7);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p5)
    {
        java.util.Iterator v0 = this.mActionItemIds.iterator();
        while (v0.hasNext()) {
            p5.findItem(((Integer) v0.next()).intValue()).setVisible(0);
        }
        return 1;
    }

    public void onPostCreate(android.os.Bundle p7)
    {
        this.mActivity.getWindow().setFeatureInt(7, 2130903041);
        this.setupActionBar();
        org.helllabs.android.xmp.SimpleMenu v2_1 = new org.helllabs.android.xmp.SimpleMenu(this.mActivity);
        this.mActivity.onCreatePanelMenu(0, v2_1);
        this.mActivity.onPrepareOptionsMenu(v2_1);
        int v0 = 0;
        while (v0 < v2_1.size()) {
            android.view.MenuItem v1 = v2_1.getItem(v0);
            if (this.mActionItemIds.contains(Integer.valueOf(v1.getItemId()))) {
                this.addActionItemCompatFromMenuItem(v1);
            }
            v0++;
        }
        return;
    }

    protected void onTitleChanged(CharSequence p4, int p5)
    {
        android.widget.TextView v0_1 = ((android.widget.TextView) this.mActivity.findViewById(2131296257));
        if (v0_1 != null) {
            v0_1.setText(p4);
        }
        return;
    }

    public void setRefreshActionItemState(boolean p7)
    {
        int v4 = 0;
        android.view.View v0 = this.mActivity.findViewById(2131296259);
        android.view.View v1 = this.mActivity.findViewById(2131296258);
        if (v0 != null) {
            int v2_0;
            if (!p7) {
                v2_0 = 0;
            } else {
                v2_0 = 8;
            }
            v0.setVisibility(v2_0);
        }
        if (v1 != null) {
            if (!p7) {
                v4 = 8;
            }
            v1.setVisibility(v4);
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class ActionBarHelperHoneycomb extends org.helllabs.android.xmp.ActionBarHelper {
    private android.view.Menu mOptionsMenu;
    private android.view.View mRefreshIndeterminateProgressView;

    protected ActionBarHelperHoneycomb(android.app.Activity p2)
    {
        super(p2);
        super.mRefreshIndeterminateProgressView = 0;
        return;
    }

    protected android.content.Context getActionBarThemedContext()
    {
        return this.mActivity;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p2)
    {
        this.mOptionsMenu = p2;
        return super.onCreateOptionsMenu(p2);
    }

    public void setRefreshActionItemState(boolean p6)
    {
        if (this.mOptionsMenu != null) {
            android.view.MenuItem v1 = this.mOptionsMenu.findItem(2131296260);
            if (v1 != null) {
                if (!p6) {
                    v1.setActionView(0);
                } else {
                    if (this.mRefreshIndeterminateProgressView == null) {
                        this.mRefreshIndeterminateProgressView = ((android.view.LayoutInflater) this.getActionBarThemedContext().getSystemService("layout_inflater")).inflate(2130903042, 0);
                    }
                    v1.setActionView(this.mRefreshIndeterminateProgressView);
                }
            }
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class ActionBarHelperICS extends org.helllabs.android.xmp.ActionBarHelperHoneycomb {

    protected ActionBarHelperICS(android.app.Activity p1)
    {
        super(p1);
        return;
    }

    protected android.content.Context getActionBarThemedContext()
    {
        return this.mActivity.getActionBar().getThemedContext();
    }

    public void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.mActivity.getActionBar().setHomeButtonEnabled(1);
        return;
    }
}
package org.helllabs.android.xmp;
public abstract class ActionBarListActivity extends android.app.ListActivity {
    final org.helllabs.android.xmp.ActionBarHelper mActionBarHelper;

    public ActionBarListActivity()
    {
        this.mActionBarHelper = org.helllabs.android.xmp.ActionBarHelper.createInstance(this);
        return;
    }

    protected org.helllabs.android.xmp.ActionBarHelper getActionBarHelper()
    {
        return this.mActionBarHelper;
    }

    public android.view.MenuInflater getMenuInflater()
    {
        return this.mActionBarHelper.getMenuInflater(super.getMenuInflater());
    }

    protected void onCreate(android.os.Bundle p2)
    {
        super.onCreate(p2);
        this.mActionBarHelper.onCreate(p2);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p3)
    {
        return ((0 | this.mActionBarHelper.onCreateOptionsMenu(p3)) | super.onCreateOptionsMenu(p3));
    }

    protected void onPostCreate(android.os.Bundle p2)
    {
        super.onPostCreate(p2);
        this.mActionBarHelper.onPostCreate(p2);
        return;
    }

    protected void onTitleChanged(CharSequence p2, int p3)
    {
        this.mActionBarHelper.onTitleChanged(p2, p3);
        super.onTitleChanged(p2, p3);
        return;
    }
}
package org.helllabs.android.xmp;
public class AppInfo {

    public AppInfo()
    {
        return;
    }

    public static String getVersion(android.content.Context p7)
    {
        try {
            String v3 = p7.getPackageManager().getPackageInfo(p7.getPackageName(), 0).versionName;
            int v1 = v3.indexOf(32);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            v3 = "";
            return v3;
        }
        if (v1 <= 0) {
            return v3;
        } else {
            v3 = v3.substring(0, v1);
            return v3;
        }
    }
}
package org.helllabs.android.xmp;
public abstract class Meter {
    final int MAX_METERS;
    android.widget.TextView[] infoMeter;
    int numChannels;
    int[] oldVol;
    int type;

    public Meter(android.widget.LinearLayout p6, int p7)
    {
        this.MAX_METERS = 32;
        this.numChannels = 0;
        android.widget.TextView v1_3 = new android.widget.TextView[32];
        this.infoMeter = v1_3;
        android.widget.TextView v1_4 = new int[32];
        this.oldVol = v1_4;
        this.numChannels = p7;
        p6.setVisibility(0);
        int v0_0 = 0;
        while (v0_0 < 32) {
            this.infoMeter[v0_0] = new android.widget.TextView(p6.getContext());
            v0_0++;
        }
        p6.removeAllViews();
        int v0_1 = 0;
        while ((v0_1 < p7) && (v0_1 < 32)) {
            p6.addView(this.infoMeter[v0_1], v0_1);
            v0_1++;
        }
        this.reset();
        return;
    }

    public int getChannels()
    {
        return this.numChannels;
    }

    public int getType()
    {
        return this.type;
    }

    public void reset()
    {
        int v0 = 0;
        while (v0 < 32) {
            this.oldVol[v0] = -1;
            v0++;
        }
        return;
    }

    abstract void setVolumes();
}
package org.helllabs.android.xmp;
public class BarMeter extends org.helllabs.android.xmp.Meter {
    String[] bar;

    public BarMeter(android.widget.LinearLayout p10, int p11)
    {
        super(p10, p11);
        android.widget.TextView v2_12 = new String[8];
        v2_12[0] = "\u2581";
        v2_12[1] = "\u2582";
        v2_12[2] = "\u2583";
        v2_12[3] = "\u2584";
        v2_12[4] = "\u2585";
        v2_12[5] = "\u2586";
        v2_12[6] = "\u2587";
        v2_12[7] = "\u2588";
        super.bar = v2_12;
        int v1 = 1058642330;
        if (p11 > 4) {
            if (p11 > 10) {
                if (p11 > 24) {
                    v1 = 1053609165;
                }
            } else {
                v1 = 1061997773;
            }
        } else {
            v1 = 1070386381;
        }
        int v0 = 0;
        while (v0 < 32) {
            super.infoMeter[v0].setText(super.bar[0]);
            super.infoMeter[v0].setTextColor(android.graphics.Color.rgb(52, 96, 186));
            super.infoMeter[v0].setPadding(1, 0, 1, 0);
            super.infoMeter[v0].setTextSize(1, 1107296256);
            super.infoMeter[v0].setTextScaleX(v1);
            v0++;
        }
        super.type = 2;
        return;
    }

    public void setVolumes(int[] p6)
    {
        int v1 = 32;
        if (this.numChannels < 32) {
            v1 = this.numChannels;
        }
        int v0 = 0;
        while (v0 < v1) {
            int v2 = (p6[v0] / 8);
            if (v2 > 7) {
                v2 = 7;
            }
            if (v2 != this.oldVol[v0]) {
                this.infoMeter[v0].setText(this.bar[v2]);
                this.oldVol[v0] = v2;
            }
            v0++;
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class ChangeLog$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ChangeLog this$0;

    ChangeLog$1(org.helllabs.android.xmp.ChangeLog p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
public class ChangeLog {
    private android.content.Context context;
    private int lastViewed;
    private android.content.SharedPreferences prefs;
    private int versionCode;

    public ChangeLog(android.content.Context p1)
    {
        this.context = p1;
        return;
    }

    private void showLog()
    {
        new android.app.AlertDialog$Builder(this.context).setTitle("Changelog").setIcon(17301569).setView(android.view.LayoutInflater.from(this.context).inflate(2130903043, 0)).setInverseBackgroundForced(1).setNegativeButton("Dismiss", new org.helllabs.android.xmp.ChangeLog$1(this)).show();
        return;
    }

    public int show()
    {
        int v3_0 = 0;
        try {
            this.versionCode = this.context.getPackageManager().getPackageInfo(this.context.getPackageName(), 0).versionCode;
            this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this.context);
            this.lastViewed = this.prefs.getInt("changelog_version", 0);
        } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
            android.util.Log.w("Unable to get version code. Will not show changelog", v0);
            v3_0 = -1;
            return v3_0;
        }
        if (this.lastViewed >= this.versionCode) {
            v3_0 = -1;
            return v3_0;
        } else {
            android.content.SharedPreferences$Editor v1 = this.prefs.edit();
            v1.putInt("changelog_version", this.versionCode);
            v1.commit();
            this.showLog();
            return v3_0;
        }
    }
}
package org.helllabs.android.xmp;
public class EmptyMeter extends org.helllabs.android.xmp.Meter {

    public EmptyMeter(android.widget.LinearLayout p2, int p3)
    {
        super(p2, p3);
        p2.setVisibility(4);
        super.type = 0;
        return;
    }

    public void setVolumes(int[] p1)
    {
        return;
    }
}
package org.helllabs.android.xmp;
public class Examples {
    android.content.res.AssetManager am;
    String[] assets;
    android.content.Context context;

    public Examples(android.content.Context p1)
    {
        this.context = p1;
        return;
    }

    private int copyAsset(java.io.InputStream p8, String p9)
    {
        int v4 = 0;
        byte[] v0 = new byte[1024];
        try {
            java.io.FileOutputStream v3_1 = new java.io.FileOutputStream(new java.io.File(p9));
        } catch (java.io.IOException v1) {
            v4 = -1;
            return v4;
        }
        while(true) {
            int v2 = p8.read(v0);
            if (v2 <= 0) {
                break;
            }
            v3_1.write(v0, 0, v2);
        }
        p8.close();
        v3_1.close();
        return v4;
    }

    public int install(String p9, boolean p10)
    {
        int v3 = 0;
        java.io.File v0_1 = new java.io.File(p9);
        if (!v0_1.isDirectory()) {
            if (v0_1.mkdirs()) {
                this.am = this.context.getResources().getAssets();
                try {
                    this.assets = this.am.list("mod");
                } catch (java.io.IOException v1) {
                    v3 = -1;
                }
                if ((p10) && (this.assets != null)) {
                    int v2 = 0;
                    while (v2 < this.assets.length) {
                        this.copyAsset(this.am.open(new StringBuilder().append("mod/").append(this.assets[v2]).toString()), new StringBuilder().append(p9).append("/").append(this.assets[v2]).toString());
                        v2++;
                    }
                }
            } else {
                v3 = -1;
            }
        }
        return v3;
    }
}
package org.helllabs.android.xmp;
public class FileUtils {

    public FileUtils()
    {
        return;
    }

    public static String basename(String p1)
    {
        return new java.io.File(p1).getName();
    }

    public static String readFromFile(java.io.File p4)
    {
        java.io.BufferedReader v0_1 = new java.io.BufferedReader(new java.io.FileReader(p4), 512);
        String v1 = v0_1.readLine();
        v0_1.close();
        return v1;
    }

    public static boolean removeLineFromFile(java.io.File p2, int p3)
    {
        int[] v0 = new int[1];
        v0[0] = p3;
        return org.helllabs.android.xmp.FileUtils.removeLineFromFile(p2, v0);
    }

    public static boolean removeLineFromFile(java.io.File p10, int[] p11)
    {
        int v7 = 0;
        java.io.File v6_1 = new java.io.File(new StringBuilder().append(p10.getAbsolutePath()).append(".tmp").toString());
        java.io.BufferedReader v0_1 = new java.io.BufferedReader(new java.io.FileReader(p10), 512);
        java.io.PrintWriter v5_1 = new java.io.PrintWriter(new java.io.FileWriter(v6_1));
        int v4 = 0;
        while(true) {
            String v3 = v0_1.readLine();
            if (v3 == null) {
                break;
            }
            int v1 = 0;
            int v2 = 0;
            while (v2 < p11.length) {
                if (v4 != p11[v2]) {
                    v2++;
                } else {
                    v1 = 1;
                    break;
                }
            }
            if (v1 == 0) {
                v5_1.println(v3);
                v5_1.flush();
            }
            v4++;
        }
        v5_1.close();
        v0_1.close();
        if ((p10.delete()) && (v6_1.renameTo(p10))) {
            v7 = 1;
        }
        return v7;
    }

    public static void writeToFile(java.io.File p2, String p3)
    {
        String[] v0 = new String[1];
        v0[0] = p3;
        org.helllabs.android.xmp.FileUtils.writeToFile(p2, v0);
        return;
    }

    public static void writeToFile(java.io.File p7, String[] p8)
    {
        java.io.BufferedWriter v3_1 = new java.io.BufferedWriter(new java.io.FileWriter(p7, 1));
        int v2 = p8.length;
        int v1 = 0;
        while (v1 < v2) {
            v3_1.write(p8[v1]);
            v3_1.newLine();
            v1++;
        }
        v3_1.close();
        return;
    }
}
package org.helllabs.android.xmp;
public class InfoCache {

    public InfoCache()
    {
        return;
    }

    public static boolean clearCache(String p6)
    {
        java.io.File v0_1 = new java.io.File(org.helllabs.android.xmp.Settings.cacheDir, new StringBuilder().append(p6).append(".cache").toString());
        java.io.File v2_1 = new java.io.File(org.helllabs.android.xmp.Settings.cacheDir, new StringBuilder().append(p6).append(".skip").toString());
        int v1 = 0;
        if (v0_1.isFile()) {
            v0_1.delete();
            v1 = 1;
        }
        if (v2_1.isFile()) {
            v2_1.delete();
            v1 = 1;
        }
        return v1;
    }

    public static boolean delete(String p2)
    {
        java.io.File v0_1 = new java.io.File(p2);
        org.helllabs.android.xmp.InfoCache.clearCache(p2);
        return v0_1.delete();
    }

    public static boolean fileExists(String p2)
    {
        int v1_1;
        if (!new java.io.File(p2).isFile()) {
            org.helllabs.android.xmp.InfoCache.clearCache(p2);
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }

    public static boolean testModule(String p2)
    {
        return org.helllabs.android.xmp.InfoCache.testModule(p2, new org.helllabs.android.xmp.ModInfo());
    }

    public static boolean testModule(String p13, org.helllabs.android.xmp.ModInfo p14)
    {
        boolean v9_0;
        java.io.File v3_1 = new java.io.File(p13);
        java.io.File v0_0 = new java.io.File(org.helllabs.android.xmp.Settings.cacheDir, new StringBuilder().append(p13).append(".cache").toString());
        java.io.File v8_1 = new java.io.File(org.helllabs.android.xmp.Settings.cacheDir, new StringBuilder().append(p13).append(".skip").toString());
        if ((org.helllabs.android.xmp.Settings.cacheDir.isDirectory()) || (org.helllabs.android.xmp.Settings.cacheDir.mkdirs())) {
            try {
                if (v0_0.isFile()) {
                    if (v8_1.isFile()) {
                        v8_1.delete();
                    }
                    java.io.BufferedReader v4_1 = new java.io.BufferedReader(new java.io.FileReader(v0_0), 512);
                    if (((long) Integer.parseInt(v4_1.readLine())) != v3_1.length()) {
                        v4_1.close();
                        v0_0.delete();
                    } else {
                        p14.name = v4_1.readLine();
                        v4_1.readLine();
                        p14.type = v4_1.readLine();
                        v4_1.close();
                        v9_0 = 1;
                        return v9_0;
                    }
                }
            } catch (java.io.IOException v2) {
                v9_0 = org.helllabs.android.xmp.Xmp.testModule(p13, p14);
            }
            if (!v8_1.isFile()) {
                Boolean v5 = Boolean.valueOf(org.helllabs.android.xmp.Xmp.testModule(p13, p14));
                if (v5.booleanValue()) {
                    String[] v6 = new String[4];
                    v6[0] = Long.toString(v3_1.length());
                    v6[1] = p14.name;
                    v6[2] = p13;
                    v6[3] = p14.type;
                    java.io.File v1_0 = v0_0.getParentFile();
                    if (!v1_0.isDirectory()) {
                        v1_0.mkdirs();
                    }
                    v0_0.createNewFile();
                    org.helllabs.android.xmp.FileUtils.writeToFile(v0_0, v6);
                } else {
                    java.io.File v1_1 = v8_1.getParentFile();
                    if (!v1_1.isDirectory()) {
                        v1_1.mkdirs();
                    }
                    v8_1.createNewFile();
                }
                v9_0 = v5.booleanValue();
            } else {
                v9_0 = 0;
            }
        } else {
            v9_0 = org.helllabs.android.xmp.Xmp.testModule(p13, p14);
        }
        return v9_0;
    }

    public static boolean testModuleForceIfInvalid(String p4)
    {
        java.io.File v0_1 = new java.io.File(org.helllabs.android.xmp.Settings.cacheDir, new StringBuilder().append(p4).append(".skip").toString());
        if (v0_1.isFile()) {
            v0_1.delete();
        }
        return org.helllabs.android.xmp.InfoCache.testModule(p4);
    }
}
package org.helllabs.android.xmp;
public class InputDialog extends android.app.AlertDialog$Builder {
    public android.widget.EditText input;
    private float scale;

    protected InputDialog(android.content.Context p7)
    {
        super(p7);
        super.scale = p7.getResources().getDisplayMetrics().density;
        android.widget.LinearLayout v0_1 = new android.widget.LinearLayout(p7);
        v0_1.setPadding(((int) (super.scale * 1086324736)), ((int) (super.scale * 1086324736)), ((int) (super.scale * 1086324736)), ((int) (super.scale * 1086324736)));
        super.input = new android.widget.EditText(p7);
        super.input.setLayoutParams(new android.widget.LinearLayout$LayoutParams(-1, -2));
        v0_1.addView(super.input);
        super.setView(v0_1);
        return;
    }
}
package org.helllabs.android.xmp;
public class InstrumentInfo extends android.widget.TextView {
    int curVol;

    public InstrumentInfo(android.content.Context p2)
    {
        super(p2);
        super.curVol = -1;
        return;
    }

    public void setText(int p7, CharSequence p8)
    {
        Object[] v1_1 = new Object[2];
        v1_1[0] = Integer.valueOf(p7);
        v1_1[1] = p8;
        this.setText(String.format("%02x: %s", v1_1));
        this.setTypeface(android.graphics.Typeface.MONOSPACE);
        this.setSingleLine(1);
        this.setIncludeFontPadding(0);
        this.setTextColor(android.graphics.Color.rgb(128, 128, 128));
        return;
    }

    public void showVolume(int p3)
    {
        int v3_1 = (p3 & 248);
        if (v3_1 != this.curVol) {
            this.setTextColor(android.graphics.Color.rgb((v3_1 + 128), (v3_1 + 128), (v3_1 + 128)));
            this.curVol = (v3_1 & 248);
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class InstrumentList extends android.widget.LinearLayout {
    android.content.Context context;
    org.helllabs.android.xmp.InstrumentInfo[] instrumentInfo;
    int num;

    public InstrumentList(android.content.Context p2)
    {
        super(p2);
        super.context = p2;
        super.setOrientation(1);
        return;
    }

    public void setInstruments(String[] p5)
    {
        this.num = p5.length;
        org.helllabs.android.xmp.InstrumentInfo v1_7 = new org.helllabs.android.xmp.InstrumentInfo[this.num];
        this.instrumentInfo = v1_7;
        this.removeAllViews();
        int v0 = 0;
        while (v0 < this.num) {
            this.instrumentInfo[v0] = new org.helllabs.android.xmp.InstrumentInfo(this.context);
            this.instrumentInfo[v0].setText(v0, p5[v0]);
            this.addView(this.instrumentInfo[v0]);
            v0++;
        }
        return;
    }

    public void setVolumes(int[] p7, int[] p8)
    {
        int v3 = p7.length;
        int v1 = 0;
        while (v1 < this.num) {
            int v0 = 0;
            int v2 = 0;
            while (v2 < v3) {
                if (p8[v2] == v1) {
                    this.instrumentInfo[v1].showVolume(p7[v2]);
                    v0 = 1;
                }
                v2++;
            }
            if (v0 == 0) {
                this.instrumentInfo[v1].showVolume(0);
            }
            v1++;
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class LedMeter extends org.helllabs.android.xmp.Meter {

    public LedMeter(android.widget.LinearLayout p5, int p6)
    {
        super(p5, p6);
        int v0 = 0;
        while (v0 < 32) {
            super.infoMeter[v0].setText("\u25cf");
            super.infoMeter[v0].setTextColor(android.graphics.Color.rgb(0, 50, 0));
            v0++;
        }
        super.type = 1;
        return;
    }

    public void setVolumes(int[] p6)
    {
        int v1 = 32;
        if (this.numChannels < 32) {
            v1 = this.numChannels;
        }
        int v0 = 0;
        while (v0 < v1) {
            if (p6[v0] != this.oldVol[v0]) {
                this.infoMeter[v0].setTextColor(android.graphics.Color.rgb(0, ((p6[v0] * 3) + 50), 0));
                this.oldVol[v0] = p6[v0];
            }
            v0++;
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class ListFormats extends android.app.ListActivity {
    String[] formats;
    private org.helllabs.android.xmp.Xmp xmp;

    public ListFormats()
    {
        this.xmp = new org.helllabs.android.xmp.Xmp();
        this.formats = this.xmp.getFormats();
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130903045);
        this.setListAdapter(new android.widget.ArrayAdapter(this, 2130903044, this.formats));
        return;
    }
}
package org.helllabs.android.xmp;
final class Message$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic android.app.Activity val$a;

    Message$1(android.app.Activity p1)
    {
        this.val$a = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p2, int p3)
    {
        this.val$a.finish();
        return;
    }
}
package org.helllabs.android.xmp;
final class Message$2 implements android.content.DialogInterface$OnClickListener {

    Message$2()
    {
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
public class Message {

    public Message()
    {
        return;
    }

    public static void error(android.content.Context p3, String p4)
    {
        android.app.AlertDialog v0 = new android.app.AlertDialog$Builder(p3).create();
        v0.setTitle("Error");
        v0.setMessage(p4);
        v0.setButton("Dismiss", new org.helllabs.android.xmp.Message$2());
        v0.show();
        return;
    }

    public static void fatalError(android.content.Context p3, String p4, android.app.Activity p5)
    {
        android.app.AlertDialog v0 = new android.app.AlertDialog$Builder(p3).create();
        v0.setTitle("Error");
        v0.setMessage(p4);
        v0.setButton("Exit", new org.helllabs.android.xmp.Message$1(p5));
        v0.show();
        return;
    }

    public static void toast(android.content.Context p1, String p2)
    {
        android.widget.Toast.makeText(p1, p2, 0).show();
        return;
    }

    public static void yesNoDialog(android.content.Context p3, String p4, String p5, android.content.DialogInterface$OnClickListener p6)
    {
        new android.app.AlertDialog$Builder(p3).setTitle(p4).setMessage(p5).setPositiveButton(2131361854, p6).setNegativeButton(2131361855, p6).show();
        return;
    }
}
package org.helllabs.android.xmp;
public class ModInfo {
    String name;
    String type;

    public ModInfo()
    {
        return;
    }

    public ModInfo(String p1, String p2, String p3)
    {
        this.name = p1;
        this.type = p2;
        return;
    }
}
package org.helllabs.android.xmp;
public interface ModInterface implements android.os.IInterface {

    public abstract void add();

    public abstract boolean deleteFile();

    public abstract void getChannelData();

    public abstract String getFileName();

    public abstract String[] getInstruments();

    public abstract String getModName();

    public abstract String getModType();

    public abstract void getModVars();

    public abstract int getPlayBpm();

    public abstract int getPlayPat();

    public abstract int getPlayPos();

    public abstract int getPlayTempo();

    public abstract boolean isPaused();

    public abstract void nextSong();

    public abstract void pause();

    public abstract void play();

    public abstract void prevSong();

    public abstract void registerCallback();

    public abstract void seek();

    public abstract void stop();

    public abstract int time();

    public abstract boolean toggleLoop();

    public abstract void unregisterCallback();
}
package org.helllabs.android.xmp;
 class ModInterface$Stub$Proxy implements org.helllabs.android.xmp.ModInterface {
    private android.os.IBinder mRemote;

    ModInterface$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public void add(String[] p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            v0.writeStringArray(p6);
            this.mRemote.transact(2, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public boolean deleteFile()
    {
        int v2 = 0;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(21, v0, v1, 0);
            v1.readException();
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (v1.readInt() != 0) {
            v2 = 1;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public void getChannelData(int[] p6, int[] p7, int[] p8)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
        } catch (android.os.IBinder v2_4) {
            v1.recycle();
            v0.recycle();
            throw v2_4;
        }
        if (p6 != null) {
            v0.writeInt(p6.length);
        } else {
            v0.writeInt(-1);
        }
        if (p7 != null) {
            v0.writeInt(p7.length);
        } else {
            v0.writeInt(-1);
        }
        if (p8 != null) {
            v0.writeInt(p8.length);
        } else {
            v0.writeInt(-1);
        }
        this.mRemote.transact(14, v0, v1, 0);
        v1.readException();
        v1.readIntArray(p6);
        v1.readIntArray(p7);
        v1.readIntArray(p8);
        v1.recycle();
        v0.recycle();
        return;
    }

    public String getFileName()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(19, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public String[] getInstruments()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(20, v0, v1, 0);
            v1.readException();
            String[] v2 = v1.createStringArray();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public String getInterfaceDescriptor()
    {
        return "org.helllabs.android.xmp.ModInterface";
    }

    public String getModName()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(12, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public String getModType()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(13, v0, v1, 0);
            v1.readException();
            String v2 = v1.readString();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public void getModVars(int[] p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
        } catch (android.os.IBinder v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
        if (p6 != null) {
            v0.writeInt(p6.length);
        } else {
            v0.writeInt(-1);
        }
        this.mRemote.transact(11, v0, v1, 0);
        v1.readException();
        v1.readIntArray(p6);
        v1.recycle();
        v0.recycle();
        return;
    }

    public int getPlayBpm()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(8, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public int getPlayPat()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(10, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public int getPlayPos()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(9, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public int getPlayTempo()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(7, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public boolean isPaused()
    {
        int v2 = 0;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(17, v0, v1, 0);
            v1.readException();
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (v1.readInt() != 0) {
            v2 = 1;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public void nextSong()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(15, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void pause()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(4, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void play(String[] p6, boolean p7, boolean p8)
    {
        int v2_0 = 1;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            int v4_0;
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            v0.writeStringArray(p6);
        } catch (int v2_1) {
            v1.recycle();
            v0.recycle();
            throw v2_1;
        }
        if (!p7) {
            v4_0 = 0;
        } else {
            v4_0 = 1;
        }
        v0.writeInt(v4_0);
        if (!p8) {
            v2_0 = 0;
        }
        v0.writeInt(v2_0);
        this.mRemote.transact(1, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void prevSong()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(16, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void registerCallback(org.helllabs.android.xmp.PlayerCallback p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            android.os.IBinder v2_3;
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
        } catch (android.os.IBinder v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
        if (p6 == null) {
            v2_3 = 0;
        } else {
            v2_3 = p6.asBinder();
        }
        v0.writeStrongBinder(v2_3);
        this.mRemote.transact(22, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }

    public void seek(int p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            v0.writeInt(p6);
            this.mRemote.transact(6, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public void stop()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(3, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public int time()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(5, v0, v1, 0);
            v1.readException();
            int v2 = v1.readInt();
            v1.recycle();
            v0.recycle();
            return v2;
        } catch (Throwable v3_0) {
            v1.recycle();
            v0.recycle();
            throw v3_0;
        }
    }

    public boolean toggleLoop()
    {
        int v2 = 0;
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
            this.mRemote.transact(18, v0, v1, 0);
            v1.readException();
        } catch (Throwable v3_1) {
            v1.recycle();
            v0.recycle();
            throw v3_1;
        }
        if (v1.readInt() != 0) {
            v2 = 1;
        }
        v1.recycle();
        v0.recycle();
        return v2;
    }

    public void unregisterCallback(org.helllabs.android.xmp.PlayerCallback p6)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            android.os.IBinder v2_3;
            v0.writeInterfaceToken("org.helllabs.android.xmp.ModInterface");
        } catch (android.os.IBinder v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
        if (p6 == null) {
            v2_3 = 0;
        } else {
            v2_3 = p6.asBinder();
        }
        v0.writeStrongBinder(v2_3);
        this.mRemote.transact(23, v0, v1, 0);
        v1.readException();
        v1.recycle();
        v0.recycle();
        return;
    }
}
package org.helllabs.android.xmp;
public abstract class ModInterface$Stub extends android.os.Binder implements org.helllabs.android.xmp.ModInterface {
    private static final String DESCRIPTOR = "org.helllabs.android.xmp.ModInterface";
    static final int TRANSACTION_add = 2;
    static final int TRANSACTION_deleteFile = 21;
    static final int TRANSACTION_getChannelData = 14;
    static final int TRANSACTION_getFileName = 19;
    static final int TRANSACTION_getInstruments = 20;
    static final int TRANSACTION_getModName = 12;
    static final int TRANSACTION_getModType = 13;
    static final int TRANSACTION_getModVars = 11;
    static final int TRANSACTION_getPlayBpm = 8;
    static final int TRANSACTION_getPlayPat = 10;
    static final int TRANSACTION_getPlayPos = 9;
    static final int TRANSACTION_getPlayTempo = 7;
    static final int TRANSACTION_isPaused = 17;
    static final int TRANSACTION_nextSong = 15;
    static final int TRANSACTION_pause = 4;
    static final int TRANSACTION_play = 1;
    static final int TRANSACTION_prevSong = 16;
    static final int TRANSACTION_registerCallback = 22;
    static final int TRANSACTION_seek = 6;
    static final int TRANSACTION_stop = 3;
    static final int TRANSACTION_time = 5;
    static final int TRANSACTION_toggleLoop = 18;
    static final int TRANSACTION_unregisterCallback = 23;

    public ModInterface$Stub()
    {
        this.attachInterface(this, "org.helllabs.android.xmp.ModInterface");
        return;
    }

    public static org.helllabs.android.xmp.ModInterface asInterface(android.os.IBinder p2)
    {
        org.helllabs.android.xmp.ModInterface v0_0;
        if (p2 != null) {
            org.helllabs.android.xmp.ModInterface v0_1 = p2.queryLocalInterface("org.helllabs.android.xmp.ModInterface");
            if ((v0_1 == null) || (!(v0_1 instanceof org.helllabs.android.xmp.ModInterface))) {
                v0_0 = new org.helllabs.android.xmp.ModInterface$Stub$Proxy(p2);
            } else {
                v0_0 = ((org.helllabs.android.xmp.ModInterface) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p11, android.os.Parcel p12, android.os.Parcel p13, int p14)
    {
        boolean v8_0 = 0;
        boolean v7 = 1;
        switch (p11) {
            case 1:
                int[] v2_0;
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                int[] v0_4 = p12.createStringArray();
                if (p12.readInt() == 0) {
                    v2_0 = 0;
                } else {
                    v2_0 = 1;
                }
                int[] v4_0;
                if (p12.readInt() == 0) {
                    v4_0 = 0;
                } else {
                    v4_0 = 1;
                }
                this.play(v0_4, v2_0, v4_0);
                p13.writeNoException();
                break;
            case 2:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.add(p12.createStringArray());
                p13.writeNoException();
                break;
            case 3:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.stop();
                p13.writeNoException();
                break;
            case 4:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.pause();
                p13.writeNoException();
                break;
            case 5:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_4 = this.time();
                p13.writeNoException();
                p13.writeInt(v6_4);
                break;
            case 6:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.seek(p12.readInt());
                p13.writeNoException();
                break;
            case 7:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_3 = this.getPlayTempo();
                p13.writeNoException();
                p13.writeInt(v6_3);
                break;
            case 8:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_2 = this.getPlayBpm();
                p13.writeNoException();
                p13.writeInt(v6_2);
                break;
            case 9:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_1 = this.getPlayPos();
                p13.writeNoException();
                p13.writeInt(v6_1);
                break;
            case 10:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_0 = this.getPlayPat();
                p13.writeNoException();
                p13.writeInt(v6_0);
                break;
            case 11:
                int[] v0_1;
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                int v1_0 = p12.readInt();
                if (v1_0 >= 0) {
                    v0_1 = new int[v1_0];
                } else {
                    v0_1 = 0;
                }
                this.getModVars(v0_1);
                p13.writeNoException();
                p13.writeIntArray(v0_1);
                break;
            case 12:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_11 = this.getModName();
                p13.writeNoException();
                p13.writeString(v6_11);
                break;
            case 13:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_10 = this.getModType();
                p13.writeNoException();
                p13.writeString(v6_10);
                break;
            case 14:
                int[] v0_6;
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                int v1_1 = p12.readInt();
                if (v1_1 >= 0) {
                    v0_6 = new int[v1_1];
                } else {
                    v0_6 = 0;
                }
                int[] v2_1;
                int v3 = p12.readInt();
                if (v3 >= 0) {
                    v2_1 = new int[v3];
                } else {
                    v2_1 = 0;
                }
                int[] v4_1;
                int v5 = p12.readInt();
                if (v5 >= 0) {
                    v4_1 = new int[v5];
                } else {
                    v4_1 = 0;
                }
                this.getChannelData(v0_6, v2_1, v4_1);
                p13.writeNoException();
                p13.writeIntArray(v0_6);
                p13.writeIntArray(v2_1);
                p13.writeIntArray(v4_1);
                break;
            case 15:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.nextSong();
                p13.writeNoException();
                break;
            case 16:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.prevSong();
                p13.writeNoException();
                break;
            case 17:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_9 = this.isPaused();
                p13.writeNoException();
                if (v6_9) {
                    v8_0 = 1;
                }
                p13.writeInt(v8_0);
                break;
            case 18:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_8 = this.toggleLoop();
                p13.writeNoException();
                if (v6_8) {
                    v8_0 = 1;
                }
                p13.writeInt(v8_0);
                break;
            case 19:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_7 = this.getFileName();
                p13.writeNoException();
                p13.writeString(v6_7);
                break;
            case 20:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_6 = this.getInstruments();
                p13.writeNoException();
                p13.writeStringArray(v6_6);
                break;
            case 21:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                boolean v6_5 = this.deleteFile();
                p13.writeNoException();
                if (v6_5) {
                    v8_0 = 1;
                }
                p13.writeInt(v8_0);
                break;
            case 22:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.registerCallback(org.helllabs.android.xmp.PlayerCallback$Stub.asInterface(p12.readStrongBinder()));
                p13.writeNoException();
                break;
            case 23:
                p12.enforceInterface("org.helllabs.android.xmp.ModInterface");
                this.unregisterCallback(org.helllabs.android.xmp.PlayerCallback$Stub.asInterface(p12.readStrongBinder()));
                p13.writeNoException();
                break;
            case 1598968902:
                p13.writeString("org.helllabs.android.xmp.ModInterface");
                break;
            default:
                v7 = super.onTransact(p11, p12, p13, p14);
        }
        return v7;
    }
}
package org.helllabs.android.xmp;
 class ModList$10 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$10(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        if (p5 == -1) {
            if (!org.helllabs.android.xmp.InfoCache.delete(this.this$0.deleteName)) {
                org.helllabs.android.xmp.Message.toast(this.this$0.context, this.this$0.getString(2131361857));
            } else {
                this.this$0.updateModlist(this.this$0.currentDir);
                org.helllabs.android.xmp.Message.toast(this.this$0.context, this.this$0.getString(2131361856));
            }
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$1 implements android.view.View$OnTouchListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$1(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onTouch(android.view.View p3, android.view.MotionEvent p4)
    {
        if (p4.getAction() != 1) {
            this.this$0.curPath.setTextColor(2131165184);
        } else {
            this.this$0.curPath.setTextColor(this.this$0.textColor);
        }
        return 0;
    }
}
package org.helllabs.android.xmp;
 class ModList$2 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$2(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p5)
    {
        String v1 = new java.io.File(new StringBuilder().append(this.this$0.currentDir).append("/.").toString()).getParentFile().getParent();
        if (v1 == null) {
            v1 = "/";
        }
        this.this$0.updateModlist(v1);
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$3 implements android.view.View$OnTouchListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$3(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onTouch(android.view.View p3, android.view.MotionEvent p4)
    {
        if (p4.getAction() != 1) {
            this.this$0.upButton.setImageResource(2130837530);
        } else {
            this.this$0.upButton.setImageResource(2130837529);
        }
        return 0;
    }
}
package org.helllabs.android.xmp;
 class ModList$4 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;
    final synthetic org.helllabs.android.xmp.Examples val$examples;
    final synthetic String val$media_path;

    ModList$4(org.helllabs.android.xmp.ModList p1, org.helllabs.android.xmp.Examples p2, String p3)
    {
        this.this$0 = p1;
        this.val$examples = p2;
        this.val$media_path = p3;
        return;
    }

    public void onClick(android.content.DialogInterface p6, int p7)
    {
        this.val$examples.install(this.val$media_path, this.this$0.prefs.getBoolean("examples", 1));
        this.this$0.updateModlist(this.val$media_path);
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$5 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$5(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p2, int p3)
    {
        this.this$0.finish();
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$6$1 implements java.lang.Runnable {
    final synthetic org.helllabs.android.xmp.ModList$6 this$1;
    final synthetic org.helllabs.android.xmp.PlaylistInfoAdapter val$playlist;

    ModList$6$1(org.helllabs.android.xmp.ModList$6 p1, org.helllabs.android.xmp.PlaylistInfoAdapter p2)
    {
        this.this$1 = p1;
        this.val$playlist = p2;
        return;
    }

    public void run()
    {
        this.this$1.this$0.setListAdapter(this.val$playlist);
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$6 extends java.lang.Thread {
    final synthetic org.helllabs.android.xmp.ModList this$0;
    final synthetic java.io.File val$modDir;
    final synthetic String val$path;

    ModList$6(org.helllabs.android.xmp.ModList p1, java.io.File p2, String p3)
    {
        this.this$0 = p1;
        this.val$modDir = p2;
        this.val$path = p3;
        return;
    }

    public void run()
    {
        java.util.ArrayList v14_1 = new java.util.ArrayList();
        java.io.File[] v7_1 = this.val$modDir.listFiles(new org.helllabs.android.xmp.ModList$DirFilter(this.this$0));
        int v13_0 = v7_1.length;
        int v12_0 = 0;
        while (v12_0 < v13_0) {
            java.io.File v10_0 = v7_1[v12_0];
            android.app.ProgressDialog v2_3 = this.this$0;
            v2_3.directoryNum = (v2_3.directoryNum + 1);
            v14_1.add(new org.helllabs.android.xmp.PlaylistInfo(v10_0.getName(), "Directory", v10_0.getAbsolutePath(), 2130837511));
            v12_0++;
        }
        java.util.Collections.sort(v14_1);
        this.this$0.modList.addAll(v14_1);
        v14_1.clear();
        java.io.File[] v7_0 = this.val$modDir.listFiles(new org.helllabs.android.xmp.ModList$ModFilter(this.this$0));
        int v13_1 = v7_0.length;
        int v12_1 = 0;
        while (v12_1 < v13_1) {
            java.io.File v10_1 = v7_0[v12_1];
            String v11 = new StringBuilder().append(this.val$path).append("/").append(v10_1.getName()).toString();
            android.app.ProgressDialog v2_26 = new StringBuilder().append(java.text.DateFormat.getDateTimeInstance(2, 2).format(Long.valueOf(v10_1.lastModified())));
            int v4_5 = new Object[1];
            v4_5[0] = Long.valueOf((v10_1.length() / 1024));
            v14_1.add(new org.helllabs.android.xmp.PlaylistInfo(v10_1.getName(), v2_26.append(String.format(" (%d kB)", v4_5)).toString(), v11));
            v12_1++;
        }
        java.util.Collections.sort(v14_1);
        this.this$0.modList.addAll(v14_1);
        this.this$0.handler.post(new org.helllabs.android.xmp.ModList$6$1(this, new org.helllabs.android.xmp.PlaylistInfoAdapter(this.this$0, 2130903052, 2131296297, this.this$0.modList, this.this$0.prefs.getBoolean("use_filename", 0))));
        this.this$0.progressDialog.dismiss();
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$7 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$7(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p2, int p3)
    {
        this.this$0.playlistSelection = p3;
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$8 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$8(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p6, int p7)
    {
        org.helllabs.android.xmp.PlaylistUtils v0_1 = new org.helllabs.android.xmp.PlaylistUtils();
        if ((p7 == -1) && (this.this$0.playlistSelection >= 0)) {
            v0_1.filesToPlaylist(this.this$0.context, ((org.helllabs.android.xmp.PlaylistInfo) this.this$0.modList.get(this.this$0.fileSelection)).filename, org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[this.this$0.playlistSelection]);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$9 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$9(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p9, int p10)
    {
        if ((p10 == -1) && (this.this$0.playlistSelection >= 0)) {
            int v1 = 0;
            int v0 = this.this$0.fileSelection;
            while (v0 < (this.this$0.fileSelection + this.this$0.fileNum)) {
                org.helllabs.android.xmp.PlaylistInfo v4_1 = ((org.helllabs.android.xmp.PlaylistInfo) this.this$0.modList.get(v0));
                org.helllabs.android.xmp.ModInfo v3_1 = new org.helllabs.android.xmp.ModInfo();
                if (!org.helllabs.android.xmp.InfoCache.testModule(v4_1.filename, v3_1)) {
                    v1 = 1;
                } else {
                    org.helllabs.android.xmp.PlaylistUtils.addToList(this.this$0.context, org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[this.this$0.playlistSelection], new StringBuilder().append(v4_1.filename).append(":").append(v3_1.type).append(":").append(v3_1.name).toString());
                }
                v0++;
            }
            if (v1 != 0) {
                if (this.this$0.fileNum <= 1) {
                    org.helllabs.android.xmp.Message.error(this.this$0.context, "Unrecognized file format");
                } else {
                    org.helllabs.android.xmp.Message.toast(this.this$0.context, "Only valid files were added to playlist");
                }
            }
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class ModList$DirFilter implements java.io.FileFilter {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$DirFilter(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean accept(java.io.File p2)
    {
        return p2.isDirectory();
    }
}
package org.helllabs.android.xmp;
 class ModList$ModFilter implements java.io.FilenameFilter {
    final synthetic org.helllabs.android.xmp.ModList this$0;

    ModList$ModFilter(org.helllabs.android.xmp.ModList p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean accept(java.io.File p3, String p4)
    {
        int v1_1;
        if (new java.io.File(p3, p4).isDirectory()) {
            v1_1 = 0;
        } else {
            v1_1 = 1;
        }
        return v1_1;
    }
}
package org.helllabs.android.xmp;
public abstract class PlaylistActivity extends org.helllabs.android.xmp.ActionBarListActivity {
    static final int PLAY_MODULE_REQUEST = 669;
    static final int SETTINGS_REQUEST = 45;
    String[] addList;
    private android.content.ServiceConnection connection;
    android.content.Context context;
    String deleteName;
    boolean loopMode;
    java.util.List modList;
    org.helllabs.android.xmp.ModInterface modPlayer;
    android.widget.ImageButton playAllButton;
    android.content.SharedPreferences prefs;
    boolean showToasts;
    boolean shuffleMode;
    android.widget.ImageButton toggleLoopButton;
    android.widget.ImageButton toggleShuffleButton;

    public PlaylistActivity()
    {
        this.modList = new java.util.ArrayList();
        this.shuffleMode = 1;
        this.loopMode = 0;
        this.connection = new org.helllabs.android.xmp.PlaylistActivity$4(this);
        return;
    }

    static synthetic android.content.ServiceConnection access$000(org.helllabs.android.xmp.PlaylistActivity p1)
    {
        return p1.connection;
    }

    protected void addToQueue(int p12, int p13)
    {
        String[] v3 = new String[p13];
        int v2 = 0;
        int v1 = 0;
        int v6 = 0;
        while (v1 < p13) {
            int v5_1;
            String v0 = ((org.helllabs.android.xmp.PlaylistInfo) this.modList.get((p12 + v1))).filename;
            if (!org.helllabs.android.xmp.InfoCache.testModule(v0)) {
                v2 = 1;
                v5_1 = v6;
            } else {
                v5_1 = (v6 + 1);
                v3[v6] = v0;
            }
            v1++;
            v6 = v5_1;
        }
        if (v2 != 0) {
            org.helllabs.android.xmp.Message.toast(this.context, "Only valid files were sent to player");
        }
        if (v6 > 0) {
            android.content.Intent v7_1 = new android.content.Intent(this, org.helllabs.android.xmp.ModService);
            String[] v4 = new String[v6];
            System.arraycopy(v3, 0, v4, 0, v6);
            if (!org.helllabs.android.xmp.ModService.isPlaying) {
                this.playModule(v4);
            } else {
                this.addList = v4;
                this.bindService(v7_1, this.connection, 0);
            }
        }
        return;
    }

    protected void onActivityResult(int p4, int p5, android.content.Intent p6)
    {
        android.util.Log.i("Xmp ModList", new StringBuilder().append("Activity result ").append(p4).append(",").append(p5).toString());
        switch (p4) {
            case 45:
                this.update();
                this.showToasts = this.prefs.getBoolean("show_toast", 1);
                break;
            case 669:
                if (p5 == -1) {
                } else {
                    this.update();
                }
                break;
        }
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration p1)
    {
        super.onConfigurationChanged(p1);
        return;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.context = this;
        this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this);
        this.showToasts = this.prefs.getBoolean("show_toast", 1);
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p3)
    {
        this.getMenuInflater().inflate(2131492864, p3);
        return super.onCreateOptionsMenu(p3);
    }

    protected void onListItemClick(android.widget.ListView p4, android.view.View p5, int p6, long p7)
    {
        String v0 = ((org.helllabs.android.xmp.PlaylistInfo) this.modList.get(p6)).filename;
        if (!org.helllabs.android.xmp.InfoCache.testModuleForceIfInvalid(v0)) {
            org.helllabs.android.xmp.Message.toast(this.context, "Unrecognized file format");
        } else {
            this.playModule(v0);
        }
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p4)
    {
        android.content.Intent v1_3;
        switch (p4.getItemId()) {
            case 16908332:
                android.content.Intent v0_1 = new android.content.Intent(this, org.helllabs.android.xmp.PlaylistMenu);
                v0_1.addFlags(67108864);
                this.startActivity(v0_1);
                v1_3 = 1;
                break;
            case 2131296260:
                this.update();
                v1_3 = super.onOptionsItemSelected(p4);
                break;
            case 2131296298:
                new org.helllabs.android.xmp.PlaylistUtils().newPlaylist(this);
                break;
            case 2131296299:
                this.startActivityForResult(new android.content.Intent(this, org.helllabs.android.xmp.Settings), 45);
                break;
            default:
        }
        return v1_3;
    }

    void playModule(String p3)
    {
        String[] v0 = new String[1];
        v0[0] = p3;
        this.playModule(v0);
        return;
    }

    void playModule(java.util.List p9)
    {
        int v4 = 0;
        java.util.Iterator v2_1 = p9.iterator();
        while (v2_1.hasNext()) {
            if (new java.io.File(((org.helllabs.android.xmp.PlaylistInfo) v2_1.next()).filename).isFile()) {
                v4++;
            }
        }
        if (v4 != 0) {
            String[] v3 = new String[v4];
            int v0 = 0;
            java.util.Iterator v2_0 = p9.iterator();
            while (v2_0.hasNext()) {
                org.helllabs.android.xmp.PlaylistInfo v5_1 = ((org.helllabs.android.xmp.PlaylistInfo) v2_0.next());
                if (new java.io.File(v5_1.filename).isFile()) {
                    int v1 = (v0 + 1);
                    v3[v0] = v5_1.filename;
                    v0 = v1;
                }
            }
            if (v0 > 0) {
                this.playModule(v3);
            }
        }
        return;
    }

    void playModule(String[] p4)
    {
        if (this.showToasts) {
            if (p4.length <= 1) {
                org.helllabs.android.xmp.Message.toast(this, "Play only this module");
            } else {
                org.helllabs.android.xmp.Message.toast(this, "Play all modules in list");
            }
        }
        android.content.Intent v0_0 = new android.content.Intent(this, org.helllabs.android.xmp.Player);
        v0_0.putExtra("files", p4);
        v0_0.putExtra("shuffle", this.shuffleMode);
        v0_0.putExtra("loop", this.loopMode);
        android.util.Log.i("Xmp PlaylistActivity", "Start activity Player");
        this.startActivityForResult(v0_0, 669);
        return;
    }

    void setupButtons()
    {
        android.widget.ImageButton v0_8;
        this.playAllButton = ((android.widget.ImageButton) this.findViewById(2131296266));
        this.toggleLoopButton = ((android.widget.ImageButton) this.findViewById(2131296267));
        this.toggleShuffleButton = ((android.widget.ImageButton) this.findViewById(2131296268));
        this.playAllButton.setImageResource(2130837522);
        this.playAllButton.setOnClickListener(new org.helllabs.android.xmp.PlaylistActivity$1(this));
        if (!this.loopMode) {
            v0_8 = 2130837520;
        } else {
            v0_8 = 2130837521;
        }
        android.widget.ImageButton v0_12;
        this.toggleLoopButton.setImageResource(v0_8);
        this.toggleLoopButton.setOnClickListener(new org.helllabs.android.xmp.PlaylistActivity$2(this));
        if (!this.shuffleMode) {
            v0_12 = 2130837523;
        } else {
            v0_12 = 2130837524;
        }
        this.toggleShuffleButton.setImageResource(v0_12);
        this.toggleShuffleButton.setOnClickListener(new org.helllabs.android.xmp.PlaylistActivity$3(this));
        return;
    }

    abstract void update();
}
package org.helllabs.android.xmp;
public class ModList extends org.helllabs.android.xmp.PlaylistActivity {
    private android.content.DialogInterface$OnClickListener addDirToPlaylistDialogClickListener;
    private android.content.DialogInterface$OnClickListener addFileToPlaylistDialogClickListener;
    android.content.Context context;
    android.widget.TextView curPath;
    String currentDir;
    private android.content.DialogInterface$OnClickListener deleteDialogClickListener;
    int directoryNum;
    int fileNum;
    int fileSelection;
    final android.os.Handler handler;
    boolean isBadDir;
    boolean isPathMenu;
    int parentNum;
    int playlistSelection;
    android.app.ProgressDialog progressDialog;
    int textColor;
    android.widget.ImageButton upButton;

    public ModList()
    {
        this.isBadDir = 0;
        this.handler = new android.os.Handler();
        this.addDirToPlaylistDialogClickListener = new org.helllabs.android.xmp.ModList$8(this);
        this.addFileToPlaylistDialogClickListener = new org.helllabs.android.xmp.ModList$9(this);
        this.deleteDialogClickListener = new org.helllabs.android.xmp.ModList$10(this);
        return;
    }

    protected void addToPlaylist(int p6, int p7, android.content.DialogInterface$OnClickListener p8)
    {
        this.fileSelection = p6;
        this.fileNum = p7;
        this.playlistSelection = 0;
        new android.app.AlertDialog$Builder(this).setTitle(2131361862).setPositiveButton(2131361861, p8).setNegativeButton(2131361860, p8).setSingleChoiceItems(org.helllabs.android.xmp.PlaylistUtils.listNoSuffix(), 0, new org.helllabs.android.xmp.ModList$7(this)).show();
        return;
    }

    protected void clearCachedEntries(int p5, int p6)
    {
        int v1 = 0;
        while (v1 < p6) {
            org.helllabs.android.xmp.InfoCache.clearCache(((org.helllabs.android.xmp.PlaylistInfo) this.modList.get((p5 + v1))).filename);
            v1++;
        }
        return;
    }

    public boolean onContextItemSelected(android.view.MenuItem p7)
    {
        android.widget.AdapterView$AdapterContextMenuInfo v1_1 = ((android.widget.AdapterView$AdapterContextMenuInfo) p7.getMenuInfo());
        int v0 = p7.getItemId();
        if (!this.isPathMenu) {
            if (v1_1.position >= this.parentNum) {
                if (v1_1.position >= this.directoryNum) {
                    switch (v0) {
                        case 0:
                            this.addToPlaylist(v1_1.position, 1, this.addFileToPlaylistDialogClickListener);
                            break;
                        case 1:
                            this.addToQueue(v1_1.position, 1);
                            break;
                        case 2:
                            this.deleteName = ((org.helllabs.android.xmp.PlaylistInfo) this.modList.get(v1_1.position)).filename;
                            org.helllabs.android.xmp.Message.yesNoDialog(this, "Delete", new StringBuilder().append("Are you sure to delete ").append(this.deleteName).append("?").toString(), this.deleteDialogClickListener);
                            break;
                        default:
                    }
                } else {
                    if (v0 == 0) {
                        this.addToPlaylist(v1_1.position, 1, this.addDirToPlaylistDialogClickListener);
                    }
                }
            }
        } else {
            switch (v0) {
                case 0:
                    this.addToPlaylist(this.directoryNum, (this.modList.size() - this.directoryNum), this.addFileToPlaylistDialogClickListener);
                    break;
                case 1:
                    this.addToQueue(this.directoryNum, (this.modList.size() - this.directoryNum));
                    break;
                case 2:
                    this.clearCachedEntries(this.directoryNum, (this.modList.size() - this.directoryNum));
                    break;
            }
        }
        return 1;
    }

    public void onCreate(android.os.Bundle p8)
    {
        super.onCreate(p8);
        this.setContentView(2130903046);
        this.setupButtons();
        this.registerForContextMenu(this.getListView());
        String v2 = this.prefs.getString("media_path", org.helllabs.android.xmp.Settings.DEFAULT_MEDIA_PATH);
        this.context = this;
        this.setTitle("File Browser");
        this.curPath = ((android.widget.TextView) this.findViewById(2131296264));
        this.registerForContextMenu(this.curPath);
        this.textColor = this.curPath.getCurrentTextColor();
        this.curPath.setOnTouchListener(new org.helllabs.android.xmp.ModList$1(this));
        this.upButton = ((android.widget.ImageButton) this.findViewById(2131296265));
        this.upButton.setOnClickListener(new org.helllabs.android.xmp.ModList$2(this));
        this.upButton.setOnTouchListener(new org.helllabs.android.xmp.ModList$3(this));
        if (new java.io.File(v2).isDirectory()) {
            this.updateModlist(v2);
        } else {
            org.helllabs.android.xmp.Examples v1_1 = new org.helllabs.android.xmp.Examples(this);
            this.isBadDir = 1;
            android.app.AlertDialog v0 = new android.app.AlertDialog$Builder(this).create();
            v0.setTitle("Path not found");
            v0.setMessage(new StringBuilder().append(v2).append(" not found. ").append("Create this directory or change the module path.").toString());
            v0.setButton("Create", new org.helllabs.android.xmp.ModList$4(this, v1_1, v2));
            v0.setButton2("Back", new org.helllabs.android.xmp.ModList$5(this));
            v0.show();
        }
        return;
    }

    public void onCreateContextMenu(android.view.ContextMenu p7, android.view.View p8, android.view.ContextMenu$ContextMenuInfo p9)
    {
        if (!p8.equals(this.curPath)) {
            this.isPathMenu = 0;
            if (((android.widget.AdapterView$AdapterContextMenuInfo) p9).position >= this.parentNum) {
                if (((android.widget.AdapterView$AdapterContextMenuInfo) p9).position >= this.directoryNum) {
                    p7.setHeaderTitle("This file");
                    p7.add(0, 0, 0, "Add to playlist");
                    p7.add(0, 1, 1, "Add to play queue");
                    p7.add(0, 2, 2, "Delete file");
                } else {
                    p7.setHeaderTitle("This directory");
                    p7.add(0, 0, 0, "Add to playlist");
                }
            }
        } else {
            this.isPathMenu = 1;
            p7.setHeaderTitle("All files");
            p7.add(0, 0, 0, "Add to playlist");
            p7.add(0, 1, 1, "Add to play queue");
            p7.add(0, 2, 2, "Clear cache");
        }
        return;
    }

    protected void onListItemClick(android.widget.ListView p5, android.view.View p6, int p7, long p8)
    {
        String v1 = ((org.helllabs.android.xmp.PlaylistInfo) this.modList.get(p7)).filename;
        java.io.File v0_1 = new java.io.File(v1);
        if (!v0_1.isDirectory()) {
            super.onListItemClick(p5, p6, p7, p8);
        } else {
            if (v0_1.getName().equals("..")) {
                v1 = v0_1.getParentFile().getParent();
                if (v1 == null) {
                    v1 = "/";
                }
            }
            this.updateModlist(v1);
        }
        return;
    }

    public void update()
    {
        this.updateModlist(this.currentDir);
        return;
    }

    public void updateModlist(String p6)
    {
        this.modList.clear();
        this.currentDir = p6;
        this.curPath.setText(p6);
        this.isBadDir = 0;
        this.progressDialog = android.app.ProgressDialog.show(this, "Please wait", "Scanning module files...", 1);
        this.directoryNum = 0;
        this.parentNum = 0;
        new org.helllabs.android.xmp.ModList$6(this, new java.io.File(p6), p6).start();
        return;
    }
}
package org.helllabs.android.xmp;
public interface Watchdog$onTimeoutListener {

    public abstract void onTimeout();
}
package org.helllabs.android.xmp;
 class ModService$1 implements org.helllabs.android.xmp.Watchdog$onTimeoutListener {
    final synthetic org.helllabs.android.xmp.ModService this$0;

    ModService$1(org.helllabs.android.xmp.ModService p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onTimeout()
    {
        android.util.Log.e("Xmp ModService", "Stopped by watchdog");
        this.this$0.stopSelf();
        return;
    }
}
package org.helllabs.android.xmp;
 class ModService$2 extends org.helllabs.android.xmp.ModInterface$Stub {
    final synthetic org.helllabs.android.xmp.ModService this$0;

    ModService$2(org.helllabs.android.xmp.ModService p1)
    {
        this.this$0 = p1;
        return;
    }

    public void add(String[] p3)
    {
        this.this$0.queue.add(p3);
        this.this$0.notifier.notification("Added to play queue");
        return;
    }

    public boolean deleteFile()
    {
        android.util.Log.i("Xmp ModService", new StringBuilder().append("Delete file ").append(this.this$0.fileName).toString());
        return org.helllabs.android.xmp.InfoCache.delete(this.this$0.fileName);
    }

    public void getChannelData(int[] p3, int[] p4, int[] p5)
    {
        try {
            if (this.this$0.updateData.booleanValue()) {
                this.this$0.xmp.getChannelData(p3, p4, p5);
            }
        } catch (org.helllabs.android.xmp.Xmp v0_1) {
            throw v0_1;
        }
        return;
    }

    public String getFileName()
    {
        return this.this$0.fileName;
    }

    public String[] getInstruments()
    {
        return this.this$0.xmp.getInstruments();
    }

    public String getModName()
    {
        return this.this$0.xmp.getModName();
    }

    public String getModType()
    {
        return this.this$0.xmp.getModType();
    }

    public void getModVars(int[] p2)
    {
        this.this$0.xmp.getModVars(p2);
        return;
    }

    public int getPlayBpm()
    {
        return this.this$0.xmp.getPlayBpm();
    }

    public int getPlayPat()
    {
        return this.this$0.xmp.getPlayPat();
    }

    public int getPlayPos()
    {
        return this.this$0.xmp.getPlayPos();
    }

    public int getPlayTempo()
    {
        return this.this$0.xmp.getPlayTempo();
    }

    public boolean isPaused()
    {
        return this.this$0.paused;
    }

    public void nextSong()
    {
        this.this$0.xmp.stopModule();
        this.this$0.stopPlaying = 0;
        this.this$0.paused = 0;
        return;
    }

    public void pause()
    {
        int v0_2;
        if (this.this$0.paused) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        this.this$0.paused = v0_2;
        return;
    }

    public void play(String[] p7, boolean p8, boolean p9)
    {
        this.this$0.notifier.notification();
        this.this$0.queue = new org.helllabs.android.xmp.QueueManager(p7, p8, p9);
        this.this$0.returnToPrev = 0;
        this.this$0.stopPlaying = 0;
        this.this$0.paused = 0;
        if (!org.helllabs.android.xmp.ModService.isPlaying) {
            android.util.Log.i("Xmp ModService", "Start player thread");
            this.this$0.restartList = 0;
            this.this$0.playThread = new Thread(new org.helllabs.android.xmp.ModService$PlayRunnable(this.this$0, 0));
            this.this$0.playThread.start();
        } else {
            android.util.Log.i("Xmp ModService", "Use existing player thread");
            this.this$0.restartList = 1;
            this.nextSong();
        }
        org.helllabs.android.xmp.ModService.isPlaying = 1;
        return;
    }

    public void prevSong()
    {
        this.this$0.xmp.stopModule();
        this.this$0.returnToPrev = 1;
        this.this$0.stopPlaying = 0;
        this.this$0.paused = 0;
        return;
    }

    public void registerCallback(org.helllabs.android.xmp.PlayerCallback p2)
    {
        if (p2 != null) {
            this.this$0.callbacks.register(p2);
        }
        return;
    }

    public void seek(int p2)
    {
        this.this$0.xmp.seek(p2);
        return;
    }

    public void stop()
    {
        this.this$0.xmp.stopModule();
        this.this$0.paused = 0;
        this.this$0.stopPlaying = 1;
        return;
    }

    public int time()
    {
        return (this.this$0.xmp.time() / 100);
    }

    public boolean toggleLoop()
    {
        boolean v0_2;
        if (this.this$0.looped) {
            v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        this.this$0.looped = v0_2;
        return this.this$0.looped;
    }

    public void unregisterCallback(org.helllabs.android.xmp.PlayerCallback p2)
    {
        if (p2 != null) {
            this.this$0.callbacks.unregister(p2);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class ModService$Notifier {
    private static final int NOTIFY_ID = 2130903048;
    android.app.PendingIntent contentIntent;
    int index;
    private android.app.NotificationManager nm;
    final synthetic org.helllabs.android.xmp.ModService this$0;
    String title;

    public ModService$Notifier(org.helllabs.android.xmp.ModService p4)
    {
        this.this$0 = p4;
        this.nm = ((android.app.NotificationManager) p4.getSystemService("notification"));
        this.contentIntent = android.app.PendingIntent.getActivity(p4, 0, new android.content.Intent(p4, org.helllabs.android.xmp.Player), 0);
        return;
    }

    private String message()
    {
        String v0_2;
        if (this.this$0.queue.size() <= 1) {
            v0_2 = this.title;
        } else {
            Object[] v1_1 = new Object[3];
            v1_1[0] = this.title;
            v1_1[1] = Integer.valueOf(this.index);
            v1_1[2] = Integer.valueOf(this.this$0.queue.size());
            v0_2 = String.format("%s (%d/%d)", v1_1);
        }
        return v0_2;
    }

    public void cancel()
    {
        this.nm.cancel(2130903048);
        return;
    }

    public void notification()
    {
        this.notification(0, 0);
        return;
    }

    public void notification(String p2)
    {
        this.notification(p2, this.message());
        return;
    }

    public void notification(String p3, int p4)
    {
        this.title = p3;
        this.index = (p4 + 1);
        this.notification(this.message(), this.message());
        return;
    }

    public void notification(String p5, String p6)
    {
        android.app.Notification v0_1 = new android.app.Notification(2130837528, p5, System.currentTimeMillis());
        v0_1.setLatestEventInfo(this.this$0, this.this$0.getText(2131361792), p6, this.contentIntent);
        v0_1.flags = (v0_1.flags | 2);
        this.nm.notify(2130903048, v0_1);
        return;
    }
}
package org.helllabs.android.xmp;
 class ModService$PlayRunnable implements java.lang.Runnable {
    final synthetic org.helllabs.android.xmp.ModService this$0;

    private ModService$PlayRunnable(org.helllabs.android.xmp.ModService p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ModService$PlayRunnable(org.helllabs.android.xmp.ModService p1, org.helllabs.android.xmp.ModService$1 p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        do {
            this.this$0.fileName = this.this$0.queue.getFilename();
            if (org.helllabs.android.xmp.InfoCache.testModule(this.this$0.fileName)) {
                android.util.Log.i("Xmp ModService", new StringBuilder().append("Load ").append(this.this$0.fileName).toString());
                if (this.this$0.xmp.loadModule(this.this$0.fileName) >= 0) {
                    this.this$0.notifier.notification(this.this$0.xmp.getModName(), this.this$0.queue.index());
                    int v5 = this.this$0.callbacks.beginBroadcast();
                    int v3 = 0;
                    while (v3 < v5) {
                        try {
                            ((org.helllabs.android.xmp.PlayerCallback) this.this$0.callbacks.getBroadcastItem(v3)).newModCallback(this.this$0.fileName, this.this$0.xmp.getInstruments());
                        } catch (org.helllabs.android.xmp.ModService v8) {
                        }
                        v3++;
                    }
                    this.this$0.callbacks.finishBroadcast();
                    String v7 = this.this$0.prefs.getString("vol_boost", "1");
                    this.this$0.audio.play();
                    this.this$0.xmp.startPlayer(0, this.this$0.sampleRate, this.this$0.sampleFormat);
                    this.this$0.xmp.setMixerAmp(Integer.parseInt(v7));
                    this.this$0.xmp.setMixerPan(this.this$0.prefs.getInt("pan_separation", 70));
                    this.this$0.updateData = Boolean.valueOf(1);
                    short[] v0 = new short[this.this$0.minSize];
                    int v4 = 0;
                    while (this.this$0.xmp.playFrame() == 0) {
                        int v1 = this.this$0.xmp.getLoopCount();
                        if ((!this.this$0.looped) && (v1 != v4)) {
                            break;
                        }
                        v4 = v1;
                        this.this$0.audio.write(v0, 0, this.this$0.xmp.getBuffer(v0));
                        while (this.this$0.paused) {
                            this.this$0.audio.pause();
                            this.this$0.watchdog.refresh();
                            try {
                                Thread.sleep(500);
                                org.helllabs.android.xmp.ModService.access$000(this.this$0);
                            } catch (InterruptedException v2) {
                                break;
                            }
                        }
                        this.this$0.audio.play();
                        this.this$0.watchdog.refresh();
                        org.helllabs.android.xmp.ModService.access$000(this.this$0);
                    }
                    this.this$0.xmp.endPlayer();
                    this.this$0.xmp.releaseModule();
                    this.this$0.audio.stop();
                    if (!this.this$0.restartList) {
                        if (this.this$0.returnToPrev) {
                            this.this$0.queue.previous();
                            this.this$0.returnToPrev = 0;
                        }
                    } else {
                        this.this$0.queue.restart();
                        this.this$0.restartList = 0;
                    }
                } else {
                    android.util.Log.e("Xmp ModService", new StringBuilder().append("Error loading ").append(this.this$0.fileName).toString());
                }
            } else {
                android.util.Log.w("Xmp ModService", new StringBuilder().append(this.this$0.fileName).append(": unrecognized format").toString());
            }
        } while((!this.this$0.stopPlaying) && (this.this$0.queue.next()));
        this.this$0.updateData = Boolean.valueOf(0);
        this.this$0.watchdog.stop();
        this.this$0.notifier.cancel();
        this.this$0.end();
        this.this$0.stopSelf();
        return;
    }
}
package org.helllabs.android.xmp;
public class ModService extends android.app.Service {
    static boolean isPlaying;
    private static reflect.Method registerMediaButtonEventReceiver;
    private static reflect.Method unregisterMediaButtonEventReceiver;
    android.media.AudioTrack audio;
    private android.media.AudioManager audioManager;
    boolean autoPaused;
    private final org.helllabs.android.xmp.ModInterface$Stub binder;
    final android.os.RemoteCallbackList callbacks;
    String currentTitle;
    String fileName;
    boolean interpolate;
    org.helllabs.android.xmp.XmpPhoneStateListener listener;
    boolean looped;
    int minSize;
    org.helllabs.android.xmp.ModService$Notifier notifier;
    boolean paused;
    Thread playThread;
    android.content.SharedPreferences prefs;
    org.helllabs.android.xmp.QueueManager queue;
    private android.content.ComponentName remoteControlResponder;
    boolean restartList;
    boolean returnToPrev;
    int sampleFormat;
    int sampleRate;
    boolean stereo;
    boolean stopPlaying;
    android.telephony.TelephonyManager tm;
    Boolean updateData;
    org.helllabs.android.xmp.Watchdog watchdog;
    final org.helllabs.android.xmp.Xmp xmp;

    static ModService()
    {
        org.helllabs.android.xmp.ModService.isPlaying = 0;
        org.helllabs.android.xmp.ModService.initializeRemoteControlRegistrationMethods();
        return;
    }

    public ModService()
    {
        this.xmp = new org.helllabs.android.xmp.Xmp();
        this.stopPlaying = 0;
        this.updateData = Boolean.valueOf(0);
        this.callbacks = new android.os.RemoteCallbackList();
        this.autoPaused = 0;
        this.binder = new org.helllabs.android.xmp.ModService$2(this);
        return;
    }

    static synthetic void access$000(org.helllabs.android.xmp.ModService p0)
    {
        p0.checkMediaButtons();
        return;
    }

    private void checkMediaButtons()
    {
        org.helllabs.android.xmp.Xmp v1_0 = 1;
        int v0 = org.helllabs.android.xmp.RemoteControlReceiver.keyCode;
        if (v0 > 0) {
            switch (v0) {
                case 85:
                    android.util.Log.i("Xmp ModService", "Handle KEYCODE_MEDIA_PLAY_PAUSE");
                    if (this.paused) {
                        v1_0 = 0;
                    }
                    this.paused = v1_0;
                    break;
                case 86:
                    android.util.Log.i("Xmp ModService", "Handle KEYCODE_MEDIA_STOP");
                    this.xmp.stopModule();
                    this.paused = 0;
                    this.stopPlaying = 1;
                    break;
                case 87:
                    android.util.Log.i("Xmp ModService", "Handle KEYCODE_MEDIA_NEXT");
                    this.xmp.stopModule();
                    this.stopPlaying = 0;
                    this.paused = 0;
                    break;
                case 88:
                    android.util.Log.i("Xmp ModService", "Handle KEYCODE_MEDIA_PREVIOUS");
                    if (this.xmp.time() <= 20) {
                        this.xmp.stopModule();
                        this.returnToPrev = 1;
                        this.stopPlaying = 0;
                    } else {
                        this.xmp.seek(0);
                    }
                    this.paused = 0;
                    break;
            }
            org.helllabs.android.xmp.RemoteControlReceiver.keyCode = -1;
        }
        return;
    }

    private static void initializeRemoteControlRegistrationMethods()
    {
        try {
            if (org.helllabs.android.xmp.ModService.registerMediaButtonEventReceiver != null) {
                if (org.helllabs.android.xmp.ModService.unregisterMediaButtonEventReceiver == null) {
                    Class[] v2_1 = new Class[1];
                    v2_1[0] = android.content.ComponentName;
                    org.helllabs.android.xmp.ModService.unregisterMediaButtonEventReceiver = android.media.AudioManager.getMethod("unregisterMediaButtonEventReceiver", v2_1);
                }
            } else {
                Class[] v2_3 = new Class[1];
                v2_3[0] = android.content.ComponentName;
                org.helllabs.android.xmp.ModService.registerMediaButtonEventReceiver = android.media.AudioManager.getMethod("registerMediaButtonEventReceiver", v2_3);
            }
        } catch (reflect.Method v0) {
        }
        return;
    }

    private void registerRemoteControl()
    {
        try {
            if (org.helllabs.android.xmp.ModService.registerMediaButtonEventReceiver != null) {
                android.media.AudioManager v4_5 = this.audioManager;
                Object[] v5_2 = new Object[1];
                v5_2[0] = this.remoteControlResponder;
                org.helllabs.android.xmp.ModService.registerMediaButtonEventReceiver.invoke(v4_5, v5_2);
            }
        } catch (IllegalAccessException v1) {
            android.util.Log.e("Xmp ModService", new StringBuilder().append("Unexpected ").append(v1).toString());
        } catch (reflect.InvocationTargetException v2) {
            Error v0_0 = v2.getCause();
            if (!(v0_0 instanceof RuntimeException)) {
                if (!(v0_0 instanceof Error)) {
                    throw new RuntimeException(v2);
                } else {
                    throw ((Error) v0_0);
                }
            } else {
                throw ((RuntimeException) v0_0);
            }
        }
        return;
    }

    private void unregisterRemoteControl()
    {
        try {
            if (org.helllabs.android.xmp.ModService.unregisterMediaButtonEventReceiver != null) {
                android.media.AudioManager v4_5 = this.audioManager;
                Object[] v5_2 = new Object[1];
                v5_2[0] = this.remoteControlResponder;
                org.helllabs.android.xmp.ModService.unregisterMediaButtonEventReceiver.invoke(v4_5, v5_2);
            }
        } catch (IllegalAccessException v1) {
            android.util.Log.e("Xmp ModService", new StringBuilder().append("Unexpected ").append(v1).toString());
        } catch (reflect.InvocationTargetException v2) {
            Error v0_0 = v2.getCause();
            if (!(v0_0 instanceof RuntimeException)) {
                if (!(v0_0 instanceof Error)) {
                    throw new RuntimeException(v2);
                } else {
                    throw ((Error) v0_0);
                }
            } else {
                throw ((RuntimeException) v0_0);
            }
        }
        return;
    }

    public boolean autoPause(boolean p4)
    {
        android.util.Log.i("Xmp ModService", new StringBuilder().append("Auto pause changed to ").append(p4).append(", previously ").append(this.autoPaused).toString());
        if (!p4) {
            if (this.autoPaused) {
                this.autoPaused = 0;
                this.paused = 0;
            }
        } else {
            this.autoPaused = 1;
            this.paused = 1;
        }
        return this.autoPaused;
    }

    protected void end()
    {
        android.util.Log.i("Xmp ModService", "End service");
        int v1 = this.callbacks.beginBroadcast();
        int v0 = 0;
        while (v0 < v1) {
            try {
                ((org.helllabs.android.xmp.PlayerCallback) this.callbacks.getBroadcastItem(v0)).endPlayCallback();
            } catch (InterruptedException v2) {
            }
            v0++;
        }
        this.callbacks.finishBroadcast();
        org.helllabs.android.xmp.ModService.isPlaying = 0;
        this.xmp.stopModule();
        this.paused = 0;
        if ((this.playThread != null) && (this.playThread.isAlive())) {
            try {
                this.playThread.join();
            } catch (InterruptedException v2) {
            }
        }
        this.xmp.deinit();
        this.audio.release();
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return this.binder;
    }

    public void onCreate()
    {
        super.onCreate();
        android.util.Log.i("Xmp ModService", "Create service");
        this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this);
        int v7 = this.prefs.getInt("buffer_ms", 500);
        this.sampleRate = Integer.parseInt(this.prefs.getString("sampling_rate", "44100"));
        this.sampleFormat = 0;
        this.stereo = this.prefs.getBoolean("stereo", 1);
        if (!this.stereo) {
            this.sampleFormat = (this.sampleFormat | 4);
        }
        org.helllabs.android.xmp.Watchdog v0_11;
        if (!this.stereo) {
            v0_11 = 1;
        } else {
            v0_11 = 2;
        }
        int v3;
        int v8 = (((((v0_11 * this.sampleRate) * 2) * v7) / 1000) & -4);
        if (!this.stereo) {
            v3 = 2;
        } else {
            v3 = 3;
        }
        int v5_3;
        this.minSize = android.media.AudioTrack.getMinBufferSize(this.sampleRate, v3, 2);
        if (this.minSize >= v8) {
            v5_3 = this.minSize;
        } else {
            v5_3 = v8;
        }
        this.audio = new android.media.AudioTrack(3, this.sampleRate, v3, 2, v5_3, 1);
        this.xmp.init();
        org.helllabs.android.xmp.ModService.isPlaying = 0;
        this.paused = 0;
        this.notifier = new org.helllabs.android.xmp.ModService$Notifier(this);
        this.listener = new org.helllabs.android.xmp.XmpPhoneStateListener(this);
        this.tm = ((android.telephony.TelephonyManager) this.getSystemService("phone"));
        this.tm.listen(this.listener, 32);
        this.audioManager = ((android.media.AudioManager) this.getSystemService("audio"));
        this.remoteControlResponder = new android.content.ComponentName(this.getPackageName(), org.helllabs.android.xmp.RemoteControlReceiver.getName());
        this.registerRemoteControl();
        this.watchdog = new org.helllabs.android.xmp.Watchdog(10);
        this.watchdog.setOnTimeoutListener(new org.helllabs.android.xmp.ModService$1(this));
        this.watchdog.start();
        return;
    }

    public void onDestroy()
    {
        this.unregisterRemoteControl();
        this.watchdog.stop();
        this.notifier.cancel();
        this.end();
        return;
    }
}
package org.helllabs.android.xmp;
public class PlayList extends org.helllabs.android.xmp.PlaylistActivity {
    android.view.View curList;
    android.widget.TextView curListDesc;
    android.widget.TextView curListName;
    String name;

    public PlayList()
    {
        return;
    }

    public boolean onContextItemSelected(android.view.MenuItem p6)
    {
        android.widget.AdapterView$AdapterContextMenuInfo v1_1 = ((android.widget.AdapterView$AdapterContextMenuInfo) p6.getMenuInfo());
        switch (p6.getItemId()) {
            case 0:
                this.removeFromPlaylist(this.name, v1_1.position);
                this.updateList();
                break;
            case 1:
                this.addToQueue(v1_1.position, 1);
                break;
            case 2:
                this.addToQueue(0, this.modList.size());
                break;
        }
        return 1;
    }

    public void onCreate(android.os.Bundle p4)
    {
        super.onCreate(p4);
        this.setContentView(2130903049);
        this.setupButtons();
        android.os.Bundle v0 = this.getIntent().getExtras();
        if (v0 != null) {
            this.setTitle("Playlist");
            this.curList = this.findViewById(2131296290);
            this.curListName = ((android.widget.TextView) this.findViewById(2131296291));
            this.curListDesc = ((android.widget.TextView) this.findViewById(2131296292));
            this.name = v0.getString("name");
            this.curListName.setText(this.name);
            this.curListDesc.setText(org.helllabs.android.xmp.PlaylistUtils.readComment(this, this.name));
            this.registerForContextMenu(this.getListView());
            this.updateList();
        }
        return;
    }

    public void onCreateContextMenu(android.view.ContextMenu p5, android.view.View p6, android.view.ContextMenu$ContextMenuInfo p7)
    {
        p5.setHeaderTitle("Edit playlist");
        p5.add(0, 0, 0, "Remove from playlist");
        p5.add(0, 1, 1, "Add to play queue");
        p5.add(0, 2, 2, "Add all to play queue");
        return;
    }

    public void removeFromPlaylist(String p5, int p6)
    {
        try {
            org.helllabs.android.xmp.FileUtils.removeLineFromFile(new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(this.name).append(".playlist").toString()), p6);
        } catch (java.io.IOException v1) {
        } catch (java.io.IOException v1) {
        }
        return;
    }

    void update()
    {
        this.updateList();
        return;
    }

    void updateList()
    {
        this.modList.clear();
        java.io.File v8_0 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(this.name).append(".playlist").toString());
        java.util.ArrayList v11_1 = new java.util.ArrayList();
        try {
            java.io.BufferedReader v10_1 = new java.io.BufferedReader(new java.io.FileReader(v8_0), 512);
            int v14 = 0;
        } catch (java.io.IOException v2) {
            if (!v11_1.isEmpty()) {
                int[] v15 = new int[v11_1.size()];
                java.util.Iterator v12 = v11_1.iterator();
                int v9 = 0;
                while (v9 < v15.length) {
                    v15[v9] = ((Integer) v12.next()).intValue();
                    v9++;
                }
                try {
                    org.helllabs.android.xmp.FileUtils.removeLineFromFile(v8_0, v15);
                } catch (java.io.IOException v2) {
                } catch (java.io.IOException v2) {
                }
            }
            this.setListAdapter(new org.helllabs.android.xmp.PlaylistInfoAdapter(this, 2130903050, 2131296295, this.modList, this.prefs.getBoolean("use_filename", 0)));
            return;
        }
        while(true) {
            String v13 = v10_1.readLine();
            if (v13 == null) {
                break;
            }
            String[] v7 = v13.split(":", 3);
            if (org.helllabs.android.xmp.InfoCache.fileExists(v7[0])) {
                this.modList.add(new org.helllabs.android.xmp.PlaylistInfo(v7[2], v7[1], v7[0], -1));
            } else {
                v11_1.add(Integer.valueOf(v14));
            }
            v14++;
        }
        v10_1.close();
    }
}
package org.helllabs.android.xmp;
 class PlayListFilter implements java.io.FilenameFilter {

    PlayListFilter()
    {
        return;
    }

    public boolean accept(java.io.File p2, String p3)
    {
        return p3.endsWith(".playlist");
    }
}
package org.helllabs.android.xmp;
 class Player$10 implements android.widget.SeekBar$OnSeekBarChangeListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$10(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onProgressChanged(android.widget.SeekBar p1, int p2, boolean p3)
    {
        return;
    }

    public void onStartTrackingTouch(android.widget.SeekBar p3)
    {
        this.this$0.seeking = 1;
        return;
    }

    public void onStopTrackingTouch(android.widget.SeekBar p3)
    {
        if (this.this$0.modPlayer != null) {
            try {
                this.this$0.modPlayer.seek((p3.getProgress() * 100));
            } catch (android.os.RemoteException v0) {
            }
        }
        this.this$0.seeking = 0;
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$11 implements java.lang.Runnable {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$11(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        int[] v11 = new int[6];
        try {
            this.this$0.modPlayer.getModVars(v11);
            String v6 = this.this$0.modPlayer.getModName();
            String v10 = this.this$0.modPlayer.getModType();
        } catch (android.os.RemoteException v2) {
            v6 = "";
            v10 = "";
        }
        int v9 = v11[0];
        int v4 = v11[1];
        int v7 = v11[2];
        int v1 = v11[3];
        int v3 = v11[4];
        int v8 = v11[5];
        this.this$0.totalTime = (v9 / 1000);
        this.this$0.seekBar.setProgress(0);
        this.this$0.seekBar.setMax((v9 / 100));
        this.this$0.flipperPage = ((this.this$0.flipperPage + 1) % 2);
        this.this$0.infoName[this.this$0.flipperPage].setText(v6);
        this.this$0.infoType[this.this$0.flipperPage].setText(v10);
        this.this$0.titleFlipper.showNext();
        Thread v12_40 = this.this$0.infoMod;
        org.helllabs.android.xmp.Player v14_9 = new Object[7];
        v14_9[0] = Integer.valueOf(v1);
        v14_9[1] = Integer.valueOf(v4);
        v14_9[2] = Integer.valueOf(v7);
        v14_9[3] = Integer.valueOf(v3);
        v14_9[4] = Integer.valueOf(v8);
        v14_9[5] = Integer.valueOf(((v9 + 500) / 60000));
        v14_9[6] = Integer.valueOf((((v9 + 500) / 1000) % 60));
        v12_40.setText(String.format("Channels: %d\nLength: %d, Patterns: %d\nInstruments: %d, Samples: %d\nEstimated play time: %dmin%02ds", v14_9));
        this.this$0.textInstruments.setText("Instruments");
        this.this$0.instrumentList.setInstruments(this.this$0.insList);
        switch (Integer.parseInt(this.this$0.prefs.getString("meters", "2"))) {
            case 1:
                this.this$0.infoMeter = new org.helllabs.android.xmp.LedMeter(this.this$0.infoMeterLayout, v1);
                break;
            case 2:
                this.this$0.infoMeter = new org.helllabs.android.xmp.BarMeter(this.this$0.infoMeterLayout, v1);
                break;
            default:
                this.this$0.infoMeter = new org.helllabs.android.xmp.EmptyMeter(this.this$0.infoMeterLayout, v1);
        }
        this.this$0.progressThread = new org.helllabs.android.xmp.Player$ProgressThread(this.this$0, 0);
        this.this$0.progressThread.start();
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$12 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$12(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        try {
            if (p5 == -1) {
                if (!this.this$0.modPlayer.deleteFile()) {
                    org.helllabs.android.xmp.Message.toast(this.this$0.activity, "Can\'t delete file");
                } else {
                    org.helllabs.android.xmp.Message.toast(this.this$0.activity, "File deleted");
                    this.this$0.setResult(1);
                    this.this$0.modPlayer.nextSong();
                }
            }
        } catch (android.os.RemoteException v0) {
            org.helllabs.android.xmp.Message.toast(this.this$0.activity, "Can\'t connect service");
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$1 implements android.content.ServiceConnection {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$1(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onServiceConnected(android.content.ComponentName p4, android.os.IBinder p5)
    {
        this.this$0.modPlayer = org.helllabs.android.xmp.ModInterface$Stub.asInterface(p5);
        this.this$0.flipperPage = 0;
        try {
            this.this$0.modPlayer.registerCallback(org.helllabs.android.xmp.Player.access$000(this.this$0));
        } catch (org.helllabs.android.xmp.Player v0) {
        }
        if ((this.this$0.fileArray == null) || (this.this$0.fileArray.length <= 0)) {
            this.this$0.showNewMod(this.this$0.modPlayer.getFileName(), this.this$0.modPlayer.getInstruments());
            if (!this.this$0.modPlayer.isPaused()) {
                this.this$0.unpause();
            } else {
                this.this$0.pause();
            }
        } else {
            this.this$0.playNewMod(this.this$0.fileArray);
        }
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p3)
    {
        this.this$0.modPlayer = 0;
        return;
    }
}
package org.helllabs.android.xmp;
public interface PlayerCallback implements android.os.IInterface {

    public abstract void endPlayCallback();

    public abstract void newModCallback();
}
package org.helllabs.android.xmp;
public abstract class PlayerCallback$Stub extends android.os.Binder implements org.helllabs.android.xmp.PlayerCallback {
    private static final String DESCRIPTOR = "org.helllabs.android.xmp.PlayerCallback";
    static final int TRANSACTION_endPlayCallback = 2;
    static final int TRANSACTION_newModCallback = 1;

    public PlayerCallback$Stub()
    {
        this.attachInterface(this, "org.helllabs.android.xmp.PlayerCallback");
        return;
    }

    public static org.helllabs.android.xmp.PlayerCallback asInterface(android.os.IBinder p2)
    {
        org.helllabs.android.xmp.PlayerCallback v0_0;
        if (p2 != null) {
            org.helllabs.android.xmp.PlayerCallback v0_1 = p2.queryLocalInterface("org.helllabs.android.xmp.PlayerCallback");
            if ((v0_1 == null) || (!(v0_1 instanceof org.helllabs.android.xmp.PlayerCallback))) {
                v0_0 = new org.helllabs.android.xmp.PlayerCallback$Stub$Proxy(p2);
            } else {
                v0_0 = ((org.helllabs.android.xmp.PlayerCallback) v0_1);
            }
        } else {
            v0_0 = 0;
        }
        return v0_0;
    }

    public android.os.IBinder asBinder()
    {
        return this;
    }

    public boolean onTransact(int p5, android.os.Parcel p6, android.os.Parcel p7, int p8)
    {
        boolean v2 = 1;
        switch (p5) {
            case 1:
                p6.enforceInterface("org.helllabs.android.xmp.PlayerCallback");
                this.newModCallback(p6.readString(), p6.createStringArray());
                p7.writeNoException();
                break;
            case 2:
                p6.enforceInterface("org.helllabs.android.xmp.PlayerCallback");
                this.endPlayCallback();
                p7.writeNoException();
                break;
            case 1598968902:
                p7.writeString("org.helllabs.android.xmp.PlayerCallback");
                break;
            default:
                v2 = super.onTransact(p5, p6, p7, p8);
        }
        return v2;
    }
}
package org.helllabs.android.xmp;
 class Player$2 extends org.helllabs.android.xmp.PlayerCallback$Stub {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$2(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void endPlayCallback()
    {
        android.util.Log.i("Xmp Player", "End progress thread");
        this.this$0.endPlay = 1;
        if ((this.this$0.progressThread != null) && (this.this$0.progressThread.isAlive())) {
            try {
                this.this$0.progressThread.join();
            } catch (InterruptedException v0) {
            }
        }
        this.this$0.finish();
        return;
    }

    public void newModCallback(String p3, String[] p4)
    {
        android.util.Log.i("Xmp Player", "Show module data");
        this.this$0.showNewMod(p3, p4);
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$3 implements java.lang.Runnable {
    int before;
    final int[] bpm;
    final int[][] instruments;
    final int[][] keys;
    int now;
    int oldBpm;
    int oldPat;
    int oldPos;
    boolean oldShowElapsed;
    int oldTime;
    int oldTpo;
    final int[] pat;
    final int[] pos;
    final synthetic org.helllabs.android.xmp.Player this$0;
    final int[] time;
    final int[] tpo;
    final int[][] volumes;

    Player$3(org.helllabs.android.xmp.Player p5)
    {
        this.this$0 = p5;
        int v0_12 = new int[10];
        this.tpo = v0_12;
        int v0_13 = new int[10];
        this.bpm = v0_13;
        int v0_14 = new int[10];
        this.pos = v0_14;
        int v0_0 = new int[10];
        this.pat = v0_0;
        int v0_1 = new int[10];
        this.time = v0_1;
        this.oldTpo = -1;
        this.oldBpm = -1;
        this.oldPos = -1;
        this.oldPat = -1;
        this.oldTime = -1;
        this.volumes = ((int[][]) reflect.Array.newInstance(Integer.TYPE, new int[] {10, 64})));
        this.instruments = ((int[][]) reflect.Array.newInstance(Integer.TYPE, new int[] {10, 64})));
        this.keys = ((int[][]) reflect.Array.newInstance(Integer.TYPE, new int[] {10, 64})));
        this.before = 0;
        return;
    }

    public void run()
    {
        this.now = ((this.before + this.this$0.latency) % 10);
        try {
            this.tpo[this.now] = this.this$0.modPlayer.getPlayTempo();
            this.bpm[this.now] = this.this$0.modPlayer.getPlayBpm();
            this.pos[this.now] = this.this$0.modPlayer.getPlayPos();
            this.pat[this.now] = this.this$0.modPlayer.getPlayPat();
            this.time[this.now] = (this.this$0.modPlayer.time() / 10);
        } catch (boolean v1) {
            return;
        }
        if ((this.tpo[this.before] != this.oldTpo) || ((this.bpm[this.before] != this.oldBpm) || ((this.pos[this.before] != this.oldPos) || (this.pat[this.before] != this.oldPat)))) {
            boolean v1_53 = this.this$0.infoStatus;
            Object[] v3_26 = new Object[4];
            v3_26[0] = Integer.valueOf(this.tpo[this.before]);
            v3_26[1] = Integer.valueOf(this.bpm[this.before]);
            v3_26[2] = Integer.valueOf(this.pos[this.before]);
            v3_26[3] = Integer.valueOf(this.pat[this.before]);
            v1_53.setText(String.format("Tempo:%02x BPM:%02x Pos:%02x Pat:%02x", v3_26));
            this.oldTpo = this.tpo[this.before];
            this.oldBpm = this.bpm[this.before];
            this.oldPos = this.pos[this.before];
            this.oldPat = this.pat[this.before];
        }
        if ((this.time[this.before] != this.oldTime) || (this.this$0.showElapsed != this.oldShowElapsed)) {
            int v0_0 = this.time[this.before];
            if (v0_0 < 0) {
                v0_0 = 0;
            }
            if (!this.this$0.showElapsed) {
                int v0_1 = (this.this$0.totalTime - v0_0);
                boolean v1_19 = this.this$0.elapsedTime;
                Object[] v3_2 = new Object[2];
                v3_2[0] = Integer.valueOf((v0_1 / 60));
                v3_2[1] = Integer.valueOf((v0_1 % 60));
                v1_19.setText(String.format("-%d:%02d", v3_2));
            } else {
                boolean v1_21 = this.this$0.elapsedTime;
                Object[] v3_5 = new Object[2];
                v3_5[0] = Integer.valueOf((v0_0 / 60));
                v3_5[1] = Integer.valueOf((v0_0 % 60));
                v1_21.setText(String.format("%d:%02d", v3_5));
            }
            this.oldTime = this.time[this.before];
            this.oldShowElapsed = this.this$0.showElapsed;
        }
        this.this$0.modPlayer.getChannelData(this.volumes[this.now], this.instruments[this.now], this.keys[this.now]);
        this.this$0.infoMeter.setVolumes(this.volumes[this.before]);
        if (this.this$0.showInsHighlight) {
            this.this$0.instrumentList.setVolumes(this.volumes[this.before], this.instruments[this.before]);
        }
        this.before = (this.before + 1);
        if (this.before < 10) {
            return;
        } else {
            this.before = 0;
            return;
        }
    }
}
package org.helllabs.android.xmp;
 class Player$4 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$4(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        try {
            if (!this.this$0.modPlayer.toggleLoop()) {
                this.this$0.loopButton.setImageResource(2130837526);
            } else {
                this.this$0.loopButton.setImageResource(2130837527);
            }
        } catch (android.widget.ImageButton v0) {
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$5 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$5(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        if (this.this$0.modPlayer != null) {
            try {
                this.this$0.modPlayer.pause();
            } catch (org.helllabs.android.xmp.Player v0_4) {
                throw v0_4;
            } catch (org.helllabs.android.xmp.Player v0) {
            }
            if (!this.this$0.paused) {
                this.this$0.pause();
            } else {
                this.this$0.unpause();
            }
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$6 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$6(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        if (this.this$0.modPlayer != null) {
            this.this$0.stopPlayingMod();
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$7 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$7(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        if (this.this$0.modPlayer != null) {
            if (this.this$0.modPlayer.time() <= 20) {
                this.this$0.modPlayer.prevSong();
            } else {
                this.this$0.modPlayer.seek(0);
            }
            this.this$0.unpause();
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$8 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$8(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p2)
    {
        if (this.this$0.modPlayer != null) {
            try {
                this.this$0.modPlayer.nextSong();
            } catch (org.helllabs.android.xmp.Player v0) {
            }
            this.this$0.unpause();
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$9 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.Player this$0;

    Player$9(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        org.helllabs.android.xmp.Player v0 = this.this$0;
        v0.showElapsed = (v0.showElapsed ^ 1);
        return;
    }
}
package org.helllabs.android.xmp;
 class Player$ProgressThread extends java.lang.Thread {
    final synthetic org.helllabs.android.xmp.Player this$0;

    private Player$ProgressThread(org.helllabs.android.xmp.Player p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic Player$ProgressThread(org.helllabs.android.xmp.Player p1, org.helllabs.android.xmp.Player$1 p2)
    {
        this(p1);
        return;
    }

    public void run()
    {
        try {
            do {
                int v0 = this.this$0.modPlayer.time();
            } while((v0 >= 0) && (!this.this$0.endPlay));
            this.this$0.seekBar.setProgress(0);
            return;
        } catch (android.widget.SeekBar v1) {
        }
        if ((v0 >= 0) && ((!this.this$0.seeking) && (!this.this$0.paused))) {
            this.this$0.seekBar.setProgress(v0);
        }
        try {
            org.helllabs.android.xmp.Player$ProgressThread.sleep(100);
        } catch (android.widget.SeekBar v1) {
        }
        if (this.this$0.screenOn) {
            this.this$0.handler.post(this.this$0.updateInfoRunnable);
        }
        if ((v0 >= 0) || (this.this$0.endPlay)) {
        }
        this.this$0.seekBar.setProgress(0);
        return;
    }
}
package org.helllabs.android.xmp;
public class Player extends android.app.Activity {
    static final int SETTINGS_REQUEST = 45;
    android.app.Activity activity;
    android.widget.ImageButton backButton;
    private android.content.ServiceConnection connection;
    android.app.AlertDialog deleteDialog;
    private android.content.DialogInterface$OnClickListener deleteDialogClickListener;
    android.widget.TextView elapsedTime;
    boolean endPlay;
    String[] fileArray;
    String fileName;
    boolean finishing;
    int flipperPage;
    android.widget.ImageButton forwardButton;
    final android.os.Handler handler;
    android.graphics.drawable.BitmapDrawable image;
    android.widget.LinearLayout infoInsLayout;
    android.widget.FrameLayout infoLayout;
    org.helllabs.android.xmp.Meter infoMeter;
    android.widget.LinearLayout infoMeterLayout;
    android.widget.TextView infoMod;
    android.widget.TextView[] infoName;
    android.widget.TextView infoStatus;
    android.widget.TextView[] infoType;
    String[] insList;
    org.helllabs.android.xmp.InstrumentList instrumentList;
    int latency;
    android.widget.ImageButton loopButton;
    boolean loopListMode;
    String media_path;
    org.helllabs.android.xmp.ModInterface modPlayer;
    boolean paused;
    android.widget.ImageButton playButton;
    private org.helllabs.android.xmp.PlayerCallback playerCallback;
    android.content.SharedPreferences prefs;
    Thread progressThread;
    boolean screenOn;
    android.content.BroadcastReceiver screenReceiver;
    android.widget.SeekBar seekBar;
    boolean seeking;
    boolean showElapsed;
    boolean showInfoLine;
    boolean showInsHighlight;
    final Runnable showNewModRunnable;
    boolean shuffleMode;
    android.widget.ImageButton stopButton;
    android.widget.TextView textInstruments;
    android.widget.ViewFlipper titleFlipper;
    int totalTime;
    final Runnable updateInfoRunnable;

    public Player()
    {
        this.seeking = 0;
        this.shuffleMode = 1;
        this.loopListMode = 0;
        this.paused = 0;
        this.finishing = 0;
        org.helllabs.android.xmp.Player$12 v0_15 = new android.widget.TextView[2];
        this.infoName = v0_15;
        org.helllabs.android.xmp.Player$12 v0_0 = new android.widget.TextView[2];
        this.infoType = v0_0;
        this.fileArray = 0;
        this.handler = new android.os.Handler();
        this.endPlay = 0;
        this.connection = new org.helllabs.android.xmp.Player$1(this);
        this.playerCallback = new org.helllabs.android.xmp.Player$2(this);
        this.updateInfoRunnable = new org.helllabs.android.xmp.Player$3(this);
        this.showNewModRunnable = new org.helllabs.android.xmp.Player$11(this);
        this.deleteDialogClickListener = new org.helllabs.android.xmp.Player$12(this);
        return;
    }

    static synthetic org.helllabs.android.xmp.PlayerCallback access$000(org.helllabs.android.xmp.Player p1)
    {
        return p1.playerCallback;
    }

    public void onConfigurationChanged(android.content.res.Configuration p1)
    {
        super.onConfigurationChanged(p1);
        return;
    }

    public void onCreate(android.os.Bundle p13)
    {
        super.onCreate(p13);
        this.setContentView(2130903048);
        this.activity = this;
        android.util.Log.i("Xmp Player", "Create player interface");
        android.content.IntentFilter v0_1 = new android.content.IntentFilter("android.intent.action.SCREEN_ON");
        v0_1.addAction("android.intent.action.SCREEN_OFF");
        this.screenReceiver = new org.helllabs.android.xmp.ScreenReceiver();
        this.registerReceiver(this.screenReceiver, v0_1);
        this.screenOn = 1;
        this.setResult(-1);
        this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this);
        this.showInfoLine = this.prefs.getBoolean("show_info_line", 1);
        this.showInsHighlight = this.prefs.getBoolean("show_ins_highlight", 1);
        this.showElapsed = 1;
        this.latency = (this.prefs.getInt("buffer_ms", 500) / 100);
        if (this.latency > 9) {
            this.latency = 9;
        }
        this.onNewIntent(this.getIntent());
        this.infoName[0] = ((android.widget.TextView) this.findViewById(2131296273));
        this.infoType[0] = ((android.widget.TextView) this.findViewById(2131296274));
        this.infoName[1] = ((android.widget.TextView) this.findViewById(2131296275));
        this.infoType[1] = ((android.widget.TextView) this.findViewById(2131296276));
        this.infoMod = ((android.widget.TextView) this.findViewById(2131296279));
        this.infoStatus = ((android.widget.TextView) this.findViewById(2131296282));
        this.infoMeterLayout = ((android.widget.LinearLayout) this.findViewById(2131296281));
        this.infoInsLayout = ((android.widget.LinearLayout) this.findViewById(2131296278));
        this.infoLayout = ((android.widget.FrameLayout) this.findViewById(2131296277));
        this.elapsedTime = ((android.widget.TextView) this.findViewById(2131296283));
        this.textInstruments = ((android.widget.TextView) this.findViewById(2131296280));
        this.titleFlipper = ((android.widget.ViewFlipper) this.findViewById(2131296272));
        this.instrumentList = new org.helllabs.android.xmp.InstrumentList(this);
        this.infoInsLayout.addView(this.instrumentList);
        this.titleFlipper.setInAnimation(this, 2130968576);
        this.titleFlipper.setOutAnimation(this, 2130968577);
        android.graphics.Typeface v1 = android.graphics.Typeface.createFromAsset(this.getAssets(), "fonts/Michroma.ttf");
        int v2 = 0;
        while (v2 < 2) {
            this.infoName[v2].setTypeface(v1);
            this.infoName[v2].setIncludeFontPadding(0);
            this.infoType[v2].setTypeface(v1);
            this.infoType[v2].setTextSize(1, 1094713344);
            v2++;
        }
        android.widget.TextView v3_1 = ((android.widget.TextView) this.findViewById(2131296280));
        v3_1.setTypeface(v1);
        v3_1.setTextSize(1, 1098907648);
        v3_1.setLineSpacing(0, 1067030938);
        if (!this.showInfoLine) {
            this.infoStatus.setVisibility(8);
            this.elapsedTime.setVisibility(8);
        }
        this.playButton = ((android.widget.ImageButton) this.findViewById(2131296287));
        this.stopButton = ((android.widget.ImageButton) this.findViewById(2131296288));
        this.backButton = ((android.widget.ImageButton) this.findViewById(2131296286));
        this.forwardButton = ((android.widget.ImageButton) this.findViewById(2131296289));
        this.loopButton = ((android.widget.ImageButton) this.findViewById(2131296285));
        this.image = new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeResource(this.getResources(), 2130837525));
        this.image.setGravity(17);
        this.image.setAlpha(48);
        this.infoLayout.setBackgroundDrawable(this.image.getCurrent());
        this.loopButton.setImageResource(2130837526);
        this.loopButton.setOnClickListener(new org.helllabs.android.xmp.Player$4(this));
        this.playButton.setOnClickListener(new org.helllabs.android.xmp.Player$5(this));
        this.stopButton.setOnClickListener(new org.helllabs.android.xmp.Player$6(this));
        this.backButton.setOnClickListener(new org.helllabs.android.xmp.Player$7(this));
        this.forwardButton.setOnClickListener(new org.helllabs.android.xmp.Player$8(this));
        this.elapsedTime.setOnClickListener(new org.helllabs.android.xmp.Player$9(this));
        this.seekBar = ((android.widget.SeekBar) this.findViewById(2131296284));
        this.seekBar.setProgress(0);
        this.seekBar.setOnSeekBarChangeListener(new org.helllabs.android.xmp.Player$10(this));
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p5)
    {
        if (this.prefs.getBoolean("enable_delete", 0)) {
            this.getMenuInflater().inflate(2131492865, p5);
        }
        return 1;
    }

    public void onDestroy()
    {
        super.onDestroy();
        if (this.deleteDialog != null) {
            this.deleteDialog.cancel();
        }
        if (this.modPlayer != null) {
            try {
                this.modPlayer.unregisterCallback(this.playerCallback);
            } catch (android.os.RemoteException v0) {
            }
        }
        this.unregisterReceiver(this.screenReceiver);
        android.util.Log.i("Xmp Player", "Unbind service");
        this.unbindService(this.connection);
        return;
    }

    protected void onNewIntent(android.content.Intent p8)
    {
        int v2 = 0;
        android.util.Log.i("Xmp Player", "Start player interface");
        String v1 = 0;
        if (p8.getData() != null) {
            v1 = p8.getData().getPath();
        }
        this.fileArray = 0;
        if (v1 == null) {
            android.os.Bundle v0 = p8.getExtras();
            if (v0 == null) {
                v2 = 1;
            } else {
                this.fileArray = v0.getStringArray("files");
                this.shuffleMode = v0.getBoolean("shuffle");
                this.loopListMode = v0.getBoolean("loop");
            }
        } else {
            String v4_10 = new String[1];
            this.fileArray = v4_10;
            this.fileArray[0] = v1;
            this.shuffleMode = 0;
            this.loopListMode = 0;
        }
        android.content.Intent v3_1 = new android.content.Intent(this, org.helllabs.android.xmp.ModService);
        if (v2 == 0) {
            android.util.Log.i("Xmp Player", "Start service");
            this.startService(v3_1);
        }
        if (!this.bindService(v3_1, this.connection, 0)) {
            android.util.Log.e("Xmp Player", "Can\'t bind to service");
            this.finish();
        }
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p5)
    {
        switch (p5.getItemId()) {
            case 2131296300:
                org.helllabs.android.xmp.Message.yesNoDialog(this.activity, "Delete", "Are you sure to delete this file?", this.deleteDialogClickListener);
                break;
        }
        return 1;
    }

    protected void onPause()
    {
        if (org.helllabs.android.xmp.ScreenReceiver.wasScreenOn) {
            this.screenOn = 0;
        }
        super.onPause();
        return;
    }

    protected void onResume()
    {
        this.screenOn = 1;
        super.onResume();
        return;
    }

    public void pause()
    {
        this.paused = 1;
        this.playButton.setImageResource(2130837532);
        return;
    }

    void playNewMod(String[] p4)
    {
        try {
            this.modPlayer.play(p4, this.shuffleMode, this.loopListMode);
        } catch (android.os.RemoteException v0) {
        }
        return;
    }

    void setFont(android.widget.TextView p3, String p4, int p5)
    {
        p3.setTypeface(android.graphics.Typeface.createFromAsset(this.getAssets(), p4));
        return;
    }

    void showNewMod(String p3, String[] p4)
    {
        this.fileName = p3;
        this.insList = p4;
        if (this.deleteDialog != null) {
            this.deleteDialog.cancel();
        }
        this.handler.post(this.showNewModRunnable);
        return;
    }

    void stopPlayingMod()
    {
        if (!this.finishing) {
            this.finishing = 1;
            try {
                this.modPlayer.stop();
            } catch (InterruptedException v0) {
            }
            this.paused = 0;
            if ((this.progressThread != null) && (this.progressThread.isAlive())) {
                try {
                    this.progressThread.join();
                } catch (InterruptedException v0) {
                }
            }
        }
        return;
    }

    public void unpause()
    {
        this.paused = 0;
        this.playButton.setImageResource(2130837531);
        return;
    }
}
package org.helllabs.android.xmp;
 class PlayerCallback$Stub$Proxy implements org.helllabs.android.xmp.PlayerCallback {
    private android.os.IBinder mRemote;

    PlayerCallback$Stub$Proxy(android.os.IBinder p1)
    {
        this.mRemote = p1;
        return;
    }

    public android.os.IBinder asBinder()
    {
        return this.mRemote;
    }

    public void endPlayCallback()
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.PlayerCallback");
            this.mRemote.transact(2, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }

    public String getInterfaceDescriptor()
    {
        return "org.helllabs.android.xmp.PlayerCallback";
    }

    public void newModCallback(String p6, String[] p7)
    {
        android.os.Parcel v0 = android.os.Parcel.obtain();
        android.os.Parcel v1 = android.os.Parcel.obtain();
        try {
            v0.writeInterfaceToken("org.helllabs.android.xmp.PlayerCallback");
            v0.writeString(p6);
            v0.writeStringArray(p7);
            this.mRemote.transact(1, v0, v1, 0);
            v1.readException();
            v1.recycle();
            v0.recycle();
            return;
        } catch (Throwable v2_0) {
            v1.recycle();
            v0.recycle();
            throw v2_0;
        }
    }
}
package org.helllabs.android.xmp;
 class PlaylistActivity$1 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistActivity this$0;

    PlaylistActivity$1(org.helllabs.android.xmp.PlaylistActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        this.this$0.playModule(this.this$0.modList);
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistActivity$2 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistActivity this$0;

    PlaylistActivity$2(org.helllabs.android.xmp.PlaylistActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        String v0_7;
        if (this.this$0.loopMode) {
            v0_7 = 0;
        } else {
            v0_7 = 1;
        }
        android.content.Context v1_2;
        this.this$0.loopMode = v0_7;
        if (!this.this$0.loopMode) {
            v1_2 = 2130837520;
        } else {
            v1_2 = 2130837521;
        }
        ((android.widget.ImageButton) p3).setImageResource(v1_2);
        if (this.this$0.showToasts) {
            String v0_6;
            android.content.Context v1_3 = p3.getContext();
            if (!this.this$0.loopMode) {
                v0_6 = "Loop off";
            } else {
                v0_6 = "Loop on";
            }
            org.helllabs.android.xmp.Message.toast(v1_3, v0_6);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistActivity$3 implements android.view.View$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistActivity this$0;

    PlaylistActivity$3(org.helllabs.android.xmp.PlaylistActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p3)
    {
        String v0_7;
        if (this.this$0.shuffleMode) {
            v0_7 = 0;
        } else {
            v0_7 = 1;
        }
        android.content.Context v1_2;
        this.this$0.shuffleMode = v0_7;
        if (!this.this$0.shuffleMode) {
            v1_2 = 2130837523;
        } else {
            v1_2 = 2130837524;
        }
        ((android.widget.ImageButton) p3).setImageResource(v1_2);
        if (this.this$0.showToasts) {
            String v0_6;
            android.content.Context v1_3 = p3.getContext();
            if (!this.this$0.shuffleMode) {
                v0_6 = "Shuffle off";
            } else {
                v0_6 = "Shuffle on";
            }
            org.helllabs.android.xmp.Message.toast(v1_3, v0_6);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistActivity$4 implements android.content.ServiceConnection {
    final synthetic org.helllabs.android.xmp.PlaylistActivity this$0;

    PlaylistActivity$4(org.helllabs.android.xmp.PlaylistActivity p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onServiceConnected(android.content.ComponentName p4, android.os.IBinder p5)
    {
        this.this$0.modPlayer = org.helllabs.android.xmp.ModInterface$Stub.asInterface(p5);
        try {
            this.this$0.modPlayer.add(this.this$0.addList);
        } catch (android.os.RemoteException v0) {
            org.helllabs.android.xmp.Message.toast(this.this$0, "Error adding module");
        }
        this.this$0.unbindService(org.helllabs.android.xmp.PlaylistActivity.access$000(this.this$0));
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p3)
    {
        this.this$0.modPlayer = 0;
        return;
    }
}
package org.helllabs.android.xmp;
public class PlaylistInfo implements java.lang.Comparable {
    String comment;
    String filename;
    int imageRes;
    String name;

    public PlaylistInfo(String p1, String p2, int p3)
    {
        this.name = p1;
        this.comment = p2;
        this.imageRes = p3;
        return;
    }

    public PlaylistInfo(String p2, String p3, String p4)
    {
        this.name = p2;
        this.comment = p3;
        this.filename = p4;
        this.imageRes = -1;
        return;
    }

    public PlaylistInfo(String p1, String p2, String p3, int p4)
    {
        this.name = p1;
        this.comment = p2;
        this.filename = p3;
        this.imageRes = p4;
        return;
    }

    public bridge synthetic int compareTo(Object p2)
    {
        return this.compareTo(((org.helllabs.android.xmp.PlaylistInfo) p2));
    }

    public int compareTo(org.helllabs.android.xmp.PlaylistInfo p3)
    {
        return this.name.compareTo(p3.name);
    }
}
package org.helllabs.android.xmp;
public class PlaylistInfoAdapter extends android.widget.ArrayAdapter {
    private java.util.List items;
    private android.content.Context myContext;
    private boolean useFilename;

    public PlaylistInfoAdapter(android.content.Context p1, int p2, int p3, java.util.List p4, boolean p5)
    {
        super(p1, p2, p3, p4);
        super.items = p4;
        super.myContext = p1;
        super.useFilename = p5;
        return;
    }

    public android.view.View getView(int p11, android.view.View p12, android.view.ViewGroup p13)
    {
        android.view.View v5 = p12;
        if (p12 == null) {
            v5 = ((android.view.LayoutInflater) this.myContext.getSystemService("layout_inflater")).inflate(2130903050, 0);
        }
        org.helllabs.android.xmp.PlaylistInfo v2_1 = ((org.helllabs.android.xmp.PlaylistInfo) this.items.get(p11));
        if (v2_1 != null) {
            int v7_6;
            android.widget.TextView v4_1 = ((android.widget.TextView) v5.findViewById(2131296294));
            android.widget.TextView v0_1 = ((android.widget.TextView) v5.findViewById(2131296295));
            android.widget.ImageView v1_1 = ((android.widget.ImageView) v5.findViewById(2131296293));
            if (!this.useFilename) {
                v7_6 = v2_1.name;
            } else {
                v7_6 = org.helllabs.android.xmp.FileUtils.basename(v2_1.filename);
            }
            v4_1.setText(v7_6);
            v0_1.setText(v2_1.comment);
            android.graphics.Typeface v3 = android.graphics.Typeface.create(android.graphics.Typeface.DEFAULT, 0);
            if ((v2_1.imageRes != 2130837511) && (v2_1.imageRes != 2130837529)) {
                v0_1.setTypeface(v3, 0);
            } else {
                v0_1.setTypeface(v3, 2);
            }
            if (v2_1.imageRes <= 0) {
                v1_1.setVisibility(8);
            } else {
                v1_1.setImageResource(v2_1.imageRes);
                v1_1.setVisibility(0);
            }
        }
        return v5;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$1 extends java.lang.Thread {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$1(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        try {
            org.helllabs.android.xmp.Settings.deleteCache(org.helllabs.android.xmp.Settings.oldCacheDir);
        } catch (java.io.IOException v0) {
            org.helllabs.android.xmp.Message.toast(this.this$0.context, "Can\'t delete old cache");
        }
        this.this$0.progressDialog.dismiss();
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$2 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$2(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        if (p4 == -1) {
            org.helllabs.android.xmp.PlaylistUtils.deleteList(this.this$0.context, this.this$0.deletePosition);
            this.this$0.updateList();
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$3 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;
    final synthetic org.helllabs.android.xmp.InputDialog val$alert;
    final synthetic android.content.Context val$context;
    final synthetic String val$name;

    PlaylistMenu$3(org.helllabs.android.xmp.PlaylistMenu p1, org.helllabs.android.xmp.InputDialog p2, String p3, android.content.Context p4)
    {
        this.this$0 = p1;
        this.val$alert = p2;
        this.val$name = p3;
        this.val$context = p4;
        return;
    }

    public void onClick(android.content.DialogInterface p10, int p11)
    {
        int v0 = 0;
        String v5 = this.val$alert.input.getText().toString();
        java.io.File v3_0 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(this.val$name).append(".playlist").toString());
        java.io.File v4_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(this.val$name).append(".comment").toString());
        java.io.File v1_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v5).append(".playlist").toString());
        java.io.File v2_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v5).append(".comment").toString());
        if (v3_0.renameTo(v1_1)) {
            if (!v4_1.renameTo(v2_1)) {
                v1_1.renameTo(v3_0);
                v0 = 1;
            }
        } else {
            v0 = 1;
        }
        if (v0 != 0) {
            org.helllabs.android.xmp.Message.error(this.val$context, this.this$0.getString(2131361839));
        }
        this.this$0.updateList();
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$4 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$4(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$5 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;
    final synthetic org.helllabs.android.xmp.InputDialog val$alert;

    PlaylistMenu$5(org.helllabs.android.xmp.PlaylistMenu p1, org.helllabs.android.xmp.InputDialog p2)
    {
        this.this$0 = p1;
        this.val$alert = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p4, int p5)
    {
        String v1 = this.val$alert.input.getText().toString();
        if (!v1.equals(this.this$0.media_path)) {
            android.content.SharedPreferences$Editor v0 = this.this$0.prefs.edit();
            v0.putString("media_path", v1);
            v0.commit();
            this.this$0.updateList();
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$6 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$6(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$7 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;
    final synthetic org.helllabs.android.xmp.InputDialog val$alert;
    final synthetic android.content.Context val$context;
    final synthetic String val$name;

    PlaylistMenu$7(org.helllabs.android.xmp.PlaylistMenu p1, org.helllabs.android.xmp.InputDialog p2, String p3, android.content.Context p4)
    {
        this.this$0 = p1;
        this.val$alert = p2;
        this.val$name = p3;
        this.val$context = p4;
        return;
    }

    public void onClick(android.content.DialogInterface p7, int p8)
    {
        String v2 = this.val$alert.input.getText().toString();
        java.io.File v1_0 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(this.val$name).append(".comment").toString());
        try {
            v1_0.delete();
            v1_0.createNewFile();
            org.helllabs.android.xmp.FileUtils.writeToFile(v1_0, v2);
        } catch (java.io.IOException v0) {
            org.helllabs.android.xmp.Message.error(this.val$context, this.this$0.getString(2131361840));
        }
        this.this$0.updateList();
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$8 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$8(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistMenu$9 implements java.lang.Runnable {
    final synthetic org.helllabs.android.xmp.PlaylistMenu this$0;

    PlaylistMenu$9(org.helllabs.android.xmp.PlaylistMenu p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        this.this$0.updateList();
        return;
    }
}
package org.helllabs.android.xmp;
public class PlaylistMenu extends org.helllabs.android.xmp.ActionBarListActivity {
    static final int PLAYLIST_REQUEST = 46;
    static final int SETTINGS_REQUEST = 45;
    android.content.Context context;
    int deletePosition;
    String media_path;
    android.content.SharedPreferences prefs;
    android.app.ProgressDialog progressDialog;

    public PlaylistMenu()
    {
        return;
    }

    public void changeDir(android.content.Context p4)
    {
        org.helllabs.android.xmp.InputDialog v0_1 = new org.helllabs.android.xmp.InputDialog(p4);
        v0_1.setTitle("Change directory");
        v0_1.setMessage("Enter the mod directory:");
        v0_1.input.setText(this.media_path);
        v0_1.setPositiveButton("Ok", new org.helllabs.android.xmp.PlaylistMenu$5(this, v0_1));
        v0_1.setNegativeButton("Cancel", new org.helllabs.android.xmp.PlaylistMenu$6(this));
        v0_1.show();
        return;
    }

    boolean checkStorage()
    {
        int v1 = 1;
        String v0 = android.os.Environment.getExternalStorageState();
        if ((!"mounted".equals(v0)) && (!"mounted_ro".equals(v0))) {
            v1 = 0;
        }
        return v1;
    }

    public void editComment(android.content.Context p5, int p6)
    {
        String v1 = org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[p6];
        org.helllabs.android.xmp.InputDialog v0_1 = new org.helllabs.android.xmp.InputDialog(p5);
        v0_1.setTitle("Edit comment");
        v0_1.setMessage(new StringBuilder().append("Enter the new comment for ").append(v1).append(":").toString());
        v0_1.input.setText(org.helllabs.android.xmp.PlaylistUtils.readComment(p5, v1));
        v0_1.setPositiveButton("Ok", new org.helllabs.android.xmp.PlaylistMenu$7(this, v0_1, v1, p5));
        v0_1.setNegativeButton("Cancel", new org.helllabs.android.xmp.PlaylistMenu$8(this));
        v0_1.show();
        return;
    }

    protected void onActivityResult(int p2, int p3, android.content.Intent p4)
    {
        switch (p2) {
            case 45:
                if (p3 != -1) {
                } else {
                    this.updateList();
                }
                break;
            case 46:
                this.updateList();
                break;
        }
        return;
    }

    public boolean onContextItemSelected(android.view.MenuItem p8)
    {
        android.widget.AdapterView$AdapterContextMenuInfo v1_1 = ((android.widget.AdapterView$AdapterContextMenuInfo) p8.getMenuInfo());
        int v0 = p8.getItemId();
        if (v1_1.position != 0) {
            switch (v0) {
                case 0:
                    this.renameList(this, (v1_1.position - 1));
                    this.updateList();
                    break;
                case 1:
                    this.editComment(this, (v1_1.position - 1));
                    this.updateList();
                    break;
                case 2:
                    this.deletePosition = (v1_1.position - 1);
                    org.helllabs.android.xmp.Message.yesNoDialog(this, "Delete", new StringBuilder().append("Are you sure to delete playlist ").append(org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[this.deletePosition]).append("?").toString(), new org.helllabs.android.xmp.PlaylistMenu$2(this));
                    break;
                default:
            }
        } else {
            switch (v0) {
                case 0:
                    this.changeDir(this);
                    break;
            }
        }
        return 1;
    }

    public void onCreate(android.os.Bundle p9)
    {
        super.onCreate(p9);
        this.context = this;
        this.setContentView(2130903051);
        this.registerForContextMenu(this.getListView());
        this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this);
        org.helllabs.android.xmp.ChangeLog v0_1 = new org.helllabs.android.xmp.ChangeLog(this);
        if (!this.checkStorage()) {
            org.helllabs.android.xmp.Message.fatalError(this, this.getString(2131361864), this);
        }
        if (org.helllabs.android.xmp.Settings.dataDir.isDirectory()) {
            this.updateList();
            if (org.helllabs.android.xmp.Settings.oldCacheDir.isDirectory()) {
                this.progressDialog = android.app.ProgressDialog.show(this, "Please wait", "Removing old cache files...", 1);
                new org.helllabs.android.xmp.PlaylistMenu$1(this).start();
            }
            v0_1.show();
        } else {
            if (org.helllabs.android.xmp.Settings.dataDir.mkdirs()) {
                String v4 = this.getString(2131361828);
                try {
                    new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v4).append(".playlist").toString()).createNewFile();
                    java.io.File v3_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v4).append(".comment").toString());
                    try {
                        v3_1.createNewFile();
                        org.helllabs.android.xmp.FileUtils.writeToFile(v3_1, this.getString(2131361829));
                        this.updateList();
                    } catch (java.io.IOException v1) {
                        org.helllabs.android.xmp.Message.error(this, this.getString(2131361838));
                    }
                } catch (java.io.IOException v1) {
                }
            } else {
                org.helllabs.android.xmp.Message.fatalError(this, this.getString(2131361837), this);
            }
        }
        return;
    }

    public void onCreateContextMenu(android.view.ContextMenu p6, android.view.View p7, android.view.ContextMenu$ContextMenuInfo p8)
    {
        p6.setHeaderTitle("Playlist options");
        if (((android.widget.AdapterView$AdapterContextMenuInfo) p8).position != 0) {
            p6.add(0, 0, 0, "Rename");
            p6.add(0, 1, 1, "Edit comment");
            p6.add(0, 2, 2, "Delete playlist");
        } else {
            p6.add(0, 0, 0, "Change directory");
        }
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu p3)
    {
        this.getMenuInflater().inflate(2131492864, p3);
        return super.onCreateOptionsMenu(p3);
    }

    protected void onListItemClick(android.widget.ListView p6, android.view.View p7, int p8, long p9)
    {
        if (p8 != 0) {
            android.content.Intent v0_3 = new android.content.Intent(this, org.helllabs.android.xmp.PlayList);
            v0_3.putExtra("name", org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[(p8 - 1)]);
            this.startActivityForResult(v0_3, 46);
        } else {
            this.startActivityForResult(new android.content.Intent(this, org.helllabs.android.xmp.ModList), 46);
        }
        return;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem p3)
    {
        switch (p3.getItemId()) {
            case 2131296260:
                this.updateList();
                break;
            case 2131296298:
                new org.helllabs.android.xmp.PlaylistUtils().newPlaylist(this, new org.helllabs.android.xmp.PlaylistMenu$9(this));
                this.updateList();
                break;
            case 2131296299:
                this.startActivityForResult(new android.content.Intent(this, org.helllabs.android.xmp.Settings), 45);
                break;
        }
        return super.onOptionsItemSelected(p3);
    }

    public void renameList(android.content.Context p5, int p6)
    {
        String v1 = org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[p6];
        org.helllabs.android.xmp.InputDialog v0_1 = new org.helllabs.android.xmp.InputDialog(p5);
        v0_1.setTitle("Rename playlist");
        v0_1.setMessage("Enter the new playlist name:");
        v0_1.input.setText(v1);
        v0_1.setPositiveButton("Ok", new org.helllabs.android.xmp.PlaylistMenu$3(this, v0_1, v1, p5));
        v0_1.setNegativeButton("Cancel", new org.helllabs.android.xmp.PlaylistMenu$4(this));
        v0_1.show();
        return;
    }

    void updateList()
    {
        this.media_path = this.prefs.getString("media_path", org.helllabs.android.xmp.Settings.DEFAULT_MEDIA_PATH);
        java.util.ArrayList v4_1 = new java.util.ArrayList();
        v4_1.clear();
        v4_1.add(new org.helllabs.android.xmp.PlaylistInfo("File browser", new StringBuilder().append("Files in ").append(this.media_path).toString(), 2130837509));
        String[] v6 = org.helllabs.android.xmp.PlaylistUtils.listNoSuffix();
        int v8 = v6.length;
        int v7 = 0;
        while (v7 < v8) {
            String v9 = v6[v7];
            v4_1.add(new org.helllabs.android.xmp.PlaylistInfo(v9, org.helllabs.android.xmp.PlaylistUtils.readComment(this, v9), 2130837519));
            v7++;
        }
        this.setListAdapter(new org.helllabs.android.xmp.PlaylistInfoAdapter(this, 2130903050, 2131296295, v4_1, 0));
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;
    final synthetic android.content.Context val$context;
    final synthetic android.view.View val$layout;
    final synthetic Runnable val$myRunnable;

    PlaylistUtils$1(org.helllabs.android.xmp.PlaylistUtils p1, android.view.View p2, Runnable p3, android.content.Context p4)
    {
        this.this$0 = p1;
        this.val$layout = p2;
        this.val$myRunnable = p3;
        this.val$context = p4;
        return;
    }

    public void onClick(android.content.DialogInterface p11, int p12)
    {
        android.widget.EditText v3_1 = ((android.widget.EditText) this.val$layout.findViewById(2131296271));
        String v6 = ((android.widget.EditText) this.val$layout.findViewById(2131296270)).getText().toString();
        String v0 = v3_1.getText().toString();
        java.io.File v4_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v6).append(".playlist").toString());
        java.io.File v5_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v6).append(".comment").toString());
        try {
            v4_1.createNewFile();
            v5_1.createNewFile();
            org.helllabs.android.xmp.FileUtils.writeToFile(v5_1, v0);
        } catch (java.io.IOException v1) {
            org.helllabs.android.xmp.Message.error(this.val$context, this.val$context.getString(2131361838));
            return;
        }
        if (this.val$myRunnable == null) {
            return;
        } else {
            this.val$myRunnable.run();
            return;
        }
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$2 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;

    PlaylistUtils$2(org.helllabs.android.xmp.PlaylistUtils p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$3 extends java.lang.Thread {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;
    final synthetic android.content.Context val$context;
    final synthetic java.io.File val$modDir;
    final synthetic String val$name;
    final synthetic String val$path;

    PlaylistUtils$3(org.helllabs.android.xmp.PlaylistUtils p1, java.io.File p2, String p3, android.content.Context p4, String p5)
    {
        this.this$0 = p1;
        this.val$modDir = p2;
        this.val$path = p3;
        this.val$context = p4;
        this.val$name = p5;
        return;
    }

    public void run()
    {
        java.util.ArrayList v5_1 = new java.util.ArrayList();
        int v6 = 0;
        java.io.File[] v0 = this.val$modDir.listFiles(new org.helllabs.android.xmp.PlaylistUtils$ModFilter(this.this$0));
        int v4 = v0.length;
        int v3 = 0;
        while (v3 < v4) {
            java.io.File v1 = v0[v3];
            if (!v1.isDirectory()) {
                v5_1.add(new StringBuilder().append(new StringBuilder().append(this.val$path).append("/").append(v1.getName()).toString()).append(":").append(org.helllabs.android.xmp.PlaylistUtils.access$000(this.this$0).type).append(":").append(org.helllabs.android.xmp.PlaylistUtils.access$000(this.this$0).name).toString());
                v6++;
            }
            v3++;
        }
        if (v6 > 0) {
            android.app.ProgressDialog v7_0 = new String[v6];
            org.helllabs.android.xmp.PlaylistUtils.addToList(this.val$context, this.val$name, ((String[]) v5_1.toArray(v7_0)));
        }
        this.this$0.progressDialog.dismiss();
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$4 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;
    final synthetic android.content.Context val$context;
    final synthetic android.os.Handler val$handler;
    final synthetic android.view.View val$layout;
    final synthetic String val$path;
    final synthetic Runnable val$runnable;

    PlaylistUtils$4(org.helllabs.android.xmp.PlaylistUtils p1, android.view.View p2, android.content.Context p3, String p4, Runnable p5, android.os.Handler p6)
    {
        this.this$0 = p1;
        this.val$layout = p2;
        this.val$context = p3;
        this.val$path = p4;
        this.val$runnable = p5;
        this.val$handler = p6;
        return;
    }

    public void onClick(android.content.DialogInterface p11, int p12)
    {
        android.widget.EditText v3_1 = ((android.widget.EditText) this.val$layout.findViewById(2131296271));
        String v6 = ((android.widget.EditText) this.val$layout.findViewById(2131296270)).getText().toString();
        String v0 = v3_1.getText().toString();
        java.io.File v4_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v6).append(".playlist").toString());
        java.io.File v5_1 = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v6).append(".comment").toString());
        try {
            v4_1.createNewFile();
            v5_1.createNewFile();
            org.helllabs.android.xmp.FileUtils.writeToFile(v5_1, v0);
        } catch (java.io.IOException v1) {
            org.helllabs.android.xmp.Message.error(this.val$context, this.val$context.getString(2131361838));
        }
        this.this$0.filesToPlaylist(this.val$context, this.val$path, v6);
        if (this.val$runnable != null) {
            this.val$handler.post(this.val$runnable);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$5 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;

    PlaylistUtils$5(org.helllabs.android.xmp.PlaylistUtils p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p1, int p2)
    {
        return;
    }
}
package org.helllabs.android.xmp;
 class PlaylistUtils$ModFilter implements java.io.FilenameFilter {
    final synthetic org.helllabs.android.xmp.PlaylistUtils this$0;

    PlaylistUtils$ModFilter(org.helllabs.android.xmp.PlaylistUtils p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean accept(java.io.File p3, String p4)
    {
        return org.helllabs.android.xmp.Xmp.testModule(new StringBuilder().append(p3).append("/").append(p4).toString(), org.helllabs.android.xmp.PlaylistUtils.access$000(this.this$0));
    }
}
package org.helllabs.android.xmp;
public class PlaylistUtils {
    private final org.helllabs.android.xmp.ModInfo modInfo;
    android.app.ProgressDialog progressDialog;

    public PlaylistUtils()
    {
        this.modInfo = new org.helllabs.android.xmp.ModInfo();
        return;
    }

    static synthetic org.helllabs.android.xmp.ModInfo access$000(org.helllabs.android.xmp.PlaylistUtils p1)
    {
        return p1.modInfo;
    }

    public static void addToList(android.content.Context p5, String p6, String p7)
    {
        try {
            org.helllabs.android.xmp.FileUtils.writeToFile(new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(p6).append(".playlist").toString()), p7);
        } catch (java.io.IOException v0) {
            org.helllabs.android.xmp.Message.error(p5, p5.getString(2131361842));
        }
        return;
    }

    public static void addToList(android.content.Context p5, String p6, String[] p7)
    {
        try {
            org.helllabs.android.xmp.FileUtils.writeToFile(new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(p6).append(".playlist").toString()), p7);
        } catch (java.io.IOException v0) {
            org.helllabs.android.xmp.Message.error(p5, p5.getString(2131361842));
        }
        return;
    }

    public static void deleteList(android.content.Context p5, int p6)
    {
        String v0 = org.helllabs.android.xmp.PlaylistUtils.listNoSuffix()[p6];
        new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v0).append(".playlist").toString()).delete();
        new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(v0).append(".comment").toString()).delete();
        return;
    }

    public static String[] list()
    {
        return org.helllabs.android.xmp.Settings.dataDir.list(new org.helllabs.android.xmp.PlayListFilter());
    }

    public static String[] listNoSuffix()
    {
        String[] v1 = org.helllabs.android.xmp.PlaylistUtils.list();
        int v0 = 0;
        while (v0 < v1.length) {
            v1[v0] = v1[v0].substring(0, v1[v0].lastIndexOf(".playlist"));
            v0++;
        }
        return v1;
    }

    public static String readComment(android.content.Context p6, String p7)
    {
        try {
            String v0 = org.helllabs.android.xmp.FileUtils.readFromFile(new java.io.File(org.helllabs.android.xmp.Settings.dataDir, new StringBuilder().append(p7).append(".comment").toString()));
        } catch (java.io.IOException v1) {
            org.helllabs.android.xmp.Message.error(p6, p6.getString(2131361843));
        }
        if ((v0 == null) || (v0.trim().length() == 0)) {
            v0 = p6.getString(2131361826);
        }
        return v0;
    }

    public void filesToNewPlaylist(android.content.Context p12, String p13, Runnable p14)
    {
        if (new java.io.File(p13).isDirectory()) {
            android.app.AlertDialog$Builder v7_1 = new android.app.AlertDialog$Builder(p12);
            v7_1.setTitle("New playlist");
            android.view.View v2 = ((android.view.LayoutInflater) p12.getSystemService("layout_inflater")).inflate(2130903047, 0);
            android.os.Handler v6_1 = new android.os.Handler();
            v7_1.setView(v2);
            v7_1.setPositiveButton("Ok", new org.helllabs.android.xmp.PlaylistUtils$4(this, v2, p12, p13, p14, v6_1));
            v7_1.setNegativeButton("Cancel", new org.helllabs.android.xmp.PlaylistUtils$5(this));
            v7_1.show();
        } else {
            org.helllabs.android.xmp.Message.error(p12, p12.getString(2131361841));
        }
        return;
    }

    public void filesToPlaylist(android.content.Context p7, String p8, String p9)
    {
        java.io.File v2_1 = new java.io.File(p8);
        if (v2_1.isDirectory()) {
            this.progressDialog = android.app.ProgressDialog.show(p7, "Please wait", "Scanning module files...", 1);
            new org.helllabs.android.xmp.PlaylistUtils$3(this, v2_1, p8, p7, p9).start();
        } else {
            org.helllabs.android.xmp.Message.error(p7, p7.getString(2131361841));
        }
        return;
    }

    public void newPlaylist(android.content.Context p2)
    {
        this.newPlaylist(p2, 0);
        return;
    }

    public void newPlaylist(android.content.Context p7, Runnable p8)
    {
        android.app.AlertDialog$Builder v0_1 = new android.app.AlertDialog$Builder(p7);
        v0_1.setTitle("New playlist");
        android.view.View v2 = ((android.view.LayoutInflater) p7.getSystemService("layout_inflater")).inflate(2130903047, 0);
        v0_1.setView(v2);
        v0_1.setPositiveButton("Ok", new org.helllabs.android.xmp.PlaylistUtils$1(this, v2, p8, p7));
        v0_1.setNegativeButton("Cancel", new org.helllabs.android.xmp.PlaylistUtils$2(this));
        v0_1.setInverseBackgroundForced(1).show();
        return;
    }
}
package org.helllabs.android.xmp;
public class QueueManager {
    private java.util.ArrayList array;
    private int index;
    private boolean loopListMode;
    private org.helllabs.android.xmp.RandomIndex ridx;
    private boolean shuffleMode;

    public QueueManager(String[] p3, boolean p4, boolean p5)
    {
        this.index = 0;
        this.array = new java.util.ArrayList(java.util.Arrays.asList(p3));
        this.ridx = new org.helllabs.android.xmp.RandomIndex(p3.length);
        this.shuffleMode = p4;
        this.loopListMode = p5;
        return;
    }

    public void add(String[] p8)
    {
        if (p8.length > 0) {
            this.ridx.extend(p8.length, (this.index + 1));
            int v2 = p8.length;
            int v1 = 0;
            while (v1 < v2) {
                this.array.add(p8[v1]);
                v1++;
            }
        }
        return;
    }

    public String getFilename()
    {
        int v0;
        if (!this.shuffleMode) {
            v0 = this.index;
        } else {
            v0 = this.ridx.getIndex(this.index);
        }
        return ((String) this.array.get(v0));
    }

    public int index()
    {
        return this.index;
    }

    public boolean next()
    {
        int v0 = 0;
        this.index = (this.index + 1);
        if (this.index < this.array.size()) {
            v0 = 1;
        } else {
            if (this.loopListMode) {
                this.ridx.randomize();
                this.index = 0;
            }
        }
        return v0;
    }

    public void previous()
    {
        this.index = (this.index - 2);
        if (this.index < -1) {
            if (!this.loopListMode) {
                this.index = -1;
            } else {
                this.index = (this.index + this.array.size());
            }
        }
        return;
    }

    public void restart()
    {
        this.index = -1;
        return;
    }

    public int size()
    {
        return this.array.size();
    }
}
package org.helllabs.android.xmp;
public final class R$anim {
    public static final int slide_in_right = 2130968576;
    public static final int slide_out_left = 2130968577;

    public R$anim()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$array {
    public static final int meters_array = 2131099650;
    public static final int meters_values = 2131099651;
    public static final int sampling_rate_array = 2131099652;
    public static final int sampling_rate_values = 2131099653;
    public static final int vol_boost_array = 2131099648;
    public static final int vol_boost_values = 2131099649;

    public R$array()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$attr {
    public static final int actionbarCompatItemHomeStyle = 2130771970;
    public static final int actionbarCompatItemStyle = 2130771969;
    public static final int actionbarCompatProgressIndicatorStyle = 2130771971;
    public static final int actionbarCompatTitleStyle = 2130771968;
    public static final int borderDrawable = 2130771973;
    public static final int maskDrawable = 2130771972;

    public R$attr()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$color {
    public static final int actionbar_background = 2131165185;
    public static final int actionbar_title_color = 2131165184;

    public R$color()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$dimen {
    public static final int actionbar_compat_button_home_width = 2131230722;
    public static final int actionbar_compat_button_width = 2131230721;
    public static final int actionbar_compat_height = 2131230720;

    public R$dimen()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$drawable {
    public static final int actionbar_compat_item = 2130837504;
    public static final int actionbar_compat_item_focused = 2130837505;
    public static final int actionbar_compat_item_pressed = 2130837506;
    public static final int actionbar_shadow = 2130837507;
    public static final int back = 2130837508;
    public static final int browser = 2130837509;
    public static final int btn_small = 2130837510;
    public static final int folder = 2130837511;
    public static final int forward = 2130837512;
    public static final int home = 2130837513;
    public static final int ic_action_add = 2130837514;
    public static final int ic_action_delete = 2130837515;
    public static final int ic_action_preferences = 2130837516;
    public static final int ic_action_refresh = 2130837517;
    public static final int icon = 2130837518;
    public static final int list = 2130837519;
    public static final int list_loop_off = 2130837520;
    public static final int list_loop_on = 2130837521;
    public static final int list_play = 2130837522;
    public static final int list_shuffle_off = 2130837523;
    public static final int list_shuffle_on = 2130837524;
    public static final int logo = 2130837525;
    public static final int loop_off = 2130837526;
    public static final int loop_on = 2130837527;
    public static final int notification = 2130837528;
    public static final int parent = 2130837529;
    public static final int parent_touch = 2130837530;
    public static final int pause = 2130837531;
    public static final int play = 2130837532;
    public static final int stop = 2130837533;

    public R$drawable()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$id {
    public static final int aboutscrollview = 2131296263;
    public static final int actionbar_compat = 2131296256;
    public static final int actionbar_compat_item_refresh = 2131296259;
    public static final int actionbar_compat_item_refresh_progress = 2131296258;
    public static final int actionbar_compat_title = 2131296257;
    public static final int back = 2131296286;
    public static final int current_list = 2131296290;
    public static final int current_list_description = 2131296292;
    public static final int current_list_name = 2131296291;
    public static final int current_path = 2131296264;
    public static final int elapsed_time = 2131296283;
    public static final int forward = 2131296289;
    public static final int info = 2131296297;
    public static final int info_ins_layout = 2131296278;
    public static final int info_layout = 2131296277;
    public static final int info_meters = 2131296281;
    public static final int info_mod = 2131296279;
    public static final int info_name_0 = 2131296273;
    public static final int info_name_1 = 2131296275;
    public static final int info_status = 2131296282;
    public static final int info_type_0 = 2131296274;
    public static final int info_type_1 = 2131296276;
    public static final int layout_root = 2131296269;
    public static final int loop = 2131296285;
    public static final int menu_delete = 2131296300;
    public static final int menu_new_playlist = 2131296298;
    public static final int menu_prefs = 2131296299;
    public static final int menu_refresh = 2131296260;
    public static final int new_playlist_comment = 2131296271;
    public static final int new_playlist_name = 2131296270;
    public static final int play = 2131296287;
    public static final int play_all = 2131296266;
    public static final int plist_image = 2131296293;
    public static final int plist_info = 2131296295;
    public static final int plist_title = 2131296294;
    public static final int seek = 2131296284;
    public static final int stop = 2131296288;
    public static final int text_instruments = 2131296280;
    public static final int title = 2131296296;
    public static final int title_flipper = 2131296272;
    public static final int toggle_loop = 2131296267;
    public static final int toggle_shuffle = 2131296268;
    public static final int up_button = 2131296265;
    public static final int version_name = 2131296261;
    public static final int xmp_version = 2131296262;

    public R$id()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$layout {
    public static final int about = 2130903040;
    public static final int actionbar_compat = 2130903041;
    public static final int actionbar_indeterminate_progress = 2130903042;
    public static final int changelog = 2130903043;
    public static final int format_list_item = 2130903044;
    public static final int list_formats = 2130903045;
    public static final int modlist = 2130903046;
    public static final int newlist = 2130903047;
    public static final int player = 2130903048;
    public static final int playlist = 2130903049;
    public static final int playlist_item = 2130903050;
    public static final int playlist_menu = 2130903051;
    public static final int song_item = 2130903052;

    public R$layout()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$menu {
    public static final int options_menu = 2131492864;
    public static final int player_menu = 2131492865;

    public R$menu()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$string {
    public static final int about_author = 2131361830;
    public static final int about_license = 2131361833;
    public static final int about_license_text = 2131361834;
    public static final int about_version = 2131361831;
    public static final int about_xmp = 2131361832;
    public static final int app_description = 2131361793;
    public static final int app_name = 2131361792;
    public static final int cache_clear = 2131361849;
    public static final int cache_clear_error = 2131361850;
    public static final int changelog_text = 2131361804;
    public static final int changelog_title = 2131361805;
    public static final int dialog_new_comment = 2131361825;
    public static final int dialog_new_playlist = 2131361827;
    public static final int empty_comment = 2131361829;
    public static final int empty_playlist = 2131361828;
    public static final int error_create_playlist = 2131361838;
    public static final int error_datadir = 2131361837;
    public static final int error_edit_comment = 2131361840;
    public static final int error_exist_dir = 2131361841;
    public static final int error_read_comment = 2131361843;
    public static final int error_rename_playlist = 2131361839;
    public static final int error_storage = 2131361864;
    public static final int error_write_to_playlist = 2131361842;
    public static final int menu_delete = 2131361871;
    public static final int menu_new_playlist = 2131361863;
    public static final int menu_prefs = 2131361808;
    public static final int menu_refresh = 2131361807;
    public static final int msg_cancel = 2131361860;
    public static final int msg_cant_delete = 2131361857;
    public static final int msg_delete = 2131361870;
    public static final int msg_file_deleted = 2131361856;
    public static final int msg_no = 2131361855;
    public static final int msg_ok = 2131361861;
    public static final int msg_select_playlist = 2131361862;
    public static final int msg_yes = 2131361854;
    public static final int no_comment = 2131361826;
    public static final int preferences_about_summary = 2131361824;
    public static final int preferences_about_title = 2131361823;
    public static final int preferences_buffer_ms_dialog = 2131361846;
    public static final int preferences_buffer_ms_summary = 2131361844;
    public static final int preferences_buffer_ms_title = 2131361845;
    public static final int preferences_category_experimental = 2131361869;
    public static final int preferences_category_files = 2131361803;
    public static final int preferences_category_information = 2131361822;
    public static final int preferences_category_interface = 2131361813;
    public static final int preferences_category_preferences = 2131361851;
    public static final int preferences_category_sound = 2131361802;
    public static final int preferences_clear_cache_summary = 2131361847;
    public static final int preferences_clear_cache_title = 2131361848;
    public static final int preferences_enable_delete_summary = 2131361868;
    public static final int preferences_enable_delete_title = 2131361867;
    public static final int preferences_examples_summary = 2131361810;
    public static final int preferences_examples_title = 2131361809;
    public static final int preferences_list_formats_summary = 2131361821;
    public static final int preferences_list_formats_title = 2131361820;
    public static final int preferences_loop_list_summary = 2131361814;
    public static final int preferences_loop_list_title = 2131361815;
    public static final int preferences_media_path_summary = 2131361795;
    public static final int preferences_media_path_title = 2131361794;
    public static final int preferences_meters_summary = 2131361812;
    public static final int preferences_meters_title = 2131361811;
    public static final int preferences_pan_separation_dialog = 2131361806;
    public static final int preferences_pan_separation_summary = 2131361798;
    public static final int preferences_pan_separation_title = 2131361801;
    public static final int preferences_sampling_rate_summary = 2131361818;
    public static final int preferences_sampling_rate_title = 2131361819;
    public static final int preferences_show_info_line_summary = 2131361853;
    public static final int preferences_show_info_line_title = 2131361852;
    public static final int preferences_show_ins_highlight_summary = 2131361858;
    public static final int preferences_show_ins_highlight_title = 2131361859;
    public static final int preferences_show_toast_summary = 2131361836;
    public static final int preferences_show_toast_title = 2131361835;
    public static final int preferences_shuffle_summary = 2131361817;
    public static final int preferences_shuffle_title = 2131361816;
    public static final int preferences_stereo_summary = 2131361799;
    public static final int preferences_stereo_title = 2131361800;
    public static final int preferences_use_filename_summary = 2131361866;
    public static final int preferences_use_filename_title = 2131361865;
    public static final int preferences_vol_boost_summary = 2131361797;
    public static final int preferences_vol_boost_title = 2131361796;

    public R$string()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$style {
    public static final int ActionBar = 2131427336;
    public static final int ActionBarCompat = 2131427329;
    public static final int ActionBarCompatHomeItem = 2131427335;
    public static final int ActionBarCompatItem = 2131427334;
    public static final int ActionBarCompatItemBase = 2131427330;
    public static final int ActionBarCompatProgressIndicator = 2131427331;
    public static final int ActionBarCompatTitle = 2131427333;
    public static final int ActionBarCompatTitleBase = 2131427332;
    public static final int ActionBarTitle = 2131427337;
    public static final int AppTheme = 2131427328;

    public R$style()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$styleable {
    public static final int[] AppTheme = None;
    public static final int AppTheme_actionbarCompatItemHomeStyle = 2;
    public static final int AppTheme_actionbarCompatItemStyle = 1;
    public static final int AppTheme_actionbarCompatProgressIndicatorStyle = 3;
    public static final int AppTheme_actionbarCompatTitleStyle = 0;
    public static final int[] BezelImageView = None;
    public static final int BezelImageView_borderDrawable = 1;
    public static final int BezelImageView_maskDrawable = 0;
    public static final int[] SeekBarPreference = None;
    public static final int SeekBarPreference_android_defaultValue = 2;
    public static final int SeekBarPreference_android_dialogMessage = 3;
    public static final int SeekBarPreference_android_max = 0;
    public static final int SeekBarPreference_android_text = 1;

    static R$styleable()
    {
        int[] v0_0 = new int[4];
        v0_0 = {2130771968, 2130771969, 2130771970, 2130771971};
        org.helllabs.android.xmp.R$styleable.AppTheme = v0_0;
        int[] v0_2 = new int[2];
        v0_2 = {2130771972, 2130771973};
        org.helllabs.android.xmp.R$styleable.BezelImageView = v0_2;
        int[] v0_3 = new int[4];
        v0_3 = {16843062, 16843087, 16843245, 16843251};
        org.helllabs.android.xmp.R$styleable.SeekBarPreference = v0_3;
        return;
    }

    public R$styleable()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R$xml {
    public static final int preferences = 2131034112;

    public R$xml()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public final class R {

    public R()
    {
        return;
    }
}
package org.helllabs.android.xmp;
public class RandomIndex {
    private int[] idx;
    private java.util.Random random;

    public RandomIndex(int p6)
    {
        int v2_0 = new int[p6];
        this.idx = v2_0;
        this.random = new java.util.Random();
        this.random.setSeed(new java.util.Date().getTime());
        int v1 = 0;
        while (v1 < p6) {
            this.idx[v1] = v1;
            v1++;
        }
        this.randomize(0, p6);
        return;
    }

    public void extend(int p6, int p7)
    {
        int v1 = this.idx.length;
        int[] v2 = new int[(v1 + p6)];
        System.arraycopy(this.idx, 0, v2, 0, v1);
        int v0 = v1;
        while (v0 < (v1 + p6)) {
            v2[v0] = v0;
            v0++;
        }
        this.idx = v2;
        this.randomize(p7, (this.idx.length - p7));
        return;
    }

    public int getIndex(int p2)
    {
        return this.idx[p2];
    }

    public void randomize()
    {
        this.randomize(0, this.idx.length);
        return;
    }

    public void randomize(int p7, int p8)
    {
        int v0 = (p7 + p8);
        int v1 = p7;
        while (v1 < v0) {
            int v2 = (p7 + this.random.nextInt(p8));
            int v3 = this.idx[v1];
            this.idx[v1] = this.idx[v2];
            this.idx[v2] = v3;
            v1++;
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class RemoteControlReceiver extends android.content.BroadcastReceiver {
    public static int keyCode;

    static RemoteControlReceiver()
    {
        org.helllabs.android.xmp.RemoteControlReceiver.keyCode = -1;
        return;
    }

    public RemoteControlReceiver()
    {
        return;
    }

    public void onReceive(android.content.Context p7, android.content.Intent p8)
    {
        String v0 = p8.getAction();
        android.util.Log.d("Xmp RemoteControlReceiver", new StringBuilder().append("Action ").append(v0).toString());
        if (v0.equals("android.intent.action.MEDIA_BUTTON")) {
            android.view.KeyEvent v2_1 = ((android.view.KeyEvent) p8.getExtras().get("android.intent.extra.KEY_EVENT"));
            if (v2_1.getAction() == 0) {
                int v1 = v2_1.getKeyCode();
                switch (v1) {
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                        android.util.Log.d("Xmp RemoteControlReceiver", new StringBuilder().append("Key code ").append(v1).toString());
                        org.helllabs.android.xmp.RemoteControlReceiver.keyCode = v1;
                        break;
                    default:
                        android.util.Log.d("Xmp RemoteControlReceiver", new StringBuilder().append("Unhandled key code ").append(v1).toString());
                }
            }
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class ScreenReceiver extends android.content.BroadcastReceiver {
    public static boolean wasScreenOn;

    static ScreenReceiver()
    {
        org.helllabs.android.xmp.ScreenReceiver.wasScreenOn = 1;
        return;
    }

    public ScreenReceiver()
    {
        return;
    }

    public void onReceive(android.content.Context p3, android.content.Intent p4)
    {
        if (!p4.getAction().equals("android.intent.action.SCREEN_OFF")) {
            if (p4.getAction().equals("android.intent.action.SCREEN_ON")) {
                org.helllabs.android.xmp.ScreenReceiver.wasScreenOn = 1;
            }
        } else {
            org.helllabs.android.xmp.ScreenReceiver.wasScreenOn = 0;
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class SeekBarPreference extends android.preference.DialogPreference implements android.widget.SeekBar$OnSeekBarChangeListener {
    private android.content.Context mContext;
    private int mDefault;
    private String mDialogMessage;
    private int mMax;
    private android.widget.SeekBar mSeekBar;
    private android.widget.TextView mSplashText;
    private String mSuffix;
    private int mValue;
    private android.widget.TextView mValueText;

    public SeekBarPreference(android.content.Context p4, android.util.AttributeSet p5)
    {
        super(p4, p5);
        super.mValue = 0;
        super.mContext = p4;
        android.content.res.TypedArray v0 = p4.obtainStyledAttributes(p5, org.helllabs.android.xmp.R$styleable.SeekBarPreference);
        super.mDialogMessage = v0.getString(3);
        super.mSuffix = v0.getString(1);
        super.mDefault = v0.getInt(2, 0);
        super.mMax = v0.getInt(0, 100);
        return;
    }

    public int getMax()
    {
        return this.mMax;
    }

    public int getProgress()
    {
        return this.mValue;
    }

    protected void onBindDialogView(android.view.View p3)
    {
        super.onBindDialogView(p3);
        this.mSeekBar.setMax(this.mMax);
        this.mSeekBar.setProgress(this.mValue);
        return;
    }

    protected android.view.View onCreateDialogView()
    {
        android.widget.LinearLayout v0_1 = new android.widget.LinearLayout(this.mContext);
        v0_1.setOrientation(1);
        v0_1.setPadding(6, 6, 6, 6);
        this.mSplashText = new android.widget.TextView(this.mContext);
        if (this.mDialogMessage != null) {
            this.mSplashText.setText(this.mDialogMessage);
        }
        v0_1.addView(this.mSplashText);
        this.mValueText = new android.widget.TextView(this.mContext);
        this.mValueText.setGravity(1);
        this.mValueText.setTextSize(1107296256);
        v0_1.addView(this.mValueText, new android.widget.LinearLayout$LayoutParams(-1, -2));
        this.mSeekBar = new android.widget.SeekBar(this.mContext);
        this.mSeekBar.setOnSeekBarChangeListener(this);
        v0_1.addView(this.mSeekBar, new android.widget.LinearLayout$LayoutParams(-1, -2));
        if (this.shouldPersist()) {
            this.mValue = this.getPersistedInt(this.mDefault);
        }
        this.mSeekBar.setMax(this.mMax);
        this.mSeekBar.setProgress(this.mValue);
        return v0_1;
    }

    public void onProgressChanged(android.widget.SeekBar p4, int p5, boolean p6)
    {
        String v0 = String.valueOf(p5);
        Integer v1_3 = this.mValueText;
        if (this.mSuffix != null) {
            v0 = v0.concat(this.mSuffix);
        }
        v1_3.setText(v0);
        if (this.shouldPersist()) {
            this.persistInt(p5);
        }
        this.callChangeListener(new Integer(p5));
        return;
    }

    protected void onSetInitialValue(boolean p2, Object p3)
    {
        super.onSetInitialValue(p2, p3);
        if (!p2) {
            this.mValue = ((Integer) p3).intValue();
        } else {
            int v0_1;
            if (!this.shouldPersist()) {
                v0_1 = 0;
            } else {
                v0_1 = this.getPersistedInt(this.mDefault);
            }
            this.mValue = v0_1;
        }
        return;
    }

    public void onStartTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }

    public void onStopTrackingTouch(android.widget.SeekBar p1)
    {
        return;
    }

    public void setMax(int p1)
    {
        this.mMax = p1;
        return;
    }

    public void setProgress(int p2)
    {
        this.mValue = p2;
        if (this.mSeekBar != null) {
            this.mSeekBar.setProgress(p2);
        }
        return;
    }
}
package org.helllabs.android.xmp;
 class Settings$1 implements android.preference.Preference$OnPreferenceClickListener {
    final synthetic org.helllabs.android.xmp.Settings this$0;

    Settings$1(org.helllabs.android.xmp.Settings p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onPreferenceClick(android.preference.Preference p5)
    {
        try {
            org.helllabs.android.xmp.Settings.deleteCache(org.helllabs.android.xmp.Settings.cacheDir);
            org.helllabs.android.xmp.Message.toast(this.this$0.getBaseContext(), this.this$0.getString(2131361849));
        } catch (java.io.IOException v0) {
            org.helllabs.android.xmp.Message.toast(this.this$0.getBaseContext(), this.this$0.getString(2131361850));
        }
        return 1;
    }
}
package org.helllabs.android.xmp;
public class Settings extends android.preference.PreferenceActivity {
    public static final String DEFAULT_MEDIA_PATH = "";
    public static final String PREF_BUFFER_MS = "buffer_ms";
    public static final String PREF_CHANGELOG_VERSION = "changelog_version";
    public static final String PREF_ENABLE_DELETE = "enable_delete";
    public static final String PREF_EXAMPLES = "examples";
    public static final String PREF_MEDIA_PATH = "media_path";
    public static final String PREF_METERS = "meters";
    public static final String PREF_PAN_SEPARATION = "pan_separation";
    public static final String PREF_SAMPLING_RATE = "sampling_rate";
    public static final String PREF_SHOW_INFO_LINE = "show_info_line";
    public static final String PREF_SHOW_INS_HIGHLIGHT = "show_ins_highlight";
    public static final String PREF_SHOW_TOAST = "show_toast";
    public static final String PREF_STEREO = "stereo";
    public static final String PREF_USE_FILENAME = "use_filename";
    public static final String PREF_VOL_BOOST = "vol_boost";
    static final java.io.File cacheDir;
    static final java.io.File dataDir;
    static final java.io.File oldCacheDir;
    static final java.io.File sdDir;
    private String oldPath;
    private android.content.SharedPreferences prefs;

    static Settings()
    {
        String v0_1;
        if (!new java.io.File("/media/B&N Downloads").isDirectory()) {
            v0_1 = android.os.Environment.getExternalStorageDirectory();
        } else {
            v0_1 = new java.io.File("/media");
        }
        org.helllabs.android.xmp.Settings.sdDir = v0_1;
        org.helllabs.android.xmp.Settings.dataDir = new java.io.File(org.helllabs.android.xmp.Settings.sdDir, "Xmp for Android");
        org.helllabs.android.xmp.Settings.oldCacheDir = new java.io.File(org.helllabs.android.xmp.Settings.dataDir, "cache");
        org.helllabs.android.xmp.Settings.cacheDir = new java.io.File(org.helllabs.android.xmp.Settings.sdDir, "Android/data/org.helllabs.android.xmp/cache/");
        org.helllabs.android.xmp.Settings.DEFAULT_MEDIA_PATH = new StringBuilder().append(org.helllabs.android.xmp.Settings.sdDir.toString()).append("/mod").toString();
        return;
    }

    public Settings()
    {
        return;
    }

    public static void deleteCache(java.io.File p5)
    {
        if (p5.exists()) {
            if (p5.isDirectory()) {
                java.io.File[] v0 = p5.listFiles();
                int v3 = v0.length;
                int v2 = 0;
                while (v2 < v3) {
                    org.helllabs.android.xmp.Settings.deleteCache(v0[v2]);
                    v2++;
                }
            }
            p5.delete();
        }
        return;
    }

    protected void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.prefs = android.preference.PreferenceManager.getDefaultSharedPreferences(this);
        this.oldPath = this.prefs.getString("media_path", org.helllabs.android.xmp.Settings.DEFAULT_MEDIA_PATH);
        this.addPreferencesFromResource(2131034112);
        this.findPreference("clear_cache").setOnPreferenceClickListener(new org.helllabs.android.xmp.Settings$1(this));
        return;
    }

    public boolean onKeyDown(int p5, android.view.KeyEvent p6)
    {
        if (p6.getAction() == 0) {
            switch (p5) {
                case 4:
                    int v1_1;
                    if (this.prefs.getString("media_path", org.helllabs.android.xmp.Settings.DEFAULT_MEDIA_PATH) != this.oldPath) {
                        v1_1 = -1;
                    } else {
                        v1_1 = 0;
                    }
                    this.setResult(v1_1);
                    this.finish();
                    break;
            }
        }
        return super.onKeyDown(p5, p6);
    }
}
package org.helllabs.android.xmp;
public class SimpleMenu implements android.view.Menu {
    private android.content.Context mContext;
    private java.util.ArrayList mItems;
    private android.content.res.Resources mResources;

    public SimpleMenu(android.content.Context p2)
    {
        this.mContext = p2;
        this.mResources = p2.getResources();
        this.mItems = new java.util.ArrayList();
        return;
    }

    private android.view.MenuItem addInternal(int p4, int p5, CharSequence p6)
    {
        org.helllabs.android.xmp.SimpleMenuItem v0_1 = new org.helllabs.android.xmp.SimpleMenuItem(this, p4, p5, p6);
        this.mItems.add(org.helllabs.android.xmp.SimpleMenu.findInsertIndex(this.mItems, p5), v0_1);
        return v0_1;
    }

    private static int findInsertIndex(java.util.ArrayList p3, int p4)
    {
        int v0 = (p3.size() - 1);
        while (v0 >= 0) {
            if (((android.view.MenuItem) p3.get(v0)).getOrder() > p4) {
                v0--;
            } else {
                int v2_1 = (v0 + 1);
            }
            return v2_1;
        }
        v2_1 = 0;
        return v2_1;
    }

    private void removeItemAtInt(int p2)
    {
        if ((p2 >= 0) && (p2 < this.mItems.size())) {
            this.mItems.remove(p2);
        }
        return;
    }

    public android.view.MenuItem add(int p3)
    {
        return this.addInternal(0, 0, this.mResources.getString(p3));
    }

    public android.view.MenuItem add(int p2, int p3, int p4, int p5)
    {
        return this.addInternal(p3, p4, this.mResources.getString(p5));
    }

    public android.view.MenuItem add(int p2, int p3, int p4, CharSequence p5)
    {
        return this.addInternal(p3, p4, p5);
    }

    public android.view.MenuItem add(CharSequence p2)
    {
        return this.addInternal(0, 0, p2);
    }

    public int addIntentOptions(int p3, int p4, int p5, android.content.ComponentName p6, android.content.Intent[] p7, android.content.Intent p8, int p9, android.view.MenuItem[] p10)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public android.view.SubMenu addSubMenu(int p3)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public android.view.SubMenu addSubMenu(int p3, int p4, int p5, int p6)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public android.view.SubMenu addSubMenu(int p3, int p4, int p5, CharSequence p6)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public android.view.SubMenu addSubMenu(CharSequence p3)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void clear()
    {
        this.mItems.clear();
        return;
    }

    public void close()
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public android.view.MenuItem findItem(int p5)
    {
        int v2 = this.size();
        int v0 = 0;
        while (v0 < v2) {
            int v1_0 = ((org.helllabs.android.xmp.SimpleMenuItem) this.mItems.get(v0));
            if (v1_0.getItemId() != p5) {
                v0++;
            }
            return v1_0;
        }
        v1_0 = 0;
        return v1_0;
    }

    public int findItemIndex(int p5)
    {
        int v2 = this.size();
        int v0 = 0;
        while (v0 < v2) {
            if (((org.helllabs.android.xmp.SimpleMenuItem) this.mItems.get(v0)).getItemId() != p5) {
                v0++;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public android.content.Context getContext()
    {
        return this.mContext;
    }

    public android.view.MenuItem getItem(int p2)
    {
        return ((android.view.MenuItem) this.mItems.get(p2));
    }

    public android.content.res.Resources getResources()
    {
        return this.mResources;
    }

    public boolean hasVisibleItems()
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public boolean isShortcutKey(int p3, android.view.KeyEvent p4)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public boolean performIdentifierAction(int p3, int p4)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public boolean performShortcut(int p3, android.view.KeyEvent p4, int p5)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void removeGroup(int p3)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void removeItem(int p2)
    {
        this.removeItemAtInt(this.findItemIndex(p2));
        return;
    }

    public void setGroupCheckable(int p3, boolean p4, boolean p5)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void setGroupEnabled(int p3, boolean p4)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void setGroupVisible(int p3, boolean p4)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public void setQwertyMode(boolean p3)
    {
        throw new UnsupportedOperationException("This operation is not supported for SimpleMenu");
    }

    public int size()
    {
        return this.mItems.size();
    }
}
package org.helllabs.android.xmp;
public class SimpleMenuItem implements android.view.MenuItem {
    private boolean mEnabled;
    private android.graphics.drawable.Drawable mIconDrawable;
    private int mIconResId;
    private final int mId;
    private org.helllabs.android.xmp.SimpleMenu mMenu;
    private final int mOrder;
    private CharSequence mTitle;
    private CharSequence mTitleCondensed;

    public SimpleMenuItem(org.helllabs.android.xmp.SimpleMenu p2, int p3, int p4, CharSequence p5)
    {
        this.mIconResId = 0;
        this.mEnabled = 1;
        this.mMenu = p2;
        this.mId = p3;
        this.mOrder = p4;
        this.mTitle = p5;
        return;
    }

    public boolean collapseActionView()
    {
        return 0;
    }

    public boolean expandActionView()
    {
        return 0;
    }

    public android.view.ActionProvider getActionProvider()
    {
        return 0;
    }

    public android.view.View getActionView()
    {
        return 0;
    }

    public char getAlphabeticShortcut()
    {
        return 0;
    }

    public int getGroupId()
    {
        return 0;
    }

    public android.graphics.drawable.Drawable getIcon()
    {
        int v0_1;
        if (this.mIconDrawable == null) {
            if (this.mIconResId == 0) {
                v0_1 = 0;
            } else {
                v0_1 = this.mMenu.getResources().getDrawable(this.mIconResId);
            }
        } else {
            v0_1 = this.mIconDrawable;
        }
        return v0_1;
    }

    public android.content.Intent getIntent()
    {
        return 0;
    }

    public int getItemId()
    {
        return this.mId;
    }

    public android.view.ContextMenu$ContextMenuInfo getMenuInfo()
    {
        return 0;
    }

    public char getNumericShortcut()
    {
        return 0;
    }

    public int getOrder()
    {
        return this.mOrder;
    }

    public android.view.SubMenu getSubMenu()
    {
        return 0;
    }

    public CharSequence getTitle()
    {
        return this.mTitle;
    }

    public CharSequence getTitleCondensed()
    {
        CharSequence v0_1;
        if (this.mTitleCondensed == null) {
            v0_1 = this.mTitle;
        } else {
            v0_1 = this.mTitleCondensed;
        }
        return v0_1;
    }

    public boolean hasSubMenu()
    {
        return 0;
    }

    public boolean isActionViewExpanded()
    {
        return 0;
    }

    public boolean isCheckable()
    {
        return 0;
    }

    public boolean isChecked()
    {
        return 0;
    }

    public boolean isEnabled()
    {
        return this.mEnabled;
    }

    public boolean isVisible()
    {
        return 1;
    }

    public android.view.MenuItem setActionProvider(android.view.ActionProvider p1)
    {
        return this;
    }

    public android.view.MenuItem setActionView(int p1)
    {
        return this;
    }

    public android.view.MenuItem setActionView(android.view.View p1)
    {
        return this;
    }

    public android.view.MenuItem setAlphabeticShortcut(char p1)
    {
        return this;
    }

    public android.view.MenuItem setCheckable(boolean p1)
    {
        return this;
    }

    public android.view.MenuItem setChecked(boolean p1)
    {
        return this;
    }

    public android.view.MenuItem setEnabled(boolean p1)
    {
        this.mEnabled = p1;
        return this;
    }

    public android.view.MenuItem setIcon(int p2)
    {
        this.mIconDrawable = 0;
        this.mIconResId = p2;
        return this;
    }

    public android.view.MenuItem setIcon(android.graphics.drawable.Drawable p2)
    {
        this.mIconResId = 0;
        this.mIconDrawable = p2;
        return this;
    }

    public android.view.MenuItem setIntent(android.content.Intent p1)
    {
        return this;
    }

    public android.view.MenuItem setNumericShortcut(char p1)
    {
        return this;
    }

    public android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener p1)
    {
        return this;
    }

    public android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener p1)
    {
        return this;
    }

    public android.view.MenuItem setShortcut(char p1, char p2)
    {
        return this;
    }

    public void setShowAsAction(int p1)
    {
        return;
    }

    public android.view.MenuItem setShowAsActionFlags(int p2)
    {
        return 0;
    }

    public android.view.MenuItem setTitle(int p2)
    {
        return this.setTitle(this.mMenu.getContext().getString(p2));
    }

    public android.view.MenuItem setTitle(CharSequence p1)
    {
        this.mTitle = p1;
        return this;
    }

    public android.view.MenuItem setTitleCondensed(CharSequence p1)
    {
        this.mTitleCondensed = p1;
        return this;
    }

    public android.view.MenuItem setVisible(boolean p1)
    {
        return this;
    }
}
package org.helllabs.android.xmp;
public class Watchdog implements java.lang.Runnable {
    private org.helllabs.android.xmp.Watchdog$onTimeoutListener listener;
    private boolean running;
    private Thread thread;
    private int timeout;
    private int timer;

    public Watchdog(int p1)
    {
        this.timeout = p1;
        return;
    }

    public void refresh()
    {
        this.timer = this.timeout;
        return;
    }

    public void run()
    {
        while (this.running) {
            InterruptedException v0_2 = (this.timer - 1);
            this.timer = v0_2;
            if (v0_2 > null) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException v0) {
                }
            } else {
                this.listener.onTimeout();
                break;
            }
        }
        return;
    }

    public void setOnTimeoutListener(org.helllabs.android.xmp.Watchdog$onTimeoutListener p1)
    {
        this.listener = p1;
        return;
    }

    public void start()
    {
        this.running = 1;
        this.refresh();
        this.thread = new Thread(this);
        this.thread.start();
        return;
    }

    public void stop()
    {
        this.running = 0;
        try {
            this.thread.join();
        } catch (InterruptedException v0) {
        }
        return;
    }
}
package org.helllabs.android.xmp;
public class Xmp {
    public static final int XMP_FORMAT_MONO = 4;

    static Xmp()
    {
        System.loadLibrary("xmp");
        return;
    }

    public Xmp()
    {
        return;
    }

    public static native String getVersion();

    public static native boolean testModule();

    public native int decGvol();

    public native int deinit();

    public native int endPlayer();

    public native int getBuffer();

    public native void getChannelData();

    public native String[] getFormats();

    public native String[] getInstruments();

    public native int getLoopCount();

    public native String getModName();

    public native String getModType();

    public native void getModVars();

    public native int getPlayBpm();

    public native int getPlayPat();

    public native int getPlayPos();

    public native int getPlayTempo();

    public native int incGvol();

    public native int init();

    public native int loadModule();

    public native int nextOrd();

    public native int playFrame();

    public native int prevOrd();

    public native int releaseModule();

    public native int restartModule();

    public native int seek();

    public native void setMixerAmp();

    public native void setMixerPan();

    public native int setOrd();

    public native int startPlayer();

    public native int stopModule();

    public native int time();
}
package org.helllabs.android.xmp;
public class XmpPhoneStateListener extends android.telephony.PhoneStateListener {
    org.helllabs.android.xmp.ModService service;

    public XmpPhoneStateListener(org.helllabs.android.xmp.ModService p1)
    {
        this.service = p1;
        return;
    }

    public void onCallStateChanged(int p4, String p5)
    {
        int v0_1;
        android.util.Log.i("Xmp Listener", new StringBuilder().append("Call state changed: ").append(p4).toString());
        if (p4 == 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.service.autoPause(v0_1);
        return;
    }
}
