package com.google.android.voiceime;
 class ActivityHelper$1 implements android.content.DialogInterface$OnClickListener {
    final synthetic com.google.android.voiceime.ActivityHelper this$0;
    final synthetic String[] val$recognitionResults;

    ActivityHelper$1(com.google.android.voiceime.ActivityHelper p1, String[] p2)
    {
        this.this$0 = p1;
        this.val$recognitionResults = p2;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        com.google.android.voiceime.ActivityHelper.access$000(this.this$0, this.val$recognitionResults[p4]);
        return;
    }
}
package com.google.android.voiceime;
 class ActivityHelper$2 implements android.content.DialogInterface$OnCancelListener {
    final synthetic com.google.android.voiceime.ActivityHelper this$0;

    ActivityHelper$2(com.google.android.voiceime.ActivityHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onCancel(android.content.DialogInterface p3)
    {
        com.google.android.voiceime.ActivityHelper.access$000(this.this$0, 0);
        return;
    }
}
package com.google.android.voiceime;
 class ActivityHelper$3 implements android.content.DialogInterface$OnClickListener {
    final synthetic com.google.android.voiceime.ActivityHelper this$0;

    ActivityHelper$3(com.google.android.voiceime.ActivityHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        com.google.android.voiceime.ActivityHelper.access$000(this.this$0, 0);
        return;
    }
}
package com.google.android.voiceime;
public class ActivityHelper extends android.app.Activity {
    private static final int RECOGNITION_REQUEST = 1;
    private static final String TAG = "ActivityHelper";
    private com.google.android.voiceime.ServiceBridge mServiceBridge;

    public ActivityHelper()
    {
        return;
    }

    static synthetic void access$000(com.google.android.voiceime.ActivityHelper p0, String p1)
    {
        p0.notifyResult(p1);
        return;
    }

    private android.app.Dialog createResultDialog(String[] p4)
    {
        android.app.AlertDialog$Builder v0_1;
        if (android.os.Build$VERSION.SDK_INT >= 11) {
            v0_1 = new android.app.AlertDialog$Builder(this, 16973937);
        } else {
            v0_1 = new android.app.AlertDialog$Builder(this);
        }
        v0_1.setItems(p4, new com.google.android.voiceime.ActivityHelper$1(this, p4));
        v0_1.setCancelable(1);
        v0_1.setOnCancelListener(new com.google.android.voiceime.ActivityHelper$2(this));
        v0_1.setNeutralButton(17039360, new com.google.android.voiceime.ActivityHelper$3(this));
        return v0_1.create();
    }

    private void notifyResult(String p2)
    {
        this.mServiceBridge.notifyResult(this, p2);
        this.finish();
        return;
    }

    protected void onActivityResult(int p3, int p4, android.content.Intent p5)
    {
        if ((p3 != 1) || ((p5 == null) || (!p5.hasExtra("android.speech.extra.RESULTS")))) {
            this.notifyResult(0);
        } else {
            java.util.ArrayList v0 = p5.getStringArrayListExtra("android.speech.extra.RESULTS");
            android.app.Dialog v1_2 = new String[v0.size()];
            this.createResultDialog(((String[]) v0.toArray(v1_2))).show();
        }
        return;
    }

    protected void onCreate(android.os.Bundle p5)
    {
        super.onCreate(p5);
        this.mServiceBridge = new com.google.android.voiceime.ServiceBridge();
        android.content.Intent v0_1 = new android.content.Intent("android.speech.action.RECOGNIZE_SPEECH");
        v0_1.putExtra("calling_package", this.getClass().getPackage().getName());
        v0_1.putExtra("android.speech.extra.LANGUAGE_MODEL", "free_form");
        v0_1.putExtra("android.speech.extra.MAX_RESULTS", 5);
        if (p5 != null) {
            String v1 = p5.getString("android.speech.extra.LANGUAGE");
            if (v1 != null) {
                v0_1.putExtra("android.speech.extra.LANGUAGE", v1);
            }
        }
        this.startActivityForResult(v0_1, 1);
        return;
    }
}
package com.google.android.voiceime;
 class IntentApiTrigger$2 implements java.lang.Runnable {
    final synthetic com.google.android.voiceime.IntentApiTrigger this$0;

    IntentApiTrigger$2(com.google.android.voiceime.IntentApiTrigger p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        com.google.android.voiceime.IntentApiTrigger.access$100(this.this$0);
        return;
    }
}
package com.google.android.voiceime;
interface IntentApiTrigger$Callback {

    public abstract void onRecognitionResult();
}
package com.google.android.voiceime;
 class ServiceBridge$ConnectionRequest implements android.content.ServiceConnection {
    private final String mLanguageCode;
    private com.google.android.voiceime.ServiceHelper$Callback mServiceCallback;
    final synthetic com.google.android.voiceime.ServiceBridge this$0;

    private ServiceBridge$ConnectionRequest(com.google.android.voiceime.ServiceBridge p1, String p2)
    {
        this.this$0 = p1;
        this.mLanguageCode = p2;
        return;
    }

    synthetic ServiceBridge$ConnectionRequest(com.google.android.voiceime.ServiceBridge p1, String p2, com.google.android.voiceime.ServiceBridge$1 p3)
    {
        this(p1, p2);
        return;
    }

    static synthetic void access$200(com.google.android.voiceime.ServiceBridge$ConnectionRequest p0, com.google.android.voiceime.ServiceHelper$Callback p1)
    {
        p0.setServiceCallback(p1);
        return;
    }

    private void setServiceCallback(com.google.android.voiceime.ServiceHelper$Callback p1)
    {
        this.mServiceCallback = p1;
        return;
    }

    public void onServiceConnected(android.content.ComponentName p4, android.os.IBinder p5)
    {
        ((com.google.android.voiceime.ServiceHelper$ServiceHelperBinder) p5).getService().startRecognition(this.mLanguageCode, this.mServiceCallback);
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p1)
    {
        return;
    }
}
package com.google.android.voiceime;
 class ServiceBridge$ConnectionResponse implements android.content.ServiceConnection {
    private final android.content.Context mContext;
    private final String mRecognitionResult;
    final synthetic com.google.android.voiceime.ServiceBridge this$0;

    private ServiceBridge$ConnectionResponse(com.google.android.voiceime.ServiceBridge p1, android.content.Context p2, String p3)
    {
        this.this$0 = p1;
        this.mRecognitionResult = p3;
        this.mContext = p2;
        return;
    }

    synthetic ServiceBridge$ConnectionResponse(com.google.android.voiceime.ServiceBridge p1, android.content.Context p2, String p3, com.google.android.voiceime.ServiceBridge$1 p4)
    {
        this(p1, p2, p3);
        return;
    }

    public void onServiceConnected(android.content.ComponentName p3, android.os.IBinder p4)
    {
        ((com.google.android.voiceime.ServiceHelper$ServiceHelperBinder) p4).getService().notifyResult(this.mRecognitionResult);
        this.mContext.unbindService(this);
        return;
    }

    public void onServiceDisconnected(android.content.ComponentName p1)
    {
        return;
    }
}
package com.google.android.voiceime;
 class ServiceBridge {
    private static final String TAG = "ServiceBridge";
    private final com.google.android.voiceime.IntentApiTrigger$Callback mCallback;

    public ServiceBridge()
    {
        this(0);
        return;
    }

    public ServiceBridge(com.google.android.voiceime.IntentApiTrigger$Callback p1)
    {
        this.mCallback = p1;
        return;
    }

    static synthetic com.google.android.voiceime.IntentApiTrigger$Callback access$100(com.google.android.voiceime.ServiceBridge p1)
    {
        return p1.mCallback;
    }

    public void notifyResult(android.content.Context p4, String p5)
    {
        p4.bindService(new android.content.Intent(p4, com.google.android.voiceime.ServiceHelper), new com.google.android.voiceime.ServiceBridge$ConnectionResponse(this, p4, p5, 0), 1);
        return;
    }

    public void startVoiceRecognition(android.content.Context p4, String p5)
    {
        com.google.android.voiceime.ServiceBridge$ConnectionRequest v0_1 = new com.google.android.voiceime.ServiceBridge$ConnectionRequest(this, p5, 0);
        com.google.android.voiceime.ServiceBridge$ConnectionRequest.access$200(v0_1, new com.google.android.voiceime.ServiceBridge$1(this, p4, v0_1));
        p4.bindService(new android.content.Intent(p4, com.google.android.voiceime.ServiceHelper), v0_1, 1);
        return;
    }
}
package com.google.android.voiceime;
public interface ServiceHelper$Callback {

    public abstract void onResult();
}
package com.google.android.voiceime;
public class ServiceHelper$ServiceHelperBinder extends android.os.Binder {
    final synthetic com.google.android.voiceime.ServiceHelper this$0;

    public ServiceHelper$ServiceHelperBinder(com.google.android.voiceime.ServiceHelper p1)
    {
        this.this$0 = p1;
        return;
    }

    com.google.android.voiceime.ServiceHelper getService()
    {
        return this.this$0;
    }
}
package com.google.android.voiceime;
public class ServiceHelper extends android.app.Service {
    private static final String TAG = "ServiceHelper";
    private final android.os.IBinder mBinder;
    private com.google.android.voiceime.ServiceHelper$Callback mCallback;

    public ServiceHelper()
    {
        this.mBinder = new com.google.android.voiceime.ServiceHelper$ServiceHelperBinder(this);
        return;
    }

    public void notifyResult(String p2)
    {
        if (this.mCallback != null) {
            this.mCallback.onResult(p2);
        }
        return;
    }

    public android.os.IBinder onBind(android.content.Intent p2)
    {
        return this.mBinder;
    }

    public void onCreate()
    {
        super.onCreate();
        android.util.Log.i("ServiceHelper", "#onCreate");
        return;
    }

    public void onDestroy()
    {
        super.onDestroy();
        android.util.Log.i("ServiceHelper", "#onDestroy");
        return;
    }

    public void startRecognition(String p4, com.google.android.voiceime.ServiceHelper$Callback p5)
    {
        android.util.Log.i("ServiceHelper", "#startRecognition");
        this.mCallback = p5;
        android.content.Intent v0_1 = new android.content.Intent(this, com.google.android.voiceime.ActivityHelper);
        v0_1.addFlags(268435456);
        this.startActivity(v0_1);
        return;
    }
}
package com.google.android.voiceime;
interface Trigger {

    public abstract void onStartInputView();

    public abstract void startVoiceRecognition();
}
package com.google.android.voiceime;
 class VoiceRecognitionTrigger$1 extends android.content.BroadcastReceiver {
    final synthetic com.google.android.voiceime.VoiceRecognitionTrigger this$0;
    final synthetic com.google.android.voiceime.VoiceRecognitionTrigger$Listener val$listener;

    VoiceRecognitionTrigger$1(com.google.android.voiceime.VoiceRecognitionTrigger p1, com.google.android.voiceime.VoiceRecognitionTrigger$Listener p2)
    {
        this.this$0 = p1;
        this.val$listener = p2;
        return;
    }

    public void onReceive(android.content.Context p3, android.content.Intent p4)
    {
        if (p4.getAction().equals("android.net.conn.CONNECTIVITY_CHANGE")) {
            this.val$listener.onVoiceImeEnabledStatusChange();
        }
        return;
    }
}
package com.google.android.voiceime;
public interface VoiceRecognitionTrigger$Listener {

    public abstract void onVoiceImeEnabledStatusChange();
}
package com.google.android.voiceime;
public class VoiceRecognitionTrigger {
    private com.google.android.voiceime.ImeTrigger mImeTrigger;
    private final android.inputmethodservice.InputMethodService mInputMethodService;
    private com.google.android.voiceime.IntentApiTrigger mIntentApiTrigger;
    private android.content.BroadcastReceiver mReceiver;
    private com.google.android.voiceime.Trigger mTrigger;

    public VoiceRecognitionTrigger(android.inputmethodservice.InputMethodService p2)
    {
        this.mInputMethodService = p2;
        this.mTrigger = this.getTrigger();
        return;
    }

    private com.google.android.voiceime.Trigger getImeTrigger()
    {
        if (this.mImeTrigger == null) {
            this.mImeTrigger = new com.google.android.voiceime.ImeTrigger(this.mInputMethodService);
        }
        return this.mImeTrigger;
    }

    private com.google.android.voiceime.Trigger getIntentTrigger()
    {
        if (this.mIntentApiTrigger == null) {
            this.mIntentApiTrigger = new com.google.android.voiceime.IntentApiTrigger(this.mInputMethodService);
        }
        return this.mIntentApiTrigger;
    }

    private com.google.android.voiceime.Trigger getTrigger()
    {
        int v0_1;
        if (!com.google.android.voiceime.ImeTrigger.isInstalled(this.mInputMethodService)) {
            if (!com.google.android.voiceime.IntentApiTrigger.isInstalled(this.mInputMethodService)) {
                v0_1 = 0;
            } else {
                v0_1 = this.getIntentTrigger();
            }
        } else {
            v0_1 = this.getImeTrigger();
        }
        return v0_1;
    }

    private boolean isNetworkAvailable()
    {
        int v3 = 1;
        try {
            android.net.NetworkInfo v2 = ((android.net.ConnectivityManager) this.mInputMethodService.getSystemService("connectivity")).getActiveNetworkInfo();
        } catch (SecurityException v1) {
            return v3;
        }
        if ((v2 == null) || (!v2.isConnected())) {
            v3 = 0;
            return v3;
        } else {
            return v3;
        }
    }

    public boolean isEnabled()
    {
        return this.isNetworkAvailable();
    }

    public boolean isInstalled()
    {
        int v0_1;
        if (this.mTrigger == null) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onStartInputView()
    {
        if (this.mTrigger != null) {
            this.mTrigger.onStartInputView();
        }
        this.mTrigger = this.getTrigger();
        return;
    }

    public void register(com.google.android.voiceime.VoiceRecognitionTrigger$Listener p4)
    {
        this.mReceiver = new com.google.android.voiceime.VoiceRecognitionTrigger$1(this, p4);
        android.content.IntentFilter v0_1 = new android.content.IntentFilter();
        v0_1.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        this.mInputMethodService.registerReceiver(this.mReceiver, v0_1);
        return;
    }

    public void startVoiceRecognition()
    {
        this.startVoiceRecognition(0);
        return;
    }

    public void startVoiceRecognition(String p2)
    {
        if (this.mTrigger != null) {
            this.mTrigger.startVoiceRecognition(p2);
        }
        return;
    }

    public void unregister(android.content.Context p3)
    {
        if (this.mReceiver != null) {
            this.mInputMethodService.unregisterReceiver(this.mReceiver);
            this.mReceiver = 0;
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class AutoDictionary$DatabaseHelper extends android.database.sqlite.SQLiteOpenHelper {

    AutoDictionary$DatabaseHelper(android.content.Context p4)
    {
        super(p4, "auto_dict.db", 0, 1);
        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase p2)
    {
        p2.execSQL("CREATE TABLE words (_id INTEGER PRIMARY KEY,word TEXT,freq INTEGER,locale TEXT);");
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase p4, int p5, int p6)
    {
        android.util.Log.w("AutoDictionary", new StringBuilder().append("Upgrading database from version ").append(p5).append(" to ").append(p6).append(", which will destroy all old data").toString());
        p4.execSQL("DROP TABLE IF EXISTS words");
        this.onCreate(p4);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class AutoDictionary$UpdateDbTask extends android.os.AsyncTask {
    private final org.pocketworkstation.pckeyboard.AutoDictionary$DatabaseHelper mDbHelper;
    private final String mLocale;
    private final java.util.HashMap mMap;

    public AutoDictionary$UpdateDbTask(android.content.Context p1, org.pocketworkstation.pckeyboard.AutoDictionary$DatabaseHelper p2, java.util.HashMap p3, String p4)
    {
        this.mMap = p3;
        this.mLocale = p4;
        this.mDbHelper = p2;
        return;
    }

    private android.content.ContentValues getContentValues(String p4, int p5, String p6)
    {
        android.content.ContentValues v0_1 = new android.content.ContentValues(4);
        v0_1.put("word", p4);
        v0_1.put("freq", Integer.valueOf(p5));
        v0_1.put("locale", p6);
        return v0_1;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs Void doInBackground(Void[] p12)
    {
        android.database.sqlite.SQLiteDatabase v0 = this.mDbHelper.getWritableDatabase();
        java.util.Iterator v5 = this.mMap.entrySet().iterator();
        while (v5.hasNext()) {
            java.util.Map$Entry v1_1 = ((java.util.Map$Entry) v5.next());
            Integer v2_1 = ((Integer) v1_1.getValue());
            String v8_0 = new String[2];
            v8_0[0] = ((String) v1_1.getKey());
            v8_0[1] = this.mLocale;
            v0.delete("words", "word=? AND locale=?", v8_0);
            if (v2_1 != null) {
                v0.insert("words", 0, this.getContentValues(((String) v1_1.getKey()), v2_1.intValue(), this.mLocale));
            }
        }
        return 0;
    }
}
package org.pocketworkstation.pckeyboard;
public class AutoSummaryEditTextPreference extends android.preference.EditTextPreference {

    public AutoSummaryEditTextPreference(android.content.Context p1)
    {
        super(p1);
        return;
    }

    public AutoSummaryEditTextPreference(android.content.Context p1, android.util.AttributeSet p2)
    {
        super(p1, p2);
        return;
    }

    public AutoSummaryEditTextPreference(android.content.Context p1, android.util.AttributeSet p2, int p3)
    {
        super(p1, p2, p3);
        return;
    }

    public void setText(String p1)
    {
        super.setText(p1);
        this.setSummary(p1);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class AutoSummaryListPreference extends android.preference.ListPreference {
    private static final String TAG = "HK/AutoSummaryListPreference";

    public AutoSummaryListPreference(android.content.Context p1)
    {
        super(p1);
        return;
    }

    public AutoSummaryListPreference(android.content.Context p1, android.util.AttributeSet p2)
    {
        super(p1, p2);
        return;
    }

    private void trySetSummary()
    {
        try {
            CharSequence v1 = this.getEntry();
        } catch (ArrayIndexOutOfBoundsException v0) {
            android.util.Log.i("HK/AutoSummaryListPreference", "Malfunctioning ListPreference, can\'t get entry");
        }
        if (v1 != null) {
            this.setSummary(v1.toString().replace("%", new StringBuilder().append(" ").append("percent").toString()));
        }
        return;
    }

    public void setEntries(CharSequence[] p1)
    {
        super.setEntries(p1);
        this.trySetSummary();
        return;
    }

    public void setEntryValues(CharSequence[] p1)
    {
        super.setEntryValues(p1);
        this.trySetSummary();
        return;
    }

    public void setValue(String p1)
    {
        super.setValue(p1);
        this.trySetSummary();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class BuildConfig {
    public static final boolean DEBUG;

    public BuildConfig()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class CandidateView$CandidateStripGestureListener extends android.view.GestureDetector$SimpleOnGestureListener {
    private final int mTouchSlopSquare;
    final synthetic org.pocketworkstation.pckeyboard.CandidateView this$0;

    public CandidateView$CandidateStripGestureListener(org.pocketworkstation.pckeyboard.CandidateView p2, int p3)
    {
        this.this$0 = p2;
        this.mTouchSlopSquare = (p3 * p3);
        return;
    }

    public boolean onDown(android.view.MotionEvent p3)
    {
        org.pocketworkstation.pckeyboard.CandidateView.access$302(this.this$0, 0);
        return 0;
    }

    public void onLongPress(android.view.MotionEvent p4)
    {
        if ((org.pocketworkstation.pckeyboard.CandidateView.access$000(this.this$0).size() > 0) && (((p4.getX() + ((float) this.this$0.getScrollX())) < ((float) org.pocketworkstation.pckeyboard.CandidateView.access$100(this.this$0)[0])) && (this.this$0.getScrollX() < 10))) {
            org.pocketworkstation.pckeyboard.CandidateView.access$200(this.this$0);
        }
        return;
    }

    public boolean onScroll(android.view.MotionEvent p9, android.view.MotionEvent p10, float p11, float p12)
    {
        if (org.pocketworkstation.pckeyboard.CandidateView.access$300(this.this$0)) {
            int v4 = this.this$0.getWidth();
            org.pocketworkstation.pckeyboard.CandidateView.access$302(this.this$0, 1);
            int v3_1 = (this.this$0.getScrollX() + ((int) p11));
            if (v3_1 < 0) {
                v3_1 = 0;
            }
            if ((p11 > 0) && ((v3_1 + v4) > org.pocketworkstation.pckeyboard.CandidateView.access$400(this.this$0))) {
                v3_1 -= ((int) p11);
            }
            org.pocketworkstation.pckeyboard.CandidateView.access$502(this.this$0, v3_1);
            this.this$0.scrollTo(v3_1, this.this$0.getScrollY());
            org.pocketworkstation.pckeyboard.CandidateView.access$600(this.this$0);
            this.this$0.invalidate();
        } else {
            if (((((int) (p10.getX() - p9.getX())) * ((int) (p10.getX() - p9.getX()))) + (((int) (p10.getY() - p9.getY())) * ((int) (p10.getY() - p9.getY())))) >= this.mTouchSlopSquare) {
                org.pocketworkstation.pckeyboard.CandidateView.access$302(this.this$0, 1);
            }
        }
        return 1;
    }
}
package org.pocketworkstation.pckeyboard;
public class CandidateView extends android.view.View {
    private static final int MAX_SUGGESTIONS = 32;
    private static final int OUT_OF_BOUNDS_WORD_INDEX = 255;
    private static final int OUT_OF_BOUNDS_X_COORD = 255;
    private static final int SCROLL_PIXELS = 20;
    private static final int X_GAP = 10;
    private CharSequence mAddToDictionaryHint;
    private android.graphics.Rect mBgPadding;
    private final int mColorNormal;
    private final int mColorOther;
    private final int mColorRecommended;
    private int mCurrentWordIndex;
    private final int mDescent;
    private android.graphics.drawable.Drawable mDivider;
    private final android.view.GestureDetector mGestureDetector;
    private boolean mHaveMinimalSuggestion;
    private final int mMinTouchableWidth;
    private final android.graphics.Paint mPaint;
    private int mPopupPreviewX;
    private int mPopupPreviewY;
    private final android.widget.PopupWindow mPreviewPopup;
    private final android.widget.TextView mPreviewText;
    private boolean mScrolled;
    private int mSelectedIndex;
    private CharSequence mSelectedString;
    private final android.graphics.drawable.Drawable mSelectionHighlight;
    private org.pocketworkstation.pckeyboard.LatinIME mService;
    private boolean mShowingAddToDictionary;
    private boolean mShowingCompletions;
    private final java.util.ArrayList mSuggestions;
    private int mTargetScrollX;
    private int mTotalWidth;
    private int mTouchX;
    private boolean mTypedWordValid;
    private final int[] mWordWidth;
    private final int[] mWordX;

    public CandidateView(android.content.Context p8, android.util.AttributeSet p9)
    {
        super(p8, p9);
        super.mSuggestions = new java.util.ArrayList();
        super.mTouchX = -1;
        int v2_0 = new int[32];
        super.mWordWidth = v2_0;
        int v2_3 = new int[32];
        super.mWordX = v2_3;
        super.mSelectionHighlight = p8.getResources().getDrawable(2130837557);
        android.view.LayoutInflater v0_1 = ((android.view.LayoutInflater) p8.getSystemService("layout_inflater"));
        android.content.res.Resources v1 = p8.getResources();
        super.mPreviewPopup = new android.widget.PopupWindow(p8);
        super.mPreviewText = ((android.widget.TextView) v0_1.inflate(2130903041, 0));
        super.mPreviewPopup.setWindowLayoutMode(-2, -2);
        super.mPreviewPopup.setContentView(super.mPreviewText);
        super.mPreviewPopup.setBackgroundDrawable(0);
        super.mPreviewPopup.setAnimationStyle(2131558401);
        super.mColorNormal = v1.getColor(2131296256);
        super.mColorRecommended = v1.getColor(2131296257);
        super.mColorOther = v1.getColor(2131296258);
        super.mDivider = v1.getDrawable(2130837556);
        super.mAddToDictionaryHint = v1.getString(2131165492);
        super.mPaint = new android.graphics.Paint();
        super.mPaint.setColor(super.mColorNormal);
        super.mPaint.setAntiAlias(1);
        super.mPaint.setTextSize((super.mPreviewText.getTextSize() * org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.candidateScalePref));
        super.mPaint.setStrokeWidth(0);
        super.mPaint.setTextAlign(android.graphics.Paint$Align.CENTER);
        super.mDescent = ((int) super.mPaint.descent());
        super.mMinTouchableWidth = ((int) v1.getDimension(2131427349));
        super.mGestureDetector = new android.view.GestureDetector(new org.pocketworkstation.pckeyboard.CandidateView$CandidateStripGestureListener(super, super.mMinTouchableWidth));
        super.setWillNotDraw(0);
        super.setHorizontalScrollBarEnabled(0);
        super.setVerticalScrollBarEnabled(0);
        super.scrollTo(0, super.getScrollY());
        return;
    }

    static synthetic java.util.ArrayList access$000(org.pocketworkstation.pckeyboard.CandidateView p1)
    {
        return p1.mSuggestions;
    }

    static synthetic int[] access$100(org.pocketworkstation.pckeyboard.CandidateView p1)
    {
        return p1.mWordWidth;
    }

    static synthetic void access$200(org.pocketworkstation.pckeyboard.CandidateView p0)
    {
        p0.longPressFirstWord();
        return;
    }

    static synthetic boolean access$300(org.pocketworkstation.pckeyboard.CandidateView p1)
    {
        return p1.mScrolled;
    }

    static synthetic boolean access$302(org.pocketworkstation.pckeyboard.CandidateView p0, boolean p1)
    {
        p0.mScrolled = p1;
        return p1;
    }

    static synthetic int access$400(org.pocketworkstation.pckeyboard.CandidateView p1)
    {
        return p1.mTotalWidth;
    }

    static synthetic int access$502(org.pocketworkstation.pckeyboard.CandidateView p0, int p1)
    {
        p0.mTargetScrollX = p1;
        return p1;
    }

    static synthetic void access$600(org.pocketworkstation.pckeyboard.CandidateView p0)
    {
        p0.hidePreview();
        return;
    }

    private void hidePreview()
    {
        this.mTouchX = -1;
        this.mCurrentWordIndex = -1;
        this.mPreviewPopup.dismiss();
        return;
    }

    private void longPressFirstWord()
    {
        CharSequence v0_1 = ((CharSequence) this.mSuggestions.get(0));
        if ((v0_1.length() >= 2) && (this.mService.addWordToDictionary(v0_1.toString()))) {
            String v1_3 = this.getContext().getResources();
            Object[] v3_1 = new Object[1];
            v3_1[0] = v0_1;
            this.showPreview(0, v1_3.getString(2131165433, v3_1));
        }
        return;
    }

    private void scrollToTarget()
    {
        int v0_0 = this.getScrollX();
        if (this.mTargetScrollX <= v0_0) {
            int v0_4 = (v0_0 - 20);
            if (v0_4 > this.mTargetScrollX) {
                this.scrollTo(v0_4, this.getScrollY());
            } else {
                this.scrollTo(this.mTargetScrollX, this.getScrollY());
                this.requestLayout();
            }
        } else {
            int v0_2 = (v0_0 + 20);
            if (v0_2 < this.mTargetScrollX) {
                this.scrollTo(v0_2, this.getScrollY());
            } else {
                this.scrollTo(this.mTargetScrollX, this.getScrollY());
                this.requestLayout();
            }
        }
        this.invalidate();
        return;
    }

    private void showPreview(int p12, String p13)
    {
        int v1 = this.mCurrentWordIndex;
        this.mCurrentWordIndex = p12;
        if ((v1 != this.mCurrentWordIndex) || (p13 != null)) {
            if (p12 != -1) {
                CharSequence v4;
                if (p13 == null) {
                    v4 = ((CharSequence) this.mSuggestions.get(p12));
                } else {
                    v4 = p13;
                }
                this.mPreviewText.setText(v4);
                this.mPreviewText.measure(android.view.View$MeasureSpec.makeMeasureSpec(0, 0), android.view.View$MeasureSpec.makeMeasureSpec(0, 0));
                int v5 = ((int) (this.mPaint.measureText(v4, 0, v4.length()) + 1101004800));
                int v3 = ((this.mPreviewText.getPaddingLeft() + v5) + this.mPreviewText.getPaddingRight());
                int v2 = this.mPreviewText.getMeasuredHeight();
                this.mPopupPreviewX = (((this.mWordX[p12] - this.mPreviewText.getPaddingLeft()) - this.getScrollX()) + ((this.mWordWidth[p12] - v5) / 2));
                this.mPopupPreviewY = (- v2);
                int[] v0 = new int[2];
                this.getLocationInWindow(v0);
                if (!this.mPreviewPopup.isShowing()) {
                    this.mPreviewPopup.setWidth(v3);
                    this.mPreviewPopup.setHeight(v2);
                    this.mPreviewPopup.showAtLocation(this, 0, this.mPopupPreviewX, (this.mPopupPreviewY + v0[1]));
                } else {
                    this.mPreviewPopup.update(this.mPopupPreviewX, (this.mPopupPreviewY + v0[1]), v3, v2);
                }
                this.mPreviewText.setVisibility(0);
            } else {
                this.hidePreview();
            }
        }
        return;
    }

    public void clear()
    {
        this.mSuggestions.clear();
        this.mTouchX = -1;
        this.mSelectedString = 0;
        this.mSelectedIndex = -1;
        this.mShowingAddToDictionary = 0;
        this.invalidate();
        java.util.Arrays.fill(this.mWordWidth, 0);
        java.util.Arrays.fill(this.mWordX, 0);
        return;
    }

    public int computeHorizontalScrollRange()
    {
        return this.mTotalWidth;
    }

    public boolean dismissAddToDictionaryHint()
    {
        int v0_1;
        if (this.mShowingAddToDictionary) {
            this.clear();
            v0_1 = 1;
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    java.util.List getSuggestions()
    {
        return this.mSuggestions;
    }

    public boolean isShowingAddToDictionaryHint()
    {
        return this.mShowingAddToDictionary;
    }

    public void onDetachedFromWindow()
    {
        super.onDetachedFromWindow();
        this.hidePreview();
        return;
    }

    protected void onDraw(android.graphics.Canvas p24)
    {
        if (p24 != null) {
            this = super.onDraw(p24);
        }
        this.mTotalWidth = 0;
        int v12 = this.getHeight();
        if (this.mBgPadding == null) {
            this.mBgPadding = new android.graphics.Rect(0, 0, 0, 0);
            if (this.getBackground() != null) {
                this.getBackground().getPadding(this.mBgPadding);
            }
            this.mDivider.setBounds(0, 0, this.mDivider.getIntrinsicWidth(), this.mDivider.getIntrinsicHeight());
        }
        int v10 = this.mSuggestions.size();
        android.graphics.Rect v9 = this.mBgPadding;
        android.graphics.Paint v8 = this.mPaint;
        int v17 = this.mTouchX;
        int v14 = this.getScrollX();
        boolean v15 = this.mScrolled;
        boolean v18 = this.mTypedWordValid;
        int v21 = (((int) ((((float) v12) + this.mPaint.getTextSize()) - ((float) this.mDescent))) / 2);
        int v11 = 0;
        int v20 = 0;
        int v13 = 0;
        while (v13 < v10) {
            CharSequence v3_1 = ((CharSequence) this.mSuggestions.get(v13));
            if (v3_1 != null) {
                int v5 = v3_1.length();
                v8.setColor(this.mColorNormal);
                if ((!this.mHaveMinimalSuggestion) || (((v13 != 1) || (v18)) && ((v13 != 0) || (!v18)))) {
                    if ((v13 != 0) || ((v5 == 1) && (v10 > 1))) {
                        v8.setColor(this.mColorOther);
                    }
                } else {
                    v8.setTypeface(android.graphics.Typeface.DEFAULT_BOLD);
                    v8.setColor(this.mColorRecommended);
                    v11 = 1;
                }
                int v19 = this.mWordWidth[v13];
                if (v19 == 0) {
                    v19 = Math.max(this.mMinTouchableWidth, (((int) v8.measureText(v3_1, 0, v5)) + 20));
                    this.mWordWidth[v13] = v19;
                }
                this.mWordX[v13] = v20;
                if ((v17 != -1) && ((!v15) && (((v17 + v14) >= v20) && ((v17 + v14) < (v20 + v19))))) {
                    if ((p24 != null) && (!this.mShowingAddToDictionary)) {
                        p24.translate(((float) v20), 0);
                        this.mSelectionHighlight.setBounds(0, v9.top, v19, v12);
                        this.mSelectionHighlight.draw(p24);
                        p24.translate(((float) (- v20)), 0);
                    }
                    this.mSelectedString = v3_1;
                    this.mSelectedIndex = v13;
                }
                if (p24 != null) {
                    p24.drawText(v3_1, 0, v5, ((float) ((v19 / 2) + v20)), ((float) v21), v8);
                    v8.setColor(this.mColorOther);
                    p24.translate(((float) (v20 + v19)), 0);
                    if ((!this.mShowingAddToDictionary) || (v13 != 1)) {
                        this.mDivider.draw(p24);
                    }
                    p24.translate(((float) ((- v20) - v19)), 0);
                }
                v8.setTypeface(android.graphics.Typeface.DEFAULT);
                v20 += v19;
            }
            v13++;
        }
        if (!this.isInEditMode()) {
            this.mService.onAutoCompletionStateChanged(v11);
        }
        this.mTotalWidth = v20;
        if (this.mTargetScrollX != v14) {
            this.scrollToTarget();
        }
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent p10)
    {
        if (!this.mGestureDetector.onTouchEvent(p10)) {
            int v0 = p10.getAction();
            int v2 = ((int) p10.getY());
            this.mTouchX = ((int) p10.getX());
            switch (v0) {
                case 0:
                    this.invalidate();
                    break;
                case 1:
                    if ((!this.mScrolled) && (this.mSelectedString != null)) {
                        if (!this.mShowingAddToDictionary) {
                            // Both branches of the condition point to the same code.
                            // if (this.mShowingCompletions) {
                                this.mService.pickSuggestionManually(this.mSelectedIndex, this.mSelectedString);
                            // }
                        } else {
                            this.longPressFirstWord();
                            this.clear();
                        }
                    }
                    this.mSelectedString = 0;
                    this.mSelectedIndex = -1;
                    this.requestLayout();
                    this.hidePreview();
                    this.invalidate();
                    break;
                case 2:
                    if ((v2 <= 0) && (this.mSelectedString != null)) {
                        // Both branches of the condition point to the same code.
                        // if (this.mShowingCompletions) {
                            this.mService.pickSuggestionManually(this.mSelectedIndex, this.mSelectedString);
                            this.mSelectedString = 0;
                            this.mSelectedIndex = -1;
                        // }
                    }
                    break;
                default:
            }
        }
        return 1;
    }

    public void setService(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.mService = p1;
        return;
    }

    public void setSuggestions(java.util.List p6, boolean p7, boolean p8, boolean p9)
    {
        this.clear();
        if (p6 != null) {
            int v0 = Math.min(p6.size(), 32);
            int v2_3 = p6.iterator();
            while (v2_3.hasNext()) {
                this.mSuggestions.add(((CharSequence) v2_3.next()));
                v0--;
                if (v0 == 0) {
                    break;
                }
            }
        }
        this.mShowingCompletions = p7;
        this.mTypedWordValid = p8;
        this.scrollTo(0, this.getScrollY());
        this.mTargetScrollX = 0;
        this.mHaveMinimalSuggestion = p9;
        this.onDraw(0);
        this.invalidate();
        this.requestLayout();
        return;
    }

    public void showAddToDictionaryHint(CharSequence p4)
    {
        java.util.ArrayList v0_1 = new java.util.ArrayList();
        v0_1.add(p4);
        v0_1.add(this.mAddToDictionaryHint);
        this.setSuggestions(v0_1, 0, 0, 0);
        this.mShowingAddToDictionary = 1;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
final class ComposeSequence$1 extends android.util.SparseArray {

    ComposeSequence$1()
    {
        this.append(34, "quot");
        this.append(65517, "\u2191");
        this.append(65516, "\u2193");
        this.append(65515, "\u2190");
        this.append(65514, "\u2192");
        this.append(65513, "\u25ef");
        this.append(65444, "PgUp");
        this.append(65443, "PgDn");
        this.append(65425, "Esc");
        this.append(65424, "Del");
        this.append(65421, "Caps");
        this.append(65420, "Scroll");
        this.append(65416, "SysRq");
        this.append(65415, "Break");
        this.append(65414, "Home");
        this.append(65413, "End");
        this.append(65412, "Insert");
        this.append(65405, "F1");
        this.append(65404, "F2");
        this.append(65403, "F3");
        this.append(65402, "F4");
        this.append(65401, "F5");
        this.append(65400, "F6");
        this.append(65399, "F7");
        this.append(65398, "F8");
        this.append(65397, "F9");
        this.append(65396, "F10");
        this.append(65395, "F11");
        this.append(65394, "F12");
        this.append(65393, "Num");
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class ComposeSequence {
    protected static final char BREAK = 65415;
    protected static final char CAPS_LOCK = 65421;
    protected static final char COMPOSE = 65513;
    protected static final char DELETE = 65424;
    protected static final char DOWN = 65516;
    protected static final char END = 65413;
    protected static final char ESCAPE = 65425;
    protected static final char F1 = 65405;
    protected static final char F10 = 65396;
    protected static final char F11 = 65395;
    protected static final char F12 = 65394;
    protected static final char F2 = 65404;
    protected static final char F3 = 65403;
    protected static final char F4 = 65402;
    protected static final char F5 = 65401;
    protected static final char F6 = 65400;
    protected static final char F7 = 65399;
    protected static final char F8 = 65398;
    protected static final char F9 = 65397;
    protected static final char HOME = 65414;
    protected static final char INSERT = 65412;
    protected static final char LEFT = 65515;
    protected static final char NUM_LOCK = 65393;
    protected static final char PAGE_DOWN = 65443;
    protected static final char PAGE_UP = 65444;
    protected static final char RIGHT = 65514;
    protected static final char SCROLL_LOCK = 65420;
    protected static final char SYSRQ = 65416;
    private static final String TAG = "HK/ComposeSequence";
    protected static final char UP = 65517;
    private static final android.util.SparseArray keyNames;
    protected static final java.util.Map mMap;
    protected static final java.util.Set mPrefixes;
    protected StringBuilder composeBuffer;
    protected org.pocketworkstation.pckeyboard.ComposeSequencing composeUser;

    static ComposeSequence()
    {
        org.pocketworkstation.pckeyboard.ComposeSequence.mMap = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.ComposeSequence.mPrefixes = new java.util.HashSet();
        org.pocketworkstation.pckeyboard.ComposeSequence.keyNames = new org.pocketworkstation.pckeyboard.ComposeSequence$1();
        org.pocketworkstation.pckeyboard.ComposeSequence.reset();
        return;
    }

    public ComposeSequence(org.pocketworkstation.pckeyboard.ComposeSequencing p3)
    {
        this.composeBuffer = new StringBuilder(10);
        this.init(p3);
        return;
    }

    protected static String format(String p9)
    {
        String v3 = "";
        int v4 = 0;
        int v1 = p9.length();
        int v2 = 0;
        while (v2 < v1) {
            int v0 = p9.charAt(v2);
            if (org.pocketworkstation.pckeyboard.ComposeSequence.keyNames.get(v0) == null) {
                if (v4 == 0) {
                    StringBuilder v5_8;
                    String v6_0 = new StringBuilder().append(v3);
                    if (v3.length() == 0) {
                        v5_8 = "\"";
                    } else {
                        v5_8 = " \"";
                    }
                    v3 = v6_0.append(v5_8).toString();
                }
                if ((v0 >= 32) && ((v0 != 34) && (v0 != 92))) {
                    v3 = new StringBuilder().append(v3).append(v0).toString();
                } else {
                    StringBuilder vtmp16 = new StringBuilder().append(v3).append("\\");
                    if (v0 < 32) {
                        v0 += 64;
                    }
                    v3 = vtmp16.append(v0).toString();
                }
                v4 = 1;
            } else {
                StringBuilder v5_22;
                String v6_2 = new StringBuilder().append(v3);
                if (v4 == 0) {
                    v5_22 = Character.valueOf(32);
                } else {
                    v5_22 = "\" ";
                }
                v3 = v6_2.append(v5_22).append(((String) org.pocketworkstation.pckeyboard.ComposeSequence.keyNames.get(v0))).toString();
                v4 = 0;
            }
            v2++;
        }
        if (v4 != 0) {
            v3 = new StringBuilder().append(v3).append(34).toString();
        }
        return v3;
    }

    protected static String get(String p1)
    {
        if ((p1 != null) && (p1.length() != 0)) {
            String v0_3 = ((String) org.pocketworkstation.pckeyboard.ComposeSequence.mMap.get(p1));
        } else {
            v0_3 = 0;
        }
        return v0_3;
    }

    private static boolean isValid(String p1)
    {
        if ((p1 != null) && (p1.length() != 0)) {
            boolean v0_2 = org.pocketworkstation.pckeyboard.ComposeSequence.mPrefixes.contains(p1);
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    protected static void put(String p6, String p7)
    {
        int v0 = 0;
        if ((p6.length() != 0) && (p7.length() != 0)) {
            if (!org.pocketworkstation.pckeyboard.ComposeSequence.mMap.containsKey(p6)) {
                if (org.pocketworkstation.pckeyboard.ComposeSequence.mPrefixes.contains(p6)) {
                    android.util.Log.w("HK/ComposeSequence", new StringBuilder().append("compose sequence is a subset: ").append(org.pocketworkstation.pckeyboard.ComposeSequence.format(p6)).toString());
                }
            } else {
                android.util.Log.w("HK/ComposeSequence", new StringBuilder().append("compose sequence is a duplicate: ").append(org.pocketworkstation.pckeyboard.ComposeSequence.format(p6)).toString());
            }
            org.pocketworkstation.pckeyboard.ComposeSequence.mMap.put(p6, p7);
            int v1 = 1;
            while (v1 < p6.length()) {
                String v2 = p6.substring(0, v1);
                v0 |= org.pocketworkstation.pckeyboard.ComposeSequence.mMap.containsKey(v2);
                org.pocketworkstation.pckeyboard.ComposeSequence.mPrefixes.add(v2);
                v1++;
            }
            if (v0 != 0) {
                android.util.Log.w("HK/ComposeSequence", new StringBuilder().append("compose sequence is a superset: ").append(org.pocketworkstation.pckeyboard.ComposeSequence.format(p6)).toString());
            }
        }
        return;
    }

    private static void reset()
    {
        org.pocketworkstation.pckeyboard.ComposeSequence.put("++", "#");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\' ", "\'");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" \'", "\'");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("AT", "@");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("((", "[");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("//", "\\");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/<", "\\");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("</", "\\");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("))", "]");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^ ", "^");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" ^", "^");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("> ", "^");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" >", "^");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("` ", "`");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" `", "`");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(", ", "\u00b8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" ,", "\u00b8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(-", "{");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-(", "{");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/^", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^/", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("VL", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("LV", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("vl", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("lv", "|");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(")-", "}");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-)", "}");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~ ", "~");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" ~", "~");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("- ", "~");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" -", "~");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("  ", "\u00a0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(" .", "\u2008");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oc", "\u00a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oC", "\u00a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Oc", "\u00a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("OC", "\u00a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("or", "\u00ae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oR", "\u00ae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Or", "\u00ae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("OR", "\u00ae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".>", "\u203a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".<", "\u2039");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("..", "\u2026");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".-", "\u00b7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".=", "\u2022");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!^", "\u00a6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!!", "\u00a1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("p!", "\u00b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("P!", "\u00b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+-", "\u00b1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("??", "\u00bf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-d", "\u0111");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-D", "\u0110");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ss", "\u00df");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("SS", "\u1e9e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oe", "\u0153");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("OE", "\u0152");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ae", "\u00e6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("AE", "\u00c6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oo", "\u00b0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\\", "\u301d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"/", "\u301e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<<", "\u00ab");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(">>", "\u00bb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<\'", "\u2018");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'<", "\u2018");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(">\'", "\u2019");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'>", "\u2019");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",\'", "\u201a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\',", "\u201a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<\"", "\u201c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"<", "\u201c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(">\"", "\u201d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\">", "\u201d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",\"", "\u201e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\",", "\u201e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("%o", "\u2030");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("CE", "\u20a0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("C/", "\u20a1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/C", "\u20a1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Cr", "\u20a2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Fr", "\u20a3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("L=", "\u20a4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=L", "\u20a4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("m/", "\u20a5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/m", "\u20a5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("N=", "\u20a6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=N", "\u20a6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Pt", "\u20a7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Rs", "\u20a8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("W=", "\u20a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=W", "\u20a9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("d-", "\u20ab");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("C=", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=C", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c=", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=c", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("E=", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=E", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("e=", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=e", "\u20ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("|c", "\u00a2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c|", "\u00a2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c/", "\u00a2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/c", "\u00a2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("L-", "\u00a3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-L", "\u00a3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Y=", "\u00a5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=Y", "\u00a5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("fs", "\u017f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("fS", "\u017f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("--.", "\u2013");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("---", "\u2014");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("#b", "\u266d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("#f", "\u266e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("##", "\u266f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("so", "\u00a7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("os", "\u00a7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ox", "\u00a4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("xo", "\u00a4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("PP", "\u00b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("No", "\u2116");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("NO", "\u2116");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?!", "\u2e18");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!?", "\u203d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("CCCP", "\u262d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("OA", "\u24b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<3", "\u2665");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(":)", "\u263a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(":(", "\u2639");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",-", "\u00ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-,", "\u00ac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_a", "\u00aa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^2", "\u00b2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^3", "\u00b3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("mu", "\u00b5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^1", "\u00b9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_o", "\u00ba");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("14", "\u00bc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("12", "\u00bd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("34", "\u00be");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`A", "\u00c0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'A", "\u00c1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^A", "\u00c2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~A", "\u00c3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"A", "\u00c4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oA", "\u00c5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",C", "\u00c7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`E", "\u00c8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'E", "\u00c9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^E", "\u00ca");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"E", "\u00cb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`I", "\u00cc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'I", "\u00cd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^I", "\u00ce");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"I", "\u00cf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("DH", "\u00d0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~N", "\u00d1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`O", "\u00d2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'O", "\u00d3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^O", "\u00d4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~O", "\u00d5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"O", "\u00d6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("xx", "\u00d7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/O", "\u00d8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`U", "\u00d9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'U", "\u00da");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^U", "\u00db");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"U", "\u00dc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'Y", "\u00dd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("TH", "\u00de");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`a", "\u00e0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'a", "\u00e1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^a", "\u00e2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~a", "\u00e3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"a", "\u00e4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oa", "\u00e5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",c", "\u00e7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`e", "\u00e8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'e", "\u00e9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^e", "\u00ea");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"e", "\u00eb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`i", "\u00ec");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'i", "\u00ed");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^i", "\u00ee");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"i", "\u00ef");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("dh", "\u00f0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~n", "\u00f1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`o", "\u00f2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'o", "\u00f3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^o", "\u00f4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~o", "\u00f5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"o", "\u00f6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(":-", "\u00f7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("-:", "\u00f7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/o", "\u00f8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`u", "\u00f9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'u", "\u00fa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^u", "\u00fb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"u", "\u00fc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'y", "\u00fd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("th", "\u00fe");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"y", "\u00ff");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_A", "\u0100");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_a", "\u0101");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UA", "\u0102");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bA", "\u0102");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Ua", "\u0103");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ba", "\u0103");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";A", "\u0104");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",A", "\u0104");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";a", "\u0105");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",a", "\u0105");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'C", "\u0106");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'c", "\u0107");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^C", "\u0108");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^c", "\u0109");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".C", "\u010a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".c", "\u010b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cC", "\u010c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cc", "\u010d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cD", "\u010e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cd", "\u010f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/D", "\u0110");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/d", "\u0111");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_E", "\u0112");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_e", "\u0113");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UE", "\u0114");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bE", "\u0114");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Ue", "\u0115");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("be", "\u0115");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".E", "\u0116");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".e", "\u0117");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";E", "\u0118");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",E", "\u0118");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";e", "\u0119");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",e", "\u0119");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cE", "\u011a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ce", "\u011b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+f", "\ufb00");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("f+", "\ufb00");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("fi", "\ufb01");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("fl", "\ufb02");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ffi", "\ufb03");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ffl", "\ufb04");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^G", "\u011c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^g", "\u011d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UG", "\u011e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bG", "\u011e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Ug", "\u011f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bg", "\u011f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".G", "\u0120");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".g", "\u0121");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",G", "\u0122");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",g", "\u0123");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^H", "\u0124");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^h", "\u0125");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/H", "\u0126");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/h", "\u0127");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~I", "\u0128");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~i", "\u0129");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_I", "\u012a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_i", "\u012b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UI", "\u012c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bI", "\u012c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Ui", "\u012d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bi", "\u012d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";I", "\u012e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",I", "\u012e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";i", "\u012f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",i", "\u012f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".I", "\u0130");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("i.", "\u0131");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^J", "\u0134");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^j", "\u0135");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",K", "\u0136");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",k", "\u0137");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("kk", "\u0138");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'L", "\u0139");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'l", "\u013a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",L", "\u013b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",l", "\u013c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cL", "\u013d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cl", "\u013e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/L", "\u0141");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/l", "\u0142");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'N", "\u0143");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'n", "\u0144");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",N", "\u0145");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",n", "\u0146");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cN", "\u0147");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cn", "\u0148");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("NG", "\u014a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ng", "\u014b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_O", "\u014c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_o", "\u014d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UO", "\u014e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bO", "\u014e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Uo", "\u014f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bo", "\u014f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=O", "\u0150");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=o", "\u0151");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'R", "\u0154");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'r", "\u0155");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",R", "\u0156");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",r", "\u0157");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cR", "\u0158");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cr", "\u0159");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'S", "\u015a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'s", "\u015b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^S", "\u015c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^s", "\u015d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",S", "\u015e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",s", "\u015f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cS", "\u0160");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cs", "\u0161");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",T", "\u0162");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",t", "\u0163");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cT", "\u0164");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ct", "\u0165");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/T", "\u0166");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/t", "\u0167");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~U", "\u0168");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~u", "\u0169");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_U", "\u016a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_u", "\u016b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("UU", "\u016c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bU", "\u016c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Uu", "\u016d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("uu", "\u016d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("bu", "\u016d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oU", "\u016e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ou", "\u016f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=U", "\u0170");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=u", "\u0171");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";U", "\u0172");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",U", "\u0172");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";u", "\u0173");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",u", "\u0173");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^W", "\u0174");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^w", "\u0175");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^Y", "\u0176");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^y", "\u0177");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"Y", "\u0178");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'Z", "\u0179");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'z", "\u017a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".Z", "\u017b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".z", "\u017c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cZ", "\u017d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cz", "\u017e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/b", "\u0180");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/I", "\u0197");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+O", "\u01a0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+o", "\u01a1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+U", "\u01af");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("+u", "\u01b0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/Z", "\u01b5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/z", "\u01b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cA", "\u01cd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ca", "\u01ce");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cI", "\u01cf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ci", "\u01d0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cO", "\u01d1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("co", "\u01d2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cU", "\u01d3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cu", "\u01d4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00dc", "\u01d5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"U", "\u01d5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00fc", "\u01d6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"u", "\u01d6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00dc", "\u01d7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\"U", "\u01d7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00fc", "\u01d8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\"u", "\u01d8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c\u00dc", "\u01d9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c\"U", "\u01d9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c\u00fc", "\u01da");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("c\"u", "\u01da");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00dc", "\u01db");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\"U", "\u01db");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00fc", "\u01dc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\"u", "\u01dc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00c4", "\u01de");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"A", "\u01de");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00e4", "\u01df");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"a", "\u01df");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_.A", "\u01e0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_.a", "\u01e1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00c6", "\u01e2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00e6", "\u01e3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/G", "\u01e4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/g", "\u01e5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cG", "\u01e6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cg", "\u01e7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cK", "\u01e8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ck", "\u01e9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";O", "\u01ea");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(";o", "\u01eb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_;O", "\u01ec");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_;o", "\u01ed");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cj", "\u01f0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'G", "\u01f4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'g", "\u01f5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`N", "\u01f8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`n", "\u01f9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00c5", "\u01fa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("o\'A", "\u01fa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00e5", "\u01fb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("o\'a", "\u01fb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00c6", "\u01fc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00e6", "\u01fd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00d8", "\u01fe");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'/O", "\u01fe");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00f8", "\u01ff");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'/o", "\u01ff");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("cH", "\u021e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ch", "\u021f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".A", "\u0226");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".a", "\u0227");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00d6", "\u022a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"O", "\u022a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00f6", "\u022b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\"o", "\u022b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00d5", "\u022c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_~O", "\u022c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_\u00f5", "\u022d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_~o", "\u022d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".O", "\u022e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".o", "\u022f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_.O", "\u0230");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_.o", "\u0231");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_Y", "\u0232");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_y", "\u0233");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ee", "\u0259");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/i", "\u0268");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_h", "\u02b0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_j", "\u02b2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_r", "\u02b3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_w", "\u02b7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_y", "\u02b8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_l", "\u02e1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_s", "\u02e2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_x", "\u02e3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\'", "\u0344");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".B", "\u1e02");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".b", "\u1e03");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!B", "\u1e04");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!b", "\u1e05");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00c7", "\u1e08");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00e7", "\u1e09");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".D", "\u1e0a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".d", "\u1e0b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!D", "\u1e0c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!d", "\u1e0d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",D", "\u1e10");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",d", "\u1e11");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u0112", "\u1e14");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`_E", "\u1e14");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u0113", "\u1e15");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`_e", "\u1e15");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0112", "\u1e16");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'_E", "\u1e16");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0113", "\u1e17");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'_e", "\u1e17");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("U,E", "\u1e1c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("b,E", "\u1e1c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("U,e", "\u1e1d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("b,e", "\u1e1d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".F", "\u1e1e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".f", "\u1e1f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_G", "\u1e20");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_g", "\u1e21");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".H", "\u1e22");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".h", "\u1e23");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!H", "\u1e24");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!h", "\u1e25");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"H", "\u1e26");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"h", "\u1e27");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",H", "\u1e28");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(",h", "\u1e29");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00cf", "\u1e2e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\"I", "\u1e2e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00ef", "\u1e2f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\"i", "\u1e2f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'K", "\u1e30");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'k", "\u1e31");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!K", "\u1e32");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!k", "\u1e33");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!L", "\u1e36");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!l", "\u1e37");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_!L", "\u1e38");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_!l", "\u1e39");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'M", "\u1e3e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'m", "\u1e3f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".M", "\u1e40");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".m", "\u1e41");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!M", "\u1e42");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!m", "\u1e43");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".N", "\u1e44");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".n", "\u1e45");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!N", "\u1e46");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!n", "\u1e47");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00d5", "\u1e4c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'~O", "\u1e4c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00f5", "\u1e4d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'~o", "\u1e4d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\u00d5", "\u1e4e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"~O", "\u1e4e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\u00f5", "\u1e4f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"~o", "\u1e4f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u014c", "\u1e50");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`_O", "\u1e50");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u014d", "\u1e51");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`_o", "\u1e51");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u014c", "\u1e52");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'_O", "\u1e52");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u014d", "\u1e53");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'_o", "\u1e53");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'P", "\u1e54");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'p", "\u1e55");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".P", "\u1e56");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".p", "\u1e57");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".R", "\u1e58");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".r", "\u1e59");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!R", "\u1e5a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!r", "\u1e5b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_!R", "\u1e5c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_!r", "\u1e5d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".S", "\u1e60");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".s", "\u1e61");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!S", "\u1e62");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!s", "\u1e63");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\u015a", "\u1e64");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\'S", "\u1e64");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\u015b", "\u1e65");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\'s", "\u1e65");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\u0160", "\u1e66");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".\u0161", "\u1e67");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".!S", "\u1e68");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".!s", "\u1e69");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".T", "\u1e6a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".t", "\u1e6b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!T", "\u1e6c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!t", "\u1e6d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0168", "\u1e78");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'~U", "\u1e78");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0169", "\u1e79");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'~u", "\u1e79");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\u016a", "\u1e7a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"_U", "\u1e7a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"\u016b", "\u1e7b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"_u", "\u1e7b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~V", "\u1e7c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~v", "\u1e7d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!V", "\u1e7e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!v", "\u1e7f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`W", "\u1e80");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`w", "\u1e81");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'W", "\u1e82");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'w", "\u1e83");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"W", "\u1e84");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"w", "\u1e85");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".W", "\u1e86");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".w", "\u1e87");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!W", "\u1e88");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!w", "\u1e89");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".X", "\u1e8a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".x", "\u1e8b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"X", "\u1e8c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"x", "\u1e8d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".Y", "\u1e8e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(".y", "\u1e8f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^Z", "\u1e90");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^z", "\u1e91");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!Z", "\u1e92");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!z", "\u1e93");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\"t", "\u1e97");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("ow", "\u1e98");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("oy", "\u1e99");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!A", "\u1ea0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!a", "\u1ea1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?A", "\u1ea2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?a", "\u1ea3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00c2", "\u1ea4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^A", "\u1ea4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00e2", "\u1ea5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^a", "\u1ea5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00c2", "\u1ea6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^A", "\u1ea6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00e2", "\u1ea7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^a", "\u1ea7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00c2", "\u1ea8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^A", "\u1ea8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00e2", "\u1ea9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^a", "\u1ea9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00c2", "\u1eaa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^A", "\u1eaa");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00e2", "\u1eab");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^a", "\u1eab");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!A", "\u1eac");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!a", "\u1ead");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0102", "\u1eae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'bA", "\u1eae");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u0103", "\u1eaf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'ba", "\u1eaf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u0102", "\u1eb0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`bA", "\u1eb0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u0103", "\u1eb1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`ba", "\u1eb1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u0102", "\u1eb2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?bA", "\u1eb2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u0103", "\u1eb3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?ba", "\u1eb3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u0102", "\u1eb4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~bA", "\u1eb4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u0103", "\u1eb5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~ba", "\u1eb5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("U!A", "\u1eb6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("b!A", "\u1eb6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("U!a", "\u1eb7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("b!a", "\u1eb7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!E", "\u1eb8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!e", "\u1eb9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?E", "\u1eba");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?e", "\u1ebb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~E", "\u1ebc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~e", "\u1ebd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00ca", "\u1ebe");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^E", "\u1ebe");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00ea", "\u1ebf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^e", "\u1ebf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00ca", "\u1ec0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^E", "\u1ec0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00ea", "\u1ec1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^e", "\u1ec1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00ca", "\u1ec2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^E", "\u1ec2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00ea", "\u1ec3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^e", "\u1ec3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00ca", "\u1ec4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^E", "\u1ec4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00ea", "\u1ec5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^e", "\u1ec5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!E", "\u1ec6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!e", "\u1ec7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?I", "\u1ec8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?i", "\u1ec9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!I", "\u1eca");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!i", "\u1ecb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!O", "\u1ecc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!o", "\u1ecd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?O", "\u1ece");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?o", "\u1ecf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00d4", "\u1ed0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^O", "\u1ed0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u00f4", "\u1ed1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'^o", "\u1ed1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00d4", "\u1ed2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^O", "\u1ed2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u00f4", "\u1ed3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`^o", "\u1ed3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00d4", "\u1ed4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^O", "\u1ed4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u00f4", "\u1ed5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?^o", "\u1ed5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00d4", "\u1ed6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^O", "\u1ed6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u00f4", "\u1ed7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~^o", "\u1ed7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!O", "\u1ed8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^!o", "\u1ed9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u01a0", "\u1eda");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'+O", "\u1eda");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u01a1", "\u1edb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'+o", "\u1edb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u01a0", "\u1edc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`+O", "\u1edc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u01a1", "\u1edd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`+o", "\u1edd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u01a0", "\u1ede");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?+O", "\u1ede");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u01a1", "\u1edf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?+o", "\u1edf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u01a0", "\u1ee0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~+O", "\u1ee0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u01a1", "\u1ee1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~+o", "\u1ee1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!\u01a0", "\u1ee2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!+O", "\u1ee2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!\u01a1", "\u1ee3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!+o", "\u1ee3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!U", "\u1ee4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!u", "\u1ee5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?U", "\u1ee6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?u", "\u1ee7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u01af", "\u1ee8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'+U", "\u1ee8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'\u01b0", "\u1ee9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\'+u", "\u1ee9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u01af", "\u1eea");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`+U", "\u1eea");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`\u01b0", "\u1eeb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`+u", "\u1eeb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u01af", "\u1eec");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?+U", "\u1eec");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?\u01b0", "\u1eed");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?+u", "\u1eed");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u01af", "\u1eee");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~+U", "\u1eee");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~\u01b0", "\u1eef");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~+u", "\u1eef");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!\u01af", "\u1ef0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!+U", "\u1ef0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!\u01b0", "\u1ef1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!+u", "\u1ef1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`Y", "\u1ef2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("`y", "\u1ef3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!Y", "\u1ef4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("!y", "\u1ef5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?Y", "\u1ef6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("?y", "\u1ef7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~Y", "\u1ef8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("~y", "\u1ef9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^0", "\u2070");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_i", "\u2071");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^4", "\u2074");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^5", "\u2075");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^6", "\u2076");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^7", "\u2077");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^8", "\u2078");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^9", "\u2079");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^+", "\u207a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^=", "\u207c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^(", "\u207d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^)", "\u207e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("^_n", "\u207f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_0", "\u2080");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_1", "\u2081");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_2", "\u2082");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_3", "\u2083");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_4", "\u2084");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_5", "\u2085");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_6", "\u2086");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_7", "\u2087");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_8", "\u2088");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_9", "\u2089");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_+", "\u208a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_=", "\u208c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_(", "\u208d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("_)", "\u208e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("SM", "\u2120");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("sM", "\u2120");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Sm", "\u2120");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("sm", "\u2120");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("TM", "\u2122");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("tM", "\u2122");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("Tm", "\u2122");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("tm", "\u2122");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("13", "\u2153");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("23", "\u2154");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("15", "\u2155");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("25", "\u2156");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("35", "\u2157");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("45", "\u2158");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("16", "\u2159");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("56", "\u215a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("18", "\u215b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("38", "\u215c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("58", "\u215d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("78", "\u215e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/\u2190", "\u219a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/\u2192", "\u219b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<-", "\u2190");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("->", "\u2192");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("/=", "\u2260");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("=/", "\u2260");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("<=", "\u2264");
        org.pocketworkstation.pckeyboard.ComposeSequence.put(">=", "\u2265");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(1)", "\u2460");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(2)", "\u2461");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(3)", "\u2462");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(4)", "\u2463");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(5)", "\u2464");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(6)", "\u2465");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(7)", "\u2466");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(8)", "\u2467");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(9)", "\u2468");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(10)", "\u2469");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(11)", "\u246a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(12)", "\u246b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(13)", "\u246c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(14)", "\u246d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(15)", "\u246e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(16)", "\u246f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(17)", "\u2470");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(18)", "\u2471");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(19)", "\u2472");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(20)", "\u2473");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(A)", "\u24b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(B)", "\u24b7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(C)", "\u24b8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(D)", "\u24b9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(E)", "\u24ba");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(F)", "\u24bb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(G)", "\u24bc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(H)", "\u24bd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(I)", "\u24be");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(J)", "\u24bf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(K)", "\u24c0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(L)", "\u24c1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(M)", "\u24c2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(N)", "\u24c3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(O)", "\u24c4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(P)", "\u24c5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(Q)", "\u24c6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(R)", "\u24c7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(S)", "\u24c8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(T)", "\u24c9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(U)", "\u24ca");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(V)", "\u24cb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(W)", "\u24cc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(X)", "\u24cd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(Y)", "\u24ce");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(Z)", "\u24cf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(a)", "\u24d0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(b)", "\u24d1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(c)", "\u24d2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(d)", "\u24d3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(e)", "\u24d4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(f)", "\u24d5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(g)", "\u24d6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(h)", "\u24d7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(i)", "\u24d8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(j)", "\u24d9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(k)", "\u24da");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(l)", "\u24db");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(m)", "\u24dc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(n)", "\u24dd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(o)", "\u24de");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(p)", "\u24df");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(q)", "\u24e0");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(r)", "\u24e1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(s)", "\u24e2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(t)", "\u24e3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(u)", "\u24e4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(v)", "\u24e5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(w)", "\u24e6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(x)", "\u24e7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(y)", "\u24e8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(z)", "\u24e9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(0)", "\u24ea");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(21)", "\u3251");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(22)", "\u3252");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(23)", "\u3253");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(24)", "\u3254");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(25)", "\u3255");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(26)", "\u3256");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(27)", "\u3257");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(28)", "\u3258");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(29)", "\u3259");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(30)", "\u325a");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(31)", "\u325b");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(32)", "\u325c");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(33)", "\u325d");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(34)", "\u325e");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(35)", "\u325f");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(36)", "\u32b1");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(37)", "\u32b2");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(38)", "\u32b3");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(39)", "\u32b4");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(40)", "\u32b5");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(41)", "\u32b6");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(42)", "\u32b7");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(43)", "\u32b8");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(44)", "\u32b9");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(45)", "\u32ba");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(46)", "\u32bb");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(47)", "\u32bc");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(48)", "\u32bd");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(49)", "\u32be");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("(50)", "\u32bf");
        org.pocketworkstation.pckeyboard.ComposeSequence.put("\\o/", "\u1f64c");
        return;
    }

    private static String showString(String p3)
    {
        StringBuilder v1_1 = new StringBuilder(p3);
        v1_1.append("{");
        int v0 = 0;
        while (v0 < p3.length()) {
            if (v0 > 0) {
                v1_1.append(",");
            }
            v1_1.append(p3.charAt(v0));
            v0++;
        }
        v1_1.append("}");
        return v1_1.toString();
    }

    public void bufferKey(char p2)
    {
        this.composeBuffer.append(p2);
        return;
    }

    public void clear()
    {
        this.composeBuffer.setLength(0);
        return;
    }

    public boolean execute(int p3)
    {
        int v1_0;
        String v0 = this.executeToString(p3);
        if (v0 == null) {
            v1_0 = 1;
        } else {
            this.clear();
            this.composeUser.onText(v0);
            v1_0 = 0;
        }
        return v1_0;
    }

    public boolean execute(CharSequence p5)
    {
        int v1 = p5.length();
        boolean v2 = 1;
        int v0 = 0;
        while (v0 < v1) {
            v2 = this.execute(p5.charAt(v0));
            v0++;
        }
        return v2;
    }

    public String executeToString(int p5)
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher v1 = org.pocketworkstation.pckeyboard.KeyboardSwitcher.getInstance();
        if ((v1.getInputView().isShiftCaps()) && ((v1.isAlphabetMode()) && (Character.isLowerCase(p5)))) {
            p5 = Character.toUpperCase(p5);
        }
        this.bufferKey(((char) p5));
        this.composeUser.updateShiftKeyState(this.composeUser.getCurrentInputEditorInfo());
        int v0 = org.pocketworkstation.pckeyboard.ComposeSequence.get(this.composeBuffer.toString());
        if (v0 == 0) {
            if (org.pocketworkstation.pckeyboard.ComposeSequence.isValid(this.composeBuffer.toString())) {
                v0 = 0;
            } else {
                v0 = "";
            }
        }
        return v0;
    }

    protected void init(org.pocketworkstation.pckeyboard.ComposeSequencing p1)
    {
        this.clear();
        this.composeUser = p1;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
interface ComposeSequencing {

    public abstract android.view.inputmethod.EditorInfo getCurrentInputEditorInfo();

    public abstract void onText();

    public abstract void updateShiftKeyState();
}
package org.pocketworkstation.pckeyboard;
 class ContactsDictionary$1 extends android.database.ContentObserver {
    final synthetic org.pocketworkstation.pckeyboard.ContactsDictionary this$0;

    ContactsDictionary$1(org.pocketworkstation.pckeyboard.ContactsDictionary p1, android.os.Handler p2)
    {
        this.this$0 = p1;
        super(p2);
        return;
    }

    public void onChange(boolean p3)
    {
        this.this$0.setRequiresReload(1);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final enum class Dictionary$DataType extends java.lang.Enum {
    private static final synthetic org.pocketworkstation.pckeyboard.Dictionary$DataType[] $VALUES;
    public static final enum org.pocketworkstation.pckeyboard.Dictionary$DataType BIGRAM;
    public static final enum org.pocketworkstation.pckeyboard.Dictionary$DataType UNIGRAM;

    static Dictionary$DataType()
    {
        org.pocketworkstation.pckeyboard.Dictionary$DataType.UNIGRAM = new org.pocketworkstation.pckeyboard.Dictionary$DataType("UNIGRAM", 0);
        org.pocketworkstation.pckeyboard.Dictionary$DataType.BIGRAM = new org.pocketworkstation.pckeyboard.Dictionary$DataType("BIGRAM", 1);
        org.pocketworkstation.pckeyboard.Dictionary$DataType[] v0_1 = new org.pocketworkstation.pckeyboard.Dictionary$DataType[2];
        v0_1[0] = org.pocketworkstation.pckeyboard.Dictionary$DataType.UNIGRAM;
        v0_1[1] = org.pocketworkstation.pckeyboard.Dictionary$DataType.BIGRAM;
        org.pocketworkstation.pckeyboard.Dictionary$DataType.$VALUES = v0_1;
        return;
    }

    private Dictionary$DataType(String p1, int p2)
    {
        super(p1, p2);
        return;
    }

    public static org.pocketworkstation.pckeyboard.Dictionary$DataType valueOf(String p1)
    {
        return ((org.pocketworkstation.pckeyboard.Dictionary$DataType) Enum.valueOf(org.pocketworkstation.pckeyboard.Dictionary$DataType, p1));
    }

    public static org.pocketworkstation.pckeyboard.Dictionary$DataType[] values()
    {
        return ((org.pocketworkstation.pckeyboard.Dictionary$DataType[]) org.pocketworkstation.pckeyboard.Dictionary$DataType.$VALUES.clone());
    }
}
package org.pocketworkstation.pckeyboard;
public interface Dictionary$WordCallback {

    public abstract boolean addWord();
}
package org.pocketworkstation.pckeyboard;
public abstract class Dictionary {
    protected static final int FULL_WORD_FREQ_MULTIPLIER = 2;
    protected static final boolean INCLUDE_TYPED_WORD_IF_VALID;

    public Dictionary()
    {
        return;
    }

    public void close()
    {
        return;
    }

    public void getBigrams(org.pocketworkstation.pckeyboard.WordComposer p1, CharSequence p2, org.pocketworkstation.pckeyboard.Dictionary$WordCallback p3, int[] p4)
    {
        return;
    }

    public abstract void getWords();

    public abstract boolean isValidWord();

    protected boolean same(char[] p5, int p6, CharSequence p7)
    {
        int v1 = 0;
        if (p7.length() == p6) {
            int v0 = 0;
            while (v0 < p6) {
                if (p5[v0] == p7.charAt(v0)) {
                    v0++;
                }
            }
            v1 = 1;
        }
        return v1;
    }
}
package org.pocketworkstation.pckeyboard;
public class EditingUtil$Range {
    public int charsAfter;
    public int charsBefore;
    public String word;

    public EditingUtil$Range()
    {
        return;
    }

    public EditingUtil$Range(int p2, int p3, String p4)
    {
        if ((p2 >= 0) && (p3 >= 0)) {
            this.charsBefore = p2;
            this.charsAfter = p3;
            this.word = p4;
            return;
        } else {
            throw new IndexOutOfBoundsException();
        }
    }
}
package org.pocketworkstation.pckeyboard;
public class EditingUtil$SelectedWord {
    public int end;
    public int start;
    public CharSequence word;

    public EditingUtil$SelectedWord()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class EditingUtil {
    private static final int LOOKBACK_CHARACTER_NUM = 15;
    private static reflect.Method sMethodGetSelectedText;
    private static reflect.Method sMethodSetComposingRegion;
    private static boolean sMethodsInitialized;
    private static final java.util.regex.Pattern spaceRegex;

    static EditingUtil()
    {
        org.pocketworkstation.pckeyboard.EditingUtil.spaceRegex = java.util.regex.Pattern.compile("\\s+");
        return;
    }

    private EditingUtil()
    {
        return;
    }

    public static void appendText(android.view.inputmethod.InputConnection p4, String p5)
    {
        if (p4 != null) {
            p4.finishComposingText();
            CharSequence v0 = p4.getTextBeforeCursor(1, 0);
            if ((v0 != null) && ((!v0.equals(" ")) && (v0.length() > 0))) {
                p5 = new StringBuilder().append(" ").append(p5).toString();
            }
            p4.setComposingText(p5, 1);
        }
        return;
    }

    public static void deleteWordAtCursor(android.view.inputmethod.InputConnection p5, String p6)
    {
        org.pocketworkstation.pckeyboard.EditingUtil$Range v1 = org.pocketworkstation.pckeyboard.EditingUtil.getWordRangeAtCursor(p5, p6, 0);
        if (v1 != null) {
            p5.finishComposingText();
            p5.setSelection((org.pocketworkstation.pckeyboard.EditingUtil.getCursorPosition(p5) - v1.charsBefore), (org.pocketworkstation.pckeyboard.EditingUtil.getCursorPosition(p5) - v1.charsBefore));
            p5.deleteSurroundingText(0, (v1.charsBefore + v1.charsAfter));
        }
        return;
    }

    private static int getCursorPosition(android.view.inputmethod.InputConnection p3)
    {
        int v1_3;
        android.view.inputmethod.ExtractedText v0 = p3.getExtractedText(new android.view.inputmethod.ExtractedTextRequest(), 0);
        if (v0 != null) {
            v1_3 = (v0.startOffset + v0.selectionStart);
        } else {
            v1_3 = -1;
        }
        return v1_3;
    }

    public static CharSequence getPreviousWord(android.view.inputmethod.InputConnection p6, String p7)
    {
        String v3_0 = 0;
        CharSequence v1 = p6.getTextBeforeCursor(15, 0);
        if (v1 != null) {
            String[] v2 = org.pocketworkstation.pckeyboard.EditingUtil.spaceRegex.split(v1);
            if ((v2.length >= 2) && ((v2[(v2.length - 2)].length() > 0) && (!p7.contains(String.valueOf(v2[(v2.length - 2)].charAt((v2[(v2.length - 2)].length() - 1))))))) {
                v3_0 = v2[(v2.length - 2)];
            }
        }
        return v3_0;
    }

    private static CharSequence getSelectedText(android.view.inputmethod.InputConnection p7, int p8, int p9)
    {
        if (!org.pocketworkstation.pckeyboard.EditingUtil.sMethodsInitialized) {
            org.pocketworkstation.pckeyboard.EditingUtil.initializeMethodsForReflection();
        }
        CharSequence v1;
        if (org.pocketworkstation.pckeyboard.EditingUtil.sMethodGetSelectedText == null) {
            p7.setSelection(p8, p9);
            CharSequence v0_2 = p7.getTextAfterCursor((p9 - p8), 0);
            p7.setSelection(p8, p9);
            v1 = v0_2;
        } else {
            try {
                Object[] v3_1 = new Object[1];
                v3_1[0] = Integer.valueOf(0);
                v1 = ((CharSequence) org.pocketworkstation.pckeyboard.EditingUtil.sMethodGetSelectedText.invoke(p7, v3_1));
            } catch (IllegalAccessException v2) {
            } catch (IllegalAccessException v2) {
            } catch (IllegalAccessException v2) {
            }
        }
        return v1;
    }

    public static String getWordAtCursor(android.view.inputmethod.InputConnection p2, String p3, org.pocketworkstation.pckeyboard.EditingUtil$Range p4)
    {
        String v1;
        org.pocketworkstation.pckeyboard.EditingUtil$Range v0 = org.pocketworkstation.pckeyboard.EditingUtil.getWordRangeAtCursor(p2, p3, p4);
        if (v0 != null) {
            v1 = v0.word;
        } else {
            v1 = 0;
        }
        return v1;
    }

    public static org.pocketworkstation.pckeyboard.EditingUtil$SelectedWord getWordAtCursorOrSelection(android.view.inputmethod.InputConnection p10, int p11, int p12, String p13)
    {
        org.pocketworkstation.pckeyboard.EditingUtil$SelectedWord v5_0 = 0;
        if (p11 != p12) {
            if ((org.pocketworkstation.pckeyboard.EditingUtil.isWordBoundary(p10.getTextBeforeCursor(1, 0), p13)) && (org.pocketworkstation.pckeyboard.EditingUtil.isWordBoundary(p10.getTextAfterCursor(1, 0), p13))) {
                CharSequence v6_0 = org.pocketworkstation.pckeyboard.EditingUtil.getSelectedText(p10, p11, p12);
                if (!android.text.TextUtils.isEmpty(v6_0)) {
                    int v3 = v6_0.length();
                    int v2 = 0;
                    while (v2 < v3) {
                        if (!p13.contains(v6_0.subSequence(v2, (v2 + 1)))) {
                            v2++;
                        }
                    }
                    v5_0 = new org.pocketworkstation.pckeyboard.EditingUtil$SelectedWord();
                    v5_0.start = p11;
                    v5_0.end = p12;
                    v5_0.word = v6_0;
                }
            }
        } else {
            org.pocketworkstation.pckeyboard.EditingUtil$Range v4_1 = new org.pocketworkstation.pckeyboard.EditingUtil$Range();
            CharSequence v6_1 = org.pocketworkstation.pckeyboard.EditingUtil.getWordAtCursor(p10, p13, v4_1);
            if (!android.text.TextUtils.isEmpty(v6_1)) {
                v5_0 = new org.pocketworkstation.pckeyboard.EditingUtil$SelectedWord();
                v5_0.word = v6_1;
                v5_0.start = (p11 - v4_1.charsBefore);
                v5_0.end = (v4_1.charsAfter + p12);
            }
        }
        return v5_0;
    }

    private static org.pocketworkstation.pckeyboard.EditingUtil$Range getWordRangeAtCursor(android.view.inputmethod.InputConnection p11, String p12, org.pocketworkstation.pckeyboard.EditingUtil$Range p13)
    {
        org.pocketworkstation.pckeyboard.EditingUtil$Range v4_0 = 0;
        if ((p11 != null) && (p12 != null)) {
            CharSequence v1 = p11.getTextBeforeCursor(1000, 0);
            CharSequence v0 = p11.getTextAfterCursor(1000, 0);
            if ((v1 != null) && (v0 != null)) {
                int v5 = v1.length();
                while ((v5 > 0) && (!org.pocketworkstation.pckeyboard.EditingUtil.isWhitespace(v1.charAt((v5 - 1)), p12))) {
                    v5--;
                }
                int v3 = -1;
                do {
                    v3++;
                } while((v3 < v0.length()) && (!org.pocketworkstation.pckeyboard.EditingUtil.isWhitespace(v0.charAt(v3), p12)));
                int v2 = org.pocketworkstation.pckeyboard.EditingUtil.getCursorPosition(p11);
                if ((v5 >= 0) && ((v2 + v3) <= (v0.length() + v1.length()))) {
                    String v6 = new StringBuilder().append(v1.toString().substring(v5, v1.length())).append(v0.toString().substring(0, v3)).toString();
                    if (p13 == null) {
                        v4_0 = new org.pocketworkstation.pckeyboard.EditingUtil$Range();
                    } else {
                        v4_0 = p13;
                    }
                    v4_0.charsBefore = (v1.length() - v5);
                    v4_0.charsAfter = v3;
                    v4_0.word = v6;
                }
            }
        }
        return v4_0;
    }

    private static void initializeMethodsForReflection()
    {
        try {
            Class[] v2_3 = new Class[1];
            v2_3[0] = Integer.TYPE;
            org.pocketworkstation.pckeyboard.EditingUtil.sMethodGetSelectedText = android.view.inputmethod.InputConnection.getMethod("getSelectedText", v2_3);
            Class[] v2_1 = new Class[2];
            v2_1[0] = Integer.TYPE;
            v2_1[1] = Integer.TYPE;
            org.pocketworkstation.pckeyboard.EditingUtil.sMethodSetComposingRegion = android.view.inputmethod.InputConnection.getMethod("setComposingRegion", v2_1);
        } catch (NoSuchMethodException v0) {
        }
        org.pocketworkstation.pckeyboard.EditingUtil.sMethodsInitialized = 1;
        return;
    }

    private static boolean isWhitespace(int p1, String p2)
    {
        return p2.contains(String.valueOf(((char) p1)));
    }

    private static boolean isWordBoundary(CharSequence p1, String p2)
    {
        if ((!android.text.TextUtils.isEmpty(p1)) && (!p2.contains(p1))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public static void underlineWord(android.view.inputmethod.InputConnection p4, org.pocketworkstation.pckeyboard.EditingUtil$SelectedWord p5)
    {
        if (!org.pocketworkstation.pckeyboard.EditingUtil.sMethodsInitialized) {
            org.pocketworkstation.pckeyboard.EditingUtil.initializeMethodsForReflection();
        }
        if (org.pocketworkstation.pckeyboard.EditingUtil.sMethodSetComposingRegion != null) {
            try {
                Object[] v1_1 = new Object[2];
                v1_1[0] = Integer.valueOf(p5.start);
                v1_1[1] = Integer.valueOf(p5.end);
                org.pocketworkstation.pckeyboard.EditingUtil.sMethodSetComposingRegion.invoke(p4, v1_1);
            } catch (IllegalAccessException v0) {
            } catch (IllegalAccessException v0) {
            } catch (IllegalAccessException v0) {
            }
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
synthetic class ExpandableDictionary$1 {
}
package org.pocketworkstation.pckeyboard;
 class ExpandableDictionary$LoadDictionaryTask extends android.os.AsyncTask {
    final synthetic org.pocketworkstation.pckeyboard.ExpandableDictionary this$0;

    private ExpandableDictionary$LoadDictionaryTask(org.pocketworkstation.pckeyboard.ExpandableDictionary p1)
    {
        this.this$0 = p1;
        return;
    }

    synthetic ExpandableDictionary$LoadDictionaryTask(org.pocketworkstation.pckeyboard.ExpandableDictionary p1, org.pocketworkstation.pckeyboard.ExpandableDictionary$1 p2)
    {
        this(p1);
        return;
    }

    protected bridge synthetic Object doInBackground(Object[] p2)
    {
        return this.doInBackground(((Void[]) p2));
    }

    protected varargs Void doInBackground(Void[] p4)
    {
        this.this$0.loadDictionaryAsync();
        org.pocketworkstation.pckeyboard.ExpandableDictionary.access$100(this.this$0);
        try {
            org.pocketworkstation.pckeyboard.ExpandableDictionary.access$202(this.this$0, 0);
            return 0;
        } catch (Throwable v0_1) {
            throw v0_1;
        }
    }
}
package org.pocketworkstation.pckeyboard;
 class ExpandableDictionary$NextWord {
    int frequency;
    org.pocketworkstation.pckeyboard.ExpandableDictionary$NextWord nextWord;
    org.pocketworkstation.pckeyboard.ExpandableDictionary$Node word;

    ExpandableDictionary$NextWord(org.pocketworkstation.pckeyboard.ExpandableDictionary$Node p1, int p2)
    {
        this.word = p1;
        this.frequency = p2;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class ExpandableDictionary$Node {
    org.pocketworkstation.pckeyboard.ExpandableDictionary$NodeArray children;
    char code;
    int frequency;
    java.util.LinkedList ngrams;
    org.pocketworkstation.pckeyboard.ExpandableDictionary$Node parent;
    boolean terminal;

    ExpandableDictionary$Node()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class ExpandableDictionary$NodeArray {
    private static final int INCREMENT = 2;
    org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[] data;
    int length;

    ExpandableDictionary$NodeArray()
    {
        this.length = 0;
        org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[] v0_2 = new org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[2];
        this.data = v0_2;
        return;
    }

    void add(org.pocketworkstation.pckeyboard.ExpandableDictionary$Node p5)
    {
        if ((this.length + 1) > this.data.length) {
            org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[] v0 = new org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[(this.length + 2)];
            if (this.length > 0) {
                System.arraycopy(this.data, 0, v0, 0, this.length);
            }
            this.data = v0;
        }
        org.pocketworkstation.pckeyboard.ExpandableDictionary$Node[] v1_2 = this.data;
        int v2_1 = this.length;
        this.length = (v2_1 + 1);
        v1_2[v2_1] = p5;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
interface GlobalKeyboardSettings$BooleanPref {

    public abstract boolean getDefault();

    public abstract int getFlags();

    public abstract void set();
}
package org.pocketworkstation.pckeyboard;
interface GlobalKeyboardSettings$StringPref {

    public abstract String getDefault();

    public abstract int getFlags();

    public abstract void set();
}
package org.pocketworkstation.pckeyboard;
public final class GlobalKeyboardSettings {
    public static final int FLAG_PREF_NEED_RELOAD = 1;
    public static final int FLAG_PREF_NEW_PUNC_LIST = 2;
    public static final int FLAG_PREF_NONE = 0;
    public static final int FLAG_PREF_RECREATE_INPUT_VIEW = 4;
    public static final int FLAG_PREF_RESET_KEYBOARDS = 8;
    public static final int FLAG_PREF_RESET_MODE_OVERRIDE = 16;
    protected static final String TAG = "HK/Globals";
    public float candidateScalePref;
    public boolean capsLock;
    public int chordingAltKey;
    public int chordingCtrlKey;
    public int chordingMetaKey;
    public boolean compactModeEnabled;
    public int ctrlAOverride;
    public int editorFieldId;
    public String editorFieldName;
    public int editorInputType;
    public String editorPackageName;
    public int hintMode;
    public java.util.Locale inputLocale;
    public int keyClickMethod;
    public float keyClickVolume;
    public float keyboardHeightPercent;
    public int keyboardMode;
    public int keyboardModeLandscape;
    public int keyboardModePortrait;
    public float labelScalePref;
    public int longpressTimeout;
    private java.util.Map mBoolPrefs;
    private int mCurrentFlags;
    private java.util.Map mStringPrefs;
    public int popupKeyboardFlags;
    public int renderMode;
    public int sendSlideKeys;
    public boolean shiftLockModifiers;
    public boolean showTouchPos;
    public String suggestedPunctuation;
    public float topRowScale;
    public boolean useExtension;

    public GlobalKeyboardSettings()
    {
        this.popupKeyboardFlags = 1;
        this.topRowScale = 1065353216;
        this.showTouchPos = 0;
        this.suggestedPunctuation = "!?,.";
        this.keyboardModePortrait = 0;
        this.keyboardModeLandscape = 2;
        this.compactModeEnabled = 1;
        this.ctrlAOverride = 0;
        this.chordingCtrlKey = 0;
        this.chordingAltKey = 0;
        this.chordingMetaKey = 0;
        this.keyClickVolume = 0;
        this.keyClickMethod = 0;
        this.capsLock = 1;
        this.shiftLockModifiers = 0;
        this.labelScalePref = 1065353216;
        this.candidateScalePref = 1065353216;
        this.sendSlideKeys = 0;
        this.keyboardMode = 0;
        this.useExtension = 0;
        this.keyboardHeightPercent = 1109393408;
        this.hintMode = 0;
        this.renderMode = 1;
        this.longpressTimeout = 400;
        this.inputLocale = java.util.Locale.getDefault();
        this.mBoolPrefs = new java.util.HashMap();
        this.mStringPrefs = new java.util.HashMap();
        this.mCurrentFlags = 0;
        return;
    }

    private void addBooleanPref(String p2, org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$BooleanPref p3)
    {
        this.mBoolPrefs.put(p2, p3);
        return;
    }

    private void addStringPref(String p2, org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref p3)
    {
        this.mStringPrefs.put(p2, p3);
        return;
    }

    public boolean hasFlag(int p3)
    {
        int v0_2;
        if ((this.mCurrentFlags & p3) == 0) {
            v0_2 = 0;
        } else {
            this.mCurrentFlags = (this.mCurrentFlags & (p3 ^ -1));
            v0_2 = 1;
        }
        return v0_2;
    }

    public void initPrefs(android.content.SharedPreferences p6, android.content.res.Resources p7)
    {
        this.addStringPref("pref_keyboard_mode_portrait", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$1(this, p7));
        this.addStringPref("pref_keyboard_mode_landscape", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$2(this, p7));
        this.addStringPref("pref_slide_keys_int", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$3(this));
        this.addBooleanPref("pref_touch_pos", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$4(this));
        this.addStringPref("pref_popup_content", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$5(this, p7));
        this.addStringPref("pref_suggested_punctuation", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$6(this, p7));
        this.addStringPref("pref_label_scale_v2", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$7(this));
        this.addStringPref("pref_candidate_scale", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$8(this));
        this.addStringPref("pref_top_row_scale", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$9(this));
        this.addStringPref("pref_ctrl_a_override", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$10(this, p7));
        this.addStringPref("pref_chording_ctrl_key", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$11(this, p7));
        this.addStringPref("pref_chording_alt_key", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$12(this, p7));
        this.addStringPref("pref_chording_meta_key", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$13(this, p7));
        this.addStringPref("pref_click_volume", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$14(this, p7));
        this.addStringPref("pref_click_method", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$15(this, p7));
        this.addBooleanPref("pref_caps_lock", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$16(this, p7));
        this.addBooleanPref("pref_shift_lock_modifiers", new org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$17(this, p7));
        java.util.Iterator v3_18 = this.mBoolPrefs.keySet().iterator();
        while (v3_18.hasNext()) {
            String v0_0 = ((String) v3_18.next());
            org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref v1_1 = ((org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$BooleanPref) this.mBoolPrefs.get(v0_0));
            v1_1.set(p6.getBoolean(v0_0, v1_1.getDefault()));
        }
        java.util.Iterator v3_21 = this.mStringPrefs.keySet().iterator();
        while (v3_21.hasNext()) {
            String v0_2 = ((String) v3_21.next());
            org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref v1_3 = ((org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref) this.mStringPrefs.get(v0_2));
            v1_3.set(p6.getString(v0_2, v1_3.getDefault()));
        }
        return;
    }

    public void sharedPreferenceChanged(android.content.SharedPreferences p6, String p7)
    {
        this.mCurrentFlags = 0;
        org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$BooleanPref v0_1 = ((org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$BooleanPref) this.mBoolPrefs.get(p7));
        if (v0_1 != null) {
            v0_1.set(p6.getBoolean(p7, v0_1.getDefault()));
            this.mCurrentFlags = (this.mCurrentFlags | v0_1.getFlags());
        }
        org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref v2_1 = ((org.pocketworkstation.pckeyboard.GlobalKeyboardSettings$StringPref) this.mStringPrefs.get(p7));
        if (v2_1 != null) {
            v2_1.set(p6.getString(p7, v2_1.getDefault()));
            this.mCurrentFlags = (this.mCurrentFlags | v2_1.getFlags());
        }
        return;
    }

    public int unhandledFlags()
    {
        return this.mCurrentFlags;
    }
}
package org.pocketworkstation.pckeyboard;
 class InputLanguageSelection$Loc implements java.lang.Comparable {
    static java.text.Collator sCollator;
    String label;
    java.util.Locale locale;

    static InputLanguageSelection$Loc()
    {
        org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc.sCollator = java.text.Collator.getInstance();
        return;
    }

    public InputLanguageSelection$Loc(String p1, java.util.Locale p2)
    {
        this.label = p1;
        this.locale = p2;
        return;
    }

    public int compareTo(Object p4)
    {
        return org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc.sCollator.compare(this.label, ((org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc) p4).label);
    }

    public String toString()
    {
        return this.label;
    }
}
package org.pocketworkstation.pckeyboard;
public class InputLanguageSelection extends android.preference.PreferenceActivity {
    private static final String[] BLACKLIST_LANGUAGES = None;
    private static final String[] KBD_4_ROW = None;
    private static final String[] KBD_5_ROW = None;
    private static final String[] KBD_LOCALIZATIONS = None;
    public static final java.util.Set NOAUTOSPACE_LANGUAGES = None;
    public static final java.util.Set NOCAPS_LANGUAGES = None;
    public static final java.util.Set NODEADKEY_LANGUAGES = None;
    private static final String TAG = "PCKeyboardILS";
    private java.util.ArrayList mAvailableLanguages;

    static InputLanguageSelection()
    {
        String[] v0_19 = new String[3];
        v0_19[0] = "ko";
        v0_19[1] = "ja";
        v0_19[2] = "zh";
        org.pocketworkstation.pckeyboard.InputLanguageSelection.BLACKLIST_LANGUAGES = v0_19;
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOCAPS_LANGUAGES = new java.util.HashSet();
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOCAPS_LANGUAGES.add("ar");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOCAPS_LANGUAGES.add("iw");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOCAPS_LANGUAGES.add("th");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NODEADKEY_LANGUAGES = new java.util.HashSet();
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NODEADKEY_LANGUAGES.add("ar");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NODEADKEY_LANGUAGES.add("iw");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NODEADKEY_LANGUAGES.add("th");
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOAUTOSPACE_LANGUAGES = new java.util.HashSet();
        org.pocketworkstation.pckeyboard.InputLanguageSelection.NOAUTOSPACE_LANGUAGES.add("th");
        String[] v0_18 = new String[58];
        v0_18[0] = "ar";
        v0_18[1] = "bg";
        v0_18[2] = "bg_ST";
        v0_18[3] = "ca";
        v0_18[4] = "cs";
        v0_18[5] = "cs_QY";
        v0_18[6] = "da";
        v0_18[7] = "de";
        v0_18[8] = "de_NE";
        v0_18[9] = "el";
        v0_18[10] = "en";
        v0_18[11] = "en_CX";
        v0_18[12] = "en_DV";
        v0_18[13] = "en_GB";
        v0_18[14] = "es";
        v0_18[15] = "es_LA";
        v0_18[16] = "es_US";
        v0_18[17] = "fa";
        v0_18[18] = "fi";
        v0_18[19] = "fr";
        v0_18[20] = "fr_CA";
        v0_18[21] = "he";
        v0_18[22] = "hr";
        v0_18[23] = "hu";
        v0_18[24] = "hu_QY";
        v0_18[25] = "hy";
        v0_18[26] = "in";
        v0_18[27] = "it";
        v0_18[28] = "iw";
        v0_18[29] = "ja";
        v0_18[30] = "ka";
        v0_18[31] = "ko";
        v0_18[32] = "lo";
        v0_18[33] = "lt";
        v0_18[34] = "lv";
        v0_18[35] = "nb";
        v0_18[36] = "nl";
        v0_18[37] = "pl";
        v0_18[38] = "pt";
        v0_18[39] = "pt_PT";
        v0_18[40] = "rm";
        v0_18[41] = "ro";
        v0_18[42] = "ru";
        v0_18[43] = "ru_PH";
        v0_18[44] = "si";
        v0_18[45] = "sk";
        v0_18[46] = "sk_QY";
        v0_18[47] = "sl";
        v0_18[48] = "sr";
        v0_18[49] = "sv";
        v0_18[50] = "ta";
        v0_18[51] = "th";
        v0_18[52] = "tl";
        v0_18[53] = "tr";
        v0_18[54] = "uk";
        v0_18[55] = "vi";
        v0_18[56] = "zh_CN";
        v0_18[57] = "zh_TW";
        org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_LOCALIZATIONS = v0_18;
        String[] v0_5 = new String[43];
        v0_5[0] = "ar";
        v0_5[1] = "bg";
        v0_5[2] = "bg_ST";
        v0_5[3] = "cs";
        v0_5[4] = "cs_QY";
        v0_5[5] = "da";
        v0_5[6] = "de";
        v0_5[7] = "de_NE";
        v0_5[8] = "el";
        v0_5[9] = "en";
        v0_5[10] = "en_CX";
        v0_5[11] = "en_DV";
        v0_5[12] = "en_GB";
        v0_5[13] = "es";
        v0_5[14] = "es_LA";
        v0_5[15] = "fa";
        v0_5[16] = "fi";
        v0_5[17] = "fr";
        v0_5[18] = "fr_CA";
        v0_5[19] = "he";
        v0_5[20] = "hr";
        v0_5[21] = "hu";
        v0_5[22] = "hu_QY";
        v0_5[23] = "hy";
        v0_5[24] = "it";
        v0_5[25] = "iw";
        v0_5[26] = "lo";
        v0_5[27] = "lt";
        v0_5[28] = "nb";
        v0_5[29] = "pt_PT";
        v0_5[30] = "ro";
        v0_5[31] = "ru";
        v0_5[32] = "ru_PH";
        v0_5[33] = "si";
        v0_5[34] = "sk";
        v0_5[35] = "sk_QY";
        v0_5[36] = "sl";
        v0_5[37] = "sr";
        v0_5[38] = "sv";
        v0_5[39] = "ta";
        v0_5[40] = "th";
        v0_5[41] = "tr";
        v0_5[42] = "uk";
        org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_5_ROW = v0_5;
        String[] v0_13 = new String[33];
        v0_13[0] = "ar";
        v0_13[1] = "bg";
        v0_13[2] = "bg_ST";
        v0_13[3] = "cs";
        v0_13[4] = "cs_QY";
        v0_13[5] = "da";
        v0_13[6] = "de";
        v0_13[7] = "de_NE";
        v0_13[8] = "el";
        v0_13[9] = "en";
        v0_13[10] = "en_CX";
        v0_13[11] = "en_DV";
        v0_13[12] = "es";
        v0_13[13] = "es_LA";
        v0_13[14] = "es_US";
        v0_13[15] = "fa";
        v0_13[16] = "fr";
        v0_13[17] = "fr_CA";
        v0_13[18] = "he";
        v0_13[19] = "hr";
        v0_13[20] = "hu";
        v0_13[21] = "hu_QY";
        v0_13[22] = "iw";
        v0_13[23] = "nb";
        v0_13[24] = "ru";
        v0_13[25] = "ru_PH";
        v0_13[26] = "sk";
        v0_13[27] = "sk_QY";
        v0_13[28] = "sl";
        v0_13[29] = "sr";
        v0_13[30] = "sv";
        v0_13[31] = "tr";
        v0_13[32] = "uk";
        org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_4_ROW = v0_13;
        return;
    }

    public InputLanguageSelection()
    {
        this.mAvailableLanguages = new java.util.ArrayList();
        return;
    }

    private boolean arrayContains(String[] p3, String p4)
    {
        int v0 = 0;
        while (v0 < p3.length) {
            if (!p3[v0].equalsIgnoreCase(p4)) {
                v0++;
            } else {
                int v1_1 = 1;
            }
            return v1_1;
        }
        v1_1 = 0;
        return v1_1;
    }

    private static String asString(java.util.Set p4)
    {
        StringBuilder v1_1 = new StringBuilder();
        v1_1.append("set(");
        String[] v2_0 = new String[p4.size()];
        String[] v2_2 = ((String[]) p4.toArray(v2_0));
        java.util.Arrays.sort(v2_2);
        int v0 = 0;
        while (v0 < v2_2.length) {
            if (v0 > 0) {
                v1_1.append(", ");
            }
            v1_1.append(v2_2[v0]);
            v0++;
        }
        v1_1.append(")");
        return v1_1.toString();
    }

    private String get5Code(java.util.Locale p5)
    {
        String v1_4;
        String v0 = p5.getCountry();
        StringBuilder v2_1 = new StringBuilder().append(p5.getLanguage());
        if (!android.text.TextUtils.isEmpty(v0)) {
            v1_4 = new StringBuilder().append("_").append(v0).toString();
        } else {
            v1_4 = "";
        }
        return v2_1.append(v1_4).toString();
    }

    private static String getLocaleName(java.util.Locale p3)
    {
        String v2_39;
        String v1 = p3.getLanguage();
        String v0 = p3.getCountry();
        if ((!v1.equals("en")) || (!v0.equals("DV"))) {
            if ((!v1.equals("en")) || (!v0.equals("EX"))) {
                if ((!v1.equals("en")) || (!v0.equals("CX"))) {
                    if ((!v1.equals("es")) || (!v0.equals("LA"))) {
                        if ((!v1.equals("cs")) || (!v0.equals("QY"))) {
                            if ((!v1.equals("de")) || (!v0.equals("NE"))) {
                                if ((!v1.equals("hu")) || (!v0.equals("QY"))) {
                                    if ((!v1.equals("sk")) || (!v0.equals("QY"))) {
                                        if ((!v1.equals("ru")) || (!v0.equals("PH"))) {
                                            if (!v1.equals("bg")) {
                                                v2_39 = org.pocketworkstation.pckeyboard.LanguageSwitcher.toTitleCase(p3.getDisplayName(p3));
                                            } else {
                                                if (!v0.equals("ST")) {
                                                    v2_39 = "\u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0435\u0437\u0438\u043a (Phonetic)";
                                                } else {
                                                    v2_39 = "\u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0435\u0437\u0438\u043a (Standard)";
                                                }
                                            }
                                        } else {
                                            v2_39 = "\u0420\u0443\u0441\u0441\u043a\u0438\u0439 (Phonetic)";
                                        }
                                    } else {
                                        v2_39 = "Sloven\u010dina (QWERTY)";
                                    }
                                } else {
                                    v2_39 = "Magyar (QWERTY)";
                                }
                            } else {
                                v2_39 = "Deutsch (Neo2)";
                            }
                        } else {
                            v2_39 = "\u010ce\u0161tina (QWERTY)";
                        }
                    } else {
                        v2_39 = "Espa\u00f1ol (Latinoam\u00e9rica)";
                    }
                } else {
                    v2_39 = "English (Carpalx)";
                }
            } else {
                v2_39 = "English (4x11)";
            }
        } else {
            v2_39 = "English (Dvorak)";
        }
        return v2_39;
    }

    private boolean hasDictionary(java.util.Locale p10)
    {
        android.content.res.Resources v5 = this.getResources();
        android.content.res.Configuration v1 = v5.getConfiguration();
        java.util.Locale v6 = v1.locale;
        int v3 = 0;
        v1.locale = p10;
        v5.updateConfiguration(v1, v5.getDisplayMetrics());
        org.pocketworkstation.pckeyboard.BinaryDictionary v0_1 = new org.pocketworkstation.pckeyboard.BinaryDictionary(this, org.pocketworkstation.pckeyboard.LatinIME.getDictionary(v5), 1);
        if (v0_1.getSize() <= 50000) {
            org.pocketworkstation.pckeyboard.BinaryDictionary v4 = org.pocketworkstation.pckeyboard.PluginManager.getDictionary(this.getApplicationContext(), p10.getLanguage());
            if (v4 != null) {
                v0_1.close();
                v0_1 = v4;
                v3 = 1;
            }
        } else {
            v3 = 1;
        }
        v0_1.close();
        v1.locale = v6;
        v5.updateConfiguration(v1, v5.getDisplayMetrics());
        return v3;
    }

    java.util.ArrayList getUniqueLocales()
    {
        java.util.HashSet v13_1 = new java.util.HashSet();
        java.util.HashSet v10_1 = new java.util.HashSet();
        int v7_1 = 0;
        while (v7_1 < org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_LOCALIZATIONS.length) {
            String v8 = org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_LOCALIZATIONS[v7_1];
            if ((v8.length() != 2) || (!v10_1.contains(v8))) {
                if (v8.length() == 6) {
                    v8 = new StringBuilder().append(v8.substring(0, 2)).append("_").append(v8.substring(4, 6)).toString();
                }
                v13_1.add(v8);
            }
            v7_1++;
        }
        android.util.Log.i("PCKeyboardILS", new StringBuilder().append("localeSet=").append(org.pocketworkstation.pckeyboard.InputLanguageSelection.asString(v13_1)).toString());
        android.util.Log.i("PCKeyboardILS", new StringBuilder().append("langSet=").append(org.pocketworkstation.pckeyboard.InputLanguageSelection.asString(v10_1)).toString());
        String[] v14_0 = new String[v13_1.size()];
        String[] v14_2 = ((String[]) v13_1.toArray(v14_0));
        java.util.Arrays.sort(v14_2);
        java.util.ArrayList v18_1 = new java.util.ArrayList();
        int v15 = v14_2.length;
        org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc v0_17 = new org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc[v15];
        org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc[] v16 = v0_17;
        int v7_0 = 0;
        int v6 = 0;
        while (v7_0 < v15) {
            int v5_0;
            String v17 = v14_2[v7_0];
            int v12 = v17.length();
            if ((v12 != 2) && ((v12 != 5) && (v12 != 6))) {
                v5_0 = v6;
            } else {
                java.util.Locale v9_1;
                String v11 = v17.substring(0, 2);
                if (v12 != 5) {
                    if (v12 != 6) {
                        v9_1 = new java.util.Locale(v11);
                    } else {
                        v9_1 = new java.util.Locale(v11, v17.substring(4, 6));
                    }
                } else {
                    v9_1 = new java.util.Locale(v11, v17.substring(3, 5));
                }
                if (!this.arrayContains(org.pocketworkstation.pckeyboard.InputLanguageSelection.BLACKLIST_LANGUAGES, v11)) {
                    if (v6 != 0) {
                        if (!v16[(v6 - 1)].locale.getLanguage().equals(v11)) {
                            if (!v17.equals("zz_ZZ")) {
                                v5_0 = (v6 + 1);
                                org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc v19_10 = new org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc;
                                v19_10(org.pocketworkstation.pckeyboard.InputLanguageSelection.getLocaleName(v9_1), v9_1);
                                v16[v6] = v19_10;
                            } else {
                                v5_0 = v6;
                            }
                        } else {
                            v16[(v6 - 1)].label = org.pocketworkstation.pckeyboard.InputLanguageSelection.getLocaleName(v16[(v6 - 1)].locale);
                            v5_0 = (v6 + 1);
                            org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc v19_13 = new org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc;
                            v19_13(org.pocketworkstation.pckeyboard.InputLanguageSelection.getLocaleName(v9_1), v9_1);
                            v16[v6] = v19_13;
                        }
                    } else {
                        v5_0 = (v6 + 1);
                        org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc v19_14 = new org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc;
                        v19_14(org.pocketworkstation.pckeyboard.LanguageSwitcher.toTitleCase(v9_1.getDisplayName(v9_1)), v9_1);
                        v16[v6] = v19_14;
                    }
                } else {
                    v5_0 = v6;
                }
            }
            v7_0++;
            v6 = v5_0;
        }
        int v7_2 = 0;
        while (v7_2 < v6) {
            v18_1.add(v16[v7_2]);
            v7_2++;
        }
        return v18_1;
    }

    protected void onCreate(android.os.Bundle p26)
    {
        this = super.onCreate(p26);
        this.addPreferencesFromResource(2131034126);
        String v17 = android.preference.PreferenceManager.getDefaultSharedPreferences(this).getString("selected_languages", "");
        android.util.Log.i("PCKeyboardILS", new StringBuilder().append("selected languages: ").append(v17).toString());
        String[] v12 = v17.split(",");
        this.mAvailableLanguages = this.getUniqueLocales();
        java.util.HashSet v3_1 = new java.util.HashSet();
        int v8_2 = 0;
        while (v8_2 < this.mAvailableLanguages.size()) {
            v3_1.add(this.get5Code(((org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc) this.mAvailableLanguages.get(v8_2)).locale));
            v8_2++;
        }
        java.util.HashSet v13_1 = new java.util.HashSet();
        int v8_1 = 0;
        while (v8_1 < v12.length) {
            String v19 = v12[v8_1];
            if (!v3_1.contains(v19)) {
                if (v19.length() > 2) {
                    String v10 = v19.substring(0, 2);
                    if (v3_1.contains(v10)) {
                        v13_1.add(v10);
                    }
                }
            } else {
                v13_1.add(v19);
            }
            v8_1++;
        }
        android.preference.PreferenceScreen v15 = this.getPreferenceScreen();
        int v8_0 = 0;
        while (v8_0 < this.mAvailableLanguages.size()) {
            int v6;
            android.preference.CheckBoxPreference v16 = new android.preference.CheckBoxPreference;
            v16(this);
            java.util.Locale v14_1 = ((org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc) this.mAvailableLanguages.get(v8_0)).locale;
            v16.setTitle(new StringBuilder().append(((org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc) this.mAvailableLanguages.get(v8_0)).label).append(" [").append(v14_1.toString()).append("]").toString());
            String v5 = this.get5Code(v14_1);
            String v11 = v14_1.getLanguage();
            v16.setChecked(v13_1.contains(v5));
            if ((!this.arrayContains(org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_4_ROW, v5)) && (!this.arrayContains(org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_4_ROW, v11))) {
                v6 = 0;
            } else {
                v6 = 1;
            }
            if ((!this.arrayContains(org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_5_ROW, v5)) && (!this.arrayContains(org.pocketworkstation.pckeyboard.InputLanguageSelection.KBD_5_ROW, v11))) {
                int v7 = 0;
            } else {
                v7 = 1;
            }
            java.util.ArrayList v20 = new java.util.ArrayList;
            v20(3);
            if (v7 != 0) {
                v20.add("5-row");
            }
            if (v6 != 0) {
                v20.add("4-row");
            }
            if (this.hasDictionary(v14_1)) {
                v20.add(this.getResources().getString(2131165493));
            }
            if (!v20.isEmpty()) {
                StringBuilder v21_1 = new StringBuilder();
                int v9 = 0;
                while (v9 < v20.size()) {
                    if (v9 > 0) {
                        v21_1.append(", ");
                    }
                    v21_1.append(((String) v20.get(v9)));
                    v9++;
                }
                v16.setSummary(v21_1.toString());
            }
            v15.addPreference(v16);
            v8_0++;
        }
        return;
    }

    protected void onPause()
    {
        super.onPause();
        int v0 = "";
        android.preference.PreferenceScreen v5 = this.getPreferenceScreen();
        int v1 = v5.getPreferenceCount();
        int v3 = 0;
        while (v3 < v1) {
            if (((android.preference.CheckBoxPreference) v5.getPreference(v3)).isChecked()) {
                v0 = new StringBuilder().append(v0).append(this.get5Code(((org.pocketworkstation.pckeyboard.InputLanguageSelection$Loc) this.mAvailableLanguages.get(v3)).locale)).append(",").toString();
            }
            v3++;
        }
        if (v0.length() < 1) {
            v0 = 0;
        }
        android.content.SharedPreferences$Editor v2 = android.preference.PreferenceManager.getDefaultSharedPreferences(this).edit();
        v2.putString("selected_languages", v0);
        org.pocketworkstation.pckeyboard.SharedPreferencesCompat.apply(v2);
        return;
    }

    protected void onResume()
    {
        super.onResume();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
abstract class KeyDetector {
    protected int mCorrectionX;
    protected int mCorrectionY;
    protected org.pocketworkstation.pckeyboard.Keyboard mKeyboard;
    private org.pocketworkstation.pckeyboard.Keyboard$Key[] mKeys;
    protected boolean mProximityCorrectOn;
    protected int mProximityThresholdSquare;

    KeyDetector()
    {
        return;
    }

    public abstract int getKeyIndexAndNearbyCodes();

    protected org.pocketworkstation.pckeyboard.Keyboard$Key[] getKeys()
    {
        if (this.mKeys != null) {
            return this.mKeys;
        } else {
            throw new IllegalStateException("keyboard isn\'t set");
        }
    }

    protected abstract int getMaxNearbyKeys();

    protected int getTouchX(int p2)
    {
        return (this.mCorrectionX + p2);
    }

    protected int getTouchY(int p2)
    {
        return (this.mCorrectionY + p2);
    }

    public boolean isProximityCorrectionEnabled()
    {
        return this.mProximityCorrectOn;
    }

    public int[] newCodeArray()
    {
        int[] v0 = new int[this.getMaxNearbyKeys()];
        java.util.Arrays.fill(v0, -1);
        return v0;
    }

    public org.pocketworkstation.pckeyboard.Keyboard$Key[] setKeyboard(org.pocketworkstation.pckeyboard.Keyboard p4, float p5, float p6)
    {
        if (p4 != null) {
            this.mCorrectionX = ((int) p5);
            this.mCorrectionY = ((int) p6);
            this.mKeyboard = p4;
            java.util.List v1 = this.mKeyboard.getKeys();
            org.pocketworkstation.pckeyboard.Keyboard$Key[] v2_2 = new org.pocketworkstation.pckeyboard.Keyboard$Key[v1.size()];
            org.pocketworkstation.pckeyboard.Keyboard$Key[] v0_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key[]) v1.toArray(v2_2));
            this.mKeys = v0_1;
            return v0_1;
        } else {
            throw new NullPointerException();
        }
    }

    public void setProximityCorrectionEnabled(boolean p1)
    {
        this.mProximityCorrectOn = p1;
        return;
    }

    public void setProximityThreshold(int p2)
    {
        this.mProximityThresholdSquare = (p2 * p2);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
synthetic class Keyboard$1 {
}
package org.pocketworkstation.pckeyboard;
public class Keyboard$Key {
    private static final int[] KEY_STATE_NORMAL;
    private static final int[] KEY_STATE_NORMAL_LOCK;
    private static final int[] KEY_STATE_NORMAL_OFF;
    private static final int[] KEY_STATE_NORMAL_ON;
    private static final int[] KEY_STATE_PRESSED;
    private static final int[] KEY_STATE_PRESSED_LOCK;
    private static final int[] KEY_STATE_PRESSED_OFF;
    private static final int[] KEY_STATE_PRESSED_ON;
    public String altHint;
    public CharSequence capsLabel;
    public int[] codes;
    public int edgeFlags;
    public int gap;
    public int height;
    public String hint;
    public android.graphics.drawable.Drawable icon;
    public android.graphics.drawable.Drawable iconPreview;
    public boolean isCursor;
    private boolean isDistinctUppercase;
    private boolean isSimpleUppercase;
    private org.pocketworkstation.pckeyboard.Keyboard keyboard;
    public CharSequence label;
    public boolean locked;
    public boolean modifier;
    public boolean on;
    public CharSequence popupCharacters;
    public int popupResId;
    public boolean popupReversed;
    public boolean pressed;
    private float realGap;
    private float realWidth;
    private float realX;
    public boolean repeatable;
    public CharSequence shiftLabel;
    public boolean sticky;
    public CharSequence text;
    public int width;
    public int x;
    public int y;

    static Keyboard$Key()
    {
        int[] v0_7 = new int[2];
        v0_7 = {16842911, 16842912};
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_ON = v0_7;
        int[] v0_8 = new int[3];
        v0_8 = {16842919, 16842911, 16842912};
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_ON = v0_8;
        int[] v0_0 = new int[3];
        v0_0 = {16842914, 16842911, 16842912};
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_LOCK = v0_0;
        int[] v0_2 = new int[4];
        v0_2 = {16842914, 16842919, 16842911, 16842912};
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_LOCK = v0_2;
        int[] v0_3 = new int[1];
        v0_3[0] = 16842911;
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_OFF = v0_3;
        int[] v0_4 = new int[2];
        v0_4 = {16842919, 16842911};
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_OFF = v0_4;
        int[] v0_5 = new int[0];
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL = v0_5;
        int[] v0_6 = new int[1];
        v0_6[0] = 16842919;
        org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED = v0_6;
        return;
    }

    public Keyboard$Key(android.content.res.Resources p11, org.pocketworkstation.pckeyboard.Keyboard$Row p12, int p13, int p14, android.content.res.XmlResourceParser p15)
    {
        this(p12);
        this.x = p13;
        this.y = p14;
        android.content.res.TypedArray v0_0 = p11.obtainAttributes(android.util.Xml.asAttributeSet(p15), org.pocketworkstation.pckeyboard.R$styleable.Keyboard);
        this.realWidth = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 0, org.pocketworkstation.pckeyboard.Keyboard.access$000(this.keyboard), p12.defaultWidth);
        this.height = Math.round((org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 1, org.pocketworkstation.pckeyboard.Keyboard.access$200(this.keyboard), ((float) p12.defaultHeight)) - org.pocketworkstation.pckeyboard.Keyboard.access$700(org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p12))));
        this.y = ((int) (((float) this.y) + (org.pocketworkstation.pckeyboard.Keyboard.access$700(org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p12)) / 1073741824)));
        this.realGap = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 2, org.pocketworkstation.pckeyboard.Keyboard.access$000(this.keyboard), p12.defaultHorizontalGap);
        this.realGap = (this.realGap + org.pocketworkstation.pckeyboard.Keyboard.access$800(org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p12)));
        this.realWidth = (this.realWidth - org.pocketworkstation.pckeyboard.Keyboard.access$800(org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p12)));
        this.width = Math.round(this.realWidth);
        this.gap = Math.round(this.realGap);
        v0_0.recycle();
        android.content.res.TypedArray v0_1 = p11.obtainAttributes(android.util.Xml.asAttributeSet(p15), org.pocketworkstation.pckeyboard.R$styleable.Keyboard_Key);
        this.realX = ((((float) this.x) + this.realGap) - (org.pocketworkstation.pckeyboard.Keyboard.access$800(org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p12)) / 1073741824));
        this.x = Math.round(this.realX);
        android.util.TypedValue v1_1 = new android.util.TypedValue();
        v0_1.getValue(1, v1_1);
        if ((v1_1.type != 16) && (v1_1.type != 17)) {
            if (v1_1.type == 3) {
                this.codes = this.parseCSV(v1_1.string.toString());
            }
        } else {
            int v5_6 = new int[1];
            v5_6[0] = v1_1.data;
            this.codes = v5_6;
        }
        this.iconPreview = v0_1.getDrawable(9);
        if (this.iconPreview != null) {
            this.iconPreview.setBounds(0, 0, this.iconPreview.getIntrinsicWidth(), this.iconPreview.getIntrinsicHeight());
        }
        this.popupCharacters = v0_1.getText(3);
        this.popupResId = v0_1.getResourceId(2, 0);
        this.repeatable = v0_1.getBoolean(8, 0);
        this.modifier = v0_1.getBoolean(5, 0);
        this.sticky = v0_1.getBoolean(6, 0);
        this.isCursor = v0_1.getBoolean(7, 0);
        this.icon = v0_1.getDrawable(14);
        if (this.icon != null) {
            this.icon.setBounds(0, 0, this.icon.getIntrinsicWidth(), this.icon.getIntrinsicHeight());
        }
        this.label = v0_1.getText(11);
        this.shiftLabel = v0_1.getText(12);
        if ((this.shiftLabel != null) && (this.shiftLabel.length() == 0)) {
            this.shiftLabel = 0;
        }
        this.capsLabel = v0_1.getText(13);
        if ((this.capsLabel != null) && (this.capsLabel.length() == 0)) {
            this.capsLabel = 0;
        }
        this.text = v0_1.getText(10);
        if ((this.codes == null) && (!android.text.TextUtils.isEmpty(this.label))) {
            this.codes = this.getFromString(this.label);
            if ((this.codes != null) && (this.codes.length == 1)) {
                String v4 = this.label.toString().toUpperCase(org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.inputLocale);
                if (this.shiftLabel != null) {
                    if (this.capsLabel == null) {
                        if (!v4.equals(this.shiftLabel.toString())) {
                            if (v4.length() == 1) {
                                this.capsLabel = v4;
                                this.isDistinctUppercase = 1;
                            }
                        } else {
                            this.isSimpleUppercase = 1;
                        }
                    } else {
                        this.isDistinctUppercase = 1;
                    }
                } else {
                    if ((!v4.equals(this.label.toString())) && (v4.length() == 1)) {
                        this.shiftLabel = v4;
                        this.isSimpleUppercase = 1;
                    }
                }
            }
            if ((org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.popupKeyboardFlags & 256) != 0) {
                this.popupCharacters = 0;
                this.popupResId = 0;
            }
            if ((org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.popupKeyboardFlags & 512) != 0) {
                this.repeatable = 1;
            }
        }
        v0_1.recycle();
        return;
    }

    public Keyboard$Key(org.pocketworkstation.pckeyboard.Keyboard$Row p2)
    {
        this.keyboard = org.pocketworkstation.pckeyboard.Keyboard$Row.access$600(p2);
        this.height = p2.defaultHeight;
        this.width = Math.round(p2.defaultWidth);
        this.realWidth = p2.defaultWidth;
        this.gap = Math.round(p2.defaultHorizontalGap);
        this.realGap = p2.defaultHorizontalGap;
        return;
    }

    static synthetic float access$1000(org.pocketworkstation.pckeyboard.Keyboard$Key p1)
    {
        return p1.realX;
    }

    static synthetic float access$1002(org.pocketworkstation.pckeyboard.Keyboard$Key p0, float p1)
    {
        p0.realX = p1;
        return p1;
    }

    static synthetic float access$1100(org.pocketworkstation.pckeyboard.Keyboard$Key p1)
    {
        return p1.realGap;
    }

    static synthetic float access$1200(org.pocketworkstation.pckeyboard.Keyboard$Key p1)
    {
        return p1.realWidth;
    }

    private String getPopupKeyboardContent(boolean p13, boolean p14, boolean p15)
    {
        int v5 = this.getPrimaryCode(0, 0);
        int v8 = this.getPrimaryCode(0, 1);
        int v1 = this.getPrimaryCode(1, 1);
        if (v8 == v5) {
            v8 = 0;
        }
        if ((v1 == v8) || (v1 == v5)) {
            v1 = 0;
        }
        int v7;
        if (this.popupCharacters != null) {
            v7 = this.popupCharacters.length();
        } else {
            v7 = 0;
        }
        StringBuilder v6_1 = new StringBuilder(v7);
        int v4 = 0;
        while (v4 < v7) {
            char v0 = this.popupCharacters.charAt(v4);
            if ((p14) || (p13)) {
                String v9 = Character.toString(v0).toUpperCase(org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.inputLocale);
                if (v9.length() == 1) {
                    v0 = v9.charAt(0);
                }
            }
            if ((v0 != v5) && ((v0 != v8) && (v0 != v1))) {
                v6_1.append(v0);
            }
            v4++;
        }
        char v10_1;
        if (!p15) {
            v10_1 = v6_1.toString();
        } else {
            StringBuilder v2_1 = new StringBuilder((v6_1.length() + 3));
            int v3 = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.popupKeyboardFlags;
            if ((v3 & 4) != 0) {
                if ((!this.isDistinctUppercase) || (!p13)) {
                    if (!p14) {
                        if (v5 > 0) {
                            v2_1.append(((char) v5));
                            v5 = 0;
                        }
                    } else {
                        if (v8 > 0) {
                            v2_1.append(((char) v8));
                            v8 = 0;
                        }
                    }
                } else {
                    if (v1 > 0) {
                        v2_1.append(((char) v1));
                        v1 = 0;
                    }
                }
            }
            if ((v3 & 2) != 0) {
                if ((!this.isDistinctUppercase) || (!p13)) {
                    if (!p14) {
                        if (v8 > 0) {
                            v2_1.append(((char) v8));
                            v8 = 0;
                        }
                        if (v1 > 0) {
                            v2_1.append(((char) v1));
                        }
                    } else {
                        if (v5 > 0) {
                            v2_1.append(((char) v5));
                            v5 = 0;
                        }
                        if (v1 > 0) {
                            v2_1.append(((char) v1));
                        }
                    }
                } else {
                    if (v5 > 0) {
                        v2_1.append(((char) v5));
                        v5 = 0;
                    }
                    if (v8 > 0) {
                        v2_1.append(((char) v8));
                        v8 = 0;
                    }
                }
            }
            if ((!this.isSimpleUppercase) && ((v3 & 1) != 0)) {
                if (!p14) {
                    if (v8 > 0) {
                        v2_1.append(((char) v8));
                    }
                } else {
                    if (v5 > 0) {
                        v2_1.append(((char) v5));
                    }
                }
            }
            v2_1.append(v6_1);
            v10_1 = v2_1.toString();
        }
        return v10_1;
    }

    private static boolean is7BitAscii(char p2)
    {
        int v0 = 0;
        if (((p2 < 65) || (p2 > 90)) && (((p2 < 97) || (p2 > 122)) && ((p2 >= 32) && (p2 < 127)))) {
            v0 = 1;
        }
        return v0;
    }

    public String getAltHintLabel(boolean p5, boolean p6)
    {
        if (this.altHint == null) {
            this.altHint = "";
            String v1 = this.getPopupKeyboardContent(0, 0, 0);
            if (v1.length() > 0) {
                char v0 = v1.charAt(0);
                if ((p6) || ((p5) && (org.pocketworkstation.pckeyboard.Keyboard$Key.is7BitAscii(v0)))) {
                    this.altHint = Character.toString(v0);
                }
            }
        }
        return this.altHint;
    }

    public String getCaseLabel()
    {
        if ((!this.isDistinctUppercase) || (!this.keyboard.isShiftCaps())) {
            if ((!this.keyboard.isShifted(this.isSimpleUppercase)) || (this.shiftLabel == null)) {
                if (this.label == null) {
                    int v1_3 = 0;
                } else {
                    v1_3 = this.label.toString();
                }
            } else {
                v1_3 = this.shiftLabel.toString();
            }
        } else {
            v1_3 = this.capsLabel.toString();
        }
        return v1_3;
    }

    public int[] getCurrentDrawableState()
    {
        int[] v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL;
        if (!this.locked) {
            if (!this.on) {
                if (!this.sticky) {
                    if (this.pressed) {
                        v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED;
                    }
                } else {
                    if (!this.pressed) {
                        v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_OFF;
                    } else {
                        v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_OFF;
                    }
                }
            } else {
                if (!this.pressed) {
                    v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_ON;
                } else {
                    v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_ON;
                }
            }
        } else {
            if (!this.pressed) {
                v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_NORMAL_LOCK;
            } else {
                v0 = org.pocketworkstation.pckeyboard.Keyboard$Key.KEY_STATE_PRESSED_LOCK;
            }
        }
        return v0;
    }

    public int[] getFromString(CharSequence p6)
    {
        int[] v1_2;
        if (p6.length() <= 1) {
            v1_2 = new int[1];
            v1_2[0] = p6.charAt(0);
        } else {
            if ((p6.charAt(0) != 9676) || (p6.length() < 2)) {
                this.text = p6;
                v1_2 = new int[1];
                v1_2[0] = 0;
            } else {
                v1_2 = new int[1];
                v1_2[0] = p6.charAt(1);
            }
        }
        return v1_2;
    }

    public String getHintLabel(boolean p4, boolean p5)
    {
        if (this.hint == null) {
            this.hint = "";
            if ((this.shiftLabel != null) && (!this.isSimpleUppercase)) {
                char v0 = this.shiftLabel.charAt(0);
                if ((p5) || ((p4) && (org.pocketworkstation.pckeyboard.Keyboard$Key.is7BitAscii(v0)))) {
                    this.hint = Character.toString(v0);
                }
            }
        }
        return this.hint;
    }

    public org.pocketworkstation.pckeyboard.Keyboard getPopupKeyboard(android.content.Context p10, int p11)
    {
        org.pocketworkstation.pckeyboard.Keyboard v8_0 = 0;
        if (this.popupCharacters != null) {
            if ((org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.popupKeyboardFlags & 256) == 0) {
                String v4 = this.getPopupKeyboardContent(this.keyboard.isShiftCaps(), this.keyboard.isShifted(this.isSimpleUppercase), 1);
                if (v4.length() > 0) {
                    int v3 = this.popupResId;
                    if (v3 == 0) {
                        v3 = 2131034122;
                    }
                    v8_0 = new org.pocketworkstation.pckeyboard.Keyboard(p10, org.pocketworkstation.pckeyboard.Keyboard.access$300(this.keyboard), v3, v4, this.popupReversed, -1, p11, 0);
                }
            }
        } else {
            if (this.popupResId == 0) {
                if (!this.modifier) {
                }
            } else {
                v8_0 = new org.pocketworkstation.pckeyboard.Keyboard(p10, org.pocketworkstation.pckeyboard.Keyboard.access$300(this.keyboard), this.popupResId);
            }
        }
        return v8_0;
    }

    public int getPrimaryCode()
    {
        return this.getPrimaryCode(this.keyboard.isShiftCaps(), this.keyboard.isShifted(this.isSimpleUppercase));
    }

    public int getPrimaryCode(boolean p4, boolean p5)
    {
        if ((!this.isDistinctUppercase) || (!p4)) {
            if ((!p5) || (this.shiftLabel == null)) {
                char v0_5 = this.codes[0];
            } else {
                if ((this.shiftLabel.charAt(0) != 9676) || (this.shiftLabel.length() < 2)) {
                    v0_5 = this.shiftLabel.charAt(0);
                } else {
                    v0_5 = this.shiftLabel.charAt(1);
                }
            }
        } else {
            v0_5 = this.capsLabel.charAt(0);
        }
        return v0_5;
    }

    public boolean isDeadKey()
    {
        int v0 = 1;
        if ((this.codes != null) && (this.codes.length >= 1)) {
            if (Character.getType(this.codes[0]) != 6) {
                v0 = 0;
            }
        } else {
            v0 = 0;
        }
        return v0;
    }

    public boolean isDistinctCaps()
    {
        if ((!this.isDistinctUppercase) || (!this.keyboard.isShiftCaps())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isInside(int p9, int p10)
    {
        int v1;
        int v4 = 1;
        if ((this.edgeFlags & 1) <= 0) {
            v1 = 0;
        } else {
            v1 = 1;
        }
        int v2;
        if ((this.edgeFlags & 2) <= 0) {
            v2 = 0;
        } else {
            v2 = 1;
        }
        int v3;
        if ((this.edgeFlags & 4) <= 0) {
            v3 = 0;
        } else {
            v3 = 1;
        }
        int v0;
        if ((this.edgeFlags & 8) <= 0) {
            v0 = 0;
        } else {
            v0 = 1;
        }
        if (((p9 < this.x) && ((v1 == 0) || (p9 > (this.x + this.width)))) || (((p9 >= (this.x + this.width)) && ((v2 == 0) || (p9 < this.x))) || (((p10 < this.y) && ((v3 == 0) || (p10 > (this.y + this.height)))) || ((p10 >= (this.y + this.height)) && ((v0 == 0) || (p10 < this.y)))))) {
            v4 = 0;
        }
        return v4;
    }

    public boolean isShifted()
    {
        return this.keyboard.isShifted(this.isSimpleUppercase);
    }

    public void onPressed()
    {
        int v0_1;
        if (this.pressed) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.pressed = v0_1;
        return;
    }

    public void onReleased(boolean p2)
    {
        int v0_1;
        if (this.pressed) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        this.pressed = v0_1;
        return;
    }

    int[] parseCSV(String p10)
    {
        int v0_0 = 0;
        int v2 = 0;
        if (p10.length() > 0) {
            v0_0 = (0 + 1);
            while(true) {
                v2 = p10.indexOf(",", (v2 + 1));
                if (v2 <= 0) {
                    break;
                }
                v0_0++;
            }
        }
        int[] v5 = new int[v0_0];
        int v0_1 = 0;
        java.util.StringTokenizer v4_1 = new java.util.StringTokenizer(p10, ",");
        while (v4_1.hasMoreTokens()) {
            int v1 = (v0_1 + 1);
            try {
                v5[v0_1] = Integer.parseInt(v4_1.nextToken());
                v0_1 = v1;
            } catch (NumberFormatException v3) {
                android.util.Log.e("Keyboard", new StringBuilder().append("Error parsing keycodes ").append(p10).toString());
                v0_1 = v1;
            }
        }
        return v5;
    }

    public int squaredDistanceFrom(int p5, int p6)
    {
        return ((((this.x + (this.width / 2)) - p5) * ((this.x + (this.width / 2)) - p5)) + (((this.y + (this.height / 2)) - p6) * ((this.y + (this.height / 2)) - p6)));
    }

    public String toString()
    {
        int v0 = 0;
        if ((this.codes != null) && (this.codes.length > 0)) {
            v0 = this.codes[0];
        }
        String v2_14;
        String v3_24 = new StringBuilder();
        if ((this.edgeFlags & 1) == 0) {
            v2_14 = "-";
        } else {
            v2_14 = "L";
        }
        String v2_34;
        String v3_12 = v3_24.append(v2_14);
        if ((this.edgeFlags & 2) == 0) {
            v2_34 = "-";
        } else {
            v2_34 = "R";
        }
        String v2_37;
        String v3_16 = v3_12.append(v2_34);
        if ((this.edgeFlags & 4) == 0) {
            v2_37 = "-";
        } else {
            v2_37 = "T";
        }
        String v2_41;
        String v3_17 = v3_16.append(v2_37);
        if ((this.edgeFlags & 8) == 0) {
            v2_41 = "-";
        } else {
            v2_41 = "B";
        }
        String v2_48;
        String v1 = v3_17.append(v2_41).toString();
        String v3_20 = new StringBuilder().append("KeyDebugFIXME(label=").append(this.label);
        if (this.shiftLabel == null) {
            v2_48 = "";
        } else {
            v2_48 = new StringBuilder().append(" shift=").append(this.shiftLabel).toString();
        }
        String v2_55;
        String v3_21 = v3_20.append(v2_48);
        if (this.capsLabel == null) {
            v2_55 = "";
        } else {
            v2_55 = new StringBuilder().append(" caps=").append(this.capsLabel).toString();
        }
        String v2_61;
        String v3_22 = v3_21.append(v2_55);
        if (this.text == null) {
            v2_61 = "";
        } else {
            v2_61 = new StringBuilder().append(" text=").append(this.text).toString();
        }
        String v2_9;
        String v3_26 = v3_22.append(v2_61).append(" code=").append(v0);
        if ((v0 > 0) && (!Character.isWhitespace(v0))) {
            v2_9 = new StringBuilder().append(":\'").append(((char) v0)).append("\'").toString();
        } else {
            v2_9 = "";
        }
        String v2_22;
        String v3_11 = v3_26.append(v2_9).append(" x=").append(this.x).append("..").append((this.x + this.width)).append(" y=").append(this.y).append("..").append((this.y + this.height)).append(" edgeFlags=").append(v1);
        if (this.popupCharacters == null) {
            v2_22 = "";
        } else {
            v2_22 = new StringBuilder().append(" pop=").append(this.popupCharacters).toString();
        }
        return v3_11.append(v2_22).append(" res=").append(this.popupResId).append(")").toString();
    }
}
package org.pocketworkstation.pckeyboard;
public class Keyboard$Row {
    public int defaultHeight;
    public float defaultHorizontalGap;
    public float defaultWidth;
    public boolean extension;
    public int mode;
    private org.pocketworkstation.pckeyboard.Keyboard parent;
    public int verticalGap;

    public Keyboard$Row(android.content.res.Resources p11, org.pocketworkstation.pckeyboard.Keyboard p12, android.content.res.XmlResourceParser p13)
    {
        int v1 = 0;
        this.parent = p12;
        android.content.res.TypedArray v0_0 = p11.obtainAttributes(android.util.Xml.asAttributeSet(p13), org.pocketworkstation.pckeyboard.R$styleable.Keyboard);
        this.defaultWidth = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 0, org.pocketworkstation.pckeyboard.Keyboard.access$000(p12), org.pocketworkstation.pckeyboard.Keyboard.access$100(p12));
        this.defaultHeight = Math.round(org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 1, org.pocketworkstation.pckeyboard.Keyboard.access$200(p12), ((float) org.pocketworkstation.pckeyboard.Keyboard.access$300(p12))));
        this.defaultHorizontalGap = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 2, org.pocketworkstation.pckeyboard.Keyboard.access$000(p12), org.pocketworkstation.pckeyboard.Keyboard.access$400(p12));
        this.verticalGap = Math.round(org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0_0, 3, org.pocketworkstation.pckeyboard.Keyboard.access$200(p12), ((float) org.pocketworkstation.pckeyboard.Keyboard.access$500(p12))));
        v0_0.recycle();
        android.content.res.TypedArray v0_1 = p11.obtainAttributes(android.util.Xml.asAttributeSet(p13), org.pocketworkstation.pckeyboard.R$styleable.Keyboard_Row);
        this.mode = v0_1.getResourceId(1, 0);
        this.extension = v0_1.getBoolean(2, 0);
        if (p12.mLayoutRows >= 5) {
            if ((this.extension) || ((p12.mRowCount - p12.mExtensionRowCount) <= 0)) {
                v1 = 1;
            }
            float v2;
            float v3 = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.topRowScale;
            if (v1 == 0) {
                v2 = (1065353216 + ((1065353216 - v3) / ((float) (p12.mLayoutRows - 1))));
            } else {
                v2 = v3;
            }
            this.defaultHeight = Math.round((((float) this.defaultHeight) * v2));
        }
        v0_1.recycle();
        return;
    }

    public Keyboard$Row(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        this.parent = p1;
        return;
    }

    static synthetic org.pocketworkstation.pckeyboard.Keyboard access$600(org.pocketworkstation.pckeyboard.Keyboard$Row p1)
    {
        return p1.parent;
    }
}
package org.pocketworkstation.pckeyboard;
public class Keyboard {
    public static final char DEAD_KEY_PLACEHOLDER = 9676;
    public static final String DEAD_KEY_PLACEHOLDER_STRING = "";
    public static final int DEFAULT_LAYOUT_COLUMNS = 10;
    public static final int DEFAULT_LAYOUT_ROWS = 4;
    public static final int EDGE_BOTTOM = 8;
    public static final int EDGE_LEFT = 1;
    public static final int EDGE_RIGHT = 2;
    public static final int EDGE_TOP = 4;
    public static final int KEYCODE_ALT_SYM = 250;
    public static final int KEYCODE_CANCEL = 253;
    public static final int KEYCODE_DELETE = 251;
    public static final int KEYCODE_DONE = 252;
    public static final int KEYCODE_MODE_CHANGE = 254;
    public static final int KEYCODE_SHIFT = 255;
    public static final int POPUP_ADD_CASE = 2;
    public static final int POPUP_ADD_SELF = 4;
    public static final int POPUP_ADD_SHIFT = 1;
    public static final int POPUP_AUTOREPEAT = 512;
    public static final int POPUP_DISABLE = 256;
    private static float SEARCH_DISTANCE = 0;
    public static final int SHIFT_CAPS = 3;
    public static final int SHIFT_CAPS_LOCKED = 4;
    public static final int SHIFT_LOCKED = 2;
    public static final int SHIFT_OFF = 0;
    public static final int SHIFT_ON = 1;
    static final String TAG = "Keyboard";
    private static final String TAG_KEY = "Key";
    private static final String TAG_KEYBOARD = "Keyboard";
    private static final String TAG_ROW = "Row";
    private org.pocketworkstation.pckeyboard.Keyboard$Key mAltKey;
    private int mCellHeight;
    private int mCellWidth;
    private org.pocketworkstation.pckeyboard.Keyboard$Key mCtrlKey;
    private int mDefaultHeight;
    private float mDefaultHorizontalGap;
    private int mDefaultVerticalGap;
    private float mDefaultWidth;
    private int mDisplayHeight;
    private int mDisplayWidth;
    public int mExtensionRowCount;
    private int[][] mGridNeighbors;
    private float mHorizontalPad;
    private int mKeyboardHeight;
    private int mKeyboardMode;
    private java.util.List mKeys;
    public int mLayoutColumns;
    public int mLayoutRows;
    private org.pocketworkstation.pckeyboard.Keyboard$Key mMetaKey;
    private java.util.List mModifierKeys;
    private int mProximityThreshold;
    public int mRowCount;
    private org.pocketworkstation.pckeyboard.Keyboard$Key mShiftKey;
    private int mShiftKeyIndex;
    private int mShiftState;
    private int mTotalHeight;
    private int mTotalWidth;
    private boolean mUseExtension;
    private float mVerticalPad;

    static Keyboard()
    {
        org.pocketworkstation.pckeyboard.Keyboard.DEAD_KEY_PLACEHOLDER_STRING = Character.toString(9676);
        org.pocketworkstation.pckeyboard.Keyboard.SEARCH_DISTANCE = 1072064102;
        return;
    }

    public Keyboard(android.content.Context p2, int p3, int p4)
    {
        this(p2, p3, p4, 0);
        return;
    }

    public Keyboard(android.content.Context p7, int p8, int p9, int p10)
    {
        this(p7, p8, p9, p10, 0);
        return;
    }

    public Keyboard(android.content.Context p6, int p7, int p8, int p9, float p10)
    {
        this.mShiftState = 0;
        this.mShiftKeyIndex = -1;
        this.mRowCount = 1;
        this.mExtensionRowCount = 0;
        android.util.DisplayMetrics v0 = p6.getResources().getDisplayMetrics();
        this.mDisplayWidth = v0.widthPixels;
        this.mDisplayHeight = v0.heightPixels;
        android.util.Log.v("Keyboard", new StringBuilder().append("keyboard\'s display metrics:").append(v0).append(", mDisplayWidth=").append(this.mDisplayWidth).toString());
        this.mDefaultHorizontalGap = 0;
        this.mDefaultWidth = ((float) (this.mDisplayWidth / 10));
        this.mDefaultVerticalGap = 0;
        this.mDefaultHeight = p7;
        this.mKeyboardHeight = Math.round(((((float) this.mDisplayHeight) * p10) / 1120403456));
        this.mKeys = new java.util.ArrayList();
        this.mModifierKeys = new java.util.ArrayList();
        this.mKeyboardMode = p9;
        this.mUseExtension = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.useExtension;
        this.loadKeyboard(p6, p6.getResources().getXml(p8));
        this.setEdgeFlags();
        this.fixAltChars(org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.inputLocale);
        return;
    }

    private Keyboard(android.content.Context p15, int p16, int p17, CharSequence p18, boolean p19, int p20, int p21)
    {
        int v6;
        org.pocketworkstation.pckeyboard.Keyboard v14_1 = this(p15, p16, p17);
        int v10 = 0;
        int v11 = 0;
        int v2 = 0;
        v14_1.mTotalWidth = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Row v7_1 = new org.pocketworkstation.pckeyboard.Keyboard$Row(v14_1);
        v7_1.defaultHeight = v14_1.mDefaultHeight;
        v7_1.defaultWidth = v14_1.mDefaultWidth;
        v7_1.defaultHorizontalGap = v14_1.mDefaultHorizontalGap;
        v7_1.verticalGap = v14_1.mDefaultVerticalGap;
        if (p20 != -1) {
            v6 = p20;
        } else {
            v6 = 2147483647;
        }
        int v8;
        v14_1.mLayoutRows = 1;
        if (!p19) {
            v8 = 0;
        } else {
            v8 = (p18.length() - 1);
        }
        int v3;
        if (!p19) {
            v3 = p18.length();
        } else {
            v3 = -1;
        }
        int v9;
        if (!p19) {
            v9 = 1;
        } else {
            v9 = -1;
        }
        int v4 = v8;
        while (v4 != v3) {
            char v1 = p18.charAt(v4);
            if ((v2 >= v6) || (((((float) v10) + v14_1.mDefaultWidth) + ((float) p21)) > ((float) v14_1.mDisplayWidth))) {
                v10 = 0;
                v11 += (v14_1.mDefaultVerticalGap + v14_1.mDefaultHeight);
                v2 = 0;
                v14_1.mLayoutRows = (v14_1.mLayoutRows + 1);
            }
            org.pocketworkstation.pckeyboard.Keyboard$Key v5_1 = new org.pocketworkstation.pckeyboard.Keyboard$Key(v7_1);
            v5_1.x = v10;
            org.pocketworkstation.pckeyboard.Keyboard$Key.access$1002(v5_1, ((float) v10));
            v5_1.y = v11;
            v5_1.label = String.valueOf(v1);
            v5_1.codes = v5_1.getFromString(v5_1.label);
            v2++;
            v10 += (v5_1.width + v5_1.gap);
            v14_1.mKeys.add(v5_1);
            if (v10 > v14_1.mTotalWidth) {
                v14_1.mTotalWidth = v10;
            }
            v4 += v9;
        }
        v14_1.mTotalHeight = (v14_1.mDefaultHeight + v11);
        if (p20 != -1) {
            v2 = v6;
        }
        v14_1.mLayoutColumns = v2;
        v14_1.setEdgeFlags();
        return;
    }

    synthetic Keyboard(android.content.Context p1, int p2, int p3, CharSequence p4, boolean p5, int p6, int p7, org.pocketworkstation.pckeyboard.Keyboard$1 p8)
    {
        this(p1, p2, p3, p4, p5, p6, p7);
        return;
    }

    static synthetic int access$000(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDisplayWidth;
    }

    static synthetic float access$100(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDefaultWidth;
    }

    static synthetic int access$200(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDisplayHeight;
    }

    static synthetic int access$300(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDefaultHeight;
    }

    static synthetic float access$400(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDefaultHorizontalGap;
    }

    static synthetic int access$500(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mDefaultVerticalGap;
    }

    static synthetic float access$700(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mVerticalPad;
    }

    static synthetic float access$800(org.pocketworkstation.pckeyboard.Keyboard p1)
    {
        return p1.mHorizontalPad;
    }

    private void computeNearestNeighbors()
    {
        this.mCellWidth = (((this.getMinWidth() + this.mLayoutColumns) - 1) / this.mLayoutColumns);
        this.mCellHeight = (((this.getHeight() + this.mLayoutRows) - 1) / this.mLayoutRows);
        int v12_17 = new int[][(this.mLayoutColumns * this.mLayoutRows)];
        this.mGridNeighbors = v12_17;
        int[] v6 = new int[this.mKeys.size()];
        int v4 = (this.mLayoutColumns * this.mCellWidth);
        int v3 = (this.mLayoutRows * this.mCellHeight);
        int v9 = 0;
        while (v9 < v4) {
            int v10 = 0;
            while (v10 < v3) {
                int v1 = 0;
                int v5 = 0;
                while (v5 < this.mKeys.size()) {
                    int v7;
                    org.pocketworkstation.pckeyboard.Keyboard$Key v8_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) this.mKeys.get(v5));
                    if ((v8_1.codes == null) || ((v8_1.codes.length <= 0) || (v8_1.codes[0] != 32))) {
                        v7 = 0;
                    } else {
                        v7 = 1;
                    }
                    if ((v8_1.squaredDistanceFrom(v9, v10) < this.mProximityThreshold) || ((v8_1.squaredDistanceFrom(((this.mCellWidth + v9) - 1), v10) < this.mProximityThreshold) || ((v8_1.squaredDistanceFrom(((this.mCellWidth + v9) - 1), ((this.mCellHeight + v10) - 1)) < this.mProximityThreshold) || ((v8_1.squaredDistanceFrom(v9, ((this.mCellHeight + v10) - 1)) < this.mProximityThreshold) || ((v7 != 0) && ((((this.mCellWidth + v9) - 1) >= v8_1.x) && ((v9 <= (v8_1.x + v8_1.width)) && ((((this.mCellHeight + v10) - 1) >= v8_1.y) && (v10 <= (v8_1.y + v8_1.height)))))))))) {
                        int v2 = (v1 + 1);
                        v6[v1] = v5;
                        v1 = v2;
                    }
                    v5++;
                }
                int[] v0 = new int[v1];
                System.arraycopy(v6, 0, v0, 0, v1);
                this.mGridNeighbors[(((v10 / this.mCellHeight) * this.mLayoutColumns) + (v9 / this.mCellWidth))] = v0;
                v10 += this.mCellHeight;
            }
            v9 += this.mCellWidth;
        }
        return;
    }

    private void fixAltChars(java.util.Locale p13)
    {
        if (p13 == null) {
            java.util.Locale.getDefault();
        }
        java.util.HashSet v3_1 = new java.util.HashSet();
        java.util.Iterator v9_3 = this.mKeys.iterator();
        while (v9_3.hasNext()) {
            org.pocketworkstation.pckeyboard.Keyboard$Key v2_3 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) v9_3.next());
            if ((v2_3.label != null) && ((!v2_3.modifier) && (v2_3.label.length() == 1))) {
                v3_1.add(Character.valueOf(v2_3.label.charAt(0)));
            }
        }
        java.util.Iterator v9_1 = this.mKeys.iterator();
        while (v9_1.hasNext()) {
            org.pocketworkstation.pckeyboard.Keyboard$Key v2_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) v9_1.next());
            if (v2_1.popupCharacters != null) {
                int v6 = v2_1.popupCharacters.length();
                if (v6 != 0) {
                    if (v2_1.x >= (this.mTotalWidth / 2)) {
                        v2_1.popupReversed = 1;
                    }
                    if ((v2_1.label == null) || ((v2_1.label.length() != 1) || (!Character.isUpperCase(v2_1.label.charAt(0))))) {
                        int v4 = 0;
                    } else {
                        v4 = 1;
                    }
                    if (v4 != 0) {
                        v2_1.popupCharacters = v2_1.popupCharacters.toString().toUpperCase();
                        v6 = v2_1.popupCharacters.length();
                    }
                    StringBuilder v5_1 = new StringBuilder(v6);
                    int v1 = 0;
                    while (v1 < v6) {
                        char v0_0 = v2_1.popupCharacters.charAt(v1);
                        if (((!Character.isDigit(v0_0)) || (!v3_1.contains(Character.valueOf(v0_0)))) && (((v2_1.edgeFlags & 4) != 0) || (!Character.isDigit(v0_0)))) {
                            v5_1.append(v0_0);
                        }
                        v1++;
                    }
                    v2_1.popupCharacters = v5_1.toString();
                }
            }
        }
        return;
    }

    static float getDimensionOrFraction(android.content.res.TypedArray p3, int p4, int p5, float p6)
    {
        android.util.TypedValue v0 = p3.peekValue(p4);
        if (v0 != null) {
            if (v0.type != 5) {
                if (v0.type == 6) {
                    p6 = p3.getFraction(p4, p5, p5, p6);
                }
            } else {
                p6 = ((float) p3.getDimensionPixelOffset(p4, Math.round(p6)));
            }
        }
        return p6;
    }

    private void loadKeyboard(android.content.Context p18, android.content.res.XmlResourceParser p19)
    {
        int v10 = 0;
        int v11 = 0;
        float v16 = 0;
        int v6_1 = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Key v12 = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Row v4 = 0;
        android.content.res.Resources v3 = p18.getResources();
        this.mRowCount = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Key v13 = 0;
        try {
            do {
                int v9 = p19.next();
            } while(v16 <= ((float) this.mTotalWidth));
            this.mTotalWidth = Math.round(v16);
        } catch (Exception v8) {
            android.util.Log.e("Keyboard", new StringBuilder().append("Parse error:").append(v8).toString());
            v8.printStackTrace();
            this.mTotalHeight = (v6_1 - this.mDefaultVerticalGap);
            return;
        }
        if (v9 == 1) {
            this.mTotalHeight = (v6_1 - this.mDefaultVerticalGap);
            return;
        } else {
            if (v9 != 2) {
                if (v9 == 3) {
                    if (v10 == 0) {
                        if (v11 != 0) {
                            v11 = 0;
                            v6_1 = ((v6_1 + v4.verticalGap) + v4.defaultHeight);
                            this.mRowCount = (this.mRowCount + 1);
                        }
                    } else {
                        v10 = 0;
                        v16 += (org.pocketworkstation.pckeyboard.Keyboard$Key.access$1100(v12) + org.pocketworkstation.pckeyboard.Keyboard$Key.access$1200(v12));
                        if (v16 > ((float) this.mTotalWidth)) {
                        }
                    }
                }
            } else {
                String v15 = p19.getName();
                if (!"Row".equals(v15)) {
                    if (!"Key".equals(v15)) {
                        if ("Keyboard".equals(v15)) {
                            this.parseKeyboardAttributes(v3, p19);
                        }
                    } else {
                        v10 = 1;
                        v12 = this.createKeyFromXml(v3, v4, Math.round(v16), v6_1, p19);
                        org.pocketworkstation.pckeyboard.Keyboard$Key.access$1002(v12, v16);
                        if (v12.codes != null) {
                            this.mKeys.add(v12);
                            v13 = v12;
                            if (v12.codes[0] != -1) {
                                if (v12.codes[0] != -6) {
                                    if (v12.codes[0] != -113) {
                                        if (v12.codes[0] != -57) {
                                            if (v12.codes[0] == -117) {
                                                this.mMetaKey = v12;
                                            }
                                        } else {
                                            this.mAltKey = v12;
                                        }
                                    } else {
                                        this.mCtrlKey = v12;
                                    }
                                } else {
                                    this.mModifierKeys.add(v12);
                                }
                            } else {
                                if (this.mShiftKeyIndex == -1) {
                                    this.mShiftKey = v12;
                                    this.mShiftKeyIndex = (this.mKeys.size() - 1);
                                }
                                this.mModifierKeys.add(v12);
                            }
                        } else {
                            if (v13 != null) {
                                v13.width = (v13.width + v12.width);
                            }
                        }
                    }
                } else {
                    int v14;
                    v11 = 1;
                    v16 = 0;
                    v4 = this.createRowFromXml(v3, p19);
                    if ((v4.mode == 0) || (v4.mode == this.mKeyboardMode)) {
                        v14 = 0;
                    } else {
                        v14 = 1;
                    }
                    if (v4.extension) {
                        if (!this.mUseExtension) {
                            v14 = 1;
                        } else {
                            this.mExtensionRowCount = (this.mExtensionRowCount + 1);
                        }
                    }
                    if (v14 != 0) {
                        this.skipToEndOfRow(p19);
                        v11 = 0;
                    }
                }
            }
        }
    }

    private void parseKeyboardAttributes(android.content.res.Resources p7, android.content.res.XmlResourceParser p8)
    {
        android.content.res.TypedArray v0 = p7.obtainAttributes(android.util.Xml.asAttributeSet(p8), org.pocketworkstation.pckeyboard.R$styleable.Keyboard);
        this.mDefaultWidth = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 0, this.mDisplayWidth, ((float) (this.mDisplayWidth / 10)));
        this.mDefaultHeight = Math.round(org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 1, this.mDisplayHeight, ((float) this.mDefaultHeight)));
        this.mDefaultHorizontalGap = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 2, this.mDisplayWidth, 0);
        this.mDefaultVerticalGap = Math.round(org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 3, this.mDisplayHeight, 0));
        this.mHorizontalPad = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 4, this.mDisplayWidth, p7.getDimension(2131427330));
        this.mVerticalPad = org.pocketworkstation.pckeyboard.Keyboard.getDimensionOrFraction(v0, 5, this.mDisplayHeight, p7.getDimension(2131427331));
        this.mLayoutRows = v0.getInteger(6, 4);
        this.mLayoutColumns = v0.getInteger(7, 10);
        if ((this.mDefaultHeight == 0) && ((this.mKeyboardHeight > 0) && (this.mLayoutRows > 0))) {
            this.mDefaultHeight = (this.mKeyboardHeight / this.mLayoutRows);
        }
        this.mProximityThreshold = ((int) (this.mDefaultWidth * org.pocketworkstation.pckeyboard.Keyboard.SEARCH_DISTANCE));
        this.mProximityThreshold = (this.mProximityThreshold * this.mProximityThreshold);
        v0.recycle();
        return;
    }

    private void setEdgeFlags()
    {
        if (this.mRowCount == 0) {
            this.mRowCount = 1;
        }
        int v3 = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Key v2 = 0;
        int v4 = 0;
        int v5_5 = this.mKeys.iterator();
        while (v5_5.hasNext()) {
            org.pocketworkstation.pckeyboard.Keyboard$Key v0_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) v5_5.next());
            int v1 = 0;
            if ((v2 == null) || (v0_1.x <= v2.x)) {
                if (v2 != null) {
                    v2.edgeFlags = (v2.edgeFlags | 2);
                }
                v4 = 0;
                if (v3 == 0) {
                    v4 = (0 | 4);
                }
                if (v3 == (this.mRowCount - 1)) {
                    v4 |= 8;
                }
                v3++;
                v1 = (0 | 1);
            }
            v0_1.edgeFlags = (v4 | v1);
            v2 = v0_1;
        }
        if (v2 != null) {
            v2.edgeFlags = (v2.edgeFlags | 2);
        }
        return;
    }

    private void skipToEndOfRow(android.content.res.XmlResourceParser p4)
    {
        do {
            int v0 = p4.next();
        } while((v0 != 1) && ((v0 != 3) || (!p4.getName().equals("Row"))));
        return;
    }

    protected org.pocketworkstation.pckeyboard.Keyboard$Key createKeyFromXml(android.content.res.Resources p7, org.pocketworkstation.pckeyboard.Keyboard$Row p8, int p9, int p10, android.content.res.XmlResourceParser p11)
    {
        return new org.pocketworkstation.pckeyboard.Keyboard$Key(p7, p8, p9, p10, p11);
    }

    protected org.pocketworkstation.pckeyboard.Keyboard$Row createRowFromXml(android.content.res.Resources p2, android.content.res.XmlResourceParser p3)
    {
        return new org.pocketworkstation.pckeyboard.Keyboard$Row(p2, this, p3);
    }

    public int getHeight()
    {
        return this.mTotalHeight;
    }

    protected int getHorizontalGap()
    {
        return Math.round(this.mDefaultHorizontalGap);
    }

    protected int getKeyHeight()
    {
        return this.mDefaultHeight;
    }

    protected int getKeyWidth()
    {
        return Math.round(this.mDefaultWidth);
    }

    public java.util.List getKeys()
    {
        return this.mKeys;
    }

    public int getMinWidth()
    {
        return this.mTotalWidth;
    }

    public java.util.List getModifierKeys()
    {
        return this.mModifierKeys;
    }

    public int[] getNearestKeys(int p4, int p5)
    {
        if (this.mGridNeighbors == null) {
            this.computeNearestNeighbors();
        }
        if ((p4 < 0) || ((p4 >= this.getMinWidth()) || ((p5 < 0) || (p5 >= this.getHeight())))) {
            int[] v1_7 = new int[0];
        } else {
            int v0 = (((p5 / this.mCellHeight) * this.mLayoutColumns) + (p4 / this.mCellWidth));
            if (v0 >= (this.mLayoutRows * this.mLayoutColumns)) {
            } else {
                v1_7 = this.mGridNeighbors[v0];
            }
        }
        return v1_7;
    }

    public int getScreenHeight()
    {
        return this.mDisplayHeight;
    }

    public int getShiftKeyIndex()
    {
        return this.mShiftKeyIndex;
    }

    public int getShiftState()
    {
        return this.mShiftState;
    }

    protected int getVerticalGap()
    {
        return this.mDefaultVerticalGap;
    }

    public boolean isShiftCaps()
    {
        if ((this.mShiftState != 3) && (this.mShiftState != 4)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public boolean isShifted(boolean p5)
    {
        int v1 = 0;
        int v0 = 1;
        if (!p5) {
            if ((this.mShiftState == 1) || (this.mShiftState == 2)) {
                v1 = 1;
            }
            v0 = v1;
        } else {
            if (this.mShiftState == 0) {
                v0 = 0;
            }
        }
        return v0;
    }

    public org.pocketworkstation.pckeyboard.Keyboard$Key setAltIndicator(boolean p2)
    {
        if (this.mAltKey != null) {
            this.mAltKey.on = p2;
        }
        return this.mAltKey;
    }

    public org.pocketworkstation.pckeyboard.Keyboard$Key setCtrlIndicator(boolean p2)
    {
        if (this.mCtrlKey != null) {
            this.mCtrlKey.on = p2;
        }
        return this.mCtrlKey;
    }

    protected void setHorizontalGap(int p2)
    {
        this.mDefaultHorizontalGap = ((float) p2);
        return;
    }

    protected void setKeyHeight(int p1)
    {
        this.mDefaultHeight = p1;
        return;
    }

    protected void setKeyWidth(int p2)
    {
        this.mDefaultWidth = ((float) p2);
        return;
    }

    public void setKeyboardWidth(int p6)
    {
        android.util.Log.i("Keyboard", new StringBuilder().append("setKeyboardWidth newWidth=").append(p6).append(", mTotalWidth=").append(this.mTotalWidth).toString());
        if ((p6 > 0) && (this.mTotalWidth > p6)) {
            float v1 = (((float) p6) / ((float) this.mDisplayWidth));
            android.util.Log.i("PCKeyboard", new StringBuilder().append("Rescaling keyboard: ").append(this.mTotalWidth).append(" => ").append(p6).toString());
            java.util.Iterator v2_5 = this.mKeys.iterator();
            while (v2_5.hasNext()) {
                org.pocketworkstation.pckeyboard.Keyboard$Key v0_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) v2_5.next());
                v0_1.x = Math.round((org.pocketworkstation.pckeyboard.Keyboard$Key.access$1000(v0_1) * v1));
            }
            this.mTotalWidth = p6;
        }
        return;
    }

    public org.pocketworkstation.pckeyboard.Keyboard$Key setMetaIndicator(boolean p2)
    {
        if (this.mMetaKey != null) {
            this.mMetaKey.on = p2;
        }
        return this.mMetaKey;
    }

    public boolean setShiftState(int p2)
    {
        return this.setShiftState(p2, 1);
    }

    public boolean setShiftState(int p5, boolean p6)
    {
        int v1 = 1;
        if ((p6) && (this.mShiftKey != null)) {
            int v0_2;
            if (p5 == 0) {
                v0_2 = 0;
            } else {
                v0_2 = 1;
            }
            this.mShiftKey.on = v0_2;
        }
        if (this.mShiftState == p5) {
            v1 = 0;
        } else {
            this.mShiftState = p5;
        }
        return v1;
    }

    protected void setVerticalGap(int p1)
    {
        this.mDefaultVerticalGap = p1;
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("Keyboard(").append(this.mLayoutColumns).append("x").append(this.mLayoutRows).append(" keys=").append(this.mKeys.size()).append(" rowCount=").append(this.mRowCount).append(" mode=").append(this.mKeyboardMode).append(" size=").append(this.mTotalWidth).append("x").append(this.mTotalHeight).append(")").toString();
    }
}
package org.pocketworkstation.pckeyboard;
 class KeyboardSwitcher$1 implements java.lang.Runnable {
    final synthetic org.pocketworkstation.pckeyboard.KeyboardSwitcher this$0;

    KeyboardSwitcher$1(org.pocketworkstation.pckeyboard.KeyboardSwitcher p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        if (org.pocketworkstation.pckeyboard.KeyboardSwitcher.access$100(this.this$0) != null) {
            org.pocketworkstation.pckeyboard.KeyboardSwitcher.access$200(this.this$0).setInputView(org.pocketworkstation.pckeyboard.KeyboardSwitcher.access$100(this.this$0));
        }
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.access$200(this.this$0).updateInputViewShown();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class KeyboardSwitcher$KeyboardId {
    public final boolean mEnableShiftLock;
    public final boolean mHasVoice;
    private final int mHashCode;
    public final float mKeyboardHeightPercent;
    public final int mKeyboardMode;
    public final boolean mUsingExtension;
    public final int mXml;

    public KeyboardSwitcher$KeyboardId(int p4, int p5, boolean p6, boolean p7)
    {
        this.mXml = p4;
        this.mKeyboardMode = p5;
        this.mEnableShiftLock = p6;
        this.mHasVoice = p7;
        this.mKeyboardHeightPercent = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.keyboardHeightPercent;
        this.mUsingExtension = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.useExtension;
        int v0_1 = new Object[4];
        v0_1[0] = Integer.valueOf(p4);
        v0_1[1] = Integer.valueOf(p5);
        v0_1[2] = Boolean.valueOf(p6);
        v0_1[3] = Boolean.valueOf(p7);
        this.mHashCode = java.util.Arrays.hashCode(v0_1);
        return;
    }

    static synthetic boolean access$000(org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId p1, org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId p2)
    {
        return p1.equals(p2);
    }

    private boolean equals(org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId p3)
    {
        if ((p3 == null) || ((p3.mXml != this.mXml) || ((p3.mKeyboardMode != this.mKeyboardMode) || ((p3.mUsingExtension != this.mUsingExtension) || ((p3.mEnableShiftLock != this.mEnableShiftLock) || (p3.mHasVoice != this.mHasVoice)))))) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean equals(Object p2)
    {
        if ((!(p2 instanceof org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId)) || (!this.equals(((org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId) p2)))) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public int hashCode()
    {
        return this.mHashCode;
    }
}
package org.pocketworkstation.pckeyboard;
public class KeyboardSwitcher implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {
    private static final int[] ALPHABET_MODES = None;
    private static final int AUTO_MODE_SWITCH_STATE_ALPHA = 0;
    private static final int AUTO_MODE_SWITCH_STATE_CHORDING = 4;
    private static final int AUTO_MODE_SWITCH_STATE_MOMENTARY = 3;
    private static final int AUTO_MODE_SWITCH_STATE_SYMBOL = 2;
    private static final int AUTO_MODE_SWITCH_STATE_SYMBOL_BEGIN = 1;
    public static final String DEFAULT_LAYOUT_ID = "0";
    private static final int DEFAULT_SETTINGS_KEY_MODE = 2131165375;
    private static final int KBD_COMPACT = 2131034113;
    private static final int KBD_COMPACT_FN = 2131034114;
    private static final int KBD_FULL = 2131034117;
    private static final int KBD_FULL_FN = 2131034118;
    private static final int KBD_PHONE = 2131034119;
    private static final int KBD_PHONE_SYMBOLS = 2131034120;
    private static final int KBD_QWERTY = 2131034123;
    private static final int KBD_SYMBOLS = 2131034124;
    private static final int KBD_SYMBOLS_SHIFT = 2131034125;
    public static final int KEYBOARDMODE_EMAIL = 2131623966;
    public static final int KEYBOARDMODE_EMAIL_WITH_SETTINGS_KEY = 2131623971;
    public static final int KEYBOARDMODE_IM = 2131623967;
    public static final int KEYBOARDMODE_IM_WITH_SETTINGS_KEY = 2131623972;
    public static final int KEYBOARDMODE_NORMAL = 2131623964;
    public static final int KEYBOARDMODE_NORMAL_WITH_SETTINGS_KEY = 2131623969;
    public static final int KEYBOARDMODE_SYMBOLS = 2131623974;
    public static final int KEYBOARDMODE_SYMBOLS_WITH_SETTINGS_KEY = 2131623975;
    public static final int KEYBOARDMODE_URL = 2131623965;
    public static final int KEYBOARDMODE_URL_WITH_SETTINGS_KEY = 2131623970;
    public static final int KEYBOARDMODE_WEB = 2131623968;
    public static final int KEYBOARDMODE_WEB_WITH_SETTINGS_KEY = 2131623973;
    public static final int MODE_EMAIL = 5;
    public static final int MODE_IM = 6;
    public static final int MODE_NONE = 0;
    public static final int MODE_PHONE = 3;
    public static final int MODE_SYMBOLS = 2;
    public static final int MODE_TEXT = 1;
    public static final int MODE_URL = 4;
    public static final int MODE_WEB = 7;
    public static final String PREF_KEYBOARD_LAYOUT = "pref_keyboard_layout";
    private static final int SETTINGS_KEY_MODE_ALWAYS_SHOW = 2131165376;
    private static final int SETTINGS_KEY_MODE_AUTO = 2131165375;
    private static String TAG;
    private static final int[] THEMES;
    private static final org.pocketworkstation.pckeyboard.KeyboardSwitcher sInstance;
    private int mAutoModeSwitchState;
    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId mCurrentId;
    private int mFullMode;
    private boolean mHasSettingsKey;
    private boolean mHasVoice;
    private int mImeOptions;
    private org.pocketworkstation.pckeyboard.LatinIME mInputMethodService;
    private org.pocketworkstation.pckeyboard.LatinKeyboardView mInputView;
    private boolean mIsAutoCompletionActive;
    private boolean mIsSymbols;
    private final java.util.HashMap mKeyboards;
    private org.pocketworkstation.pckeyboard.LanguageSwitcher mLanguageSwitcher;
    private int mLastDisplayWidth;
    private int mLayoutId;
    private int mMode;
    private boolean mPreferSymbols;
    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId mSymbolsId;
    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId mSymbolsShiftedId;
    private boolean mVoiceOnPrimary;

    static KeyboardSwitcher()
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.TAG = "PCKeyboardKbSw";
        org.pocketworkstation.pckeyboard.KeyboardSwitcher v0_4 = new int[4];
        v0_4 = {2130903044, 2130903043, 2130903045, 2130903049};
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.THEMES = v0_4;
        org.pocketworkstation.pckeyboard.KeyboardSwitcher v0_6 = new int[10];
        v0_6 = {2131623964, 2131623965, 2131623966, 2131623967, 2131623968, 2131623969, 2131623970, 2131623971, 2131623972, 2131623973};
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.ALPHABET_MODES = v0_6;
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance = new org.pocketworkstation.pckeyboard.KeyboardSwitcher();
        return;
    }

    private KeyboardSwitcher()
    {
        this.mKeyboards = new java.util.HashMap();
        this.mMode = 0;
        this.mAutoModeSwitchState = 0;
        return;
    }

    static synthetic org.pocketworkstation.pckeyboard.LatinKeyboardView access$100(org.pocketworkstation.pckeyboard.KeyboardSwitcher p1)
    {
        return p1.mInputView;
    }

    static synthetic org.pocketworkstation.pckeyboard.LatinIME access$200(org.pocketworkstation.pckeyboard.KeyboardSwitcher p1)
    {
        return p1.mInputMethodService;
    }

    private void changeLatinKeyboardView(int p8, boolean p9)
    {
        if ((this.mLayoutId != p8) || ((this.mInputView == null) || (p9))) {
            if (this.mInputView != null) {
                this.mInputView.closing();
            }
            if (org.pocketworkstation.pckeyboard.KeyboardSwitcher.THEMES.length <= p8) {
                p8 = Integer.valueOf("0").intValue();
            }
            org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils.getInstance().reset();
            boolean v2 = 1;
            int v1 = 0;
            while ((v1 < 5) && (v2)) {
                try {
                    this.mInputView = ((org.pocketworkstation.pckeyboard.LatinKeyboardView) this.mInputMethodService.getLayoutInflater().inflate(org.pocketworkstation.pckeyboard.KeyboardSwitcher.THEMES[p8], 0));
                    v2 = 0;
                } catch (android.view.InflateException v0_1) {
                    v2 = org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils.getInstance().tryGCOrWait(new StringBuilder().append(this.mLayoutId).append(",").append(p8).toString(), v0_1);
                } catch (android.view.InflateException v0_0) {
                    v2 = org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils.getInstance().tryGCOrWait(new StringBuilder().append(this.mLayoutId).append(",").append(p8).toString(), v0_0);
                }
                v1++;
            }
            this.mInputView.setExtensionLayoutResId(org.pocketworkstation.pckeyboard.KeyboardSwitcher.THEMES[p8]);
            this.mInputView.setOnKeyboardActionListener(this.mInputMethodService);
            this.mInputView.setPadding(0, 0, 0, 0);
            this.mLayoutId = p8;
        }
        this.mInputMethodService.mHandler.post(new org.pocketworkstation.pckeyboard.KeyboardSwitcher$1(this));
        return;
    }

    public static org.pocketworkstation.pckeyboard.KeyboardSwitcher getInstance()
    {
        return org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance;
    }

    private org.pocketworkstation.pckeyboard.LatinKeyboard getKeyboard(org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId p11)
    {
        org.pocketworkstation.pckeyboard.LatinKeyboard v1_0;
        ref.SoftReference v3_1 = ((ref.SoftReference) this.mKeyboards.get(p11));
        if (v3_1 != null) {
            v1_0 = ((org.pocketworkstation.pckeyboard.LatinKeyboard) v3_1.get());
        } else {
            v1_0 = 0;
        }
        if (v1_0 == null) {
            java.util.HashMap v5_6;
            android.content.res.Resources v2 = this.mInputMethodService.getResources();
            android.content.res.Configuration v0 = v2.getConfiguration();
            java.util.Locale v4 = v0.locale;
            v0.locale = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.inputLocale;
            v2.updateConfiguration(v0, 0);
            v1_0 = new org.pocketworkstation.pckeyboard.LatinKeyboard(this.mInputMethodService, p11.mXml, p11.mKeyboardMode, p11.mKeyboardHeightPercent);
            if (p11.mXml != 2131034124) {
                v5_6 = 0;
            } else {
                v5_6 = 1;
            }
            v1_0.setVoiceMode(this.hasVoiceButton(v5_6), this.mHasVoice);
            v1_0.setLanguageSwitcher(this.mLanguageSwitcher, this.mIsAutoCompletionActive);
            if (p11.mEnableShiftLock) {
                v1_0.enableShiftLock();
            }
            this.mKeyboards.put(p11, new ref.SoftReference(v1_0));
            v0.locale = v4;
            v2.updateConfiguration(v0, 0);
        }
        return v1_0;
    }

    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId getKeyboardId(int p9, int p10, boolean p11)
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_3;
        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_0 = 2131623974;
        boolean v0 = this.hasVoiceButton(p11);
        if (this.mFullMode <= 0) {
            if (!p11) {
                switch (p9) {
                    case 0:
                        org.pocketworkstation.pckeyboard.LatinImeLogger.logOnWarning(new StringBuilder().append("getKeyboardId:").append(p9).append(",").append(p10).append(",").append(p11).toString());
                    case 1:
                        break;
                    case 2:
                        if (this.mHasSettingsKey) {
                            v2_0 = 2131623975;
                        }
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034124, v2_0, 0, v0);
                        break;
                    case 3:
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034119, 0, 0, v0);
                        break;
                    case 4:
                        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_11;
                        if (!this.mHasSettingsKey) {
                            v2_11 = 2131623965;
                        } else {
                            v2_11 = 2131623970;
                        }
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034123, v2_11, 1, v0);
                        break;
                    case 5:
                        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_9;
                        if (!this.mHasSettingsKey) {
                            v2_9 = 2131623966;
                        } else {
                            v2_9 = 2131623971;
                        }
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034123, v2_9, 1, v0);
                        break;
                    case 6:
                        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_7;
                        if (!this.mHasSettingsKey) {
                            v2_7 = 2131623967;
                        } else {
                            v2_7 = 2131623972;
                        }
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034123, v2_7, 1, v0);
                        break;
                    case 7:
                        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_5;
                        if (!this.mHasSettingsKey) {
                            v2_5 = 2131623968;
                        } else {
                            v2_5 = 2131623973;
                        }
                        v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034123, v2_5, 1, v0);
                        break;
                    default:
                        v2_3 = 0;
                }
                org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_23;
                if (!this.mHasSettingsKey) {
                    v2_23 = 2131623964;
                } else {
                    v2_23 = 2131623969;
                }
                v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034123, v2_23, 1, v0);
            } else {
                if (p9 != 3) {
                    if (this.mHasSettingsKey) {
                        v2_0 = 2131623975;
                    }
                    v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034124, v2_0, 0, v0);
                } else {
                    v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034120, 0, 0, v0);
                }
            }
        } else {
            switch (p9) {
                case 1:
                case 4:
                case 5:
                case 6:
                case 7:
                    org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v2_2;
                    if (this.mFullMode != 1) {
                        v2_2 = 2131034117;
                    } else {
                        v2_2 = 2131034113;
                    }
                    v2_3 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(v2_2, 2131623964, 1, v0);
                    break;
                default:
            }
        }
        return v2_3;
    }

    private int getPointerCount()
    {
        int v0_2;
        if (this.mInputView != null) {
            v0_2 = this.mInputView.getPointerCount();
        } else {
            v0_2 = 0;
        }
        return v0_2;
    }

    private boolean hasVoiceButton(boolean p2)
    {
        if ((!this.mHasVoice) || (p2 == this.mVoiceOnPrimary)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    public static void init(org.pocketworkstation.pckeyboard.LatinIME p5)
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.mInputMethodService = p5;
        android.content.SharedPreferences v0 = android.preference.PreferenceManager.getDefaultSharedPreferences(p5);
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.mLayoutId = Integer.valueOf(v0.getString("pref_keyboard_layout", "0")).intValue();
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.updateSettingsKeyState(v0);
        v0.registerOnSharedPreferenceChangeListener(org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance);
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.mSymbolsId = org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.makeSymbolsId(0);
        org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.mSymbolsShiftedId = org.pocketworkstation.pckeyboard.KeyboardSwitcher.sInstance.makeSymbolsShiftedId(0);
        return;
    }

    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId makeSymbolsId(boolean p5)
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v0_1;
        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v0_0 = 2131623974;
        if (this.mFullMode != 1) {
            if (this.mFullMode != 2) {
                if (this.mHasSettingsKey) {
                    v0_0 = 2131623975;
                }
                v0_1 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034124, v0_0, 0, p5);
            } else {
                v0_1 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034118, 2131623974, 1, p5);
            }
        } else {
            v0_1 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034114, 2131623974, 1, p5);
        }
        return v0_1;
    }

    private org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId makeSymbolsShiftedId(boolean p5)
    {
        org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v0_1;
        if (this.mFullMode <= 0) {
            org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v0_3;
            if (!this.mHasSettingsKey) {
                v0_3 = 2131623974;
            } else {
                v0_3 = 2131623975;
            }
            v0_1 = new org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId(2131034125, v0_3, 0, p5);
        } else {
            v0_1 = 0;
        }
        return v0_1;
    }

    private void setKeyboardMode(int p5, int p6, boolean p7, boolean p8)
    {
        if (this.mInputView != null) {
            this.mMode = p5;
            this.mImeOptions = p6;
            if (p7 != this.mHasVoice) {
                this.setVoiceMode(p7, this.mVoiceOnPrimary);
            }
            this.mIsSymbols = p8;
            this.mInputView.setPreviewEnabled(this.mInputMethodService.getPopupOn());
            org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId v0 = this.getKeyboardId(p5, p6, p8);
            org.pocketworkstation.pckeyboard.LatinKeyboard v1 = this.getKeyboard(v0);
            if (p5 == 3) {
                this.mInputView.setPhoneKeyboard(v1);
            }
            this.mCurrentId = v0;
            this.mInputView.setKeyboard(v1);
            v1.setShiftState(0);
            v1.setImeOptions(this.mInputMethodService.getResources(), this.mMode, p6);
            v1.updateSymbolIcons(this.mIsAutoCompletionActive);
        }
        return;
    }

    private void updateSettingsKeyState(android.content.SharedPreferences p6)
    {
        android.content.res.Resources v0 = this.mInputMethodService.getResources();
        String v1 = p6.getString("settings_key", v0.getString(2131165375));
        if ((!v1.equals(v0.getString(2131165376))) && (!v1.equals(v0.getString(2131165375)))) {
            this.mHasSettingsKey = 0;
        } else {
            this.mHasSettingsKey = 1;
        }
        return;
    }

    public org.pocketworkstation.pckeyboard.LatinKeyboardView getInputView()
    {
        return this.mInputView;
    }

    public int getKeyboardMode()
    {
        return this.mMode;
    }

    public boolean hasDistinctMultitouch()
    {
        if ((this.mInputView == null) || (!this.mInputView.hasDistinctMultitouch())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public boolean isAlphabetMode()
    {
        int v2 = 0;
        if (this.mCurrentId != null) {
            int v0 = this.mCurrentId.mKeyboardMode;
            if ((this.mFullMode <= 0) || (v0 != 2131623964)) {
                int[] v5 = org.pocketworkstation.pckeyboard.KeyboardSwitcher.ALPHABET_MODES;
                int v4_0 = 0;
                while (v4_0 < v5.length) {
                    if (v0 != Integer.valueOf(v5[v4_0]).intValue()) {
                        v4_0++;
                    } else {
                        v2 = 1;
                        break;
                    }
                }
            } else {
                v2 = 1;
            }
        }
        return v2;
    }

    public boolean isFullMode()
    {
        int v0_1;
        if (this.mFullMode <= 0) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isInChordingAutoModeSwitchState()
    {
        int v0_1;
        if (this.mAutoModeSwitchState != 4) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isInMomentaryAutoModeSwitchState()
    {
        int v0_1;
        if (this.mAutoModeSwitchState != 3) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public boolean isVibrateAndSoundFeedbackRequired()
    {
        if ((this.mInputView == null) || (this.mInputView.isInSlidingKeyInput())) {
            int v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        return v0_3;
    }

    public void makeKeyboards(boolean p5)
    {
        java.util.HashMap v1_0;
        int v2 = 1;
        this.mFullMode = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.keyboardMode;
        if ((!this.mHasVoice) || (this.mVoiceOnPrimary)) {
            v1_0 = 0;
        } else {
            v1_0 = 1;
        }
        this.mSymbolsId = this.makeSymbolsId(v1_0);
        if ((!this.mHasVoice) || (this.mVoiceOnPrimary)) {
            v2 = 0;
        }
        this.mSymbolsShiftedId = this.makeSymbolsShiftedId(v2);
        if (p5) {
            this.mKeyboards.clear();
        }
        int v0 = this.mInputMethodService.getMaxWidth();
        if (v0 != this.mLastDisplayWidth) {
            this.mLastDisplayWidth = v0;
            if (!p5) {
                this.mKeyboards.clear();
            }
        }
        return;
    }

    public void onAutoCompletionStateChanged(boolean p3)
    {
        if (p3 != this.mIsAutoCompletionActive) {
            org.pocketworkstation.pckeyboard.LatinKeyboardView v0 = this.getInputView();
            this.mIsAutoCompletionActive = p3;
            v0.invalidateKey(((org.pocketworkstation.pckeyboard.LatinKeyboard) v0.getKeyboard()).onAutoCompletionStateChanged(p3));
        }
        return;
    }

    public void onCancelInput()
    {
        if ((this.mAutoModeSwitchState == 3) && (this.getPointerCount() == 1)) {
            this.mInputMethodService.changeKeyboardMode();
        }
        return;
    }

    public void onKey(int p5)
    {
        switch (this.mAutoModeSwitchState) {
            case 1:
                if ((p5 == 32) || ((p5 == 10) || (p5 < 0))) {
                } else {
                    this.mAutoModeSwitchState = 2;
                }
                break;
            case 2:
                if ((p5 != 10) && (p5 != 32)) {
                } else {
                    this.mInputMethodService.changeKeyboardMode();
                }
                break;
            case 3:
                if (p5 != -2) {
                    if (this.getPointerCount() != 1) {
                        this.mAutoModeSwitchState = 4;
                    } else {
                        this.mInputMethodService.changeKeyboardMode();
                    }
                } else {
                    if (!this.mIsSymbols) {
                        this.mAutoModeSwitchState = 0;
                    } else {
                        this.mAutoModeSwitchState = 1;
                    }
                }
                break;
        }
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p3, String p4)
    {
        if (!"pref_keyboard_layout".equals(p4)) {
            if ("settings_key".equals(p4)) {
                this.updateSettingsKeyState(p3);
                this.recreateInputView();
            }
        } else {
            this.changeLatinKeyboardView(Integer.valueOf(p3.getString(p4, "0")).intValue(), 1);
        }
        return;
    }

    public void recreateInputView()
    {
        this.changeLatinKeyboardView(this.mLayoutId, 1);
        return;
    }

    public void setAltIndicator(boolean p2)
    {
        if (this.mInputView != null) {
            this.mInputView.setAltIndicator(p2);
        }
        return;
    }

    public void setAutoModeSwitchStateMomentary()
    {
        this.mAutoModeSwitchState = 3;
        return;
    }

    public void setCtrlIndicator(boolean p2)
    {
        if (this.mInputView != null) {
            this.mInputView.setCtrlIndicator(p2);
        }
        return;
    }

    public void setFn(boolean p7)
    {
        if (this.mInputView != null) {
            int v1 = this.mInputView.getShiftState();
            if (!p7) {
                this.setKeyboardMode(this.mMode, this.mImeOptions, this.mHasVoice, 0);
                this.mInputView.setShiftState(v1);
            } else {
                org.pocketworkstation.pckeyboard.LatinKeyboard v0 = this.getKeyboard(this.mSymbolsId);
                v0.enableShiftLock();
                this.mCurrentId = this.mSymbolsId;
                this.mInputView.setKeyboard(v0);
                this.mInputView.setShiftState(v1);
            }
        }
        return;
    }

    public void setKeyboardMode(int p4, int p5, boolean p6)
    {
        String v1_0 = 0;
        this.mAutoModeSwitchState = 0;
        if (p4 == 2) {
            v1_0 = 1;
        }
        this.mPreferSymbols = v1_0;
        if (p4 == 2) {
            p4 = 1;
        }
        try {
            this.setKeyboardMode(p4, p5, p6, this.mPreferSymbols);
        } catch (RuntimeException v0) {
            org.pocketworkstation.pckeyboard.LatinImeLogger.logOnException(new StringBuilder().append(p4).append(",").append(p5).append(",").append(this.mPreferSymbols).toString(), v0);
        }
        return;
    }

    public void setLanguageSwitcher(org.pocketworkstation.pckeyboard.LanguageSwitcher p1)
    {
        this.mLanguageSwitcher = p1;
        p1.getInputLocale();
        return;
    }

    public void setMetaIndicator(boolean p2)
    {
        if (this.mInputView != null) {
            this.mInputView.setMetaIndicator(p2);
        }
        return;
    }

    public void setShiftState(int p2)
    {
        if (this.mInputView != null) {
            this.mInputView.setShiftState(p2);
        }
        return;
    }

    public void setVoiceMode(boolean p5, boolean p6)
    {
        if ((p5 != this.mHasVoice) || (p6 != this.mVoiceOnPrimary)) {
            this.mKeyboards.clear();
        }
        this.mHasVoice = p5;
        this.mVoiceOnPrimary = p6;
        this.setKeyboardMode(this.mMode, this.mImeOptions, this.mHasVoice, this.mIsSymbols);
        return;
    }

    public void toggleShift()
    {
        android.content.res.Resources v3_0 = 0;
        if (!this.isAlphabetMode()) {
            if (this.mFullMode <= 0) {
                if ((!org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId.access$000(this.mCurrentId, this.mSymbolsId)) && (org.pocketworkstation.pckeyboard.KeyboardSwitcher$KeyboardId.access$000(this.mCurrentId, this.mSymbolsShiftedId))) {
                    org.pocketworkstation.pckeyboard.LatinKeyboard v1 = this.getKeyboard(this.mSymbolsId);
                    this.mCurrentId = this.mSymbolsId;
                    this.mInputView.setKeyboard(v1);
                    v1.enableShiftLock();
                    v1.setShiftState(0);
                    v1.setImeOptions(this.mInputMethodService.getResources(), this.mMode, this.mImeOptions);
                } else {
                    org.pocketworkstation.pckeyboard.LatinKeyboard v2 = this.getKeyboard(this.mSymbolsShiftedId);
                    this.mCurrentId = this.mSymbolsShiftedId;
                    this.mInputView.setKeyboard(v2);
                    v2.enableShiftLock();
                    v2.setShiftState(2);
                    v2.setImeOptions(this.mInputMethodService.getResources(), this.mMode, this.mImeOptions);
                }
            } else {
                if (!this.mInputView.isShiftAll()) {
                    v3_0 = 1;
                }
                this.mInputView.setShiftState(v3_0);
            }
        }
        return;
    }

    public void toggleSymbols()
    {
        boolean v0_3;
        if (this.mIsSymbols) {
            v0_3 = 0;
        } else {
            v0_3 = 1;
        }
        this.setKeyboardMode(this.mMode, this.mImeOptions, this.mHasVoice, v0_3);
        if ((!this.mIsSymbols) || (this.mPreferSymbols)) {
            this.mAutoModeSwitchState = 0;
        } else {
            this.mAutoModeSwitchState = 1;
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LanguageSwitcher {
    private static final String TAG = "HK/LanguageSwitcher";
    private int mCurrentIndex;
    private String mDefaultInputLanguage;
    private java.util.Locale mDefaultInputLocale;
    private org.pocketworkstation.pckeyboard.LatinIME mIme;
    private java.util.Locale[] mLocales;
    private String[] mSelectedLanguageArray;
    private String mSelectedLanguages;
    private java.util.Locale mSystemLocale;

    public LanguageSwitcher(org.pocketworkstation.pckeyboard.LatinIME p2)
    {
        this.mCurrentIndex = 0;
        this.mIme = p2;
        java.util.Locale[] v0_1 = new java.util.Locale[0];
        this.mLocales = v0_1;
        return;
    }

    private void constructLocales()
    {
        String v2_4 = new java.util.Locale[this.mSelectedLanguageArray.length];
        this.mLocales = v2_4;
        int v0 = 0;
        while (v0 < this.mLocales.length) {
            String v2_5;
            String v1 = this.mSelectedLanguageArray[v0];
            java.util.Locale[] v3 = this.mLocales;
            String v5_1 = v1.substring(0, 2);
            if (v1.length() <= 4) {
                v2_5 = "";
            } else {
                v2_5 = v1.substring(3, 5);
            }
            v3[v0] = new java.util.Locale(v5_1, v2_5);
            v0++;
        }
        return;
    }

    private void loadDefaults()
    {
        String v1_9;
        this.mDefaultInputLocale = this.mIme.getResources().getConfiguration().locale;
        String v0 = this.mDefaultInputLocale.getCountry();
        StringBuilder v2_2 = new StringBuilder().append(this.mDefaultInputLocale.getLanguage());
        if (!android.text.TextUtils.isEmpty(v0)) {
            v1_9 = new StringBuilder().append("_").append(v0).toString();
        } else {
            v1_9 = "";
        }
        this.mDefaultInputLanguage = v2_2.append(v1_9).toString();
        return;
    }

    static String toTitleCase(String p2)
    {
        if (p2.length() != 0) {
            p2 = new StringBuilder().append(Character.toUpperCase(p2.charAt(0))).append(p2.substring(1)).toString();
        }
        return p2;
    }

    public boolean allowAutoCap()
    {
        int v1 = 0;
        String v0 = this.getInputLanguage();
        if (v0.length() > 2) {
            v0 = v0.substring(0, 2);
        }
        if (!org.pocketworkstation.pckeyboard.InputLanguageSelection.NOCAPS_LANGUAGES.contains(v0)) {
            v1 = 1;
        }
        return v1;
    }

    public boolean allowAutoSpace()
    {
        int v1 = 0;
        String v0 = this.getInputLanguage();
        if (v0.length() > 2) {
            v0 = v0.substring(0, 2);
        }
        if (!org.pocketworkstation.pckeyboard.InputLanguageSelection.NOAUTOSPACE_LANGUAGES.contains(v0)) {
            v1 = 1;
        }
        return v1;
    }

    public boolean allowDeadKeys()
    {
        int v1 = 0;
        String v0 = this.getInputLanguage();
        if (v0.length() > 2) {
            v0 = v0.substring(0, 2);
        }
        if (!org.pocketworkstation.pckeyboard.InputLanguageSelection.NODEADKEY_LANGUAGES.contains(v0)) {
            v1 = 1;
        }
        return v1;
    }

    public String[] getEnabledLanguages()
    {
        return this.mSelectedLanguageArray;
    }

    public String getInputLanguage()
    {
        String v0_2;
        if (this.getLocaleCount() != 0) {
            v0_2 = this.mSelectedLanguageArray[this.mCurrentIndex];
        } else {
            v0_2 = this.mDefaultInputLanguage;
        }
        return v0_2;
    }

    public java.util.Locale getInputLocale()
    {
        java.util.Locale v0;
        if (this.getLocaleCount() != 0) {
            v0 = this.mLocales[this.mCurrentIndex];
        } else {
            v0 = this.mDefaultInputLocale;
        }
        java.util.Locale v1_1;
        if (v0 == null) {
            v1_1 = java.util.Locale.getDefault();
        } else {
            v1_1 = v0;
        }
        org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.inputLocale = v1_1;
        return v0;
    }

    public int getLocaleCount()
    {
        return this.mLocales.length;
    }

    public java.util.Locale[] getLocales()
    {
        return this.mLocales;
    }

    public java.util.Locale getNextInputLocale()
    {
        java.util.Locale v0_1;
        if (this.getLocaleCount() != 0) {
            v0_1 = this.mLocales[((this.mCurrentIndex + 1) % this.mLocales.length)];
        } else {
            v0_1 = this.mDefaultInputLocale;
        }
        return v0_1;
    }

    public java.util.Locale getPrevInputLocale()
    {
        java.util.Locale v0_1;
        if (this.getLocaleCount() != 0) {
            v0_1 = this.mLocales[(((this.mCurrentIndex - 1) + this.mLocales.length) % this.mLocales.length)];
        } else {
            v0_1 = this.mDefaultInputLocale;
        }
        return v0_1;
    }

    public java.util.Locale getSystemLocale()
    {
        return this.mSystemLocale;
    }

    public boolean loadLocales(android.content.SharedPreferences p8)
    {
        boolean v3_0 = 0;
        String v2 = p8.getString("selected_languages", 0);
        String v0 = p8.getString("input_language", 0);
        if ((v2 != null) && (v2.length() >= 1)) {
            if (!v2.equals(this.mSelectedLanguages)) {
                this.mSelectedLanguageArray = v2.split(",");
                this.mSelectedLanguages = v2;
                this.constructLocales();
                this.mCurrentIndex = 0;
                if (v0 != null) {
                    this.mCurrentIndex = 0;
                    int v1 = 0;
                    while (v1 < this.mLocales.length) {
                        if (!this.mSelectedLanguageArray[v1].equals(v0)) {
                            v1++;
                        } else {
                            this.mCurrentIndex = v1;
                            break;
                        }
                    }
                }
                v3_0 = 1;
            }
        } else {
            this.loadDefaults();
            if (this.mLocales.length != 0) {
                boolean v3_6 = new java.util.Locale[0];
                this.mLocales = v3_6;
                v3_0 = 1;
            }
        }
        return v3_0;
    }

    public void next()
    {
        this.mCurrentIndex = (this.mCurrentIndex + 1);
        if (this.mCurrentIndex >= this.mLocales.length) {
            this.mCurrentIndex = 0;
        }
        return;
    }

    public void persist()
    {
        android.content.SharedPreferences$Editor v0 = android.preference.PreferenceManager.getDefaultSharedPreferences(this.mIme).edit();
        v0.putString("input_language", this.getInputLanguage());
        org.pocketworkstation.pckeyboard.SharedPreferencesCompat.apply(v0);
        return;
    }

    public void prev()
    {
        this.mCurrentIndex = (this.mCurrentIndex - 1);
        if (this.mCurrentIndex < 0) {
            this.mCurrentIndex = (this.mLocales.length - 1);
        }
        return;
    }

    public void reset()
    {
        this.mCurrentIndex = 0;
        this.mSelectedLanguages = "";
        this.loadLocales(android.preference.PreferenceManager.getDefaultSharedPreferences(this.mIme));
        return;
    }

    public void setSystemLocale(java.util.Locale p1)
    {
        this.mSystemLocale = p1;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinIME$1 extends android.os.Handler {
    final synthetic org.pocketworkstation.pckeyboard.LatinIME this$0;

    LatinIME$1(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.this$0 = p1;
        return;
    }

    public void handleMessage(android.os.Message p5)
    {
        switch (p5.what) {
            case 0:
                org.pocketworkstation.pckeyboard.LatinIME.access$100(this.this$0);
                break;
            case 1:
                if (org.pocketworkstation.pckeyboard.LatinIME.access$300(this.this$0) != null) {
                } else {
                    if (!this.this$0.mKeyboardSwitcher.getInputView().isShown()) {
                        this.sendMessageDelayed(this.obtainMessage(1), 100);
                    } else {
                        org.pocketworkstation.pckeyboard.LatinIME.access$302(this.this$0, new org.pocketworkstation.pckeyboard.Tutorial(this.this$0, this.this$0.mKeyboardSwitcher.getInputView()));
                        org.pocketworkstation.pckeyboard.LatinIME.access$300(this.this$0).start();
                    }
                }
                break;
            case 2:
                this.this$0.updateShiftKeyState(this.this$0.getCurrentInputEditorInfo());
            case 3:
            default:
                break;
            case 4:
                org.pocketworkstation.pckeyboard.LatinIME.access$200(this.this$0);
                break;
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinIME$2 implements java.lang.Runnable {
    final synthetic org.pocketworkstation.pckeyboard.LatinIME this$0;

    LatinIME$2(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.this$0 = p1;
        return;
    }

    public void run()
    {
        org.pocketworkstation.pckeyboard.LatinKeyboardView v1 = this.this$0.mKeyboardSwitcher.getInputView();
        if (v1 != null) {
            android.view.ViewGroup v0_1 = v1.getParent();
            if ((v0_1 != null) && ((v0_1 instanceof android.view.ViewGroup))) {
                ((android.view.ViewGroup) v0_1).removeView(v1);
            }
            this.this$0.setInputView(this.this$0.mKeyboardSwitcher.getInputView());
        }
        this.this$0.setCandidatesViewShown(1);
        this.this$0.updateInputViewShown();
        org.pocketworkstation.pckeyboard.LatinIME.access$400(this.this$0);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinIME$3 extends android.content.BroadcastReceiver {
    final synthetic org.pocketworkstation.pckeyboard.LatinIME this$0;

    LatinIME$3(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onReceive(android.content.Context p2, android.content.Intent p3)
    {
        org.pocketworkstation.pckeyboard.LatinIME.access$600(this.this$0);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinIME$4 implements android.content.DialogInterface$OnClickListener {
    final synthetic org.pocketworkstation.pckeyboard.LatinIME this$0;

    LatinIME$4(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.content.DialogInterface p3, int p4)
    {
        p3.dismiss();
        switch (p4) {
            case 0:
                ((android.view.inputmethod.InputMethodManager) this.this$0.getSystemService("input_method")).showInputMethodPicker();
                break;
            case 1:
                this.this$0.launchSettings();
                break;
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
synthetic class LatinIME$5 {
    static final synthetic int[] $SwitchMap$org$pocketworkstation$pckeyboard$TextEntryState$State;

    static LatinIME$5()
    {
        NoSuchFieldError v0_3 = new int[org.pocketworkstation.pckeyboard.TextEntryState$State.values().length];
        org.pocketworkstation.pckeyboard.LatinIME$5.$SwitchMap$org$pocketworkstation$pckeyboard$TextEntryState$State = v0_3;
        try {
            org.pocketworkstation.pckeyboard.TextEntryState$State.ACCEPTED_DEFAULT.ordinal()[int v1_3] = 1;
            try {
                org.pocketworkstation.pckeyboard.TextEntryState$State.SPACE_AFTER_PICKED.ordinal()[int v1_1] = 2;
            } catch (NoSuchFieldError v0) {
            }
            return;
        } catch (NoSuchFieldError v0) {
        }
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIME$MyInputMethodImpl extends android.inputmethodservice.InputMethodService$InputMethodImpl {
    final synthetic org.pocketworkstation.pckeyboard.LatinIME this$0;

    public LatinIME$MyInputMethodImpl(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.this$0 = p1;
        super(p1);
        return;
    }

    public void attachToken(android.os.IBinder p4)
    {
        super.attachToken(p4);
        android.util.Log.i("PCKeyboardIME", new StringBuilder().append("attachToken ").append(p4).toString());
        if (this.this$0.mToken == null) {
            this.this$0.mToken = p4;
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public abstract class LatinIME$WordAlternatives {
    protected CharSequence mChosenWord;

    public LatinIME$WordAlternatives()
    {
        return;
    }

    public LatinIME$WordAlternatives(CharSequence p1)
    {
        this.mChosenWord = p1;
        return;
    }

    public abstract java.util.List getAlternatives();

    public CharSequence getChosenWord()
    {
        return this.mChosenWord;
    }

    public abstract CharSequence getOriginalWord();

    public int hashCode()
    {
        return this.mChosenWord.hashCode();
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIMEBackupAgent extends android.app.backup.BackupAgentHelper {

    public LatinIMEBackupAgent()
    {
        return;
    }

    public void onCreate()
    {
        String[] v2_1 = new String[1];
        v2_1[0] = new StringBuilder().append(this.getPackageName()).append("_preferences").toString();
        this.addHelper("shared_pref", new android.app.backup.SharedPreferencesBackupHelper(this, v2_1));
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIMEDebugSettings extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {
    private static final String DEBUG_MODE_KEY = "debug_mode";
    private static final String TAG = "LatinIMEDebugSettings";
    private android.preference.CheckBoxPreference mDebugMode;

    public LatinIMEDebugSettings()
    {
        return;
    }

    private void updateDebugMode()
    {
        if (this.mDebugMode != null) {
            boolean v2 = this.mDebugMode.isChecked();
            try {
                String v3 = new StringBuilder().append("Version ").append(this.getPackageManager().getPackageInfo(this.getPackageName(), 0).versionName).toString();
            } catch (android.content.pm.PackageManager$NameNotFoundException v0) {
                android.util.Log.e("LatinIMEDebugSettings", "Could not find version info.");
            }
            if (v2) {
                this.mDebugMode.setTitle(this.getResources().getString(2131165581));
                this.mDebugMode.setSummary(v3);
            } else {
                this.mDebugMode.setTitle(v3);
                this.mDebugMode.setSummary("");
            }
        }
        return;
    }

    protected void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.addPreferencesFromResource(2131034139);
        this.getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
        this.mDebugMode = ((android.preference.CheckBoxPreference) this.findPreference("debug_mode"));
        this.updateDebugMode();
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p4, String p5)
    {
        if ((p5.equals("debug_mode")) && (this.mDebugMode != null)) {
            this.mDebugMode.setChecked(p4.getBoolean("debug_mode", 0));
            this.updateDebugMode();
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIMESettings extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener, android.content.DialogInterface$OnDismissListener {
    static java.util.Map DATETIME_VARIATIONS = None;
    static java.util.Map INPUT_CLASSES = None;
    static final String INPUT_CONNECTION_INFO = "input_connection_info";
    static java.util.Map NUMBER_VARIATIONS = None;
    private static final String PREDICTION_SETTINGS_KEY = "prediction_settings";
    static final String PREF_SETTINGS_KEY = "settings_key";
    private static final String QUICK_FIXES_KEY = "quick_fixes";
    private static final String TAG = "LatinIMESettings";
    static java.util.Map TEXT_VARIATIONS = None;
    private static final int VOICE_INPUT_CONFIRM_DIALOG = 0;
    private static final String VOICE_SETTINGS_KEY = "voice_mode";
    private android.preference.Preference mInputConnectionInfo;
    private android.preference.ListPreference mKeyboardModeLandscapePreference;
    private android.preference.ListPreference mKeyboardModePortraitPreference;
    private boolean mOkClicked;
    private android.preference.CheckBoxPreference mQuickFixes;
    private android.preference.ListPreference mSettingsKeyPreference;
    private String mVoiceModeOff;
    private boolean mVoiceOn;
    private android.preference.ListPreference mVoicePreference;

    static LatinIMESettings()
    {
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.LatinIMESettings.DATETIME_VARIATIONS = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.LatinIMESettings.NUMBER_VARIATIONS = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.put(Integer.valueOf(4), "DATETIME");
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.put(Integer.valueOf(2), "NUMBER");
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.put(Integer.valueOf(3), "PHONE");
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.put(Integer.valueOf(1), "TEXT");
        org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.put(Integer.valueOf(0), "NULL");
        org.pocketworkstation.pckeyboard.LatinIMESettings.DATETIME_VARIATIONS.put(Integer.valueOf(16), "DATE");
        org.pocketworkstation.pckeyboard.LatinIMESettings.DATETIME_VARIATIONS.put(Integer.valueOf(32), "TIME");
        org.pocketworkstation.pckeyboard.LatinIMESettings.NUMBER_VARIATIONS.put(Integer.valueOf(16), "PASSWORD");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(32), "EMAIL_ADDRESS");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(48), "EMAIL_SUBJECT");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(176), "FILTER");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(80), "LONG_MESSAGE");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(128), "PASSWORD");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(96), "PERSON_NAME");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(192), "PHONETIC");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(112), "POSTAL_ADDRESS");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(64), "SHORT_MESSAGE");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(16), "URI");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(144), "VISIBLE_PASSWORD");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(160), "WEB_EDIT_TEXT");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(208), "WEB_EMAIL_ADDRESS");
        org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.put(Integer.valueOf(224), "WEB_PASSWORD");
        return;
    }

    public LatinIMESettings()
    {
        this.mOkClicked = 0;
        return;
    }

    private static void addBit(StringBuffer p1, int p2, String p3)
    {
        if (p2 != 0) {
            p1.append("|");
            p1.append(p3);
        }
        return;
    }

    private static String inputTypeDesc(int p8)
    {
        int v0 = (p8 & 15);
        int v2 = (p8 & 16773120);
        int v4 = (p8 & 4080);
        StringBuffer v3_1 = new StringBuffer();
        String v1_1 = ((String) org.pocketworkstation.pckeyboard.LatinIMESettings.INPUT_CLASSES.get(Integer.valueOf(v0)));
        if (v1_1 == null) {
            v1_1 = "?";
        }
        v3_1.append(v1_1);
        if (v0 != 1) {
            if (v0 != 2) {
                if (v0 == 4) {
                    String v5_1 = ((String) org.pocketworkstation.pckeyboard.LatinIMESettings.DATETIME_VARIATIONS.get(Integer.valueOf(v4)));
                    if (v5_1 != null) {
                        v3_1.append(".");
                        v3_1.append(v5_1);
                    }
                }
            } else {
                String v5_3 = ((String) org.pocketworkstation.pckeyboard.LatinIMESettings.NUMBER_VARIATIONS.get(Integer.valueOf(v4)));
                if (v5_3 != null) {
                    v3_1.append(".");
                    v3_1.append(v5_3);
                }
                org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (v2 & 8192), "DECIMAL");
                org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (v2 & 4096), "SIGNED");
            }
        } else {
            String v5_5 = ((String) org.pocketworkstation.pckeyboard.LatinIMESettings.TEXT_VARIATIONS.get(Integer.valueOf(v4)));
            if (v5_5 != null) {
                v3_1.append(".");
                v3_1.append(v5_5);
            }
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (65536 & v2), "AUTO_COMPLETE");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (32768 & v2), "AUTO_CORRECT");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (v2 & 4096), "CAP_CHARACTERS");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (v2 & 16384), "CAP_SENTENCES");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (v2 & 8192), "CAP_WORDS");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (262144 & v2), "IME_MULTI_LINE");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (131072 & v2), "MULTI_LINE");
            org.pocketworkstation.pckeyboard.LatinIMESettings.addBit(v3_1, (524288 & v2), "NO_SUGGESTIONS");
        }
        return v3_1.toString();
    }

    private void showVoiceConfirmation()
    {
        this.mOkClicked = 0;
        this.showDialog(0);
        return;
    }

    private void updateSummaries()
    {
        this.mSettingsKeyPreference.setSummary(this.getResources().getStringArray(2131492865)[this.mSettingsKeyPreference.findIndexOfValue(this.mSettingsKeyPreference.getValue())]);
        android.preference.Preference v1_0 = this.mInputConnectionInfo;
        Object[] v3_2 = new Object[2];
        v3_2[0] = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.editorPackageName;
        v3_2[1] = org.pocketworkstation.pckeyboard.LatinIMESettings.inputTypeDesc(org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.editorInputType);
        v1_0.setSummary(String.format("%s type=%s", v3_2));
        return;
    }

    private void updateVoiceModeSummary()
    {
        this.mVoicePreference.setSummary(this.getResources().getStringArray(2131492870)[this.mVoicePreference.findIndexOfValue(this.mVoicePreference.getValue())]);
        return;
    }

    private void updateVoicePreference()
    {
        return;
    }

    protected void onCreate(android.os.Bundle p4)
    {
        int v1_21;
        super.onCreate(p4);
        this.addPreferencesFromResource(2131034136);
        this.mQuickFixes = ((android.preference.CheckBoxPreference) this.findPreference("quick_fixes"));
        this.mVoicePreference = ((android.preference.ListPreference) this.findPreference("voice_mode"));
        this.mSettingsKeyPreference = ((android.preference.ListPreference) this.findPreference("settings_key"));
        this.mInputConnectionInfo = this.findPreference("input_connection_info");
        this.mKeyboardModePortraitPreference = ((android.preference.ListPreference) this.findPreference("pref_keyboard_mode_portrait"));
        this.mKeyboardModeLandscapePreference = ((android.preference.ListPreference) this.findPreference("pref_keyboard_mode_landscape"));
        android.content.SharedPreferences v0 = this.getPreferenceManager().getSharedPreferences();
        v0.registerOnSharedPreferenceChangeListener(this);
        this.mVoiceModeOff = this.getString(2131165477);
        if (v0.getString("voice_mode", this.mVoiceModeOff).equals(this.mVoiceModeOff)) {
            v1_21 = 0;
        } else {
            v1_21 = 1;
        }
        this.mVoiceOn = v1_21;
        return;
    }

    protected android.app.Dialog onCreateDialog(int p4)
    {
        android.util.Log.e("LatinIMESettings", new StringBuilder().append("unknown dialog ").append(p4).toString());
        return 0;
    }

    protected void onDestroy()
    {
        this.getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);
        super.onDestroy();
        return;
    }

    public void onDismiss(android.content.DialogInterface p3)
    {
        if (!this.mOkClicked) {
            this.mVoicePreference.setValue(this.mVoiceModeOff);
        }
        return;
    }

    protected void onResume()
    {
        super.onResume();
        if (android.text.AutoText.getSize(this.getListView()) < 1) {
            ((android.preference.PreferenceGroup) this.findPreference("prediction_settings")).removePreference(this.mQuickFixes);
        }
        android.util.Log.i("LatinIMESettings", new StringBuilder().append("compactModeEnabled=").append(org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.compactModeEnabled).toString());
        if (!org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.compactModeEnabled) {
            CharSequence[] v3 = this.mKeyboardModePortraitPreference.getEntries();
            CharSequence[] v4 = this.mKeyboardModePortraitPreference.getEntryValues();
            if (v3.length > 2) {
                CharSequence[] v1 = new CharSequence[2];
                v1[0] = v3[0];
                v1[1] = v3[2];
                CharSequence[] v2 = new CharSequence[2];
                v2[0] = v4[0];
                v2[1] = v4[2];
                this.mKeyboardModePortraitPreference.setEntries(v1);
                this.mKeyboardModePortraitPreference.setEntryValues(v2);
                this.mKeyboardModeLandscapePreference.setEntries(v1);
                this.mKeyboardModeLandscapePreference.setEntryValues(v2);
            }
        }
        this.updateSummaries();
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p3, String p4)
    {
        new android.app.backup.BackupManager(this).dataChanged();
        if ((p4.equals("voice_mode")) && ((!this.mVoiceOn) && (!p3.getString("voice_mode", this.mVoiceModeOff).equals(this.mVoiceModeOff)))) {
            this.showVoiceConfirmation();
        }
        int v0_7;
        if (p3.getString("voice_mode", this.mVoiceModeOff).equals(this.mVoiceModeOff)) {
            v0_7 = 0;
        } else {
            v0_7 = 1;
        }
        this.mVoiceOn = v0_7;
        this.updateVoiceModeSummary();
        this.updateSummaries();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIMEUtil$GCUtils {
    private static final long GC_INTERVAL = 1000;
    public static final int GC_TRY_COUNT = 2;
    public static final int GC_TRY_LOOP_MAX = 5;
    private static final String TAG = "GCUtils";
    private static org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils sInstance;
    private int mGCTryCount;

    static LatinIMEUtil$GCUtils()
    {
        org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils.sInstance = new org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils();
        return;
    }

    public LatinIMEUtil$GCUtils()
    {
        this.mGCTryCount = 0;
        return;
    }

    public static org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils getInstance()
    {
        return org.pocketworkstation.pckeyboard.LatinIMEUtil$GCUtils.sInstance;
    }

    public void reset()
    {
        this.mGCTryCount = 0;
        return;
    }

    public boolean tryGCOrWait(String p5, Throwable p6)
    {
        int v1 = 0;
        if (this.mGCTryCount == 0) {
            System.gc();
        }
        String v2_3 = (this.mGCTryCount + 1);
        this.mGCTryCount = v2_3;
        if (v2_3 <= 2) {
            try {
                Thread.sleep(1000);
                v1 = 1;
            } catch (InterruptedException v0) {
                android.util.Log.e("GCUtils", "Sleep was interrupted.");
                org.pocketworkstation.pckeyboard.LatinImeLogger.logOnException(p5, p6);
            }
        } else {
            org.pocketworkstation.pckeyboard.LatinImeLogger.logOnException(p5, p6);
        }
        return v1;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinIMEUtil$RingCharBuffer {
    static final int BUFSIZE = 20;
    private static final int INVALID_COORDINATE = 254;
    private static final char PLACEHOLDER_DELIMITER_CHAR = 65532;
    private static org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer sRingCharBuffer;
    private char[] mCharBuf;
    private android.content.Context mContext;
    private boolean mEnabled;
    private int mEnd;
    int mLength;
    private int[] mXBuf;
    private int[] mYBuf;

    static LatinIMEUtil$RingCharBuffer()
    {
        org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer.sRingCharBuffer = new org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer();
        return;
    }

    private LatinIMEUtil$RingCharBuffer()
    {
        this.mEnabled = 0;
        this.mEnd = 0;
        this.mLength = 0;
        int[] v0_2 = new char[20];
        this.mCharBuf = v0_2;
        int[] v0_3 = new int[20];
        this.mXBuf = v0_3;
        int[] v0_1 = new int[20];
        this.mYBuf = v0_1;
        return;
    }

    public static org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer getInstance()
    {
        return org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer.sRingCharBuffer;
    }

    public static org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer init(android.content.Context p1, boolean p2)
    {
        org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer.sRingCharBuffer.mContext = p1;
        org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer.sRingCharBuffer.mEnabled = p2;
        return org.pocketworkstation.pckeyboard.LatinIMEUtil$RingCharBuffer.sRingCharBuffer;
    }

    private int normalize(int p2)
    {
        int v0 = (p2 % 20);
        if (v0 < 0) {
            v0 += 20;
        }
        return v0;
    }

    public char getLastChar()
    {
        char v0_2;
        if (this.mLength >= 1) {
            v0_2 = this.mCharBuf[this.normalize((this.mEnd - 1))];
        } else {
            v0_2 = 65532;
        }
        return v0_2;
    }

    public String getLastString()
    {
        StringBuffer v2_1 = new StringBuffer();
        int v1 = 0;
        while (v1 < this.mLength) {
            char v0 = this.mCharBuf[this.normalize(((this.mEnd - 1) - v1))];
            if (((org.pocketworkstation.pckeyboard.LatinIME) this.mContext).isWordSeparator(v0)) {
                break;
            }
            v2_1.append(v0);
            v1++;
        }
        return v2_1.reverse().toString();
    }

    public int getPreviousX(char p4, int p5)
    {
        int v1_3;
        int v0 = this.normalize(((this.mEnd - 2) - p5));
        if ((this.mLength > p5) && (Character.toLowerCase(p4) == Character.toLowerCase(this.mCharBuf[v0]))) {
            v1_3 = this.mXBuf[v0];
        } else {
            v1_3 = -2;
        }
        return v1_3;
    }

    public int getPreviousY(char p4, int p5)
    {
        int v1_3;
        int v0 = this.normalize(((this.mEnd - 2) - p5));
        if ((this.mLength > p5) && (Character.toLowerCase(p4) == Character.toLowerCase(this.mCharBuf[v0]))) {
            v1_3 = this.mYBuf[v0];
        } else {
            v1_3 = -2;
        }
        return v1_3;
    }

    public char pop()
    {
        char v0_2;
        if (this.mLength >= 1) {
            this.mEnd = this.normalize((this.mEnd - 1));
            this.mLength = (this.mLength - 1);
            v0_2 = this.mCharBuf[this.mEnd];
        } else {
            v0_2 = 65532;
        }
        return v0_2;
    }

    public void push(char p3, int p4, int p5)
    {
        if (this.mEnabled) {
            this.mCharBuf[this.mEnd] = p3;
            this.mXBuf[this.mEnd] = p4;
            this.mYBuf[this.mEnd] = p5;
            this.mEnd = this.normalize((this.mEnd + 1));
            if (this.mLength < 20) {
                this.mLength = (this.mLength + 1);
            }
        }
        return;
    }

    public void reset()
    {
        this.mLength = 0;
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinIMEUtil {

    public LatinIMEUtil()
    {
        return;
    }

    public static void cancelTask(android.os.AsyncTask p2, boolean p3)
    {
        if ((p2 != null) && (p2.getStatus() != android.os.AsyncTask$Status.FINISHED)) {
            p2.cancel(p3);
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class LatinImeLogger implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {

    public LatinImeLogger()
    {
        return;
    }

    public static void commit()
    {
        return;
    }

    public static void init(android.content.Context p0)
    {
        return;
    }

    public static void logOnAutoSuggestion(String p0, String p1)
    {
        return;
    }

    public static void logOnAutoSuggestionCanceled()
    {
        return;
    }

    public static void logOnDelete()
    {
        return;
    }

    public static void logOnException(String p0, Throwable p1)
    {
        return;
    }

    public static void logOnInputChar()
    {
        return;
    }

    public static void logOnManualSuggestion(String p0, String p1, int p2, java.util.List p3)
    {
        return;
    }

    public static void logOnWarning(String p0)
    {
        return;
    }

    public static void onAddSuggestedWord(String p0, int p1, org.pocketworkstation.pckeyboard.Dictionary$DataType p2)
    {
        return;
    }

    public static void onDestroy()
    {
        return;
    }

    public static void onSetKeyboard(org.pocketworkstation.pckeyboard.Keyboard p0)
    {
        return;
    }

    public static void onStartSuggestion(CharSequence p0)
    {
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p1, String p2)
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinKeyboard$SlidingLocaleDrawable extends android.graphics.drawable.Drawable {
    private final android.graphics.drawable.Drawable mBackground;
    private String mCurrentLanguage;
    private int mDiff;
    private final int mHeight;
    private boolean mHitThreshold;
    private final android.graphics.drawable.Drawable mLeftDrawable;
    private final int mMiddleX;
    private String mNextLanguage;
    private String mPrevLanguage;
    private final android.graphics.drawable.Drawable mRightDrawable;
    private final android.text.TextPaint mTextPaint;
    private final int mThreshold;
    private final int mWidth;
    final synthetic org.pocketworkstation.pckeyboard.LatinKeyboard this$0;

    public LatinKeyboard$SlidingLocaleDrawable(org.pocketworkstation.pckeyboard.LatinKeyboard p4, android.graphics.drawable.Drawable p5, int p6, int p7)
    {
        this.this$0 = p4;
        this.mBackground = p5;
        org.pocketworkstation.pckeyboard.LatinKeyboard.access$200(p4, this.mBackground);
        this.mWidth = p6;
        this.mHeight = p7;
        this.mTextPaint = new android.text.TextPaint();
        this.mTextPaint.setTextSize(((float) org.pocketworkstation.pckeyboard.LatinKeyboard.access$300(p4, 16973892, 18)));
        this.mTextPaint.setColor(org.pocketworkstation.pckeyboard.LatinKeyboard.access$400(p4).getColor(2131296259));
        this.mTextPaint.setTextAlign(android.graphics.Paint$Align.CENTER);
        this.mTextPaint.setAlpha(255);
        this.mTextPaint.setAntiAlias(1);
        this.mMiddleX = ((this.mWidth - this.mBackground.getIntrinsicWidth()) / 2);
        this.mLeftDrawable = org.pocketworkstation.pckeyboard.LatinKeyboard.access$400(p4).getDrawable(2130837573);
        this.mRightDrawable = org.pocketworkstation.pckeyboard.LatinKeyboard.access$400(p4).getDrawable(2130837574);
        this.mThreshold = android.view.ViewConfiguration.get(org.pocketworkstation.pckeyboard.LatinKeyboard.access$500(p4)).getScaledTouchSlop();
        return;
    }

    static synthetic void access$000(org.pocketworkstation.pckeyboard.LatinKeyboard$SlidingLocaleDrawable p0, int p1)
    {
        p0.setDiff(p1);
        return;
    }

    private String getLanguageName(java.util.Locale p2)
    {
        return org.pocketworkstation.pckeyboard.LanguageSwitcher.toTitleCase(p2.getDisplayLanguage(p2));
    }

    private void setDiff(int p3)
    {
        if (p3 != 2147483647) {
            this.mDiff = p3;
            if (this.mDiff > this.mWidth) {
                this.mDiff = this.mWidth;
            }
            if (this.mDiff < (- this.mWidth)) {
                this.mDiff = (- this.mWidth);
            }
            if (Math.abs(this.mDiff) > this.mThreshold) {
                this.mHitThreshold = 1;
            }
            this.invalidateSelf();
        } else {
            this.mHitThreshold = 0;
            this.mCurrentLanguage = 0;
        }
        return;
    }

    public void draw(android.graphics.Canvas p13)
    {
        p13.save();
        if (this.mHitThreshold) {
            android.text.TextPaint v5 = this.mTextPaint;
            int v7 = this.mWidth;
            int v1 = this.mDiff;
            android.graphics.drawable.Drawable v3 = this.mLeftDrawable;
            android.graphics.drawable.Drawable v6 = this.mRightDrawable;
            p13.clipRect(0, 0, v7, this.mHeight);
            if (this.mCurrentLanguage == null) {
                org.pocketworkstation.pckeyboard.LanguageSwitcher v4 = org.pocketworkstation.pckeyboard.LatinKeyboard.access$600(this.this$0);
                this.mCurrentLanguage = this.getLanguageName(v4.getInputLocale());
                this.mNextLanguage = this.getLanguageName(v4.getNextInputLocale());
                this.mPrevLanguage = this.getLanguageName(v4.getPrevInputLocale());
            }
            float v0 = ((((float) this.mHeight) * 1058642330) - v5.descent());
            v5.setColor(org.pocketworkstation.pckeyboard.LatinKeyboard.access$400(this.this$0).getColor(2131296265));
            p13.drawText(this.mCurrentLanguage, ((float) ((v7 / 2) + v1)), v0, v5);
            p13.drawText(this.mNextLanguage, ((float) (v1 - (v7 / 2))), v0, v5);
            p13.drawText(this.mPrevLanguage, ((float) ((v1 + v7) + (v7 / 2))), v0, v5);
            org.pocketworkstation.pckeyboard.LatinKeyboard.access$200(this.this$0, v3);
            v6.setBounds((v7 - v6.getIntrinsicWidth()), 0, v7, v6.getIntrinsicHeight());
            v3.draw(p13);
            v6.draw(p13);
        }
        if (this.mBackground != null) {
            p13.translate(((float) this.mMiddleX), 0);
            this.mBackground.draw(p13);
        }
        p13.restore();
        return;
    }

    public int getIntrinsicHeight()
    {
        return this.mHeight;
    }

    public int getIntrinsicWidth()
    {
        return this.mWidth;
    }

    public int getOpacity()
    {
        return -3;
    }

    public void setAlpha(int p1)
    {
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter p1)
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinKeyboardBaseView$1 extends android.view.GestureDetector$SimpleOnGestureListener {
    final synthetic org.pocketworkstation.pckeyboard.LatinKeyboardBaseView this$0;

    LatinKeyboardBaseView$1(org.pocketworkstation.pckeyboard.LatinKeyboardBaseView p1)
    {
        this.this$0 = p1;
        return;
    }

    public boolean onFling(android.view.MotionEvent p12, android.view.MotionEvent p13, float p14, float p15)
    {
        int v9_1;
        float v0 = Math.abs(p14);
        float v1 = Math.abs(p15);
        float v2 = (p13.getX() - p12.getX());
        float v3 = (p13.getY() - p12.getY());
        org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$300(this.this$0).computeCurrentVelocity(1000);
        float v4 = org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$300(this.this$0).getXVelocity();
        float v5 = org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$300(this.this$0).getYVelocity();
        int v6 = Math.min((this.this$0.getWidth() / 3), (this.this$0.getHeight() / 3));
        if ((p14 <= ((float) org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$400(this.this$0))) || ((v1 >= v0) || (v2 <= ((float) v6)))) {
            if ((p14 >= ((float) (- org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$400(this.this$0)))) || ((v1 >= v0) || (v2 >= ((float) (- v6))))) {
                if ((p15 >= ((float) (- org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$400(this.this$0)))) || ((v0 >= v1) || (v3 >= ((float) (- v6))))) {
                    if ((p15 <= ((float) org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$400(this.this$0))) || ((v0 >= (v1 / 1073741824)) || ((v3 <= ((float) v6)) || ((!org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$500(this.this$0)) || ((v5 < (p15 / 1082130432)) || (!this.this$0.swipeDown())))))) {
                        v9_1 = 0;
                    } else {
                        v9_1 = 1;
                    }
                } else {
                    if ((!org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$500(this.this$0)) || ((v5 > (p15 / 1082130432)) || (!this.this$0.swipeUp()))) {
                    } else {
                        v9_1 = 1;
                    }
                }
            } else {
                if ((!org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$500(this.this$0)) || ((v4 > (p14 / 1082130432)) || (!this.this$0.swipeLeft()))) {
                } else {
                    v9_1 = 1;
                }
            }
        } else {
            if ((!org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$500(this.this$0)) || ((v4 < (p14 / 1082130432)) || (!this.this$0.swipeRight()))) {
            } else {
                v9_1 = 1;
            }
        }
        return v9_1;
    }
}
package org.pocketworkstation.pckeyboard;
public interface LatinKeyboardBaseView$OnKeyboardActionListener {

    public abstract void onCancel();

    public abstract void onKey();

    public abstract void onPress();

    public abstract void onRelease();

    public abstract void onText();

    public abstract boolean swipeDown();

    public abstract boolean swipeLeft();

    public abstract boolean swipeRight();

    public abstract boolean swipeUp();
}
package org.pocketworkstation.pckeyboard;
 class LatinKeyboardBaseView$PointerQueue {
    private java.util.LinkedList mQueue;

    LatinKeyboardBaseView$PointerQueue()
    {
        this.mQueue = new java.util.LinkedList();
        return;
    }

    public void add(org.pocketworkstation.pckeyboard.PointerTracker p2)
    {
        this.mQueue.add(p2);
        return;
    }

    public boolean isInSlidingKeyInput()
    {
        int v1_2 = this.mQueue.iterator();
        while (v1_2.hasNext()) {
            if (((org.pocketworkstation.pckeyboard.PointerTracker) v1_2.next()).isInSlidingKeyInput()) {
                int v1_1 = 1;
            }
            return v1_1;
        }
        v1_1 = 0;
        return v1_1;
    }

    public int lastIndexOf(org.pocketworkstation.pckeyboard.PointerTracker p5)
    {
        java.util.LinkedList v1 = this.mQueue;
        int v0 = (v1.size() - 1);
        while (v0 >= 0) {
            if (((org.pocketworkstation.pckeyboard.PointerTracker) v1.get(v0)) != p5) {
                v0--;
            }
            return v0;
        }
        v0 = -1;
        return v0;
    }

    public void releaseAllPointersExcept(org.pocketworkstation.pckeyboard.PointerTracker p5, long p6)
    {
        java.util.LinkedList v1_1 = this.mQueue.iterator();
        while (v1_1.hasNext()) {
            org.pocketworkstation.pckeyboard.PointerTracker v0_1 = ((org.pocketworkstation.pckeyboard.PointerTracker) v1_1.next());
            if (v0_1 != p5) {
                v0_1.onUpEvent(v0_1.getLastX(), v0_1.getLastY(), p6);
                v0_1.setAlreadyProcessed();
            }
        }
        this.mQueue.clear();
        if (p5 != null) {
            this.mQueue.add(p5);
        }
        return;
    }

    public void releaseAllPointersOlderThan(org.pocketworkstation.pckeyboard.PointerTracker p7, long p8)
    {
        java.util.LinkedList v1 = this.mQueue;
        int v0 = 0;
        org.pocketworkstation.pckeyboard.PointerTracker v2_1 = ((org.pocketworkstation.pckeyboard.PointerTracker) v1.get(0));
        while (v2_1 != p7) {
            if (!v2_1.isModifier()) {
                v2_1.onUpEvent(v2_1.getLastX(), v2_1.getLastY(), p8);
                v2_1.setAlreadyProcessed();
                v1.remove(v0);
            } else {
                v0++;
            }
            if (v1.isEmpty()) {
                break;
            }
            v2_1 = ((org.pocketworkstation.pckeyboard.PointerTracker) v1.get(v0));
        }
        return;
    }

    public void remove(org.pocketworkstation.pckeyboard.PointerTracker p2)
    {
        this.mQueue.remove(p2);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class LatinKeyboardBaseView$UIHandler extends android.os.Handler {
    private static final int MSG_DISMISS_PREVIEW = 2;
    private static final int MSG_LONGPRESS_KEY = 4;
    private static final int MSG_POPUP_PREVIEW = 1;
    private static final int MSG_REPEAT_KEY = 3;
    private boolean mInKeyRepeat;
    final synthetic org.pocketworkstation.pckeyboard.LatinKeyboardBaseView this$0;

    LatinKeyboardBaseView$UIHandler(org.pocketworkstation.pckeyboard.LatinKeyboardBaseView p1)
    {
        this.this$0 = p1;
        return;
    }

    public void cancelAllMessages()
    {
        this.cancelKeyTimers();
        this.cancelPopupPreview();
        this.cancelDismissPreview();
        return;
    }

    public void cancelDismissPreview()
    {
        this.removeMessages(2);
        return;
    }

    public void cancelKeyRepeatTimer()
    {
        this.mInKeyRepeat = 0;
        this.removeMessages(3);
        return;
    }

    public void cancelKeyTimers()
    {
        this.cancelKeyRepeatTimer();
        this.cancelLongPressTimer();
        return;
    }

    public void cancelLongPressTimer()
    {
        this.removeMessages(4);
        return;
    }

    public void cancelPopupPreview()
    {
        this.removeMessages(1);
        return;
    }

    public void dismissPreview(long p2)
    {
        if (this.this$0.mPreviewPopup.isShowing()) {
            this.sendMessageDelayed(this.obtainMessage(2), p2);
        }
        return;
    }

    public void handleMessage(android.os.Message p5)
    {
        switch (p5.what) {
            case 1:
                org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$000(this.this$0, p5.arg1, ((org.pocketworkstation.pckeyboard.PointerTracker) p5.obj));
                break;
            case 2:
                this.this$0.mPreviewPopup.dismiss();
                break;
            case 3:
                org.pocketworkstation.pckeyboard.PointerTracker v0_3 = ((org.pocketworkstation.pckeyboard.PointerTracker) p5.obj);
                v0_3.repeatKey(p5.arg1);
                this.startKeyRepeatTimer(((long) org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$100(this.this$0)), p5.arg1, v0_3);
                break;
            case 4:
                org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$200(this.this$0, p5.arg1, ((org.pocketworkstation.pckeyboard.PointerTracker) p5.obj));
                break;
        }
        return;
    }

    public boolean isInKeyRepeat()
    {
        return this.mInKeyRepeat;
    }

    public void popupPreview(long p4, int p6, org.pocketworkstation.pckeyboard.PointerTracker p7)
    {
        this.removeMessages(1);
        if ((!this.this$0.mPreviewPopup.isShowing()) || (this.this$0.mPreviewText.getVisibility() != 0)) {
            this.sendMessageDelayed(this.obtainMessage(1, p6, 0, p7), p4);
        } else {
            org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.access$000(this.this$0, p6, p7);
        }
        return;
    }

    public void startKeyRepeatTimer(long p4, int p6, org.pocketworkstation.pckeyboard.PointerTracker p7)
    {
        this.mInKeyRepeat = 1;
        this.sendMessageDelayed(this.obtainMessage(3, p6, 0, p7), p4);
        return;
    }

    public void startLongPressTimer(long p4, int p6, org.pocketworkstation.pckeyboard.PointerTracker p7)
    {
        this.removeMessages(4);
        this.sendMessageDelayed(this.obtainMessage(4, p6, 0, p7), p4);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class Main$1 implements android.view.View$OnClickListener {
    final synthetic org.pocketworkstation.pckeyboard.Main this$0;

    Main$1(org.pocketworkstation.pckeyboard.Main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p4)
    {
        this.this$0.startActivityForResult(new android.content.Intent("android.settings.INPUT_METHOD_SETTINGS"), 0);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class Main$2 implements android.view.View$OnClickListener {
    final synthetic org.pocketworkstation.pckeyboard.Main this$0;

    Main$2(org.pocketworkstation.pckeyboard.Main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p4)
    {
        ((android.view.inputmethod.InputMethodManager) this.this$0.getSystemService("input_method")).showInputMethodPicker();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class Main$3 implements android.view.View$OnClickListener {
    final synthetic org.pocketworkstation.pckeyboard.Main this$0;
    final synthetic android.app.Activity val$that;

    Main$3(org.pocketworkstation.pckeyboard.Main p1, android.app.Activity p2)
    {
        this.this$0 = p1;
        this.val$that = p2;
        return;
    }

    public void onClick(android.view.View p5)
    {
        this.this$0.startActivityForResult(new android.content.Intent(this.val$that, org.pocketworkstation.pckeyboard.InputLanguageSelection), 0);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class Main$4 implements android.view.View$OnClickListener {
    final synthetic org.pocketworkstation.pckeyboard.Main this$0;

    Main$4(org.pocketworkstation.pckeyboard.Main p1)
    {
        this.this$0 = p1;
        return;
    }

    public void onClick(android.view.View p6)
    {
        try {
            this.this$0.startActivity(new android.content.Intent("android.intent.action.VIEW", android.net.Uri.parse("market://search?q=pub:\"Klaus Weidner\"")));
        } catch (android.content.ActivityNotFoundException v0) {
            android.widget.Toast.makeText(this.this$0.getApplicationContext(), this.this$0.getResources().getString(2131165579), 1).show();
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class Main extends android.app.Activity {
    private static final String MARKET_URI = "market://search?q=pub:"Klaus Weidner"";

    public Main()
    {
        return;
    }

    public void onCreate(android.os.Bundle p11)
    {
        super.onCreate(p11);
        this.setContentView(2130903052);
        android.text.Spanned v0 = android.text.Html.fromHtml(new StringBuilder().append(this.getString(2131165586)).append("<p><i>Version: ").append(this.getString(2131165184)).append("</i></p>").toString());
        android.widget.TextView v1_1 = ((android.widget.TextView) this.findViewById(2131623953));
        v1_1.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
        v1_1.setText(v0, android.widget.TextView$BufferType.SPANNABLE);
        ((android.widget.Button) this.findViewById(2131623949)).setOnClickListener(new org.pocketworkstation.pckeyboard.Main$1(this));
        ((android.widget.Button) this.findViewById(2131623951)).setOnClickListener(new org.pocketworkstation.pckeyboard.Main$2(this));
        ((android.widget.Button) this.findViewById(2131623950)).setOnClickListener(new org.pocketworkstation.pckeyboard.Main$3(this, this));
        ((android.widget.Button) this.findViewById(2131623952)).setOnClickListener(new org.pocketworkstation.pckeyboard.Main$4(this));
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class ModifierKeyState {
    private static final int CHORDING = 2;
    private static final int PRESSING = 1;
    private static final int RELEASING;
    private int mState;

    ModifierKeyState()
    {
        this.mState = 0;
        return;
    }

    public boolean isChording()
    {
        int v0_1;
        if (this.mState != 2) {
            v0_1 = 0;
        } else {
            v0_1 = 1;
        }
        return v0_1;
    }

    public void onOtherKeyPressed()
    {
        if (this.mState == 1) {
            this.mState = 2;
        }
        return;
    }

    public void onPress()
    {
        this.mState = 1;
        return;
    }

    public void onRelease()
    {
        this.mState = 0;
        return;
    }

    public String toString()
    {
        return new StringBuilder().append("ModifierKeyState:").append(this.mState).toString();
    }
}
package org.pocketworkstation.pckeyboard;
public class NotificationReceiver extends android.content.BroadcastReceiver {
    static final String TAG = "PCKeyboard/Notification";
    private org.pocketworkstation.pckeyboard.LatinIME mIME;

    NotificationReceiver(org.pocketworkstation.pckeyboard.LatinIME p4)
    {
        this.mIME = p4;
        android.util.Log.i("PCKeyboard/Notification", new StringBuilder().append("NotificationReceiver created, ime=").append(this.mIME).toString());
        return;
    }

    public void onReceive(android.content.Context p4, android.content.Intent p5)
    {
        android.util.Log.i("PCKeyboard/Notification", "NotificationReceiver.onReceive called");
        android.view.inputmethod.InputMethodManager v0_1 = ((android.view.inputmethod.InputMethodManager) p4.getSystemService("input_method"));
        if (v0_1 != null) {
            v0_1.showSoftInputFromInputMethod(this.mIME.mToken, 2);
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
synthetic class PluginManager$1 {
}
package org.pocketworkstation.pckeyboard;
interface PluginManager$DictPluginSpec {

    public abstract org.pocketworkstation.pckeyboard.BinaryDictionary getDict();
}
package org.pocketworkstation.pckeyboard;
public class PluginManager extends android.content.BroadcastReceiver {
    private static String HK_INTENT_DICT;
    private static String SOFTKEYBOARD_INTENT_DICT;
    private static java.util.Map SOFTKEYBOARD_LANG_MAP;
    private static String TAG;
    private static java.util.Map mPluginDicts;
    private org.pocketworkstation.pckeyboard.LatinIME mIME;

    static PluginManager()
    {
        org.pocketworkstation.pckeyboard.PluginManager.TAG = "PCKeyboard";
        org.pocketworkstation.pckeyboard.PluginManager.HK_INTENT_DICT = "org.pocketworkstation.DICT";
        org.pocketworkstation.pckeyboard.PluginManager.SOFTKEYBOARD_INTENT_DICT = "com.menny.android.anysoftkeyboard.DICTIONARY";
        org.pocketworkstation.pckeyboard.PluginManager.SOFTKEYBOARD_LANG_MAP = new java.util.HashMap();
        org.pocketworkstation.pckeyboard.PluginManager.SOFTKEYBOARD_LANG_MAP.put("dk", "da");
        org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts = new java.util.HashMap();
        return;
    }

    PluginManager(org.pocketworkstation.pckeyboard.LatinIME p1)
    {
        this.mIME = p1;
        return;
    }

    static synthetic String access$000()
    {
        return org.pocketworkstation.pckeyboard.PluginManager.TAG;
    }

    static org.pocketworkstation.pckeyboard.BinaryDictionary getDictionary(android.content.Context p6, String p7)
    {
        org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpec v1_1 = ((org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpec) org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts.get(p7));
        if (v1_1 == null) {
            v1_1 = ((org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpec) org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts.get(p7.substring(0, 2)));
        }
        org.pocketworkstation.pckeyboard.BinaryDictionary v0;
        if (v1_1 != null) {
            String v2_8;
            v0 = v1_1.getDict(p6);
            StringBuilder v4_1 = new StringBuilder().append("Found plugin dictionary for ").append(p7);
            if (v0 != null) {
                v2_8 = new StringBuilder().append(", size=").append(v0.getSize()).toString();
            } else {
                v2_8 = " is null";
            }
            android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, v4_1.append(v2_8).toString());
        } else {
            v0 = 0;
        }
        return v0;
    }

    static void getHKDictionaries(android.content.pm.PackageManager p23)
    {
        String v20_0 = p23.queryIntentActivities(new android.content.Intent(org.pocketworkstation.pckeyboard.PluginManager.HK_INTENT_DICT), 0).iterator();
        while (v20_0.hasNext()) {
            android.content.pm.ApplicationInfo v2 = ((android.content.pm.ResolveInfo) v20_0.next()).activityInfo.applicationInfo;
            String v12 = v2.packageName;
            try {
                android.content.res.Resources v15 = p23.getResourcesForApplication(v2);
                int v10 = v15.getIdentifier("dict_language", "string", v12);
            } catch (android.content.pm.PackageManager$NameNotFoundException v5) {
                android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, "bad");
                if (0 == 0) {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
                org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpecHK v17 = new org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpecHK;
                v17(v12, int[] v14);
                org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts.put(String v9, v17);
                android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("Found plugin dictionary: lang=").append(v9).append(", pkg=").append(v12).toString());
                if (1 != 0) {
                } else {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
            } catch (int v19_5) {
                if (0 == 0) {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
                throw v19_5;
            }
            if (v10 != 0) {
                v9 = v15.getString(v10);
                int v13 = v15.getIdentifier("main", "raw", v12);
                if (v13 == 0) {
                    int v11 = 0;
                    java.util.ArrayList v8_1 = new java.util.ArrayList();
                    while(true) {
                        int v7 = v15.getIdentifier(new StringBuilder().append("main").append(v11).toString(), "raw", v12);
                        if (v7 == 0) {
                            break;
                        }
                        v8_1.add(Integer.valueOf(v7));
                        v11++;
                    }
                    if (v11 != 0) {
                        v14 = new int[v11];
                        int v6 = 0;
                        while (v6 < v11) {
                            v14[v6] = ((Integer) v8_1.get(v6)).intValue();
                            v6++;
                        }
                    } else {
                        if (0 == 0) {
                            android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                        }
                    }
                } else {
                    v14 = new int[1];
                    v14[0] = v13;
                }
            } else {
                if (0 != 0) {
                } else {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
            }
        }
        return;
    }

    static void getPluginDictionaries(android.content.Context p2)
    {
        org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts.clear();
        android.content.pm.PackageManager v0 = p2.getPackageManager();
        org.pocketworkstation.pckeyboard.PluginManager.getSoftKeyboardDictionaries(v0);
        org.pocketworkstation.pckeyboard.PluginManager.getHKDictionaries(v0);
        return;
    }

    static void getSoftKeyboardDictionaries(android.content.pm.PackageManager p24)
    {
        Throwable v20_1 = p24.queryBroadcastReceivers(new android.content.Intent(org.pocketworkstation.pckeyboard.PluginManager.SOFTKEYBOARD_INTENT_DICT), 2).iterator();
        while (v20_1.hasNext()) {
            android.content.pm.ApplicationInfo v3 = ((android.content.pm.ResolveInfo) v20_1.next()).activityInfo.applicationInfo;
            String v12 = v3.packageName;
            int v16 = 0;
            try {
                android.content.res.Resources v13 = p24.getResourcesForApplication(v3);
                int v7 = v13.getIdentifier("dictionaries", "xml", v12);
            } catch (java.io.IOException v10) {
                android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, "bad");
                if (v16 == 0) {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
            } catch (Throwable v20_2) {
                if (v16 == 0) {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
                throw v20_2;
            }
            if (v7 != 0) {
                android.content.res.XmlResourceParser v19 = v13.getXml(v7);
                String v4 = 0;
                String v11 = 0;
                try {
                    int v6 = v19.getEventType();
                } catch (java.io.IOException v10) {
                    android.util.Log.e(org.pocketworkstation.pckeyboard.PluginManager.TAG, "Dictionary XML parsing failure");
                } catch (java.io.IOException v10) {
                    android.util.Log.e(org.pocketworkstation.pckeyboard.PluginManager.TAG, "Dictionary XML IOException");
                }
                while (v6 != 1) {
                    if (v6 == 2) {
                        String v17 = v19.getName();
                        if ((v17 != null) && (v17.equals("Dictionary"))) {
                            v11 = v19.getAttributeValue(0, "locale");
                            String v5_1 = ((String) org.pocketworkstation.pckeyboard.PluginManager.SOFTKEYBOARD_LANG_MAP.get(v11));
                            if (v5_1 != null) {
                                v11 = v5_1;
                            }
                            String v18 = v19.getAttributeValue(0, "type");
                            if ((v18 != null) && ((!v18.equals("raw")) && (!v18.equals("binary")))) {
                                android.util.Log.w(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("Unsupported AnySoftKeyboard dict type ").append(v18).toString());
                            } else {
                                v4 = v19.getAttributeValue(0, "dictionaryAssertName");
                            }
                        }
                    }
                    v19.next();
                    v6 = v19.getEventType();
                }
                if ((v4 != null) && (v11 != null)) {
                    org.pocketworkstation.pckeyboard.PluginManager.mPluginDicts.put(v11, new org.pocketworkstation.pckeyboard.PluginManager$DictPluginSpecSoftKeyboard(v12, v4));
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("Found plugin dictionary: lang=").append(v11).append(", pkg=").append(v12).toString());
                    v16 = 1;
                    if (1 == 0) {
                        android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                    }
                } else {
                    if (0 != 0) {
                    } else {
                        android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                    }
                }
            } else {
                if (0 != 0) {
                } else {
                    android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, new StringBuilder().append("failed to load plugin dictionary spec from ").append(v12).toString());
                }
            }
        }
        return;
    }

    public void onReceive(android.content.Context p4, android.content.Intent p5)
    {
        android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, "Package information changed, updating dictionaries.");
        org.pocketworkstation.pckeyboard.PluginManager.getPluginDictionaries(p4);
        android.util.Log.i(org.pocketworkstation.pckeyboard.PluginManager.TAG, "Finished updating dictionaries.");
        this.mIME.toggleLanguage(1, 1);
        return;
    }
}
package org.pocketworkstation.pckeyboard;
 class PointerTracker$KeyState {
    private long mDownTime;
    private final org.pocketworkstation.pckeyboard.KeyDetector mKeyDetector;
    private int mKeyIndex;
    private int mKeyX;
    private int mKeyY;
    private int mLastX;
    private int mLastY;
    private int mStartX;
    private int mStartY;

    public PointerTracker$KeyState(org.pocketworkstation.pckeyboard.KeyDetector p2)
    {
        this.mKeyIndex = -1;
        this.mKeyDetector = p2;
        return;
    }

    private int onMoveKeyInternal(int p3, int p4)
    {
        this.mLastX = p3;
        this.mLastY = p4;
        return this.mKeyDetector.getKeyIndexAndNearbyCodes(p3, p4, 0);
    }

    public long getDownTime()
    {
        return this.mDownTime;
    }

    public int getKeyIndex()
    {
        return this.mKeyIndex;
    }

    public int getKeyX()
    {
        return this.mKeyX;
    }

    public int getKeyY()
    {
        return this.mKeyY;
    }

    public int getLastX()
    {
        return this.mLastX;
    }

    public int getLastY()
    {
        return this.mLastY;
    }

    public int getStartX()
    {
        return this.mStartX;
    }

    public int getStartY()
    {
        return this.mStartY;
    }

    public int onDownKey(int p2, int p3, long p4)
    {
        this.mStartX = p2;
        this.mStartY = p3;
        this.mDownTime = p4;
        return this.onMoveToNewKey(this.onMoveKeyInternal(p2, p3), p2, p3);
    }

    public int onMoveKey(int p2, int p3)
    {
        return this.onMoveKeyInternal(p2, p3);
    }

    public int onMoveToNewKey(int p1, int p2, int p3)
    {
        this.mKeyIndex = p1;
        this.mKeyX = p2;
        this.mKeyY = p3;
        return p1;
    }

    public int onUpKey(int p2, int p3)
    {
        return this.onMoveKeyInternal(p2, p3);
    }
}
package org.pocketworkstation.pckeyboard;
public interface PointerTracker$UIProxy {

    public abstract boolean hasDistinctMultitouch();

    public abstract void invalidateKey();

    public abstract void showPreview();
}
package org.pocketworkstation.pckeyboard;
public class PointerTracker {
    private static final boolean DEBUG = False;
    private static final boolean DEBUG_MOVE = False;
    private static final int[] KEY_DELETE = None;
    private static final int NOT_A_KEY = 255;
    private static final String TAG = "PointerTracker";
    private static boolean sSlideKeyHack;
    private static java.util.List sSlideKeys;
    private final int mDelayBeforeKeyRepeatStart;
    private final org.pocketworkstation.pckeyboard.LatinKeyboardBaseView$UIHandler mHandler;
    private final boolean mHasDistinctMultitouch;
    private boolean mInMultiTap;
    private boolean mIsInSlidingKeyInput;
    private boolean mIsRepeatableKey;
    private boolean mKeyAlreadyProcessed;
    private final org.pocketworkstation.pckeyboard.KeyDetector mKeyDetector;
    private int mKeyHysteresisDistanceSquared;
    private final org.pocketworkstation.pckeyboard.PointerTracker$KeyState mKeyState;
    private boolean mKeyboardLayoutHasBeenChanged;
    private final org.pocketworkstation.pckeyboard.KeyboardSwitcher mKeyboardSwitcher;
    private org.pocketworkstation.pckeyboard.Keyboard$Key[] mKeys;
    private int mLastSentIndex;
    private long mLastTapTime;
    private org.pocketworkstation.pckeyboard.LatinKeyboardBaseView$OnKeyboardActionListener mListener;
    private final int mMultiTapKeyTimeout;
    public final int mPointerId;
    private final StringBuilder mPreviewLabel;
    private int mPreviousKey;
    private final org.pocketworkstation.pckeyboard.PointerTracker$UIProxy mProxy;
    private int mTapCount;

    static PointerTracker()
    {
        java.util.ArrayList v0_1 = new int[1];
        v0_1[0] = -5;
        org.pocketworkstation.pckeyboard.PointerTracker.KEY_DELETE = v0_1;
        org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys = new java.util.ArrayList(10);
        return;
    }

    public PointerTracker(int p4, org.pocketworkstation.pckeyboard.LatinKeyboardBaseView$UIHandler p5, org.pocketworkstation.pckeyboard.KeyDetector p6, org.pocketworkstation.pckeyboard.PointerTracker$UIProxy p7, android.content.res.Resources p8, boolean p9)
    {
        this.mKeyHysteresisDistanceSquared = -1;
        this.mPreviewLabel = new StringBuilder(1);
        this.mPreviousKey = -1;
        if ((p7 != null) && ((p5 != null) && (p6 != null))) {
            this.mPointerId = p4;
            this.mProxy = p7;
            this.mHandler = p5;
            this.mKeyDetector = p6;
            this.mKeyboardSwitcher = org.pocketworkstation.pckeyboard.KeyboardSwitcher.getInstance();
            this.mKeyState = new org.pocketworkstation.pckeyboard.PointerTracker$KeyState(p6);
            this.mHasDistinctMultitouch = p7.hasDistinctMultitouch();
            this.mDelayBeforeKeyRepeatStart = p8.getInteger(2131361799);
            this.mMultiTapKeyTimeout = p8.getInteger(2131361801);
            org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeyHack = p9;
            this.resetMultiTap();
            return;
        } else {
            throw new NullPointerException();
        }
    }

    private static void addSlideKey(org.pocketworkstation.pckeyboard.Keyboard$Key p1)
    {
        if ((org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeyHack) && ((org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.sendSlideKeys != 0) && (p1 != null))) {
            if (!p1.modifier) {
                org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.add(p1);
            } else {
                org.pocketworkstation.pckeyboard.PointerTracker.clearSlideKeys();
            }
        }
        return;
    }

    private void checkMultiTap(long p10, int p12)
    {
        org.pocketworkstation.pckeyboard.Keyboard$Key v1 = this.getKey(p12);
        if ((v1 != null) && (v1.codes != null)) {
            if ((p10 >= (this.mLastTapTime + ((long) this.mMultiTapKeyTimeout))) || (p12 != this.mLastSentIndex)) {
                int v0 = 0;
            } else {
                v0 = 1;
            }
            if (v1.codes.length <= 1) {
                if (v0 == 0) {
                    this.resetMultiTap();
                }
            } else {
                this.mInMultiTap = 1;
                if (v0 == 0) {
                    this.mTapCount = -1;
                } else {
                    this.mTapCount = ((this.mTapCount + 1) % v1.codes.length);
                }
            }
        }
        return;
    }

    static void clearSlideKeys()
    {
        org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.clear();
        return;
    }

    private void debugLog(String p11, int p12, int p13)
    {
        String v0;
        int v2 = this.mKeyDetector.getKeyIndexAndNearbyCodes(p12, p13, 0);
        org.pocketworkstation.pckeyboard.Keyboard$Key v1 = this.getKey(v2);
        if ((v1 != null) && (v1.codes != null)) {
            String v4_1;
            int v3 = v1.codes[0];
            if (v3 >= 0) {
                v4_1 = "0x%02x";
            } else {
                v4_1 = "%4d";
            }
            Object[] v5_0 = new Object[1];
            v5_0[0] = Integer.valueOf(v3);
            v0 = String.format(v4_1, v5_0);
        } else {
            v0 = "----";
        }
        String v4_5;
        Object[] v7 = new Object[8];
        v7[0] = p11;
        if (!this.mKeyAlreadyProcessed) {
            v4_5 = " ";
        } else {
            v4_5 = "-";
        }
        String v4_12;
        v7[1] = v4_5;
        v7[2] = Integer.valueOf(this.mPointerId);
        v7[3] = Integer.valueOf(p12);
        v7[4] = Integer.valueOf(p13);
        v7[5] = Integer.valueOf(v2);
        v7[6] = v0;
        if (!this.isModifier()) {
            v4_12 = "";
        } else {
            v4_12 = "modifier";
        }
        v7[7] = v4_12;
        android.util.Log.d("PointerTracker", String.format("%s%s[%d] %3d,%3d %3d(%s) %s", v7));
        return;
    }

    private void detectAndSendKey(int p7, int p8, int p9, long p10)
    {
        this.detectAndSendKey(this.getKey(p7), p8, p9, p10);
        this.mLastSentIndex = p7;
        return;
    }

    private void detectAndSendKey(org.pocketworkstation.pckeyboard.Keyboard$Key p9, int p10, int p11, long p12)
    {
        org.pocketworkstation.pckeyboard.LatinKeyboardBaseView$OnKeyboardActionListener v2 = this.mListener;
        if (p9 != null) {
            if (p9.text == null) {
                if (p9.codes == null) {
                    return;
                } else {
                    int v0 = p9.getPrimaryCode();
                    int[] v1 = this.mKeyDetector.newCodeArray();
                    this.mKeyDetector.getKeyIndexAndNearbyCodes(p10, p11, v1);
                    if (this.mInMultiTap) {
                        if (this.mTapCount == -1) {
                            this.mTapCount = 0;
                        } else {
                            this.mListener.onKey(-5, org.pocketworkstation.pckeyboard.PointerTracker.KEY_DELETE, p10, p11);
                        }
                        v0 = p9.codes[this.mTapCount];
                    }
                    if ((v1.length >= 2) && ((v1[0] != v0) && (v1[1] == v0))) {
                        v1[1] = v1[0];
                        v1[0] = v0;
                    }
                    if (v2 != null) {
                        v2.onKey(v0, v1, p10, p11);
                        v2.onRelease(v0);
                    }
                }
            } else {
                if (v2 != null) {
                    v2.onText(p9.text);
                    v2.onRelease(0);
                }
            }
            this.mLastTapTime = p12;
        } else {
            if (v2 != null) {
                v2.onCancel();
            }
        }
        return;
    }

    private static int getSquareDistanceToKeyEdge(int p10, int p11, org.pocketworkstation.pckeyboard.Keyboard$Key p12)
    {
        int v3;
        int v5 = p12.x;
        int v6 = (p12.x + p12.width);
        int v7 = p12.y;
        int v0 = (p12.y + p12.height);
        if (p10 >= v5) {
            if (p10 <= v6) {
                v3 = p10;
            } else {
                v3 = v6;
            }
        } else {
            v3 = v5;
        }
        int v4;
        if (p11 >= v7) {
            if (p11 <= v0) {
                v4 = p11;
            } else {
                v4 = v0;
            }
        } else {
            v4 = v7;
        }
        return (((p10 - v3) * (p10 - v3)) + ((p11 - v4) * (p11 - v4)));
    }

    private boolean isMinorMoveBounce(int p6, int p7, int p8)
    {
        String v1_0 = 1;
        if ((this.mKeys != null) && (this.mKeyHysteresisDistanceSquared >= 0)) {
            int v0 = this.mKeyState.getKeyIndex();
            if (p8 != v0) {
                if (!this.isValidKeyIndex(v0)) {
                    v1_0 = 0;
                } else {
                    if (org.pocketworkstation.pckeyboard.PointerTracker.getSquareDistanceToKeyEdge(p6, p7, this.mKeys[v0]) >= this.mKeyHysteresisDistanceSquared) {
                        v1_0 = 0;
                    }
                }
            }
            return v1_0;
        } else {
            throw new IllegalStateException("keyboard and/or hysteresis not set");
        }
    }

    private boolean isModifierInternal(int p5)
    {
        int v2 = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Key v0 = this.getKey(p5);
        if ((v0 != null) && (v0.codes != null)) {
            int v1 = v0.codes[0];
            if ((v1 == -1) || ((v1 == -2) || ((v1 == -113) || ((v1 == -57) || ((v1 == -117) || (v1 == -119)))))) {
                v2 = 1;
            }
        }
        return v2;
    }

    private boolean isValidKeyIndex(int p2)
    {
        if ((p2 < 0) || (p2 >= this.mKeys.length)) {
            int v0_2 = 0;
        } else {
            v0_2 = 1;
        }
        return v0_2;
    }

    private void resetMultiTap()
    {
        this.mLastSentIndex = -1;
        this.mTapCount = 0;
        this.mLastTapTime = -1;
        this.mInMultiTap = 0;
        return;
    }

    private void showKeyPreviewAndUpdateKey(int p3)
    {
        this.updateKey(p3);
        if ((!this.mHasDistinctMultitouch) || (!this.isModifier())) {
            this.mProxy.showPreview(p3, this);
        } else {
            this.mProxy.showPreview(-1, this);
        }
        return;
    }

    private void startLongPressTimer(int p5)
    {
        if (!this.mKeyboardSwitcher.isInMomentaryAutoModeSwitchState()) {
            this.mHandler.startLongPressTimer(((long) org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.longpressTimeout), p5, this);
        } else {
            this.mHandler.startLongPressTimer(((long) (org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.longpressTimeout * 3)), p5, this);
        }
        return;
    }

    public long getDownTime()
    {
        return this.mKeyState.getDownTime();
    }

    public org.pocketworkstation.pckeyboard.Keyboard$Key getKey(int p2)
    {
        int v0_1;
        if (!this.isValidKeyIndex(p2)) {
            v0_1 = 0;
        } else {
            v0_1 = this.mKeys[p2];
        }
        return v0_1;
    }

    public int getLastX()
    {
        return this.mKeyState.getLastX();
    }

    public int getLastY()
    {
        return this.mKeyState.getLastY();
    }

    public CharSequence getPreviewText(org.pocketworkstation.pckeyboard.Keyboard$Key p5)
    {
        CharSequence v0_4;
        CharSequence v0_0 = 0;
        if (!this.mInMultiTap) {
            if (!p5.isDeadKey()) {
                v0_4 = p5.label;
            } else {
                v0_4 = org.pocketworkstation.pckeyboard.DeadAccentSequence.normalize(new StringBuilder().append(" ").append(p5.label).toString());
            }
        } else {
            this.mPreviewLabel.setLength(0);
            if (this.mTapCount >= 0) {
                v0_0 = this.mTapCount;
            }
            this.mPreviewLabel.append(((char) p5.codes[v0_0]));
            v0_4 = this.mPreviewLabel;
        }
        return v0_4;
    }

    int getStartX()
    {
        return this.mKeyState.getStartX();
    }

    int getStartY()
    {
        return this.mKeyState.getStartY();
    }

    public boolean isInSlidingKeyInput()
    {
        return this.mIsInSlidingKeyInput;
    }

    public boolean isModifier()
    {
        return this.isModifierInternal(this.mKeyState.getKeyIndex());
    }

    public boolean isOnModifierKey(int p3, int p4)
    {
        return this.isModifierInternal(this.mKeyDetector.getKeyIndexAndNearbyCodes(p3, p4, 0));
    }

    public boolean isSpaceKey(int p5)
    {
        int v1 = 0;
        org.pocketworkstation.pckeyboard.Keyboard$Key v0 = this.getKey(p5);
        if ((v0 != null) && ((v0.codes != null) && (v0.codes[0] == 32))) {
            v1 = 1;
        }
        return v1;
    }

    public void onCancelEvent(int p4, int p5, long p6)
    {
        this.mHandler.cancelKeyTimers();
        this.mHandler.cancelPopupPreview();
        this.showKeyPreviewAndUpdateKey(-1);
        this.mIsInSlidingKeyInput = 0;
        int v0 = this.mKeyState.getKeyIndex();
        if (this.isValidKeyIndex(v0)) {
            this.mProxy.invalidateKey(this.mKeys[v0]);
        }
        return;
    }

    public void onDownEvent(int p8, int p9, long p10)
    {
        int v1 = this.mKeyState.onDownKey(p8, p9, p10);
        this.mKeyboardLayoutHasBeenChanged = 0;
        this.mKeyAlreadyProcessed = 0;
        this.mIsRepeatableKey = 0;
        this.mIsInSlidingKeyInput = 0;
        this.checkMultiTap(p10, v1);
        if ((this.mListener != null) && (this.isValidKeyIndex(v1))) {
            org.pocketworkstation.pckeyboard.Keyboard$Key v0 = this.mKeys[v1];
            if (v0.codes != null) {
                this.mListener.onPress(v0.getPrimaryCode());
            }
            if (this.mKeyboardLayoutHasBeenChanged) {
                this.mKeyboardLayoutHasBeenChanged = 0;
                v1 = this.mKeyState.onDownKey(p8, p9, p10);
            }
        }
        if (this.isValidKeyIndex(v1)) {
            if (this.mKeys[v1].repeatable) {
                this.repeatKey(v1);
                this.mHandler.startKeyRepeatTimer(((long) this.mDelayBeforeKeyRepeatStart), v1, this);
                this.mIsRepeatableKey = 1;
            }
            this.startLongPressTimer(v1);
        }
        this.showKeyPreviewAndUpdateKey(v1);
        return;
    }

    public void onMoveEvent(int p9, int p10, long p11)
    {
        if (!this.mKeyAlreadyProcessed) {
            org.pocketworkstation.pckeyboard.PointerTracker$KeyState v3 = this.mKeyState;
            int v2 = v3.onMoveKey(p9, p10);
            org.pocketworkstation.pckeyboard.Keyboard$Key v4 = this.getKey(v3.getKeyIndex());
            if (!this.isValidKeyIndex(v2)) {
                if ((v4 != null) && (!this.isMinorMoveBounce(p9, p10, v2))) {
                    this.mIsInSlidingKeyInput = 1;
                    if ((this.mListener != null) && (v4.codes != null)) {
                        this.mListener.onRelease(v4.getPrimaryCode());
                    }
                    this.resetMultiTap();
                    v3.onMoveToNewKey(v2, p9, p10);
                    this.mHandler.cancelLongPressTimer();
                }
            } else {
                boolean v0 = this.isMinorMoveBounce(p9, p10, v2);
                if (v4 != null) {
                    if (!v0) {
                        this.mIsInSlidingKeyInput = 1;
                        if ((this.mListener != null) && (v4.codes != null)) {
                            this.mListener.onRelease(v4.getPrimaryCode());
                        }
                        this.resetMultiTap();
                        if (this.mListener != null) {
                            org.pocketworkstation.pckeyboard.Keyboard$Key v1_0 = this.getKey(v2);
                            if (v1_0.codes != null) {
                                this.mListener.onPress(v1_0.getPrimaryCode());
                            }
                            if (this.mKeyboardLayoutHasBeenChanged) {
                                this.mKeyboardLayoutHasBeenChanged = 0;
                                v2 = v3.onMoveKey(p9, p10);
                            }
                            org.pocketworkstation.pckeyboard.PointerTracker.addSlideKey(v4);
                        }
                        v3.onMoveToNewKey(v2, p9, p10);
                        this.startLongPressTimer(v2);
                    }
                } else {
                    if (this.mListener != null) {
                        org.pocketworkstation.pckeyboard.Keyboard$Key v1_1 = this.getKey(v2);
                        if (v1_1.codes != null) {
                            this.mListener.onPress(v1_1.getPrimaryCode());
                        }
                        if (this.mKeyboardLayoutHasBeenChanged) {
                            this.mKeyboardLayoutHasBeenChanged = 0;
                            v2 = v3.onMoveKey(p9, p10);
                        }
                    }
                    v3.onMoveToNewKey(v2, p9, p10);
                    this.startLongPressTimer(v2);
                }
            }
            this.showKeyPreviewAndUpdateKey(v3.getKeyIndex());
        }
        return;
    }

    public void onTouchEvent(int p1, int p2, int p3, long p4)
    {
        switch (p1) {
            case 0:
            case 5:
                this.onDownEvent(p2, p3, p4);
                break;
            case 1:
            case 6:
                this.onUpEvent(p2, p3, p4);
                break;
            case 2:
                this.onMoveEvent(p2, p3, p4);
                break;
            case 3:
                this.onCancelEvent(p2, p3, p4);
            case 4:
            default:
                break;
        }
        return;
    }

    public void onUpEvent(int p8, int p9, long p10)
    {
        this.mHandler.cancelKeyTimers();
        this.mHandler.cancelPopupPreview();
        this.showKeyPreviewAndUpdateKey(-1);
        this.mIsInSlidingKeyInput = 0;
        this.sendSlideKeys();
        if (!this.mKeyAlreadyProcessed) {
            int v1 = this.mKeyState.onUpKey(p8, p9);
            if (this.isMinorMoveBounce(p8, p9, v1)) {
                v1 = this.mKeyState.getKeyIndex();
                p8 = this.mKeyState.getKeyX();
                p9 = this.mKeyState.getKeyY();
            }
            if (!this.mIsRepeatableKey) {
                this.detectAndSendKey(v1, p8, p9, p10);
            }
            if (this.isValidKeyIndex(v1)) {
                this.mProxy.invalidateKey(this.mKeys[v1]);
            }
        }
        return;
    }

    public void repeatKey(int p8)
    {
        org.pocketworkstation.pckeyboard.Keyboard$Key v6 = this.getKey(p8);
        if (v6 != null) {
            this.detectAndSendKey(p8, v6.x, v6.y, -1);
        }
        return;
    }

    void sendSlideKeys()
    {
        if (org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeyHack) {
            int v7 = org.pocketworkstation.pckeyboard.LatinIME.sKeyboardSettings.sendSlideKeys;
            if ((v7 & 4) <= 0) {
                int v6 = org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.size();
                if ((v6 > 0) && ((v7 & 1) > 0)) {
                    org.pocketworkstation.pckeyboard.Keyboard$Key v1_1 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.get(0));
                    this.detectAndSendKey(v1_1, v1_1.x, v1_1.y, -1);
                }
                if ((v6 > 1) && ((v7 & 2) > 0)) {
                    org.pocketworkstation.pckeyboard.Keyboard$Key v1_3 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.get((v6 - 1)));
                    this.detectAndSendKey(v1_3, v1_3.x, v1_3.y, -1);
                }
            } else {
                java.util.Iterator v8 = org.pocketworkstation.pckeyboard.PointerTracker.sSlideKeys.iterator();
                while (v8.hasNext()) {
                    org.pocketworkstation.pckeyboard.Keyboard$Key v1_5 = ((org.pocketworkstation.pckeyboard.Keyboard$Key) v8.next());
                    this.detectAndSendKey(v1_5, v1_5.x, v1_5.y, -1);
                }
            }
            org.pocketworkstation.pckeyboard.PointerTracker.clearSlideKeys();
        }
        return;
    }

    public void setAlreadyProcessed()
    {
        this.mKeyAlreadyProcessed = 1;
        return;
    }

    public void setKeyboard(org.pocketworkstation.pckeyboard.Keyboard$Key[] p2, float p3)
    {
        if ((p2 != null) && (p3 >= 0)) {
            this.mKeys = p2;
            this.mKeyHysteresisDistanceSquared = ((int) (p3 * p3));
            this.mKeyboardLayoutHasBeenChanged = 1;
            return;
        } else {
            throw new IllegalArgumentException();
        }
    }

    public void setOnKeyboardActionListener(org.pocketworkstation.pckeyboard.LatinKeyboardBaseView$OnKeyboardActionListener p1)
    {
        this.mListener = p1;
        return;
    }

    public void setSlidingKeyInputState(boolean p1)
    {
        this.mIsInSlidingKeyInput = p1;
        return;
    }

    public void updateKey(int p5)
    {
        if (!this.mKeyAlreadyProcessed) {
            int v1 = this.mPreviousKey;
            this.mPreviousKey = p5;
            if (p5 != v1) {
                if (this.isValidKeyIndex(v1)) {
                    int v0;
                    if (p5 != -1) {
                        v0 = 0;
                    } else {
                        v0 = 1;
                    }
                    this.mKeys[v1].onReleased(v0);
                    this.mProxy.invalidateKey(this.mKeys[v1]);
                }
                if (this.isValidKeyIndex(p5)) {
                    this.mKeys[p5].onPressed();
                    this.mProxy.invalidateKey(this.mKeys[p5]);
                }
            }
        }
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class PrefScreenActions extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {

    public PrefScreenActions()
    {
        return;
    }

    protected void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.addPreferencesFromResource(2131034137);
        this.getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
        return;
    }

    protected void onDestroy()
    {
        this.getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);
        super.onDestroy();
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p2, String p3)
    {
        new android.app.backup.BackupManager(this).dataChanged();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class PrefScreenFeedback extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {

    public PrefScreenFeedback()
    {
        return;
    }

    protected void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.addPreferencesFromResource(2131034138);
        this.getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
        return;
    }

    protected void onDestroy()
    {
        this.getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);
        super.onDestroy();
        return;
    }

    protected void onResume()
    {
        super.onResume();
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p2, String p3)
    {
        new android.app.backup.BackupManager(this).dataChanged();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public class PrefScreenView extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener {
    private android.preference.ListPreference mRenderModePreference;

    public PrefScreenView()
    {
        return;
    }

    protected void onCreate(android.os.Bundle p3)
    {
        super.onCreate(p3);
        this.addPreferencesFromResource(2131034140);
        this.getPreferenceManager().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
        this.mRenderModePreference = ((android.preference.ListPreference) this.findPreference("pref_render_mode"));
        return;
    }

    protected void onDestroy()
    {
        this.getPreferenceManager().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);
        super.onDestroy();
        return;
    }

    protected void onResume()
    {
        super.onResume();
        if (org.pocketworkstation.pckeyboard.LatinKeyboardBaseView.sSetRenderMode == null) {
            this.mRenderModePreference.setEnabled(0);
            this.mRenderModePreference.setSummary(2131165561);
        }
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences p2, String p3)
    {
        new android.app.backup.BackupManager(this).dataChanged();
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$anim {
    public static final int key_preview_fadein = 2130968576;
    public static final int key_preview_fadeout = 2130968577;
    public static final int mini_keyboard_fadein = 2130968578;
    public static final int mini_keyboard_fadeout = 2130968579;

    public R$anim()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$array {
    public static final int chording_alt_key_entries = 2131492879;
    public static final int chording_alt_key_values = 2131492880;
    public static final int chording_ctrl_key_entries = 2131492877;
    public static final int chording_ctrl_key_values = 2131492878;
    public static final int chording_meta_key_entries = 2131492881;
    public static final int chording_meta_key_values = 2131492882;
    public static final int click_method_entries = 2131492887;
    public static final int click_method_values = 2131492888;
    public static final int ctrl_a_override_entries = 2131492875;
    public static final int ctrl_a_override_values = 2131492876;
    public static final int hint_modes = 2131492883;
    public static final int hint_modes_values = 2131492884;
    public static final int keyboard_layout_modes = 2131492871;
    public static final int keyboard_layout_modes_values = 2131492872;
    public static final int keyboard_mode_entries = 2131492873;
    public static final int keyboard_mode_values = 2131492874;
    public static final int popup_content_entries = 2131492893;
    public static final int popup_content_values = 2131492894;
    public static final int prediction_modes = 2131492866;
    public static final int prediction_modes_values = 2131492867;
    public static final int render_mode_entries = 2131492889;
    public static final int render_mode_values = 2131492890;
    public static final int settings_key_modes = 2131492865;
    public static final int settings_key_modes_values = 2131492864;
    public static final int slide_keys_entries = 2131492885;
    public static final int slide_keys_values = 2131492886;
    public static final int swipe_action_entries = 2131492891;
    public static final int swipe_action_values = 2131492892;
    public static final int voice_input_modes = 2131492868;
    public static final int voice_input_modes_summary = 2131492870;
    public static final int voice_input_modes_values = 2131492869;

    public R$array()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$attr {
    public static final int asPercent = 2130771995;
    public static final int backgroundAlpha = 2130772007;
    public static final int backgroundDimAmount = 2130772016;
    public static final int capsLabel = 2130771991;
    public static final int codes = 2130771979;
    public static final int displayFormat = 2130771998;
    public static final int extension = 2130771978;
    public static final int horizontalGap = 2130771970;
    public static final int horizontalPad = 2130771972;
    public static final int iconPreview = 2130771987;
    public static final int isCursor = 2130771985;
    public static final int isModifier = 2130771983;
    public static final int isRepeatable = 2130771986;
    public static final int isSticky = 2130771984;
    public static final int keyBackground = 2130772000;
    public static final int keyCursorColor = 2130772005;
    public static final int keyEdgeFlags = 2130771982;
    public static final int keyHeight = 2130771969;
    public static final int keyHintColor = 2130772004;
    public static final int keyHysteresisDistance = 2130772011;
    public static final int keyIcon = 2130771992;
    public static final int keyLabel = 2130771989;
    public static final int keyOutputText = 2130771988;
    public static final int keyPreviewHeight = 2130772010;
    public static final int keyPreviewLayout = 2130772008;
    public static final int keyPreviewOffset = 2130772009;
    public static final int keyTextColor = 2130772003;
    public static final int keyTextSize = 2130772001;
    public static final int keyTextStyle = 2130772017;
    public static final int keyWidth = 2130771968;
    public static final int keyboardMode = 2130771977;
    public static final int keyboardViewStyle = 2130771999;
    public static final int labelTextSize = 2130772002;
    public static final int layoutColumns = 2130771975;
    public static final int layoutRows = 2130771974;
    public static final int logScale = 2130771997;
    public static final int maxValue = 2130771994;
    public static final int minValue = 2130771993;
    public static final int popupCharacters = 2130771981;
    public static final int popupKeyboard = 2130771980;
    public static final int popupLayout = 2130772013;
    public static final int recolorSymbols = 2130772006;
    public static final int rowEdgeFlags = 2130771976;
    public static final int shadowColor = 2130772014;
    public static final int shadowRadius = 2130772015;
    public static final int shiftLabel = 2130771990;
    public static final int step = 2130771996;
    public static final int symbolColorScheme = 2130772018;
    public static final int verticalCorrection = 2130772012;
    public static final int verticalGap = 2130771971;
    public static final int verticalPad = 2130771973;

    public R$attr()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$bool {
    public static final int config_long_press_comma_for_settings_enabled = 2131230730;
    public static final int config_swipeDisambiguation = 2131230727;
    public static final int default_add_shift_to_popup = 2131230735;
    public static final int default_auto_cap = 2131230721;
    public static final int default_caps_lock = 2131230736;
    public static final int default_connectbot_tab_hack = 2131230731;
    public static final int default_force_keyboard_on = 2131230733;
    public static final int default_fullscreen_override = 2131230732;
    public static final int default_keyboard_notification = 2131230734;
    public static final int default_popup_preview = 2131230728;
    public static final int default_quick_fixes = 2131230722;
    public static final int default_recorrection_enabled = 2131230729;
    public static final int default_shift_lock_modifiers = 2131230737;
    public static final int default_suggestions = 2131230723;
    public static final int default_suggestions_in_landscape = 2131230724;
    public static final int enable_autocorrect = 2131230720;
    public static final int im_is_default = 2131230725;
    public static final int voice_input_default = 2131230726;

    public R$bool()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$color {
    public static final int candidate_normal = 2131296256;
    public static final int candidate_other = 2131296258;
    public static final int candidate_recommended = 2131296257;
    public static final int latinkeyboard_bar_language_shadow_black = 2131296261;
    public static final int latinkeyboard_bar_language_shadow_white = 2131296260;
    public static final int latinkeyboard_dim_color_black = 2131296263;
    public static final int latinkeyboard_dim_color_white = 2131296262;
    public static final int latinkeyboard_extension_background = 2131296264;
    public static final int latinkeyboard_feedback_language_text = 2131296265;
    public static final int latinkeyboard_key_color_black = 2131296267;
    public static final int latinkeyboard_key_color_white = 2131296266;
    public static final int latinkeyboard_transparent = 2131296259;

    public R$color()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$dimen {
    public static final int bubble_pointer_offset = 2131427335;
    public static final int candidate_min_touchable_width = 2131427349;
    public static final int candidate_strip_fading_edge_length = 2131427337;
    public static final int candidate_strip_height = 2131427336;
    public static final int key_bottom_gap = 2131427329;
    public static final int key_height = 2131427328;
    public static final int key_horizontal_pad = 2131427330;
    public static final int key_hysteresis_distance = 2131427347;
    public static final int key_label_text_size = 2131427341;
    public static final int key_preview_height = 2131427344;
    public static final int key_preview_offset = 2131427343;
    public static final int key_preview_text_size_large = 2131427342;
    public static final int key_text_size = 2131427340;
    public static final int key_vertical_pad = 2131427331;
    public static final int key_vertical_pad_compact = 2131427332;
    public static final int keyboard_bottom_padding = 2131427334;
    public static final int keyboard_vertical_correction = 2131427348;
    public static final int max_height_for_fullscreen = 2131427339;
    public static final int mini_keyboard_slide_allowance = 2131427345;
    public static final int mini_keyboard_vertical_correction = 2131427346;
    public static final int popup_key_height = 2131427333;
    public static final int spacebar_vertical_correction = 2131427338;

    public R$dimen()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$drawable {
    public static final int btn_keyboard_key_dark_active_holo = 2130837504;
    public static final int btn_keyboard_key_dark_normal = 2130837505;
    public static final int btn_keyboard_key_dark_normal_holo = 2130837506;
    public static final int btn_keyboard_key_dark_normal_lock = 2130837507;
    public static final int btn_keyboard_key_dark_normal_lock_holo = 2130837508;
    public static final int btn_keyboard_key_dark_normal_off = 2130837509;
    public static final int btn_keyboard_key_dark_normal_off_holo = 2130837510;
    public static final int btn_keyboard_key_dark_normal_on = 2130837511;
    public static final int btn_keyboard_key_dark_normal_on_holo = 2130837512;
    public static final int btn_keyboard_key_dark_pressed = 2130837513;
    public static final int btn_keyboard_key_dark_pressed_holo = 2130837514;
    public static final int btn_keyboard_key_dark_pressed_off = 2130837515;
    public static final int btn_keyboard_key_dark_pressed_off_holo = 2130837516;
    public static final int btn_keyboard_key_dark_pressed_on = 2130837517;
    public static final int btn_keyboard_key_dark_pressed_on_holo = 2130837518;
    public static final int btn_keyboard_key_gingerbread = 2130837519;
    public static final int btn_keyboard_key_gingerbread_popup = 2130837520;
    public static final int btn_keyboard_key_ics = 2130837521;
    public static final int btn_keyboard_key_light_normal = 2130837522;
    public static final int btn_keyboard_key_light_normal_holo = 2130837523;
    public static final int btn_keyboard_key_light_popup_normal = 2130837524;
    public static final int btn_keyboard_key_light_popup_selected = 2130837525;
    public static final int btn_keyboard_key_light_pressed = 2130837526;
    public static final int btn_keyboard_key_light_pressed_holo = 2130837527;
    public static final int btn_keyboard_key_normal_lock_stone = 2130837528;
    public static final int btn_keyboard_key_normal_off_stone = 2130837529;
    public static final int btn_keyboard_key_normal_on_stone = 2130837530;
    public static final int btn_keyboard_key_normal_stone = 2130837531;
    public static final int btn_keyboard_key_popup_selected_holo = 2130837532;
    public static final int btn_keyboard_key_pressed_stone = 2130837533;
    public static final int btn_keyboard_key_stone = 2130837534;
    public static final int cancel = 2130837535;
    public static final int candidate_feedback_background = 2130837536;
    public static final int caution = 2130837537;
    public static final int dialog_bubble_step02 = 2130837538;
    public static final int dialog_bubble_step07 = 2130837539;
    public static final int highlight_pressed = 2130837540;
    public static final int hint_popup = 2130837541;
    public static final int ic_dialog_keyboard = 2130837542;
    public static final int ic_mic_dialog = 2130837543;
    public static final int ic_subtype_keyboard = 2130837544;
    public static final int ic_subtype_mic = 2130837545;
    public static final int ic_suggest_scroll_background = 2130837546;
    public static final int ic_suggest_strip_microphone = 2130837547;
    public static final int ic_suggest_strip_microphone_swipe = 2130837548;
    public static final int icon = 2130837549;
    public static final int keyboard_background = 2130837550;
    public static final int keyboard_dark_background = 2130837551;
    public static final int keyboard_key_feedback_background = 2130837552;
    public static final int keyboard_key_feedback_more_background = 2130837553;
    public static final int keyboard_popup_panel_background = 2130837554;
    public static final int keyboard_suggest_strip = 2130837555;
    public static final int keyboard_suggest_strip_divider = 2130837556;
    public static final int list_selector_background_pressed = 2130837557;
    public static final int mic_slash = 2130837558;
    public static final int ok_cancel = 2130837559;
    public static final int speak_now_level0 = 2130837560;
    public static final int speak_now_level1 = 2130837561;
    public static final int speak_now_level2 = 2130837562;
    public static final int speak_now_level3 = 2130837563;
    public static final int speak_now_level4 = 2130837564;
    public static final int speak_now_level5 = 2130837565;
    public static final int speak_now_level6 = 2130837566;
    public static final int sym_keyboard_123_mic = 2130837567;
    public static final int sym_keyboard_delete = 2130837568;
    public static final int sym_keyboard_done = 2130837569;
    public static final int sym_keyboard_feedback_123_mic = 2130837570;
    public static final int sym_keyboard_feedback_delete = 2130837571;
    public static final int sym_keyboard_feedback_done = 2130837572;
    public static final int sym_keyboard_feedback_language_arrows_left = 2130837573;
    public static final int sym_keyboard_feedback_language_arrows_right = 2130837574;
    public static final int sym_keyboard_feedback_mic = 2130837575;
    public static final int sym_keyboard_feedback_numalt = 2130837576;
    public static final int sym_keyboard_feedback_return = 2130837577;
    public static final int sym_keyboard_feedback_search = 2130837578;
    public static final int sym_keyboard_feedback_settings = 2130837579;
    public static final int sym_keyboard_feedback_shift = 2130837580;
    public static final int sym_keyboard_feedback_shift_locked = 2130837581;
    public static final int sym_keyboard_feedback_space = 2130837582;
    public static final int sym_keyboard_feedback_tab = 2130837583;
    public static final int sym_keyboard_language_arrows_left = 2130837584;
    public static final int sym_keyboard_language_arrows_right = 2130837585;
    public static final int sym_keyboard_mic = 2130837586;
    public static final int sym_keyboard_num0 = 2130837587;
    public static final int sym_keyboard_num1 = 2130837588;
    public static final int sym_keyboard_num2 = 2130837589;
    public static final int sym_keyboard_num3 = 2130837590;
    public static final int sym_keyboard_num4 = 2130837591;
    public static final int sym_keyboard_num5 = 2130837592;
    public static final int sym_keyboard_num6 = 2130837593;
    public static final int sym_keyboard_num7 = 2130837594;
    public static final int sym_keyboard_num8 = 2130837595;
    public static final int sym_keyboard_num9 = 2130837596;
    public static final int sym_keyboard_numalt = 2130837597;
    public static final int sym_keyboard_numpound = 2130837598;
    public static final int sym_keyboard_numstar = 2130837599;
    public static final int sym_keyboard_return = 2130837600;
    public static final int sym_keyboard_search = 2130837601;
    public static final int sym_keyboard_settings = 2130837602;
    public static final int sym_keyboard_shift = 2130837603;
    public static final int sym_keyboard_shift_lock = 2130837604;
    public static final int sym_keyboard_shift_locked = 2130837605;
    public static final int sym_keyboard_space = 2130837606;
    public static final int sym_keyboard_space_led = 2130837607;
    public static final int sym_keyboard_tab = 2130837608;
    public static final int voice_ime_background = 2130837609;
    public static final int voice_swipe_hint = 2130837610;
    public static final int working = 2130837611;

    public R$drawable()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$id {
    public static final int LatinKeyboardBaseView = 2131623947;
    public static final int LatinkeyboardBaseView = 2131623946;
    public static final int black = 2131623943;
    public static final int bold = 2131623940;
    public static final int bottom = 2131623936;
    public static final int button = 2131623958;
    public static final int button_text = 2131623959;
    public static final int candidates = 2131623945;
    public static final int image = 2131623956;
    public static final int italic = 2131623941;
    public static final int left = 2131623938;
    public static final int main_description = 2131623953;
    public static final int main_image = 2131623954;
    public static final int main_linear1 = 2131623948;
    public static final int main_setup_btn_configure_imes = 2131623949;
    public static final int main_setup_btn_get_dicts = 2131623952;
    public static final int main_setup_btn_input_lang = 2131623950;
    public static final int main_setup_btn_set_ime = 2131623951;
    public static final int mode_email = 2131623966;
    public static final int mode_email_with_settings_key = 2131623971;
    public static final int mode_im = 2131623967;
    public static final int mode_im_with_settings_key = 2131623972;
    public static final int mode_normal = 2131623964;
    public static final int mode_normal_with_settings_key = 2131623969;
    public static final int mode_symbols = 2131623974;
    public static final int mode_symbols_with_settings_key = 2131623975;
    public static final int mode_url = 2131623965;
    public static final int mode_url_with_settings_key = 2131623970;
    public static final int mode_webentry = 2131623968;
    public static final int mode_webentry_with_settings_key = 2131623973;
    public static final int normal = 2131623942;
    public static final int progress = 2131623957;
    public static final int right = 2131623939;
    public static final int seekBarPref = 2131623961;
    public static final int seekMax = 2131623963;
    public static final int seekMin = 2131623962;
    public static final int seekVal = 2131623960;
    public static final int text = 2131623955;
    public static final int top = 2131623937;
    public static final int white = 2131623944;

    public R$id()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$integer {
    public static final int config_delay_after_preview = 2131361794;
    public static final int config_delay_before_key_repeat_start = 2131361799;
    public static final int config_delay_before_preview = 2131361792;
    public static final int config_delay_before_space_preview = 2131361793;
    public static final int config_key_repeat_interval = 2131361800;
    public static final int config_mini_keyboard_fadein_anim_time = 2131361797;
    public static final int config_mini_keyboard_fadeout_anim_time = 2131361798;
    public static final int config_multi_tap_key_timeout = 2131361801;
    public static final int config_preview_fadein_anim_time = 2131361795;
    public static final int config_preview_fadeout_anim_time = 2131361796;
    public static final int key_alt_left = 2131361816;
    public static final int key_break = 2131361827;
    public static final int key_caps_lock = 2131361822;
    public static final int key_ctrl_left = 2131361821;
    public static final int key_delete = 2131361807;
    public static final int key_dpad_center = 2131361815;
    public static final int key_dpad_down = 2131361812;
    public static final int key_dpad_left = 2131361813;
    public static final int key_dpad_right = 2131361814;
    public static final int key_dpad_up = 2131361811;
    public static final int key_end = 2131361829;
    public static final int key_escape = 2131361819;
    public static final int key_f1 = 2131361810;
    public static final int key_fkey_f1 = 2131361831;
    public static final int key_fkey_f10 = 2131361840;
    public static final int key_fkey_f11 = 2131361841;
    public static final int key_fkey_f12 = 2131361842;
    public static final int key_fkey_f2 = 2131361832;
    public static final int key_fkey_f3 = 2131361833;
    public static final int key_fkey_f4 = 2131361834;
    public static final int key_fkey_f5 = 2131361835;
    public static final int key_fkey_f6 = 2131361836;
    public static final int key_fkey_f7 = 2131361837;
    public static final int key_fkey_f8 = 2131361838;
    public static final int key_fkey_f9 = 2131361839;
    public static final int key_fn = 2131361825;
    public static final int key_forward_del = 2131361820;
    public static final int key_home = 2131361828;
    public static final int key_insert = 2131361830;
    public static final int key_meta_left = 2131361824;
    public static final int key_num_lock = 2131361843;
    public static final int key_page_down = 2131361818;
    public static final int key_page_up = 2131361817;
    public static final int key_return = 2131361803;
    public static final int key_scroll_lock = 2131361823;
    public static final int key_settings = 2131361808;
    public static final int key_shift = 2131361805;
    public static final int key_space = 2131361804;
    public static final int key_symbol = 2131361806;
    public static final int key_sysrq = 2131361826;
    public static final int key_tab = 2131361802;
    public static final int key_voice = 2131361809;

    public R$integer()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$layout {
    public static final int bubble_text = 2130903040;
    public static final int candidate_preview = 2130903041;
    public static final int candidates = 2130903042;
    public static final int input_gingerbread = 2130903043;
    public static final int input_ics = 2130903044;
    public static final int input_stone_bold = 2130903045;
    public static final int input_stone_normal = 2130903046;
    public static final int input_stone_popup = 2130903047;
    public static final int input_trans = 2130903048;
    public static final int input_trans_neon = 2130903049;
    public static final int key_preview = 2130903050;
    public static final int keyboard_popup = 2130903051;
    public static final int main = 2130903052;
    public static final int null_layout = 2130903053;
    public static final int recognition_status = 2130903054;
    public static final int seek_bar_dialog = 2130903055;
    public static final int voice_punctuation_hint = 2130903056;
    public static final int voice_swipe_hint = 2130903057;

    public R$layout()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$raw {
    public static final int main = 2131099648;
    public static final int type3 = 2131099649;

    public R$raw()
    {
        return;
    }
}
package org.pocketworkstation.pckeyboard;
public final class R$string {
    public static final int added_word = 2131165433;
    public static final int alternates_for_a = 2131165187;
    public static final int alternates_for_a_umlaut = 2131165213;
    public static final int alternates_for_ae = 2131165214;
    public static final int alternates_for_b = 2131165188;
    public static final int alternates_for_c = 2131165189;
    public static final int alternates_for_comma = 2131165224;
    public static final int alternates_for_cyrillic_e = 2131165215;
    public static final int alternates_for_cyrillic_soft_sign = 2131165216;
    public static final int alternates_for_d = 2131165190;
    public static final int alternates_for_dot = 2131165225;
    public static final int alternates_for_e = 2131165191;
    public static final int alternates_for_f = 2131165192;
    public static final int alternates_for_g = 2131165193;
    public static final int alternates_for_h = 2131165194;
    public static final int alternates_for_i = 2131165195;
    public static final int alternates_for_j = 2131165196;
    public static final int alternates_for_k = 2131165197;
    public static final int alternates_for_l = 2131165198;
    public static final int alternates_for_m = 2131165199;
    public static final int alternates_for_n = 2131165200;
    public static final int alternates_for_o = 2131165201;
    public static final int alternates_for_o_umlaut = 2131165217;
    public static final int alternates_for_oe = 2131165218;
    public static final int alternates_for_p = 2131165202;
    public static final int alternates_for_q = 2131165203;
    public static final int alternates_for_r = 2131165204;
    public static final int alternates_for_s = 2131165205;
    public static final int alternates_for_singleQuot = 2131165220;
    public static final int alternates_for_t = 2131165206;
    public static final int alternates_for_u = 2131165207;
    public static final int alternates_for_v = 2131165208;
    public static final int alternates_for_w = 2131165209;
    public static final int alternates_for_x = 2131165210;
    public static final int alternates_for_y = 2131165211;
    public static final int alternates_for_z = 2131165212;
    public static final int alternates_for_